---

title: Avoiding delayed data
abstract: Roughly described, a network interface device receiving data packets from a computing device for transmission onto a network, the data packets having a certain characteristic, transmits the packet only if the sending queue has authority to send packets having that characteristic. The data packet characteristics can include transport protocol number, source and destination port numbers, source and destination IP addresses, for example. Authorizations can be programmed into the NIC by a kernel routine upon establishment of the transmit queue, based on the privilege level of the process for which the queue is being established. In this way, a user process can use an untrusted user-level protocol stack to initiate data transmission onto the network, while the NIC protects the remainder of the system or network from certain kinds of compromise.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09391840&OS=09391840&RS=09391840
owner: SOLARFLARE COMMUNICATIONS, INC.
number: 09391840
owner_city: Irvine
owner_country: US
publication_date: 20130307
---
This application claims the benefit of prior U.S. Provisional Patent Application No. 61 641 575 filed 2 May 2012 which application is incorporated herein by reference in its entirety.

The invention relates to apparatus and methods for avoiding delayed data being delivered to a network endpoint.

Data processing systems connected together over a network exchange messages in accordance with one or more network protocols or combinations of network protocol layers. For example personal computers connected to the internet communicate with one another by at least TCP IP. Network protocols typically make a best effort to deliver network messages to a network endpoint even if that means that a network message arrives late or out of order at its destination. This is because generally it is most important that a network is reliable.

However the techniques used to ensure that a network protocol is reliable can often result in messages being delayed. In addition physical factors such as physical breaks in connectivity faulty equipment or the distance of transmission can contribute to message delays and lead to messages arriving significantly after the transmitting software might have expected.

For many applications the reliability of a network connection will be paramount and occasional message delays can be tolerated. For other applications however delayed messages are to be avoided and it is preferable that messages are discarded rather than arriving late at their destination. An example application where it is of particular importance to avoid delayed messages is in electronic financial markets. In these situations there is a generally a financial advantage to making trades ahead of competitors since the trades are typically placed in very rapidly moving markets and the margin on any given trade is small. In order to execute a trade a trading platform transmits messages over a network to an electronic exchange. If those messages are delayed the market conditions on which the trade was predicated could shift and the trade represented by the messages could change from being favourable to detrimental.

There is therefore a need for methods that enable applications to avoid delayed messages being delivered to a network endpoint. However since the protocols in use over trading networks are well established it is important that such methods are compatible with existing network protocols.

According to a first aspect of the present invention there is provided a data processing system for selectively transmitting data onto a network the data processing system comprising an application configured to form data for transmission and cause a timestamp to be generated and associated with the data for transmission a network protocol stack configured to form the data for transmission into one or more network messages for transmission over a network connection the one or more network messages being associated with the timestamp and a delay determination unit configured to immediately prior to the one or more network messages being transmitted onto the network by means of a network interface device check the timestamp to determine the time elapsed from the time represented by the timestamp and if the time elapsed is greater than a maximum period cause the one or more network messages to be discarded.

Preferably the network protocol stack is configured to generate the timestamp in response to the application requesting transmission of the data for transmission. Preferably the application is configured to request transmission of the data for transmission by means of one or more calls to a socket library. Alternatively the application is configured to generate the timestamp on forming the data for transmission and the network protocol stack is configured to receive the timestamp on accessing the data for transmission. Preferably the timestamp indicates the time at which the timestamp is generated.

Preferably the network protocol stack is configured to include the timestamp in the one or more network messages optionally in the metadata of the one or more network messages.

Preferably the delay determination unit is provided at the network interface device. Preferably the delay determination unit is provided at the interface controller of the network interface device.

Preferably the network interface device includes a DMA controller and the delay determination unit is configured to check the timestamp in response to the DMA controller retrieving the one or more network messages from a transmit queue of the data processing system

Alternatively the network protocol stack includes the delay determination unit and the delay determination unit is configured to check the timestamp on queuing the one or more network messages at a transmit queue for retrieval by the network interface device.

Suitably on discarding the one or more network messages the network connection is reset or the transmission of any further network messages over the network connection is disabled.

Preferably the network protocol stack is configured to notify the application if the one or more network messages are discarded.

Preferably the network protocol stack is configured to on generating a network message for retransmission include in the network message for retransmission the timestamp included in the original network message for transmission.

Preferably the data processing system further comprises a control interface by means of which the application can specify the maximum period to the delay determination unit for the network connection or in respect only of the data for transmission.

Preferably the control interface is further configured to in response to a suitable request from the application cause the network protocol stack to indicate to the application those network messages that have been discarded by the delay determination unit.

Preferably the control interface is further configured to in response to a suitable request from the application cause the network protocol stack to indicate to the application whether the network connection has been reset or disabled.

Preferably the delay determination unit is configured to if the time elapsed does not exceed the maximum period allow the one or more network messages to be transmitted onto the network by means of the network interface device and the network protocol stack is configured to on an acknowledgement message being received from the remote endpoint of the network connection indicating that the remote endpoint has received one or more of the network messages generating an acknowledgment timestamp so as to record when the acknowledgement message is received at the data processing system.

Preferably the control interface is further configured to in response to a suitable request from the application cause the network protocol stack to provide a representation of the acknowledgment timestamp to the application.

Suitably the application is further configured to provide the maximum period to the network protocol stack with the data for transmission.

Preferably the delay determination unit is configured to on causing one or more network messages to be discarded cause an event indicating which network messages have been discarded to be written to an event queue of the application.

According to a first aspect of the present invention there is provided a method for selectively transmitting data onto a network from a data processing system supporting at least one application and a network interface device the at least one application being operable to transmit data over a network by means of the network interface device the method comprising forming data for transmission at an application generating a timestamp and associating the timestamp with the data for transmission subsequently forming the data for transmission into one or more network messages for transmission over the network the one or more network messages being associated with the timestamp and immediately prior to the one or more network messages being transmitted onto the network checking the timestamp to determine the time elapsed from the time represented by the timestamp and if the time elapsed is greater than a maximum period causing the one or more network messages to be discarded.

According to a second aspect of the present invention there is provided a method for avoiding retransmission of network messages at a data processing system supporting an application and a network protocol stack operable to transmit network messages in accordance with a network communication protocol supporting message retransmission the method comprising forming a network message from data provided by an application the application indicating that retransmissions are to be disabled in respect of the network message the network protocol stack causing the network message to be transmitted over a network connection and on the expiry of a retransmission period without an acknowledgement being received at the network protocol stack in respect of the transmitted network message the network protocol stack discarding the network message and abandoning the message retransmission.

Suitably the expiry of the retransmission period is indicated by the expiry of a retransmission timer established by the network protocol stack. Alternatively the expiry of the retransmission period is indicated by a notification received from the remote endpoint of the network connection that the network message has not been received.

Preferably the network communication protocol is TCP and the method further comprises if a plurality of duplicate TCP acknowledgement messages are received prior to the expiry of the retransmission period the network protocol stack suppressing retransmission of the network message according to the TCP fast retransmission algorithm.

Preferably the application is configured to indicate to the network protocol stack that retransmissions are to be disabled in respect of the network connection by means of a control interface. Alternatively the application is configured to indicate to the network protocol stack that retransmissions are to be disabled in respect of the network message by means of a notifier provided with the data from which the network message is formed.

According to a third aspect of the present invention there is provided a method for filtering data in a communication system comprising first and second data processing systems connected to a network each of the first and second data processing systems supporting an application and a network interface device the method comprising at a first data processing system signaling to a second data processing system a first maximum period forming a network message from data provided by an application of the first data processing system the network message including a timestamp and a network interface device of the first data processing system transmitting the network message over a network connection to the second data processing system and at the second data processing system receiving the network message determining the time elapsed since the time represented by the timestamp and if the time elapsed since the time represented by the timestamp exceeds the first maximum period discarding the network message.

Preferably the step of forming the network message is performed at a network protocol stack of the first data processing system configured to generate the timestamp in response to the application of the first data processing system requesting transmission of the data. Preferably the timestamp indicates the time at which the timestamp is generated. Preferably the network protocol stack is configured to include the timestamp in metadata of the network messages.

Suitably the step of signaling the first maximum period comprises including the first maximum period in metadata of the network messages.

The step of signaling the first maximum period could comprise signaling the first maximum period in respect of the network message the network connection and all of the network connections of the application at the first data processing system.

Preferably the step of signaling the first maximum period is performed during negotiation of the network connection. Suitably the network connection is a TCP connection and the signaling step is performed during the SYN SYN ACK handshake.

Suitably the step of discarding the network message comprises closing the network connection or disabling transmission of any further network messages over the network connection.

Preferably the step of determining the time elapsed since the time represented by the timestamp is performed in response to an application at the second data processing system requesting reception of the network message the application at the second data processing system being the endpoint of the network connection.

Preferably the application at the second data processing system requests reception of the network message by means of a socket library of the second data processing system.

Preferably the method further comprises prior to transmitting the network message the first data processing system determining the time elapsed since the time represented by the timestamp and if the time elapsed since the time represented by the timestamp exceeds a second maximum period discarding the network message and not transmitting the network message over the network connection.

Preferably the method further comprises the step of synchronising clocks at the first and second data processing systems in accordance with an IEEE 1588 protocol.

Preferably the method further comprises if the time elapsed since the time represented by the timestamp exceeds the first maximum period a network protocol stack of the second data processing system notifying the application of the first data processing system that the network message has been discarded.

Preferably notifying the application that the network message has been discarded comprises indicating to the application of the first data processing system that the network message has not been delivered to its endpoint and or that the network connection has been reset and or that further transmissions over the network connection have been disabled.

Preferably the method further comprises at the second data processing system if the time elapsed since the time represented by the timestamp does not exceed the first maximum period delivering the network message to an application of the second data processing system forming a notification message including an indication of the time at which the network message is delivered to the application of the second data processing system and transmitting the notification message to first data processing system.

Preferably the notification message is directed to a network protocol stack of the first data processing system and the application of the first data processing system is operable to access the indication of the time at which the network message is delivered by means of a control API at the first data processing system.

The following description is presented to enable any person skilled in the art to make and use the invention and is provided in the context of a particular application. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art.

The general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention. Thus the present invention is not intended to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The present invention relates to methods and apparatus for ensuring that delayed network messages are not sent or received if the delay exceeds a specified or predetermined length of time. The present invention is described by way of example with reference to the TCP communication protocol in particular but its use is not limited to any particular protocol and the methods described herein could be employed with any suitable protocol known in the art. The network protocol processing stacks described herein could be any kind of protocol stack including a hardware stack supported at a network interface device a kernel or user level software stack or a stack comprising any combination of hardware and software protocol processing elements.

A data processing system and network interface device configured in accordance with the present invention are shown in . Network interface device provides an interface to network for data processing system . The data processing system comprises an operating system supporting at least one application and a network protocol stack configured to perform processing in accordance with the one or more network protocols in use over network interface device . The network protocol stack could be for example provided at the operating system as a kernel level software entity in the application domain as a user level network stack in hardware at the network interface device or other peripheral device or at a combination of any of these as a set of interacting protocol processing elements.

As is well known in the art application is configured to transmit and receive data by means of requests to a suitable application programming interface API . For example on a Linux system transmit and receive operations can be performed by an application using send and recv calls to a socket library API. Thus when application has data to transmit it makes a call to API so as to request transmission of that data. Typically the call includes a reference to the location of the data to be transmitted in host memory and an indication of the destination to which the data is to be transmitted. This information allows network stack to access the data for transmission and perform the necessary protocol processing in order to properly form the data into one or more network messages for transmission over network .

When an application requests transmission of data by means there is generally some delay before a network message comprising that data is physically transmitted onto the wire over network . A small intrinsic delay is inescapable due to the finite time it takes to perform packet processing at the stack and to pass data to the network interface device. This delay can at times be exacerbated by a lack of available processor cycles for the network stack and congestion at the host memory or peripheral buses but these delays can be minimised through good design of the data processing system and network interface device.

With modern computer systems the most significant delays to the transmission of data onto the network tend to be a result of constraints imposed by the network hardware or the protocols in use on the network. For example there may be constraints imposed on how much data can be in flight on a given network segment or network hardware can become busy servicing other requests to push messages onto the network. To give two particular examples 

the TCP protocol uses the concepts of a receive window and a congestion window to limit the rate at which a sender can push data onto a network 

Ethernet networks require the use of ARP Address Resolution Protocol to discover the MAC address of one or more other hosts before an Ethernet packet can be transmitted.

Even with good network design the transmission of network messages can often be delayed and a host must therefore queue data packets until it is possible for the messages to be sent. In many scenarios such delays are acceptable however as has been discussed for applications such as high speed financial trading such delays can mean the difference between profit and loss.

A first aspect of the present invention provides a mechanism by which network messages that are delayed by greater than a specified or predetermined length of time are prevented from being transmitted onto the network. Data processing system is configured to timestamp data for transmission on the application requesting that the data is transmitted over the network. Preferably this is performed by network protocol stack in response to a call from application to API . The call could be a conventional call to request transmission of data e.g. a send call with the network stack being configured to perform the timestamp in response. In preferred embodiments network protocol stack is a user level stack and API is a socket library or interposed library configured to intercept socket calls directed to a socket library provided by the operating system .

Alternatively the timestamp could be performed by the application itself or at any other entity of the data processing system and passed to the network stack for inclusion in the respective network messages. For example API could be an API provided specifically to allow the application to pass timestamps to the network stack or to allow the application to request that some entity of the system perform the timestamp and associate the timestamp with the data for transmission.

The timestamp indicates the time at which the application requested the transmission of the data the timestamp from the point of view of either the application or the timestamping entity or the time at which the application itself formed the data. The timestamp is associated at the network stack with the application data for transmission and when the network stack forms the application data into one or more messages for transmission over the network the network stack maintains the association of the timestamp with the network message. This is preferably achieved by including the timestamp or a representation thereof in the network message.

The timestamp could be included in the payload data of a network packet the headers of a network packet or it could be merely associated with a network message at the network stack. It can be advantageous to include the timestamp in the metadata of the network message so as to not interfere with conventional processing of the network message at the receiver in accordance with the network protocols in use over the connection. For example if the network message is formed in accordance with the TCP protocol the timestamp could be included in a TCP option field of the TCP header.

As has been discussed above once the network stack has formed the application data into one or more network messages the messages are typically enqueued at transmit queues to await transmission by the network interface device. Note that the network messages are not necessarily complete since additional protocol processing layers may be performed by other elements of the data processing system or network interface device e.g. the NIC would typically be configured to complete one or more checksums for the network message . When it is possible for a network message to be transmitted over the network its timestamp is checked in order to determine whether the delay experienced by the message is less than a predetermined or specified maximum delay if not the message is discarded so as to avoid transmitting stale messages onto the network. For example if the application requested transmission at timestamp t1 and the network interface device performed a check of the timestamp at t2 the network message would be discarded if the time difference between t1 and t2 is greater than the predetermined or specified maximum delay.

Preferably the network interface device includes a delay determination unit configured to perform the timestamp check on retrieving the network message for transmission over the network typically the network message would be held at a transmit queue in host memory but it could be at a buffer of the network interface device . For example the network interface device could be configured to perform the timestamp check in response to retrieving a network message from a transmit queue of the host by DMA. Most preferably the timestamp check is performed at an interface controller of the network interface device. Alternatively an entity of the data processing system e.g. part of the network stack or a kernel driver could include the delay determination unit and perform the timestamp check prior to queuing the message for transmission. If the timestamp is carried in the network message the timestamp could be stripped from the message once the check has been performed.

The maximum delay could be a predetermined value set at the entity configured to perform the timestamp check but preferably the maximum delay is specified by the application since this allows the application to select a value suitable for the network connection. Thus if the application were executing trades over one or more connections the application could specify a maximum delay for those connections such that stale trades that risk making a loss are not transmitted onto the network. The application could be configured to specify a maximum delay on a per message basis and this maximum delay value could be provided with each network message for transmission for example a maximum delay value could be included with the timestamp in metadata of the network message.

It is advantageous if a control API is provided to allow the application operating system or other entity of the data processing system to set the maximum delay system wide i.e. for all messages on all connections or on a per connection or per packet basis. The control API could form part of API through which the application requests data transmission or could be a separate API provided at the data processing system. The control API would provide an interface to one or more software libraries through which the network interface device or other entity configured to perform the timestamp checking can have its maximum delay parameter s configured.

The control API could provide an interface by means of which the application or network stack could discover which messages are discarded due to having been delayed by greater than the respective maximum delay. Alternatively and preferably the entity configured to check the timestamp is configured to cause an event message to be passed up to the application and or network stack so as to indicate to the application which network messages have been discarded. The application network stack could have a dedicated event queue to receive such messages. Alternatively any other notification mechanisms known in the art could be used to pass indications to the application network stack as to which messages have been discarded.

It can be advantageous if the network protocol stack is configured to monitor the acknowledgements received in respect of network messages subject to the above described timestamp mechanism. The network protocol stack could be configured to timestamp acknowledgements received over such a network connection e.g. for a TCP connection ACK packets or record the time at which such acknowledgements are received. This behaviour can be useful if the remote endpoint does not support the timestamping mechanism described below in relation to the third aspect of the present invention since it allows the transmitting system to at least roughly identify when the remote endpoint is likely to be receiving its network messages. Most preferably the control API would be configured to provide the acknowledgement timestamps to the application in response to one or more predetermined calls from the application to the API.

Since many network protocols require that data packets are received in order e.g. TCP it may be necessary to at least partially take down a connection if a network message is discarded. If the network protocols in use over a connection allow it is preferable that a connection continues when a message is discarded in accordance with the mechanism described herein. However if the network protocols in use over a connection do not allow such behaviour the network connection is either closed and the transmission of all remaining messages for transmission over that connection abandoned or preferably the sending of the discarded network message and all subsequent network messages is disabled for that connection i.e. the connection is maintained sufficient to receive network messages such as acknowledgements but transmission is disabled . Preferably the application can select whether in such circumstances a connection is closed or merely disabled for transmissions this could be by means of the control API. In cases in which a network connection is closed or transmission over a network connection is disabled the application or network stack can be informed by any of the notification mechanisms discussed above with the notification of the network message at which the connection was closed or disabled typically being sufficient to notify the application network stack of all of the network messages which have been abandoned or discarded.

Many network protocols provide message retransmission mechanisms to improve the reliability of network connections and deal with the occasional loss of messages on the network. Any message that is dropped and later retransmitted will inevitably be subject to a delay at least equal to the retransmission period. Furthermore with network protocols that require messages to be delivered in order message retransmission may affect subsequent messages on the same connection as those messages may need to wait for the missing message before being received at the destination endpoint.

A second aspect of the present invention provides a mechanism by which an application can disable message retransmissions. This mechanism could be used with a data processing system and network interface device configured in accordance with the first aspect of the present invention. Application is able to indicate to network protocol stack that retransmissions are to be disabled this indication could be in respect of one or more network connections or on a per message basis. This indication does not cause the network stack to modify the network protocols in use over the respective connections and if a network protocol supports message retransmissions the protocol will proceed to set up retransmission timers etc. in the usual manner. However in response to receiving the indication that retransmissions are to be disabled network stack is configured to discard any network messages that are retransmissions of earlier messages and end the retransmission process. In this manner no retransmission of network messages occurs for those connections or network messages identified in the application s indication.

The application could be configured to indicate that retransmissions are to be disabled in respect of data for transmission by passing a suitable request to the network stack. Such a request could be made by any suitable mechanism known in the art including by means of an API such as the control API discussed above or an extension to socket library API that allows the application to indicate whether retransmissions are to be disabled in respect of data for transmission or one or more connections when the application requests that the respective data is transmitted. Alternatively the application could be configured to set a flag e.g. in memory or at a file to indicate whether transmissions are to be disabled for data or for one or more connections with the network stack being configured to check the flag on retrieving the respective data from the application buffers.

Network protocols use different mechanisms for scheduling message retransmission. For example some protocols such as TCP set a timer once a message is transmitted and if that message is not acknowledged within a certain period the message is retransmitted. Multiple retransmissions are possible and generally the retransmission period is chosen to be slightly longer than the total round trip required for a transmitter and receiver to exchange messages typically at least 200 ms. Other protocols arrange that retransmission occurs on a message being receive from the remote endpoint of a connection indicating that an expected message has not been received within a certain period of time and or that messages have been received out of order. The second aspect of the present invention can be used with whichever mechanism is used to determine when a message is to be retransmitted when that retransmission is due to occur the network stack does not perform the retransmission and discards the message.

TCP in particular provides a second so called fast retransmission algorithm according to which message loss can be indicated by a remote receiver by means of a sequence of usually 3 duplicate acknowledgements. When a TCP transmitter receives such a sequence of duplicate acknowledgements in respect of a message the transmitter is generally being informed that the receiver has not received the message and so retransmits the message. However false positives are common with fast TCP retransmissions and for many applications it can be advantageous to avoid such retransmission behaviour. It is therefore preferable that for connections or messages using the first aspect of the present invention the network stack is configured to suppress the retransmission of data packets according to the fast retransmission algorithm. This avoids network messages being discarded and or network connections being taken down unnecessarily due to false positives if a network message truly is lost the TCP retransmission timer will eventually expire and the message will be discarded at this point.

As described above in relation to the first aspect of the present invention it is preferable that means are provided to notify the application as to which network messages have been discarded. In the case that the application is an electronic trading system this allows the system to keep track of which trades were transmitted onto the network and at least attempted to be placed at the electronic exchange. Any of the notification means described above in relation to the first aspect of the present invention could be used to notify that retransmission data packets have been discarded.

Furthermore for the same reasons set out in relation to the first aspect of the present invention for certain network protocols it will be necessary to at least partially take down a connection if a network message is discarded. If the network protocols in use over a connection allow it is preferable that a connection continues when a message is discarded in accordance with the mechanism described herein. However if the network protocols in use over a connection do not allow such behaviour the network connection is either closed and the transmission of all remaining messages for transmission over that connection abandoned or preferably the sending of the discarded network message and all subsequent network messages is disabled for that connection i.e. the connection is maintained sufficient to receive network messages such as acknowledgements but transmission is disabled . Preferably the application can select whether in such circumstances a connection is closed or merely disabled for transmissions this could be by means of the control API. In cases in which a network connection is closed or transmission over a network connection is disabled the application or network stack can be informed by any of the notification mechanisms discussed above with the notification of the network message at which the connection was closed or disabled typically being sufficient to notify the application network stack of all of the network messages which have been abandoned or discarded.

The first and second aspects of the present invention are preferably combined. In such a system the retransmission of a message can be permitted if when the retransmitted message is to be transmitted the total delay since the original message was formed requested does not exceed the predetermined or specified maximum delay allowed for the original message. This can be arranged by enforcing the timestamp check mechanism of the first aspect of the present invention for retransmission messages and configuring the network stack to ensure that the timestamp carried in the original message is copied over to the retransmission message. If when a retransmission message is to be transmitted the timestamp check reveals that the retransmission message is delayed by more than the predetermined or specified maximum delay which would be very likely for electronic trading systems the retransmission message is discarded.

Sometimes even when a message has been successfully transmitted onto a network within the maximum delay period of the first aspect of the present invention the message can experience delays traversing the network and will not arrive at the receiver in a timely fashion. As an addition to or an alternative to the first aspect of the present invention a third aspect of the present invention is provided according to which a receiver is configured to discard messages whose reception is delayed by more than a predetermined or specified length of time.

A transmitting data processing system and a receiving data processing system are shown connected by a network in . Transmitting system is configured to cause network messages transmitted onto the network by network interface device to be timestamped with an indication of the time when application formed the data for transmission or requested transmission of that data. This timestamping can be performed according to any of the mechanisms described in relation to the first aspect of the present invention provided that the timestamp is included in the message transmitted over the network.

In a preferred embodiment network stack is configured to timestamp data for transmission on the application requesting that that data is transmitted. The application would generally make such a transmit request by means of socket library . The timestamp is a representation of the time at which the network stack receives the transmit request and is subsequently included in the one or more network messages formed in respect of the data to be transmitted. Preferably the timestamp is included in metadata of the network messages for example if the messages are being transmitted in accordance with the TCP protocol the timestamp could be included in a TCP option field.

Network messages transmitted from transmitter system over network are received at the network interface device of the receiver system and the timestamp is checked at a delay determination unit in order to determine whether the time elapsed since the time represented by the timestamp exceeds a predetermined or specified maximum delay. The delay determination unit could be at the network interface device. For example the timestamp check could be performed at a controller of network interface device on receiving the message or on writing the message to a receive queue of the host data processing system . The important aspect of the receiver behaviour is that the received message is not delivered to its endpoint if it has been delayed by greater than the maximum delay.

Preferably the delay determination unit is provided at receiver network stack or another entity of the data processing system. For example generally the endpoint would be an application configured to submit receive requests e.g. a recv call to a socket library so as to cause messages receive for the application to be delivered into its buffers. The timestamp check of received messages is most preferably performed at the network stack in response to such a receive request from application or the operating system or another software entity of the system . It is further preferable that the timestamp check is performed in response to requests for the presence of available data for the application such as poll select etc. The stack could be configured to check the timestamps of all of the messages held at a receive queue in response to a receive request or request to test the presence of data at the receive queue. The socket library would preferably maintain a record of the messages that have been checked in order to avoid duplication of effort.

The receiver could check received timestamps against a predetermined default maximum delay but preferably the transmitting system is able to indicate to the receiving system the desired maximum delay on a system wide basis i.e. for all its connections on a per connection basis or on a per message basis. The transmitting entity for example application could be configured to provide a maximum delay to the network stack for inclusion in the respective network messages e.g. in the metadata of the messages . Preferably the application and any other entities at the transmitting system is provided with an API by means of which the application other entity can specify the desired maximum delay for each or all of its connections. This API could be the control API discussed above.

It is advantageous if the network stacks of the transmitter and receiver are configured to negotiate the use of timestamp enforcement at the receiver. This would establish whether the receiver and transmitter support this feature and therefore whether a the transmitter need timestamp network messages and b the receiver need perform timestamps checks. This negotiation could be performed by means of a dedicated handshake protocol during connection setup or through extension of an existing handshake process. For example the negotiation could be performed as part of the SYN SYN ACK connection opening handshake for a TCP connection. The transmitter and receiver could advertise to one another whether they support the timestamp feature and optionally specify a value for the maximum permitted delay. If both ends support the feature then it can be used on the connection otherwise it is not used though the transmitter could still generate timestamps for enforcement at the transmitter in accordance with the first aspect of the present invention .

As described above in relation to the first aspect of the present invention it is preferable that means are provided to notify the transmitting application as to which network messages have been discarded. In the case that the application is an electronic trading system this allows the system to keep track of which trades were transmitted onto the network and at least attempted to be placed at the electronic exchange. This can be achieved by arranging that the network stack of the receiver is configured to transmit one or more messages to the transmitter identifying the discarded messages and or the disablement or closure of the connection.

It can also be useful to arrange that the receiving system notify the transmitting when network messages are delivered to their endpoint. This can be achieved by arranging that the network stack of the receiving system form network messages or acknowledgement data packets comprising an indication of the time e.g. a timestamp at which one or more network messages were delivered to their endpoint. For example for a TCP connection a reception timestamp could be included in an ACK returned to the transmitting system. Such messages acknowledgements could be delivered to the transmitting application or preferably to the network stack of the transmitting system and be accessible to the application by means of a suitable software interface. In the case in which the transmitting application is trading software this mechanism allows the trading software to better form a picture of the delay its messages are experiencing and place trades accordingly.

A control API which could be the same API as discussed above could provide means by which the application could query when and whether each network message it transmits reaches its endpoint based on the notifications acknowledgements received by the network stack. If the receiving system does not support such a notification mechanism the control API could be configured to indicate whether a network message is received at the receiving system typically this would be reported by an acknowledgement message e.g. for TCP an ACK message is returned to the sender when a message is received by the receiving stack . The time at which the ACK message is received at the transmitting protocol stack could additionally be reported to a querying application.

Furthermore for the same reasons set out in relation to the first and second aspects of the present invention for certain network protocols it will be necessary to at least partially take down a connection if a network message is discarded. If the network protocols in use over a connection allow it is preferable that a connection continues when a received message is discarded in accordance with the mechanism described herein. However if the network protocols in use over a connection do not allow such behaviour the network connection is either closed and the transmission of all remaining messages over that connection by the transmitter is abandoned or preferably the received network message is discarded and the transmission of subsequent network messages by the transmitter is disabled for that connection i.e. the connection is maintained as a one way connection allowing the receiver system to transmit messages such as acknowledgements to the transmitter system but the transmitter is not permitted to continue transmitting messages to the receiver . The application could be configured a connection is taken down or only that transmissions are disabled during negotiation of a connection.

In order for the receiving system to accurately determine from its timestamp the delay experienced by a network message the clocks of the receiving and transmitting systems must be synchronised. This could be achieved using one of the IEEE 1588 Precision Time Protocols.

In preferred embodiments of the present invention the first and third aspects of the present invention are combined such that the timestamp of a message is checked at both the transmitting and receiving systems. There could be separate timestamps for the transmitter and receiver i.e. the timestamp described in relation to the first aspect of the present invention could be different to the timestamp described in relation to the third aspect of the present invention. It is preferable however that these timestamps are one and the same. Similarly both receiver and transmitter could use the same or different maximum delay values.

Most preferably the first second and third aspects of the present invention can be combined such that the timestamp of a message is checked at both the transmitting and receiving systems and retransmission messages are discarded or transmitted only if the net delay experienced by the data carried in the retransmission message does not exceed the predetermined or specified maximum transmission delay.

For electronic trading systems the maximum acceptable delay for a message would typically be between 10 microseconds and 1 millisecond and could be for example 50 microseconds 100 microseconds or 500 microseconds.

The delay determination unit described herein need not be a discrete hardware or software unit and could be a functionality provided by a software entity such as a network stack or a hardware entity such as an interface controller .

A data processing system as described herein could include delay determination units configured to check the timestamp of network messages that are both to be transmitted and received from other data processing systems. The same or different delay determination units could be configured to check outgoing and incoming network messages.

The applicant hereby discloses in isolation each individual feature described herein and any combination of two or more such features to the extent that such features or combinations are capable of being carried out based on the present specification as a whole in the light of the common general knowledge of a person skilled in the art irrespective of whether such features or combinations of features solve any problems disclosed herein and without limitation to the scope of the claims. The applicant indicates that aspects of the present invention may consist of any such individual feature or combination of features. In view of the foregoing description it will be evident to a person skilled in the art that various modifications may be made within the scope of the invention.

