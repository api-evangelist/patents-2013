---

title: Application wrapping system and method
abstract: The method administers an enterprise computing system that includes a plurality of user mobile computing devices. The method includes selecting a pre-written application for inclusion in a menu of enterprise applications downloadable to a user computing device, allowing the user computing device to download the pre-written application, and interposing an application wrapper on the pre-written application before allowing the user computing device to download the pre-written application, the application wrapper being configured to control an operation of the pre-written application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535674&OS=09535674&RS=09535674
owner: BMC SOFTWARE, INC.
number: 09535674
owner_city: Houston
owner_country: US
publication_date: 20131220
---
This application claims the benefit of U.S. Provisional Patent Application 61 745 511 filed on Dec. 21 2012 entitled Application Wrapping System and Method the entire contents of which are incorporated herein by reference.

Embodiments relate to software and mobile computing devices. More specifically it relates to the distribution and control of pre built or commercially available applications and the implementation of rules and policies associated with those applications.

Applications developed for mobile devices are distributed in a package containing the necessary elements to run the application such as the program code resources assets certificates and manifest. Typically an application is compiled from the source code and then packaged with the required elements. An application package is then signed and distributed to a device or emulator.

Application wrapping is a method of adding a layer to an existing mobile application binary file to add features or modify behavior without requiring changes to the underlying existing application. For example native iOS or Android applications can be wrapped to add a management layer to the existing application. In this way a system administrator can exert control over an application and can set specific rules and policies to be applied to an application or group of applications. Example policies include whether or not user authentication is required for a specific application whether or not data associated with the application can be stored on the device and whether or not specific Application Program Interfaces APIs such as copy paste or file sharing are allowed. Other example policies can include when the application can run such as for example day and time of day and the location from which it can run.

In an enterprise environment application wrapping increases the level of control and the ease with which control can be applied to specific end users and applications. Application wrapping reduces the risk to the enterprise of unauthorized or improper use of mobile applications. For example an administrator can take an application add extra security and management features to it and then deploy it in the enterprise as a single application package via an enterprise app store.

Typically application wrapping methods are part of the application compilation workflow process. There is a need however for technique to wrap pre built or commercial applications without the involvement of the developer.

Existing technique focuses on application security for non commercial applications namely applications developed in house. Nonetheless the majority of mobile applications are commercially developed and available via app stores. There is a need for technique to support new license management models where the identity of an enterprise customer can be associated with an application for the purposes of license management and also application authorization and security policy enforcement.

Existing Mobile Device Management MDM technique for example relates to securing and managing devices deployed across an enterprise and does not provide the functional benefits enabled by the present application wrapping technique.

Other existing approaches include a the use of virtual machines b a developer writing the added functionality from scratch or using a library and c having the device itself provide the functionality.

One embodiment includes a method that administers an enterprise computing system that includes a plurality of user mobile computing devices. The method includes selecting a pre written application for inclusion in a menu of enterprise applications downloadable to a user computing device allowing the user computing device to download the pre written application and interposing an application wrapper on the pre written application before allowing the user computing device to download the pre written application the application wrapper being configured to control an operation of the pre written application.

Implementations can include one or more of the following features. For example the pre written application can be downloaded from the menu of enterprise applications. The downloading can be performed indirectly via an intermediate server. For example the application wrapper can be configured to control distribution and use of the pre written application. The application wrapper can be configured to verify that the user is authorized to download the pre written application.

For example the application wrapper can be configured to control storage of data associated with the pre written application in the user computing device. The data can be fetched by the pre written application. The data can be generated by the pre written application. For example the controlling of the storage of data can include prohibiting storage of data associated with the pre written application in the user computing device.

For example the application wrapper can be configured to control access to an application program interface API . The API can be configured to at least one of cut copy and paste data between or within applications and the application wrapper can be configured to interact with the API in order to control one of the cut copy and paste data between or within applications. The API can be configured to control file sharing between or within applications and the application wrapper can be configured to interact with the API in order to control file sharing between or within applications. For example the application wrapper can be configured to impose at least one of day and time of day restrictions and or location of use restrictions on operating the pre written application.

Another embodiment includes an enterprise computing system including a plurality of user computing devices. The system includes a menu of enterprise applications downloadable to a user computing device code segments that when executed by a processor enable the user computing device to download a pre written application and code segments that when executed by a processor administer an application wrapper configured to control operation of the pre written application.

Implementations can include one or more of the following features. For example the pre written application can be downloaded from the menu of enterprise applications. The downloading can be performed indirectly via an intermediate server. For example the code segments that administer the application wrapper can be configured to verify that the user computing device is authorized to download the pre written application.

For example the code segments that administer the application wrapper can be configured to control storage of data associated with the pre written application in the user computing device. The data can be fetched by the pre written application. The data can be generated by the pre written application. The code segments that administer the application wrapper can be configured to prohibit storage of data associated with the pre written application in the user computing device.

For example the code segments that administer the application wrapper can be configured to control access to an application program interface API . The API can be configured to at least one of cut copy and paste data between or within applications and the application wrapper can be configured to interact with the API in order to control one of the cut copy and paste data between or within applications. The API can be configured to control file sharing between or within applications and the application wrapper can be configured to interact with the API in order to control file sharing between or within applications. For example the code segments that administer the application wrapper can be configured to impose at least one of day and time of day restrictions and or location of use restrictions on operating the pre written application.

It should be noted that these Figures are intended to illustrate the general characteristics of methods structure and or materials utilized in certain example embodiments and to supplement the written description provided below. These drawings are not however to scale and may not precisely reflect the precise structural or performance characteristics of any given embodiment and should not be interpreted as defining or limiting the range of values or properties encompassed by example embodiments. For example the relative thicknesses and positioning of molecules layers regions and or structural elements may be reduced or exaggerated for clarity. The use of similar or identical reference numbers in the various drawings is intended to indicate the presence of a similar or identical element or feature.

Mobile application also known as a mobile app or an app Application software written for mobile computing devices.

Application wrapping A method of adding a layer to an existing application e.g. mobile application binary code to add features or modify functionality without requiring changes to the underlying existing application.

Application or app wrapper A layer of code added to existing application e.g. mobile application binary code for the purposes of adding features or modifying behavior of the underlying application.

Application Package Software including an application and the necessary elements to run the application such as the program code resources assets runtime certificates and or manifest.

While example embodiments may include various modifications and alternative forms embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit example embodiments to the particular forms disclosed but on the contrary example embodiments are to cover all modifications equivalents and alternatives falling within the scope of the claims. Like numbers refer to like elements throughout the description of the figures.

As a result example app wrapping techniques may be applicable to a app wrapping where functionality is added to the application package and resides inside the application package and b app wrapping where some or all or the added functionality resides outside the application package and can be updated without re wrapping.

The app wrapper from can intercept a system event such as the ones shown in and perform a different type of interception based on the application state time or other factor. System events may be exposed to components of example app wrapping techniques by implementing a method callback for example.

The app wrapper can for example intercept an onResume system event and perform checking to verify a user is permitted to run the application. At an onPause system event the app wrapper can intercept the event and write secure data before the application is terminated for example. Secure data can be written for example on a disk or in cloud storage.

The present app wrapping technique can bind the identity of a company to a commercial application thereby licensing the application for use by the company and issuing retracting and re issuing application licenses. The system or system administrator can perform and enforce these actions.

The injection process follows a similar workflow for each type of functionality added to the application. Details of the steps may vary depending on the functionality. shows a workflow for injecting additional functionality into a third party application.

Before step in the workflow shown in code containing the additional functionality is converted to a low level e.g. assembly language format. For example the code containing the additional functionality may be converted from .dex format to smali via a tool such as the apktool. At step in the third party application package is decompiled using a suitable tool. In the example embodiment shown in the third party application is an Android .apk package and can be decompiled using the apktool to produce smali files. At step in the decompiled files can be modified to facilitate the third party application calling into the additional functionality being provided by the app wrapper. This step may vary depending on the type of functionality being added by the app wrapper.

At step the app wrapper files are merged with the decompiled and modified third party application files. At step the wrapped application is re compiled into an unsigned application package. For example in the case of an Android application the wrapped application is re compiled into an .apk file.

Method begins at step where a development computing device logs in to the system. For example a user e.g. an application developer using the development computing device logs into the platform provider system . The method proceeds to step where an admin console is opened. After the admin console is open the method proceeds to step where apps are selected to add to the system. The method proceeds to step where the selected apps are uploaded to the system. For example admin console is opened and applications stored on development computing device are selected for addition to application datastore . In step the apps are scanned for malicious code and viruses. Once the scanning is complete the method proceeds to step where the apps are published in the system and made available to system administrators.

Method is for a platform provider system e.g. platform provider system to make changes to groups and to assign apps to end users. The steps described with regard to method may be performed by a system administrator and or automatically when for example an application is added to the system. Method starts at step where the administrator logs into the system and proceeds to step where the administrator opens an admin console. If the system administrator would like to assign apps to a group then the method proceeds to step where the administrator selects apps from the system. The method then proceeds to step where the administrator selects the settings to be applied to each of the apps selected in step . The method proceeds to step where the administrator assigns the selected apps to a group and then proceeds to step .

If the system administrator would like to make changes to groups then the method proceeds directly from step to step where the administrator creates or modifies a group. The method then proceeds first to step where the administrator selects an end user from the active directory and then to step where the administrator adds the selected user to the group. Steps and are repeated until the desired end users have been added to the group. The method then proceeds to step .

At step the administrator saves the group including end users apps and app settings to the system. The method proceeds to step where the system applies the assignments to the end users.

The workflow is described by a method shown in . The method begins at step where the user logs in to the client application on the user computing device e.g. user computing device and the method proceeds to step . At step the client application e.g. an application configured to select and install other application for example an app store connects to the platform provider system and the method proceeds to step . At step the client application sends metadata to the platform provider system and the method proceeds to step where the platform provider system determines the list of applications using metadata and knowledge of the assignment of the end user to a group. The method proceeds to step where the platform provider system returns the application list to the client application. The method then proceeds to step where the client application displays a list of applications on a display of the user computing device.

At this point the end user can take one of two actions either tap on an application as displayed on a display of the user computing device to view details in which case the method proceeds to step or exit the client application in which case the method proceeds to the end user exits the client application and the method completes. If the method proceeds to step then tapping on the application will cause the method to proceed to step where the end user can select the application for installation e.g. tap the install button . The method proceeds to steps and in sequence at which the client application retrieves the selected application from the platform provider system installs the application on the device and sends an install status to the platform provider system.

In step an application package is received. For example platform provider system may receive an application package e.g. an .apk file for an Android application package . The application package may be received from a development computing device . The application package may include the application s code e.g. .dex files resources assets and manifest file. The application package may be stored in the application datastore .

In step the application is decompiled. For example wrapper module may decompile the application using a suitable tool. For example wrapper module may read the .apx file of an Android application from the application datastore and decompile the using the apktool to produce smali files.

In step a stream editor SED is used to modify the decompiled application package. For example the SED may be used to search for string patterns and replace the string patterns with another string pattern in preparation for interposing the application wrapper. The SED may perform a line by line search and replace. The SED may modify the decompiled application package to facilitate calling the additional functionality being provided by the app wrapper. This step may vary depending on the type of functionality being added by the app wrapper.

In step an application wrapper is received. For example platform provider system may receive an application wrapper. The application wrapper may be received from development computing device and or an aggregator computing device . The application wrapper may include the application wrapper code including code implementing additional functionality. The application wrapper code containing the additional functionality may be converted to a low level e.g. assembly language format. For example the code containing the additional functionality may be converted from .dex format to smali via a tool such as the apktool. The application wrapper may be stored in the wrapper datastore .

In step the decompiled modified application package is modified e.g. merged with the application wrapper code. For example the app wrapper files are merged with the decompiled and modified application files.

In step application package and the wrapper code are compiled. For example the wrapped application may be re compiled into an unsigned application package. For example in the case of an Android application the wrapped application is re compiled into an .apk file.

In step the compiled wrapped application is published. For example the unsigned wrapped application package is signed using the app wrapper developer s key and exposed for download by user computing devices e.g. user computing device .

In another embodiment of the present app wrapping technique an app wrapper class can be made part of an activity in the application lifecycle. This may mean the class can modify an original activity. For example in an iOS application the class can be at the operating system level and can manage the hand off to the original activity.

Yet another embodiment of the present app wrapping technique is to modify the class directly namely to change the existing application code or add new code. This approach can involve modifying code in more than place and may be less scalable than other approaches described here.

In yet another embodiment a customer e.g. an enterprise can add its own code to a pre built or commercial application and then app wrap it using the present app wrapping technique described here.

In other embodiments the client may be running a user interface only the application not residing on the device.

The development computing device includes at least one processor an operating system an application developer module and at least one memory . The at least one processor and the at least one memory are communicatively coupled via a bus not shown . The at least one processor and the at least one memory may be hardware e.g. silicon based physical devices. According to example implementations the operating system manages hardware resources associated with development computing device and provides common services for computer programs executing on development computing device . According to example implementations the application developer module may be an integrated development environment IDE supporting any number of programming languages and configured to develop e.g. code and compile applications. The development computing device may be for example an element of any computing device e.g. personal computer a laptop computer and the like .

The aggregator computing device includes at least one processor an operating system an aggregator module and at least one memory . The at least one processor and the at least one memory are communicatively coupled via a bus not shown . The at least one processor and the at least one memory may be hardware e.g. silicon based physical devices. According to example implementations the operating system manages hardware resources associated with aggregator computing device and provides common services for computer programs executing on aggregator computing device . According to example implementations the aggregator module may include a datastore of a plurality of applications and a mechanism to make the plurality of web applications available to other computing devices. The aggregator computing device may be for example an element of any computing device e.g. a server a cloud computing device a personal computer and the like .

The user computing device includes at least one processor an operating system an application module and at least one memory . The at least one processor and the at least one memory are communicatively coupled via a bus not shown . The at least one processor and the at least one memory may be hardware e.g. silicon based physical devices. According to example implementations the operating system manages hardware resources associated with user computing device and provides common services for computer programs executing on user computing device . According to example implementations the application module may include a datastore including at least one application the tools to execute applications e.g. a runtime and a mechanism used to acquire update applications. The user computing device may be for example an element of any computing device e.g. personal computer a laptop computer and the like .

The optional enterprise server includes at least one processor an operating system an application server and at least one memory . The at least one processor and the at least one memory are communicatively coupled via a bus not shown . The at least one processor and the at least one memory may be hardware e.g. silicon based physical devices. According to example implementations the operating system manages hardware resources associated with enterprise server and provides common services for computer programs executing on enterprise server . According to example implementations the application server may be configured to enable a user device to indirectly download the applications associated with the platform provider. The enterprise server may be for example an element of any computing device e.g. a networked computer a cloud computer and the like .

The platform provider system includes at least one processor an operating system an application server an application datastore a wrapper datastore a wrapper module and at least one memory . The at least one processor and the at least one memory are communicatively coupled via a bus not shown . The at least one processor and the at least one memory may be hardware e.g. silicon based physical devices. According to example implementations the operating system manages hardware resources associated with platform provider system and provides common services for computer programs executing on platform provider system . The platform provider system may be for example an element of any computing device e.g. a networked computer a cloud computer and the like .

According to example implementations the application server may be configured to enable a user device to download the applications associated with the platform provider. The application datastore and the wrapper datastore may be configured to store application packages and application wrappers respectively. The wrapper module may be configured to interpose an application wrapper on a pre written application before allowing a user computing device to download the pre written application as discussed throughout this disclosure.

An administrator as a platform provider using the platform provider system may select pre written applications supplied by developers via the development computing device and aggregators via the aggregator computing device and may present the applications in a marketplace hosted by the platform provider system . An IT administrator can purchase applications and assign them to end users operating the user computing device . The platform provider system can use the system and methods described herein to wrap the purchased applications and then make them available for download to the user computing device . In some embodiments the user computing device can download the applications directly from the platform provider system . In other embodiments the user computing device can download the applications from a separate server for example an enterprise server maintained by the IT administrator.

For example a company with a mobile workforce may wish to provide its mobile employees with an app that enables remote access to their personal computer PC desktops from a mobile device. In this example let s assume an Information Technology IT administrator wishes to purchase multiple licenses of the remote desktop application for use by the company s employees. Using the system and method described herein the IT administrator can view available applications and purchase a quantity of licenses using a credit card or purchase order. Once the application is purchased and made available to the IT administrator along with the specified number of licenses the IT administrator can assign the application to the employees.

The systems and methods described herein can automatically wrap the purchased application as part of the purchase process. The IT administrator can assign the purchased application to a group of employees and or to individual employees. The application can be presented to the employee via the native iOS Android device client and can allow the employee to install the application onto their mobile device. Once the application is assigned to the employees via a group assignment or directly the system can track and display the number of licenses that have been assigned to the employees. As each employee installs the application onto their mobile device and or another device the system can track and display the number of consumed licenses. If the employee leaves the company or decommissions their device the system can disable the application so that it can no longer be used. The system can then recoup the license and add it back to the number of available licenses for the application.

Some of the above example embodiments are described as processes or methods depicted as flowcharts. Although the flowcharts describe the operations as sequential processes many of the operations may be performed in parallel concurrently or simultaneously. In addition the order of operations may be re arranged. The processes may be terminated when their operations are completed but may also have additional steps not included in the figure. The processes may correspond to methods functions procedures subroutines subprograms etc.

Methods discussed above some of which are illustrated by the flow charts may be implemented by hardware software firmware middleware microcode hardware description languages or any combination thereof. When implemented in software firmware middleware or microcode the program code or code segments to perform the necessary tasks may be stored in a machine or computer readable medium such as a storage medium. A processor s may perform the necessary tasks.

Specific structural and functional details disclosed herein are merely representative for purposes of describing example embodiments. Example embodiments however be embodied in many alternate forms and should not be construed as limited to only the embodiments set forth herein.

It will be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first element could be termed a second element and similarly a second element could be termed a first element without departing from the scope of example embodiments. As used herein the term and or includes any and all combinations of one or more of the associated listed items.

It will be understood that when an element is referred to as being connected or coupled to another element it can be directly connected or coupled to the other element or intervening elements may be present. In contrast when an element is referred to as being directly connected or directly coupled to another element there are no intervening elements present. Other words used to describe the relationship between elements should be interpreted in a like fashion e.g. between versus directly between adjacent versus directly adjacent etc. .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of example embodiments. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes and or including when used herein specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

It should also be noted that in some alternative implementations the functions acts noted may occur out of the order noted in the figures. For example two figures shown in succession may in fact be executed concurrently or may sometimes be executed in the reverse order depending upon the functionality acts involved.

Unless otherwise defined all terms including technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which example embodiments belong. It will be further understood that terms e.g. those defined in commonly used dictionaries should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.

Portions of the above example embodiments and corresponding detailed description are presented in terms of software or algorithms and symbolic representations of operation on data bits within a computer memory. These descriptions and representations are the ones by which those of ordinary skill in the art effectively convey the substance of their work to others of ordinary skill in the art. An algorithm as the term is used here and as it is used generally is conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of optical electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

In the above illustrative embodiments reference to acts and symbolic representations of operations e.g. in the form of flowcharts that may be implemented as program modules or functional processes include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types and may be described and or implemented using existing hardware at existing structural elements. Such existing hardware may include one or more Central Processing Units CPUs digital signal processors DSPs application specific integrated circuits field programmable gate arrays FPGAs computers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise or as is apparent from the discussion terms such as processing or computing or calculating or determining of displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Note also that the software implemented aspects of the example embodiments are typically encoded on some form of non transitory program storage medium or implemented over some type of transmission medium. The program storage medium may be magnetic e.g. a floppy disk or a hard drive or optical e.g. a compact disk read only memory or CD ROM and may be read only or random access. Similarly the transmission medium may be twisted wire pairs coaxial cable optical fiber or some other suitable transmission medium known to the art. The example embodiments not limited by these aspects of any given implementation.

Lastly it should also be noted that whilst the accompanying claims set out particular combinations of features described herein the scope of the present disclosure is not limited to the particular combinations hereafter claimed but instead extends to encompass any combination of features or embodiments herein disclosed irrespective of whether or not that particular combination has been specifically enumerated in the accompanying claims at this time.

