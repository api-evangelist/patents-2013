---

title: Sync framework extensibility
abstract: Embodiments described herein may involve enabling applications to cooperate with a system-level sync framework. The sync framework may provide system synchronization of files between user devices and a cloud storage service. Arbitrary applications on a user computing device can communicate with the sync framework to temporarily suspend synchronization of a specified file by the sync framework. The application can register functions with the sync framework that the sync framework can invoke in relation to suspending synchronization, continuing to provide system-level access to the file for arbitrary applications, and resuming synchronization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189533&OS=09189533&RS=09189533
owner: Microsoft Technology Licensing, LLC
number: 09189533
owner_city: Redmond
owner_country: US
publication_date: 20130529
---
In the field of network or cloud computing services have been developed to provide cloud storage for use by client computers connecting to the cloud. While cloud storage has been implemented in many ways recently cloud storage has become closely integrated with the file systems and operating systems of client computers. From a user s perspective it has been desirable to provide a cloud file that appears to have universal or floating presence in the cloud as well as on a user s client computing devices that connect to the cloud. A goal has been to allow a file that is stored in the cloud to be read and written by a user s devices connecting to the cloud as well as perhaps software within the cloud. A single file entity from the user s perspective might in fact have multiple copies or versions on the cloud and the client computers that are being updated in parallel. To maintain coherency for the file i.e. to keep the file content consistent across the cloud and across the user devices that connect to the cloud a file synchronization system or sync engine may be employed.

To provide a smooth user experience and transparent coherency this synchronization of a cloud based file is preferably performed at the file system and or operating system level. This hides the housekeeping work that is usually required to maintain synchronization between instances of what are supposed to be the same logical file. This system managed synchronization also relieves programmers of the burden of having to code their own custom synchronization software.

Nonetheless there may be times when an application or other software outside the sync engine and client operating system needs to perform custom synchronization or otherwise manage and coordinate the cloud and client based instances of a file. For example collaborative concurrent editing for a word processor might involve synchronization issues that a system provided sync engine cannot address. In addition operating system level or file system level sync engines have not been able to share sync related responsibilities with arbitrary applications. If an application has needed to use a cloud shared file in a way that might conflict with or interfere with the sync engine the only choice would be for the application to assume total responsibility for the file from the sync engine.

Discussed below are techniques for among other things allowing a sync engine to temporarily relinquish synchronization of a file and to make use of sync related functionality provided by applications.

The following summary is included only to introduce some concepts discussed in the Detailed Description below. This summary is not comprehensive and is not intended to delineate the scope of the claimed subject matter which is set forth by the claims presented at the end.

Embodiments described herein may involve enabling applications to cooperate with a system level sync framework. The sync framework may provide system synchronization of files between user devices and a cloud storage service. Arbitrary applications on a user computing device can communicate with the sync framework to temporarily suspend synchronization of a specified file by the sync framework. The application can register functions with the sync framework that the sync framework can invoke in relation to suspending synchronization continuing to provide system level access to the file for arbitrary applications and resuming synchronization.

Many of the attendant features will be explained below with reference to the following detailed description considered in connection with the accompanying drawings.

Embodiments discussed below relate to providing extensibility to a sync engine to allow applications to temporarily lock out the sync engine from a file i.e. to exclude the file from the synchronization oversight of the sync engine. Embodiments also relate to allowing applications to register functionality with the sync engine that the sync engine can invoke to for example help resolve sync problems or provide data from a file that is not being synchronized.

The description below will begin with an overview of cloud based file storage shared by multiple devices. A sync framework and potential conflicts between sync engines and applications will be described next followed by explanation of extensibilities that can be built into sync engines to allow synchronization locking and sync engine use of application functionality that might help the sync engine perform synchronization and provide access to files that are temporarily not being synchronized.

In some cases client software might access a cloud service transparently provided authorization has been obtained from the cloud per the user s credential. For example the user computing device might have a file explorer system browser or other user interface for exploring a local file system which is controlled by an operating system . Such client side software might also connect with the file service and allow exploring of files on the file service as though they were part of the local file system . Client side software can also be arbitrary applications executing on the user computing devices or elsewhere.

Some cloud services allow a file or a file store to be simultaneously stored and accessed on multiple user devices and the cloud . For example referring to a file such as the file file may be locally stored in the file system of the user computing device . The file might also be stored in the cloud s file service . The copy of the file at the file service might also be provided by the file service to other applications on other of the user s devices such as user computing device . Because multiple entities are accessing and potentially writing to the file a sync framework is employed to synchronize the instances or copies of the file .

The sync framework may include cooperating sync engines such as a sync engine on the user computing device and a sync engine on the cloud which might lie behind the file service . Each sync engine performs local steps to keep a corresponding local copy of the file in sync with the other copies of the file note that the file represents any arbitrary file . In general this involves a sync engine receiving or detecting local updates to its local version of the file and propagating those updates to another of the sync engines which in turn updates its local copy of the file so that the copies of the file are in sync.

In one embodiment the file service may act as a central storage and coordinator so that the user s devices might not synchronize directly with each other. For example the user computing device might exchange sync updates with the cloud and the user computing device might similarly exchange updates with the cloud . However the computing device and the computing device synchronize with each other indirectly through the intermediating sync engine at the file service which in effect propagates one user device s updates through to the other. The specific algorithms of a sync engine may vary according to whether it is at the cloud or at a user device.

In addition to the basic synchronization logic mentioned above the sync engines might also have logic to deal with intermittent losses of network connectivity between the cloud and the user device . For example when connectivity is not available between the user device and the cloud app on the user device might write edits or updates to its local file . Updates during a disconnect must accumulate at both locations until connectivity is reestablished. When connectivity is reestablished the sync engines may cooperate to attempt to reconcile their accumulated updates the copy of the file in the cloud might also have been receiving updates perhaps from user device that is still connected to the cloud . When the instances of the file cannot be reconciled local versions and even subversions might be created and saved. Divergent versions not reconcilable by the sync framework might eventually require the user s intervention.

The API may include a variety of calls methods etc. invocable by arbitrary applications such as app . One such call may be a sync lock call which can also specify or be directed to a file such as file . When the call is invoked say for file by app the sync engine proceeds to stop syncing the file with the cloud . This may involve various preparatory measures such as applying any outstanding updates to the file communicating with the sync engine at the cloud to indicate that the sync framework is perhaps temporarily relinquishing sync responsibility for the file . The sync engine may in turn apply updates or perform other tasks such as instructing the cloud file service to flush bits to disk. The sync engine may reply to the sync lock call according to its state. For instance if the local file is unable to be reconciled perhaps due to loss of network connectivity with the cloud the sync engine might reply to app accordingly. If a fork new subrevision of the local file is performed app might also be informed. In one embodiment app first opens the local file and or the cloud based instance of the file in a read only mode and when the sync lock call returns successfully the app then opens the file in a write mode. Note that a sync lock is carried out at least at the local user device but can optionally be extended to other user devices for example to improve handling of file rename and move operations.

In one embodiment the app may be coded to operate as a rudimentary file streaming server possibly having a data provider both the merge handler and the data provider can be registered via the API by the app . The operating system can provide a file placeholder system that allows a placeholder to be used in place of an actual file to applications a placeholder file looks like an ordinary file with file properties openable closeable and so forth but the data content for the file comes from a source other than the file system . In other words a placeholder file is an operating system object that is presented as a file but internally the data that appears to be within the file comes from a source other than the unit of file storage e.g. from an application with a function or client that can stream data to the operating system. In this example the data provider of app streams its content i.e. whatever it has done to the file after the sync lock was invoked for the file to the operating system and the streamed content is provided via the file operating system to anything reading the file through the file system. Note that the placeholder streaming function is not required for sync locking.

While the sync lock is held by the app the sync framework does not synchronize the file at user devices or at the cloud . Thus the app is free to implement its own synchronization logic or otherwise write to both the local instance and or the cloud instance without concern for interference with the sync framework. For example the app might inquire from the system whether the cloud copy and the local copy of the file are identical possibly using its own merge handler or reconciliation logic. As discussed further below the merge handler of the app may be presented via an interface or contract to the sync engine and can be called by the sync engine to perform an application provided merge i.e. the sync framework can be extended with external sync functionality.

Eventually app releases the sync lock. This may be triggered explicitly by the application per its internal logic e.g. a user of app explicitly closes the file . Or a sync lock release can be triggered automatically responsive to an event such as the app being closed or the app losing focus being switched away by the user user switches to another application a system suspend occurring etc.

When the sync lock is released the sync engine resumes sync management of the file . If a placeholder mode is in use as described above this might involve executing logic to resolve any outstanding placeholders. In addition the sync engine may attempt to sync the file which in turn might trigger hydration of the file . The sync engine may contact the data provider or the merge handler and app is activated to hydrate the file using the data provider . Subsequently the sync engine might check to see if an upload to the cloud of the file is pending. If not then the sync framework is in a steady state with respect to the file . Even if there is no local update pending the sync framework may have reason to download some more recent updates from the cloud if the cloud version changed. In that case no pending local change but more recent cloud version the cloud version replaces the local file no conflict . However if an upload is pending the cloud version may be downloaded the sync engine does not have to download the cloud version to detect cloud changes which can be reflected in other available information . If cloud changes are not detected then again the sync engine is in a steady synchronizing state. Otherwise the registered merge handler of the app is invoked by the sync engine . If that fails then some fail handling procedure is triggered such as forking versioning the file or displaying a user interface to allow the user to choose how to resolve the inconsistency.

Sequentially referring to and the time sequence shown in initially at step the sync engine is managing synchronization for the file . Writes to local and cloud instances by arbitrary applications via the file system and the cloud respectively are synchronized transparently to the applications. At step an arbitrary application such as app may require execution of its own sync management for the file . At step first time the application issues a sync lock request to the sync engine and optionally registers its merge handler and or its data provider per exchanges with the sync engine . At step the sync engine grants the sync lock request by relinquishing synchronization of the file with the cloud.

At step the app has control of the file writes to local and or cloud instances of the file updates perhaps for custom synchronization etc. Before a second time a second application app might request the file via the file system in which case the operating system supplies a placeholder file with content from the data provider . At second time step occurs the app finishes with the file and at step issues a sync unlock call to the sync engine . At step the sync engine resumes syncing the file with the cloud which might involve a step of attempting to sync the file and possibly invoking the merge handler at step . The particular order of steps in is not required and some steps may be omitted.

To summarize an arbitrary application can provide sync related services or extensions to a sync framework for example that might otherwise not be available for the system or built in sync framework. File coherency can be assured while the application is working with the file behavior conflicts between the application and the sync framework can be avoided and during a sync lock other applications can access the file transparently via placeholders the sync framework brokers access to the file contents . An all or nothing approach can be avoided by allowing the application to take full ownership of the files and apply custom synchronization logic. The application can negotiate with the sync framework to identify and acquire sync lock these files. A contract API application implementable software interface or similar mechanism can be added to the built in sync framework. The sync framework can act as the main agent of synchronization yet can be temporarily relieved of this duty by the application when the application is manipulating file. The application can indicate that it is able to perform smart merges over a given file. When the sync framework detects a sync conflict it can then know that it can delegate the conflict resolution to the application.

Embodiments and features discussed above can be realized in the form of information stored in volatile or non volatile computer readable or device readable devices. This is deemed to include at least devices such as optical storage e.g. compact disk read only memory CD ROM magnetic media flash read only memory ROM or any other devices for storing digital information in physical matter. The stored information can be in the form of machine executable instructions e.g. compiled executable binary code source code bytecode or any other information that can be used to enable or configure computing devices to perform the various embodiments discussed above. This is also deemed to include at least volatile memory such as random access memory RAM and or virtual memory storing information such as central processing unit CPU instructions during execution of a program carrying out an embodiment as well as non volatile media storing information that allows a program or executable to be loaded and executed. The embodiments and features can be performed on any type of computing device including portable devices workstations servers mobile wireless devices and so on.

