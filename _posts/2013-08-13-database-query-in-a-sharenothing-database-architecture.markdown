---

title: Database query in a share-nothing database architecture
abstract: Data query in a share-nothing database includes obtaining a query request and generating an optimized access plan with respect to the query request. The query request relates to external data stored in an external data source and contains a definition for expected distribution of the external data. The data query also includes obtaining data distribution information related to the expected distribution based on the optimized access plan, transmitting the data distribution information to the external data source so that the external data source splits and returns the external data in accordance with the data distribution information, and executing query-related processing of the split external data in accordance with the optimized access plan.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146959&OS=09146959&RS=09146959
owner: International Business Machines Corporation
number: 09146959
owner_city: Armonk
owner_country: US
publication_date: 20130813
---
The present application claims priority to Chinese Patent Application No. 201210375556.X filed Sep. 29 2012 and all the benefits accruing therefrom under 35 U.S.C. 119 the contents of which in its entirety are herein incorporated by reference.

The present invention relates to database query and more specifically to a method and apparatus for data query in a share nothing database.

A database is used to organize store and manage data in accordance with data structure. With the development of information technology there is an increasing number of data to be stored and processed which puts forward higher requirements for a database. To adapt for storage and management of mass data composition of a database is expanded from a simple single storage to a cluster of a plurality of storages. Moreover a database may also be combined with an external data source to provide storage management and query of data collectively so as to further expand the application of a database.

An external data source can be implemented through a variety of data storage systems including centralized data storage systems and distributed storage systems. Examples of distributed storage systems include Network File System NFS Hadoop File System HDFS and so on. Many external data sources do not support a standard application programming interface API to access data and thus it usually needs a user defined function UDF to perform external data query so as to fetch data from an external data source into a database.

On the other hand as described above the database may be composed of a cluster of a plurality of storage devices. Such a cluster may have many modes of sharing for example memory sharing in which CPUs of multiple devices share the same piece of memory and communicate with one another through an internal communication mechanism disk sharing in which each CPU uses its own private memory area but accesses all disk systems directly through an internal communication mechanism and share nothing in which each device s CPU has a private memory area and a private disk space and different CPUs cannot access the same disk space and may communicate with one another through a network connection. In the above modes of sharing the non sharing manner is a typical architecture commonly used by a database. For a database with a share nothing architecture if it is combined with an external data source to perform data storage and query a problem of data redistribution may arise.

In view of the above the present disclosure is proposed to provide a solution that is able to reduce or avoid the redistribution of data in a share nothing database in a query process.

In accordance with one embodiment of the present invention there is provided a method for data query in a share nothing database. The method includes obtaining a query request and generating an optimized access plan with respect to the query request. The query request relates to external data stored in an external data source and the query request further contains a definition for expected distribution of the external data. The method also includes obtaining data distribution information related to the expected distribution of the external data based on the optimized access plan transmitting the data distribution information to the external data source so that the external data source splits the external data in accordance with the data distribution information and returns the split external data in parallel and executing query related processing on the split external data in accordance with the optimized access plan.

In accordance with another aspect of the present invention there is provided an apparatus for data query in a share nothing database. The apparatus includes an access plan generation unit configured to obtain a query request and generate an optimized access plan with respect to the query request. The query request relates to external data stored in an external data source and the query request further contains a definition for expected distribution of the external data. The apparatus also includes a data distribution information obtaining unit configured to obtain data distribution information related to the expected distribution of the external data based on the optimized access plan a data distribution information transmission unit configured to transmit the data distribution information to the external data source so that the external data source splits the external data in accordance with the data distribution information and returns the split external data in parallel and a query processing execution unit configured to execute query related processing on the split external data in accordance with the optimized access plan.

The method and apparatus in accordance with the present disclosure allow defining the expected distribution of the external data and make the external data source split and return the external data in accordance with this expected distribution thereby avoiding data access across nodes during data query and improving the efficiency of the data query.

Some embodiments will be described in more detail with reference to the accompanying drawings in which the embodiments of the present disclosure have been illustrated. However the present disclosure can be implemented in various manners and thus should not be construed to be limited to the embodiments disclosed herein. On the contrary these embodiments are provided for the thorough and complete understanding of the present disclosure.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be sent using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products in accordance with embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Referring now to an exemplary computer system server which is applicable to implement the embodiments of the present invention is shown. Computer system server is only illustrative and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein.

As shown in computer system server is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

The idea and implementation of the present invention are described below with reference to specific embodiments. In accordance with an embodiment of the present invention in order to prevent a share nothing database from redistributing data when executing a data query process it is allowed to define in a query request the expected distribution of data to be fetched from an external data source and a UDF entity created by a database engine can obtain the expected data distribution from an access plan generated with respect to the query request. Then the UDF entity can send the corresponding data distribution information to the external data source and instruct the external data source to split and return the queried data in accordance with the data distribution information. So the data returned from the external data source has the expected data distribution and then can be directly joined with the data in the database without need for re distribution.

Referring now to there is shown a data query method in accordance with an embodiment of the present invention. As shown in the data query method of this embodiment comprises the following block of obtaining a query request and generating an optimized access plan with respect to the query request wherein the query request relates to external data stored in an external data source and the query request further contains a definition for expected distribution of the external data block of obtaining data distribution information related to the expected distribution of the external data based on the optimized access plan block of transmitting the data distribution information to the external data source so that the external data source splits the external data in accordance with the data distribution information and returns the split external data in parallel and block of executing query related processing on the split external data in accordance with the optimized access plan. The way of executing the steps hereinabove is described below in combination with specific examples.

First in block a query request is obtained in a share nothing database the query request relating to external data stored in an external data source. In order to fetch external data from the external data source the query request contains the corresponding UDF. Moreover in order to avoid the redistribution of the external data in the database the embodiment of the present invention allows defining the expected distribution of the external data in the query request.

Typically the query quest further relates to internal data stored in the share nothing database and contains an association condition for defining association relationship between the internal data and external data. In the case of querying the internal data and external data in association generally the defined expected distribution of the external data is related to the association condition between the internal data and external data.

In the above exemplary query request t is local data stored on a share nothing database node i.e. the internal data described hereinabove. Clause table pget home username udf file as t . . . contains a UDF i.e. pget home username udf file . This UDF is used to read data from a specific location of the external data source. In accordance with the definition of the above clause data read from the external data source through the UDF are organized as a table t . Thus t is formed by data stored in the external data source corresponding to the external data above. Next clause t.stock id t.stock and t.pn 1 or t.pn 0 defines an association condition of t and t . Furthermore in accordance with the embodiment of the present invention it is allowed to contain the definition for the expected distribution of the external data in the query request i.e. clause SPLIT BY stock AS TABLE t. Specifically this clause defines the expected distribution of the external data t i.e. data of t is expected to be split in accordance with stock in the same way as the distribution of t. It can be seen that the defined expected distribution is related to the association condition between t and t.

It can be understood that the SQL code described herein above is just a specific example of the query request. The form and content of the query request are not limited to this specific example shown. In other embodiments the query request may be implemented using other languages and code forms. Accordingly the definition of the expected distribution of the external data may also be identified using other keywords.

In one embodiment the query request relates only to the external data in the example above as shown by the code the query request relates to the external data and internal data. In other examples the query request may further relate to more data e.g. more tables t t and the like in addition to the above tables t t and define more complex association conditions e.g. t and t collectively being associated with t while t being associated with t and so on . In this case the definition for the expected distribution of the external data may possibly be more complex accordingly. However as to a possibly more complex query request and distribution definition the execution process thereof is similar to the above example. The specific execution will be described below.

After obtaining the query request as described above the database engine compiles and analyzes the query request and then generates an access plan. As known to those skilled in the art the database engine includes a compiler and an optimizer wherein the compiler compiles and parses the code of the query request while the optimizer generates an access plan adapted for the query request based on the parsed data structure. The access plan defines the specific execution way and execution path of the query for example in what order to access tables which indexes to use and what method to join data and so on. Specifically the compiler first executes compiling and grammar parsing for the query request and outputs a data structure in the form of a logic tree. Each node in the logic tree represents an operation in the query such as reading a certain table executing inner join etc. Based on such a data structure the optimizer executes optimization processing. Generally the optimizer first converts logical operations on the tree structure to physical operations thereby generating a preliminary access plan. Then the optimizer estimates the execution cost of each access plan resulting in an optimized access plan.

For the aforementioned query request in addition to the above processing of existing technologies the compiler and optimizer further performing processing related to the data distribution definition. Specifically the aforementioned query request contains the definition on the expected distribution of the external data. Accordingly the compiler needs to recognize the definition of the expected distribution when compiling the query request and contain it in the tree form data structure. Thus the expected data distribution defined in the query request is contained in the preliminary access plan. Further in the optimization phase the optimizer optimizes the access plan by considering this data distribution thereby generating an optimized access plan. In general the expected distribution of the external data defined in the query request is intended to reduce or avoid data access across nodes in query process. More specifically in the case where the query request relates to both internal data and external data the defined expected distribution of the external data is related to the association condition of the external data and internal data and is intended to facilitate the co located JOIN of data. The co located JOIN refers to JOIN of data realizable without communication between the nodes in the database. Generally in the case where data to be joined are located in the same node in the database the co located JOIN can be directly performed for the data. Therefore considering the data distribution defined in the query request the optimizer chooses an execution path of the co located JOIN as the optimized access plan.

The above execution process is described below in combination with the above exemplary query code. As mentioned earlier the query request contains a clause SPLIT BY stock AS TABLE t to define the expected data distribution. After compiling and parsing the clause the database engine is informed that data of the table t fetched from the external data source through UDF will be split. Specifically data fetched through the UDF entity pget executed in parallel will be partitioned based on column stock of the table. The partitioning rule is the same as table t. Based on such data distribution definition the optimizer generates an optimized access plan which specifies co located JOIN between columns of t and t.

In the case where the query request relates only to the external data the optimizer executes optimization based on the execution cost of each candidate path and considering the defined expected data distribution so as to generate the optimized access plan. The optimized access plan can reduce or avoid data access across nodes in the query process.

After the optimized access plan is generated the database engine begins to execute the query request in accordance with the access plan. In the process of executing the query request the database engine opens and creates UDF entities for fetching the external data from the external data source. By modifying UDF the UDF entities are made to obtain the data distribution information related to the expected distribution of the external data based on the executed access plan that is to execute the block of .

In one embodiment a UDF entity obtains information in the access plan that is being executed by calling an extended interface function in runtime thereby obtaining the above data distribution information. The data distribution information is used to reflect the expected data distribution defined in the query request.

For the above example of the exemplary query code the definition for the data distribution of t i.e. t being split in accordance with the column based on the column distribution of t may be embodied in the optimized access plan. In particular the UDF entity can obtain the name of table t by calling the extended API function String getSplitBaseTableName and obtain the index of the column of table t by calling int get SplitBaseColIndices . Based on information returned by the calling the UDF entity obtains data distribution information related to t . It can be appreciated that for a different data distribution definition contained in the query request UDF entity may call a different specific interface function. For example in another example the query request relates only to the external data and defines to split the external data in accordance with the setting of a certain configuration file. In this case the UDF entity needs to call other functions to obtain information of the configuration file such as the access path name and content of the configuration file and so on.

After obtaining the data distribution information in block the UDF entity transmits the data distribution information to the external data source so that the external database splits the external data in accordance with the data distribution information and returns the split external data in parallel. It can be appreciated that in the prior art the UDF entity acts as an interface with the external data source created by the database engine for communication with the external data source. In order to obtain the external data stored in the external data source the UDF entity issues to the external data source a query instruction in which information of the external data is contained. Accordingly the external data source prepares the external data according to the received query instruction. On this basis in block the UDF entity further contains data distribution information of the external data in the query instruction and instructs the external data source to split and return the external data in accordance with the transmitted data distribution information. Then the external data source prepares the external data under the direction of the UDF entity splits the external data in accordance with the data distribution information and returns the split external data in accordance with the data distribution information to a plurality of UDF entities in parallel as well.

In one embodiment the data distribution information transmitted by the UDF entity to the external data source contains a direct splitting rule and a returning rule. For instance in one example the data distribution information specifies that the table formed by the external data shall be split in accordance with column and data of the i th column shall be returned to UDFi on the i th node of the database. For such data distribution information the external data source under the direction of the UDF entity may split the external data in accordance with the splitting rule and return the split external data to the UDFs specified by the returning rule in parallel respectively.

In another embodiment the data distribution information transmitted by the UDF entity to the external data source relates to index information pointing to other data. In this case the external data source needs to first obtain contents of the other data in accordance with the index information before determining the target distribution of the external data. For instance in the example of the above exemplary code the UDF entity contains the name of the table t in the data distribution information and instructs the external data source to split and return data of the table t in accordance with the column distribution of the table t. Thus the external data source needs to access the share nothing database on the contrary and obtain the distribution of the table t in accordance with the index information of t e.g. name and then it can determine how to distribute the table t . In one example the column distribution of the table t is determined through a hash function. That is assumed that data in the ith column of t is stored on the j th node in the share nothing database then j can be determined by hashing i. In such a case the external data source further needs to obtain the hash function to determine the column distribution of the table t as the target distribution of the table t . Further the external data source can return data in respective columns of the split t to UDFs of different nodes in accordance with the target distribution of the t.

In one embodiment the UDF entity may first process the obtained data distribution information relating to the index information so that it contains the direct splitting rule and returning rule and then transmits the processed data distribution information to the external data source. For instance for the above example shown by the exemplary codes containing t and t the UDF entity may perform hash operation on the column of the table t to obtain the storage location of each column and contain the correspondence relationship between column and its storage location as a direct returning rule in the data distribution information to send to the external data source so that the external data source may directly split and return the external data based on the data distribution information.

It can be appreciated that the data distribution information may further have other forms and contain more contents. However in any specific form the data distribution information is intended to make the external data source to be informed of the target distribution state of the external data and split and return the external data in accordance with the target distribution state. Then the UDF entities running on respective nodes in the database may obtain the returned external data from the external data source in parallel respectively. Further each UDF entity may deliver the obtained external data to the database engine. Based on the obtained external data the database engine can perform processing related to the data query in accordance with the optimized access path i.e. to execute the block .

As mentioned earlier the database engine has generated the optimized access path with respect to the query request. The optimized access plan takes the expected distribution of the external data into consideration and thus may reduce or avoid data access across nodes in the query process. On the other hand the external data source has obtained from the UDF entity the data distribution information reflecting the expected data distribution and thus split and returned the external data. Therefore the actual distribution of the external data returned from the external data source is consistent with the expected distribution defined in the query request and also is in compliance with the expectations of the optimized access plan. Therefore in the block the database engine may execute query related processing with respect to the obtained external data in accordance with the optimized access plan previously generated without need for delivering the external data across different nodes. In the case where the query request relates to the external data and internal data the optimized access plan chooses an execution path which facilitates co located JOIN of the internal data and external data. In such case the query related processing performed in the block comprises executing co located JOIN of the internal data and external data in accordance with the association condition in the query request. In one embodiment the above query related processing further comprises other conventional processing such as organizing and presenting the queried data.

It can be appreciated that in the share nothing database structure the UDF entities on respective nodes can work in parallel. In one embodiment each UDF entity transmits the data distribution information to the external data source. In another embodiment a part of the UDF entities is chosen to execute the transmission of the data distribution information. For instance in one example a specific UDF entity for example a UDF entity running on a specific internal node is chosen constantly to transmit the data distribution information to the external data source in another example the UDF entity that firstly establishes a connection with the external data source is used to transmit the data distribution information. Those skilled in the art may also use other means to determine the UDF entity for transmitting the data distribution information as long as the external data source can obtain the data distribution information through one or more of the UDF entities.

It can be appreciated from the above description that in the embodiments of the present invention it is allowed to define the expected distribution of the external data in the query request the expected distribution being intended to reduce or eliminate data access across nodes in the data query. Further the data distribution information reflecting the expected distribution is transmitted through the UDF entity to the external data source so that the external data source may pre split the external data in accordance with the data distribution information. Then data returned from the external data source has the expected distribution. Therefore based on the expected distribution the query processing of data does not relate to data access across nodes thereby avoiding the redistribution of the external data between database nodes.

Based on the same inventive idea an embodiment of the present invention further provides an apparatus for data query. illustrates a block diagram of a data query apparatus in accordance with an embodiment of the present invention. As shown in the data query apparatus is denoted by as a whole. Specifically the apparatus includes an access plan generation unit configured to obtain a query request and generate an optimized access plan with respect to the query request wherein the query request relates to external data stored in an external data source and the query request further contains a definition for expected distribution of the external data a data distribution information obtaining unit configured to obtain data distribution information related to the expected distribution of the external data based on the optimized access plan a data distribution information transmission unit configured to transmit the data distribution information to the external data source so that the external data source splits the external data in accordance with the data distribution information and returns the split external data in parallel and a query processing execution unit configured to execute query related processing on the split external data in accordance with the optimized access plan.

In one embodiment the query request further relates to internal data stored in the share nothing database and includes an association condition between the internal data and external data the expected distribution of the external data is associated with the association condition.

In one embodiment the access plan generation unit is configured to recognize the definition for the expected distribution of the external data and contain it in the preliminary access plan and optimize the preliminary access plan considering the expected distribution to obtain the optimized access plan.

In one embodiment the data distribution information obtaining unit is configured to obtain information of the optimized access plan by calling an extended interface function in the runtime and obtain the data distribution information based on the obtained information of the optimized access plan.

In one embodiment the data distribution information transmitted to the external data source contains a direct splitting rule and returning rule so that the external data source splits the external data in accordance with the splitting rule and returns the split external data in accordance with the returning rule.

In one embodiment the data distribution information transmitted to the external data source relates to index information pointing to other data so that the external data source first obtains contents of the other data based on the index information accordingly determines the target distribution of the external data and then splits and returns the external data based on the target distribution of the external data.

In one embodiment the data distribution information obtained by the data distribution information obtaining unit relates to index information pointing to other data and the data distribution information transmission unit is configured to process the data distribution information so that it contains a direct splitting rule and returning rule and then transmit the processed data distribution information to the external data source.

In one embodiment the query processing execution unit is configured to execute co located JOIN of the internal data and the split external data.

In one embodiment the above mentioned access plan generation unit and the query processing execution unit are included in the database engine or implemented by the database engine the data distribution information obtaining unit and the data distribution information transmission unit are included in a UDF entity or implemented through a UDF entity.

In one embodiment the apparatus is integrated or embedded in the existing database management system. In another embodiment the apparatus communicates with the database management system as a separate apparatus.

With the method and apparatus of embodiments of the present invention data access across nodes in the data query is avoided by defining the expected distribution of the external data thereby increasing the efficiency of data query.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products in accordance with various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

