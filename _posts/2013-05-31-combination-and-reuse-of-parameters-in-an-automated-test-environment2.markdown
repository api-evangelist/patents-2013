---

title: Combination and reuse of parameters in an automated test environment
abstract: A device receives test methods that include input arguments that match parameters. The test methods are used to test one or more portions of dynamically-type programming code, and the parameters define conditions for the test methods. The device receives one or more values for each of the parameters, and applies the parameters and the one or more values to different ones of the test methods. The device executes the different ones of the test methods, with the applied parameters and the applied one or more values, to generate results, and outputs or stores the results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612940&OS=09612940&RS=09612940
owner: The MathWorks, Inc.
number: 09612940
owner_city: Natick
owner_country: US
publication_date: 20130531
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

Software testing is the process used to measure the quality of developed computer software or code. One type of testing unit testing involves testing fundamental units of the software. Unit testing may be carried out by writing automated test code that executes a fundamental unit and checks inputs and outputs of the fundamental unit one detail at a time. Such automated test code may enable programmers to verify portions of the software. Frameworks used to manage automated test code are referred to as code driven testing frameworks.

An example of such frameworks is the xUnit framework which includes a JUnit framework and a NUnit framework. The xUnit framework enables testing of different elements e.g. units of software such as functions and classes. The xUnit framework may provide an automated solution that eliminates a need for a programmer to write the same tests many times and to remember what should be a result of each test. However the xUnit framework fails to provide test parameter e.g. input values output values conditions etc. customization and reuse. For example the JUnit framework requires that all test methods in a test class use the same test parameters and the NUnit framework does not permit both reuse and combination of separately defined test parameters. Furthermore the JUnit framework executes an entire parameterized test as a monolithic unit and cannot execute a portion of the parameterized test.

Systems and or methods described herein may provide a mechanism to define parameter values and to specify which test methods use the parameters. Each parameter may be defined separately and each test method may independently use any number of parameters defined in a test. The systems and or methods may enable a particular portion of a parameterized test to be executed such as a portion of the test that utilizes a particular parameter and or parameter value. The systems and or methods may enable shared test fixtures e.g. mechanisms to set up environmental conditions to execute a test to be parameterized so that a test may be executed multiple times in different environments.

A user of the device may create a test class that includes one or more test methods. For overview assume that the user includes four test methods e.g. Test1 Test2 Test3 and Test4 in the test class. The first test method e.g. Test1 may include an input argument that matches the first test parameter e.g. Param1 . The second test method e.g. Test2 may not include an input argument. The third test method e.g. Test3 may include input arguments that match the first and second test parameters e.g. Param1 and Param2 . The fourth test method e.g. Test4 may include input arguments that match the first second and third test parameters e.g. Param1 Param2 and Param3 .

The device may apply the test parameters and values to the test methods based on the input arguments of the test methods. For example the device may apply the first test parameter e.g. Param1 and the second test parameter e.g. Param2 to the third test method e.g. Test3 since the input arguments of the third test method match the first and second test parameters. In some implementations the device may apply the test parameters values in different combinations e.g. since there are three first test parameter values and three second test parameter values the device may generate nine different combinations . The device may execute the third test method with the applied test parameters to generate results for the third test and may output and or store the results. As shown in the results may include a result for each of the nine different combinations of the test parameter values e.g. A D A E A F B D B E B F C D C E and C F .

In some implementations the device may combine the test methods together into a test suite and the user may identify a particular test parameter or parameter value such as the third test parameter Param3 . The device may identify a portion of the test suite that includes the particular test parameter. For example the device may identify the fourth test method as the only test method that includes the third test parameter. The device may execute the fourth test method to generate results and may output and or store the results for the fourth test method as further shown in .

Such an arrangement may enable the user to apply parameters to any subset of test methods in a test class and to apply different parameters to different test methods. The user may reuse parameters among multiple test methods and may combine the parameters in different ways. The arrangement may also enable the user to execute portions of a test method that utilize a particular test parameter and or parameter value. The arrangement may enable the user to parameterize a shared test fixture so that when a test class is executed all content that uses the shared test fixture may be executed together as one group.

User interfaces as described herein may include graphical user interfaces GUIs and or non graphical user interfaces such as text based interfaces. The user interfaces may provide information to users via customized interfaces e.g. proprietary interfaces and or other types of interfaces e.g. browser based interfaces etc. . The user interfaces may receive user inputs via one or more input devices may be user configurable e.g. a user may change the sizes of the user interfaces information displayed in the user interfaces color schemes used by the user interfaces positions of text images icons windows etc. in the user interfaces etc. and or may not be user configurable. Information associated with the user interfaces may be selected and or manipulated by a user of a client device e.g. via a touch screen display a mouse a keyboard a keypad voice commands etc. .

The term code as used herein is to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices. In some implementations client device may include a technical computing environment TCE described below.

Server device may include one or more server devices or other types of computation and communication devices. Server device may include a device that is capable of communicating with client device e.g. via network . In some implementations server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. In some implementations server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN or a cellular network an intranet the Internet or a combination of networks.

As indicated above TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In some implementations TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In some implementations TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . In some implementations TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhapsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in some implementations environment may include fewer components different components differently arranged components or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in some implementations device may include fewer components different components differently arranged components or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more tasks described as being performed by one or more other components of device .

As shown in process may include analyzing a test method to determine whether an input argument of the test method matches a parameter associated with a property block . For example a user of client device may provide a test method to an environment e.g. TCE of client device . The test method may be used to test one or more portions of code generated via TCE . In some implementations the test method may include syntax of a general form 

In some implementations the user may provide parameter properties to client device TCE . The parameter properties may include syntax of a general form 

In some implementations the user may provide test fixture properties to client device TCE . The test fixture properties may include syntax of a general form 

In some implementations client device may analyze the test method e.g. test to determine whether the input argument e.g. Param of the test method matches the parameter name e.g. Param associated with the properties e.g. properties TestParameter . Based on the analysis client device may determine that the input argument of the test method matches the parameter associated with the properties. In some implementations client device may analyze the test method e.g. test to determine whether the input argument e.g. Param of the test method matches the parameter name e.g. Param associated with the test fixture parameter e.g. properties ClassSetupParameter . Based on the analysis client device may determine that the input argument of the test method matches the parameter associated with the test fixture.

As further shown in process may include determining values and or environments associated with the parameter block . For example client device may determine parameter values e.g. A B and C associated with the parameter name e.g. Param . In some implementations client device may determine the parameter values only when the input argument of the test method matches the parameter name associated with the properties. Client device may determine parameter values e.g. x1 and x2 associated with the parameter name e.g. Param . In some implementations client device may determine the parameter environments only when the input argument of the test method matches the parameter name associated with the test fixture.

As further shown in process may include linking the values and or environments with the input argument of the test method to create multiple versions of the test method block . For example client device may link the parameter values e.g. A B and C with the input argument e.g. Param of the test method e.g. test to create multiple versions of the test method. In some implementations the test method may include a first version for the first parameter value e.g. A a second version for the second parameter value e.g. B and a third version for the third parameter value e.g. C . In some implementations client device may link the parameter values e.g. x1 and x2 with the input argument e.g. Param of the test method e.g. test to create set up different environmental states that may be used by the test methods in the class. In some implementations the test method may include a first version for the first parameter environment e.g. x1 and a second version for the second parameter environment e.g. x2 .

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

In example assume further that the user utilizes TCE to input parameter properties as shown in a user interface of . For example the user may input the following parameter properties 

Assume further that the user utilizes TCE to input a test method as further shown in user interface . For example the user may input the following test method 

In example assume that the user utilizes TCE to input test fixture properties as shown in a user interface of . For example the user may input the following test fixture properties 

Assume further that the user utilizes TCE to input a test fixture as further shown in user interface . For example the user may input the following test fixture 

In example client device may determine parameter values e.g. A B and C associated with the parameter name e.g. Param1 . In some implementations client device may link the parameter values e.g. A B and C with the input argument e.g. Param1 of the test method e.g. test1 to create multiple versions of the test method. For example as indicated by reference number in the test method e.g. test1 may include a first version for the first parameter value e.g. A a second version for the second parameter value e.g. B and a third version for the third parameter value e.g. C .

In some implementations client device may determine parameter values e.g. X Y and Z associated with the parameter name e.g. Param1 . Client device may link the parameter values e.g. X Y and Z with the input argument e.g. Param1 of the test method e.g. test1 to create multiple versions of the test class. For example as indicated by reference number in the test method e.g. test1 may include a first version for the first parameter value e.g. X a second version for the second parameter value e.g. Y and a third version for the third parameter value e.g. Z . In some implementations the test method may be invoked after the setupFixture method has been called for a value of the ClassSetupParameter. For example assume there is a second test method e.g. test2 then a sequence of code execution may include the following setupFixture testCase X test1 testCase test2 testCase setupFixture testCase Y test1 testCase test2 testCase setupFixture testCase Z test1 testCase and test2 testCase .

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include analyzing a test suite to determine parameters associated with test methods of the test suite block . For example client device TCE may receive one or more test methods from a user associated with client device from an external device etc. In some implementations the user may input the test methods to client device via TCE via an external memory device e.g. a CD ROM a flash drive etc. etc. For example client device may execute a computing environment e.g. TCE that generates a user interface for inputting the test methods. Client device TCE may provide for display the user interface for inputting the test methods. In some implementations client device may retrieve the test methods from a memory e.g. main memory ROM and or storage device of associated with client device and may provide the test methods to TCE . In some implementations client device TCE may associate the test methods with a test class and a first test method e.g. test1 and a third test method e.g. test3 may be associated with a test parameter e.g. Param .

In some implementations the user may provide parameter properties to client device TCE . The parameter properties may include syntax of a general form 

In some implementations the user may provide a test suite command to client device TCE . The test suite command may include syntax of a general form 

In some implementations client device may analyze the test suite e.g. suite to determine parameters associated with the test methods of the test suite. For example client device may determine based on the analysis that the test parameter e.g. Param is associated with the first and third test methods e.g. test1 and test3 of the test suite e.g. suite .

As further shown in process may include receiving identification of a particular parameter block . For example client device TCE may receive identification of a particular parameter from the user associated with client device from an external device etc. In some implementations the user may input the identification of the particular parameter to client device via TCE via an external memory device e.g. a CD ROM a flash drive etc. etc. For example the user may identify the test parameter e.g. Param as the particular parameter. In some implementations the identification may include syntax of a general form 

As further shown in process may include identifying elements of the test suite that include the particular parameter block . For example client device may identify elements or a portion of the test suite e.g. suite that include the particular parameter e.g. Param . In some implementations the portion of the test suite may include the first and third test methods e.g. test1 and test3 of the test suite since the first and third test methods are associated with the particular parameter.

Returning to process may include generating a portion of the test suite that includes the identified elements block . For example client device may generate a portion e.g. subsuite of the test suite that includes the first test method e.g. test1 and the third test method e.g. test3 . In some implementations client device may display the portion of the test suite to the user. In some implementations client device may execute all the parameter values of a particular parameter a subset of the parameter values of the particular parameter set of parameters etc.

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

For example as shown in client device TCE may create a test suite that includes elements . Elements may include a combination of the test methods. For example as shown in elements may include the first test method e.g. test1 implementing the parameter values e.g. A B and C for the first test parameter e.g. Param1 the third test method e.g. test3 and the fourth test method e.g. test4 implementing the parameter values e.g. D E and F of the second test parameter e.g. Param2 .

In example and as shown in assume that client device executes a computing environment e.g. TCE that generates a user interface for inputting identification of a particular parameter or a particular parameter value. For example the user may identify the particular parameter or parameter value when the user wants to execute only the test methods that reference the particular parameter or parameter value. In example and as shown in assume that the user inputs the following identification 

In example assume that client device identifies based on the suite.selectIf command elements of the test suite e.g. suite that include the particular parameter e.g. Param1 . For example as shown in client device may create a test subsuite 740 from elements of the test suite. Test subsuite 740 may include elements associated with the first test method e.g. test1 and the parameter values e.g. A B and C for the first test parameter e.g. Param1 .

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include receiving test methods that include input arguments that match parameters associated with properties block . For example a user of client device may provide test methods to an environment e.g. TCE of client device . The test methods may be used to test one or more portions of code generated via TCE . In some implementations the test methods may include syntax of a general form 

As further shown in process may include receiving values associated with the parameters block . For example the user may provide parameter properties to client device TCE . The parameter properties may include syntax of a general form 

In some implementations the input arguments of the test methods may match one or more test parameters associated with the parameter properties. A definition of each test parameter may include a list of values specific to each test parameter. Each test method may utilize any of the test parameters in any order. For example the first test method e.g. test1 may utilize the first test parameter e.g. Param1 and the second test method e.g. test2 may not utilize any test parameters. The third test method e.g. test3 may utilize the first test parameter e.g. Param1 followed by the second test parameter e.g. Param2 . The fourth test method e.g. test4 may utilize the second test parameter e.g. Param2 followed by the first test parameter e.g. Param1 and the third test parameter e.g. Param3 .

As further shown in process may include applying the parameters and or the values to a subset of different test methods block . For example client device may apply the parameter values e.g. A B and C to the first test method e.g. test1 to create multiple versions of the first test method. In some implementations the first test method may include a first version for the first parameter value e.g. A a second version for the second parameter value e.g. B and a third version for the third parameter value e.g. C . In some implementations client device may apply the parameter values e.g. X Y Z D E and F to the third test method e.g. test3 to create multiple versions of the third test method. In some implementations the third test method may include a first version for the parameter values e.g. X and D a second version for the parameter values e.g. Y and E and a third version for the parameter values e.g. Z and F .

In some implementations an input argument of a test method may define parameter s that the test method is to utilize and may provide the test method with value s for each parameter. The test method may specify a test behavior when more than one parameter is specified. For example the test method may specify that the test method is to be invoked for every combination of values of every parameter. In some implementations the test method may specify that the test method is to be invoked using values from corresponding indices in each list of parameter values. The nature of the combination of parameter values may be independent for each test method.

In some implementations test methods may be organized into a single file that completely tests a code portion e.g. a particular function . Some of the test methods in the file may reference parameters and other test methods in the file may not reference parameters. The arrangement described herein may enable a user to utilize parameters for any subset of the test methods in the file and to combine parameters in different ways.

Returning to process may include executing the test methods with the applied parameters and or values to generate results block . For example client device may execute the test methods with the applied parameter values in order generate results. In some implementations client device may execute the three versions of the first test method e.g. test1 to generate results based on the first parameter value e.g. A the second parameter value e.g. B and the third parameter value e.g. C . In some implementations client device may execute the three versions of the third test method e.g. test3 to generate results based on a first set of parameter values e.g. X and D a second set of parameter values e.g. Y and E and a third set of parameter values e.g. Z and F . In some implementations the third test method e.g. test3 may execute nine times when combined exhaustively. This may be the behavior when a user does not otherwise specify.

As further shown in process may include outputting and or storing the results block . For example client device may output e.g. display the results of the execution of the test methods and or may store the results in a memory e.g. main memory ROM and or storage device of associated with client device . In some implementations client device may output and or store the results of the execution of the three versions of the first test method e.g. test1 and or the results of the execution of the three versions of the third test method e.g. test3 .

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

In example assume further that the user utilizes client device TCE to input parameter properties as shown in a user interface of . For example the user may input the following parameter properties 

In example client device may apply the parameter values e.g. A B and C of the first test parameter name e.g. Param1 to the first test method e.g. test1 to create multiple versions of the first test method. For example as indicated by reference number in the first test method e.g. test1 may include a first version for the first parameter value e.g. A a second version for the second parameter value e.g. B and a third version for the third parameter value e.g. C .

In example client device may apply the parameter values e.g. A B and C of the first test parameter name e.g. Param1 and the parameter values e.g. D E and F of the second test parameter name e.g. Param2 to the second test method e.g. test2 to create multiple versions of the second test method. For example as indicated by reference number in the second test method e.g. test2 may include a first version for the parameter values e.g. A and D a second version for the parameter values e.g. B and E and a third version for the parameter values e.g. C and F .

In example further assume that client device executes the multiple versions of the first test method e.g. test1 and executes the multiple versions of the second test method e.g. test2 as indicated by reference number in . Execution of the multiple versions of the first test method e.g. test1 and the second test method e.g. test2 may generate results. For example execution of the first version of the first test method e.g. test1 may generate a result e.g. RESULT execution of the second version of the first test method e.g. test1 may generate a result e.g. RESULT execution of the third version of the first test method e.g. test1 may generate a result e.g. RESULT execution of the first version of the second test method e.g. test2 may generate a result e.g. RESULT execution of the second version of the second test method e.g. test2 may generate a result e.g. RESULT and execution of the third version of the second test method e.g. test2 may generate a result e.g. RESULT . Client device may display the generated results in a user interface and or may store the generated results in a memory.

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include receiving test methods that include input arguments that match parameters associated with properties block . For example a user of client device may provide test methods to an environment e.g. TCE of client device . The test methods may be used to test one or more portions of code generated via TCE . In some implementations the test methods may include syntax of a general form 

As further shown in process may include receiving values associated with the parameters block . For example the user may provide parameter properties to client device TCE . The parameter properties may include syntax of a general form 

Returning to process may include combining the test methods together in a test suite block . For example the user may provide a test suite command to client device TCE . The test suite command may include syntax of a general form 

As further shown in process may include receiving identification of a particular parameter block . For example client device TCE may receive identification of a particular parameter from the user associated with client device from an external device etc. In some implementations the user may input the identification of the particular parameter to client device via TCE via an external memory device e.g. a CD ROM a flash drive etc. etc. For example the user may identify the second test parameter e.g. Param2 as the particular parameter. In some implementations the identification may include syntax of a general form 

Returning to process may include identifying elements of the test suite that include the particular parameter block . For example client device may identify elements or a portion of the test suite e.g. suite that include the particular parameter e.g. Param1 . In some implementations the portion of the test suite may include the third test method e.g. test3 of the test suite since the third test method is associated with the particular parameter.

As further shown in process may include generating a portion of the test suite that includes the identified elements block . For example client device may generate a portion e.g. subsuite of the test suite that includes the third test method e.g. test3 . In some implementations client device may display the portion of the test suite to the user.

Returning to process may include executing the portion of the test suite to generate results block . For example client device may execute some of the test methods of the test suite in order generate results. In some implementations client device may execute the third test method e.g. test3 to generate results based on a first set of parameter values e.g. A and X a second set of parameter values e.g. B and Y and a third set of parameter values e.g. C and Z .

As further shown in process may include outputting and or storing the results block . For example client device may output e.g. display the results of the execution of the portion of the test suite and or may store the results in a memory e.g. main memory ROM and or storage device of associated with client device . In some implementations client device may output and or store the results of the execution of the third test method e.g. test3 .

In some implementations parameterized testing may involve executing the same set of test methods multiple times with varying test parameters. The arrangement described herein may enable a user to execute a particular portion of a parameterized test. For example the user may execute the parameterized test based on a particular parameter and or a particular parameter value. Execution of an entire parameterized test may take several minutes. Whereas execution of only a portion of the parameterized test may decrease execution time and may aid in debugging code.

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

The user may inspect the test suite to determine whether each element contains information associated with the parameters used by the particular element. For example as shown in a user interface of the user may inspect a first element and a first parameter e.g. Fcn of the test suite with the syntax suite 1 .Parameterization 1 . The syntax may return the following test parameter information 

In example and as shown in assume that client device executes a computing environment e.g. TCE that generates a user interface for inputting identification of a particular parameter or a particular parameter value. In example and as shown in assume that the user inputs the following identification 

In example the subsuite may include two suite elements that use the particular parameter value e.g. ones . As shown in user interface the two suite elements may include the following information 

In example further assume that client device executes the two suite elements as indicated by reference number in . Execution of the two suite elements may generate results. For example execution of the first suite element may generate a result e.g. RESULT and execution of the second suite element may generate a result e.g. RESULT . Client device may display the generated results in a user interface and or may store the generated results in a memory.

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include receiving test methods that include input arguments associated with parameters of test fixtures block . For example a user of client device may provide test methods to an environment e.g. TCE of client device . The test methods may be used to test one or more portions of code generated via TCE . In some implementations the test method may include syntax of a general form 

As further shown in process may include receiving environments associated with the parameters block . For example the user may provide test fixture properties to client device TCE . The test fixture properties may include syntax of a general form 

In some implementations the user may want to execute a test method multiple times while changing a state of an environment prior to executing the test method. For example the user may wish to change a default compiler used for compiling the code. The user may want to execute test methods that generate and compile the code using different default compilers. The parameterized test fixture may be used to set up different default compilers.

In some implementations parameterized fixtures may be valuable when there is more than one test method and environmental setup is expensive. The TestClassSetup method may set up a particular environment which may be used by a number of test methods. The TestClassSetup method may be invoked a second time with a different parameter value in order to configure the environment another way. The test methods may then be executed again in this new environment. The expensive environment may be setup a minimal number of times once per shared parameterization which may reduce the expense.

As further shown in process may include applying the test fixture parameters and or the environments to the test methods block . For example client device may apply the parameter environments e.g. x1 and x2 to the test method e.g. test to create multiple versions of the test method. In some implementations the test method may inherit the environmental state of the environment e.g. x1 and the environmental state of the environment e.g. x2 .

Returning to process may include executing the test methods with the applied parameters and or environments to generate results block . For example client device may execute the test methods with the applied parameter environments in order generate results. In some implementations client device may execute the two versions of the test method e.g. test to generate results based on the environment e.g. x1 and the environment e.g. x2 .

As further shown in process may include outputting and or storing the results block . For example client device may output e.g. display the results of the execution of the test methods and or may store the results in a memory e.g. main memory ROM and or storage device of associated with client device . In some implementations client device may output and or store the results of the execution of the two versions of the test method e.g. test .

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

In example assume further that the user utilizes client device TCE to input a test fixture as further shown in user interface . For example the user may input the following test fixture 

In example assume further that the user utilizes client device TCE to input test methods as further shown in user interface . For example the user may input the following test methods 

As shown in a user interface of the information provided by the user in user interface may create a test suite that includes four elements. For example the test suite may include the following suite element names 

In example client device may apply the parameter environments e.g. x1 and x2 of the test fixture parameter name e.g. Param1 to the first test method e.g. test1 to create multiple versions of the first test method. For example as shown in the first test method e.g. test1 may include a first version for the first parameter environment e.g. x1 and a second version for the second parameter environment e.g. x2 .

In example client device may apply the parameter environments e.g. x1 and x1 of the test fixture parameter name e.g. Param1 to the second test method e.g. test2 to create multiple versions of the second test method. For example as shown in the second test method e.g. test2 may include a first version for the first parameter environment e.g. x1 and a second version for the second parameter environment e.g. x2 .

In example further assume that client device executes the multiple versions of the first test method e.g. test1 and executes the multiple versions of the second test method e.g. test2 as indicated by reference number in . Execution of the multiple versions of the first test method e.g. test1 and the second test method e.g. test2 may generate results. For example execution of the first version of the first test method e.g. test1 may generate a result e.g. RESULT execution of the second version of the first test method e.g. test1 may generate a result e.g. RESULT execution of the first version of the second test method e.g. test2 may generate a result e.g. RESULT execution of the second version of the second test method e.g. test2 may generate a result e.g. RESULT . Client device may display the generated results in a user interface and or may store the generated results in a memory.

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

Systems and or methods described herein may provide a mechanism to define parameter values and to specify which test methods use the parameters. Each parameter may be defined separately and each test method may independently use any number of parameters defined in a test. The systems and or methods may enable a particular portion of a parameterized test to be executed such as a portion of the test that utilizes a particular parameter and or parameter value. The systems and or methods may enable shared test fixtures e.g. mechanisms to set up environmental conditions to execute a test to be parameterized so that a test may be executed multiple times in different environments.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an ASIC or a FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

