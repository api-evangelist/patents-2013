---

title: Structured content item synchronization
abstract: A content management system defines a synchronization application programming interface (API) used by applications executing on client devices to synchronize content items after the content items are changed. Functions of the API specify changes to the content items in terms of semantically-meaningful locations within the content items, rather than physical file locations. The content management system can represent the state of a content item in terms of change descriptors that reference the semantic locations of the API. The content management system can then distribute the change descriptors to the client devices, which refer to the semantic locations of the change descriptors when determining how to reconcile changes made by other client devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09053165&OS=09053165&RS=09053165
owner: Dropbox, Inc.
number: 09053165
owner_city: San Francisco
owner_country: US
publication_date: 20130927
---
The application claims the benefit of Provisional Application No. 61 843 778 filed on Jul. 8 2013 which is hereby incorporated herein by reference.

The disclosed embodiments relate generally to sharing of data over a network. In particular the disclosed embodiments are directed to synchronizing different inconsistent copies of data.

It is now common for an individual to regularly use multiple computers from multiple different locations. A typical user may have a first computer at the office and a second computer at home for example as well as a portable computer and a web enabled mobile device such as a smartphone or tablet computer. To have ready access to the user s content it is desirable for the user to share that content between these multiple computers.

One attempt to solve this problem has involved the use of network storage devices whereby services offer users the opportunity to store their documents or other items of content in the cloud that is on servers accessible to users via the Internet or other network. For example a user who is interested in working on a document from multiple locations can store the document on a network file server and then edit it from home work or any other location that provides network access to the file server. For convenience the users of such systems may store local copies of the documents from the server on their different computers viewing and editing the local copies using applications installed on the computers. If the users make changes they may then upload the changed copies back to the server. In a similar manner a user may indirectly make changes to files or other data by using applications running on the user s different computers with the applications making changes to the files or other data in response to the user s actions in the applications. In order to maintain a consistent state of the applications these files also need to be uploaded to the server and distributed to the user s other computers.

In some situations however the different copies of the user s content documents files or other data on the different user computers can become inconsistent. This may occur for example when one or more of the computers temporarily lacks network connectivity preventing the changed content from being uploaded back to the server. The user might then switch to a different computer access the unchanged content on the server and make a separate different change to the content. Thus when the two different changed sets of content are eventually uploaded back to the server it will be necessary to reconcile the separate changes to avoid losing user information.

In many instances however the server itself is ill equipped to reconcile the changes. For example the documents may have data formats unknown to the server and thus the server will not be able to make a semantically meaningful determination of what the changes are. This is particularly the case where a single logical change to a document leads to physical changes at multiple distinct locations in the document such as in the case of documents whose data are described by elements with both opening and closing tags in various sub parts for example. Lacking a representation of the changes at a semantic rather than physical level the server cannot provide the user with a useful summary of the changes much less automatically reconcile the changes.

A content management system has content storage storing content items. The content items aggregate the changes to counterpart copies of content items located on different client devices that use the content management system for synchronization of the content item copies. The content management system further defines a synchronization application programming interface API used by applications executing on the client devices to synchronize the content items after the content items are changed.

Functions of the API specify changes to the content items in terms of semantically meaningful locations rather than physical byte based locations i.e. a location specified purely in terms of a byte or block number within a file . For example in one embodiment the content item locations are described in terms of records within a file or files embodying the content item and further in terms of fields within the specified record. When an instance of an application executing on a client device changes the state of its local content item copy it calls a notification function of the synchronization API describing the change in terms of the semantic location defined by the API. When the content management system receives the notification of the change sent to it by the application instance as a result of the notification function it determines whether the change was made with respect to the latest version of the corresponding content item already stored on the content management system or whether there have been intervening changes made by other instances of the application running on other client devices.

In one embodiment presuming that there have been no intervening changes the content management system updates the content item by storing the change in association with the content item the result being the latest version of the content item. If however there were intervening changes the content management system rejects the change sent by the notification function sending the application instance a list of the most recent changes not already reflected in the local content item copy managed by the application instance. The application instance then applies its own knowledge of the data semantics of the content item that it manages determining whether its own latest change and the changes provided by the application access server can be reconciled without loss of information.

In one embodiment presuming that the changes can be reconciled the application instance reconciles the changes by incorporating the changes provided by the content management system into its own local copy of the content item. If the changes cannot be completely reconciled the application instance may for example remove its own most recent changes to its local content item copy instead making a change to the local copy that represents its best approximation of the combination of the changes. In either case to ensure that the application instances on all related client devices have access to the same data the application instance uses the notification function of the API to describe its own latest change either the complete change that was rejected by the content management system or its best approximation thereof that is consistent with the changes to the content item copy already stored on the content management system.

Since the updated changes provided by the content management system now reflect changes to the version of the content item already stored on the content management system the content management system accepts and stores the updated changes. The updated changes together with the prior changes already accepted constitute the current state of the content item. Other application instances can then obtain these changes in response to their queries for any more recent versions of the content item and can incorporate them into their own local content items. This has the effect of synchronizing the content item across the different client devices.

Alternatively and or additionally the content management system may have knowledge of the semantics of the changes to the content item and may accordingly update the data of the content item by implementing the changes to the content item rather than simply storing a list of the changes to the content item.

In embodiments in which the content management system need only store and provide descriptions of the changes to the content items in terms of locations having semantic meaning to the applications and need not itself reconcile different changes the content management system is freed from the necessity of having knowledge of different data formats. Accordingly the content management system can efficiently facilitate synchronization of content items for any number of different applications having any number of different content item formats.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that other alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

In the environment illustrated in each of client devices accesses content through content management system . Thus each client device may jointly access various types of content such as a folder MyFolder containing files such as file 1 file 2 and photo. Various types of devices can function as a client device such as desktop computer A tablet computer B and mobile device C. Any device capable of accessing content management system and interacting with the content items stored on content management system may be used as a client device .

Users may create accounts at content management system and store content thereon by transmitting such content from client device to content management system . The content provided by users is associated with user accounts that may have various privileges. The privileges may include viewing the content item modifying the content item modifying user privileges related to the content item and deleting the content item.

Client devices communicate with content management system through network . The network may be any suitable communications network for data transmission. In one embodiment network is the Internet and uses standard communications technologies and or protocols. Thus network can include links using technologies such as Ethernet 802.11 worldwide interoperability for microwave access WiMAX 3G digital subscriber line DSL asynchronous transfer mode ATM InfiniBand PCI Express Advanced Switching etc. Similarly the networking protocols used on network can include multiprotocol label switching MPLS the transmission control protocol Internet protocol TCP IP the User Datagram Protocol UDP the hypertext transport protocol HTTP the simple mail transfer protocol SMTP the file transfer protocol FTP etc. The data exchanged over network can be represented using technologies and or formats including the hypertext markup language HTML the extensible markup language XML etc. In addition all or some of links can be encrypted using conventional encryption technologies such as the secure sockets layer SSL transport layer security TLS virtual private networks VPNs Internet Protocol security IPsec etc. In another embodiment the entities use custom and or dedicated data communications technologies instead of or in addition to the ones described above.

As an example of application and its associated content item the application could be an electronic game and the content item could be a file storing the state of the game for the user such as a list of the levels that the user has unlocked and that are thus available to the user. As another example application could be a day planner application and content item could be a file storing a list of different days and data about the tasks associated with those days.

Since content item can be stored locally on client devices e.g. as the content item copies D and E illustrated in and modified by client devices a particular content item copy can be changed to have a state different from that of other copies of the same content item on different client devices. For example illustrate various copies of an example comma separated value file content item that might be used by electronic game application to represent the status of portions of the game available to the user. could represent an initial copy of file content item at the time that the user starts to play the game where each line of the file represents a particular world within the game and each element of a line represents the corresponding level within that world. Thus in only the first element of the first line has the value 1 and all the other elements have the value 0 signifying that the first level of the first world is available to the user but all the remaining levels have yet to be unlocked. This initial copy of content item of might be installed on each client device along with application or might be obtained through distribution to the different client devices via the content management system .

The ability of the different instances of application to change the local copies of content item on their associated client devices introduces the potential for data inconsistency which can in turn lead to an inconsistent user experience on the different client devices. Continuing the example when the user in future plays game application instance D on client device D she will be able to play the second level of the first world but not the third level of the first world even though she has previously unlocked both levels. Conversely when she plays game application instance E on client device E she will be able to play the third level but not the second level. Such inconsistencies could arise if for example client device E were a smartphone or tablet computer on which the user played game application instance D when out of range of cellular or wireless connectivity and then turned off before connectivity was regained and the user then played game application instance E on the client device E before turning client device D on again.

Continuing the example further assume that client device E has network connectivity and stores its copy of file content item E before client device D and then client device D attempts to store its different copy of file content item D. In such a situation a traditional file server could note the existence of an inconsistency between content item copies D and E in that the content item data are not identical. However assuming that the file format illustrated in is specific to game application and is unknown to the traditional file server the traditional file server would merely be able to note that the contents of the files were not identical but would not be able to reconcile the differences. If the traditional file server attempted to address the problem by storing only one of content item copies D E then access to one of the levels would incorrectly be unavailable. Further reconciling inconsistencies between content items becomes still more difficult in the case of different file types such as XML or other files with both opening and closing tags where a single change might result in changes to multiple distinct physical locations within the file.

Given this potential for inconsistency inherent in content item changes taking place in parallel before the changes have been fully distributed content management system also includes synchronization handler that facilitates synchronizing the different copies of content items even when the different copies have been changed in different manners. To this end content management system provides a synchronization API that enables applications that use content management system for content item synchronization to specify changes to the content items according to a high level semantic schema. The different instances of the same application can then use the specification of the changes to more easily determine what sort of changes have been made to a given content item by the other application instances whether these changes introduce any inconsistencies and how to reconcile the inconsistencies. Synchronization logic within applications uses the synchronization API of synchronization handler to initiate the synchronization process.

It is appreciated that represents a simplified example in which only a few components of content management system and client devices are depicted for the sake of clarity. Content management system and client devices are now described more fully with respect to below.

Client devices maintain various types of components and modules for operating the client device and accessing content management system . The software modules include operating system and one or more applications . Applications vary based on the client device and may include various applications for creating viewing and or modifying content stored on content management system such as word processors spreadsheets database management systems code editors image and video editors and the like. Operating system on each device provides a local file management system and executes the various software modules such as content management system client application and application . A contact directory stores information on the user s contacts such as name telephone numbers company email addresses physical address website URLs and the like.

Client devices access content management system in a variety of ways. Client device may access content management system through a native application or software module such as content management system client application . A schematic example display from a client application is shown in on client devices B and C. Client device may also access content management system through web browser as shown on client device A. As an alternative the client application may integrate access to content management system with the local file management system provided by operating system . When access to content management system is integrated in the local file management system a file organization scheme maintained at content management system is represented as a local file structure by operating system in conjunction with client application .

Client application manages access to content management system . Client application includes user interface module that generates an interface to the content accessed by client application as variously illustrated herein and is one means for performing this function. The generated interface is provided to the user by display . Client application may store content accessed from a content storage at content management system in local content . While represented here as within client application local content may be stored with other data for client device in non volatile storage. When local content is stored this way the content is available to the user and other applications or modules such as application when client application is not in communication with content management system . Content access module manages updates to local content and uses synchronization logic to communicate with content management system to synchronize content modified by client device with content maintained on content management system and is one means for performing this function. Client application may take various forms such as a stand alone application an application plug in or a browser extension.

In certain embodiments client device includes additional components such as camera and location module . Location module determines the location of client device using for example a global positioning satellite signal cellular tower triangulation or other methods. Location module may be used by client application to obtain location data and add the location data to metadata about a content item.

User account database can also include account management information such as account type e.g. free or paid usage information for each user e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . Account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as documents text files audio files video files etc. from one or more client devices associated with the account. The content can also include folders of various types with different behaviors or other content item grouping methods. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photo content items and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio file content items and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage which is one means for performing this function. Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. In one configuration content management system stores the content items in the same organizational structure as they appear on the client device. However content management system can store the content items in its own order arrangement or hierarchy.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one configuration each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate content items or duplicate segments of content items. In one embodiment for example a content item may be shared among different users by including identifiers of the users within ownership metadata of the content item e.g. an ownership list while storing only a single copy of the content item and using pointers or other mechanisms to link duplicates with the single copy. Similarly content storage stores content items using a version control mechanism that tracks changes to content items different versions of content items such as a diverging version tree and a change history. The change history includes a set of changes that when applied to the original content item version produces the changed content item version.

Content management system automatically synchronizes content items from one or more client devices using synchronization module which is one means for performing this function. The synchronization is platform agnostic. That is the content items are synchronized across multiple client devices of varying type capabilities operating systems etc. For example client application synchronizes via synchronization module at content management system content in client device s file system with the content items in an associated user account on system . Client application synchronizes any changes to content items in a designated folder and its sub folders with the synchronization module . Such changes include new deleted modified copied or moved files or folders. Synchronization module also provides any changes to content associated with client device to client application . This synchronizes the local content at client device with the content items at content management system .

Conflict management module determines whether there are any discrepancies between versions of a content item located at different client devices . For example when a content item is modified at one client device and a second client device differing versions of the content item may exist at each client device. Synchronization module determines such versioning conflicts for example by identifying the modification time of the content item modifications. Conflict management module resolves the conflict between versions by any suitable means such as by merging the versions or by notifying the client device of the later submitted version. Conflict management module may use the synchronization handler as described below.

A user can also view or manipulate content via a web interface generated by user interface module . For example the user can navigate in web browser to a web address provided by content management system . Changes or updates to content in content storage made through the web interface such as uploading a new version of a file are synchronized back to other client devices associated with the user s account. Multiple client devices may be associated with a single account and files in the account are synchronized between each of the multiple client devices .

Content management system includes communications interface for interfacing with various client devices and with other content and or service providers via an Application Programming Interface API which is one means for performing this function. Certain software applications access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which verifies user credentials security tokens API calls specific client devices etc. to determine whether access to requested content items is authorized and is one means for performing this function. Authenticator module can generate one time use authentication tokens for a user account. Authenticator module assigns an expiration period or date to each authentication token. In addition to sending the authentication tokens to requesting client devices authenticator module can store generated authentication tokens in authentication token database . Upon receiving a request to validate an authentication token authenticator module checks authentication token database for a matching authentication token assigned to the user. Once the authenticator module identifies a matching authentication token authenticator module determines if the matching authentication token is still valid. For example authenticator module verifies that the authentication token has not expired or was not marked as used or invalid. After validating an authentication token authenticator module may invalidate the matching authentication token such as a single use token. For example authenticator module can mark the matching authentication token as used or invalid or delete the matching authentication token from authentication token database .

Content management system includes a sharing module for sharing content publicly or privately which is one means for performing this function. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The content can also be shared across varying types of user accounts.

In some embodiments content management system includes a content management module for maintaining a content directory that identifies the location of each content item in content storage and allows client applications to request access to content items in the storage and which is one means for performing this function. A content entry in the content directory can also include a content pointer that identifies the location of the content item in content storage . For example the content entry can include a content pointer designating the storage address of the content item in memory. In some embodiments the content entry includes multiple content pointers that point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry in some configurations also includes a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module adds a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module generates a custom network address such as a URL which allows any web browser to access the content in content management system without any authentication. The sharing module includes content identification data in the generated URL which can later be used by content management system to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. The content identification data included in the URL can be transmitted to content management system by a client device to access the content item. In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created.

Content management system may be implemented using a single computer or a network of computers including cloud based computer implementations. For the purposes of this disclosure a computer is device having one or more processors memory storage devices and networking resources. The computers are preferably server class computers including one or more high performance CPUs and 1G or more of main memory as well as 500 Gb to 2 Tb of computer readable persistent storage and running an operating system such as LINUX or variants thereof. The operations of content management system as described herein can be controlled through either hardware or through computer programs installed in computer storage and executed by the processors of such server to perform the functions described herein. These systems include other hardware elements necessary for the operations described here including network interfaces and protocols input devices for data entry and output devices for display printing or other presentations of data but which are not described herein. Similarly conventional elements such as firewalls load balancers failover servers network management tools and so forth are not shown so as not to obscure the features of the system. Finally the functions and operations of content management system are sufficiently complex as to require implementation on a computer system and cannot be performed in the human mind simply by mental steps.

The content storage contains content items each content item representing a state of the content item to be synchronized across the different client devices by the content management system . Each content item has a set of associated data and metadata including for example an identifier uniquely identifying the content item e.g. the string item383aqi32 or a unique integer an owner identifier uniquely identifying a registered user of the content management system to whom the content item belongs e.g. the string user82ax2p a username or email address or a unique integer a current version e.g. the integer 17 and a list of change descriptors. The current version is used during synchronization to determine whether a given content item has been inconsistently updated.

The change descriptors associated with content item collectively describe the state of content item as a series of changes with respect to some base state of the content item. Each change descriptor includes a version indication representing the version of the content item at the time that the content item was changed by that change descriptor a representation of the semantic location of the change and a representation of the change itself. The representation of the semantic location of the change describes the location in a semantic rather than physical manner that is appropriate for use by application and corresponds to data provided as part of the synchronization API as described below. For example in one embodiment described below the location of the change is represented by the pair where record represents a particular high level unit of the data within content item and field represents a sub unit of a record.

The representation of a location is particularly suitable for content items where the data can be described according to a well defined semantic structure. For example for the above described content items representing the stages of the game that a user has unlocked the records could represent the individual lines within a file embodying the content item i.e. the worlds within the game and the fields could represent the individual elements within each line i.e. the stages within each world . Although in this embodiment the synchronization API requires applications to represent the locations of changes to data in terms of records and fields the correspondence between given records fields and physical byte locations is left to the individual applications to determine. Thus a record need not represent a series of characters or bytes making up a textual line nor need it even represent contiguous data. Rather individual application may map a particular record to any portion or set of non contiguous portions of the data in the file s embodying the content item provided that all instances of the application perform the mapping in the same way.

The change itself is represented within the change descriptor as the value to which the data corresponding to the given location is set such as the integer or string 1 representing that the level corresponding to a particular record and field has been unlocked. In one embodiment the representation of the change may also include the prior value of the data at the given location before the change was made such as the integer or string 0 representing that the level had not previously been unlocked.

It is appreciated that the exact types of data or metadata associated with a content item may vary in different embodiments and that the above description of the associated data represents one particular embodiment. For example the location need not be represented as a pair but may be represented in any semantically meaningful manner that allows the applications to determine whether changes to different locations can be reconciled.

Specifically client synchronization logic comprises change notification module that application uses to notify synchronization handler of changes that the application has made to local content item copy and that should accordingly be made to content item copy in content storage . The notifications provided by change notification module conform to the synchronization API provided by synchronization handler . In one embodiment the synchronization API includes functions to add delete and modify data within the content items. For example such functions might be defined as follows 

where record field and value together constitute the change descriptor. Specifically itemID denotes a unique identifier of the affected content item version denotes an indication of the version of the local content item copy record denotes a position at which to insert a record relative to other records e.g. 1 denoting that a new record should be added after the first record or an identifier of a record to delete or modify field denotes the field within the record that is being inserted or modified and value denotes the data to insert or modify at the location represented by the given record and field. For example the function invocation syncModify f v 1 2 1 might signify the change of the first record of version v of a content item f with the second field being set to the value 1. 

It is appreciated that in other embodiments the synchronization API may be different from the example described above. For example the API could include a different number of functions or of parameters within the various functions. For instance rather than having a single field and value parameter the syncModify function could support a variable number of pairs. Additionally the synchronization API functions could specify different data types for the given value parameters such as integer string floating point and the like. The functions could also permit the client applications to specify rules e.g. as arbitrary blocks of code defining how the change will be performed such as adding values instead of merely overwriting values.

Change notification module implements calls to the functions of the synchronization API by sending a message over the network to synchronization handler of content management system . Specifically the message contains data corresponding to the function itself e.g. Modify and the parameters of the synchronization API functions e.g. itemID version record field and value . For example the message might have the values representing a request to modify the 17th version of the content item item383aqi32 by writing the value 1 into record 1 field 2.

Representing updates to a content item in terms of change descriptors allows significantly faster synchronization than would be possible when sending the entire contents of the changed content item. For example if the size of a particular content item were 1 MB and a change set could be represented in 1K then only 0.1 of the amount of data need be sent to synchronize the content item with respect to the total amount of data in the content item permitting frequent essentially real time synchronization.

Change response module of synchronization handler receives the message sent by change notification module implementing the same change described by the message within the content storage if possible and notifying application if not. Specifically change response module finds the content item given by the message item identifier within content storage . The content item version given by the message is then compared to the content item version of the content item in the content storage . If the versions match then there have been no intervening changes made by other applications to the content item in the content storage . In this case change response module incorporates the change specified by the message.

In one embodiment since content management system need not itself understand the data semantics of content item change response module does not itself modify the contents of content item but rather represents the contents of content item as a series of change descriptors. Accordingly to incorporate the given change to content item change response module need simply append the given change descriptor to the list of change descriptors. The content of content item can then be reconstructed by applications using the cumulative set of change descriptors.

In other embodiments change response module has sufficient knowledge of the semantics of some or all of the possible modifications or other operations on content items to enable it to update the data of its local copy of content item to reflect the modification s without relying on applications to effect the modification s . This reduces or eliminates the burden on applications to update the data and correspondingly on the authors of applications to write code embodying the semantics of operations on content items. Synchronization handler can then handle requests from clients for the latest version of a content item providing the data content item rather than a representation of the collection of changes to content item . To better enable change response module to understand application operation semantics the synchronization API may be extended to provide additional functions corresponding to different possible types of semantic operations. In one embodiment the change response module queues the different operations on content items as they are received from clients executing the operations and updating the local copies of content items accordingly when feasible. If a client request for content item data as opposed to a request for the collection of content item modifications is received before all the operations on the content items have been performed the change response module performs all the remaining queued operations on the content items before synchronization handler sends the content item data to the client. In one embodiment synchronization handler can determine the data of an older version of a content item e.g. in response to a client requesting an older version by undoing in reverse chronological order the change descriptors corresponding to prior operations on content item . To facilitate the undoing the change response module may store additional data associated with the change descriptors such as for a modification operation the previous values of the portions of data that were modified.

The change response module additionally updates the version of content item as stored in content storage to reflect that the content has changed. For example in one embodiment the version is represented by a version indication integer which is increased by one for every successive version.

In one embodiment as an alternative or supplement to itself determining the data of a content item the synchronization handler can request the content of the content item from applications and store that content within content storage . Having the actual content of some version of content item rather than merely the set of change descriptors producing it allows the corresponding change descriptors to be discarded from content storage and also reduces the amount of processing required by applications to reconstruct the content item contents. To reduce the amount of data to be transferred such requests can be made infrequently such as after some number N of change descriptors have been accumulated.

In one embodiment if the content item version specified by a received message to perform an operation on content item does not match the version of the content item in content storage i.e. the version in the message corresponds to an older version than the version in content storage then change response module instead informs application instance that the change has been rejected. In one embodiment the message that informs application instance that the change has been rejected includes an indication that the change has been rejected the version of the content item currently within the content storage and the change descriptor s corresponding to the version s after the version specified by the application instance in the change request message. For example if the change request message from the application instance specified the version and content storage contained the version for the given content item then the change response module would send the change descriptor that caused version of the content item to become version . Similarly if the request message specified version and the content storage contained version then the change response module would send the change descriptors corresponding to the 17and 18versions. It is appreciated that the messages exchanged between application instance and synchronization handler may differ from those described above. For example in some embodiments synchronization handler merely provides a messages specifying that the change has been rejected and the version of content item currently within content storage and it is left to application instance to request the change descriptors corresponding to the changes that took place between the current version and the requested version.

The synchronization logic of the applications additionally comprises change merge module which is used to reconcile the conflicting changes in the case of a change that was rejected by change response module of the synchronization handler . Specifically if synchronization logic receives a message rejecting the change sent to content management system by change notification module it delegates to change merge module to reconcile the changes. Change merge module being part of application instance itself has knowledge of the semantics of the data within content item and thus has the necessary information to properly reconcile its own change with the changes already made by other application instances . Change merge module can enforce the semantics of the content item by defining a set of rules about how the different semantic locations may be modified relative to other locations in the content item and applying those rules to determine whether or to what extent the changes can be merged. In embodiments in which content management system has knowledge of the semantics of operations on content items change merge module may be partially or entirely implemented using calls to a client library provided by content management system . In such embodiments applications use calls to functions of the client library to implement the operations.

For instance referring again to the example of the content item representing the state of the game the rules defined by change merge module of the associated applications might specify that changes to different fields are not inconsistent and thus may be independently implemented whether within the same record or within different records. This rule reflects the fact that the unlock level action of the game is an associative operation in that the resulting state of the game is the same whether the second level is unlocked before the third level or the third level is unlocked before the second level. If however the game only allowed a certain number of levels to be unlocked per world then the rules could be defined to ensure that the unlocking of the second and the third levels did not result in more than the maximum number of unlocked levels for the corresponding world. If this rule were violated e.g. if both unlock level changes resulted in one more than the maximum permissible number of unlocked levels then the rules could mandate that for example only one of the two unlock level changes be made. Accordingly change merge module might undo the effect of the unlock level change already made by its application instance to the local content item copy instead implementing the unlock level change already successfully reflected in content storage of content management system . It is appreciated that the rules defined by the application s change merge module could encompass any type of action appropriate to the semantics of the content item data in question.

Note also that a rule could permit separate changes to the same semantic location based on the known meaning of the data stored at that location. For example if the particular semantic location e.g. record and field in question represented an aggregate count and one change increased the value at the semantic location by 2 and the other increased its value by 3 the synchronization logic could incorporate both changes by increasing the value of the semantic location by 2 3 5.

Synchronization handler may additionally comprise query response module which is used by applications to obtain the latest version of content item . Query response module receives a query from application instance for content item copy C from content storage as represented by a particular content item identifier along with an indication of the version of the corresponding content item copy currently stored by the application instance. In one embodiment query response module in turn provides application instance with a response describing the changes not already reflected in the copy of content item stored by the application if any. The provision of such changes is similar to that performed by change response module when it rejects the attempted incorporation of a change namely query response module provides an indication of the version of the content item currently stored in content storage along with the change descriptors corresponding to any versions more recent than the version indicated by the application. The querying application instance can then update its content item copy to the latest version by using its change merge module to incorporate the provided change descriptors and by updating its corresponding version to that provided by query response module .

In some embodiments application instance polls content management system e.g. at periodic intervals for any new changes. For example application instance can provide the request and an indicator of the version currently accessible to application instance . Query response module could in turn reply with for example the data corresponding to the copy of content item currently stored in content storage or a list of the change descriptors corresponding to changes later than i.e. received by the content management system after the given version or an indicator that there may have been a change in response to which application instance could affirmatively request the data of the latest version or the list of the relevant change descriptors . In other embodiments application instance sends a message to content management system requesting notification of changes to content item e.g. any changes later than a given version of a content item specified in the request. In response query response module registers the requesting application instance in association with the given content item and version and notifies the requesting application of any changes to the given content item.

As noted above in some embodiments query response module alternatively and or additionally provides the complete data for content item rather than the change descriptors corresponding to the current state of content item .

Assume that before the start of the interactions illustrated in content item copies D E of application instances D E are synchronized and up to date that is that both copies D E have the same data as copy C stored in content storage of content management system which currently has some version indication denoted n. Application instance E then changes its associated copy E according to an operation denoted change. Referring back to the example illustrated in application instance E might modify the data of the file content item in producing the contents of . This change might be denoted by the change descriptor change representing a change of record field to the value 1 to reflect that the user unlocked the second level of the first world.

In order to ensure that other application instances also have access to the modified data application instance E notifies content management system using the synchronization API of the synchronization handler . That is the change notification module calls the function of the synchronization API that indicates a change causing a message describing the change to be sent to the synchronization handler . The message data include the identifier of content item the version indication of content item and a descriptor of the change to the content item which specifies a location of the change within the content item e.g. a record number and field number and the value assigned to that location. Referring to the above example application instance E might call the function syncModify item383aqi32 17 1 2 1 where item383aqi32 is the content item identifier 17 was the existing version indication at the time of the change 1 indicates the changed record 2 indicates the changed field and 1 indicates the new value assigned to record 2 field 1.

Synchronization handler receives the content item change message from application D and updates the state of the content item corresponding to the given item identifier e.g. item383aqi32 . Specifically the synchronization handler compares the version indication given by the application instance E e.g. 17 to the version indications currently listed within content storage for the item identifier given by application instance E. Since in this example the version indications match synchronization handler determines that there have been no intervening changes to content item copy C by other application instances and accordingly adds the change descriptor e.g. to the list of changes to copy C. Synchronization handler additionally increments or otherwise changes the version indication e.g. to 18 and associates it with the new change descriptor signifying that that particular change resulted in the current version. Alternatively in embodiments in which synchronization handler has knowledge of the semantics of the operation resulting in the change to content item synchronization handler computes the resulting data corresponding to the current state of content item rather than simply storing the change descriptor of the operation that produced the current state.

In one embodiment synchronization handler additionally notifies application instance E of acceptance of the update to content item . The notification may also include the resulting data corresponding to the current state of content item . In some embodiments in order to address a loss of the notification of acceptance before its receipt by application instance E e.g. due to network error change descriptors include a value that identifies the corresponding change with high probability e.g. a random value . Thus for example assume that application E never receives notification of acceptance of change and later queries content management system for the current state of the content item receiving a list of the relevant change descriptors. Application instance E can then determine that change was in fact almost certainly incorporated into the copy of the content item stored on content management system by identifying the value corresponding to change within one of the change descriptors.

At some point independent of the actions of application instance E application instance D separately changes its copy D which does not reflect the change of step . For example client device D executing application instance D may have lacked network connectivity at the time and thus would not have learned of the update of step . After regaining network connectivity application instance A then notifies content management system of the change by calling the API function in the same manner as that of application instance E such as by calling syncModify item383aqi32 17 1 3 1 assuming that the change is described by the change descriptor as previously illustrated in .

Synchronization handler of content management system receives the call of the application instance D and compares the version indication e.g. 17 for the content item with the version indication currently associated with the content item in content storage e.g. 18 . Since they differ with the version stored in content storage being more recent and thus signaling that there have been intervening synchronized changes by other application instances the synchronization handler notifies application instance D that its attempt to synchronize the change has been rejected. As part of the rejection the synchronization handler provides the application instance D with the content item version indication currently stored in content storage e.g. 18 along with the corresponding change descriptor e.g. .

Using the information provided by the synchronization handler as part of the rejection application instance D merges the change made by application instance E at step with the changes made by application instance A at step . Specifically application instance A has already incorporated the change of step into its copy D and it determines how to additionally incorporate the change of application instance E at step as represented by the change descriptor provided by synchronization handler as part of the rejection of step . Using the change location information of the change descriptor e.g. record column application instance A determines whether the two changes conflict i.e. refer to the same semantic location within the content item or whether there is any other rule that would preclude the change from step from being merged with the change of step . Continuing the above example the application instance D determines that the changes do not conflict since the two changes modify different fields within the same record and there is no rule that is violated by independent fields being set to the value 1. Accordingly application instance D merges the changes by setting the second field of the first record of its content item copy D to the value 1 thereby implementing the same change performed by application instance B at step .

It is appreciated that the merge could be accomplished in other manners as well. For example application instance A could undo its own changes apply the change descriptors obtained as part of or in response to rejection and then attempt to re apply its changes .

Further in order to allow application instance D and any other application instances to be synchronized application instance D notifies the synchronization handler of the merge. Specifically application instance D calls the API function in the same manner as before but this time including the version indication corresponding to content item copy C that is already stored in content storage . This reflects the fact that the separate changes made by application instances D E were not inconsistent and therefore could be applied separately in either order without altering the resulting state of content item . Referring again to the above example for instance application instance A would call syncModify item383aqi32 18 1 3 1 to incorporate its own update within content item .

Synchronization handler then receives the data passed in the API function and since this time the versions of content item match e.g. both are 18 synchronization handler computes the next version indication e.g. 19 and adds it to content storage in association with content item and with the provided change descriptor e.g. that produced the current content item state. Then when the content item E of application instance E is synchronized with content storage e.g. by application E querying synchronization handler for any new versions of content item and synchronization handler responding by notifying application instance E of the change or synchronization handler notifying application instance B in response to a previous request of application instance B to be notified of updates application E can merge the change from step into its own content item copy D.

As a result of the updates of steps and the corresponding merges of steps copies D E have been synchronized with respect to copy C within content storage and by extension with each other. Accordingly the user of client devices D E will be able to use application on either of the devices and the state of the application will be the same on both.

Note that in embodiments that delegate the understanding of the semantics of content item to applications on client devices content management system is freed from the necessity of calculating changes to the content items and performing merge operations. In this way content management system can facilitate synchronization of content items across an unlimited number of different data formats by acting as an intermediary that provides applications with descriptions of the various changes that were made relying on the applications themselves to interpret and incorporate these changes. Thus it is appreciated that although for simplicity the above examples have focused on different instances of a single application content management system supports any number of different applications and their corresponding different file data formats. It is likewise appreciated that although for purposes of clarity the above examples have described only two distinct client devices application instances and content items content management system supports any number of them. Thus when implemented content management system may be in communication with thousands or millions of client devices and each client device may store one or multiple content items on content management system . Content management system and its components may be implemented using any appropriate hardware for performing data serving and storage. Additionally many components required for operation of a content management system and service known to those of skill in the art but not germane to this description for example network cards CPUs memory and the like have been omitted for clarity.

Additionally the data that is synchronized across applications and client devices need not be a discrete file recognizable by the file system of a particular operating system but rather is any portion of content item data having semantic meaning to applications . For example the synchronized data could be a particular portion of a relational database. Thus the more general terms object or data could be substituted for the term file in the above description while still achieving the same function.

Content management system receives notification of a change to content item as in step of . The notification comprises an indication of a semantic location of the change within content item such as a indication as well as an indicator of a version of the content item. Application of client may have sent the notification using the sync API such as by calling syncModify item383aqi32 17 1 3 1 as described above.

Content management system determines whether a different change has already been made with 720 respect to the received indicator of the version of content item . For example if content item as stored in content repository has a different e.g. greater version than the received version indicator then it is likely that another client device has made a separate different change to content item not already reflected in the copy of content item stored on the client device that sent the change notification.

If a different change has already been made content management system notifies the client device that sent the change notification as described above with respect to the rejection of . The notification of change rejection includes an indication of a second semantic location in the content item corresponding to the separate different change the second semantic location having been provided to content management system by the client device that made the separate different change. The notification of change rejection also includes for example an indication of the version of content item currently stored in content storage as well as the associated change descriptor s and an indication of a semantic location corresponding to the separate change. The client device that sent the notification of step can use the information provided in the notification of change rejection to merge its own changes with the separate different change for example as described above with respect to step of .

If a different change has not already been made content management system updates content item and optionally notifies the client device that sent the change notification that the change was accepted as described above with respect to steps and of .

Client device changes a copy of content item within its local content and accordingly notifies content management server of the change as described above with respect to step of .

If for example another client device has already made a separate change to content item and content management system has noted the separate change client device will receive a notification of rejection of the change as described above with respect to step of . The notification of rejection includes for example an indication of a semantic location corresponding to the separate change to content item as well as the associate change descriptor s and an indication of the version of content item currently stored in content storage .

Client device uses the indication of the semantic location corresponding to the separate change to merge its own change and the separate change within the copy of content item within its local content as described above with respect to step of . Client device also notifies content management system of the merged change which constitutes a third change which may be different from the original change reported in step as described above with respect to step of . Content management system can accordingly update its copy of content item to reflect the combination of the separate change performed by the other client device and the change performed by client device .

Reference in the specification to one embodiment or to an embodiment means that a particular feature structure or characteristic described in connection with the embodiments is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

It should be noted that the process steps and instructions can be embodied in software firmware or hardware and when embodied in software can be downloaded to reside on and be operated from different platforms used by a variety of operating systems.

The operations herein may also be performed by an apparatus. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non transitory computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of media suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may also be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references below to specific languages are provided for disclosure of enablement and best mode of the present invention.

While the invention has been particularly shown and described with reference to a preferred embodiment and several alternate embodiments it will be understood by persons skilled in the relevant art that various changes in form and details can be made therein without departing from the spirit and scope of the invention.

Finally it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

