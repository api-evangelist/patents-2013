---

title: Systems and methods for split proxying of SSL via WAN appliances
abstract: The present invention is directed towards systems and methods for split proxying Secure Socket Layer (SSL) communications via intermediaries deployed between a client and a server. The method includes establishing, by a server-side intermediary, a SSL session with a server. A client-side intermediary may establish a second SSL session with a client using SSL configuration information received from the server-side intermediary. Both intermediaries may communicate via a third SSL session. The server-side intermediary may decrypt data received from the server using the first SSL session's session key. The server-side intermediary may transmit to the client-side intermediary, via the third SSL session, data encrypted using the third SSL session's session key. The client-side intermediary may decrypt the encrypted data using the third SSL session's session key. The client-side intermediary may transmit to the client the data encrypted using the second SSL session's session key.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949591&OS=08949591&RS=08949591
owner: Citrix Systems, Inc.
number: 08949591
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20130916
---
This applications claims priority to and is a continuation of U.S. patent application Ser. No. 12 764 633 titled Systems and Methods for Split Proxying of SSL Via WAN Appliances filed Apr. 21 2010 and issued as U.S. Pat. No. 8 543 805 of which is hereby incorporated in its entirety.

The present application generally relates to data communication networks. In particular the present application relates to systems and methods for split proxying of SSL via wan appliances.

Communications between two network end points such as a client and a server may be relayed through one or more intermediaries across one or more networks. Examples of these intermediaries include gateways routers switches and other network appliances. End to end communications between a client and a server may be provided by a secure connection such as a SSL session connection. An intermediary between a client and a server may facilitate establishment of a SSL session connection as well as provide shielding protection to the client or server via a virtual private network VPN for example. In some cases a plurality of intermediaries between two end points may provide data acceleration and other services across one or more networks. Each intermediary may also act as a proxy for a server or client relaying or processing data on behalf of the server or client.

The present application is directed to methods and systems for split proxying SSL communications across a plurality of intermediaries or wide area network WAN appliances deployed between a client and a server. An intermediary may establish a secure connection such as a SSL connection with the server. Another intermediary may establish a secure connection such as a SSL connection with the client. The two intermediaries may bridge the client side and server side connections with another secure connection between the intermediaries. These three connections may be secured using one or more encryption keys. When transmitting data from the server to the client rather than sharing and or passing encryption key information across the intermediaries the present systems may assign a key to each secure connection and isolate usage of each key within the assigned secure connection. Accordingly data sent via each secured connection is encrypted using the corresponding encryption key and decrypted with the same encryption key at the receiving end of the secured connection e.g. data sent from the server and received by an intermediary A . Before retransmission via another secured connection the received data can be encrypted with another encryption key and correspondingly decrypted at the receiving end using the latter key e.g. data sent from the intermediary A and received at another intermediary B . Thus a plurality of secure connections may be implemented between two end points e.g. clients and or servers via proxies i.e. intermediaries using the methods and systems disclosed herein. Accordingly each connection can be secured and isolated without undue exposure of the corresponding encryption key across proxies along the data transmission path.

In one aspect the present invention is related to a method for split proxying Secure Socket Layer SSL communications across intermediaries deployed between a client and a server. The method includes establishing by a first intermediary in communication with a server a first SSL session with a server. A second intermediary in communication with one or more clients may establish a second SSL session with a client using SSL configuration information received from the first intermediary. The second intermediary and the first intermediary may communicate via a third SSL session. The first intermediary may decrypt encrypted data received from the server using a first session key of the first SSL session. The first intermediary may transmit to the second intermediary via the third SSL session the data encrypted using a third session key of the third SSL session. The second intermediary may decrypt the data encrypted via the third SSL session using the third session key. The second intermediary may transmit to the client the data encrypted using a second session key of the second SSL session.

In some embodiments the second intermediary transmits to the first intermediary a request from the client to establish a transport layer connection with the server. The first intermediary may modify the request to indicate to the second intermediary to perform Secure Socket Layer SSL acceleration. The first intermediary may transmit to the second intermediary a message identifying SSL configuration for client side SSL proxying. The second intermediary may transmit to the client a server hello a server certificate and a server hello done message using the SSL configuration received from the first intermediary. The first intermediary may transmit to the second intermediary a request to perform split SSL proxying.

In some embodiments the second intermediary transmits to the first intermediary a request for a crypto operation. The first intermediary may perform the requested crypto operation on behalf of the second intermediary and communicate to second intermediary a response to the request. The first intermediary may compress the received data using a compression history stored on the first intermediary. The second intermediary may decompress the received data using the compression history stored on the second intermediary. The first intermediary and the second intermediary may identify the third SSL session from a pool of pre established SSL sessions maintained by each of the first intermediary and the second intermediary.

In another aspect the present invention is related to system for split proxying Secure Socket Layer SSL communications across intermediaries deployed between a client and a server. The system may include means for establishing by a first intermediary in communication with a server a first Secure Socket Layer SSL session with a server. The system may include means for establishing by a second intermediary in communication with one or more client a second Secure Socket Layer SSL session with a client using SSL configuration information received from the first intermediary. The second intermediary and the first intermediary may communicate via a third SSL session. The system may include means for decrypting by the first intermediary encrypted data received from the server using a first session key of the first SSL session. The system may include means for transmitting by the first intermediary to the second intermediary via the third SSL session the data encrypted using a third session key of the third SSL session. The system may include means for decrypting by the second intermediary the data encrypted via the third SSL session using the third session key. In one embodiment the system includes means for transmitting by the second intermediary to the client the data encrypted using a second session key of the second SSL session.

In some embodiments the system includes means for transmitting by the second intermediary to the first intermediary a request from the client to establish a transport layer connection with the server. The first intermediary may modify the request to indicate to the second intermediary to perform Secure Socket Layer SSL acceleration. The system may include means for transmitting by the first intermediary to the second intermediary a message identifying SSL configuration for client side SSL proxying. In one embodiments the system includes means for transmitting by the second intermediary to the client a server hello a server certificate and a server hello done message using the SSL configuration received from the first intermediary. The system may include means for transmitting by the first intermediary to the second intermediary a request to perform split SSL proxying.

In some embodiments the system includes means for transmitting by the second intermediary to the first intermediary a request for a crypto operation. The system may include means for performing by the first intermediary the requested crypto operation on behalf of the second intermediary and communicating to second intermediary a response to the request. The system may include means for compressing by the first intermediary the received data using a compression history stored on the first intermediary. In one embodiment the system includes means for decompressing by the second intermediary the received data using the compression history stored on the second intermediary. The system may include means for identifying by the first intermediary and the second intermediary the third SSL session from a pool of pre established SSL sessions maintained by each of the first intermediary and the second intermediary.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments of the present invention below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment has one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks . In some embodiments a client communicates with a server via one or more network optimization appliances generally referred to as appliance . In one embodiment the network optimization appliance is designed configured or adapted to optimize Wide Area Network WAN network traffic. In some embodiments a first appliance works in conjunction or cooperation with a second appliance to optimize network traffic. For example a first appliance may be located between a branch office and a WAN connection while the second appliance is located between the WAN and a corporate Local Area Network LAN . The appliances and may work together to optimize the WAN related network traffic between a client in the branch office and a server on the corporate LAN.

Although shows a network network and network generally referred to as network s between the clients and the servers the clients and the servers may be on the same network . The networks can be the same type of network or different types of networks. The network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. The networks can be a private or public network. In one embodiment network or network may be a private network and network may be a public network. In some embodiments network may be a private network and network and or network a public network. In another embodiment networks may be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located on a corporate LAN in a corporate data center.

The network may be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network may be a bus star or ring network topology. The network and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As depicted in a first network optimization appliance is shown between networks and and a second network optimization appliance is also between networks and . In some embodiments the appliance may be located on network . For example a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . For example an appliance may be located at a corporate data center. In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks.

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In some embodiments the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol. Further details of the optimization techniques operations and architecture of the appliance are discussed below in Section B.

Still referring to the network environment may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or metropolitan area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to another embodiment of a network environment is depicted in which the network optimization appliance is deployed with one or more other appliances generally referred to as appliance or second appliance such as a gateway firewall or acceleration appliance. For example in one embodiment the appliance is a firewall or security appliance while appliance is a LAN acceleration device. In some embodiments a client may communicate to a server via one or more of the first appliances and one or more second appliances .

One or more appliances and may be located at any point in the network or network communications path between a client and a server . In some embodiments a second appliance may be located on the same network as the first appliance . In other embodiments the second appliance may be located on a different network as the first appliance . In yet another embodiment a first appliance and second appliance is on the same network for example network while the first appliance and second appliance is on the same network such as network .

In one embodiment the second appliance includes any type and form of transport control protocol or transport later terminating device such as a gateway or firewall device. In one embodiment the appliance terminates the transport control protocol by establishing a first transport control protocol connection with the client and a second transport control connection with the second appliance or server. In another embodiment the appliance terminates the transport control protocol by changing managing or controlling the behavior of the transport control protocol connection between the client and the server or second appliance. For example the appliance may change queue forward or transmit network packets in manner to effectively terminate the transport control protocol connection or to act or simulate as terminating the connection.

In some embodiments the second appliance is a performance enhancing proxy. In one embodiment the appliance provides a virtual private network VPN connection. In some embodiments the appliance provides a Secure Socket Layer VPN SSL VPN connection. In other embodiments the appliance provides an IPsec Internet Protocol Security based VPN connection. In some embodiments the appliance provides any one or more of the following functionality compression acceleration load balancing switching routing caching and Transport Control Protocol TCP acceleration.

In one embodiment the appliance is any of the product embodiments referred to as Access Gateway Application Firewall Application Gateway or NetScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. As such in some embodiments the appliance includes any logic functions rules or operations to perform services or functionality such as SSL VPN connectivity SSL offloading switching load balancing Domain Name Service resolution LAN acceleration and an application firewall.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment a client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. In one embodiment the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiments the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP. In one embodiment the appliance acts as or on behalf of the client on the second private network .

In some embodiment the appliance has an encryption engine providing logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine uses an encryption processor. In other embodiments the encryption engine includes executable instructions running on an encryption processor.

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 payload or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment a health monitoring program of the appliance monitors the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment a policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine includes one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall of the appliance provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall of the appliance ensures cookies are not modified. In other embodiments the appliance protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall appliance protects any confidential information contained in the network communication. The appliance may inspect or analyze any network communication in accordance with the rules or polices of the policy engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may include these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Although generally referred to as a network optimization or first appliance and a second appliance the first appliance and second appliance may be the same type and form of appliance. In one embodiment the second appliance may perform the same functionality or portion thereof as the first appliance and vice versa. For example the first appliance and second appliance may both provide acceleration techniques. In one embodiment the first appliance may perform LAN acceleration while the second appliance performs WAN acceleration or vice versa. In another example the first appliance may also be a transport control protocol terminating device as with the second appliance . Furthermore although appliances and are shown as separate devices on the network the appliance and or could be a part of any client or server .

Referring now to other embodiments of a network environment for deploying the appliance are depicted. In another embodiment as depicted on the top of the appliance may be deployed as a single appliance or single proxy on the network . For example the appliance may be designed constructed or adapted to perform WAN optimization techniques discussed herein without a second cooperating appliance . In other embodiments as depicted on the bottom of a single appliance may be deployed with one or more second appliances . For example a WAN acceleration first appliance such as a Citrix WANScaler appliance may be deployed with a LAN accelerating or Application Firewall second appliance such as a Citrix NetScaler appliance.

The client server and appliance and may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Referring now to an embodiment of a system environment and architecture of an appliance for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client has a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . In another embodiment the appliance controls manages or adjusts the transport layer protocol to accelerate delivery of the computing environment. In some embodiments the appliance uses caching and or compression techniques to accelerate delivery of a computing environment.

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the client or local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiment the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

The appliance includes or is under the control of an operating system. The operating system of the appliance may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The operating system of appliance allocates manages or otherwise segregates the available system memory into what is referred to as kernel or system space and user or application space. The kernel space is typically reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the appliance . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with the network optimization engine or any portion thereof. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device . In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. The operating system uses the user or application space for executing or running applications and provisioning of user level programs services processes and or tasks.

The appliance has one or more network ports for transmitting and receiving data over a network . The network port provides a physical and or logical interface between the computing device and a network or another device for transmitting and receiving network communications. The type and form of network port depends on the type and form of network and type of medium for connecting to the network. Furthermore any software of provisioned for or used by the network port and network stack may run in either kernel space or user space.

In one embodiment the appliance has one network stack such as a TCP IP based stack for communicating on a network such with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and also with a second network . In another embodiment the appliance has two or more network stacks such as first network stack A and a second network stack N. The first network stack A may be used in conjunction with a first port A to communicate on a first network . The second network stack N may be used in conjunction with a second port N to communicate on a second network . In one embodiment the network stack s has one or more buffers for queuing one or more network packets for transmission by the appliance .

The network stack includes any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack includes a software implementation for a network protocol suite. The network stack may have one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may have any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack includes a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack has any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein.

In one embodiment the appliance provides for or maintains a transport layer connection between a client and server using a single network stack . In some embodiments the appliance effectively terminates the transport layer connection by changing managing or controlling the behavior of the transport control protocol connection between the client and the server. In these embodiments the appliance may use a single network stack . In other embodiments the appliance terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by or on behalf of the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the appliance may use multiple network stacks for example A and N. In these embodiments the first transport layer connection may be established or terminated at one network stack A and the second transport layer connection may be established or terminated on the second network stack N. For example one network stack may be for receiving and transmitting network packets on a first network and another network stack for receiving and transmitting network packets on a second network.

As shown in the network optimization engine includes one or more of the following elements components or modules network packet processing engine LAN WAN detector flow controller QoS engine protocol accelerator compression engine cache manager and policy engine . The network optimization engine or any portion thereof may include software hardware or any combination of software and hardware. Furthermore any software of provisioned for or used by the network optimization engine may run in either kernel space or user space. For example in one embodiment the network optimization engine may run in kernel space. In another embodiment the network optimization engine may run in user space. In yet another embodiment a first portion of the network optimization engine runs in kernel space while a second portion of the network optimization engine runs in user space.

The network packet engine also generally referred to as a packet processing engine or packet engine is responsible for controlling and managing the processing of packets received and transmitted by appliance via network ports and network stack s . The network packet engine may operate at any layer of the network stack . In one embodiment the network packet engine operates at layer 2 or layer 3 of the network stack . In some embodiments the packet engine intercepts or otherwise receives packets at the network layer such as the IP layer in a TCP IP embodiment. In another embodiment the packet engine operates at layer 4 of the network stack . For example in some embodiments the packet engine intercepts or otherwise receives packets at the transport layer such as intercepting packets as the TCP layer in a TCP IP embodiment. In other embodiments the packet engine operates at any session or application layer above layer 4. For example in one embodiment the packet engine intercepts or otherwise receives network packets above the transport layer protocol layer such as the payload of a TCP packet in a TCP embodiment.

The packet engine may include a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packet. Additionally the packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The packet engine may include a packet processing timer. In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the packet engine processes network packets responsive to the timer. The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms 25 ms 10 ms 5 ms or 1 ms.

During operations the packet engine may be interfaced integrated or be in communication with any portion of the network optimization engine such as the LAN WAN detector flow controller QoS engine protocol accelerator compression engine cache manager and or policy engine . As such any of the logic functions or operations of the LAN WAN detector flow controller QoS engine protocol accelerator compression engine cache manager and policy engine may be performed responsive to the packet processing timer and or the packet engine . In some embodiments any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform expiration of any cached objects responsive to the integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

The cache manager may include software hardware or any combination of software and hardware to store data information and objects to a cache in memory or storage provide cache access and control and manage the cache. The data objects or content processed and stored by the cache manager may include data in any format such as a markup language or any type of data communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory or storage element. Once the data is stored in the cache future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache may comprise a data object in memory of the appliance . In another embodiment the cache may comprise any type and form of storage element of the appliance such as a portion of a hard disk. In some embodiments the processing unit of the device may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any caching techniques of the appliance . In some embodiments the cache manager may operate as an application library program service process thread or task. In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine includes any logic function or operations for providing and applying one or more policies or rules to the function operation or configuration of any portion of the appliance . The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identify specify define or configure a policy for the network optimization engine or any portion thereof. For example the policy engine may provide policies for what data to cache when to cache the data for whom to cache the data when to expire an object in cache or refresh the cache. In other embodiments the policy engine may include any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance .

In some embodiments the policy engine provides and applies one or more policies based on any one or more of the following a user identification of the client identification of the server the type of connection the time of the connection the type of network or the contents of the network traffic. In one embodiment the policy engine provides and applies a policy based on any field or header at any protocol layer of a network packet. In another embodiment the policy engine provides and applies a policy based on any payload of a network packet. For example in one embodiment the policy engine applies a policy based on identifying a certain portion of content of an application layer protocol carried as a payload of a transport layer packet. In another example the policy engine applies a policy based on any information identified by a client server or user certificate. In yet another embodiment the policy engine applies a policy based on any attributes or characteristics obtained about a client such as via any type and form of endpoint detection see for example the collection agent of the client agent discussed below .

In one embodiment the policy engine works in conjunction or cooperation with the policy engine of the application delivery system . In some embodiments the policy engine is a distributed portion of the policy engine of the application delivery system . In another embodiment the policy engine of the application delivery system is deployed on or executed on the appliance . In some embodiments the policy engines both operate on the appliance . In yet another embodiment the policy engine or a portion thereof of the appliance operates on a server .

The compression engine includes any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the appliance . The compression engine may also be referred to as a multi protocol compression engine in that it may be designed constructed or capable of compressing a plurality of protocols. In one embodiment the compression engine applies context insensitive compression which is compression applied to data without knowledge of the type of data. In another embodiment the compression engine applies context sensitive compression. In this embodiment the compression engine utilizes knowledge of the data type to select a specific compression algorithm from a suite of suitable algorithms. In some embodiments knowledge of the specific protocol is used to perform context sensitive compression. In one embodiment the appliance or compression engine can use port numbers e.g. well known ports as well as data from the connection itself to determine the appropriate compression algorithm to use. Some protocols use only a single type of data requiring only a single compression algorithm that can be selected when the connection is established. Other protocols contain different types of data at different times. For example POP IMAP SMTP and HTTP all move files of arbitrary types interspersed with other protocol data.

In one embodiment the compression engine uses a delta type compression algorithm. In another embodiment the compression engine uses first site compression as well as searching for repeated patterns among data stored in cache memory or disk. In some embodiments the compression engine uses a lossless compression algorithm. In other embodiments the compression engine uses a lossy compression algorithm. In some cases knowledge of the data type and sometimes permission from the user are required to use a lossy compression algorithm. Compression is not limited to the protocol payload. The control fields of the protocol itself may be compressed. In some embodiments the compression engine uses a different algorithm than that used for the payload.

In some embodiments the compression engine compresses at one or more layers of the network stack . In one embodiment the compression engine compresses at a transport layer protocol. In another embodiment the compression engine compresses at an application layer protocol. In some embodiments the compression engine compresses at a layer 2 4 protocol. In other embodiments the compression engine compresses at a layer 5 7 protocol. In yet another embodiment the compression engine compresses a transport layer protocol and an application layer protocol. In some embodiments the compression engine compresses a layer 2 4 protocol and a layer 5 7 protocol.

In some embodiments the compression engine uses memory based compression cache based compression or disk based compression or any combination thereof. As such the compression engine may be referred to as a multi layer compression engine. In one embodiment the compression engine uses a history of data stored in memory such as RAM. In another embodiment the compression engine uses a history of data stored in a cache such as L2 cache of the processor. In other embodiments the compression engine uses a history of data stored to a disk or storage location. In some embodiments the compression engine uses a hierarchy of cache based memory based and disk based data history. The compression engine may first use the cache based data to determine one or more data matches for compression and then may check the memory based data to determine one or more data matches for compression. In another case the compression engine may check disk storage for data matches for compression after checking either the cache based and or memory based data history.

In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of HyperText Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by a transport layer protocol such as any application layer protocol.

The LAN WAN detector includes any logic business rules function or operations for automatically detecting a slow side connection e.g. a wide area network WAN connection such as an Intranet and associated port and a fast side connection e.g. a local area network LAN connection and an associated port . In some embodiments the LAN WAN detector monitors network traffic on the network ports of the appliance to detect a synchronization packet sometimes referred to as a tagged network packet. The synchronization packet identifies a type or speed of the network traffic. In one embodiment the synchronization packet identifies a WAN speed or WAN type connection. The LAN WAN detector also identifies receipt of an acknowledgement packet to a tagged synchronization packet and on which port it is received. The appliance then configures itself to operate the identified port on which the tagged synchronization packet arrived so that the speed on that port is set to be the speed associated with the network connected to that port. The other port is then set to the speed associated with the network connected to that port.

For ease of discussion herein reference to fast side will be made with respect to connection with a wide area network WAN e.g. the Internet and operating at a network speed of the WAN. Likewise reference to slow side will be made with respect to connection with a local area network LAN and operating at a network speed the LAN. However it is noted that fast and slow sides in a network can change on a per connection basis and are relative terms to the speed of the network connections or to the type of network topology. Such configurations are useful in complex network topologies where a network is fast or slow only when compared to adjacent networks and not in any absolute sense.

In one embodiment the LAN WAN detector may be used to allow for auto discovery by an appliance of a network to which it connects. In another embodiment the LAN WAN detector may be used to detect the existence or presence of a second appliance deployed in the network . For example an auto discovery mechanism in operation in accordance with functions as follows appliance and are placed in line with the connection linking client and server . The appliances and are at the ends of a low speed link e.g. Internet connecting two LANs. In one example embodiment appliances and each include two ports one to connect with the lower speed link and the other to connect with a higher speed link e.g. a LAN. Any packet arriving at one port is copied to the other port. Thus appliance and are each configured to function as a bridge between the two networks .

When an end node such as the client opens a new TCP connection with another end node such as the server the client sends a TCP packet with a synchronization SYN header bit set or a SYN packet to the server . In the present example client opens a transport layer connection to server . When the SYN packet passes through appliance the appliance inserts attaches or otherwise provides a characteristic TCP header option to the packet which announces its presence. If the packet passes through a second appliance in this example appliance the second appliance notes the header option on the SYN packet. The server responds to the SYN packet with a synchronization acknowledgment SYN ACK packet. When the SYN ACK packet passes through appliance a TCP header option is tagged e.g. attached inserted or added to the SYN ACK packet to announce appliance presence to appliance . When appliance receives this packet both appliances are now aware of each other and the connection can be appropriately accelerated.

Further to the operations of the LAN WAN detector a method or process for detecting fast and slow sides of a network using a SYN packet is described. During a transport layer connection establishment between a client and a server the appliance via the LAN WAN detector determines whether the SYN packet is tagged with an acknowledgement ACK . If it is tagged the appliance identifies or configures the port receiving the tagged SYN packet SYN ACK as the slow side. In one embodiment the appliance optionally removes the ACK tag from the packet before copying the packet to the other port. If the LAN WAN detector determines that the packet is not tagged the appliance identifies or configure the port receiving the untagged packet as the fast side. The appliance then tags the SYN packet with an ACK and copies the packet to the other port.

In another embodiment the LAN WAN detector detects fast and slow sides of a network using a SYN ACK packet. The appliance via the LAN WAN detector determines whether the SYN ACK packet is tagged with an acknowledgement ACK . If it is tagged the appliance identifies or configures the port receiving the tagged SYN packet SYN ACK as the slow side. In one embodiment the appliance optionally removes the ACK tag from the packet before copying the packet to the other port. If the LAN WAN detector determines that the packet is not tagged the appliance identifies or configures the port receiving the untagged packet as the fast side. The LAN WAN detector determines whether the SYN packet was tagged. If the SYN packet was not tagged the appliance copied the packet to the other port. If the SYN packet was tagged the appliance tags the SYN ACK packet before copying it to the other port.

The appliance may add insert modify attach or otherwise provide any information or data in the TCP option header to provide any information data or characteristics about the network connection network traffic flow or the configuration or operation of the appliance . In this manner not only does an appliance announce its presence to another appliance or tag a higher or lower speed connection the appliance provides additional information and data via the TCP option headers about the appliance or the connection. The TCP option header information may be useful to or used by an appliance in controlling managing optimizing acceleration or improving the network traffic flow traversing the appliance or to otherwise configure itself or operation of a network port.

Although generally described in conjunction with detecting speeds of network connections or the presence of appliances the LAN WAN detector can be used for applying any type of function logic or operation of the appliance to a port connection or flow of network traffic. In particular automated assignment of ports can occur whenever a device performs different functions on different ports where the assignment of a port to a task can be made during the unit s operation and or the nature of the network segment on each port is discoverable by the appliance .

The flow controller includes any logic business rules function or operations for optimizing accelerating or otherwise improving the performance operation or quality of service of transport layer communications of network packets or the delivery of packets at the transport layer. A flow controller also sometimes referred to as a flow control module regulates manages and controls data transfer rates. In some embodiments the flow controller is deployed at or connected at a bandwidth bottleneck in the network . In one embodiment the flow controller effectively regulates manages and controls bandwidth usage or utilization. In other embodiments the flow control modules may also be deployed at points on the network of latency transitions low latency to high latency and on links with media losses such as wireless or satellite links .

In some embodiments a flow controller may include a receiver side flow control module for controlling the rate of receipt of network transmissions and a sender side flow control module for the controlling the rate of transmissions of network packets. In other embodiments a first flow controller includes a receiver side flow control module and a second flow controller includes a sender side flow control module. In some embodiments a first flow controller is deployed on a first appliance and a second flow controller is deployed on a second appliance . As such in some embodiments a first appliance controls the flow of data on the receiver side and a second appliance controls the data flow from the sender side. In yet another embodiment a single appliance includes flow control for both the receiver side and sender side of network communications traversing the appliance .

In one embodiment a flow control module is configured to allow bandwidth at the bottleneck to be more fully utilized and in some embodiments not over utilized. In some embodiments the flow control module transparently buffers or rebuffers data already buffered by for example the sender network sessions that pass between nodes having associated flow control modules . When a session passes through two or more flow control modules one or more of the flow control modules controls a rate of the session s .

In one embodiment the flow control module is configured with predetermined data relating to bottleneck bandwidth. In another embodiment the flow control module may be configured to detect the bottleneck bandwidth or data associated therewith. Unlike conventional network protocols such as TCP a receiver side flow control module controls the data transmission rate. The receiver side flow control module controls the sender side flow control module e.g. data transmission rate by forwarding transmission rate limits to the sender side flow control module . In one embodiment the receiver side flow control module piggybacks these transmission rate limits on acknowledgement ACK packets or signals sent to the sender e.g. client by the receiver e.g. server . The receiver side flow control module does this in response to rate control requests that are sent by the sender side flow control module . The requests from the sender side flow control module may be piggybacked on data packets sent by the sender .

In some embodiments the flow controller manipulates adjusts simulates changes improves or otherwise adapts the behavior of the transport layer protocol to provide improved performance or operations of delivery data rates and or bandwidth utilization of the transport layer. The flow controller may implement a plurality of data flow control techniques at the transport layer including but not limited to 1 pre acknowledgements 2 window virtualization 3 recongestion techniques 3 local retransmission techniques 4 wavefront detection and disambiguation 5 transport control protocol selective acknowledgements 6 transaction boundary detection techniques and 7 repacketization.

Although a sender may be generally described herein as a client and a receiver as a server a sender may be any end point such as a server or any computing device on the network . Likewise a receiver may be a client or any other computing device on the network .

In brief overview of a pre acknowledgement flow control technique the flow controller in some embodiments handles the acknowledgements and retransmits for a sender effectively terminating the sender s connection with the downstream portion of a network connection. In reference to one possible deployment of an appliance into a network architecture to implement this feature is depicted. In this example environment a sending computer or client transmits data on network for example via a switch which determines that the data is destined for VPN appliance . Because of the chosen network topology all data destined for VPN appliance traverses appliance so the appliance can apply any necessary algorithms to this data.

Continuing further with the example the client transmits a packet which is received by the appliance . When the appliance receives the packet which is transmitted from the client to a recipient via the VPN appliance the appliance retains a copy of the packet and forwards the packet downstream to the VPN appliance . The appliance then generates an acknowledgement packet ACK and sends the ACK packet back to the client or sending endpoint. This ACK a pre acknowledgment causes the sender to believe that the packet has been delivered successfully freeing the sender s resources for subsequent processing. The appliance retains the copy of the packet data in the event that a retransmission of the packet is required so that the sender does not have to handle retransmissions of the data. This early generation of acknowledgements may be called preacking .

If a retransmission of the packet is required the appliance retransmits the packet to the sender. The appliance may determine whether retransmission is required as a sender would in a traditional system for example determining that a packet is lost if an acknowledgement has not been received for the packet after a predetermined amount of time. To this end the appliance monitors acknowledgements generated by the receiving endpoint e.g. server or any other downstream network entity so that it can determine whether the packet has been successfully delivered or needs to be retransmitted. If the appliance determines that the packet has been successfully delivered the appliance is free to discard the saved packet data. The appliance may also inhibit forwarding acknowledgements for packets that have already been received by the sending endpoint.

In the embodiment described above the appliance via the flow controller controls the sender through the delivery of pre acknowledgements also referred to as preacks as though the appliance was a receiving endpoint itself. Since the appliance is not an endpoint and does not actually consume the data the appliance includes a mechanism for providing overflow control to the sending endpoint. Without overflow control the appliance could run out of memory because the appliance stores packets that have been preacked to the sending endpoint but not yet acknowledged as received by the receiving endpoint. Therefore in a situation in which the sender transmits packets to the appliance faster than the appliance can forward the packets downstream the memory available in the appliance to store unacknowledged packet data can quickly fill. A mechanism for overflow control allows the appliance to control transmission of the packets from the sender to avoid this problem.

In one embodiment the appliance or flow controller includes an inherent self clocking overflow control mechanism. This self clocking is due to the order in which the appliance may be designed to transmit packets downstream and send ACKs to the sender or . In some embodiments the appliance does not preack the packet until after it transmits the packet downstream. In this way the sender will receive the ACKs at the rate at which the appliance is able to transmit packets rather than the rate at which the appliance receives packets from the sender . This helps to regulate the transmission of packets from a sender .

Another overflow control mechanism that the appliance may implement is to use the TCP window size parameter which tells a sender how much buffer the receiver is permitting the sender to fill up. A nonzero window size e.g. a size of at least one Maximum Segment Size MSS in a preack permits the sending endpoint to continue to deliver data to the appliance whereas a zero window size inhibits further data transmission. Accordingly the appliance may regulate the flow of packets from the sender for example when the appliance s buffer is becoming full by appropriately setting the TCP window size in each preack.

Another technique to reduce this additional overhead is to apply hysteresis. When the appliance delivers data to the slower side the overflow control mechanism in the appliance can require that a minimum amount of space be available before sending a nonzero window advertisement to the sender. In one embodiment the appliance waits until there is a minimum of a predetermined number of packets such as four packets of space available before sending a nonzero window packet such as a window size of four packet . This reduces the overhead by approximately a factor four since only two ACK packets are sent for each group of four data packets instead of eight ACK packets for four data packets.

Another technique the appliance or flow controller may use for overflow control is the TCP delayed ACK mechanism which skips ACKs to reduce network traffic. The TCP delayed ACKs automatically delay the sending of an ACK either until two packets are received or until a fixed timeout has occurred. This mechanism alone can result in cutting the overhead in half moreover by increasing the numbers of packets above two additional overhead reduction is realized. But merely delaying the ACK itself may be insufficient to control overflow and the appliance may also use the advertised window mechanism on the ACKs to control the sender. When doing this the appliance in one embodiment avoids triggering the timeout mechanism of the sender by delaying the ACK too long.

In one embodiment the flow controller does not preack the last packet of a group of packets. By not preacking the last packet or at least one of the packets in the group the appliance avoids a false acknowledgement for a group of packets. For example if the appliance were to send a preack for a last packet and the packet were subsequently lost the sender would have been tricked into thinking that the packet is delivered when it was not. Thinking that the packet had been delivered the sender could discard that data. If the appliance also lost the packet there would be no way to retransmit the packet to the recipient. By not preacking the last packet of a group of packets the sender will not discard the packet until it has been delivered.

In another embodiment the flow controller may use a window virtualization technique to control the rate of flow or bandwidth utilization of a network connection. Though it may not immediately be apparent from examining conventional literature such as RFC 1323 there is effectively a send window for transport layer protocols such as TCP. The send window is similar to the receive window in that it consumes buffer space though on the sender . The sender s send window consists of all data sent by the application that has not been acknowledged by the receiver. This data must be retained in memory in case retransmission is required. Since memory is a shared resource some TCP stack implementations limit the size of this data. When the send window is full an attempt by an application program to send more data results in blocking the application program until space is available. Subsequent reception of acknowledgements will free send window memory and unblock the application program. In some embodiments this window size is known as the socket buffer size in some TCP implementations.

In one embodiment the flow control module is configured to provide access to increased window or buffer sizes. This configuration may also be referenced to as window virtualization. In the embodiment of TCP as the transport layer protocol the TCP header includes a bit string corresponding to a window scale. In one embodiment window may be referenced in a context of send receive or both.

One embodiment of window virtualization is to insert a preacking appliance into a TCP session. In reference to any of the environments of or B initiation of a data communication session between a source node e.g. client for ease of discussion now referenced as source node and a destination node e.g. server for ease of discussion now referenced as destination node is established. For TCP communications the source node initially transmits a synchronization signal SYN through its local area network to first flow control module . The first flow control module inserts a configuration identifier into the TCP header options area. The configuration identifier identifies this point in the data path as a flow control module.

The appliances via a flow control module provide window or buffer to allow increasing data buffering capabilities within a session despite having end nodes with small buffer sizes e.g. typically 16 k bytes. However RFC 1323 requires window scaling for any buffer sizes greater than 64 k bytes which must be set at the time of session initialization SYN SYN ACK signals . Moreover the window scaling corresponds to the lowest common denominator in the data path often an end node with small buffer size. This window scale often is a scale of 0 or 1 which corresponds to a buffer size of up to 64 k or 128 k bytes. Note that because the window size is defined as the window field in each packet shifted over by the window scale the window scale establishes an upper limit for the buffer but does not guarantee the buffer is actually that large. Each packet indicates the current available buffer space at the receiver in the window field.

In one embodiment of scaling using the window virtualization technique during connection establishment i.e. initialization of a session when the first flow control module receives from the source node the SYN signal or packet the flow control module stores the windows scale of the source node which is the previous node or stores a 0 for window scale if the scale of the previous node is missing. The first flow control module also modifies the scale e.g. increases the scale to 4 from 0 or 1 in the SYN FCM signal. When the second flow control module receives the SYN signal it stores the increased scale from the first flow control signal and resets the scale in the SYN signal back to the source node scale value for transmission to the destination node . When the second flow controller receives the SYN ACK signal from the destination node it stores the scale from the destination node scale e.g. 0 or 1 and modifies it to an increased scale that is sent with the SYN ACK FCM signal. The first flow control node receives and notes the received window scale and revises the windows scale sent back to the source node back down to the original scale e.g. 0 or 1. Based on the above window shift conversation during connection establishment the window field in every subsequent packet e.g. TCP packet of the session must be shifted according to the window shift conversion.

The window scale as described above expresses buffer sizes of over 64 k and may not be required for window virtualization. Thus shifts for window scale may be used to express increased buffer capacity in each flow control module . This increase in buffer capacity in may be referenced as window or buffer virtualization. The increase in buffer size allows greater packet through put from and to the respective end nodes and . Note that buffer sizes in TCP are typically expressed in terms of bytes but for ease of discussion packets may be used in the description herein as it relates to virtualization.

By way of example a window or buffer virtualization performed by the flow controller is described. In this example the source node and the destination node are configured similar to conventional end nodes having a limited buffer capacity of 16 k bytes which equals approximately 10 packets of data. Typically an end node must wait until the packet is transmitted and confirmation is received before a next group of packets can be transmitted. In one embodiment using increased buffer capacity in the flow control modules when the source node transmits its data packets the first flow control module receives the packets stores it in its larger capacity buffer e.g. 512 packet capacity and immediately sends back an acknowledgement signal indicating receipt of the packets REC ACK back to the source node . The source node can then flush its current buffer load it with 10 new data packets and transmit those onto the first flow control module . Again the first flow control module transmits a REC ACK signal back to the source node and the source node flushes its buffer and loads it with 10 more new packets for transmission.

As the first flow control module receives the data packets from the source nodes it loads up its buffer accordingly. When it is ready the first flow control module can begin transmitting the data packets to the second flow control module which also has an increased buffer size for example to receive 512 packets. The second flow control module receives the data packets and begins to transmit 10 packets at a time to the destination node . Each REC ACK received at the second flow control node from the destination node results in 10 more packets being transmitted to the destination node until all the data packets are transferred. Hence the present invention is able to increase data transmission throughput between the source node sender and the destination node receiver by taking advantage of the larger buffer in the flow control modules between the devices.

It is noted that by preacking the transmission of data as described previously a sender or source node is allowed to transmit more data than is possible without the preacks thus affecting a larger window size. For example in one embodiment this technique is effective when the flow control module is located near a node e.g. source node or destination node that lacks large windows.

Another technique or algorithm of the flow controller is referred to as recongestion. The standard TCP congestion avoidance algorithms are known to perform poorly in the face of certain network conditions including large RTTs round trip times high packet loss rates and others. When the appliance detects a congestion condition such as long round trip times or high packet loss the appliance intervenes substituting an alternate congestion avoidance algorithm that better suits the particular network condition. In one embodiment the recongestion algorithm uses preacks to effectively terminate the connection between the sender and the receiver. The appliance then resends the packets from itself to the receiver using a different congestion avoidance algorithm. Recongestion algorithms may be dependent on the characteristics of the TCP connection. The appliance monitors each TCP connection characterizing it with respect to the different dimensions selecting a recongestion algorithm that is appropriate for the current characterization.

In one embodiment upon detecting a TCP connection that is limited by round trip times RTT a recongestion algorithm is applied which behaves as multiple TCP connections. Each TCP connection operates within its own performance limit but the aggregate bandwidth achieves a higher performance level. One parameter in this mechanism is the number of parallel connections that are applied N . Too large a value of N and the connection bundle achieves more than its fair share of bandwidth. Too small a value of N and the connection bundle achieves less than its fair share of bandwidth. One method of establishing N relies on the appliance monitoring the packet loss rate RTT and packet size of the actual connection. These numbers are plugged into a TCP response curve formula to provide an upper limit on the performance of a single TCP connection in the present configuration. If each connection within the connection bundle is achieving substantially the same performance as that computed to be the upper limit then additional parallel connections are applied. If the current bundle is achieving less performance than the upper limit the number of parallel connections is reduced. In this manner the overall fairness of the system is maintained since individual connection bundles contain no more parallelism than is required to eliminate the restrictions imposed by the protocol itself. Furthermore each individual connection retains TCP compliance.

Another method of establishing N is to utilize a parallel flow control algorithm such as the TCP Vegas algorithm or its improved version Stabilized Vegas. In this method the network information associated with the connections in the connection bundle e.g. RTT loss rate average packet size etc. is aggregated and applied to the alternate flow control algorithm. The results of this algorithm are in turn distributed among the connections of the bundle controlling their number i.e. N . Optionally each connection within the bundle continues using the standard TCP congestion avoidance algorithm.

In another embodiment the individual connections within a parallel bundle are virtualized i.e. actual individual TCP connections are not established. Instead the congestion avoidance algorithm is modified to behave as though there were N parallel connections. This method has the advantage of appearing to transiting network nodes as a single connection. Thus the QOS security and other monitoring methods of these nodes are unaffected by the recongestion algorithm. In yet another embodiment the individual connections within a parallel bundle are real i.e. a separate. TCP connection is established for each of the parallel connections within a bundle. The congestion avoidance algorithm for each TCP connection need not be modified.

In some embodiments the flow controller may apply a local retransmission technique. One reason for implementing preacks is to prepare to transit a high loss link e.g. wireless . In these embodiments the preacking appliance or flow control module is located most beneficially before the wireless link. This allows retransmissions to be performed closer to the high loss link removing the retransmission burden from the remainder of the network. The appliance may provide local retransmission in which case packets dropped due to failures of the link are retransmitted directly by the appliance . This is advantageous because it eliminates the retransmission burden upon an end node such as server and infrastructure of any of the networks . With appliance providing local retransmissions the dropped packet can be retransmitted across the high loss link without necessitating a retransmit by an end node and a corresponding decrease in the rate of data transmission from the end node.

Another reason for implementing preacks is to avoid a receive time out RTO penalty. In standard TCP there are many situations that result in an RTO even though a large percentage of the packets in flight were successfully received. With standard TCP algorithms dropping more than one packet within an RTT window would likely result in a timeout. Additionally most TCP connections experience a timeout if a retransmitted packet is dropped. In a network with a high bandwidth delay product even a relatively small packet loss rate will cause frequent Retransmission timeouts RTOs . In one embodiment the appliance uses a retransmit and timeout algorithm is avoid premature RTOs. The appliance or flow controller maintains a count of retransmissions is maintained on a per packet basis. Each time that a packet is retransmitted the count is incremented by one and the appliance continues to transmit packets. In some embodiments only if a packet has been retransmitted a predetermined number of times is an RTO declared.

In some embodiments the appliance or flow controller uses wavefront detection and disambiguation techniques in managing and controlling flow of network traffic. In this technique the flow controller uses transmit identifiers or numbers to determine whether particular data packets need to be retransmitted. By way of example a sender transmits data packets over a network where each instance of a transmitted data packet is associated with a transmit number. It can be appreciated that the transmit number for a packet is not the same as the packet s sequence number since a sequence number references the data in the packet while the transmit number references an instance of a transmission of that data. The transmit number can be any information usable for this purpose including a timestamp associated with a packet or simply an increasing number similar to a sequence number or a packet number . Because a data segment may be retransmitted different transmit numbers may be associated with a particular sequence number.

As the sender transmits data packets the sender maintains a data structure of acknowledged instances of data packet transmissions. Each instance of a data packet transmission is referenced by its sequence number and transmit number. By maintaining a transmit number for each packet the sender retains the ordering of the transmission of data packets. When the sender receives an ACK or a SACK the sender determines the highest transmit number associated with packets that the receiver indicated has arrived in the received acknowledgement . Any outstanding unacknowledged packets with lower transmit numbers are presumed lost.

In some embodiments the sender is presented with an ambiguous situation when the arriving packet has been retransmitted a standard ACK SACK does not contain enough information to allow the sender to determine which transmission of the arriving packet has triggered the acknowledgement. After receiving an ambiguous acknowledgement therefore the sender disambiguates the acknowledgement to associate it with a transmit number. In various embodiments one or a combination of several techniques may be used to resolve this ambiguity.

In one embodiment the sender includes an identifier with a transmitted data packet and the receiver returns that identifier or a function thereof with the acknowledgement. The identifier may be a timestamp e.g. a TCP timestamp as described in RFC 1323 a sequential number or any other information that can be used to resolve between two or more instances of a packet s transmission. In an embodiment in which the TCP timestamp option is used to disambiguate the acknowledgement each packet is tagged with up to 32 bits of unique information. Upon receipt of the data packet the receiver echoes this unique information back to the sender with the acknowledgement. The sender ensures that the originally sent packet and its retransmitted version or versions contain different values for the timestamp option allowing it to unambiguously eliminate the ACK ambiguity. The sender may maintain this unique information for example in the data structure in which it stores the status of sent data packets. This technique is advantageous because it complies with industry standards and is thus likely to encounter little or no interoperability issues. However this technique may require ten bytes of TCP header space in some implementations reducing the effective throughput rate on the network and reducing space available for other TCP options.

In another embodiment another field in the packet such as the IP ID field is used to disambiguate in a way similar to the TCP timestamp option described above. The sender arranges for the ID field values of the original and the retransmitted version or versions of the packet to have different ID fields in the IP header. Upon reception of the data packet at the receiver or a proxy device thereof the receiver sets the ID field of the ACK packet to a function of the ID field of the packet that triggers the ACK. This method is advantageous as it requires no additional data to be sent preserving the efficiency of the network and TCP header space. The function chosen should provide a high degree of likelihood of providing disambiguation. In a preferred embodiment the sender selects IP ID values with the most significant bit set to 0. When the receiver responds the IP ID value is set to the same IP ID value with the most significant bit set to a one.

In another embodiment the transmit numbers associated with non ambiguous acknowledgements are used to disambiguate an ambiguous acknowledgement. This technique is based on the principle that acknowledgements for two packets will tend to be received closer in time as the packets are transmitted closer in time. Packets that are not retransmitted will not result in ambiguity as the acknowledgements received for such packets can be readily associated with a transmit number. Therefore these known transmit numbers are compared to the possible transmit numbers for an ambiguous acknowledgement received near in time to the known acknowledgement. The sender compares the transmit numbers of the ambiguous acknowledgement against the last known received transmit number selecting the one closest to the known received transmit number. For example if an acknowledgement for data packet 1 is received and the last received acknowledgement was for data packet 5 the sender resolves the ambiguity by assuming that the third instance of data packet 1 caused the acknowledgement.

Another technique of the appliance or flow controller is to implement an embodiment of transport control protocol selective acknowledgements or TCP SACK to determine what packets have or have not been received. This technique allows the sender to determine unambiguously a list of packets that have been received by the receiver as well as an accurate list of packets not received. This functionality may be implemented by modifying the sender and or receiver or by inserting sender and receiver side flow control modules in the network path between the sender and receiver. In reference to or a sender e.g. client is configured to transmit data packets to the receiver e.g. server over the network . In response the receiver returns a TCP Selective Acknowledgment option referred to as SACK packet to the sender. In one embodiment the communication is bi directional although only one direction of communication is discussed here for simplicity. The receiver maintains a list or other suitable data structure that contains a group of ranges of sequence numbers for data packets that the receiver has actually received. In some embodiments the list is sorted by sequence number in an ascending or descending order. The receiver also maintains a left off pointer which comprises a reference into the list and indicates the left off point from the previously generated SACK packet.

Upon reception of a data packet the receiver generates and transmits a SACK packet back to the sender. In some embodiments the SACK packet includes a number of fields each of which can hold a range of sequence numbers to indicate a set of received data packets. The receiver fills this first field of the SACK packet with a range of sequence numbers that includes the landing packet that triggered the SACK packet. The remaining available SACK fields are filled with ranges of sequence numbers from the list of received packets. As there are more ranges in the list than can be loaded into the SACK packet the receiver uses the left off pointer to determine which ranges are loaded into the SACK packet. The receiver inserts the SACK ranges consecutively from the sorted list starting from the range referenced by the pointer and continuing down the list until the available SACK range space in the TCP header of the SACK packet is consumed. The receiver wraps around to the start of the list if it reaches the end. In some embodiments two or three additional SACK ranges can be added to the SACK range information.

Once the receiver generates the SACK packet the receiver sends the acknowledgement back to the sender. The receiver then advances the left off pointer by one or more SACK range entries in the list. If the receiver inserts four SACK ranges for example the left off pointer may be advanced two SACK ranges in the list. When the advanced left off pointer reaches at the end of the list the pointer is reset to the start of the list effectively wrapping around the list of known received ranges. Wrapping around the list enables the system to perform well even in the presence of large losses of SACK packets since the SACK information that is not communicated due to a lost SACK packet will eventually be communicated once the list is wrapped around.

It can be appreciated therefore that a SACK packet may communicate several details about the condition of the receiver. First the SACK packet indicates that upon generation of the SACK packet the receiver had just received a data packet that is within the first field of the SACK information. Secondly the second and subsequent fields of the SACK information indicate that the receiver has received the data packets within those ranges. The SACK information also implies that the receiver had not at the time of the SACK packet s generation received any of the data packets that fall between the second and subsequent fields of the SACK information. In essence the ranges between the second and subsequent ranges in the SACK information are holes in the received data the data therein known not to have been delivered. Using this method therefore when a SACK packet has sufficient space to include more than two SACK ranges the receiver may indicate to the sender a range of data packets that have not yet been received by the receiver.

In another embodiment the sender uses the SACK packet described above in combination with the retransmit technique described above to make assumptions about which data packets have been delivered to the receiver. For example when the retransmit algorithm using the transmit numbers declares a packet lost the sender considers the packet to be only conditionally lost as it is possible that the SACK packet identifying the reception of this packet was lost rather than the data packet itself. The sender thus adds this packet to a list of potentially lost packets called the presumed lost list. Each time a SACK packet arrives the known missing ranges of data from the SACK packet are compared to the packets in the presumed lost list. Packets that contain data known to be missing are declared actually lost and are subsequently retransmitted. In this way the two schemes are combined to give the sender better information about which packets have been lost and need to be retransmitted.

In some embodiments the appliance or flow controller applies a technique referred to as transaction boundary detection. In one embodiment the technique pertains to ping pong behaved connections. At the TCP layer ping pong behavior is when one communicant a sender sends data and then waits for a response from the other communicant the receiver. Examples of ping pong behavior include remote procedure call HTTP and others. The algorithms described above use retransmission timeout RTO to recover from the dropping of the last packet or packets associated with the transaction. Since the TCP RTO mechanism is extremely coarse in some embodiments for example requiring a minimum one second value in all cases poor application behavior may be seen in these situations.

In one embodiment the sender of data or a flow control module coupled to the sender detects a transaction boundary in the data being sent. Upon detecting a transaction boundary the sender or a flow control module sends additional packets whose reception generates additional ACK or SACK responses from the receiver. Insertion of the additional packets is preferably limited to balance between improved application response time and network capacity utilization. The number of additional packets that is inserted may be selected according to the current loss rate associated with that connection with more packets selected for connections having a higher loss rate.

One method of detecting a transaction boundary is time based. If the sender has been sending data and ceases then after a period of time the sender or flow control module declares a transaction boundary. This may be combined with other techniques. For example the setting of the PSH TCP Push bit by the sender in the TCP header may indicate a transaction boundary. Accordingly combining the time based approach with these additional heuristics can provide for more accurate detection of a transaction boundary. In another technique if the sender or flow control module understands the application protocol it can parse the protocol data stream and directly determine transaction boundaries. In some embodiment this last behavior can be used independent of any time based mechanism.

Responsive to detecting a transaction boundary the sender or flow control module transmits additional data packets to the receiver to cause acknowledgements therefrom. The additional data packets should therefore be such that the receiver will at least generate an ACK or SACK in response to receiving the data packet. In one embodiment the last packet or packets of the transaction are simply retransmitted. This has the added benefit of retransmitting needed data if the last packet or packets had been dropped as compared to merely sending dummy data packets. In another embodiment fractions of the last packet or packets are sent allowing the sender to disambiguate the arrival of these packets from their original packets. This allows the receiver to avoid falsely confusing any reordering adaptation algorithms. In another embodiment any of a number of well known forward error correction techniques can be used to generate additional data for the inserted packets allowing for the reconstruction of dropped or otherwise missing data at the receiver.

In some embodiments the boundary detection technique described herein helps to avoid a timeout when the acknowledgements for the last data packets in a transaction are dropped. When the sender or flow control module receives the acknowledgements for these additional data packets the sender can determine from these additional acknowledgements whether the last data packets have been received or need to be retransmitted thus avoiding a timeout. In one embodiment if the last packets have been received but their acknowledgements were dropped a flow control module generates an acknowledgement for the data packets and sends the acknowledgement to the sender thus communicating to the sender that the data packets have been delivered. In another embodiment if the last packets have not been received a flow control module sends a packet to the sender to cause the sender to retransmit the dropped data packets.

In yet another embodiment the appliance or flow controller applies a repacketization technique for improving the flow of transport layer network traffic. In some embodiments performance of TCP is proportional to packet size. Thus increasing packet sizes improves performance unless it causes substantially increased packet loss rates or other nonlinear effects like IP fragmentation. In general wired media such as copper or fibre optics have extremely low bit error rates low enough that these can be ignored. For these media it is advantageous for the packet size to be the maximum possible before fragmentation occurs the maximum packet size is limited by the protocols of the underlying transmission media . Whereas for transmission media with higher loss rates e.g. wireless technologies such as WiFi etc. or high loss environments such as power line networking etc. increasing the packet size may lead to lower transmission rates as media induced errors cause an entire packet to be dropped i.e. media induced errors beyond the capability of the standard error correcting code for that media increasing the packet loss rate. A sufficiently large increase in the packet loss rate will actually negate any performance benefit of increasing packet size. In some cases it may be difficult for a TCP endpoint to choose an optimal packet size. For example the optimal packet size may vary across the transmission path depending on the nature of each link.

By inserting an appliance or flow control module into the transmission path the flow controller monitors characteristics of the link and repacketizes according to determined link characteristics. In one embodiment an appliance or flow controller repacketizes packets with sequential data into a smaller number of larger packets. In another embodiment an appliance or flow controller repacketizes packets by breaking part a sequence of large packets into a larger number of smaller packets. In other embodiments an appliance or flow controller monitors the link characteristics and adjusts the packet sizes through recombination to improve throughput.

Still referring to the flow controller in some embodiments may include a QoS Engine also referred to as a QoS controller. In another embodiment the appliance and or network optimization engine includes the QoS engine for example separately but in communication with the flow controller . The QoS Engine includes any logic business rules function or operations for performing one or more Quality of Service QoS techniques improving the performance operation or quality of service of any of the network connections. In some embodiments the QoS engine includes network traffic control and management mechanisms that provide different priorities to different users applications data flows or connections. In other embodiments the QoS engine controls maintains or assures a certain level of performance to a user application data flow or connection. In one embodiment the QoS engine controls maintains or assures a certain portion of bandwidth or network capacity for a user application data flow or connection. In some embodiments the QoS engine monitors the achieved level of performance or the quality of service corresponding to a user application data flow or connection for example the data rate and delay. In response to monitoring the QoS engine dynamically controls or adjusts scheduling priorities of network packets to achieve the desired level of performance or quality of service.

In some embodiments the QoS engine prioritizes schedules and transmits network packets according to one or more classes or levels of services. In some embodiments the class or level service may include 1 best efforts 2 controlled load 3 guaranteed or 4 qualitative. For a best efforts class of service the appliance makes reasonable effort to deliver packets a standard service level . For a controlled load class of service the appliance or QoS engine approximates the standard packet error loss of the transmission medium or approximates the behavior of best effort service in lightly loaded network conditions. For a guaranteed class of service the appliance or QoS engine guarantees the ability to transmit data at a determined rate for the duration of the connection. For a qualitative class of service the appliance or QoS engine the qualitative service class is used for applications users data flows or connection that require or desire prioritized traffic but cannot quantify resource needs or level of service. In these cases the appliance or QoS engine determines the class of service or prioritization based on any logic or configuration of the QoS engine or based on business rules or policies. For example in one embodiment the QoS engine prioritizes schedules and transmits network packets according to one or more policies as specified by the policy engine .

The protocol accelerator includes any logic business rules function or operations for optimizing accelerating or otherwise improving the performance operation or quality of service of one or more protocols. In one embodiment the protocol accelerator accelerates any application layer protocol or protocols at layers 5 7 of the network stack. In other embodiments the protocol accelerator accelerates a transport layer or a layer 4 protocol. In one embodiment the protocol accelerator accelerates layer 2 or layer 3 protocols. In some embodiments the protocol accelerator is configured constructed or designed to optimize or accelerate each of one or more protocols according to the type of data characteristics and or behavior of the protocol. In another embodiment the protocol accelerator is configured constructed or designed to improve a user experience response times network or computer load and or network or bandwidth utilization with respect to a protocol.

In one embodiment the protocol accelerator is configured constructed or designed to minimize the effect of WAN latency on file system access. In some embodiments the protocol accelerator optimizes or accelerates the use of the CIFS Common Internet File System protocol to improve file system access times or access times to data and files. In some embodiments the protocol accelerator optimizes or accelerates the use of the NFS Network File System protocol. In another embodiment the protocol accelerator optimizes or accelerates the use of the File Transfer protocol FTP .

In one embodiment the protocol accelerator is configured constructed or designed to optimize or accelerate a protocol carrying as a payload or using any type and form of markup language. In other embodiments the protocol accelerator is configured constructed or designed to optimize or accelerate a HyperText Transfer Protocol HTTP . In another embodiment the protocol accelerator is configured constructed or designed to optimize or accelerate a protocol carrying as a payload or otherwise using XML eXtensible Markup Language .

In some embodiments the appliance and or network optimization engine is transparent to any data flowing across a network connection or link such as a WAN link. In one embodiment the appliance and or network optimization engine operates in such a manner that the data flow across the WAN is recognizable by any network monitoring QOS management or network analysis tools. In some embodiments the appliance and or network optimization engine does not create any tunnels or streams for transmitting data that may hide obscure or otherwise make the network traffic not transparent. In other embodiments the appliance operates transparently in that the appliance does not change any of the source and or destination address information or port information of a network packet such as internet protocol addresses or port numbers. In other embodiments the appliance and or network optimization engine is considered to operate or behave transparently to the network an application client server or other appliances or computing device in the network infrastructure. That is in some embodiments the appliance is transparent in that network related configuration of any device or appliance on the network does not need to be modified to support the appliance .

The appliance may be deployed in any of the following deployment configurations 1 in line of traffic 2 in proxy mode or 3 in a virtual in line mode. In some embodiments the appliance may be deployed inline to one or more of the following a router a client a server or another network device or appliance. In other embodiments the appliance may be deployed in parallel to one or more of the following a router a client a server or another network device or appliance. In parallel deployments a client server router or other network appliance may be configured to forward transfer or transit networks to or via the appliance .

In the embodiment of in line the appliance is deployed inline with a WAN link of a router. In this way all traffic from the WAN passes through the appliance before arriving at a destination of a LAN.

In the embodiment of a proxy mode the appliance is deployed as a proxy device between a client and a server. In some embodiments the appliance allows clients to make indirect connections to a resource on a network. For example a client connects to a resource via the appliance and the appliance provides the resource either by connecting to the resource a different resource or by serving the resource from a cache. In some cases the appliance may alter the client s request or the server s response for various purposes such as for any of the optimization techniques discussed herein. In other embodiments the appliance behaves as a transparent proxy by intercepting and forwarding requests and responses transparently to a client and or server. Without client side configuration the appliance may redirect client requests to different servers or networks. In some embodiments the appliance may perform any type and form of network address translation referred to as NAT on any network traffic traversing the appliance.

In some embodiments the appliance is deployed in a virtual in line mode configuration. In this embodiment a router or a network device with routing or switching functionality is configured to forward reroute or otherwise provide network packets destined to a network to the appliance . The appliance then performs any desired processing on the network packets such as any of the WAN optimization techniques discussed herein. Upon completion of processing the appliance forwards the processed network packet to the router to transmit to the destination on the network. In this way the appliance can be coupled to the router in parallel but still operate as it if the appliance were inline. This deployment mode also provides transparency in that the source and destination addresses and port information are preserved as the packet is processed and transmitted via the appliance through the network.

Although the network optimization engine is generally described above in conjunction with an appliance the network optimization engine or any portion thereof may be deployed distributed or otherwise operated on any end node such as a client and or server . As such a client or server may provide any of the systems and methods of the network optimization engine described herein in conjunction with one or more appliances or without an appliance .

Referring now to an example embodiment of the network optimization engine deployed on one or more end nodes is depicted. In brief overview the client may include a first network optimization engine and the server may include a second network optimization engine . The client and server may establish a transport layer connection and exchange communications with or without traversing an appliance .

In one embodiment the network optimization engine of the client performs the techniques described herein to optimize accelerate or otherwise improve the performance operation or quality of service of network traffic communicated with the server . In another embodiment the network optimization engine of the server performs the techniques described herein to optimize accelerate or otherwise improve the performance operation or quality of service of network traffic communicated with the client . In some embodiments the network optimization engine of the client and the network optimization engine of the server perform the techniques described herein to optimize accelerate or otherwise improve the performance operation or quality of service of network traffic communicated between the client and the server . In yet another embodiment the network optimization engine of the client performs the techniques described herein in conjunction with an appliance to optimize accelerate or otherwise improve the performance operation or quality of service of network traffic communicated with the client . In still another embodiment the network optimization engine of the server performs the techniques described herein in conjunction with an appliance to optimize accelerate or otherwise improve the performance operation or quality of service of network traffic communicated with the server .

Referring now to an embodiment of a client agent is depicted. The client has a client agent for establishing exchanging managing or controlling communications with the appliance appliance and or server via a network . In some embodiments the client agent which may also be referred to as a WAN client accelerates WAN network communications and or is used to communicate via appliance on a network. In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

As with the appliance the client has a network stack including any type and form of software hardware or any combinations thereof for providing connectivity to and communications with a network . The network stack of the client includes any of the network stack embodiments described above in conjunction with the appliance . In some embodiments the client agent or any portion thereof is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

In further details the network stack of the client or appliance or may include any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack includes an application programming interface API . The interface may also have any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may include information and data related to a network packet or one or more network packets. In some embodiments the data structure includes references or identifies a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure is a kernel level data structure while in other embodiments the data structure is a user mode data structure. A kernel level data structure may have a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack has one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack includes one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may include any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may include software hardware or any combination of software and hardware. In one embodiment the interceptor intercepts or otherwise receives a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor includes or is a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor includes a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor includes a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may be a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts or receives any transport layer connection requests. In these embodiments the interceptor executes transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to an IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may include two agents and . In one embodiment a first agent may include an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client the client and or any other computing device such as a server or appliance in communications with the client . The client agent or any portion thereof may be installed and or executed on the client in a manner without modification of an application. In one embodiment the client agent or any portion thereof is installed and or executed in a manner transparent to any network configuration of the client appliance or server . In some embodiments the client agent or any portion thereof is installed and or executed with modification to any network configuration of the client appliance or server . In one embodiment the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent or any portion thereof. As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client the client another computing device such as a server or appliance or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes a streaming client a collection agent SSL VPN agent a network optimization engine and or acceleration program . In one embodiment the client agent is an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client agent has an application streaming client for streaming an application from a server to a client . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server . In some embodiments the client agent has one or more network accelerating or optimizing programs or agents such as an network optimization engine and an acceleration program . In one embodiment the acceleration program accelerates communications between client and server via appliance . In some embodiments the network optimization engine provides WAN optimization techniques as discussed herein.

The streaming client is an application program process service task or set of executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent is an application program process service task or set of executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent is an end point detection and scanning program which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or version of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

The SSL VPN agent is an application program process service task or set of executable instructions for establishing a Secure Socket Layer SSL virtual private network VPN connection from a first network to a second network or a SSL VPN connection from a client to a server . In one embodiment the SSL VPN agent establishes a SSL VPN connection from a public network to a private network or . In some embodiments the SSL VPN agent works in conjunction with appliance to provide the SSL VPN connection. In one embodiment the SSL VPN agent establishes a first transport layer connection with appliance . In some embodiment the appliance establishes a second transport layer connection with a server . In another embodiment the SSL VPN agent establishes a first transport layer connection with an application on the client and a second transport layer connection with the appliance . In other embodiments the SSL VPN agent works in conjunction with WAN optimization appliance to provide SSL VPN connectivity.

In some embodiments the acceleration program is a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol.

In one embodiment the acceleration program is designed constructed or configured to work with appliance to provide LAN side acceleration or to provide acceleration techniques provided via appliance . For example in one embodiment of a NetScaler appliance manufactured by Citrix Systems Inc. the acceleration program includes a NetScaler client. In some embodiments the acceleration program provides NetScaler acceleration techniques stand alone in a remote device such as in a branch office. In other embodiments the acceleration program works in conjunction with one or more NetScaler appliances . In one embodiment the acceleration program provides LAN side or LAN based acceleration or optimization of network traffic.

In some embodiments the network optimization engine may be designed constructed or configured to work with WAN optimization appliance . In other embodiments network optimization engine may be designed constructed or configured to provide the WAN optimization techniques of appliance with or without an appliance . For example in one embodiment of a WANScaler appliance manufactured by Citrix Systems Inc. the network optimization engine includes the WANscaler client. In some embodiments the network optimization engine provides WANScaler acceleration techniques stand alone in a remote location such as a branch office. In other embodiments the network optimization engine works in conjunction with one or more WANScaler appliances .

In another embodiment the network optimization engine includes the acceleration program or the function operations and logic of the acceleration program . In some embodiments the acceleration program includes the network optimization engine or the function operations and logic of the network optimization engine . In yet another embodiment the network optimization engine is provided or installed as a separate program or set of executable instructions from the acceleration program . In other embodiments the network optimization engine and acceleration program are included in the same program or same set of executable instructions.

In some embodiments and still referring to a first program may be used to install and or execute the client agent or any portion thereof automatically silently transparently or otherwise. In one embodiment the first program is a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program is designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers and the client agent or any portion thereof on the operating system of the client .

In some embodiments each or any of the portions of the client agent a streaming client a collection agent SSL VPN agent a network optimization engine acceleration program and interceptor may be installed executed configured or operated as a separate application program process service task or set of executable instructions. In other embodiments each or any of the portions of the client agent may be installed executed configured or operated together as a single client agent .

D. Systems and Methods for Using an SSL Session from a Pool of SSL Sessions Shared Between Intermediaries

End to end secure communications between a client and a server may be provided by an SSL session connection. The connection may be established across one or more intermediaries such as network appliances between the client and the server in a networked system. In some embodiments multiple intermediaries may be configured to provide data acceleration and or other services between the server and the client . A pair of intermediaries providing data acceleration between the pair of intermediaries may use a signaling tunnel between the pair of intermediaries to establish a secure channel for communications.

Referring now to one embodiment of a system for using a SSL session from a pool of SSL sessions shared between intermediaries is shown. In brief summary the system shows a first intermediary and a second intermediary processing a client request for a secure connection to a server . These intermediaries can be or comprise features from any embodiment of the appliances described above in connection with A and . The first intermediary may be in communication with one or more clients while the second intermediary may be in communication with one or more servers . In some embodiments the client may establish a transport layer connection with the server for communications. In some of these embodiments the client may establish a SSL session with a first intermediary . The first intermediary is sometimes referred to as a client side intermediary . In some other embodiments the first intermediary may establish the SSL session with the client for example responsive to a request from the client .

In some embodiments the server may establish a SSL session with a second intermediary . The second intermediary is sometimes referred to as a server side intermediary . In some embodiments the second intermediary may establish the SSL session with the server for example responsive to a request from the client server and or first intermediary . In another embodiment one or more SSL sessions with the server may be established responsive to the establishment of a signaling tunnel .

The client side and server side SSL sessions may be established concurrently or at different times. The client side and server side SSL sessions may be established independently. In some embodiments a pair of client side and server side SSL sessions may be established based on some trigger configuration or requirements for example responsive to a peer list . In some embodiments the client side and server side SSL sessions are established responsive to a same event. For example and in one embodiment the client side and server side SSL sessions are established when a client registers with the system e.g. the first intermediary . In another embodiment the client side and server side SSL sessions are established when the first and second intermediaries are initialized or otherwise added to the network . In still another embodiment the client side and server side SSL sessions are established when the client and or the server are added to the network . In yet another embodiment the client side and server side SSL sessions are established when the first and second intermediaries are identified to handle communications in relation to the client and or the server . For example and in one embodiment the client side and server side SSL sessions are established when the first and second intermediaries are identified in a peer list that pairs or otherwise groups a plurality of intermediaries for communications.

In some embodiments one or both of the client side and server side SSL sessions are established in anticipation of communications between a client and a server . Establishment of one or both of the client side and server side SSL sessions in advance or in parallel with other segments of an end to end SSL session may reduce the latency and or complexity of establishing the end to end SSL session. The client side and server side SSL sessions may share one or more configurations settings attributes identifiers and or other information. These configurations settings attributes identifiers and or other information may be determined maintained stored and or managed by one or more of the client server first intermediary second intermediary and a storage device. In some embodiment a SSL session pool manager determines maintains stores and or manages these configurations settings attributes identifiers and or other information.

The first intermediary and or the client may establish a plurality of client side SSL sessions between the first intermediary and the client . A plurality of client side SSL sessions related to one or more clients is hereafter sometimes referred to as a client side SSL session pool. The second intermediary and or the server may establish a plurality of server side SSL sessions between the second intermediary and the server . A plurality of server side SSL sessions related to one or more servers is hereafter sometimes referred to as a server side SSL session pool.

The client may generate and transmit a request destined for the server to initiate communications. In some embodiments the request may be a request for secure communications with the server . The request may comprise any form or type of message packet or communications and may be encrypted and or compressed. The request may be implemented in any type or form of communications protocol including custom proprietary and or standard protocols. In one embodiment the request is an unsecured communication for example to initiate secure communications with the server . In another embodiment the request is sent via a secured communications channel such as within an SSL session established between the client and the first intermediary

In some embodiments the request comprises a Signaling Hello protocol message. The request may identify a desired application protocol. Further the request may include capability details for example regarding the client . The request may also be part of a handshaking protocol for example a synchronization SYN signal or message. The request may also comprise a request to initiate data acceleration along the client server network path such as between the first and the second intermediaries .

The request may initiate establishment of a transport layer e.g. TCP connection and or a SSL session. In some embodiments the request is intercepted or received by the first intermediary and may be routed to the server . In one of these embodiments the request is directed to the second intermediary . The second intermediary may be identified by a peer list as paired with or otherwise related to the first intermediary . In some embodiments the request is forwarded to the second intermediary via a signaling tunnel . In other embodiments the request initiates establishment of one or more signaling tunnels between the first and second intermediaries. The request may initiate establishment of an SSL session. The request may initiate establishment of a transport layer connection between the client and the server . Responsive to the establishment of the transport layer connection a secured session e.g. a SSL session may be established.

In some embodiments the request comprises a request for information related to the establishment of a connection to the server . For example and in one embodiment the information requested may relate to one or more SSL sessions of a pool established between the second intermediary and the server . This request may be processed or handled by one or more pool managers .

In some embodiments responsive the request the first intermediary determines if a signaling tunnel is available between the first intermediary and the second intermediary . The signaling tunnel may be any type or form of communications tunnel channel connection session or link and may be implemented in one more communications protocol including custom proprietary and or standard protocols. In some embodiments the signaling tunnel is a control channel for but not limited to control administrative handshaking and or initialization messages. The signaling tunnel may support or transport data transfer of different rates including intermittent and continuous data transfer. In some embodiments the signaling tunnel is distinguished from typical communications channels such as those used to transport non control messages. The signaling tunnel may be a temporary tunnel or may be persisted after an SSL session is established.

The signaling tunnel may be used to setup data acceleration such as SSL acceleration between the first intermediary and the second intermediary . The signaling tunnel may provide a secure tunnel including encryption and or other security measures. In some embodiments one or more signaling tunnels are setup between peer intermediaries identified in a peer list . A peer list may be configured on one or more intermediaries . Responsive to the configuration on an intermediary the intermediary may attempt to establish a signaling tunnel with one or more of the intermediaries peers. The peer list may be configured by any means such as by an administrator or a peer list management module or process that manages some aspect of network traffic. The peer list may be configured directly onto an intermediary or may be communicated to the intermediary for example via a request e.g. request . The peer list for a first intermediary may be communicated from another intermediary and may be communicated via an existing or established signaling tunnel .

The peer list is sometimes referred to as a configuration list of peer intermediaries. In some embodiments the peer list indicates pairs or groups of trusted peers or intermediaries . Peer certificates or SSL certificates may be used by peer intermediaries to establish trust between the peer intermediaries . The intermediaries in a peer list may be listed or specified using any form or type of identifiers such as IP addresses. The intermediaries may also be identified by domain name such as Fully Qualified Domain Name. The domain name of an intermediary may be resolved by Domain Name System DNS . If a request for SSL session establishment is received by a first intermediary that has not been configured with a second intermediary in a peer list or that does not have access to a peer list the first intermediary may be responsible for authenticating the second intermediary . The first intermediary may also be responsible for establishing a signaling tunnel with the second intermediary . The first intermediary and the second intermediary may initiate an update of a peer list for example responsive to authentication. This update may applied to one or both of the peer lists of the intermediaries .

In some embodiments the signaling tunnel enables a pair of intermediaries to authenticate each other. In addition the signaling tunnel can allow a pair of intermediaries to communicate SSL specific information. The signaling tunnel can enable the pair of intermediaries to setup a set of SSL state machine pairs for establishing one or more SSL sessions between a client and a server . In some embodiments the signaling tunnel is used to communicate out of band messages such as SSL session re negotiation message and SSL shutdown messages. Intermediaries may also use the signaling tunnel to communicate information about signaling agents such as identifiers of agents signaling tunnel internet protocols IPs and SSL acceleration specifics. These information may further include information to identify operational configurations or modes of a pair of intermediaries such as configurations for spoofing or split proxy modes.

The signaling tunnel may itself be a SSL connection between the pair of intermediaries . In some embodiments establishment of the signaling tunnel may require SSL configuration information to be configured on the pair of intermediaries . The signaling tunnel may use any portion of existing infrastructure provided by a tunnel established between a certificate authority CA and an intermediary . The signaling tunnel may support an application to application protocol capability for inter protocol communications between intermediaries or between an intermediary and a CA.

The signaling tunnel may be established using a plurality of methods. In one embodiment the signaling tunnel is established at initialization time for example of one or both intermediaries of a peer pair. In another embodiment a signaling tunnel is established responsive to a new SSL connection request for example initiated by a client request . After the establishment of the signaling tunnel the pair of intermediaries may establish a pool of SSL contexts. A SSL context may include any of infrastructure configuration settings state machines handshaking operations and protocols for setting up a SSL session and or connection. In some embodiments establishment of a pool of SSL contexts allows for fast allocation of new SSL connections between a pair of intermediaries . One or more intermediaries associated with the pool of SSL contexts may manage this pool. Management of the pool of contexts may include but are not limited to allocation cleanup maintenance of SSL state machines and encryption keys. In some embodiments the pool of SSL contexts is referred to as a SSL session pool .

In some embodiments each intermediary identified in a peer list may create a plurality of SSL state machines. In other embodiments an intermediary may create a plurality of SSL state machines regardless of a peer list for example responsive to an SSL session establishment request . An intermediary may create a plurality of SSL state machines corresponding to a plurality of SSL sessions established between the intermediary and one or more clients and or servers . A mapping of the plurality of SSL state machines to the plurality of SSL sessions may be described as a one to one or one to many relationship. A first intermediary may create a first plurality of SSL state machines corresponding to a second plurality of SSL state machines created by a second intermediary for example according to a peer list . A mapping of the first plurality of SSL state machines to the second plurality of SSL state machines may be described as a one to one or one to many relationship.

Responsive to a request for establishment of a SSL session a pair of SSL state machines can be selected from the first plurality and second plurality of state machines. In OpenSSL terminology SSL state machines may be referred to as SSL Objects. In some embodiments each of the state machines may use the signaling tunnel as a transport mechanism. Between a first and a second intermediary the state machines on one of these intermediaries may operate in accept mode. The state machines on the other intermediary may operate in connect mode. In some embodiments a connect mode state machine may connect to a unique accept state machine.

An SSL handshake between a pair of state machines can be conducted over the signaling tunnel . A first state machine at the first intermediary and a second state machine at second intermediary may use OpenSSL application programming interfaces APIs to encrypt decrypt the data communicated via the signaling tunnel . The first and second state machines may use a cipher pre negotiated during the signaling tunnel establishment process to encrypt decrypt the data communicated via the signaling tunnel . In some embodiments upon completion of the SSL handshake the transport mechanism for data transfer may switch from the signaling tunnel to the transport layer e.g. TCP connection. The first and second state machines may then use the transport layer connection as the transport mechanism to send encrypted traffic.

The signaling tunnel may be used to communicate any further type or form of information between a pair of intermediaries or SSL state machines. In some embodiments information is transmitted in a response to the request . In other embodiments information is transmitted or exchanged responsive to establishment of the signaling tunnel . The information may include one or more signaling IP addresses. A signaling IP address may be an IP address for identifying one of an intermediary a state machine a client and a server . The information may also include information associated with one or both SSL state machine pool and or intermediaries for example 

In some embodiments the information may include SSL proxy parameters such as for initializing and or establishing an SSL session which may include 

3. Private Key Store Table A list of private keys for different servers client and or intermediaries .

In some embodiments a first intermediary may be configured with a list of ciphers for encrypting and decrypting the traffic with a second intermediary or vice versa. A pair of intermediaries e.g. peer intermediaries may negotiate a cipher for encryption during the signaling tunnel establishment. The negotiation may be initiated by a request such as a Signaling Hello Message. Upon completion of the negotiation the pair of intermediaries can use the negotiated cipher for encryption decryption between the pair of intermediaries which may or may not be limited for use in the signaling tunnel . In some embodiments one or more ciphers may be negotiated and or configured for each connection segment between any two of a client a first intermediary a second intermediary and a server .

In addition to security provided by cipher each intermediary may have portions of data encrypted stored and or persisted in a storage device. The storage device may be or include features of any embodiment of storage elements described above in connection with . In some embodiments the storage device is a database computer DBC . The storage device may also store the network data history associated with the intermediary . The storage device may be provided by any network device and may reside in one or more network devices including but not limited to the intermediaries the client and or the server . The stored data may be encrypted on a per file basis. In some embodiments the system may encrypt whole disks partitions logical volumes and files associated with the data. For example and in one embodiment an intermediary may use a file to store the data in the Windows platform. In another embodiment the intermediary may store the data in a logical volume under a Linux platform. For example dm crypt may be used to encrypt the data in Linux. In addition a swap file may contain data that is paged to a disk which may be used to support memory larger than that physically available from the storage device. This swap file may be encrypted for security.

Although passages in this disclosure may generally refer to state machines it should be understood that each state machine represents a model of behavior implemented by a combination of hardware and software and as such any of the actions described herein by a state machine may be performed by a module component and or device of the corresponding hardware intermediary . In addition a selection of a state machine or state machine pair may be equivalent to the selection of a corresponding or related SSL session from a SSL session pool . For example and in one embodiment selection of a pair of state machines from the respective state machine pools of the first and second intermediaries represents the selection of a SSL session from the server side SSL session pool of the second intermediary . Furthermore the pools of state machines and or SSL session pools may be maintained and or managed by one or more pool managers .

In further details of a pool manager may be provided at least in part by the first intermediary the second intermediary and or other network components. A plurality of pool manager may reside in one or more network components and operate in communication with one another. For example and in one embodiment a first pool manager in the first intermediary may operate with a second pool manager in the second intermediary . By way of illustration and not intended as a limitation we will sometimes refer to one or more pool managers as a single pool manager .

A pool manager may be implemented in hardware or a combination of hardware and software. The pool manager may be built and configured for supporting or providing SSL security features. The pool manager may include any module script program agent component or set of executable instructions executing on one or more intermediaries . The pool manager may have components operating at one or more layers of the network stack such as the transport layer. The pool manager can initiate and or establish SSL sessions and connections within an SSL session. The pool manager may be initiated or otherwise rendered active responsive to a request a peer list establishment of a signaling tunnel or by other means. In addition the pool manager may create configure maintain or otherwise manage a plurality of SSL state machines. The pool manage may also create maintain and manage a pool of SSL session keys and or hash message authentication code HMAC keys between a pair of intermediaries . In some embodiments the pool manager may coordinate or manage communications via the signaling tunnel for example in the selection of a SSL session key from a key pool. Further the pool manage may coordinate or manage communications regarding state machine session identifier and or cipher selection and matching.

In some embodiments a pool manager may maintain a plurality of pools of state machines for each intermediary e.g. of a pair of peer intermediaries . A first of the plurality of pools of state machines may be referred to as an owned pool. An owned pool is a pool that is owned by the intermediary from which it can allocate a state machine for SSL connections. illustrates one embodiment of a state machine for an owned pool . A second of the plurality of pools of state machines may be referred to as a monitored pool . A monitored pool is a pool owned by the peer intermediary but may be used by the intermediary to monitor the peer intermediary s state machine allocation. shows embodiments of state machines for an SSL state machine identifier for an owned pool and a monitored pool .

In some embodiments each of the owned and monitored pools may maintain a plurality of lists. In one embodiment the plurality of list includes but is not limited to 

Each intermediary via the pool manager may create and maintain the intermediary s owned pool and or synchronize the intermediary s monitored pool with the peer intermediary s owned pool . The intermediary may use information transmitted via the signaling tunnel by the peer intermediary in control or protocol messages for the synchronization of the monitored pool . If an intermediary detects that the signaling tunnel between the peers has gone down the state machine s owned pool may receive a destroy event from the pool manager . Responsive to the destroy event the owned pool may be dissolved.

To establish a first pool of state machines a first intermediary may determine an initial pool size say N and create N SSL state machines. In some embodiments an initial pool size may be based on platform size e.g. smaller initial pool sizes corresponding to smaller platforms. In other embodiments the system can maintain and update a counter value every time an SSL state machine pair is identified for use from the state machine pools. When an intermediary is initialized or reset the intermediary can access the updated counter value and begin with a configurable percentage of the updated counter value. In one of these embodiments a counter value greater than a pre determined minimum number is used to determine the initial pool size. For example and in one embodiment if the saved counter value is 75 the minimum pool size is 10 and the configurable percentage is 40 then the initial pool size may be determined to be 30. This can be set as the initial counter value or may be saved as the updated counter value until a higher counter value starting at 0 is reached.

In some embodiments the first intermediary may determine the initial pool size based in part on one or more of available resources including bandwidth and session count limits information about the client and or the server and information from the request and or configuration or user settings for the intermediary . Each SSL state machine may be identified by a unique identifier. The pool manager may connect each of these state machines to the signaling tunnel for packet transport. The first pool of SSL state machines can then be moved to the accept state. The pool manager may generate and send a pool update message to a second intermediary . The pool update message may include but is not limited to the following information 

In some embodiments a second intermediary e.g. a peer intermediary receives the pool update message over the signaling tunnel . The second intermediary may create the required number of SSL state machines to form a second pool of state machines. For example and in one embodiment the second intermediary creates N SSL state machines responsive to the pool update message. The second intermediary can further generate and assign a unique identifier to each state machine of the second pool. The pool manager may associate a state machine from the second pool with a state machine from the first pool. In some embodiments the pool manager may pair up the identifiers of the first and second pools of state machines by generating an identifier for a state machine pair from the identifiers of each of the state machine pair. For example a combination of an identifier of a first state machine from the first pool and an identifier of a second state machine from the second pool can yield a unique identifier that identifies the SSL state machine pair comprising the first and second state machines. For example if the first state machine identifier is 1234 and the second state machine identifier is 5678 then the SSL state machine pair may be identified by an identifier 12345678 based on concatenating the state machine identifiers.

The second intermediary may send a pool update response in one embodiment including but not limited to 

Responsive to receiving the pool update response the first intermediary may pair and store the SSL state machine identifiers. The first intermediary may also update its Free Pool List . The pool manager may connect on behalf of the second intermediary the SSL state machines of the second pool to the signaling tunnel for sending packets over the signaling tunnel . In addition the pool manager may move the state machines of the second pool to the connect state. In some embodiments moving the state machines of the second pool to the connect state completes the SSL handshake between the SSL state machine pairs. For a state machine pool of size N N SSL handshakes may be completed over the signaling tunnel . The sender of the pool update message e.g. the first intermediary may add the set of SSL state machine pair identifiers to the sender s Owned Pool . The peer intermediary e.g. second intermediary may correspondingly add these identifiers to the peer intermediary s monitored pool . Accordingly the above discussed mechanism of using pool update messages and pool update responses enables growth in a state machine pool.

In some embodiments the system comprises a configurable parameter which determines the Free Pool Threshold for purposes of managing or maintaining a pool size. If the free pool capacity is below the Free Pool Threshold the pool manager may increase the pool capacity up to a maximum quantum. For example and in one embodiment this increase occurs by continuously doubling the pool capacity as long as the pool capacity is below the maximum quantum and the Free Pool Threshold. For example and in another embodiment if we set the maximum quantum to 25 the Free Pool Threshold as 100 and initial pool size as 10 the pool may progressively grow as 20 doubled 40 doubled 65 increase by max quantum 90 increase by max quantum below the Free Pool Threshold . In some embodiments a pool of state machine pairs may be considered to have two owners the first intermediary and the second intermediary . In these embodiments the pool manager may act to maintain or grow the pool size when one owner s pool shrinks. In some embodiments the pool manager may keep track of the rate of reduction of a pool in deciding a growth factor for growing the pool.

SSL state machines from a client side pool and a server side pool may be paired during creation or growth of SSL session pools. In some embodiments the intermediary having SSL state machines in the connect state may set the SSL session identifier of the intermediary to the SSL session identifier of the signaling tunnel . In some of these embodiments the setting of the SSL session identifier of the intermediary to the SSL session identifier of the signaling tunnel causes a key exchange process to be skipped. In some embodiments skipping the key exchange process may speed up the establishment of the SSL session.

In some embodiments each intermediary may create a set of N memory basic inputs outputs BIOs corresponding to the N SSL state machines. Each SSL state machine may then connect to a memory BIO. In some embodiments data that is to be sent over the TCP connection is written to the write buffer wbio of the memory BIO. Incoming data on the TCP connection may be read from the read buffer rbio of the memory BIO. For data transfer from a first intermediary to second intermediary e.g. over a WAN the first intermediary may process a packet by separating the payload and header of the packet. The first intermediary may determine the state machine pair identifier to identify the SSL state machine to transmit from. The first intermediary may place the payload in the Memory BIO connected to the identified SSL state machine. The first intermediary may encrypt the payload and re attach the header to form a new packet for transmission. In some embodiments the header is in plaint text i.e. not encrypted .

For an incoming packet the receiving intermediary e.g. second intermediary may process the packet to determine the state machine pair identifier. Based on the state machine pair identifier the receiving intermediary can identify the SSL state machine for receiving the packet. The identified state machine may separate the header and encrypted payload and store the payload in the Memory BIO connected to the identified SSL state machine. The identified state machine may decrypt the payload and re attach the header to the decrypted payload to form a new received packet.

In further details of and in one embodiments to establish a SSL session the second intermediary may allocate an SSL state machine pair from the Free List on the second intermediary s owned pool . The second intermediary may move a state machine pair on the second intermediary s owned pool from the Free List to the Allocated list . The second intermediary may transmit a message e.g. SYN ACK message that comprises the identifier of this SSL state machine pair to the first intermediary . The first intermediary can extract the identifier from the message and move the corresponding state machine pair on the Monitored Pool from the Free List to the Allocated List . In this represents a state machine transition from Free ID to Allocated ID .

The pool manager may set an active usage threshold of the SSL session pool and track actual usage periodically. If the active usage does not get beyond the threshold value the pool manager may reduce the pool size by some predetermined or dynamically determined percentage. The pool manager may maintain usage statistics such as a maximum usage for each SSL session or intermediary usage per time period memory usage for pools aggregated across one or more SSL sessions associated with an intermediary . In some embodiments the number of state machines expiring or being destroyed may be small e.g. small compared to state machine growth.

To reduce or shrink an owned pool an intermediary may identify a number of SSL state machine pairs from the Free List to remove. These SSL state machine pairs may be removed from the tail end or any portions of the Free List . The pool manager may send a pool update message on behalf of the intermediary to the peer intermediary . The pool update message may comprise the corresponding identifiers of the state machine pairs identified for removal. The request identifier of the pool update message may be set to Destroy Request indicating that state machine pairs are to be removed. The intermediary may then move the identified SSL state machine pairs to the To Be Destroyed List on the intermediary s owned pool . The peer intermediary may receive the pool update message over the signaling tunnel . Responsive to the pool update message the pool manager of the peer intermediary may move the identified SSL state machines from the Free List to the To Be Destroyed List on the monitored pool . The pool manager may send back a pool update response which includes the identifiers of the state machine pairs identified for removal. The request identifier of the pool update response may be set to Destroy Complete to confirm that the removal update has been synchronized at the peer intermediary as reflected in the monitored pool . In some embodiments responsive to receiving the pool update response the pool manager of the intermediary may flush the To Be Destroyed List .

In some embodiments the SSL handshake between the SSL state machines are completed before a SSL session key is allocated to TCP connections. In some embodiments the same SSL session key is reused for multiple TCP connections. To implement a renegotiation for SSL session keys peer intermediaries may exchange lifetime parameters for the SSL session key. This exchange may occur during the establishment of the signaling tunnel . The lifetime parameter of each of the peer intermediary may differ in value. In one embodiment the minimum of the two lifetime parameter values may be computed and used for determining the SSL session lifetime. In other embodiments the maximum average or other function of the lifetime parameter values may be used. Each SSL state machine pair may be tagged with an expiry time based on the computed value. Each SSL state machine pair may periodically check for expiration of the SSL session key.

An intermediary may move expired state machines i.e. SSL sessions from the Free List or Allocated List to the To Be Destroyed List and send a pool update message to a peer intermediary . Responsive to the pool update message the peer intermediary may delete the corresponding SSL state machines from the Free List on the peer intermediary s monitored pool and send a confirmation response. Responsive to the confirmation response the intermediary may flush or empty its To Be Destroyed list .

In some embodiments if the intermediary discovers expired SSL state machines on its Allocated List the pool manager of the intermediary may wait until an existing SSL session or connection is closed so that these state machines are returned to the Free List . To avoid re allocating a recently expired state machine the system may check if the SSL state machine has expired before allocating it to an SSL session.

Referring now to a flow diagram depicts embodiments of steps taken in a method for using a Secure Socket Layer SSL session from a pool of SSL sessions shared between intermediaries . The method includes receiving by a first intermediary a peer list including a second intermediary . The first intermediary is in communication with one or more clients and the second intermediary is in communication with one or more servers. The first intermediary establishes a signaling tunnel with the second intermediary . A pool manager of the second intermediary maintains information on one or more SSL sessions of a pool established by a second intermediary with a server . The first intermediary receives information on one or more SSL sessions of a pool established by the second intermediary with a server . The first intermediary receives a request from a client to establish an SSL session with the server . The client is from the one or more clients in communication with the first intermediary. The first intermediary identifies an SSL session from the pool of SSL sessions . The first intermediary establishes the SSL session with the client responsive to the request .

Referring now to and in greater detail the method includes receiving by a first intermediary a peer list including a second intermediary . The first intermediary is in communication with one or more clients and the second intermediary is in communication with one or more servers . The first intermediary may receive the peer list from one or more of an administrator of the system a second intermediary a third intermediary the client a server a storage device or other network component. In some embodiments the administrator may configure the peer list into the first intermediary . In some embodiments the first intermediary requests for a peer list responsive to an event such as receipt of a request . In other embodiments the first intermediary creates a peer list responsive to an event such as receipt of a request e.g. a SYN message . In some of these embodiments the first intermediary creates the peer list based on information included in the request . In still another embodiment the intermediary receives the peer list in the request .

In some embodiments the first intermediary may identify the second intermediary based on the peer list . The first intermediary may identify the second intermediary as a peer intermediary for example a trusted intermediary . The first intermediary may identify the second intermediary from a plurality of intermediaries for example identified by the peer list . The first intermediary may identify the second intermediary based on a request from the client for example identified by a signaling IP address in the request . For example and in one embodiments the first intermediary may identify the second intermediary based on the second intermediary s association with a server identified in the response . The first intermediary may determine if a signaling tunnel to the second intermediary exists. If no signaling tunnel exists the first intermediary may send a response e.g. a SYN ACK to a SYN request without SSL options attached to the client . In some embodiments this initiates a connection with the second intermediary without SSL acceleration.

In some embodiments the first intermediary establishes a signaling tunnel with the second intermediary . The first intermediary may establish the signaling tunnel in response to one or both of the peer list and the request . In some embodiments the signaling tunnel is established prior to receiving a request from the client . A pool manager or other component of the first and or second intermediaries may establish the signaling tunnel on behalf of or based on the direction of the first and or second intermediaries . The first intermediary may establish the signaling tunnel as a secure connection with the second intermediary . The first intermediary may establish the signaling tunnel for exchanging control messages with the second intermediary . The first intermediary may establish the signaling tunnel to setup an SSL session connection with the second intermediary

The first intermediary may initiate authentication of the second intermediary . The first intermediary may negotiate a cipher or encryption method with the second intermediary . The first intermediary and the second intermediary may select from a pool of ciphers or encryption keys configured in one or both of the intermediaries . One or both intermediaries may encrypt some or all data exchanged between the intermediaries using the cipher negotiated over the signaling tunnel .

The first intermediary may establish one or more SSL sessions with one or more clients for example responsive to the establishment of the signaling tunnel and or the peer list . The second intermediary may establish one or more SSL sessions with one or more servers for example responsive to the establishment of the signaling tunnel and or the peer list . In one embodiment the second intermediary establishes one or more SSL sessions with each of a plurality of servers for one or more pools of SSL sessions. The first intermediary may establish one or more SSL sessions with each of a plurality of clients for one or more pools of SSL sessions . Responsive to establishment of the signaling tunnel one or both of the first intermediary and the second intermediary may create one or more SSL state machines. A pool manager of the first intermediary may associate a first or client side pool of SSL state machines with the one or more SSL sessions established between the client and the first intermediary . A pool manager of the second intermediary may associate a second or server side pool of SSL state machines with the one or more SSL sessions established between the server and the second intermediary

In some embodiments a pool manager of the second intermediary maintains information on one or more SSL sessions of a pool established by a second intermediary with a server . A pool manager of the first intermediary may maintain information on one or more SSL sessions of a pool established by the first intermediary with the client . One or more pool managers may maintain information on the first and or second pool of state machines . One or more pool managers may maintain information on a pool of ciphers or encryption keys configured on one or both intermediaries . In addition the one or more pool manager may maintain any of these information on one or more storage devices described above in connection with .

The pool manager may maintain statistics of current and past SSL sessions between the intermediaries including usage statistics of each SSL session. The pool manager may maintain pool thresholds pool size counters rate of change of pool size and growth quantum of each SSL session pool . The pool manager may maintain update and keep track of the owned pool and or monitored pool of each intermediary . The pool manager may maintain update and keep track of the Free Pool Allocated pool and To Be Destroyed Pool of an intermediary . The pool manager may maintain and keep track of the state machine pair identifiers of SSL sessions whether active or expired.

In further details of the first intermediary receives via the signaling tunnel the information on the one or more SSL sessions from the pool manager . A pool manager of the first intermediary may receive the information from a pool manager of the second intermediary . The first intermediary may query from the second intermediary information on the one or more SSL sessions of the pool . The second intermediary may forward to the first intermediary information on the one or more SSL sessions of the pool . The first intermediary may communicate with a storage device e.g. maintained by the second intermediary to access the information on the one or more SSL sessions .

The first intermediary may receive session specific data for the one or more SSL sessions of the pool . For example and in one embodiment one of a plurality of SSL sessions and or state machines on the server side may be identified by the pool manager with which session specific data is gathered and or transmitted. The one of the plurality of SSL sessions and or state machines may be identified randomly or based on historical records and or the request from the client .

In some embodiments the information received may include any of the information described above in connection with . The information may be transmitted and or exchanged prior to receipt of a request from the client . In some embodiments the information may be transmitted and or exchanged responsive to the peer list. The information may also be transmitted and or exchanged responsive to establishment of the signaling tunnel . The second intermediary may encrypt some or all of the information prior to transmission to the first intermediary . The second intermediary may encrypt some or all of the information using a cipher or encryption key negotiated with the intermediary . The first intermediary receiving the information may decrypt the information e.g. using the cipher or encryption key negotiated with the intermediary

The second intermediary may further compress or other process the information before transmission to the first intermediary . The second intermediary may send the information over one or more messages via the signaling tunnel . The second intermediary may send the information including an SSL state machine pair identifier. The second intermediary may send the information in response to a SSL pool update message from the first intermediary . The second intermediary may send the information in a SSL pool update response to an SSL pool update message.

In some embodiments the first intermediary receives a request from a client to establish an SSL session with the server . The first intermediary may receive the request to establish a SSL session with the server . The first intermediary may intercept the request as a request from the client directed to the server . The first intermediary may receive the request responsive to establishment of a SSL session between the client and the first intermediary . The first intermediary may receive the request to establish a second SSL session with a second server . The first intermediary may receive the request after the signaling tunnel has been established. The first intermediary may receive the request after some information have been transmitted to the first intermediary

The first intermediary may receive the request as part of a client Hello message and or a SYN message. The first intermediary may receive the request as part of a handshaking process to initiate and or establish a SSL session. The first intermediary may receive the request with SSL related options. The first intermediary may receive the request including one or more signaling IP addresses e.g. identifying one or more server . The first intermediary may receive the request including a request for data acceleration compression and or encryption. The first intermediary may receive the request including at least a portion of a peer list for the first intermediary

Responsive to the request the first intermediary may identify the second intermediary for establishment of a connection. If the second intermediary is not in a peer list of the first intermediary the first or second intermediaries may initiate an update of one or both of their peer lists. If a signaling tunnel does not yet exist between the first and the second intermediaries the first intermediary may initiate establishment of a signaling tunnel in accordance to the process steps described above in connection with step . This may be optionally followed by any embodiment of process steps described above in connection with steps and or .

Responsive to the request the second intermediary may send additional information to the first intermediary and or the pool manager . This information sent may supplement the information sent earlier. This information may include SSL Proxy setup information. For example and in one embodiment this information is exchanges as part of a SSL proxy handshake to determine the type of proxy to be established i.e. Split or Spoofing. Furthermore this information may include any embodiment of information described above in connection with . In addition information such as SSL session key IP address Port tuple Virtual Server Name and other client and or server side configuration details may be exchanged between the first and second intermediaries. In one embodiment the configuration information for a spoofing proxy includes a server private key which references an SSL Key Store Table. In another embodiment the configuration information for a split proxy includes server certificate certificate chain and other data configured in an SSL Key Store Table.

In further details of step the first intermediary identifies an SSL session from the pool of SSL sessions . The first intermediary may request for an available SSL session from the pool of one or more server side SSL sessions. The first intermediary may request for an available SSL state machine from the pool of server side SSL state machines . The first intermediary may request for an SSL state machine in the Free List of the second intermediary s owned pool . In some embodiments the pool manager identifies an SSL session from the pool of SSL sessions . The pool manager may identify an SSL session from the server side SSL sessions. The pool manager may identify a SSL state machine from the server side SSL state machine pool. The pool manager may further identify a SSL state machine from the client side SSL state machine pool.

The pool manager may identify a pair of SSL state machines from the server side and client side SSL state machine pools. The pool manager may identify the pair of SSL state machines using an SSL state machine pair identifier. The pool manager the first intermediary and or the second intermediary may determine an SSL session from the server side SSL sessions based on one or more of the identified server the identified SSL state machines from the server side and client side SSL state machine pools the request the information and other information exchanged. The pool manager or first intermediary may identify to the second intermediary use of the SSL session from the pool of one or more SSL sessions. This identification may be communicated to the second intermediary as part of handshaking communications for SSL session establishment.

In some embodiments a handshaking process takes place for pairing up a client side state machine with a server side state machine for SSL session establishment. The second intermediary may select a SSL state machine from the Free List of the second intermediary s owned pool . The second intermediary may compute a hash message authentication code HMAC of the selected state machine s identifier using a HMAC key negotiated during establishment of the signaling tunnel . The second intermediary may append the HMAC and the identifier to a message e.g. attached as a TCP option in a SYN ACK message to the first intermediary . The message may be transmitted along with other SSL related options and information described above.

The first intermediary may receive the message with the identifier. The first intermediary may compute a HMAC of the identifier using the pre negotiated HMAC key. The first intermediary may verify the HMAC against that received in the message. If the HMAC validates against that received in the message the first intermediary may update the first intermediary s monitored pool in accordance with the selected the SSL state machine. In some embodiments if the HMAC does not match that in the message the first intermediary may not forward the message to the client . The server may eventually time out and resend another message with the same or another identifier. This process may be repeated until a valid HMAC is received or until the connection is reset by the server . The pool manager may determine a state machine pair identifier from the validated identifier. The pool manager may identify the client side state machine based on the state machine pair identifier.

In some embodiments the first intermediary establishes the SSL session with the client responsive to the request . The pool manager may establish an SSL session with the second intermediary on behalf of the first intermediary via the identified pair of SSL state machines. An SSL session may be established responsive to the validated pair of state machines. The pool manager may move the identified pair of SSL state machines into the respective Allocated Lists of the intermediaries owned pools . The second intermediary may configure the SSL session between the intermediaries to have the same SSL session identifier of the identified SSL session with the server . The second intermediary may configure the SSL session between the intermediaries to have the same SSL session key of the identified SSL session with the server . The first intermediary may configure the client side SSL session to have the same SSL session identifier of the identified SSL session with the server . The first intermediary may configure the client side SSL session to have the same SSL session key of the identified SSL session with the server . The first and or second intermediaries may connect the client and server via a single SSL session established via the client side server side and intermediary SSL connection segments.

The first and second intermediaries may determine whether to accelerate data transfer across the intermediaries . The first and second intermediaries may determine whether to accelerate data transfer based on information exchanged between the first and second intermediaries . In some embodiments the pool manager pairs up the client side and server side state machines if one or both of the intermediaries are able to support data acceleration. In other embodiments the pool manager pairs up the client side and server side state machines for SSL session establishment regardless of whether one or both intermediaries are able to support data acceleration.

Split proxying of SSL communications may be implemented across a plurality of intermediaries deployed between two endpoints e.g. a client and a server . The client server and intermediaries may be connected via one or more networks some embodiments of which are depicted in and A. An intermediary hereafter sometimes referred to as a server side intermediary may establish a secure connection hereafter sometimes referred to as a server side connection such as a SSL connection with the server . Another intermediary hereafter sometimes referred to as a client side intermediary may establish a secure connection hereafter sometimes referred to as a client side connection such as a SSL connection with the client . The two intermediaries may bridge the client side and server side connections with another secure connection between the intermediaries .

The three connections may be secured using one or more encryption keys. When transmitting data from the server to the client for example rather than passing encryption key information across one or more intermediaries the systems and methods disclosed herein may instead assign a key to each secure connection and isolate usage of each key within the assigned secure connection. Accordingly data sent via each secured connection is encrypted using the corresponding encryption key and decrypted with the same encryption key at the receiving end of the secured connection e.g. data sent from the server and received by the server side intermediary . Before retransmission via another secured connection the received data can be encrypted with another encryption key and correspondingly decrypted at the receiving end e.g. data sent from the server side intermediary and received at the client side intermediary .

In some embodiments an encryption key may be assigned to two or more of the secured connections. By way of illustration and in one embodiment the client side connection and the connection between the two intermediaries may share the same encryption key while the server side connection may be assigned another encryption key. Thus each key may be used and isolated within a corresponding section of the network path. Thus a plurality of secure connections and key assignments may be configured between two network end points e.g. clients and or servers via proxies i.e. intermediaries using the methods and systems described herein. Accordingly an encryption key e.g. server side private network key for securing data transfers can be secured and isolated without undue exposure across proxies along the data transmission network path.

Referring now to one embodiment of a system for split proxying SSL communications across intermediaries is shown. In brief summary the system shows a client side e.g. first intermediary and a server side e.g. second intermediary processing a connection request between a client and a server . These intermediaries can incorporate features from any embodiment of the appliances described above in connection with A and A.

Although a client and a server is depicted as the network end points this embodiment is merely an example and not intended to be limiting. For example any network node or intermediary can referenced as an endpoint. In addition the client side intermediary and server side intermediary are merely referenced for illustration purposes although any number of intermediaries not limited to two intermediaries may reside between the two network end points and any of these intermediaries may be identified as client side or server side depending on how the network end points are defined and or the relative position of the intermediary with respect to the client endpoint the server endpoint and or other intermediaries . Accordingly the methods and systems described herein may apply to any number of intermediaries and connection sessions between two network endpoints.

By way of illustration and in one embodiment shows an additional intermediary residing between the server and the server side intermediary . Intermediary may be identified as a client side intermediary relative to intermediary . However intermediary may be identified as a client side intermediary relative to intermediary . In some embodiments intermediaries and may be referenced as a single node or unit such as a server side intermediary e.g. in relation to client side intermediary . Intermediaries and may interoperate as one unit or otherwise present themselves as a single intermediary in relation to the server and or the intermediary

Referring back to the intermediaries may communicate via any type or form of communication link connection or session hereafter sometimes generally referred to as either connection or session . Likewise each network endpoint may communicate with an adjacent intermediary via any type or form of connection. In some embodiments these connections may comprise connections of the same or different types. For example and in one embodiment some connections may be secured connections e.g. using one or more types of secure key encryption. Some connections may be unsecured connections or provide limited security. Some connections may incorporate some type or form of SSL encryption firewall and or virtual private network protection. Some connections may apply data compression acceleration caching and or any other type or form of data processing. Some connections may support one or more communication protocols including standard custom and or proprietary protocols.

For connections using encryption keys one or more of a private key a public key and other types or forms of keys including negotiated or generated keys may be used in various embodiments. A pair of communicating network nodes e.g. client server and or intermediaries that are endpoints to a connection may use a cipher for data encryption decryption between the network nodes using the encryption key s . One or more ciphers and encryption keys e.g. from a pool of ciphers and or encryption keys may be negotiated and or configured for each connection. The encryption key s and cipher s may incorporate features of embodiments of encryption keys and ciphers described above in connection with . The ciphers and or encryption keys may support one or more types or forms of encryption standards algorithms and or protocols such as Data Encryption Standard DES Rivest Shamir and Adelman RSA algorithm Diffie Hellman D H Key Exchange protocol and Advanced Encryption Standard AES .

In addition to encryption key related cryptography can be used to implement digital signature schemes. Digital signatures can be associated with transmitted data for verification purposes. An encryption key sometimes also referred to as a secret key may be used in an algorithm for signing i.e. processing the transmitted data. Another algorithm may use the key to check the validity of the signature and the transmitted data at the receiving end. Encryption decryption signing and verification using encryption keys may generally be referred to as cryptography operations or crypto ops.

By way of illustration depicts one embodiment of a SSL handshaking process between two devices e.g. a client and a server using encryption keys. In this embodiment the SSL handshake includes negotiating or generating an encryption or secret key to establish a secure connection or session. As shown in the handshake process includes a plurality of steps including various exchanges between the devices. Such exchanges may include crypto ops and or exchange of crypto information such as public key information between the devices. In some embodiments a client and or server certificate may be encrypted such as using a private key and validated using a corresponding public key. For example and in one embodiment a certificate authority CA may issue a client certificate for the client prior to or during the handshake for validating the connection request or process. The client certificate may be encrypted using the client s private key and validated at the server using the client s public key. Certificate validation at the server side may include verification of a digital signature of the client in the client certificate. In some embodiments the encrypted client certificate may be decrypted at the server using the client s public key. Upon validation of the respective certificates a secret key may be negotiated calculated or otherwise determined for an SSL session. This secret key may be used to encrypt data transfer between the devices in the established SSL session. Other schemes not limited to SSL may incorporate some and or similar features to secure a connection or session.

In some embodiments the same cipher and or encryption keys may be negotiated and or configured for sharing across one or more connections. The use of different sets of ciphers and or encryption keys may improve security across the one or more connections in comparison with sharing a single set of cipher and or encryption keys. Additional levels of security for end to end communications can be made available with the use of distinct sets of ciphers and or encryption keys assigned to the different connections of the communication path. Usage of a cipher and or set of encryption keys isolated within a particular connection can limit exposure of crypto information in maintaining integrity of the overall end to end communications against hacking for example. In some embodiments the encryption or secret key s for a connection or session may be generally referred to as a session key.

Referring again to an intermediary may be configured as a proxy for another device. For example the client side intermediary may be configured as a proxy for the client in communicating with or requesting communications with the server . A proxy may act on behalf of the corresponding device such as directing traffic e.g. making routing decisions for packets destined for the server making certain responses e.g. responding to a server s ICMP request and providing certain functionality e.g. SSL encryption firewall and acceleration services . A proxy has transceivers and or I O interfaces for sending and receiving all forms or types of messages packets control signals and data. Other embodiments of features of a proxy are described above in connection with A and A.

When establishing a communications channel across one or more networks between a client and a server the intermediaries or proxies may interact with each other and or with the endpoints through any type or form of handshaking processes for example transmission control protocol TCP handshake SSL Proxy handshake and SSL session handshake processes. These processes will be described in more detail in connection with . During and after the handshake processes to establish the communication channel any number of cryto ops involving encryption keys may be initiated in association with one or more connections forming the channel.

Each of the communicating devices such as the intermediaries the client and the server may include a private key store . By way of illustration and not intended to be limiting a private key store may reside in an intermediary or any other network device. In some embodiments such as depicted in a private key store is a secure container for private keys configured on an intermediary . The key store may be a standalone process server process . A filter process sometimes referred to as an Orbital server process uses operating system OS sockets to communicate with the server process. One or more user interface UI management processes may use extensible markup language remote procedure calls XML RPC on top of OS sockets to communicate with the server process .

In some embodiments the private key store is implemented as a separate process from the filter process although they may be part of the same process in other embodiments. The private key store may open a socket such as an ordinary socket and can listen on a local port for incoming connections from the filter process . The key store process may provide one or more of the following interfaces 

The private key store may be any type or form of process executing or operating on hardware of the intermediary . In some embodiments the private key store is a multi threaded process. A thread pool may be created at initialization time for the intermediary and or the private key store . A free thread from the pool may be assigned to a SSL connection that triggers or requires a crypto op . The UI may provide a mechanism to add private keys in any format e.g. in privacy enhanced mail PEM format to the key store.

Each key in the key store can have any type or form of name or identifier. In one embodiment a key name or identifier may be any arbitrary ASCII strings and or 1 to 32 bytes long. A key can be of any type or form. In one embodiment a key is of either RSA or DSA type. In some embodiments an implementation using Open SSL provides support for RSA and DSA key types. In embodiments limited to supporting RSA and DSA key types a single key name can reference up to 2 different keys i.e. a RSA key and a DSA key . A pairing of key name and key type together can be used to uniquely identify a private key. In various embodiments each key in the key store process remain in the key store process. A key in the key store process may not leave the key store process e.g. for security. The key store process may perform a crypto op on behalf of another process or network component. For example and in one embodiment instead of obtaining a key from the key store process an intermediary or other entity may request a key store process managing the key to perform a cryto op on behalf of the intermediary or other entity.

One or more keys may be stored in a file on disk. Each key may be encrypted using any type or form of encryption methods. In some embodiments a key may be encrypted using Advanced encryption standard AES of any key size e.g. 256 bits. The UI management may specify an encryption password for opening the key store for example to load one or more keys from the file into memory or to update the file such as adding or removing keys. These keys may be applied in one or more crypto ops such as for establishing a SSL connection or tunnel. For example referring back to and in some embodiments the client side intermediary may send a message including data and a request for the server side intermediary to decrypt or sign the data i.e. an indication of the crypto op type . In response to the message the server side intermediary may use a key from its private key store to generate and return a response to the request. The response may include a status of the crypto op as requested and or the data as signed or decrypted. One or both of the intermediaries may include a hardware security module HSM for processing the various crypto ops. A HSM at a requesting end may perform one or more of i identify a cryto op type for a given data or set of data ii generate a request for the crypto op iii send the request to the destination iv monitor for responses to the request v receive and identify a status of the requested cryto op and vi verify the digital signature of signed data. A HSM at a receiving end may perform one or more of i receiving a crypto op request ii identifying the crypto op type and data from the request iii loading an appropriate key from the key store to perform the requested crypto op iv generate a response including a status of the crypto op and or the signed or decrypted data. A HSM may also encrypt data using a negotiated key and or a private key from the key store .

A HSM may be implemented in hardware or a combination of hardware and software. A HSM may be built and configured for providing any type or form of crypto operations as well as managing digital keys e.g. storing and or backing up keys securely accelerating crypto processes and providing protection for keys e.g. authentication for accessing keys . In some embodiments a HSM is a physical device e.g. a plug in card or an external TCP IP security device that can be attached directly to an appliance e.g. intermediary a server or computing device . A HSM may be designed built and or configured for providing physical security of one or more keys. The HSM may provide logical and or physical protection of keys and or other sensitive data. The HSM may provide security e.g. strong authentication for accessing cryptographic keys. In some embodiments a HSM is used to secure store and or manage one or more high value keys. In certain embodiments a HSM may be preferred over some other systems e.g. a software solution for securing storing and or managing one or more keys.

The HSM may include any module script program agent component or set of executable instructions executing on hardware portions of the HSM and or a host intermediary . The HSM may have components operating at one or more layers of the network stack such as the transport layer. In some embodiments the HSM may include one or more ciphers or incorporate features of ciphers. In some of these embodiments the HMS may identify ciphers e.g. from a pool of ciphers to use and or execute cipher algorithms. In other embodiments a HSM may be a hardware alternative or complement to ciphers and or other types of cryptographic programs. A HSM may be used to accelerate data transfer e.g. encrypted data between two network nodes.

As described in connection with one or more secure connections e.g. SSL connections may be established between the endpoints in any order and triggered by any type of event. In some embodiments a server side and or client side secure connection may be established prior to establishment of a secure connection between the client side intermediary and the server side intermediary . In other embodiments a secure connection e.g. SSL connection between the client side intermediary and the server side intermediary is established prior to establishment of the server side and or client side secure connection s . One or more of these secure connections may be established using any of the methods and systems described in connection with . In some embodiments where one or more intermediaries provide secure proxy channels via SSL the proxy type may be implemented as split proxy or spoofing proxy. The proxy type may be determined and or negotiated during a SSL Proxy handshake. The proxy type may be determined and or negotiated from configuration information available in one or both of the client side and server side intermediaries . The configuration information may include any portion and or variant of the information described above in connection with .

In some embodiments the server side intermediary includes a proxy configuration table having a list of configuration names. Each entry in the proxy configuration table may include one or more of a configuration name e.g. identifying a Primary Key PK an IP address Port tuple a virtual server name which may be used when a server name indication is sent by a client in a Client Hello Message a proxy type e.g. split spoofing or mixed and other client side and server side configuration details e.g. including one or more of a private key name referenced from a Private Key Store Table server certificates Certificate Authority CA information a Certificate Chain RSA DSA Formats SSL Protocol Version and a Cipher List which may be based on the proxy type. For spoofing proxy configuration information which references an SSL key store table may be transmitted to the client side intermediary . For split proxy configuration information including server certificate certificate chain and other data configured in the proxy configuration table may be transmitted to the client side intermediary . The configuration information may also include Open SSL options x509 certificates and certificate verification options. Other configuration information or parameters that can be used for configuring SSL proxies include 

In some embodiments the client side and or server side intermediaries use the configuration information to initiate SSL proxy setup. In some of these embodiments the server side intermediary is configured with determines or otherwise provides the configuration information . The server side intermediary may provide the configuration information to the client side intermediary for initiating client SSL proxy setup. The server side intermediary may provide the configuration information via any means and in response to various events such as via means and or events described above in connection with .

Referring now to a flow diagram depicts embodiments of steps taken in a method for proxying SSL communications across intermediaries . The method includes initiating by a client a handshake process to establish communications with a server via a client side intermediary and a server side intermediary . The server side intermediary establishes a server side Secure Socket Layer SSL session with the server . The client side intermediary in communication with one or more clients establishes a client side SSL session with a client using SSL configuration information received from the server side intermediary . The client side intermediary and the server side intermediary communicates via a third SSL session. The server side intermediary decrypts encrypted data received from the server using a session key of the client side SSL session . The server side intermediary transmits to the client side intermediary via the third SSL session the data encrypted using a session key of the third SSL session . The client side intermediary decrypts the data encrypted via the third SSL session using the session key of the third SSL session . The client side intermediary transmits to the client the data encrypted using a session key of the server side SSL session .

Referring now to and in greater detail the method includes initiating by a client a handshake process to establish communications with a server via a client side intermediary and a server side intermediary . In some embodiments the client server one of the intermediaries or any other network node may initiate a handshake process to establish communications between the server and the client . The handshake process may be initiated by particular events for example via auto discovery of the client server pair or the intermediaries according to a peer list . The handshake process may be initiated via various events described above in connection with . In some embodiments a transmission control protocol TCP handshake or other type of communications protocol handshake is initiated. Any type or form of security handshake such as for setting up an encrypted signaling or data transfer connection may be initiated. In certain embodiments SSL Proxy handshake is initiated e.g. upon establishment of a transport layer or TCP connection.

The system may establish one or more connections across the client server and intermediaries . One or more handshake processes may establish one or more connections across the client server and intermediaries . The handshake processes may occur concurrently or sequentially in establishing some or all of the connections between the client server and or intermediaries . The handshake processes may occur independently or in a coordinated fashion in establishing some or all of the connections between the client server and or intermediaries . The established connections may include secure partially secure and or non secure connections. One or more of the handshake processes may be associated with establishing a particular connection between the client server and or intermediaries . The established connections may include transport layer connections and or connections at other protocol layers. The established connections may include encrypted connections. In some embodiments the established connections may include one or more SSL connections. The handshake processes may also determine whether data acceleration data caching compression and or other data transfer operations will be supported by one or more of the established connections.

In certain embodiments the handshake processes includes a TCP handshake process to establish one or more TCP or transport layer connections across the client server and or intermediaries . The TCP handshake process may establish a single or multiple TCP connections between the endpoints e.g. client and server . In some embodiments a TCP handshake is initiated as follows One of the intermediaries may detect or receive an incoming SSL connection or connection request. In certain embodiments the client sends a SYN message destined for the server which is received by the client side intermediary . The SYN message may represent an incoming SSL connection or connection request. The client side intermediary may determine or classify the incoming connection as a SSL connection. The client side intermediary may modify the SYN message e.g. add one or more options to the SYN message to indicate one or more of the client side intermediary s own signaling IP SSL Support and an indication to initiate SSL acceleration. Upon modifying the SYN message the client side intermediary may transmit the SYN message to the sever side intermediary . The server side intermediary may processes the options e.g. stripping off the options before sending the processed SYN message to the server.

The server may respond to the processed SYN message for example using a SYN ACK message. The server side intermediary may receive the SYN ACK message. The server side intermediary may check if a signaling tunnel to the client side intermediary exists. If no signaling tunnel exists the server side intermediary may send the SYN ACK to the client via the client side intermediary without having SSL options attached e.g. to indicate that SSL acceleration will not be performed when the SSL connection is established. In some embodiments flow control acceleration is applied but not data acceleration. The server side intermediary may also attempt to establish a signaling tunnel with the client side intermediary using the signaling IP received in the SYN message. The client may acknowledge the server with an ACK message via the client side intermediary and server side intermediary completing the establishment of the TCP connection.

In some embodiments the server side intermediary determines that a signaling tunnel is already established. The server side intermediary may append a SSL support TCP option to the SYN ACK message destined for the client . The server side intermediary may also select a SSL State Machine pair from a SSL State Machine pool and add the corresponding SSL State Machine pair identifier as a TCP option in the SYN ACK message. In some embodiments the server side intermediary appends a hash based message authentication code HMAC of the identifier to protect against tampering. The client may acknowledge the SYN ACK message by responding with an ACK message to the server via the client side intermediary and server side intermediary establishing the TCP connection. Using a cipher and or key pre negotiated over the signaling tunnel data transferred between the two intermediaries is encrypted by the selected SSL State Machine pair.

The signaling tunnel may be established using any embodiment of the methods and systems described above in connection with . The intermediaries may establish the signaling tunnel as any type or form of connection secure or otherwise such as a SSL connection. In some embodiments the intermediaries may establish a SSL connection over or in addition to the signaling tunnel. The intermediaries may establish this SSL connection using any embodiment of the methods and systems described above in connection with . For example a client side intermediary and or a server side intermediary may identify the SSL session from a pool of pre established SSL sessions or SSL state machines maintained by each of the client side intermediary and the server side intermediary

In some embodiments a SSL proxy handshake is initiated for example following the TCP handshake. A SSL proxy handshake may be initiated by any of the client server and or intermediaries responsive to completion or initiation of the TCP handshake. A SSL proxy handshake may initiated responsive to establishment of a TCP connection between client server and or intermediaries . The SSL handshake process may be initiated to determine the type of proxy to be established i.e. Split or Spoofing. For example as described above in connection with configuration information for determining the type of proxy may be retrieved negotiated determined and or provided by one or both intermediaries .

In some embodiments as part of the SSL proxy handshake and or determination of the configuration information the client sends a Client Hello message to the client side intermediary . The Client Hello message may have an optional Server Name Indication field. The client side intermediary may receive and locally buffer the Client Hello message. The client side intermediary may prepend a Proxy Hello message to the Client Hello message and send it to the server side intermediary . In some embodiments the server side intermediary may be setup or configured to receive only a Proxy Hello message. For example and in one embodiment if the server side intermediary receives a message other than a Proxy Hello message the server side intermediary may reset or disestablish the TCP connection established earlier. The server side intermediary may parse the Proxy Hello message. The server side intermediary may check the IP Address Port tuple and the corresponding proxy configuration names. The server side intermediary may further look up the proxy type for each of these configurations in the SSL Proxy Configuration Table of the SSI.

If the server side intermediary determines from the SSL Proxy Configuration Table for example that the proxy type for all of the configurations is Spoofing Proxy the server side intermediary may forward the Client Hello message to the server. If the server side intermediary determines from the SSL Proxy Configuration Table for example that the proxy type for all of the matching configurations is Spoofing Proxy the server side intermediary may forward the Client Hello message to the server. The server side intermediary may send a Proxy Hello Message to the client. The server side intermediary may send client side Configuration data i.e. configuration information to the client for client proxy setup. If the server side intermediary determines e.g. from the SSL Proxy Configuration Table that the proxy type for all the configurations or matching configurations is Split Proxy the server side intermediary may forward the Client Hello message to the server. The server side intermediary may send a Proxy Hello Message to the client . The server side intermediary may send client side Configuration data i.e. configuration information to the client for client proxy setup.

In some embodiments the server side intermediary may determine that the configurations for the IP port tuple have mixed proxy types i.e. some are configured as Split and some as Spoofing. The server side intermediary may identify the proxy type for the communications based on the server name in the optional Server Name Indication field in the Client Hello message. The server side intermediary may proceed to parse the Client Hello message with the optional Server Name Indication field. If a Server Name Indication field was not received in the Client Hello message the server side intermediary may select a first matching configuration in the list of configuration names referenced from the proxy configuration table. If a Server Name Indication field is included in the Client Hello message the server side intermediary may match the server name with a virtual server name identified in the proxy configuration table. If the virtual server name matches the server side intermediary may select the corresponding proxy configuration. If the server name in the Client Hello message does not match any of the virtual server name in the proxy configurations corresponding to the IP Address Port tuple then the server side intermediary may select the first configuration in the list.

If the Proxy Type for the selected SSL proxy configuration is Spoofing the server side intermediary may forward the buffered Client Hello Message to the server. If the Proxy Type for the selected SSL proxy configuration is Split the server side intermediary may send a new Client Hello message to the server . The server side intermediary may also send a Proxy Hello Message to the client as well as client side configuration data i.e. configuration information for client proxy setup.

In further details of the server side intermediary establishes a server side SSL session with the server. The server side intermediary may establish the server side SSL session by initiating a SSL handshake with the server . In some embodiments the SSL handshake is initiated responsive to completion of the SSL Proxy handshake. In some embodiments the SSL handshake is initiated responsive to determining the proxy type. The SSL handshake may be initiated prior to determining the proxy type and the SSL connection established after determining the proxy type. In some embodiments the SSL handshake may be initiated after determining the proxy type. The SSL handshake and or establishment of the SSL session on the server side may include server proxy setup according to the determined proxy type. In certain embodiments server proxy setup is a separate step or process initiated by the server side intermediary with respect to the SSL handshake and or SSL session establishment.

In some embodiments the SSL handshake may be initiated prior to determining the proxy type. The SSL handshake and or SSL session establishment on the server side may be initiated and or proceed via any embodiment of the methods and systems described above in connection with and C. For example and in one embodiment the client side intermediary may transmit to the server side intermediary a request from the client to establish a transport layer connection with the server . The client side intermediary may modify the request to indicate to the server side intermediary to perform Secure Socket Layer SSL establishment and or acceleration. Responsive to receiving the modified request the server side intermediary may initiate a SSL handshake and or SSL session establishment on the server side. The initiation of the SSL handshake proxy setup and or establishment of the SSL session may be performed by one or more components of an intermediary e.g. packet processing engine client e.g. client agent and or server e.g. application delivery system as described above in connection with A and A D.

The server side intermediary may initiate SSL proxy setup of the server responsive to determining the proxy type. The server side intermediary may initiate SSL proxy setup of the server independent of or asynchronously with respect to the SSL proxy setup of the client . In some embodiments the server side intermediary may initiate SSL proxy setup of the server in a coordinated fashion with respect to the SSL proxy setup of the client . The server side intermediary may initiate SSL proxy setup of the server responsive to retrieving identifying negotiating or determining the proxy type. The server side intermediary may initiate SSL proxy setup of the server responsive to an indication e.g. according to a matching operation against configurations from the proxy configuration table. The server side intermediary may initiate SSL proxy setup of the server according to the proxy type i.e. split or spoofing . The server side intermediary may establish a SSL session or connection on the server side if the proxy type is identified as split proxy. The server side intermediary may establish a shared SSL session or connection with the client side if the proxy type is identified as spoofing proxy. The server side intermediary and or the client side intermediary may establish a single SSL session or connection between the client and the server if the proxy type is identified as spoofing proxy. A SSL session may include or represent one or more SSL connections.

The SSL handshake session establishment and or proxy setup process es may include exchange and or validation of certificate and crypto e.g. keys and ciphers information. Various embodiments of these operations are described in connection with the illustrative processes depicted in E and F. For example cipher specification may be changed or updated between the server side intermediary and the server .

The SSL session or connection on the server side may exist independently of any client side sessions or connection. The server side intermediary may establish a SSL session on the server side associated with a different set of encryption key s and or cipher s with respect to the client side SSL session. The server side intermediary may negotiate and or share a set of encryption key s and or cipher s with the server for use within the server side SSL session for example as described in connection with . In some embodiments the server side intermediary may share the set of encryption key s and or cipher s with another SSL session e.g. the SSL session between the intermediaries . The server side intermediary may share the set of encryption key s and or cipher s with another SSL session responsive to a modification of the split proxy setup e.g. via administrator intervention. In some embodiments the server side intermediary may establish a SSL session on the server side incorporating one or more intermediaries . For example and in one embodiment the server side intermediary may establish a SSL session across the server and intermediaries as illustrated in associated with a single set of encryption key s and or cipher s .

In further details of the client side intermediary establishes a client side SSL session with the client using SSL configuration information received from the server side intermediary. The client side intermediary may be in communication with one or more clients. The client side intermediary and the server side intermediary may communicate via another e.g. third SSL session. The client side intermediary may initiate a SSL handshake and or establish a SSL session on the client side in accordance with the embodiments of server side methods described above in connection with adapted to the client side. In some embodiments the client side SSL handshake and or session establishment may occur in parallel with the server side SSL handshake and or session establishment. The client side SSL handshake and or session establishment may occur responsive to the server side SSL handshake and or session establishment. The client side SSL handshake and or session establishment may occur before or after the server side SSL handshake and or session establishment. In some embodiments the server side SSL handshake and or session establishment may occur earlier e.g. because the server side intermediary is aware of the SSL configuration e.g. proxy type before the client side intermediary

The server side intermediary may send or transmit configuration information to the CSI. In some embodiments the client side intermediary have limited or no access to configuration information for SSL proxy setup. The client side intermediary may require the server side intermediary to provide some or all of the configuration information . The client side intermediary may request the server side intermediary to provide some or all of the configuration information . The server side intermediary may send the configuration information responsive to a SSL Client Hello message from the client via the CSI. The server side intermediary may send the configuration information responsive to identifying negotiating and or determining the configuration information . The server side intermediary may send the configuration information to the client side intermediary via any way and using any protocol. For example the server side intermediary may send the configuration information via the established signaling tunnel and or the SSL session between the server side intermediary and the client side intermediary . The server side intermediary may send the configuration information via one or more packets for example via a Proxy Hello message as described in . For example and in one embodiment the server side intermediary transmits to the client side intermediary a message identifying SSL configuration for client side SSL proxying. In certain embodiments the server side intermediary may send an identifier of the configuration e.g. proxy type and or a command to the client side intermediary to locally retrieve configuration information .

By way of illustration and in some embodiments the SSL Proxy Handshake determines that a Split Proxy is to be setup. In response the server side intermediary may transmit to the client side intermediary a request to perform split SSL proxying. The server side intermediary may send a Split Proxy Indication in a Proxy Hello Message to the client side intermediary . The server side intermediary may also transmit in the Proxy Hello Message the SSL configuration information corresponding to server for configuring the client side intermediary to act as a split proxy. In some embodiments the intermediaries may exchange proxy instance identifiers in the Proxy Hello Message. These proxy instance identifiers may be unique to the intermediaries and can be used for communications over the signaling tunnel to identify a SSL connection e.g. the client side SSL session to which a signaling message e.g. Proxy Hello Message applies.

In some embodiments the server side intermediary may send a new Client Hello Message to the server . The client side intermediary may send a Server Hello a Server Certificate and or a Server Hello Done Message to the client using the configuration data received from the server side intermediary . In some embodiments responsive to the Server Hello Server Certificate and or Server Hello Done Message to the client SSL handshake between the client and client side intermediary may proceed. In some embodiments responsive to the Server Hello Server Certificate and or Server Hello Done Message to the client SSL handshake between the server side intermediary and the server may proceed. In various embodiments the SSL handshake between the client and client side intermediary and between server side intermediary and the server may proceed sequentially or in parallel. The SSL handshake between the client and client side intermediary and between server side intermediary and the server may proceed asynchronously or according to certain predefined events and or conditions.

In some embodiments the client side intermediary may transmit to the server side intermediary a request for a crypto op. For example such a request is depicted in . The client side intermediary may transmit the request encrypted using a shared encryption key e.g. negotiated between the server side intermediary and the client side intermediary . The shared key may be assigned to the SSL state machine pair handling communications between these intermediaries . The client side intermediary may transmit the request via the signaling tunnel and or the SSL session between the server side intermediary and the CSI. The cryto op may be of any type for example as described above in connection with . The server side intermediary may receive and identify the crypto op requested. The server side intermediary may perform the requested crypto op e.g. RSA sign on behalf of the client side intermediary . The server side intermediary may communicate to client side intermediary a response to the request.

In some embodiments some or all crypto services are available only on server side intermediary . The client side intermediary may transmit to the server side intermediary a request for a crypto op because crypto services are only available on the server side intermediary . The client side intermediary may send a request for any crypto operation such as computing the master secret. If the third SSL session is a newly established SSL session the client side intermediary may send a crypto op request to the server side intermediary as described above. The server side intermediary may respond with a Crypto Result Message. If the third SSL session is established via session reuse the client side intermediary may send an empty crypto op request message to the server side intermediary to indicate that the handshake process e.g. for establishing the third SSL session and or negotiating a master secret or encryption key is complete. In some embodiments the server side intermediary will not send a Crypto Result Message in response to the empty request.

In further details of the server side intermediary decrypts encrypted data received from the server using a session key of the client side SSL session. The server side intermediary and or the server may perform any type of crypto op associated with the session key of the client side SSL session. In embodiments using the split proxy setup this session key is independent of i.e. not shared with the server side SSL session. The server may encrypt or sign data for transmission directed to the server side intermediary using the session key of the server side SSL session. The server side intermediary may receive the encrypted data and use the session key of the server side SSL session to decrypt or validate the data. For data directed to the server the server side intermediary may encrypt or sign data for transmission directed to the server using the session key of the server side SSL session. The server may receive the encrypted data and use the session key of the server side SSL session to decrypt or validate the data.

In embodiments using the spoofing proxy setup a single SSL session may be established across the client and server and a session key shared for both client side and server side communications. The server may encrypt or sign data for transmission directed to the server side intermediary using the session key of the SSL session. The server side intermediary may receive the encrypted data and use the session key of the SSL session to decrypt or validate the data. For data directed to the server the server side intermediary may encrypt or sign data for transmission directed to the server using the session key of the SSL session. The server may receive the encrypted data and use the session key of the SSL session to decrypt or validate the data.

In some embodiments one or more operations may be negotiated between the intermediaries e.g. data acceleration data caching and or data compression. The one or more operations may be negotiated during TCP handshake or after establishment of the TCP and or SSL connections. These operations may be applied to the data packets in addition to the crypto op. For example and in one embodiment the server side intermediary may compress the received data after decryption. The server side intermediary may compress the received data using a compression history stored on the SSI. In some embodiments the server side intermediary may use a compression history to implement data caching transfers. For example instead of sending the data as compressed if the compression history includes the same data cached at both the server side intermediary and the client side intermediary the server side intermediary may transmit an identifier of this data for local retrieval at the client side intermediary . In certain embodiments compression histories may record how previously encountered data was compressed e.g. compression techniques which can be applied to repeat encounters of the same data.

In further details of the server side intermediary transmits to the client side intermediary via the third SSL session the data encrypted using a session key of the third SSL session. The third SSL session is identified as the SSL session established between the intermediaries and no temporal relationship is intended with respect to the client side and server side SSL sessions. The server side intermediary may encrypt the data after and or responsive to the decryption and or compression operations described above in connection with . The server side intermediary may encrypt the data prior to transmission to the client side intermediary . The server side intermediary may compress the encrypted data prior to transmission to the client side intermediary . The server side intermediary may encrypt the data using the session key of the third SSL session. The server side intermediary may encrypt the data using an encryption key negotiated between the intermediaries . The server side intermediary may encrypt the data using an encryption key assigned to the SSL state machine pair handling communications between the intermediaries . In embodiments using the spoofing proxy setup the encryption key may be different from the session key of the SSL session established across the client and server .

In further details of the client side intermediary decrypts the data encrypted via the third SSL session using the session key of the third SSL session. The client side intermediary may decrypt the data using the encryption key negotiated between the intermediaries . The client side intermediary may decrypt the data using encryption key assigned to the SSL state machine pair handling communications between the intermediaries . In addition to encryption decryption the intermediaries may perform other crypto ops e.g. sign and or validate a signature for example via their HSM and or ciphers on data exchanged between the intermediaries using the specified session or encryption key. In some embodiments other operations e.g. data acceleration data caching and or data compression operations may be performed. For example and in one embodiment the client side intermediary may decompress the received data using the compression history stored on the CSI.

In some embodiments where data caching is used the server side intermediary may encrypt a message containing an identifier of the data. The server side intermediary may encrypt the message using the session or encryption key of the third SSL session. Responsive to receiving the encrypted message the client side intermediary may decrypt the message using the session or encryption key of the third SSL session. The client side intermediary may retrieve the data from a local cache using the identifier conveyed by the message. In some embodiments data acceleration between the intermediaries may be implemented e.g. via a network optimization engine using the compression and or data caching techniques described above.

In further details of the client side intermediary transmits to the client the data encrypted using a session key of the server side SSL session. The client side intermediary may encrypt and transmit the data within the server side SSL session incorporating embodiments of the methods described in connection with adapted to the server side SSL session. For example the client side intermediary may encrypt the data received from the server side intermediary using the session key of the client side SSL session after decryption using the session encryption key of the third SSL session. The client side intermediary may encrypt the data prior to transmission to the client . In embodiments using the spoofing proxy setup the client side intermediary may encrypt the data using the session key of the SSL session established across the client and server .

Although generally describes data transmission from the server to the client the same methods and techniques may be applied to data transmission from the client to the server for example as illustrated in . Furthermore the specific operations described in are illustrative of the use of distinct session or encryption keys within each secure connection along a communication path and therefore other types of crypto ops may apply in certain embodiments. Also as discussed earlier the methods and systems described herein may be applied to any number of intermediaries intermediate sessions or connections as well as any setup comprising a combination of split and spoofing proxy.

It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. In addition the systems and methods described above may be provided as one or more computer readable programs or executable instructions embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk a hard disk a CD ROM a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs or executable instructions may be stored on or in one or more articles of manufacture as object code.

While the invention has been particularly shown and described with reference to specific embodiments it should be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention as defined by the following claims.

