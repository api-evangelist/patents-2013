---

title: Synchronizing conversation structures in web-based email systems
abstract: Web-based email systems are enabled to synchronize conversations and conversation properties. Conversations are enumerated to new clients providing folder-specific and global conversation information. After receiving the initial conversation information, clients maintain a conversation state, which is used in updating clients from a web service store through a conversation synchronization command employing an internal application programming interface within the email service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09413703&OS=09413703&RS=09413703
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09413703
owner_city: Redmond
owner_country: US
publication_date: 20130812
---
This Application is a continuation under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 213 320 filed on Aug. 19 2011. The disclosure of the U.S. Patent Application is hereby incorporated by reference in its entirety.

Email is a method of exchanging digital messages from an author to one or more recipients. Modern email operates across the Internet or other computer networks based on a store and forward model. Email servers accept forward deliver and store messages. Neither the users nor their computers need to be online simultaneously they need connect only briefly typically to an email server for as long as it takes to send or receive messages. Email messages can include textual graphical audio video and comparable content.

While other forms of networked communications are proliferating email is still the prominent one among business and personal users. In an organizational environment users may exchange emails with a variety of other users on a number of topics such as projects discussion topics themes etc. In typical email applications users mailboxes are commonly arranged in several folders. Some folders are built in others may be created by the users. Email client applications with limited storage traditionally synchronize emails stored in a subset of the folders and only some of the emails of those folders based on time received . However conversations which are groupings of emails identified by a common attribute e.g. subject thread topic participants etc. can be spread across different folders. For example some emails belonging to a conversation may be in the incoming mail folder others in sent mail folder yet others in user created folder s . Thus a traditional email client application may be able to keep up to date status information on conversations.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to exclusively identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to enabling synchronization of conversations and conversation properties in a web based email system. According to some embodiments conversations may be enumerated to new clients providing folder specific and global conversation information. After receiving the initial conversation information clients may maintain a conversation state which may be used in updating clients from a web service store through a conversation synchronization command.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory and do not restrict aspects as claimed.

As briefly described above folder specific and global conversation information may be synchronized with email client applications in a web based mail system employing a conversation state. In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrating specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a computing device those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and comparable computing devices. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer implemented process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program that comprises instructions for causing a computer or computing system to perform example process es . The computer readable storage medium is a non transitory computer readable memory device. The computer readable storage medium can for example be implemented via one or more of a volatile computer memory a non volatile memory a hard drive a flash drive a floppy disk or a compact disk and comparable media.

Throughout this specification the term platform may be a combination of software and hardware components for providing web based email services. Examples of platforms include but are not limited to a hosted service executed over a plurality of servers an application executed on a single computing device and comparable systems. The term server generally refers to a computing device executing one or more software programs typically in a networked environment. However a server may also be implemented as a virtual server software programs executed on one or more computing devices viewed as a server on the network. More detail on these technologies and example operations is provided below.

Referring to diagram illustrates an example networked system for synchronizing conversation structures in web based email according to some embodiments. Example components shown in diagram are for illustration purposes. Embodiments may be implemented in various local networked and similar computing environments employing a variety of computing devices and systems.

According to some embodiments a web service command as part of the web service facilitating email exchange allows a client e.g. to synchronize conversations which have at least one email within a specified folder and time window. The web service may report changes to conversations rather than emails and efficiently enumerate existing conversations such that new clients joining the service receive all conversation data. Folder specific and global information about each conversation such as number of read unread flagged responded emails in a specific folder or total may be reported. The web service may also return a synchronization state to the client allowing it to control the synchronization session. Web service and clients may communicate over one or more networks and email and conversation related data may be stored in one or more data stores as illustrated in diagram .

A web service according to embodiments may track changes to conversation objects in a server database and report the structure of any changed conversation to the client. This may include aggregated data like the subject recipients flags importance categories etc. The reported data may also include a list of emails e.g. identified by an itemId that are part of a conversation.

To efficiently populate the existing content of a folder when the client connects for the first time a query mechanism may be used where the last synchronized conversation is sought on each request. This approach maintains the synchronization state small and is an efficient operation for the server.

The example components in a system according to embodiments include web based email application communicating with web service for example Exchange by Microsoft Corp. of Redmond Wash. and synchronization service . Web service and synchronization service may interact with synchronization providers within an internal application programming interface API and through a messaging API MAPI with the Incremental Change Synchronization ICS of a data store storing emails conversations and relevant metadata.

An example for synchronization service is Exchange ActiveSync EAS by Microsoft Corp. of Redmond Wash. which is an XML based protocol that communicates over Hypertext Transport Protocol HTTP designed for the synchronization of email contacts calendar tasks and notes from a messaging server to a mobile device. The protocol may also provide mobile device management and policy controls. The synchronization service may provide a conversation view that puts email messages in a view connected by several attributes including a message ID and the email subject notes synchronizing the ability to look up the availability free busy status of a contact from their calendar a nickname cache in which the names of common used contacts are shared the ability to set a server side rule to move messages in a conversation etc.

The web service and the web based email application may communicate with the data store through the internal API with the MAPI acting as middle tier. MAPI is a messaging architecture and a Component Object Model COM based API that allows client programs to become e mail messaging enabled aware or based by calling MAPI subsystem routines that interface with certain messaging servers. MAPI allows complete control over the messaging system on the client computer creation and management of messages management of the client mailbox service providers and so on. MAPI includes facilities to access message transports message stores and directories. ICS is part of the web service that allows MAPI clients to enumerate changes that have occurred in a given folder. ICS may be envisioned as a change tracking module.

In an example scenario the web based email application may send a conversation synchronization request to web service . In response the web service may call ICS on a conversation view of a folder and determine the list of conversations that have changed. For each received conversation ID the client may send a GetConversationItems request with the conversation state blob for that conversation. The web service may read the item list from the conversation view of a folder compare with the data in the conversation state and return the item properties and bodies that have changed. A more detailed process is explained below.

The web based email application may start a synchronization session by sending a synchronize conversation request. The request may include a list of folder IDs to synchronize e.g. in priority order a time window to synchronize a number of changes to return and or a mega synchronization state blob empty on first synchronization . The response may include an updated mega synchronization state blob a flag indicating if there are more changes the changed or added conversations that participate in at least one of the folders requested and the deleted conversations. The data per conversation may include a conversation ID the message identifier MID of the conversation object to correlate deletes the aggregate statistics for some of the folders and or the aggregate global statistics. Each of the deleted conversations may include the MID of the conversation object and a folder ID that the message is being deleted from.

Upon receiving the response the web based email application may iterate through the added changed conversations iterate through the deleted conversations and Delete conversations for which the last received time is past the time window desired. The iteration through the added changed conversations may include finding the conversation in the local database using the conversation ID if not found it may create a new conversation updating the global statistics updating the folder statistics for those folders with statistics available removing any folder statistics for folders that are not within the folder IDs FIDs and adding conversation ID to list of conversations to get . Iteration through the deleted conversations may include finding the conversation in the local database using the MID if not found skipping to next deleted conversation removing any folder statistics for the folder this deleted conversation was in and adding conversation ID to list of conversations to get .

For each conversation ID accumulated during synchronization session the web based email application may send GetConversationItems requests with the following arguments 1 a conversation ID 2 a CState conversation state received in the last GetConversationItems for this conversation and 3 the item IDs change key read flag change key for each message in the conversation. If the response is conversation not found the web based email application may delete the conversation from its database. If the conversation is found the response may include the message properties for the items that have changed the body parts of messages affected by the changes the new CState for this conversation and the item IDs change key read flag change key for each message in the conversation. The web based email application may store the response in the conversation. If any item ID is in the request and is not in the response that message may be deleted.

The web service may receive a conversation synchronization request with the arguments the list of folder IDs to synchronize a time window to synchronize a number of changes to return and or a mega synchronization state blob empty on first sync . The response may include an updated synchronization state blob a flag indicating if there are more changes the changed or added conversations that participate in at least one of the folders requested and or the deleted conversations. The data per conversation may include the conversation ID the MID of the conversation object to correlate deletes the aggregate statistics for some of the folders and or the aggregate global statistics. The deleted conversations may include the MID of the conversation object the folder ID of the folder the conversation is being deleted from.

1 Split the mega synchronization state blob into the synchronization state for each folder to synchronize

The web service may receive a GetConversationItems request with arguments 1 the conversation ID 2 the CState received in the last GetConversationItems for this conversation 3 the item IDs change key read flag change key for each message in the conversation. If the response is conversation not found the web based email application may delete the conversation from its database. If the conversation is found the response may include the message properties for the items that have changed the body parts of messages affected by the changes the new CState for this conversation and the item IDs change key read flag change key for each message in the conversation.

The web service may call ICS with the arguments 1 the previous synchronization state 2 the folder ID 3 a new flag that indicates conversation mode 4 the new to old flag and 5 the list of extra properties to return for adds and changes. The ICS may return the conversations added changed the conversations soft deleted no longer in the folder being synchronized and the new synchronization state. The conversations added changed may include a conversation ID a MID of the conversation object used to correlate future deletes the folder specific conversation statistics and the global conversation statistics. The soft deleted conversations may also include the MID of the conversation object. The ICS mode may enumerate changes to any conversation object with at least one message in that folder. Since the web service may be performing an ICS enumeration for each folder requested by the client a synchronization state per folder may be stored in data store .

As mentioned above the ICS mode may enumerate changes to any conversation object with at least one message in a folder. For folders e.g. being synchronized a conversation view index sorted by change number CN may be maintained. In some embodiments the data store may maintain several of these indexes per folder. The status of messages may be maintained in a conversation view of a folder where the messages are recorded along with their conversation attributes. Conversation information may be stored in a conversation folder . As discussed above MIDs and FIDs may be used by the system at various stages of synchronization.

Since the web service may be performing an ICS enumeration for each folder requested by the client a synchronization state may be stored per folder. If the size of the synchronization state is too big data may be removed by using a Delete History Table . As a message is deleted it may be appended to Delete History Table with a new CN. At synchronization time any entry in the Delete History Table that has not been processed may be included in the deleted set of the response.

In an example scenario web based email application may start the process with a conversation synchronization request upon which the web service may read on the conversation view of a folder through ICS . ICS may return synchronization operations to web service which may provide conversation IDs to web based email application . In response web based email application may send a GetConversationItems request with previous state to web service . Web service may submit a query on the conversation view of a folder based on the conversation IDs received from the web based email application to store through ICS .

In response to the query web service may receive a list of items and change keys from the store and query the items . The store may return item props and body differentials to the web service which may send item props body differentials and the new state to the web based email application . A system according to embodiments may also employ fewer or additional interactions to synchronize conversations among clients.

The example embodiments in are shown with specific components and configurations. Embodiments are not limited to systems according to these example configurations. Synchronizing email conversation structures in web based systems may be implemented in configurations employing fewer or additional components in business applications. Furthermore the example architectures systems and components shown in and their attributes may be implemented in a similar manner with other components using the principles described herein.

As discussed above a web based email service may enable client applications on client devices and similar devices exchange emails while synchronizing conversations across the client applications even if synchronization is restricted to a subset of folders. The server s may retrieve or store relevant data from to data store s directly or through database server .

Network s may comprise any topology of servers clients Internet service providers and communication media. A system according to embodiments may have a static or dynamic topology. Network s may include secure networks such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s may also coordinate communication over other networks such as Public Switched Telephone Network PSTN or cellular networks. Furthermore network s may include short range wireless networks such as Bluetooth or similar ones. Network s provide communication between the nodes described herein. By way of example and not limitation network s may include wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources and data distribution systems may be employed to implement a web based email service with conversation synchronization. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Web service may provide among other services email services facilitating exchange of emails among client applications. Web service may include one or more applications for providing the web based services such as web based email application . Web based email application may enable synchronization of conversations within the email system by employing a conversation state at each client and a web service command for conversation synchronization. This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer readable storage media is a non transitory computer readable memory device. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer readable storage media may be part of computing device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device and comparable input devices. Output device s such as a display speakers printer and other types of output devices may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other devices such as over a wireless network in a distributed computing environment a satellite link a cellular link and comparable mechanisms. Other devices may include computer device s that execute communication applications storage servers and comparable devices. Communication connection s is one example of communication media. Communication media can include therein computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Example embodiments also include methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be co located with each other but each can be only with a machine that performs a portion of the program.

Process may begin with operation where conversations may be enumerated. New clients or clients joining the service after a prolonged absence may be provided all conversation information such as emails and attributes associated with the conversation s . At operation conversation details and state may be provided to a client. Conversations may be identified by a conversation identifier a name or similar suitable attribute.

At operation a conversation state may be received from a client. The web based email service may determine conversation details to be provided to the client based on the conversation state of the client and provide those to the client at operation . The service may at the same time update the state of the client or the client may update its state locally.

Some embodiments may be implemented in a computing device that includes a communication module a memory and a processor where the processor executes a method as described above or comparable ones in conjunction with instructions stored in the memory. Other embodiments may be implemented as a computer readable storage medium with instructions stored thereon for executing a method as described above or similar ones.

The operations included in process are for illustration purposes. A web based email service with conversation synchronization may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

