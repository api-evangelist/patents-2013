---

title: Resource processing using an intermediary for context-based customization of interaction deliverables
abstract: A software application includes work order resources, each of which defines an atomic operation for the software application, and a construction service resource, which processes the work order resources in response to all interaction requests for the software application. Each interaction request is received from a client and identifies a corresponding work order, which the construction service processes to dynamically construct a set of deliverables, which can include a custom representation of the work order. While processing the interaction request, the construction service, as directed by the work order, can make one or more requests to context resources for context information corresponding to an activity for which the interaction was requested to construct the set of deliverables. The work order resource can comprise a reflective program that enables the construction service to dynamically determine and construct the set of deliverables, including the next appropriate interaction(s) using the context information, thereby directing a set of atomic operations as part of an activity being performed and enabling the dynamic context-based construction of interaction deliverables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09182977&OS=09182977&RS=09182977
owner: EnterpriseWeb LLC
number: 09182977
owner_city: Glens Falls
owner_country: US
publication_date: 20130909
---
The current application is a continuation of U.S. Nonprovisional patent application Ser. No. 12 698 361 which will issue as U.S. Pat. No. 8 533 675 on 10 Sep. 2013 and which claims the benefit of U.S. Provisional Application No. 61 149 179 titled Dynamic Context Based System Interaction Construction filed on 2 Feb. 2009 each of which is hereby incorporated by reference.

The disclosure relates generally to system interactions and more particularly to a solution for resource processing using an intermediary for context based customization of interaction deliverables.

Organized software development generally follows well defined styles that provide recognizable and repeatable structures much like other disciplines e.g. civil engineering culinary arts graphic design etc. . Structure enables the consistent implementation of constraints to achieve specific desired properties. Three leading software architectural styles are Object Oriented Development Service Oriented Architecture and Representational State Transfer.

In the Object Oriented Development OOD style an object is a set of dependent data and functions. Each encapsulated object is an artifact that has a custom interface providing for its manipulation. Objects can be loosely coupled but are not individually addressable by a remote system without extension e.g. common object request broker architecture CORBA . In the context of an application object bindings are often prescribed as fixed components of the system. The use of any interaction context to customize system responses is left to the software developer in defining an object. Overall the OOD style supports rich software applications but the tight coupling within and often between objects limits the practical range of result customization.

In the Service Oriented Architecture SOA style a service is a set of dependent data and functions. Each encapsulated service is a black box artifact that has a custom interface defining the fixed range of its manipulation. Services are loosely coupled and can be individually addressable components in a distributed system. In the context of an application the SOA style requires a meta application layer for messaging translation and binding. This layer is typically supported by discrete middleware components e.g. enterprise service bus ESB business process execution language BPEL business process management BPM etc. . The use of any interaction context to customize system responses is left to the software developer in defining a service interface. Overall the SOA style supports rich software applications but the tight coupling within services and the black box nature of services intrinsically limits the practical range of result customization.

In the Representational State Transfer REST style a resource is any discrete element of information e.g. document database record temporal service etc. independent of any pre determined function that can be referenced with a unique address e.g. Uniform Resource Indicator URI . Each resource is a standalone artifact that has a standard interface e.g. the Uniform Interface providing for its manipulation however manipulation is done through representations which isolate a resource from direct interaction. Resources are loosely coupled and addressable components in a distributed system. In the context of an application every resource is a potential state addressable by a client therefore each client request results in a representation and a new application state. The use of any interaction context to customize system responses is constrained to in band context provided with the client request the software developer is prohibited from using any out of band context that may reside on the server. Overall the REST style supports rich software applications but the absence of pre determined functions and the inability to use server side context results in a client driven application that intrinsically limits the practical range of result customization.

Aspects of the invention provide a software application which includes work order resources each of which defines an atomic operation for the software application and a construction service resource which processes the work order resources in response to all interaction requests for the software application. Each interaction request is received from a client and identifies a corresponding work order which the construction service processes to dynamically construct a set of deliverables which can include a custom representation of the work order. While processing the interaction request the construction service as directed by the work order can make one or more requests to context resources for context information corresponding to an activity for which the interaction was requested to construct the set of deliverables. The work order resource can comprise a reflective program that enables the construction service to dynamically determine and construct the set of deliverables including the next appropriate interaction s using the context information thereby directing a set of atomic operations as part of an activity being performed and enabling the dynamic context based construction of interaction deliverables.

A first aspect of the invention provides a software application comprising program code embodied in at least one computer readable medium the software application comprising a plurality of work order resources wherein each work order resource defines an atomic operation for the software application and has a corresponding unique work order resource identifier a construction service resource configured to process all interaction requests for the software application wherein each interaction request includes a work order resource identifier and wherein each interaction request is made as part of an activity being performed using the software application wherein the construction service resource is configured to process each interaction request by processing a representation of a work order resource corresponding to the work order resource identifier in the interaction request wherein the processing includes constructing a set of deliverables as directed by the representation of the work order resource and context information for an activity corresponding to the requested interaction and providing the set of deliverables in response to the interaction request.

A second aspect of the invention provides a computer implemented method of processing interactions for a software application the method comprising receiving a work order resource identifier corresponding to an interaction request at a representation of a construction service resource of the software application executing on a computer system wherein the representation of the construction service resource processes the interaction request by obtaining a representation of a work order resource corresponding to the work order resource identifier in response to the receiving processing the representation of the work order resource wherein the processing includes constructing a set of deliverables as directed by the representation of the work order resource and context information for an activity corresponding to the requested interaction and providing the set of deliverables in response to the interaction request.

A third aspect of the invention provides a computer system including a processing component and a storage component wherein the storage component includes at least one computer readable medium comprising a software application including a plurality of work order resources wherein each work order resource defines an atomic operation for the software application and has a corresponding unique work order resource identifier and a construction service resource configured to process all interaction requests for the software application wherein each interaction request includes a work order resource identifier and wherein each interaction request is made as part of an activity being performed using the software application wherein the construction service resource is configured to process each interaction request by processing a representation of a work order resource corresponding to the work order resource identifier in the interaction request wherein the processing includes constructing a set of deliverables as directed by the representation of the work order resource and context information for an activity corresponding to the requested interaction and providing the set of deliverables in response to the interaction request.

A fourth aspect of the invention provides a method of performing an activity the method comprising providing a request for an atomic operation of the activity for processing by a system controller the request including an identifier of a work order resource defining the atomic operation wherein the system controller is configured to provide the identifier of the work order resource to a construction service for processing and receiving a custom representation of the work order in response to the request from the construction service.

Other aspects of the invention provide methods systems program products and methods of using and generating each which include and or implement some or all of the actions described herein. The illustrative aspects of the invention are designed to solve one or more of the problems herein described and or one or more other problems not discussed.

It is noted that the drawings may not be to scale. The drawings are intended to depict only typical aspects of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements between the drawings.

As indicated above aspects of the invention provide a software application which includes work order resources each of which defines an atomic operation for the software application and a construction service resource which processes the work order resources in response to all interaction requests for the software application. Each interaction request is received from a client and identifies a corresponding work order which the construction service processes to dynamically construct a set of deliverables which can include a custom representation of the work order. While processing the interaction request the construction service as directed by the work order can make one or more requests to context resources for context information corresponding to an activity for which the interaction was requested to construct the set of deliverables. The work order resource can comprise a reflective program that enables the construction service to dynamically determine and construct the set of deliverables including the next appropriate interaction s using the context information thereby directing a set of atomic operations as part of an activity being performed and enabling the dynamic context based construction of interaction deliverables. As used herein unless otherwise noted the term set means one or more i.e. at least one and the phrase any solution means any now known or later developed solution.

An embodiment provides a software development framework for developing software applications in which a process flow for performing an activity can be dynamically determined throughout the lifecycle of the activity based on a current context of the activity at a conclusion of each atomic operation. The atomic operation of the framework is an individual system interaction that is performed by calling a single resource e.g. a work order resource. The framework provides an intermediary between a client requesting an atomic operation and the resource configured to perform the atomic operation. The intermediary provides a mechanism for directing the client to the next valid interactions for continuing to perform the activity based on use of context information in support of the activity.

As used herein it is understood that the term activity means a set of atomic operations to accomplish a goal e.g. form a complete business technical process . The goal is set when the activity is initiated but the specific atomic operation s that accomplish the goal can vary based on the context information corresponding to each instance of an activity to which the software application is directed. A group of related atomic operations e.g. a compound operation is referred to herein as a task e.g. a process fragment . A task is a discrete fragment of an activity that fulfills a defined objective in furtherance of the goal e.g. complete a form review a form submit a form modify a form and or the like . Similar to an activity the objective of the task is set when the activity is initiated but the specific atomic operation s that accomplish the goal can vary based on the context information corresponding to the activity. It is understood that some atomic operations and or tasks can be performed as standalone operations e.g. report generation basic navigation apart from a larger task or activity. In this case the atomic operation is a task and activity in itself or the task is an activity in itself.

The software development framework described herein enables the development of a software application that supports rich processes where client inputs e.g. in band request metadata can be included as part of the context information along with useful context information from relevant server side resources e.g. out of band metadata to drive the activity forward. To this extent the software application can leverage an ever growing pool of context information to guide a client to the appropriate next steps based on the particular circumstances at any given point to accomplish the goal.

In the style described herein the primary artifact a resource can comprise any discrete element of information independent of any pre determined function that can be referenced with a unique address. Each resource can be a standalone artifact that has a standard interface providing for its manipulation however manipulation is done through representations of the resource which isolate a resource from direct interaction. Resources are loosely coupled and addressable components in a distributed system.

As used herein it is understood that the term resource includes any discrete element that is addressable e.g. using a unique address such as a URI and which can facilitate the performance of a set of activities for which a software application is configured to implement. For example a resource can comprise a program artifact including program code that can be executed by a computer system e.g. directly or after translation by an interpreter . Furthermore a resource can comprise a data artifact e.g. document data file database database record and or the like which stores context information relating to activity ies being performed by the software application client s that use the software application and or the like. Additionally a resource can comprise a computing resource such as a SOA component an external system a temporal service and or the like. Each resource can be a standalone artifact that has a standard interface e.g. the uniform interface providing for its manipulation. However manipulation can be done through representations of the resource which isolate the resource from direct interaction.

In an embodiment of an application every client request calls a system controller and passes a unique address in the request metadata for a coarse grained reflective program resource which the system controller refines with in band and out of band context to provide a custom set of deliverables which can include a custom representation of the program. The use of any interaction context to customize system responses is left to the developer who can specify relative variables that will be refined by interaction specific context in the construction of custom sets of deliverables. Overall applications developed using the style described herein can support dynamic interaction with mass customization and maximum resource re use.

An embodiment provides a software development framework as described herein which can be implemented in any of the leading software architectural styles OOD SOA or REST. A distinguishing aspect of these architectural styles relative to such an implementation is the nature of their primary artifact objects services and resources respectively. In particular while each of the styles can support rich software applications their primary artifact sets the threshold for each style s granularity which in large part determines its latent capacity for customization. In an embodiment of the invention an implementation includes an intermediary component that processes a reflective work order making repeated requests as directed by the work order for other context information to refine a work order and construct a custom set of deliverables. In a more specific embodiment of the invention implementation uses resources for context information as using objects or services could result in an impractical number of fine grained artifacts with little re usability particularly as activities grow in breadth and complexity.

An illustrative implementation of the invention in the OOD style uses a remote object to act as the intermediary component to process a reflective work order making repeated requests as directed by the work order for other context information to refine a work order and construct a custom set of deliverables. An illustrative implementation of the invention in the SOA style uses a service to act as the intermediary component to process a reflective work order making repeated requests as directed by the work order for other context information to refine a work order and construct a custom set of deliverables. An illustrative implementation of the invention in the REST style uses a RESTful service to act as the intermediary component to process a reflective work order making repeated requests as directed by the work order for other context information to refine a work order and construct a custom set of deliverables. However each implementation can use resources which are native for the REST style for context information as using objects OOD or services SOA could result in an impractical number of fine grained artifacts with little re usability particularly as activities grow in breadth and complexity.

As discussed herein the software development framework includes an intermediary and resources for performing atomic operations. shows an illustrative high level data flow diagram for performing an atomic operation using a software application according to an embodiment. Software application includes an intermediary component and a set of resources . The set of resources includes a subset of resources A each of which is configured to enable intermediary component to perform an atomic operation and a subset of resources B that are used by intermediary component while performing the atomic operation. To this extent resources A are only indirectly referenced by clients and resources B are not explicitly referenced by clients .

As illustrated a client generates a request to perform an atomic operation and sends the request for processing by the intermediary component . The request includes an identifier indicating the resource A required to perform the atomic operation e.g. a work order resource described herein. In performing the atomic operation the intermediary component requests a representation of the identified resource A and processes the representation of the identified resource A.

When processing the identified resource A intermediary component can make one or more requests to other resources B of the software application and receive a representation of the requested resource B in response to each request. Once processing of the identified resource A is complete the intermediary component constructs e.g. performs provides and or the like all deliverables prescribed as a result of processing the identified resource A which can include providing a custom representation of the identified resource A for processing by the client . Client can perform an activity using software application by requesting a series of atomic operations each of which is performed by software application which provides a corresponding custom representation at the end of performing the activity. To this extent each custom representation can include a set of identifiers each of which corresponds to a resource A configured to implement the next valid atomic operation for the activity.

Resources are loosely coupled and addressable components in a distributed system. Resources can be located anywhere in a computer system executing application . For example the computer system can comprise an application server or the like which executes both intermediary component and includes one or more resources stored thereon. Additionally one or more resources can be stored on another server which can communicate with the application server executing intermediary component over any combination of one or more of any type of public and or private networks.

In an embodiment each request received from client and transmitted by intermediary component during implementation of the requested interaction uses a standard interface protocol. As used herein standard interface protocol means a specification including a set of rules for multiple computing components to communicate with one another which is used throughout all interactions between the components of application and between application and client . In an embodiment the standard interface protocol comprises a protocol that is widely implemented on computer systems. An illustrative standard interface protocol comprises a uniform resource identifier URI scheme such as hypertext transfer protocol HTTP . However it is understood that depending on the hardware implementation of application the standard interface protocol is not necessarily a communications protocol. For example the standard interface protocol can comprise an application programming interface API for an operating system of a computing device executing application .

In general a request received by intermediary component identifies a resource A that intermediary component processes e.g. executes to construct deliverables including constructing and providing a custom representation of the resource for processing by client . In an embodiment the custom representation of the resource comprises a dynamically generated artifact that can be processed by a web browser executing on client such as a hypertext markup language HTML document a Java applet an ActiveX control or the like. Regardless the custom representation of the resource can include content that is dynamically included based on a context of the activity corresponding to the request. Further the custom representation of the resource can include a set of identifiers corresponding to the next valid atomic operation for the activity that is dynamically determined based on a context of the activity.

In an embodiment an identified resource A comprises a reflective program. As used herein a reflective program comprises a resource that describes the conditions for its own execution. In this case the resource A allows variance in the resulting custom set of deliverables such as a representation of the resource . For example resource A can direct intermediary to evaluate a set of conditions based on the context of the activity to determine which of a plurality of possible sets of actions the intermediary will perform. Additionally while performing a set of actions the intermediary can construct a custom set of deliverables which can include a custom representation of the resource using the context of the activity as directed by the resource A.

In any event system controller performs pre processing of the request. To this extent shows an illustrative method of pre processing a request which can be implemented by system controller according to an embodiment. Referring to in action system controller receives the request which was generated by a client . As is understood the request includes in band metadata about client and further includes the URI for a work order resource in the in band metadata e.g. within the header information of a client request or the like.

In response to receiving the request in action system controller instantiates a container for processing the request. Container comprises a software component that holds other software components. In action system controller requests a representation of a construction service resource for execution in the container in order to process the request. Resources include a single construction service resource which can be implemented using any type of standard programming language e.g. Java .NET or the like. To this extent for every atomic operation performed by application a representation of the same construction service resource is utilized to process the request as discussed herein. In action system controller provides the work order URI to the representation of the construction service resource in the container . At this point the pre processing of the request by system controller is complete and further processing of the request is performed by the representation of the construction service resource also referred to as construction service executing within the container .

In an embodiment one or more work order resources comprises a course grained resource which is under specified thereby allowing a developer to set variables that will influence how the work order resource is refined. Such under specification provides generality to the work order resource increasing its potential as a reusable resource. For example a work order resource can comprise a reflective program that uses the context of an activity to determine the exact instructions for its refinement into an interaction specific response. A course grained work order resource can reference absolute or relative context resource s corresponding to variable s identifying the type of deliverable s required to be provided in response to the request. Additionally the work order resource can reference context resource s corresponding to variable s for customizing the construction of the set of deliverables including the next interaction request s that are valid for the client to request in the context of the activity. Through the processing of these variables the construction service can construct custom sets of deliverables while providing a developer a practical mechanism for prescribing variance.

In action construction service receives a representation of the work order resource also referred to as work order and begins processing the work order . Depending on the atomic operation being performed the construction service performs one or more operations e.g. update delete read and or the like transformations e.g. calculations or the like as directed by the work order on application data resource s corresponding to the activity for which the atomic operation is being performed and construct a custom set of deliverables which can include a custom representation of the work order in response to the request.

As discussed herein the work order can reference context information to refine and make absolute relative references to obtain explicit guidance that dynamically adjusts its processing by construction service . The context information can include in band information such as metadata regarding the activity that is included with the request received from the client . In addition to the work order URI the in band information can include client data corresponding to the client such as an identification of the client authentication information data provided by the client e.g. entered in a form and or the like. The context information can include out of band information. The out of band information can comprise metadata regarding the activity that is not included with the request received from the client . Construction service can use the in band context information to acquire the out of band context information as directed by the work order . Additionally construction service can use out of band context information already acquired to acquire additional out of band context information as directed by the work order .

To this extent in action construction service can determine whether any additional context information is required to execute the work order . If so in activity construction service can request as directed by the work order a representation of a context resource e.g. using a context resource URI included in work order . The context resource can comprise a fine grained resource which is an explicit component such as a data entity document and or the like or a course grained resource which itself requires additional context information. Regardless in activity construction service can receive a representation of the context resource and in activity construction service can advance the construction of a custom set of deliverables according to the work order and the context information. Actions can be repeated any number of times until all context information has been processed by construction service as defined by the work order .

Once construction service has completed processing the work order construction service can construct e.g. perform provide and or the like all deliverables prescribed as a result of processing the work order . In an embodiment the set of deliverables can result in any combination of one or more of a user interface modification for a human client with one or more work order identifiers data delivery for a machine client with one or more work order identifiers modification to one or more resources and or the like. To this extent in action construction service can perform one or more transformations and or operations on one or more resources if any. Illustrative transformations operations on resources include updating modifying a resource e.g. a data resource adding a resource changing a state of a resource add remove a tag on a resource create delete a resource send local and or remote messages and or the like. Additionally in action construction service can provide the custom representation of the work order for processing by the client . Furthermore in action construction service can perform updates to activity history data a particular type of context resource for the corresponding activity. For example the activity history data can include an indication of the time when the atomic operation was completed version information for the various resources utilized in completing the atomic operation and or the like. When the atomic operation is performed as part of a task the construction service can update task specific history data in the activity history data. In action construction service and container can terminate thereby releasing the system resources of a computer system processing the atomic operation.

As illustrated in when a resource is requested a utility can process the resource before providing the requester e.g. construction service with a processed representation of the resource . To this extent a resource can include a resource utility type which provides a machine readable mapping between the resource type of the resource and a utility configured for processing resources of the corresponding resource type. In an embodiment the format used for the resource utility type is standard across all resources of the application . For example the resource utility type can comprise a tag indicating the utility capable of processing the resource . Regardless when construction service requests a resource an unprocessed representation of the resource is provided to the utility which processes the representation of the resource to generate the processed representation of the resource . Illustrative utilities include a XML parser a rules engine a workflow engine a reporting engine an indexing engine and or the like.

While the utilities are shown conceptually as being part of the resources of an application it is understood that one or more utilities can be separately implemented and managed as remote resources apart from the remaining resources of the application . In this case the utilities would not form a part of application but would comprise a remote separate computing component similar to the computing hardware and operating system that is utilized by application . Similarly other resources such as context resources can be separately implemented and managed as remote resources apart from the remaining resources of the application . For example a context resource can comprise a legacy system which is encapsulated as references for resources updated by construction service as part of an operation e.g. via a uniform interface such as an API and or the like.

As discussed herein application can be executed by any type of computer system. shows an illustrative environment for executing application in order to perform an activity according to an embodiment. To this extent environment includes a computer system that can perform a process described herein in order to execute each atomic operation of the activity. In particular computer system is shown including application which makes computer system operable to perform an activity as described herein.

Computer system is shown including a processing component e.g. one or more processors a storage component e.g. a storage hierarchy an input output I O component e.g. one or more I O interfaces and or devices and a communications pathway . In general processing component executes program code such as system controller and or representations of one or more resources of application which is at least partially fixed in storage component . While executing program code processing component can process data which can result in reading and or writing transformed data from to storage component and or I O component for further processing. Pathway provides a communications link between each of the components in computer system . I O component can comprise one or more human I O devices which enable a human client to interact with computer system and or one or more communications devices to enable a system client to communicate with computer system using any type of communications link. To this extent computer system can manage a set of interfaces e.g. graphical user interface s application program interface and or the like that enable human and or system clients to interact with application . Further application can manage e.g. store retrieve create manipulate organize present etc. the data such as resources using any data management solution.

In any event computer system can comprise one or more general purpose computing articles of manufacture e.g. computing devices capable of executing program code such as system controller installed thereon. As used herein it is understood that program code means any collection of instructions in any language code or notation that cause a computing device having an information processing capability to perform a particular function either directly or after any combination of the following a conversion to another language code or notation b reproduction in a different material form and or c decompression. To this extent application can be embodied as any combination of system software and or application software.

As discussed herein application can be implemented using a set of resources . In this case a resource can enable computer system to execute a set of actions used by application to perform an activity. Resources can be separately developed and or implemented remote from other portions of application . For example utility resources are shown implemented remote from the remaining types of resources e.g. construction service work order resource s and context resources of application . However it is understood that other types of resources such as context resources can be separately developed and or implemented. Furthermore it is understood that environment can include a mix of context resources and or utility resources that are both a part of application and remote from application .

As used herein the term component means any configuration of hardware with or without software which implements the functionality described in conjunction therewith using any solution. The term module means program code that enables a computer system to implement the functionality described in conjunction therewith using any solution and refers to system controller and program artifacts of resources . When fixed in a storage component of a computer system that includes a processing component a module is a substantial portion of a component that implements the functionality. Regardless it is understood that two or more components modules and or systems may share some all of their respective hardware and or software. Further it is understood that some of the functionality discussed herein may not be implemented or additional functionality may be included as part of computer system .

When computer system comprises multiple computing devices each computing device can have only a portion of application fixed thereon e.g. one or more resources . However it is understood that computer system and application are only representative of various possible equivalent computer systems that may perform a process described herein. To this extent in other embodiments the functionality provided by computer system and application can be at least partially implemented by one or more computing devices that include any combination of general and or specific purpose hardware with or without program code. In each embodiment the hardware and program code if included can be created using standard engineering and programming techniques respectively.

Regardless when computer system includes multiple computing devices the computing devices can communicate over any type of communications link. Further while performing a process described herein computer system can communicate with one or more other computer systems using any type of communications link. In either case the communications link can comprise any combination of various types of wired and or wireless links comprise any combination of one or more types of networks and or utilize any combination of various types of transmission techniques and protocols. In an embodiment computer system comprises an application server which communicates with clients over the Internet.

In an embodiment a method of developing a software application using the software development framework is provided. To this extent shows an illustrative software development method according to an embodiment. In action a developer defines a set of atomic operations for performing a task or activity . Each atomic operation may or may not be required when performing the task. The atomic operation can be defined from the perspective of the client. In this case the atomic operation is all processing performed in response to a single request from the client. For example an illustrative task can comprise the creation of a new form and the atomic operations can include create new develop form validate form and submit.

For each atomic operation the developer can identify the context information for the activity or task that is required in order to perform the atomic operation and will be acquired when processing the corresponding work order resource. To this extent in action the developer identifies zero or more work order condition resources e.g. context resources . Each work order condition resource can comprise context information for the activity that can alter the actions identified by a work order to implement the atomic operation depending on the data corresponding to the work order condition resource. For example illustrative work order condition resources include a type of client a status of related activity ies a personnel profile a domain rule a rate schedule an activity record and or the like.

In action the developer identifies zero or more customization condition resources e.g. context resources . Each customization condition resource can comprise context information for the activity that can alter one or more aspects of the resulting custom set of deliverables. For example illustrative customization condition resources include privileges of a requesting client attributes preferences of the requesting client e.g. preferred color scheme type of display device etc. a personnel profile a domain rule a rate schedule a style sheet an activity record and or the like.

In action the developer identifies zero or more transition condition resources e.g. context resources . Each transition condition resource can comprise context information for the activity that can dictate the next atomic operation s that is valid for the activity e.g. a combination of one or more forms rules a particular review approval route user initiated interaction s and or the like . For example illustrative transition condition resources include client inputs personnel profile a status of a related activity and or the like.

In action the developer develops a work order resource to process the atomic operation. In particular construction service can execute the resulting work order resource to perform the atomic operation by determining a set of actions to perform e.g. based on data corresponding to the work order conditions if any performing the set of actions e.g. using data corresponding to the customization conditions if any and including a mechanism for enabling the client to select one of a set of valid next interactions for the activity e.g. using data corresponding to transition conditions if any. In an embodiment the mechanism is a distinct work order URI corresponding to a work order that is configured to perform each of the set of valid next interactions.

It is understood that the illustrative software development method shown and described herein is only exemplary of the process for developing a work order program. To this extent one or more of the actions in the method can be removed the order of the actions can be changed multiple iterations of one or more of the actions can be performed and or the like. Regardless the method or variations thereof can be repeated for each task and or activity for which the resulting software application is to be used to perform. In this manner the software application can be developed in a bottom up manner.

As described herein the software application developed using the software development framework described herein can be highly flexible in its performance of an activity. For example as discussed herein some or all of the work order resources can be developed as coarse grained resources which can determine what actions to perform content to include and or next operation s to perform at runtime using context information for the activity.

Additionally while execution of the software application has primarily been shown and described as completing an activity by performing a series of atomic operations it is understood that a group of related atomic operations can be defined as a task which is performed as part of an activity. In this case context data corresponding to a task which is a subset of the context data for the activity can be used by the work order resources that implement the atomic operations.

To this extent shows an illustrative flow diagram for performing a task according to an embodiment. As illustrated the task includes three operations. However when performing Operation A the construction service can use the corresponding work order resource to dynamically determine which of three possible Operations B B B is the appropriate next operation based on context information for the task activity. Similarly depending on the second Operation B B or B which is performed for the task construction service can dynamically determine one or more third Operations C C to be the appropriate next operation based on context information for the task activity. Each of the various operations can comprise an atomic operation or a compound operation e.g. another task .

In performing the illustrative task Operation A was performed followed by Operation B followed by Operation C as denoted by the solid arrows. A flow diagram of a particular performance of a task can be recreated e.g. using history data and would include a series of Operations A B C. However this is only one of nine potential combinations of operations that could have been performed to complete the task for the activity as denoted by the dashed arrows. It is understood that when determining the next operation for the activity multiple operations may be equally valid. In this case the custom representation returned to the client can enable the client to select the next operation from the multiple valid operations.

As described herein multiple tasks and or atomic operations can be chained together to perform an activity. To this extent shows an illustrative flow diagram for performing an activity according to an embodiment. As illustrated similar to performing a task the activity can include multiple possible tasks or operations at the conclusion of a previous task. When the previous task completes the valid next task s is are dynamically determined based on context information for the activity. In this manner application can manage the performance of an activity having any arbitrary level of complexity without the need to define a process flow to address all possible conditions.

Additionally activities performed using the application can be related. To this extent shows illustrative activity relationships between activities being performed using the application according to an embodiment. As illustrated an activity such as Activity A can comprise zero or more related and independent linked activities such as Linked Activity B and or zero or more related and dependent activities such as Parent Activity A0 and Child Activity A1. Similarly Linked Activity B Parent Activity A0 and or Child Activity A1 can comprise other linked parent and or child activities. Related activities e.g. by linking or parent child relationship can signal one another in response to and or as part of completing a respective task or operation. The signals can exchange information between the related activities such as context information which can result in a context of the related activity being changed. An activity can actively or passively monitor another activity e.g. by polling another activity for information registering for types of messages to be sent by the other activity and or the like.

In an embodiment an application can manage related activities using a virtual folder referred to as a case to bring order to complex activity interrelationships. The case can be a composed resource with a status e.g. case open case active case closed and or the like . The case can inherit the dynamic properties of its constituent parts e.g. activities comprised of tasks that are comprised of atomic operations and as a result provides for adaptive case management in support of highly complex activities.

Returning to in an embodiment application can comprise an extension of the REST software architecture style. In particular application inserts an intermediary component between the client and resources . In this manner the locus of control is shifted from the client as is the case in REST to the intermediary component which can use context information to direct the client to required or recommended resources in order to perform an activity.

In particular in response to an interaction request received from a client the intermediary component can construct an interaction from a coarse grained resource e.g. work order resource that specifies context conditions for its own refinement. The coarse grained resource can vary the action s to be performed by intermediary component attribute s of the data in the response the next operation s to be performed as part of the task activity and or the like based on the context information. As a result the set of deliverables such as the custom representation of the resource provided in response to the request can be an interaction specific representation of the coarse grained resource. The intermediary component serves as a transactional framework for atomic operations tasks which can include multiple operations and activities which can include multiple tasks and or operations.

By building an activity up from the interactions e.g. atomic operations the activity can inherit the dynamic properties of the interaction level implementation thereby providing a substantial degree of flexibility which can enable the application to support difficult process use cases that require such flexibility. In particular different performances of a particular activity can vary from one another at the atomic operation level depending on the context information for each performance of the activity.

In contrast to the REST architecture an embodiment of the software development framework described herein utilizes a server side intermediary component to manage and exploit context e.g. state information for the interactions between the client and the application . In the REST architecture interactions between a client and a server are stateless from the perspective of the server with any context information being managed at the client side. Additionally since all custom representations of resources can be dynamically generated and customized for the requesting client client side caching of responses from application may not be successfully utilized in the software framework described herein.

An embodiment of the software development framework described herein shifts some of the client side processing performed in the REST architecture to the server in order to enrich the system interactions. However the software framework enables the server side to be highly tuned in processing interactions since all interactions are processed in the same manner can be implemented without the need for middleware to handle messaging or the like can be distributed to take advantage of load balancing and the like etc. Further since the REST architecture was first proposed the processing and communications capabilities of networked computer systems has increased substantially thereby alleviating some of the potential adverse impact of such a shift.

The development of an application that uses the single method described herein to implement all interactions can provide several technical advantages over previous approaches. These technical advantages can include one or more of a common programming model for application development well defined system constraints for locality of testing storage of all operations as loosely coupled resources in a secure and portable file server provision of an intermediary for centrality of security with no direct client access to system resources encapsulation of legacy systems for loosely coupled inter operability incorporation of new utilities that expand system capabilities and streamlined substitution of implementation technologies.

Construction service uses a resource service to retrieve rules tasks work orders and or the like. Resource service controls and facilitates access to the resources stored in a resource repository . Resource repository can include various types of resources including work orders rule definitions service specifications transforms script code tasks and or the like. While carrying out the work orders construction service can utilize zero or more other services. These services can include a decision service A which includes a decision engine a user interface service B a transformation service C and a reporting service D e.g. a third party business intelligence utility . Additionally construction service can use a system bridge E which provides access to external components . External components can include other services e.g. implemented as a web service external data and or the like.

In architecture the end node of an operation task includes a work order e.g. a parameterized program with a set of declarative if then else statements that describes different outcomes based on different context. When the end node is reached workflow service triggers the construction service to process the work order. The construction service retrieves the work order from resource repository using resource service and obtains context information for the task activity from CAIS . The context is mapped to an applicable outcome indicating the next step e.g. another process task using the work order. Construction service can retrieve the next process task and provide it to workflow service and performance of the activity by the application continues.

As discussed herein application can be configured to perform any group of activities comparable to and in many cases exceeding the capabilities of existing business process management technologies. For example an embodiment of application is configured to assist in managing research projects for an enterprise e.g. grants management protocol management conflict of interest management and or the like . In this case management of the lifecycle of each grant comprises an activity which is performed using application . In an embodiment the activity includes several distinct objectives each of which is fulfilled by a unique task one or more of which will be performed using application . Each task can include a set of atomic operations each of which is fulfilled by a work order resource one or more of which will be executed using application .

To this extent shows an illustrative flowchart for creating a new grant application according to an embodiment. A welcome work order resource can be executed to enable a user to enter initial data for a new grant including the project contact Principal Investigator PI . An initialization work order resource can be executed to create a new case for the grant activity based on the initial data. A setup the project work order resource can be executed to acquire additional required information for the grant from a user based on the new case. As part of the setup one or more activities can be linked to the grant activity based on protocol s for the grant activity e.g. management of human subjects management of animal subjects and or the like .

After the grant application is submitted a granting organization e.g. a sponsor at the granting organization will review the application and make a determination as to funding. shows an illustrative flowchart for reviewing a notice of award NOA received from the granting organization according to an embodiment in which a work order resource is executed to inform the sponsor of the NOA and another work order resource is executed to begin the NOA review. shows an illustrative flowchart for requesting an advanced spending account ASA for a grant according to an embodiment in which a work order resource is executed to make an application for advanced spending a work order resource is executed to enable review of the application by a department representative who can award the funding completely or in part using a corresponding work order resource. When awarded a work order resource is executed to assign an account for spending otherwise a work order resource can be executed to enable the applicant to revise the application and apply for funding again.

After a grant is awarded the grant moves from an application state to an award state and one or more tasks can be executed to setup a project and the corresponding accounts. To this extent shows an illustrative flowchart for setting up a grant project according to an embodiment in which work order resources can be executed to set up the grant project e.g. assign personnel set project dates indicate award amounts set up deliverables and or the like register completion of the setup and indicate that the grant project is active. Subsequently a view displaying the project can include additional options for a user such as viewing a budget viewing an account and or the like. shows an illustrative flowchart for setting up accounts for a grant project according to an embodiment in which work order resources can be executed to set up the accounts and register completion of the setup.

After the grant project is setup the grant moves to a post award state. To this extent application can include various tasks for managing the grant project during the post award state. For example shows an illustrative flowchart for generating a continuation progress report for the grant project according to an embodiment in which work order resources are executed to generate the report and enable a user to review the report. shows an illustrative flowchart for amending modifying a resource of the grant project according to an embodiment in which work order resources are executed to enable a user to request the amendment modification and a user to review the request. shows an illustrative flowchart for submitting expenditures according to an embodiment in which work order resources are executed to enable a user to submit expenditure s and a user to review the submission.

While shown and described herein as a method and system for performing an activity it is understood that aspects of the invention further provide various alternative embodiments. For example in one embodiment the invention provides a computer program fixed in at least one computer readable medium which when executed enables a computer system to perform an activity. To this extent the computer readable medium includes program code such as application which implements some or all of a process described herein. It is understood that the term computer readable medium comprises one or more of any type of tangible medium of expression now known or later developed from which a copy of the program code can be perceived reproduced or otherwise communicated by a computing device. For example the computer readable medium can comprise one or more portable storage articles of manufacture one or more memory storage components of a computing device and or the like.

In another embodiment the invention provides a method of providing a copy of program code such as application which implements some or all of a process described herein. In this case a computer system can process a copy of program code that implements some or all of a process described herein to generate and transmit for reception at a second distinct location a set of data signals that has one or more of its characteristics set and or changed in such a manner as to encode a copy of the program code in the set of data signals. Similarly an embodiment of the invention provides a method of acquiring a copy of program code that implements some or all of a process described herein which includes a computer system receiving the set of data signals described herein and translating the set of data signals into a copy of the computer program fixed in at least one computer readable medium. In either case the set of data signals can be transmitted received using any type of communications link.

In still another embodiment the invention provides a method of generating a system for performing an activity as described herein. In this case a computer system such as computer system can be obtained e.g. created maintained made available etc. and one or more components of application can be obtained e.g. created purchased used modified etc. and deployed to the computer system. To this extent the deployment can comprise one or more of 1 installing program code on a computing device 2 adding one or more computing and or I O devices to the computer system 3 incorporating and or modifying the computer system to enable it to perform a process described herein and or the like.

It is understood that aspects of the invention can be implemented as part of a business method that performs a process described herein on a subscription advertising and or fee basis. That is a service provider could offer to host an application as described herein. In this case the service provider can manage e.g. create maintain support etc. a computer system such as computer system that performs a process described herein for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement receive payment from the sale of advertising to one or more third parties and or the like.

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to an individual in the art are included within the scope of the invention as defined by the accompanying claims.

