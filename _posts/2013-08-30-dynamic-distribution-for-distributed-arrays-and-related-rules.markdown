---

title: Dynamic distribution for distributed arrays and related rules
abstract: The present invention provides a method and system for the dynamic distribution of an array in a parallel computing environment. The present invention obtains a criterion for distributing an array and performs flexible portioning based on the obtained criterion. In some embodiment analysis may be performed based on the criterion. The flexible portioning is then performed based on the analysis.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424076&OS=09424076&RS=09424076
owner: The MathWorks, Inc.
number: 09424076
owner_city: Natick
owner_country: US
publication_date: 20130830
---
This application is a continuation of U.S. patent application Ser. No. 13 955 152 filed Jul. 31 2013 which is a continuation of U.S. patent application Ser. No. 13 163 169 filed Jun. 17 2011 now U.S. Pat. No. 8 510 366 which is a continuation of U.S. patent application Ser. No. 12 778 746 filed May 12 2010 now U.S. Pat. No. 7 987 227 which is a continuation of U.S. patent application Ser. No. 11 387 565 filed Mar. 22 2006 now U.S. Pat. No. 7 743 087 the disclosures of which are incorporated herein by reference.

The present invention generally relates to parallel computing. More particularly the present invention relates to dynamic distribution of distributed arrays in the parallel computing environment.

MATLAB is a product of The MathWorks Inc. of Natick Mass. that provides an environment for technical computing to engineers scientists mathematicians and educators across a diverse range of industries. MATLAB is an intuitive high performance language and a technical computing application that provides mathematical and graphical tools for mathematical computation data analysis visualization and algorithm development. As a desktop application MATLAB typically runs on a single computer. However there is a limit to the complexity and the size of a problem that a single computer can solve. For example for a data intensive program utilizing a few 1000 by 1000 arrays there may not be enough processing power on the single computer to manipulate these arrays or the program may take days to complete execution. Furthermore there may not be enough memory on a processor to store one or more of the arrays needed for a data intensive program.

With many engineering and scientific problems requiring larger and more complex modeling many scientists and engineers are interested in using parallel computing to solve their problems. Arrays are an integral part of technical computing and with distributed arrays a user can employ more computing resources than with a single computer. U.S. patent application Ser. No. 11 173 645 discusses implementations of distributed arrays focused on evenly distributing arrays across multiple parallel processors. Flexible partitioning removes the limitation of having to evenly distribute the arrays across the parallel processors but introduces additional complexity in determining how an array is to be distributed.

Therefore it is desirable to provide a technique that reduces the complexity in determining how arrays are partitioned to distribute them across multiple parallel processors.

The present invention relates in general to parallel computing. Specifically the present invention is related to dynamic distribution of arrays in parallel computing in a technical computing environment. Operations performed on such distributed arrays are handled using flexible partitioning of the distributed array based on one or more criteria. Based on the established criterion a partitioning scheme is used to perform a given operation. In some embodiments rule sets are used to determine how distributed arrays are partitioned in performing an operation. The present invention provides a methodology for partitioning distributed arrays based on one or more goals established by one or more criteria.

In one aspect of the present invention a method is provided for dynamically distributing arrays in a parallel computing environment. The method includes the steps of obtaining a criterion for the processing of such a distributed array and performing flexible partitioning based on obtained criteria. In certain embodiments the method further includes performing analysis based on the criterion obtained. The criterion how the flexible portioning is performed and the analysis performed based on the criterion may each be specified by a user. In one embodiment of the invention there may be predefined rules for partitioning arrays based on the desired criteria. Such rules may address the functions and manipulations with the arrays and what should be done in particular classes or individual operations. Certain embodiments of the present invention deal with the desire to minimize the communications between the processors as one of the criteria in distributing the arrays. Minimizing the communications may improve the overall performance.

In another aspect of the present invention a computer readable medium for holding instructions for dynamically distributing arrays in a parallel computing environment is provided. The instructions include the steps of obtaining a criterion for the distribution of an array and performing flexible partitioning based on obtained criterion. In certain embodiments the instructions further include the step of performing analysis based on the obtained criterion. The criterion how the flexible portioning is performed and the analysis performed based on the criterion may each by specified by a user.

In still another embodiment of the present invention a system is provided for dynamically distributing arrays in a parallel computing environment. The system includes an application providing a parallel computing environment a first parallel computing unit executing in the parallel computing environment a second parallel computing unit executing in the parallel computing environment and a dynamic distribution scheme for partitioning an array for distribution across the first and second parallel computing units based on an obtained criterion. In certain embodiments the dynamic distribution scheme or portions thereof may be specified by a user

The details of various embodiments of the invention are set forth in the accompanying drawings and the descriptions below.

The present invention provides a system and method for dynamically distributing an array in a parallel computing environment. In one aspect the present invention is related to a method to execute a computer program in multiple execution environments. For a computer program utilizing a distributed array the distributed array may be dynamically distributed across the multiple execution environments and each execution environment handles execution and calculation only for a portion of the distributed array. This provides an easy method for parallel processing of a distributed array executing on multiple computers and or multiple processors to leverage the computing power of multiple computing resources. The automatic distribution also helps eliminate the requirement that the user of the parallel computing environment understand how to program parallel programming paradigms as well as how to best distribute or partition the distributed array.

With the availability of parallel computers researchers and scientists are interested in parallel computing in a technical computing environment such as for example MATLAB . Arrays are an integral part of technical computing and in modern day computation a single array may be large enough that an improvement in speed and latency may be achieved by distributing the single array across multiple computing resources. As used herein arrays include matrices and multidimensional grids such as look up tables.

With distributed arrays a user can employ more computing resources than with a single computer. However the implementation of the distributed arrays can affect the complexity of a computer program and user visible side effects and performance. With identical low level parallel programming paradigms different top level programming syntaxes can result in a very different user experience.

In U.S. patent application Ser. No. 11 173 645 a distributed array implementation for a parallel version of MATLAB has been introduced. The distribution scheme considered there largely addresses evenly distributing or partitioning the distributed array across the parallel processing units. The processing units may also be referred to as labs. An example of even distribution can be seen in . Here a distributed array having dimensionality of N is distributed over four 4 processing units or labs with each partitioned as having N 4 of the distributed array .

Flexible partitioning is built upon this concept and allows non even distribution partitioning. An example of this can be seen in . Here the distributed array having dimensionality N is again distributed across four 4 labs . But in this example the distributed array is partitioned so that Lab handles N 2 of the distributed array Lab handles N 8 of the distributed array Lab handles N 4 of the distributed array and Lab handles N 8 of the distributed array . The advantage of such flexible partitioning is that Lab may have more resources available for processing so it can handle a larger portion on distributed array while Labs and Lab have fewer resources available for processing which necessitates Lab and Lab handling smaller portions of the distributed array . It will be understood that resource management is but one of several possible factors that flexible partitioning can be based upon. A disadvantage of flexible partitioning is that it now introduces nearly limitless possibilities for distribution of arrays and the processing of distributed arrays that compounds the complexity issue that distributed arrays were created to address.

The present invention addresses the above mentioned problems by using one or more criteria to guide how flexible partitioning is to be handled in a parallel processing environment. In one aspect of the present invention one or more criteria are considered for directing the handling of flexible partitioning. Thus an array may be dynamically distributed based on the one or more criteria.

The illustrated embodiments will be described for illustrative purposes relative to a MATLAB based application however one of ordinary skill in the art will appreciate that the present invention may be applied to parallel execution of other applications such as LabVIEW or MATRIXx from National Instruments Inc. or Mathematica from Wolfram Research Inc. or Mathcad of Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc. The illustrative embodiment may also be applied in graphical modeling environments such as Simulink for MATLAB .

Application provides a parallel computing environment that allows parallel processing of application on the first and second processors and . Application is illustrated here as Parallel MATLAB or a MATLAB based application that is suitable for parallel or distributed processing. However one of ordinary skill in the art will appreciate that the present invention may apply to other technical computing environments suitable for parallel or distributed processing. Computing device may further include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links broadband connections wireless connections or some combination of any or all of the above. The network interface allows computing device to interface with another computing device that is capable of executing in the parallel computing environment to allow parallel processing on multiple computing devices.

In either of the embodiments shown in and the first parallel computing unit manages a first execution environment or lab and the second parallel computing unit manages a second execution environment or lab. Each execution environment has a local copy of a computer program that is executed in the corresponding parallel computing unit so there is no main parallel computing unit that distributes executions to the other parallel computing units.

The first execution environment and second execution environment are capable of communicating with each other via an interface. In an exemplary embodiment the first execution environment and the second execution environment can communicate with each other by sending messages via a Message Passing Interface MPI . MPI is a de facto standard for communication among the nodes running a parallel program on a distributed memory system. Implementation of the MPI specification permits programs with separate address spaces to synchronize with one another and move data from the address space of one process to that of another by sending and receiving messages. In another embodiment the first and second execution environments may interface via socket based communications over TCP IP implementing a custom message specification or other available message communications projects that allow the execution environments to send and receive messages.

A distributed array is implemented such that the executions of the distributed array are distributed or partitioned among the multiple execution environments or labs. Each of the parallel computing units stores locally a partitioned portion of the data contents of the distributed array. The multiple execution environments know which portion of the distributed array is stored on which of the multiple parallel computing units. A parallel computing unit performs execution only on the portion of the distributed array that is stored locally and if the parallel computing unit needs some portion of the distributed array that is not stored locally it can send a message to other parallel computing units to request for the information needed.

In some embodiments platform independent technology may be leveraged to achieve the distributed computations. For example dynamic distribution may be performed on top of any general purpose scheduler. As such no specific tailoring to the hardware is required at the user level. This enables the distribution to be achieved on heterogeneous clusters that may include different types of hardware and operating systems as long as the scheduler and the application support them.

Flexible partitioning allows a distributed array to be partitioned across multiple execution environments or labs in any number of ways. In one embodiment of the present invention a method is provided for dynamically distributing arrays in a parallel computing environment as shown in the flow diagram of . In this example the method comprises obtaining a criterion for the processing of a distributed array step and performing flexible partitioning based on obtained criterion step . In certain embodiments the method further comprises performing analysis based on the obtained criteria.

The criterion acts as a guideline for how flexible partitioning should be handled. The distribution scheme is selected based on the criterion. In one exemplary embodiment the criterion comprises minimizing communication in the parallel computing environment. In order to achieve this goal flexible distribution schemes are used. It should be understood that this is just one of the possible criteria. Other examples include but are not limited to maximizing use of execution environment resources minimizing processing time and profiling history. In certain embodiments multiple criteria may be obtained. In some embodiments where multiple criteria are obtained a weighting scheme may be employed giving some criteria priority over others. Other possible criteria and embodiments will be apparent to one skilled in the art given the benefit of this disclosure.

The obtained criterion may be a default criterion or specified. In the current example the criterion of minimizing communication in the parallel computing environment is a default criterion provided for handling flexible distribution of arrays provided by a parallel processing environment. In some embodiments of the invention a criterion may be specified by a user for example via a graphical user interface. In some such embodiments the user may be prompted to select a criterion from pre existing criterion choices. In other embodiments the criterion is specified by the parallel processing environment the processing unit other applications running on the processing unit or other applications of devices in communication with the processing unit and environment. In some embodiments a new criterion may be specified or provided. This allows for the extensibility of the present invention for as new situations or conditions occur new criterion may be created to address them. In certain embodiments criteria may be provided via an Application Programming Interface API . Other possible embodiments and configurations will be apparent to one skilled in the art given the benefit of this disclosure.

Once a criterion is obtained step then flexible partitioning may be performed based on the obtained criterion step . In certain embodiments the flexible partitioning is performed according to instructions determined the criterion. In some instances the instructions may be the commands used to achieve the desired partitioning. In still further examples the instructions may comprise the code for implementing a distribution scheme.

As with the criterion the instructions may be default or specified by an operator such as user device or application. That is once a criterion is obtained a default set of instructions associated with the selected criterion may then be used or a new set of instruction may be provided for the selected criterion. In other embodiments where a new criterion is specified instruction for implementing flexible partitioning in accordance with the new criterion may also be specified. In certain embodiments criteria and corresponding instructions may be provided via an Application Programming Interface API . Other embodiments and implementations will be apparent to one skilled in the art given the benefit of this disclosure.

In one embodiment of the invention the method shown in further comprises the step of performing analysis based the criterion to determine how to perform flexible partitioning step . In certain embodiments the analysis may also be performed as flexible partitioning is performed to allow for further adjustment to the dynamic distribution. As with the criterion and instructions the analysis performed may be default or specified by an operator such as user device or application. That is once a criterion is obtained a default analysis associated with the selected criterion may then be performed or a new analysis to be performed may be provided for the selected criterion. In other embodiments where a new criterion is specified an analysis to be performed in accordance with the new criterion may also be specified. In certain embodiments the analysis to be provided may be provided via an Application Programming Interface API . Other embodiments and implementations will be apparent to one skilled in the art given the benefit of this disclosure. The flexible partitioning performed step may then be based on the results of the analysis. In some embodiments this may include determining the instructions to be used for implementing the flexible partitioning.

In some embodiments the analysis step is performed using a rule set. The rules set may be rules for performing the analysis or rules performed as part of the analysis. The rule set may be default or specified by an operator such as user device or application. That is once a criterion is obtained a default rule set associated with the selected criterion or performed analysis may then be utilized or a new rule set may be provided for the selected criterion or analysis. In other embodiments where a new criterion or analysis is specified a new rule set in accordance with the new criterion or analysis may also be specified. In certain embodiments the rule set may be provided via an Application Programming Interface API . Other embodiments and implementations will be apparent to one skilled in the art given the benefit of this disclosure. The flexible partitioning performed step may then be based on the rule set. In some embodiments this may include determining the instructions to be used for implementing the flexible partitioning.

In some embodiments the step of performing an analysis step comprises determining the type of operation to be performed on a distributed array. In some further embodiments the determination of the type of operation to be performed on a distributed array determines a rule set to be used to perform flexible partitioning. An exemplary embodiment of this methodology can be seen in the flow diagram of . The first step involves obtaining a criterion step . Then the type operation being performed is determined step . Based on the type of operation being performed a rule set is then applied step . Then flexible partitioning may be performed based on an applied rule set step .

In one exemplary embodiment wherein the criterion is to minimize communication in the parallel computing environment some of the operations such as math functions performed on a distributed array may be grouped into different categories for the purposes of determining how arrays should be distributed before during and or after the execution of a particular function. Some examples of possible categories include Functions with Scalar or Small Vector Results Unary Element wise and Other Size Preserving Functions Reduction Functions of One Data Input Binary Element wise Functions Transpose Functions and Size Value Dependent Functions. Each of these category groups will be discussed in more detail below. It should be understood that this is but one possible category grouping and does not cover all possible functions. Other possible functions categories and groupings will be apparent to one skilled in the art given the benefit of the disclosure.

The category of Functions with Scalar or Small Vector Results includes the functions that return scalar or small vector length of the output is the same as the number of dimensions of the input outputs. Examples of functions in this category include 

The category of Unary Element wise and Other Size Preserving Functions includes functions that have the characteristic such that if 

The category Reduction Functions of One Data Input includes functions that have the characteristic such that if 

The category Binary Element wise Functions includes functions that have the characteristic such that if 

The category Size Value Dependent Functions includes functions that have the characteristic such that 

One of ordinary skill in the art will appreciate that the present invention has several advantages. The use of criterion allows for a flexible methodology for guiding the handling of operations on distributed arrays. Providing a pre defined guiding criterion and relates analysis rules and instructions reduces the need for a user to have to specify how to implement flexible partitioning for each instance an operation is preformed. The ability to specify new criterion as well as the underlying analysis rules and instructions for flexible partitioning provide a flexible robust extensible system for implementing dynamic distribution as new functions conditions and situations arise.

It should be understood that the provided embodiments are exemplary in nature. Many alterations and modifications may be made to the present invention especially the implementations of different criterion and rules by those having ordinary skill in the art without departing from the spirit and scope of the invention. For example interpolation and or extrapolation functionality such as used for lookup tables could be implemented using the teachings of the present invention. Therefore it must be expressly understood that the illustrated embodiments and listed functions have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

