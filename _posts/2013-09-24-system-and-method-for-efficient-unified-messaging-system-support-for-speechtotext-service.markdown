---

title: System and method for efficient unified messaging system support for speech-to-text service
abstract: Disclosed herein are systems, methods, and non-transitory computer-readable storage media for communicating information about transcription progress from a unified messaging (UM) server to a UM client. In one embodiment, the transcription progress describes speech to text transcription of speech messages such as voicemail. The UM server authenticates and establishes a session with a UM client, then receives a get message list request from a UM client as of a first time, responds to the get message list request with a view of a state of messages and available transcriptions for transcribable messages in a list of messages associated with the get message list call at the first time, and, at a second time subsequent to the first time, transmits to the UM client a notification that provides an indication of progress for at least one transcription not yet complete in the list of messages. The messages can include video.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09215203&OS=09215203&RS=09215203
owner: AT&T Intellectual Property I, L.P.
number: 09215203
owner_city: Atlanta
owner_country: US
publication_date: 20130924
---
The present application is a continuation of U.S. patent application Ser. No. 12 841 830 filed Jul. 22 2010 the content of which is incorporated by reference in its entirety.

The present disclosure relates to unified messaging and more specifically to more efficient use of unified messaging system resources.

Unified messaging UM is an approach to integrate messages which are created and transmitted via different communication media into a single interface which is accessible from a wide array of devices. For example a unified messaging interface can be accessible via desktop or laptop computer a web interface smart phone cellular phone landline phone and so forth. In one aspect different client devices must periodically poll a UM server to inquire about availability of transcribed text which was not available earlier. The polling interval of a great number of client devices is not sensitive to the overall load availability or other dynamic characteristics of the STT engine or the UM servers. The polling utilizes network bandwidth and server resources inefficiently unnecessarily and unintelligently.

Additional features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims or can be learned by the practice of the principles set forth herein.

This disclosure involves fault tolerant modifications to a unified messaging UM system to efficiently manage the Speech To Text STT capability between an STT engine or other transcription service and various client applications. Occasionally the STT engine may experience delays service disruptions and errors but client applications must not be forced to wait unnecessarily long times for accessing the original non text content. The non text content can be for example a received voicemail video mail image audiovisual presentation or facsimile fax .

In one aspect the approach set forth herein includes three steps. The first step is dynamic computation by the UM system of estimated delays until the transcribed text is available using any one of suitable algorithms. The second step is to communicate the estimated delays to UM clients when the clients receive information about the deposited originally received non text message. The third step is to use one or more asynchronous notification channels to inform the UM clients with pre existing current sessions of the availability of the transcribed text for specific non text content that was deposited in the mailbox earlier. This approach is fault tolerant in that it results in desired efficiencies even if one or more asynchronous notification channels are broken such as when the notification servers or recipient servers fail . This approach reduces the cost to the UM system and the clients by reducing the numbers of Application Programming Interface API calls and the need for associated capacities. This approach also improves the expected response time to users which is especially important in systems servicing millions of UM clients many of whom communicate with the UM system concurrently. This approach is also adaptable in that any suitable algorithm or method can be used to reduce the wait times of the UM clients and improve the responsiveness of the UM system.

Disclosed are systems methods and non transitory computer readable storage media for communicating information about transcription progress at a unified messaging UM server. The UM server receives an authentication request from a unified messaging client and establishes a session with the unified messaging client based on the authentication request. Then the UM server receives a get message list request from a UM client as of a first time and responds to the get message list request with a view of a state of messages and available transcriptions for transcribable messages in a list of messages associated with the get message list call at the first time. Then the UM server transmits to the UM client at a second time subsequent to the first time a notification that provides an indication of progress for at least one transcription not yet complete in the list of messages. The UM server can send the notification via an asynchronous notification channel. The message can be a non text message an audio message or a video message for example. All or part of a visual message can be transcribed via optical character recognition OCR .

The UM server can generate the indication of progress based on at least one of current load on a transcription server such as an STT engine historic response times from the transcription server length of an original message current load on the UM server and expected time of availability of transcription server if the transcription server is unavailable. If the transcription server is unavailable the indication of progress can further be based on an average transcription server recovery time. If a transcription for a given message has already started the indication of progress for that message can be based on observed processing time to transcribe messages of similar size to the given message the length of the given message an amount of time since the given message was submitted for transcription and or an estimated setup time which may be fixed or dynamically computed. If a transcription for a given message has not already started the indication of progress for that message can be based on observed processing time to transcribe messages of similar size to the given message and an estimated setup time.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the disclosure.

The present disclosure addresses the need in the art for improved notification of transcriptions in a unified messaging UM system. A system method and non transitory computer readable media are disclosed which communicate information about transcription progress to UM clients. A brief introductory description of a basic general purpose system or computing device in which can be employed to practice the concepts is disclosed herein. A more detailed description of an exemplary UM server client configuration a UM client graphical user interface a timeline of communications between a UM server UM client and transcription server and an exemplary method will then follow. The disclosure now turns to .

With reference to an exemplary system includes a general purpose computing device including a processing unit CPU or processor and a system bus that couples various system components including the system memory such as read only memory ROM and random access memory RAM to the processor . The system can include a cache of high speed memory connected directly with in close proximity to or integrated as part of the processor . The system copies data from the memory and or the storage device to the cache for quick access by the processor . In this way the cache provides a performance boost that avoids processor delays while waiting for data. These and other modules can be configured to control the processor to perform various actions. Other system memory may be available for use as well. The memory can include multiple different types of memory with different performance characteristics. It can be appreciated that the disclosure may operate on a computing device with more than one processor or on a group or cluster of computing devices networked together to provide greater processing capability. The processor can include any general purpose processor and a hardware module or software module such as module module and module stored in storage device configured to control the processor as well as a special purpose processor where software instructions are incorporated into the actual processor design. The processor may essentially be a completely self contained computing system containing multiple cores or processors a bus memory controller cache etc. A multi core processor may be symmetric or asymmetric.

The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. A basic input output BIOS stored in ROM or the like may provide the basic routine that helps to transfer information between elements within the computing device such as during start up. The computing device further includes storage devices such as a hard disk drive a magnetic disk drive an optical disk drive tape drive or the like. The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device is connected to the system bus by a drive interface. The drives and the associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computing device . In one aspect a hardware module that performs a particular function includes the software component stored in a non transitory computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function. The basic components are known to those of skill in the art and appropriate variations are contemplated depending on the type of device such as whether the device is a small handheld computing device a desktop computer or a computer server.

Although the exemplary embodiment described herein employs the hard disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards digital versatile disks cartridges random access memories RAMs read only memory ROM a cable or wireless signal containing a bit stream and the like may also be used in the exemplary operating environment. Non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

To enable user interaction with the computing device an input device represents any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems enable a user to provide multiple types of input to communicate with the computing device . The communications interface generally governs and manages the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

For clarity of explanation the illustrative system embodiment is presented as including individual functional blocks including functional blocks labeled as a processor or processor . The functions these blocks represent may be provided through the use of either shared or dedicated hardware including but not limited to hardware capable of executing software and hardware such as a processor that is purpose built to operate as an equivalent to software executing on a general purpose processor. For example the functions of one or more processors presented in may be provided by a single shared processor or multiple processors. Use of the term processor should not be construed to refer exclusively to hardware capable of executing software. Illustrative embodiments may include microprocessor and or digital signal processor DSP hardware read only memory ROM for storing software performing the operations discussed below and random access memory RAM for storing results. Very large scale integration VLSI hardware embodiments as well as custom VLSI circuitry in combination with a general purpose DSP circuit may also be provided.

The logical operations of the various embodiments are implemented as 1 a sequence of computer implemented steps operations or procedures running on a programmable circuit within a general use computer 2 a sequence of computer implemented steps operations or procedures running on a specific use programmable circuit and or 3 interconnected machine modules or program engines within the programmable circuits. The system shown in can practice all or part of the recited methods can be a part of the recited systems and or can operate according to instructions in the recited non transitory computer readable storage media. Such logical operations can be implemented as modules configured to control the processor to perform particular functions according to the programming of the module. For example illustrates three modules Mod Mod and Mod which are modules configured to control the processor . These modules may be stored on the storage device and loaded into RAM or memory at runtime or may be stored as would be known in the art in other computer readable memory locations.

Having disclosed some exemplary system components the disclosure now turns to which illustrates an example overview of a unified messaging UM server and UM client configuration. The UM server and or UM clients can include all or part of the elements of the exemplary system shown in . The UM server receives messages from multiple message sources via a communication network such as the public switched telephone network or the Internet. The message sources can provide message such as voicemails video messages faxes images multimedia messages and or hyperlinks.

The UM server communicates with a transcription server or servers which transcribe all or part of each message from the message sources. The transcription server can transcribe using speech to text OCR pattern recognition and or any other suitable mechanism s to extract text from non textually formatted messages. The transcription server can also perform translation services to translate extracted text from one language to another if needed. The UM server can then offer an original language transcription and optionally a translated transcription to the UM client. The UM server identifies a particular UM client for each message and transmits information to the respective UM client regarding the message including a transcription status. For example in the case of a voicemail the UM server can transmit information indicating a sender of the voicemail a duration of the voicemail a callback number a time of the voicemail a headline of the voicemail transcription an expected completion time for the transcription if it is not yet completed and so forth.

Some example UM clients include smartphones PDAs cellular phones web browsers mobile phone applications a personal computer an intermediate UM server an IPTV set top box and so forth. When a UM client establishes a session with the UM server the UM server can return a listing of messages and transcription progress for messages in the listing. If the UM server receives progress updates such as a revised expected completion time or a completed transcription from the transcription server the UM server can transmit updated notifications to the appropriate UM client via an asynchronous notification channel.

In one aspect an existing notification channel between the UM server and the UM clients can be enhanced 1 to include a new message type that indicates availabilities of one or more transcriptions 2 to include references to the existing non text messages for each newly available transcription in each such message and 3 to issue instances of this new notification message Application Programming Interface API call to notification servers and or directly to the UM clients.

In an embodiment the UM server sends instances of this new notification message type when at least one existing session exists on a UM client for that mailbox. One example of a session in a web UM interface is a duration that the web UM interface is open and active in a web browser. Another example of a session in a smartphone is as long as the smartphone has an active data connection whether by cellular signals USB cable wifi or other wired or wireless link. When a user logs into UM for a mailbox using a UM client the UM client initially issues a fresh getMessageList API call to the UM server to receive a current view of the state of messages voicemail videomail faxes emails and so forth and transcriptions on that mailbox. Subsequent asynchronous notifications for the logged in user can update the states for existing messages in his her mailbox message list. The UM server can update states to indicate that a message is newly available a new message has arrived the expected completion time for a transcription has changed and so forth. In this way the UM server pushes updates to the appropriate UM clients as information becomes available and the UM clients are not required to constantly poll the UM server for updated information. In one variation the UM server sends groups of notification messages to notifications servers of UM clients every N seconds to save bandwidth.

The UM server can compute using a suitable algorithm a dynamic estimate time when the transcription for each message is expected to become available to the UM client s . The algorithm can take a variety of parameters as input. Some exemplary parameters include current load on the transcription server historic response time from the transcription server the length of the transcribable portion of the non text original message the current load of the UM server and the expected time for availability of the transcription server if it is not currently available.

One example algorithm for computing an estimated completion time T in seconds for a message of size S seconds of audio is described below. If the transcription server is unavailable then T average transcription server service recovery time. Otherwise if the transcription server is available and if the transcription for that message has already started T observed transcription server turn around latency time for messages of length N seconds during the last OT minutes S amount of time since the transcription request was submitted to the transcription server N an estimated set up and or delay time DT aggregated to account for set up and other delays on the UM server and or the transcription server . Otherwise if the transcription server is available and if the transcription for that message has not yet started then T observed transcription server turn around latency time for messages of length N seconds during the last OT minutes S N an estimated set up and or delay time DT aggregated to account for set up and other delays on the UM server and or the transcription server . The estimated set up and or delay time DT can be fixed dynamically or randomly determined. For example DT can be a randomized variable with a mean of 20 seconds. In one aspect DT is randomized with a pre configured mean or a constant value. One example value for OT is 30 minutes. One example value for N is 5 seconds. The system can use other algorithms values variables and sets of conditions to determine the estimated completion time T.

The UM client can dynamically update indications for messages which do not have a complete transcription based on relevant information as information about the transcription may become available. The UM client can change the animation icon action link or other indication to indicate that transcription is complete. The UM client can also provide an audible or visible notification of a newly completed transcription. For example if the transcription server goes down then the estimated completion time increases based on some average duration for the transcription workload to shift to another server or for the transcription server to go back online. In an enhanced notifications interface for each message the UM client receives a message Unique Identifier UID as part of the notification about the transcriptions or more messages as status changes about the transcriptions for each un transcribed message may become available. In one example a powerful transcription server capable of transcribing messages very quickly goes down and the transcription work shifts to several backup transcription servers which operate much more slowly. This shift can trigger a change to a later time for the estimated completion time for transcriptions. This approach can update the display on UM clients in real time or in substantially real time to reflect the later estimated completion time.

As the status for transcriptions changes such as when the transcription server completes a pending transcription the UM server receives a transcription status update from the transcription server at time T. At time T the UM server sends the transcription status update to the UM client which can then update its message interface to the user. In this approach the UM client does not need to constantly issue a new potentially resource intensive Application Programming Interface API method invocation to retrieve a list of various messages along with various information about such messages e.g. using a getMessageList API call to the UM server unless the UM client receives an actual new message receives other status update about a message e.g. when a status is changed from has been read to has not been read or vice of versa or notices that an existing messages has been deleted. When the UM client is done communicating with the UM server the session ends at time T. A session can end when a user closes a web browser logs off a computer turns off a mobile phone or after a timeout duration for example.

In some variations media messages and corresponding transcriptions can reference one another. The UM server can implement referential integrity for such references. The transcription server can properly account for nested or forwarded messages. The messages for transcription can be in of extensible media types to support future message formats without changing the interface or syntax for interacting with the transcription server. In one aspect UM client applications are not blocked indefinitely and unnecessarily awaiting transcriptions from the UM server. In another aspect UM clients may not need to poll the UM server more frequently about transcription status change of UM messages. The UM server can return dynamically computed wait times to UM clients to increase system efficiency and reduce unnecessary load on the UM server.

In one aspect tagged and untagged transcriptions can include confidence scores for use by UM client applications. Tag management for transcriptions can be table driven. The UM server and or client can accommodate tags from transcription engines from different vendors. Tags can be nested such that recursion can be applied to transcribed messages and more complex data such as embedded addresses phone numbers or email addresses.

Having disclosed some basic system components the disclosure now turns to the exemplary method embodiment for communicating information about transcription progress as shown in . For the sake of clarity the method is discussed in terms of an exemplary system as shown in configured to practice the method. The system can include a processor and various modules configured to control the processor to perform any or all of these steps. The system receives an authentication or login request from a unified messaging client and establishes a session with the unified messaging client . Then the system receives a get message list request from a UM client as of a first time . The system responds to the get message list request with a view of a state of messages and available transcriptions for transcribable messages in a list of messages associated with the get message list call . The messages can include non text messages audio messages video messages and so forth. One common application is unified voicemail but other applications exist. Messages having a visual component can be transcribed at least in part via optical character recognition or other graphics based text extraction approaches. Messages can be automatically translated if left in a language other than a recipient s preferred language. Information that is returned by the UM server to a UM client about each message can include estimated completion time for a transcription of that message as described earlier.

The system may transmit to the UM client at a second time subsequent to the first time a notification that provides an indication of progress for at least one transcription not yet complete in the list of messages . The indication of progress can be generated based on at least one of current load on a transcription server historic response times from the transcription server length of an original message current load on the UM server and or expected time of availability of transcription server if the transcription server is unavailable. If the transcription server is unavailable the indication of progress can also be based on the average transcription server recovery time. If a transcription for a given message has already started the indication of progress for the given message can also be based on observed processing time to transcribe messages of similar size to the given message the length of the given message an amount of time since the given message was submitted for transcription and an estimated setup time which may be fixed or dynamically computed. If a transcription for a given message has not already started the indication of progress for the given message can also be based on observed processing time to transcribe messages of similar size to the given message and an estimated setup time which may be fixed or dynamically computed. The indication of progress can be an expected completion time.

In one aspect the system further receives updated information regarding progress for the at least one transcription not yet complete in the list of messages and transmits to the UM client an updated notification based on the updated information. One example of updated information is a completed transcription. Another example is a transcription failure.

The estimated completion time for a transcription can be a single point in time such as 4 20 pm or a range of time such as between 4 18 pm and 4 23 pm. In one aspect if a user is displeased with a current estimated completion time for a transcription the user can select a speed up option that charges the user a fee such as a micropayment to expedite the transcription by bumping the transcription up in a queue moving the transcription to a dedicated expedited request transcription server or other approach. For example the user can expedite a current transcription in exchange for slower service for one or more later transcriptions. In another option a user can opt to speed up a transcription by accepting a lower confidence score in the transcribed text thereby allowing the transcription server to transcribe less accurately in a shorter time.

Embodiments within the scope of the present disclosure may also include tangible and or non transitory computer readable storage media for carrying or having computer executable instructions or data structures stored thereon. Such non transitory computer readable storage media can be any available media that can be accessed by a general purpose or special purpose computer including the functional design of any special purpose processor as discussed above. By way of example and not limitation such non transitory computer readable media can include RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions data structures or processor chip design. When information is transferred or provided over a network or another communications connection either hardwired wireless or combination thereof to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above should also be included within the scope of the computer readable media.

Computer executable instructions include for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Computer executable instructions also include program modules that are executed by computers in stand alone or network environments. Generally program modules include routines programs components data structures objects and the functions inherent in the design of special purpose processors etc. that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.

Those of skill in the art will appreciate that other embodiments of the disclosure may be practiced in network computing environments with many types of computer system configurations including personal computers hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. Embodiments may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination thereof through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The various embodiments described above are provided by way of illustration only and should not be construed to limit the scope of the disclosure. The principles herein can allow users to see transcriptions faster than they otherwise would while a service provider can incur less capital and ongoing recurring expenses for providing transcription service via the UM system. The principles herein provide a fault tolerant approach that provides benefit even if the notifications of messages are lost not delivered or if the UM server and or UM notification engine are experiencing difficulties. Those skilled in the art will readily recognize various modifications and changes that may be made to the principles described herein without following the example embodiments and applications illustrated and described herein and without departing from the spirit and scope of the disclosure.

