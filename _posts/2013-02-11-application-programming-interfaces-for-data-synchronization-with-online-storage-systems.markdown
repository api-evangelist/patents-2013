---

title: Application programming interfaces for data synchronization with online storage systems
abstract: The disclosed embodiments provide a system that manages access to data associated with an online storage system. During operation, the system enables synchronization of the data between an electronic device and the online storage system through an application programming interface (API) with an application on the electronic device. Next, the system uses the API to provide a synchronization state of the data to the application, wherein the synchronization state comprises at least one of a download state, an upload state, an idle state, a transfer progress, a cached state, and an error state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298391&OS=09298391&RS=09298391
owner: DROPBOX, INC.
number: 09298391
owner_city: San Francisco
owner_country: US
publication_date: 20130211
---
This application claims the benefit of U.S. Provisional Application No. 61 739 621 entitled Application Programming Interfaces for Data Synchronization with Online Storage Systems by inventors Brian Smith Scott Bezek Jacob D. Potter and Andrew R. Twyman filed 19 Dec. 2012.

The disclosed embodiments relate to online storage systems. More specifically the disclosed embodiments relate to application programming interfaces APIs for data synchronization with online storage systems.

Data on network enabled devices is commonly synchronized stored shared and or backed up on online storage systems such as file hosting services cloud storage services and or remote backup services. For example data such as images audio video documents executables and or other files may be stored on a network enabled electronic device such as a personal computer laptop computer portable media player tablet computer and or mobile phone. A user of the electronic device may also have a user account with a cloud storage service that allows copies of the files to be stored and or backed up with the cloud storage service. The cloud storage service may further transmit the copies to other electronic devices of the user and or other users who are authorized to access the files thus synchronizing the files between the cloud storage service and electronic devices.

Unfortunately data synchronization between an electronic device and an online storage system is typically associated with limited interaction and or information related to the synchronization state of the electronic device with the online storage system. For example the electronic device may use a natively installed client application to create delete modify and or copy files with the online storage system. Alternatively a third party application on the electronic device may use an application programming interface API to perform reading writing copying and or other file based operations with the online storage system. In both cases the electronic device may lack information regarding the states associated with such file based operations. For example the client application and or third party application may be unable to identify an error associated with a failed file transfer and or detect a newer version of a file on the online storage system. As a result the user of the electronic device may experience reduced functionality and or problems with synchronizing to the latest and or correct versions of data from the online storage system.

Consequently data synchronization between electronic devices and online storage systems may be facilitated by enabling access to synchronization states associated with the synchronization from the electronic devices.

The disclosed embodiments provide a system that manages access to data associated with an online storage system. During operation the system enables synchronization of the data between an electronic device and the online storage system through an application programming interface API with an application on the electronic device. Next the system uses the API to provide a synchronization state of the data to the application wherein the synchronization state comprises at least one of a download state an upload state an idle state a transfer progress a cached state and an error state.

In some embodiments the system also uses the API to provide a filesystem synchronization state of a filesystem comprising the data to the application wherein the filesystem synchronization state comprises at least one of a metadata synchronization state an online state a running state a ready state and a change state.

In some embodiments the system also enables synchronization of metadata for the filesystem with the electronic device through the API.

In some embodiments the synchronization of the metadata for the filesystem with the electronic device is enabled using at least one of an open operation a create operation a delete operation and a move operation.

In some embodiments the change state is associated with at least one of a path a directory and a file.

In some embodiments if the system accesses the data during synchronization of the data between the electronic device and the online storage system accessing the data involves 

In some embodiments the synchronization state specifies a synchronization between the data on the online storage system and a copy of the data in a cache on the electronic device.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing code and or data now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore methods and processes described herein can be included in hardware modules or apparatus. These modules or apparatus may include but are not limited to an application specific integrated circuit ASIC chip a field programmable gate array FPGA a dedicated or shared processor that executes a particular software module or a piece of code at a particular time and or other programmable logic devices now known or later developed. When the hardware modules or apparatus are activated they perform the methods and processes included within them.

The disclosed embodiments provide a method and system for managing access to data associated with an online storage system. As shown in an online storage system may be accessed from a set of electronic devices such as personal computers laptop computers tablet computers mobile phones personal digital assistants portable media players digital media receivers and or other network enabled electronic devices. Communication between electronic devices and online storage system may be enabled by one or more networks such as a local area network LAN wide area network WAN personal area network PAN virtual private network intranet cellular network WiFi network Bluetooth Bluetooth is a registered trademark of Bluetooth SIG Inc. network universal serial bus USB network and or Ethernet network.

During use of online storage system users of electronic devices may perform tasks related to storage backup retrieval sharing and or synchronization of data. For example each user may use an electronic device e.g. electronic devices to store images audio video documents executables and or other files with a user account of the user on online storage system . To access the files and or user account the user may provide authentication credentials for the user account to online storage system from the electronic device. The user may also enable access to the files from other electronic devices by providing the same authentication credentials to online storage system from the other electronic devices authorizing access to the files from user accounts of the other users and or placing the files into a publicly accessible directory on online storage system .

To enable such storage backup sharing synchronization and or access to data on online storage system online storage system may store the data using one or more storage mechanisms. For example online storage system may use one or more servers cloud storage network attached storage NAS a storage area network SAN a redundant array of inexpensive disks RAID system and or other network accessible storage to store the data. Online storage system may additionally store the data using a variety of filesystem architectures and or hierarchies and obscure the locations and or mechanisms involved in storing the data from electronic devices .

In one or more embodiments online storage system is associated with a client application that supports automatic data synchronization between electronic devices and online storage system . For example the client application may be installed on each electronic device and automatically synchronize changes associated with a designated directory e.g. new deleted modified copied and or moved files and or subdirectories within the directory between the electronic device and online storage system . To perform such synchronization the client application may monitor a local directory corresponding to the designated directory on the electronic device and synchronize changes to the local directory with a remote directory corresponding to the designated directory on online storage system . Conversely the client application may identify changes to the remote directory and propagate the changes to the local directory. Because the client application is used directly by a user of the electronic device the client application may hide and or omit details of the synchronization from the user.

As shown in interaction between an electronic device and online storage system may further be facilitated by an application programming interface API with an application on electronic device such as a third party application that is not directly affiliated with online storage system . For example API may provide a set of method and or function calls related to operations for reading writing copying moving deleting and or otherwise accessing data on online storage system . In turn application may invoke the method and or function calls to perform tasks such as backing up application data for application and or synchronizing user data e.g. images audio video text documents etc. associated with application with online storage system and or other electronic devices.

More specifically a synchronization apparatus associated with API may synchronize data in a local cache of electronic device with data on online storage system . As described above such synchronization may be accomplished by detecting changes in each set of data and propagating the changes to the other set of data. For example synchronization apparatus may use a long polling technique to receive changes to data from online storage system and apply the changes to data . Synchronization apparatus may also allow application to detect changes to data and upload the changes to online storage system for synchronization with data .

In one or more embodiments synchronization of data is based on file level operations available to application through API such as a read operation a write operation an update operation and or a close operation. The operations may appear to complete immediately after calls associated with the operations are made by application . At the same time API may propagate the operations to online storage system and or obtain updates associated with data from online storage system based on the availability of online storage system and or a network connection between electronic device and online storage system .

In addition synchronization apparatus may synchronize metadata for a filesystem containing data with a corresponding set of metadata in cache . Metadata may represent the directory hierarchy and paths associated with data . For example metadata may describe the contents e.g. files subdirectories etc. of directories in filesystem that are accessible to electronic device and or application . Like data metadata may be synchronized by detecting changes to each set of metadata and propagating the changes to the other set of metadata.

In addition synchronization of metadata may be based on filesystem level operations available to application through API such as an open operation a create operation a delete operation and or a move operation. Before such operations can be used by application synchronization apparatus may perform a first synchronization of metadata by obtaining metadata as a copy of metadata from online storage system and or obtaining metadata as a copy of metadata from cache and or other local storage on electronic device . After the first synchronization is complete synchronization apparatus may enable access to filesystem and or data from electronic device and synchronize changes to metadata by obtaining the changes from the set of metadata containing the changes and applying the changes to the other set of metadata.

To facilitate robust synchronization of data and metadata by application a communication apparatus associated with API may provide a synchronization state of data and or a filesystem synchronization state of metadata between electronic device and online storage system to application . Synchronization state may specify a number of different states related to operations associated with synchronization of data . For example synchronization state may include a download state an upload state an idle state a transfer progress a cached state and or an error state for each file and or other unit of data to be synchronized between electronic device and online storage system .

Similarly filesystem synchronization state may indicate various states related to operations associated with synchronization of metadata . For example filesystem synchronization state may include a metadata synchronization state an online state a running state a ready state and or a change state for metadata to be synchronized between electronic device and online storage system .

More specifically the above described operations and or states associated with synchronization of data may be implemented using an interface for the state of a file and an interface for the file. The interface for the state of the file may include the following exemplary implementation.

Furthermore the above described operations and or states associated with synchronization of metadata may be implemented using an interface for a filesystem e.g. filesystem . The interface for the filesystem may include the following exemplary implementation 

The interface may also include method calls to operations for synchronizing metadata . Such method calls may include an openFile method call to an open operation that opens an existing file a createFile method call to a create operation that creates a new file and a createPath method call to a create operation that creates a new directory. The method calls may further include a deletePath method call to a delete operation that deletes a file and or directory at a specified path and a movePath method call to a move operation that moves a file or directory to a specified path. Because the move operation is associated with an explicit method call API may be able to track the location and movement of a unique file over time. On the other hand a client application for accessing online storage system may lack the ability to perform such tracking because the client application executes a move operation by deleting a file or directory from one location and creating a file or directory in another location.

The interface may specify other portions of filesystem synchronization state using a set of properties including a completedFirstSync property that indicates the completion of the first synchronization of metadata e.g. the ready state described above and a running property that indicates if the filesystem is running e.g. the running state . The interface may also include a Status property that provides states associated with DBSyncStatus. 

Finally the interface may provide one or more change states associated with paths directories and or files in the filesystem. In particular the interface may include a forPath change state that enables notification of changes to a specific path in the filesystem. The interface may also include a forPathAndChildren change state that enables notification of changes to a path and files and or directories located directly beneath a path and or a forPathAndDescendants change state that enables notification of changes to a path and all files and or folders located somewhere beneath a path.

Application and or synchronization apparatus may use information provided by synchronization state and filesystem synchronization state to synchronize data . For example if synchronization state includes the cached state synchronization apparatus may access data from cache . If synchronization state does not include the cached state synchronization apparatus may access data from online storage system . If a newer version of data is available synchronization apparatus may access the newer version from cache and or online storage system . Finally if data is not available synchronization apparatus may indicate the error state.

In other words application may use a single API to access both local storage e.g. cache on electronic device and online storage system . Moreover synchronization state and filesystem synchronization state may expose information related to synchronization of data and metadata that allows application to manage changes to data and metadata newer versions of data and or errors associated with the synchronization. In other words API may improve the efficiency ease and or effectiveness of synchronizing data and or metadata between application and online storage system .

Those skilled in the art will appreciate that the system of may be implemented in a variety of ways. As mentioned above online storage system may utilize a number of storage mechanisms and or filesystem architectures to store data and or metadata . Similarly synchronization apparatus and communication apparatus may be provided by various components and or devices. For example synchronization apparatus and or communication apparatus may be implemented using a library on electronic device online storage system and or a device e.g. server that acts as an intermediary between electronic device and online storage system . Moreover interaction between application and API may be enabled through a variety of programming languages data types and structures operations states and or calls.

Initially synchronization of the data between an electronic device and the online storage system is enabled through an API with an application on the electronic device operation . The API may include a set of method and or function calls that the application may invoke to perform operations related to such data synchronization.

The API is also used to provide a synchronization state of the data to the application operation . The synchronization state may describe synchronization between the data on the online storage system and a copy of the data in a cache on the electronic device. For example the synchronization state may include a download state an upload state an idle state a transfer progress a cached state and or an error state. The synchronization state may then be used to access data during synchronization of the data as described in further detail below with respect to .

Next synchronization of metadata for a filesystem containing the data with the electronic device is enabled through the API operation . Synchronization of the metadata may be enabled using an open operation a create operation a delete operation and or a move operation.

Finally the API is used to provide a filesystem synchronization state of the filesystem to the application operation . The filesystem synchronization state may include a metadata synchronization state an online state a running state a ready state and or a change state. In addition the change state may be associated with a path a directory and or a file in the filesystem. The synchronization state and or filesystem synchronization state may enable robust synchronization of both the data and metadata for the application which in turn may improve use of the online storage system by the application.

First access to the data may be based on the inclusion of a cached state in the synchronization state of the data operation . The cached state may indicate the presence of the data on a local cache of the electronic device. The inclusion of the cached state in the synchronization state may thus result in accessing of the data from the cache operation while the absence of the cached state in the synchronization state may require access to the data from the online storage system operation .

Accessing the data from the online storage system may further be based on an availability of the data operation . For example the data may not be available if the online storage system is not available and or the electronic device lacks a network connection with the online storage system. If the data is not available an error state is indicated operation to facilitate handling of the error state and or subsequent access to the data. If the data is available no error state is indicated.

A newer version of the data may also be available operation from the cache and or the online storage system. If a newer version is not available e.g. does not exist is not accessible etc. the existing version of the data is accessed.

If the newer version is available the newer version is accessed operation . For example the existing version of the data from the cache and or online storage system may continue to be accessed using operations while the newer version is configured for access e.g. downloaded . Once the newer version is ready to be accessed the existing version is replaced with the newer version.

Computer system may include functionality to execute various components of the present embodiments. In particular computer system may include an operating system not shown that coordinates the use of hardware and software resources on computer system as well as one or more applications that perform specialized tasks for the user. To perform tasks for the user applications may obtain the use of hardware resources on computer system from the operating system as well as interact with the user through a hardware and or software framework provided by the operating system.

In one or more embodiments computer system provides a system for managing access to data associated with an online storage system. The system may include a synchronization apparatus that enables synchronization of the data between an electronic device and the online storage system through an API with an application on the electronic device. The system may also include a communication apparatus that uses the API to provide a synchronization state of the data to the application. The synchronization state may include a download state an upload state an idle state a transfer progress a cached state and or an error state.

The synchronization apparatus may also enable synchronization of metadata for a filesystem containing the data with the electronic device through the API and the communication apparatus may use the API to provide a filesystem synchronization state of the filesystem to the application. The filesystem synchronization state may include a metadata synchronization state an online state a running state a ready state and or a change state.

In addition one or more components of computer system may be remotely located and connected to the other components over a network. Portions of the present embodiments e.g. communication apparatus synchronization apparatus etc. may also be located on different nodes of a distributed system that implements the embodiments. For example the present embodiments may be implemented using a cloud computing system that provides an API for synchronizing data between a set of remote electronic devices and a storage mechanism associated with the cloud computing system.

The foregoing descriptions of various embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention.

