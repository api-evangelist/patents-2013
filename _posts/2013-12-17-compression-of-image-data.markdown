---

title: Compression of image data
abstract: Image content may be compressed using a plurality of block truncation coding schemes resulting in a plurality of compressed versions of the image content. The plurality of compressed versions may be combined together into a single data structure. Prior to combining the plurality of compressed versions, each compressed version may be further compressed. In one embodiment, a data structure containing a plurality of block truncation encoded format versions of image content may be received. Rendering hardware-compatible block truncation encoded content from the plurality of compressed versions may be determined and provided to rendering hardware. The hardware may then decode the selected one block truncation encoded format for display. In one embodiment, each of the received plurality of block truncation encoded content versions may be further compressed. Before providing the selected version to the hardware for decoding, the further compression may be decompressed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08761528&OS=08761528&RS=08761528
owner: Adobe Systems Incorporated
number: 08761528
owner_city: San Jose
owner_country: US
publication_date: 20131217
---
This application is a divisional of and claims priority to U.S. patent application Ser. No. 13 035 569 filed Feb. 25 2011 entitled Compression of Image Data the disclosure of which is incorporated by reference herein in its entirety.

This disclosure relates generally to compression and more specifically to compression of image content.

Image data for texturing which can be very large is typically stored in resident memory of graphics hardware e.g. graphics processing units GPUs for use by the graphics hardware. Many GPUs implement some scheme of compression for the texture images which may be hardware specific allowing the GPU to read the compressed image directly from memory. For example at run time image data is encoded into a format that is compatible with a particular GPU and passed to GPU memory. The GPU can then decode and render the image data.

This disclosure describes techniques and structures for asymmetrical compression and decompression of data. In one embodiment content such as image content may be received. The content may be encoded using a plurality of block truncation coding schemes resulting in a plurality of block truncation encoded versions of the image content. The plurality of block truncation encoded versions may be combined together into a single data structure. In one embodiment prior to combining the plurality of block truncation encoded versions each block truncation encoded version may be further compressed. In one embodiment further compression with a compression algorithm different from a block truncation coding scheme may be applied to the entirety of each block truncation encoded version. In one embodiment each block truncation encoded version may be split into constituent components and may be further compressed by constituent component type with a compression algorithm different from a block truncation coding scheme.

In one embodiment a data structure containing a plurality of block truncation encoded image content versions may be received. The data structure may be read and a block truncation encoded version that is compatible with a particular piece of rendering hardware may be determined and provided to the rendering hardware. The hardware may then decode the selected one block truncation encoded format for display. In one embodiment each of the received plurality of block truncation encoded format versions may be further compressed with compression algorithm different from a block truncation coding scheme. Before providing the selected version to the hardware for decoding the further compression may be decompressed.

In the following detailed description numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and is generally considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

 First Second etc. As used herein these terms are used as labels for nouns that they precede and do not imply any type of ordering e.g. spatial temporal logical etc. . For example in a computer readable storage medium having multiple algorithms the terms first and second algorithms can be used to refer to any two of the algorithms. In other words the first and second algorithms are not limited to logical algorithms 0 and 1.

 Based On. As used herein this term is used to describe one or more factors that affect a determination. This term does not foreclose additional factors that may affect a determination. That is a determination may be solely based on those factors or based at least in part on those factors. Consider the phrase determine A based on B. While B may be a factor that affects the determination of A such a phrase does not foreclose the determination of A from also being based on C. In other instances A may be determined based solely on B.

Digital image editing applications executed on a computing device may be used to manipulate enhance transform create and render images graphics and videos such as vector graphics 3D graphics and video. Digital image editing applications may be used to render modify and edit such objects according to various embodiments described herein and may use an application programming interface API such as OpenGL DirectX or Direct3D.

Various embodiments of methods and apparatus for encoding image content and combining the encoded image content as well as for selecting a version of compressed media content and providing the selected format to rendering hardware are described. Some embodiments may include a means for encoding image content and combining the encoded image content and or a means for selecting a version of encoded content and providing the selected version to rendering hardware. For example an encoding module may receive image content as input and compress the image content with a block truncation coding algorithm. In one embodiment encoding module may further compress the same content using a different compression algorithm. A combining module may combine each of the differently compressed content into a single data structure. A selecting module may select an appropriate format of compressed image content for a particular piece of hardware. Selecting module may further provide the selected version to rendering hardware. The encoding combining and selecting modules may in some embodiments be implemented by program instructions stored in a computer readable storage medium and executable by one or more processors of a computing apparatus. The computer readable storage medium may store program instructions executable by the one or more processors to cause the computing apparatus to perform encoding image content and combining the encoded image content and or selecting a version of compressed image content and providing the selected version to rendering hardware as described herein. Other embodiments of the encoding combining and selecting modules may be at least partially implemented by hardware circuitry and or firmware stored for example in a non volatile memory.

Turning now to one embodiment for encoding image content and combining encoded versions is shown. While the blocks are shown in a particular order for ease of understanding other orders may be used. In some embodiments the method of may include additional or fewer blocks than shown. Blocks may be performed automatically or may receive user input.

As indicated at image content may be received. Image content may include two dimensional 2D image data e.g. texture data vector graphics RGB data a frame of a video etc. For example image content may include the 2D wood texture of a 3D graphic of a fence with a 2D wood texture. In such an example the 2D image portion the wood texture may be used for texturing in a 3D rendering of the fence. The texture data may be received in RAW format.

As shown at the image content may be encoded into different block truncation encoded versions using a plurality of different block truncation coding BTC schemes. A block truncation encoded version of image content may be referred to herein as BTC content or a BTC version. BTC schemes may be asymmetric. Further the BTC schemes may be block based texture compression formats with fixed compression ratios. A fixed compression ratio may describe a compression format that compresses pixel blocks that are all of the same size. This is in contrast to a block compression scheme such as JPEG where every compressed block may have a different size. In one embodiment the BTC schemes may encode each 4 4 pixel block of the image content as 32 bits. A larger fixed compression ratio may yield greater compression at the cost of reduced quality. Likewise a smaller fixed compression ratio may yield lesser compression but may result in higher quality compression. Regardless of size such an encoding scheme may be lossy in nature. BTC content encoded with a fixed compression ratio may however enable a memory controller for example a memory controller of a GPU to read directly from the hardware. Some examples of BTC schemes with a fixed compression ratio that may be used in various embodiments include S3 Texture Compression S3TC which may also may known as DXTn or DXTC PVRTC I PVRTC II and Ericsson Texture Compression ETC . Each BTC version may be compatible with certain graphics hardware. For example one GPU may be compatible with S3TC encoded content while another GPU may be compatible with ETC encoded content. In one embodiment the image content may be encoded with each of S3TC PVRTC and ETC schemes such that the image content may be compatible with a broad range of hardware. Various BTC schemes may be included in a library on a server from which the encoding may be performed.

At the different block truncation encoded versions of the image content may be combined into a single data structure. For instance in an embodiment where the image content is encoded compressed using each of S3TC PVRTC and ETC schemes the encoded versions e.g. S3TC encoded image content PVRTC encoded image content and ETC encoded image content may be combined into a single data structure. The single data structure may be a single file for storage loading and or transmission. In one embodiment the combined single data structure may be structured by block truncation encoded version. Accordingly in the example with S3TC PVRTC and ETC versions the first portion of the data structure may be the S3TC encoded content the middle portion the PVRTC encoded content and the last portion the ETC encoded content. The data structure may be structured in a different manner than sequentially by format type. In one embodiment each encoded type may be divided before combining into the single data structure such that the compressed formats may be interspersed throughout the data structure for example by channel. The data structure may include headers or other formatting so that the appropriate portions of the data structure may be parsed by a media content delivery protocol. The file may then be stored to a storage medium e.g. a hard disk or may be delivered to a client.

At and image content may be received and may be encoded into different block truncation encoded versions using a plurality of different block truncation coding BTC schemes. Accordingly the receiving and encoding of blocks may operate in the same or substantially the same manner as blocks of respectively.

As shown at the block truncation encoded versions of the image content may be further encoded using a compression algorithm that is different from any of the block truncation encoding schemes used at . Further encoding may provide additional compression to the already compressed BTC content. In some manners BTC schemes may not provide the most efficient compression. Moreover additional compression may provide a more efficient encoding of the image content and may allow the combined data structure to be used in additional applications. In one embodiment one or more of the BTC content versions may be compressed using a generalized algorithm e.g. LZMA over the full BTC content. BTC content may include words composed of constituent components as described at . In an embodiment where the entire BTC content is encoded using a single overall compression algorithm the words may not need to be de interleaved into constituent components before performing the additional encoding. By splitting into constituent components however additional bandwidth and performance gains may be achieved. If the combined file may not be used for transmission though bandwidth considerations may not be as significant and an overall generalized additional compression of the BTC content may be sufficient.

As illustrated at one or more of the block truncation encoded content versions may be separated into constituent components. Block truncation encoded versions of image content such as S3TC PVRTC and ETC versions may each consist of constituent components or channels. The number of channels and types of channels may vary based on the type of BTC. As one example the constituent components of BTC content may include an image part and a residual part. The image part may include two color components and the residual part may include a selector modifier component. The two color components and the selector modifier component may be interleaved into words. In one embodiment separating the block truncation encoded content version into constituent components may include de interleaving or splitting the block truncation encoded content into its respective image part and residual part. illustrate examples for splitting DXT1 content PVRTC content and ETC1 content into constituent components respectively. In one embodiment PVRTC content may need to be de twiddled before splitting the content.

At one type of constituent component may be encoded with a compression algorithm. The type of constituent component may correspond to the image portion of the compressed content. For the compressed content each stream e.g. image part residual part may be compressed using an algorithm that is different from the BTC schemes used in the initial encoding. Some streams may tolerate lossy compression algorithms while other streams may tolerate lossless compression algorithms. In one embodiment the two color image streams may be compressed using color compression technologies such as JPEG PNG JPEG XR which may be lossless or lossy.

As shown at another type of constituent component may be encoded with another compression algorithm. The another type of constituent component may in some embodiments correspond to the residual part of the BTC content. Similar to encoding the image part of the BTC content the residual part of the BTC content may also be compressed using an algorithm that is different from the BTC schemes used in the initial encoding. In one embodiment the algorithm used to compress the residual part of the BTC content may also be different from the algorithm used to compress the image part of the BTC content. For example the selector modifier stream may include noisy data and may be compressed using an all purpose standard image compression algorithm like LZ77 Huffman or LZMA which may be lossless.

Turning back to at the double compressed block truncation encoded versions of the image content may be combined into a single data structure. Block may be substantially similar to block with the exception that one or more of the BTC versions may include an additional layer of compression generalized or by constituent component type before combining into the single data structure. Double compressed or doubly compressed refers to the additional layer of compression encoding.

Packaging multiple block truncation encoded versions of image content may offer many advantages. First it may allow content creators to design texture packages that support most existing GPUs. Further using asymmetric image compression schemes such as block truncation encoding schemes at the time of content authoring may allow media players to avoid recompression at run time thereby reducing latency. Moreover by further encoding the multiple block truncation encoded versions additional time bandwidth and storage gains may be achieved.

An example encoding and combination of media content which may correspond to one or more of the encoding techniques of may be represented as follows where ATF format may be a data stream for storage loading and or transmission 

The data in this example is represented in three different block truncation coding formats DXT1 PVRTC and ETC1. Respective portions of each of the three BTC versions are further compressed with LZMA and JPEG XR. For example the noisy channel portion may be compressed with LZMA and the color channel portions may be compressed with JPEG XR. Note that the DXT1 data is split differently than are the PVRTC and ETC1 data. In the example the DXT1 data includes a single LZMA compressed portion while the PVRTC and ETC1 data each include two LZMA compressed portions corresponding to top and bottom data.

Applying additional compression to already compressed content and packaging the doubly compressed media content together into a single data structure may yield a multi format data structure that is smaller than any of the compressed versions individually. In other words a data structure containing each of S3TC PVRTC and ETC encoded content with each compressed a second time may be smaller than a data structure that contains only one of S3TC PVRTC or ETC data. In addition by using different compression schemes for different parts of the BTC content patterns and predictability for channels that can tolerate lossy algorithms may be exploited and generalized lossless algorithms may be applied to noisy generalized channels. As a result an improved overall compression ratio may be achieved.

Turning now to one embodiment for selecting a version of compressed media content and providing the selected version to rendering hardware is shown. While the blocks are shown in a particular order for ease of understanding other orders may be used. In some embodiments the method of may include additional or fewer blocks than shown. Blocks may be performed automatically or may receive user input.

At a data structure may be received for example at a computing device that may include a plurality of different block truncation encoded versions of image content. In one embodiment a media content delivery protocol e.g. media player on a computing device may receive the data structure with the multiple BTC versions. The data structure may be received in one embodiment at run time. The media player may reside on a computing device and may utilize a scripting engine. The computing device may include multiple processors. For example the multiple processors may include one or more CPUs and one or more GPUs. The plurality of different BTC versions may include DXT1 ETC1 PVRTC I PVRTC II among other BTC versions. The received data structure may be in the ATF format shown above.

As indicated at which of the plurality of block truncation encoded versions is compatible with rendering hardware e.g. GPU may be determined. A GPU of the computing device may include the capability to encode and decode a certain type of BTC format. In one embodiment the media player may detect at run time which BTC format is compatible with the available GPU on the computing device. For example the media player may detect that the GPU is compatible with ETC texture compression. Accordingly the media player may determine that the ETC encoded content is the appropriate format for the rendering hardware of the computing device. In one embodiment a media player may detect rendering hardware before run time e.g. at power up at period intervals etc. such that by the time the data structure is received at the media player already knows which format is compatible with the rendering hardware. In such a case when the data structure is received by the media player the media player may not need to determine which BTC format is hardware compatible but instead may provide the compatible BTC content directly to the rendering hardware as in block . In one embodiment the decompressor s front end may receive the data structure and select the hardware appropriate format. The overall data structure may include formatting and or headers that may be parsed so that the appropriate format may be selected and provided to the rendering hardware for decoding. In one embodiment multiple GPUs may exist on a computing device each of which may be compatible with various BTC formats. The player may prioritize based on computing device and or user preferences to determine which format to select. In one embodiment each compatible format may be selected and at provided to the appropriate hardware capable of decoding the data.

As illustrated at the determined compatible block truncation encoded version may be provided to rendering hardware. In one embodiment the determined selected BTC content may be directly uploaded to memory of the graphics hardware such as a GPU and may be decoded by the GPU. Thus if the GPU is ETC format compatible then the ETC encoded content may be passed from the media player to the GPU for rendering the image content.

As shown at a data structure may be received for example at a computing device that may include a plurality of double compressed versions of image content. In one embodiment a double compressed version may include image content first encoded with a block truncation encoding scheme and encoded a second time with a compression algorithm that is not a block truncation encoding scheme. As in block a media content delivery protocol e.g. media player on a computing device may receive the data structure with the multiple BTC versions. In one embodiment the received BTC versions may be further encoded. Each version may be further encoded with an overall compression algorithm e.g. LXMA Huffman etc. or may be further encoded by channel such that multiple additional compression algorithms may be used. For instance color channels may be further compressed using JPEG JPEG XR PNG or other comparable schemes while selector channels may be compressed using an all purpose compression algorithm such as LZ77 Huffman LZMA or other comparable algorithms. Thus the received data structure may in one embodiment include multiple BTC versions with each BTC version including additional compression which may be a different additional compression for different portions of the BTC content.

At which of the plurality of double compressed versions is compressed with a BTC scheme compatible with rendering hardware may be determined. Block may operate in the same or substantially the same manner as blocks of .

At the additional layer of compression the non block truncation coding compression of the determined double compressed version may be decoded. In various embodiments the selected data structure may include an additional layer of encoding other than the BTC encoding. For example the stream may be further compressed using an algorithm such as LZMA or multiple algorithms. In one embodiment the additional compression may be decompressed before the BTC content is provided to the rendering hardware at . For example the CPU may decode any LZMA and or JPEG XR compression for example and provide the BTC encoded media to the GPU. In other words the decoding may be performed in the opposite order in which the media content was encoded. Thus the last levels of compression may be decoded first and followed sequentially until reaching the initial compression. In some embodiments various levels of compression may be decoded at the CPU and or GPU. In one embodiment only the selected BTC version may have its additional compression decompressed such that resources may not be used on BTC versions that may not be compatible with the rendering hardware of a computing device. In some embodiments the BTC encoded format may include de interleaved words which may have been de interleaved to optimize compression e.g. JPEG XR for color channels and LZMA for selector channels . In such embodiments before providing the BTC encoded content to the GPU at the words may be re interleaved.

As illustrated at the determined compatible block truncation encoded version which may have had additional compression decompressed at may be provided to rendering hardware of the computing device. In one embodiment the determined selected BTC content may be directly uploaded to memory of the graphics hardware such as a GPU and may be decoded by the GPU. Thus if the GPU is ETC format compatible then the ETC encoded content may be provided from the media player to the GPU for rendering the image content.

Returning to the ATF format detailed above consider a media player running on a system that supports ETC1. The decompressor s front end may receive data in the example ATF format above. A software client may parse the header of the formatted data and select the appropriate format for the system s hardware. In the above example the software client may skip over the DXT1 and PVRTC data and detect the proper compressed texture type ETC1. The software client may decode decompress the ETC1 data. Next the software client may interleave the ETC1 data such that the resulting interleaved ETC 1 data may be fully compatible with any hardware requirements. The interleaved ETC 1 data may be passed directly to the GPU where the GPU may render the image data. For example the GPU may render texture as part of a 3D scene.

By receiving multiple BTC formats of media content in a single stream recompressing textures on the client which may be lead to run time delays and additional run time memory requirements may be avoided. As a result quality and performance of the rendering may be improved. Further including the capability to select an appropriate format from multiple formats may further result in quality and performance gains by not requiring unusable formats to be decompressed as well.

Client may include one or more processors such as CPU and GPU . CPU may include a media player which may receive single data structure and non block truncation decoder . Media player may determine a BTC version compatible with GPU and may provide the BTC version to non block truncation decoder if additional compression is to be removed. CPU may provide the resulting decompressed still BTC encoded content to GPU for storage to GPU memory. GPU may include block truncation decoder which may decode the GPU received BTC content for rendering at a display.

Embodiments of the client and server and or the various encoding combining selecting and determining techniques as described herein may be executed on one or more computer systems which may interact with various other devices. One such computer system is illustrated by . In different embodiments computer system may be any of various types of devices including but not limited to a personal computer system desktop computer laptop notebook or netbook computer mainframe computer system handheld computer workstation network computer a camera a set top box a mobile device a consumer device video game console handheld video game device application server storage device a peripheral device such as a switch modem router or in general any type of computing or electronic device.

In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard and display s . In some embodiments it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions or instances of embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements.

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

In some embodiments at least one processor may be a GPU. A GPU may be considered a dedicated graphics rendering device for a personal computer workstation game console or other computing or electronic device. Modern GPUs may be very efficient at manipulating and displaying computer graphics and their highly parallel structure may make them more effective than typical CPUs for a range of complex graphical algorithms. For example a graphics processor may implement a number of graphics primitive operations in a way that makes executing them much faster than drawing directly to the screen with a host central processing unit CPU . In various embodiments the image processing methods disclosed herein may at least in part be implemented by program instructions configured for execution on one of or parallel execution on two or more of such GPUs. The GPU s may implement one or more APIs that permit programmers to invoke the functionality of the GPU s . Suitable GPUs may be commercially available from vendors such as NVIDIA Corporation ATI Technologies AMD and others.

GPUs such as one or more of processors may be implemented in a number of different physical forms. For example GPUs may take the form of a dedicated graphics card an integrated graphics solution and or a hybrid solution. The dedicated graphics card may be a 3D graphics card. GPU may interface with the motherboard by means of an expansion slot such as PCI Express Graphics or Accelerated Graphics Port AGP and thus may be replaced or upgraded with relative ease assuming the motherboard is capable of supporting the upgrade. However a dedicated GPU is not necessarily removable nor does it necessarily interface the motherboard in a standard fashion. The term dedicated refers to the fact that hardware graphics solution may have RAM that is dedicated for graphics use not to whether the graphics solution is removable or replaceable. Dedicated GPUs for portable computers may be interfaced through a non standard and often proprietary slot due to size and weight constraints. Such ports may still be considered AGP or PCI express even if they are not physically interchangeable with their counterparts.

Integrated graphics solutions or shared graphics solutions are graphics processors that utilize a portion of a computer s system RAM rather than dedicated graphics memory. For instance modern desktop motherboards normally include an integrated graphics solution and have expansion slots available to add a dedicated graphics card later. As a GPU may be extremely memory intensive an integrated solution finds itself competing for the already slow system RAM with the CPU as the integrated solution has no dedicated video memory. For instance system RAM may experience a bandwidth between 2 GB s and 8 GB s while most dedicated GPUs enjoy from 15 GB s to 30 GB s of bandwidth. Hybrid solutions may also share memory with the system memory but may have a smaller amount of memory on board than discrete or dedicated graphics cards to make up for the high latency of system RAM. Data communicated between the graphics processing unit and the rest of the computer system may travel through a graphics card slot or other interface such as I O interface of .

Note that program instructions may be configured to implement a graphics application as a stand alone application or as a module of another graphics application or graphics library in various embodiments. For example in one embodiment program instructions may be configured to implement graphics applications such as painting editing publishing photography games animation and or other applications and may be configured to provide the functionality described herein. In another embodiment program instructions may be configured to implement the techniques described herein in one or more functions or modules called by another graphics application executed on GPU and or processor s . These modules may be executable on one or more of CPUs and or GPUs to cause computer system to provide the functionality described herein. The graphics application may be implemented in various embodiments using any desired programming language scripting language or combination of programming languages and or scripting languages e.g. C C C Java Perl etc. For example in one embodiment the graphics application may be JAVA based while in another embodiments it may be implemented using the C or C programming languages. In other embodiments the graphics application may be implemented using specific graphic languages specifically for developing programs executed by specialized graphics hardware such as a GPU. In addition the graphics application may be embodied on memory specifically allocated for use by graphics processor s such as memory on a graphics board including graphics processor s . Program instructions may also be configured to render images and present them on one or more displays as the output of an operation and or to store image data in memory and or an external storage device s in various embodiments.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing desired functions such as those described above for embodiments of an encoding module a combining module a selecting module and a decoding module are shown stored within system memory as program instructions and data storage respectively. In other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from system memory or computer system . Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or CD DVD ROM coupled to computer system via I O interface . Program instructions and data stored via a computer accessible medium may be transmitted by transmission media or signals such as electrical electromagnetic or digital signals which may be conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices . In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. In addition in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems or between nodes of computer system . In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data by one or more computer system . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

As shown in memory may include program instructions configured to implement embodiments of an encoding module a combining module a selecting module and a determining module as described herein and data storage comprising various data accessible by program instructions . In one embodiment program instructions may include software elements of embodiments of encoding combining selecting and or determining modules as illustrated in the above Figures. Data storage may include data that may be used in embodiments. In other embodiments other or different software elements and data may be included.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of encoding combining selecting and or determining modules as described herein. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions including a computer personal computer system desktop computer laptop notebook or netbook computer mainframe computer system handheld computer workstation network computer a camera a set top box a mobile device network device internet appliance PDA wireless phones pagers a consumer device video game console handheld video game device application server storage device a peripheral device such as a switch modem router or in general any type of computing or electronic device. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Accordingly the present disclosure may be practiced with other computer system configurations.

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc. as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent example embodiments of methods. The methods may be implemented in software hardware or a combination thereof. The order of method may be changed and various elements may be added reordered combined omitted modified etc.

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the disclosure embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

