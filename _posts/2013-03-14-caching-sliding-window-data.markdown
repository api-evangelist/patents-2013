---

title: Caching sliding window data
abstract: Disclosed are methods, systems, paradigms and structures for caching data associated with a sliding window in computer systems. A sliding window can include a time window that progresses with time, and the data can include time series data. As time progresses, the sliding window changes bringing in new data. The cache is updated with new data as and when the sliding window moves. The sliding window data is cached at various granularity levels. The method includes storing a first portion of the data at a first granularity level and a second portion at a second granularity level. The data is cached at various granularity levels in order to effectively use the cache considering at least cache updating criteria such as (i) number of times a storage unit is queried to retrieve the data for updating the cache, (ii) the day/date/time at which the storage unit is queried.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141723&OS=09141723&RS=09141723
owner: Facebook, Inc.
number: 09141723
owner_city: Menlo Park
owner_country: US
publication_date: 20130314
---
This invention generally relates to caching data in computer related technologies. More specifically the invention relates to caching data that is associated with a sliding window.

In computer related technologies certain applications such as reports are generated to obtain information on various aspects. For example in a social networking environment reports may be generated for obtaining data associated with a sliding window. The data can include information such as the list of users who visited a particular website in the last seven days number of comments made by users in the last hour etc. As time progresses the sliding window moves and new data is generated. Obtaining results from the database every time the sliding window moves or every time the report is generated consumes significant computing resources and causes a significant delay.

Some caching techniques have been suggested to cache frequently retrieved sliding window data. The prior caching techniques are not efficient in terms of managing the cache with respect to sliding window data. For example the prior caching techniques are not efficient at least in a determining the buffer sizes to be allotted to cache the data b determining how much old data has to be purged from the cache as new data is added when the sliding window moves c minimizing the number of database calls to obtain the data for updating the cache etc.

The prior caching techniques either made use of a large cache to hold higher resolution sliding window data such as 168 data elements for a week at hourly granularity level or a smaller cache to hold data at lower resolution such as 7 data elements for a week at daily granularity level or even smaller cache that holds data such as 24 data elements for a day at hourly granularity level. That is the prior caching techniques emphasized on cache size or granularity level or storage unit access frequency. The prior caching techniques lacked ability to store data at higher granularity while consuming less memory or accessed the storage unit more frequently.

Introduced here are methods systems paradigms and structures for caching data associated with a sliding window in computer systems. Certain methods include caching data that is associated with a sliding window and that is frequently requested by an application end user. One possible sliding window can include a time window that progresses with time. The data associated with a time window can include time series data such as users or number of users who have visited a particular website in the last one week from current date and time. The time series data is cached to serve queries that may request such time series data often. As time progresses the sliding window changes bringing in new data. The cache is updated with new data as and when the sliding window moves.

The method includes caching data associated with the sliding window at various granularity levels. In one embodiment the method includes storing a first portion of the data at a first granularity level and a second portion of the data at a second granularity level wherein the first granularity level is different from the second granularity level. The data is cached at various granularity levels in order to effectively use the cache considering i the amount of data to be stored that is a size period of the sliding window ii a size of the cache iii the granularity level at which the data is often requested by the end users applications iv cache update criteria such as a a number of times data is obtained from a storage unit to update the cache b the day date time etc. at which the cache is updated with the data from the storage unit etc. Typically data is stored in higher granularity level to obtain a higher resolution sliding window but memory consumption is higher and stored at lower granularity level to minimize memory consumption. In at least some embodiments of the disclosed technique the method facilitates storing data at higher granularity level while consuming less memory.

The second portion of the data corresponds to the earliest period of the sliding window. The first portion corresponds to period later than the earliest period and earlier than the current period. The first portion of the data can be aggregated data that is data at second granularity level aggregated to first granularity level for example to save space in the cache. When the sliding window progresses new data is added to the cache at the current time period in second granularity level and in order to compensate for the cache space occupied by the new data old data associated with the earliest period of the sliding window is removed from the cache in the second granularity level. As the method continues adding new data and dropping old data the point at which there is no more old data in the second granularity level to be dropped the cache is refreshed with a new set of data by obtaining the new set of data from the storage unit.

In an embodiment the granularity levels may be chosen such that the cache is refreshed with new data from the storage unit at a pre defined configurable time of the day for example when the load on the system is below a particular threshold.

Some embodiments of the invention have other aspects elements features and steps in addition to or in place of what is described above. These potential additions and replacements are described throughout the rest of the specification.

References in this description to an embodiment one embodiment or the like mean that the particular feature function or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not necessarily all refer to the same embodiment nor are they necessarily mutually exclusive.

Disclosed are methods systems paradigms and structures for caching data associated with a sliding window in computer systems. Certain methods include caching data that is associated with a sliding window and that is frequently requested by an application end user. One possible sliding window can include a time window that progresses with time. The data associated with a time window can include time series data such as users or number of users who have visited a particular website in the last one week from current date and time. The time series data is cached to serve queries that may request such time series data often. As time progresses the sliding window changes bringing in new data. The cache is updated with new data as and when the sliding window moves.

The method includes caching data associated with the sliding window at various granularity levels. The method includes storing a first portion of the data at a first granularity level and a second portion of the data at a second granularity level wherein the first granularity level is different from the second granularity level. The data is cached at various granularity levels in order to effectively use the cache considering i the amount of data to be stored that is a size period of the sliding window ii a size of the cache iii the granularity level at which the data is often requested by the end users applications iv cache update criteria such as a a number of times data is obtained from a storage unit to update the cache b the day date time etc. at which the cache is updated with the data from the storage unit etc. In at least some embodiments of the disclosed technique the method facilitates storing data at higher granularity level while consuming less memory.

The second portion of the data corresponds to the earliest period of the sliding window. The first portion corresponds to period later than the earliest period and earlier than the current period. The first portion of the data can be aggregated data that is data at second granularity level aggregated to first granularity level for example to save space in the cache. When the sliding window progresses new data is added to the cache at the current time period in second granularity level and in order to compensate for the cache space occupied by the new data old data associated with the earliest period of the sliding is removed from the cache in the second granularity level. As the method continues adding new data and dropping old data the point at which there is no more old data in the second granularity level to be dropped the cache is refreshed with a new set of data by obtaining the new set of data from the storage unit.

In an embodiment the granularity levels may be chosen such that the cache is refreshed with new data from the storage unit at a pre defined configurable time of the day for example when the load on the system is below a particular threshold.

The social networking system comprises one or more computing devices storing user profiles associated with users and or other objects as well as connections between users and other users and or objects. In use users join the social networking system and then add connections to other users or objects of the social networking system to which they desire to be connected. As further described below users of the social networking system may be individuals or entities such as businesses organizations universities manufacturers. The social networking system allows its users to interact with each other as well as with other objects maintained by the social networking system . In some embodiments the social networking system allows users to interact with third party websites and financial account providers.

Based on stored data about users objects and connections between users and or objects the social networking system generates and maintains a social graph. comprising a plurality of nodes interconnected by a plurality of edges. Each node in the social graph represents an object or user that can act on another node and or that can be acted on by another node. An edge between two nodes in the social graph represents a particular kind of connection between the two nodes which may result from an action that was performed by one of the nodes on the other node. For example when a user identifies an additional user as a friend an edge in the social graph is generated connecting a node representing the first user and an additional node representing the additional user. The generated edge has a connection type indicating that the users are friends. As various nodes interact with each other the social networking system modifies edges connecting the various nodes to reflect the interactions.

A user device is a computing device capable of receiving user input as well as transmitting and or receiving data via the network . In one embodiment the user device is a conventional computer system such as a desktop or laptop computer. In another embodiment the user device may be a device having computer functionality such as a personal digital assistant PDA mobile telephone smart phone or similar device. The user device is configured to communicate with the social networking system and or the financial account provider via the network . In one embodiment the user device executes an application allowing a user of the user device to interact with the social networking system . For example the user device executes a browser application to enable interaction between the user device and the social networking system via the network . In another embodiment a user device interacts with the social networking system through an application programming interface API that runs on the native operating system of the user device such as IOS or ANDROID .

The user device are configured to communicate via the network which may comprise any combination of local area and or wide area networks using both wired and wireless communication systems. In one embodiment the network uses standard communications technologies and or protocols. Thus the network may include links using technologies such as Ethernet 102.11 worldwide interoperability for microwave access WiMAX 3G 4G CDMA digital subscriber line DSL etc. Similarly the networking protocols used on the network may include multiprotocol label switching MPLS transmission control protocol Internet protocol TCP IP User Datagram Protocol UDP hypertext transport protocol HTTP simple mail transfer protocol SMTP and file transfer protocol FTP . Data exchanged over the network may be represented using technologies and or formats including hypertext markup language HTML or extensible markup language XML . In addition all or some of links can be encrypted using conventional encryption technologies such as secure sockets layer SSL transport layer security TLS and Internet Protocol security IPsec .

The social networking system includes a web server an action logger an action log a user profile store a content store an edge store a financial account store and a cache management system . In other embodiments the social networking system may include additional fewer or different modules for various applications. Conventional components such as network interfaces security mechanisms load balancers failover servers management and network operations consoles and the like are not shown so as to not obscure the details of the system architecture.

Web server links social networking system via network to one or more user devices the web server serves web pages as well as other web related content such as Java Flash XML and so forth.

Each user of the social networking system is associated with a user profile which is stored in the user profile store . A user profile includes declarative information about the user that was explicitly shared by the user and may also include profile information inferred by the social networking system . In one embodiment a user profile includes multiple data fields each data field describing one or more attributes of the corresponding user of the social networking system . The user profile information stored in user profile store describes the users of the social networking system including biographic demographic and other types of descriptive information such as work experience educational history gender hobbies or preferences location and the like. A user profile may also store other information provided by the user for example images or videos. In certain embodiments images of users may be tagged with identification information of users of the social networking system displayed in an image. A user profile in the user profile store may also maintain references to actions by the corresponding user performed on content items in the content store and stored in the edge store .

A user profile may be associated with one or more financial accounts allowing the user profile to include data retrieved from or derived from a financial account. A user may specify one or more privacy settings which are stored in the user profile that limit information from a financial account that the social networking system is permitted to access. For example a privacy setting limits the social networking system to accessing the transaction history of the financial account and not the current account balance. As another example a privacy setting limits the social networking system to a subset of the transaction history of the financial account allowing the social networking system to access transactions within a specified time range transactions involving less than a threshold transaction amounts transactions associated with specified vendor identifiers transactions associated with vendor identifiers other than specified vendor identifiers or any suitable criteria limiting information from a financial account identified by a user that is accessible by the social networking system . In one embodiment information from the financial account is stored in the user profile store . In other embodiments it may be stored in the financial account store .

The content store stores content items associated with a user profile such as images videos or audio files. Content items from the content store may be displayed when a user profile is viewed or when other content associated with the user profile is viewed. For example displayed content items may show images or video associated with a user profile or show text describing a user s status. Additionally other content items may facilitate user engagement by encouraging a user to expand his connections to other users to invite new users to the system or to increase interaction with the social network system by displaying content related to users objects activities or functionalities of the social networking system . Examples of social networking content items include suggested connections or suggestions to perform other actions media provided to or maintained by the social networking system e.g. pictures or videos status messages or links posted by users to the social networking system events groups pages e.g. representing an organization or commercial entity and any other content provided by or accessible via the social networking system.

The content store also includes one or more pages associated with entities having user profiles in the user profile store . An entity is a non individual user of the social networking system such as a business a vendor an organization or a university. A page includes content associated with an entity and instructions for presenting the content to a social networking system user. For example a page identifies content associated with the entity s user profile as well as information describing how to present the content to users viewing the brand page. Vendors may be associated with pages in the content store allowing social networking system users to more easily interact with the vendor via the social networking system . A vendor identifier is associated with a vendor s page allowing the social networking system to identify the vendor and or to retrieve additional information about the vendor from the user profile store the action log or from any other suitable source using the vendor identifier. In some embodiments the content store may also store one or more targeting criteria associated with stored objects and identifying one or more characteristics of a user to which the object is eligible to be presented.

The action logger receives communications about user actions on and or off the social networking system populating the action log with information about user actions. Such actions may include for example adding a connection to another user sending a message to another user uploading an image reading a message from another user viewing content associated with another user attending an event posted by another user among others. In some embodiments the action logger receives subject to one or more privacy settings transaction information from a financial account associated with a user and identifies user actions from the transaction information. For example the action logger retrieves vendor identifiers from the financial account s transaction history and identifies an object such as a page in the social networking system associated with the vendor identifier. This allows the action logger to identify a user s purchases of products or services that are associated with a page or another object in the content store . In addition a number of actions described in connection with other objects are directed at particular users so these actions are associated with those users as well. These actions are stored in the action log .

The action log may be used by the social networking system to track user actions on the social networking system as well as external website that communicate information to the social networking system . Users may interact with various objects on the social networking system including commenting on posts sharing links and checking in to physical locations via a mobile device accessing content items in a sequence or other interactions. Information describing these actions is stored in the action log . Additional examples of interactions with objects on the social networking system included in the action log include commenting on a photo album communications between users becoming a fan of a musician adding an event to a calendar joining a groups becoming a fan of a brand page creating an event authorizing an application using an application and engaging in a transaction. Additionally the action log records a user s interactions with advertisements on the social networking system as well as other applications operating on the social networking system . In some embodiments data from the action log is used to infer interests or preferences of the user augmenting the interests included in the user profile and allowing a more complete understanding of user preferences.

The action log may also store user actions taken on external websites and or determined from a financial account associated with the user. For example an e commerce website that primarily sells sporting equipment at bargain prices may recognize a user of a social networking system through social plug ins that enable the e commerce website to identify the user of the social networking system . Because users of the social networking system are uniquely identifiable e commerce websites such as this sporting equipment retailer may use the information about these users as they visit their websites. The action log records data about these users including webpage viewing histories advertisements that were engaged purchases made and other patterns from shopping and buying. Actions identified by the action logger from the transaction history of a financial account associated with the user allow the action log to record further information about additional types of user actions.

In one embodiment an edge store stores the information describing connections between users and other objects on the social networking system in edge objects. Some edges may be defined by users allowing users to specify their relationships with other users. For example users may generate edges with other users that parallel the users real life relationships such as friends co workers partners and so forth. Other edges are generated when users interact with objects in the social networking system such as expressing interest in a page on the social networking system sharing a link with other users of the social networking system and commenting on posts made by other users of the social networking system. The edge store stores edge objects that include information about the edge such as affinity scores for objects interests and other users. Affinity scores may be computed by the social networking system over time to approximate a user s affinity for an object interest and other users in the social networking system based on the actions performed by the user. Multiple interactions between a user and a specific object may be stored in one edge object in the edge store in one embodiment. In some embodiments connections between users may be stored in the user profile store or the user profile store may access the edge store to determine connections between users.

The cache management system manages a cache not shown of the social networking system . The cache management system caches the above discussed data associated with a sliding window and that is frequently requested for example by the user device .

As described above with reference to the cache management system can be used to store data associated with a sliding window. In an embodiment the sliding window can include a time window and the data can include time series data. Time series data can include information such as number of applications downloaded by a user in the last one hour number of applications downloaded in a country number of users who have visited a web page on an hourly basis for the last one week etc. The user may generate reports having such data frequently. For example an advertiser hosting a web page in the social networking system may want to know the number of users age and gender of the users who visited their web page in the last forty eight hours. Such report may be generated on a daily basis as the sliding window changes. Further the report may be generated per country per city etc. Accordingly in order to minimize the delay in generating such reports the cache management system can store that data in the cache and respond to the queries by retrieving the data from the cache . The cache may be updated by obtaining the data from a storage unit such as a database. The processor aids in the execution of the instructions to manage the cache .

The cache management system caches data considering i the amount of data to be stored that is a size period of the sliding window ii a size of the cache iii amount of space utilized in the cache at any given time iv the granularity level at which the data is often requested by the end users applications iv cache update criteria such as a a number of times data is obtained from a storage unit to update the cache b the day date time etc. at which the cache is updated with the data from the storage unit etc. to achieve better performance and utilization of the cache. Further in at least some embodiments of the disclosed technique the cache is designed to store data at higher granularity level while consuming less memory.

Consider for example time series data such as number of users who visited a particular website over the last one week from current day and time. The cache management system may store the time series data for the seven day sliding window in the cache at various granularity levels such as minutely hourly daily weekly monthly yearly etc. In an embodiment the granularity level determination module determines the granularity levels based at least in part on amount of space available in the cache amount of data associated with sliding window the granularity level at which the data is requested often by the users and cache update criteria such as a a number of times data is obtained from a storage unit to update the cache b the day date time etc. at which the cache is updated with the data from the storage unit . The cache updating module allocates a plurality of buffers in the cache to store the data. While the size of the buffers storing data at various granularity levels can be the same in at least some embodiments the size of each of the buffers can correspond to the granularity level of the data which the buffer stores.

Consider for example a scenario where the data for a seven day sliding window is cached at daily granularity level. Consider that a buffer is allocated in the cache to store the data at daily level granularity. At the start of the day in the sliding window the buffer is empty since no there is no data for the day yet. The buffer will store data only after the day ends. That is the buffer is empty until the end of the day. The buffer and therefore the cache is under utilized for most of the day. In one embodiment to minimize the under utilization data corresponding to higher granularity level for example hourly granularity level is added to the cache as the hour passes by.

Further the cache management system can store different portions of the sliding window at different granularity levels. In one example data corresponding to a first day of the seven day period from the current day can be stored at first granularity level such as hourly granularity level and data corresponding to the last six days from current day can be stored at second granularity level such as daily granularity level. Further the last six days data can be aggregated data that is data aggregated from hourly to daily or a single six day data. Aggregation may be performed to for example save space in the cache . In an embodiment the granularity level determination module selects the granularity levels for different portions such that i the cache is refreshed with new data from the storage unit at a configurable or pre defined time of the day for example when the load on the social networking system is below a particular threshold and ii the number of accesses to storage unit is minimized.

When the sliding window progresses a new buffer having a size corresponding to the second granularity level is allocated for caching new data corresponding to the current time period and the new data is added to the new buffer in the cache at the current time period of the sliding window in second granularity level. However since a size of the cache is fixed to compensate for the addition of the new buffer an existing buffer of the same size as the new buffer has to be emptied. This means that old data associated with the oldest period of the sliding window which has to be dropped from the cache should also be stored in the second granularity level. Accordingly in addition to new data part of the old data is also cached at second granularity level. As the method continues adding new data and dropping old data the point at which there is no more old data at the second granularity level to be dropped the cache updating module obtains a new set of data for a period of last seven days starting from current time from the storage unit and updates the cache with new set of data by storing different portions of the data at the above selected granularity levels.

The example may be implemented in system such as system of . Consider for example the sliding window of includes time series data such as the users who have visited a particular website over the last seven days from current date and time. The axis represents the time axis for the last seven days. The data may be stored in various granularity levels such as minutely hourly daily weekly etc. in the cache . Typically for a given time period the amount of memory consumed to store data at higher granularity level for example hourly is more than the memory consumed for storing data at lower granularity for example daily .

In the sliding window a portion of the data is stored at six days granularity level wherein data corresponding to each of the six days is stored in a separate buffer. Another portion of data that is data corresponding to the earliest twenty three hours of the seven day period is stored at hour granularity level. The data corresponding to each of the twenty three hours is stored in twenty three buffers.

In an embodiment the six day data is a single computed value obtained by aggregating data for six days. For example consider a scenario where the user is requesting a list of unique users who visited the site over the seven day period. Consider that users Alan Bob visited on day one Bob Charlie on day two Alan Charlie on day three Bob Dylan on day 4 Alan Charlie Eli on day 5 and Frankenstein on day 6. The data for the six day period may be aggregated into one single value such as Alan Bob Charlie Dylan Eli and Frankenstein. In an embodiment data is aggregated to save space in the cache . In an embodiment the data may be aggregated into one or more values. If the user queries often request data on a weekly basis storing data in more number of aggregated values may not provide any additional benefits. However if the queries request data for example on a two day basis the six day data may be aggregated to three two day values. The above example aggregates data based on unique users. However various other aggregation logic may be used to aggregate the data.

As time progresses the sliding window moves and new data corresponding to the current time period is available. For example new data can be available as the time progresses by an hour. So as the time progresses by an hour a new buffer is allocated at the current time period of the sliding window for caching data corresponding to the hour. For example sliding window of represents data in the cache nine hours after the latest time of sliding window . A buffer is added to the sliding window every hour for nine hours to store the data of the corresponding hour. The data in the sliding window corresponds to those nine hours.

Further since a size of the cache is fixed to compensate for the addition of the new data old data associated with the earliest period of the sliding window is dropped from the cache . That is a buffer having the oldest data in the hourly granularity level is emptied. The buffer having oldest data is emptied as and when a buffer for storing new data is added. For example in the sliding window for every new buffer added until the nine hours to store data a buffer having earliest data of sliding window is emptied. The buffer having the earliest data is emptied as and when a new buffer is added to store the data of the past hour. In an embodiment the earliest data is stored in the same granularity level as the new data .

In an embodiment if the earliest data in the sliding window is stored in a lower granularity level for example daily basis than the new data the cache updating module may have to split the data into higher granularity for example hourly to free a buffer of the same size of the newly added data. To split the data the cache updating module may have to obtain the data at the higher granularity level from the storage unit since the cache has no knowledge of what part of the data belongs to which hour. Obtaining the data from the storage unit consumes significant computing resources which therefore decreases the efficiency of the cache . On the other hand if the earliest data is stored in a higher granularity level for example at half hourly than the new data or the same granularity level as the new data then one or two buffers may can be emptied from the earliest period to allocate one new buffer to hold the new data at hourly granularity level. This way the access to the storage unit is minimized.

Referring back to the sliding window of as the time progresses new data is added to the sliding window at the current period and the earliest data is dropped from the sliding window . The sliding window of represents the data in cache fourteen hours after the latest time in sliding window . The sliding window includes a data corresponding to the twenty three hours after the latest time in sliding window and b aggregated six day data as the earliest data of the sliding window . The aggregated six day data is the same as aggregated six day data of of .

In the sliding window as the time progresses further for example by another hour a new buffer corresponding to the hourly granularity level may be allocated to store the new data. However there is no buffer of size corresponding to the hourly granularity level in the earliest data . In order to obtain the buffer of size corresponding to the hourly granularity level the cache updating module may have to split the buffer having the aggregated six day data into higher granularity level for example hourly basis. Since the cache management system does not have the knowledge of the what part of aggregated data belongs to which hour the cache updating module obtains the new set of data for the last seven days starting from the current time and date in sliding window from the storage unit . In an embodiment the cache updating module obtains only the portion of the new set of data that is not already stored in the cache at the hourly granularity level. For example in sliding window the cache updating module may only fetch the data which is not in hourly granularity level from the storage unit . The cache updating module then prepares different portions of the new set of data at different granularity levels as shown in sliding window . That is the earliest twenty three hours of the new set of data is stored at hourly granularity and the later six day data may be aggregated into one or more values.

By selecting appropriate granularity levels the number of times the storage unit is queried to obtain data to update the cache is controlled and minimized. In the above example the cache is updated with data from the storage unit only once in twenty four hours. Further since the cache is updated once every 24 hours the cache management system may be configured to update the cache at a particular time of the day for example when the load on the social networking system is lesser than a specific threshold. In other embodiments other granularity levels may be selected based on other cache updating criteria. For example if updating the cache is permitted every hour then data in the earliest period may be stored in a granularity level lower than granularity level at which the new data is added. Storing the data at lower granularity level may save some space in the cache but the cache may have to be refreshed often.

In the example sliding window is a time window having a size of seven days. However in other embodiments the sliding window may be of different periods. Further the sliding window could be any window based on a different axis other than time. In the example a portion of the time series data is added at hourly dropped at hourly and another portion is aggregated to a single value at six day granularity. However in other embodiments the data may be added at different granularity levels dropped at different granularity levels aggregated at different granularity levels based on i the amount of data to be stored that is a size period of the sliding window ii a size of the cache iii amount of space utilized in the cache at any given time iv the granularity level at which the data is often requested by the end users applications iv cache update criteria such as a a number of times data is obtained from a storage unit to update the cache b the day date time etc. at which the cache is updated with the data from the storage unit .

At step the granularity determination module determines the granularity levels at which the data associated with the sliding window is stored in cache. In an embodiment the granularity levels include minutely hourly daily etc. The granularity determination module determines a first granularity level for storing a first portion of the data as indicated by step . The granularity determination module determines a second granularity level for storing a second portion of the data as indicated by step . The second granularity level is more granular finer than the first granularity level. The first portion corresponds to a first period of the sliding window and the second portion corresponds to a second period of the sliding window. The second period is the earliest period in the sliding in window.

In an embodiment different portions of data is stored at different granularity levels in order to minimize updating the cache by querying the storage unit to obtain new data as the sliding window progresses with time. Further the granularity levels are also determined based at least in part on i the amount of data to be stored that is a size period of the sliding window ii a size of the cache iii amount of space utilized in the cache at any given time iv the granularity level at which the data is often requested by the end users applications iv cache update criteria such as a a number of times data is obtained from a storage unit to update the cache b the day date time etc. at which the cache is updated with the data from the storage unit .

At step the granularity determination module determines the granularity levels at which the data associated with the sliding window is stored in cache. In an embodiment the granularity levels include minutely hourly daily etc. The granularity determination module determines a first granularity level for storing a first portion of the data. The granularity determination module determines a second granularity level for storing a second portion of the data. The second granularity level is more granular finer than the first granularity level. The first portion of the data corresponds to a first period of the sliding window and the second portion of the data corresponds to a second period of the sliding window which is the earliest period of the sliding window. In an embodiment different portions of data is stored at different granularity levels in order to minimize a number of times the cache is updated as the sliding window progresses with time. Every update of the cache involves querying the storage unit to obtain the data which is a resource consuming process.

Further the granularity levels are also determined based at least in part on i the amount of data to be stored that is a size period of the sliding window ii a size of the cache iii amount of space utilized in the cache at any given time iv the granularity level at which the data is often requested by the end users applications iv cache update criteria such as a a number of times data is obtained from a storage unit to update the cache b the day date time etc. at which the cache is updated with the data from the storage unit .

At step the cache updating module allocates a first buffer in the cache to store the first portion of the data at the first granularity level. The first buffer has a buffer size corresponding to the first granularity level. That is the size of the first buffer is a function of the granularity level of the data it stores. At step the cache updating module allocates a second buffer in the cache to store the second portion of the data in second granularity level. The second buffer has a buffer size corresponding to the second granularity level.

At step the cache updating module obtains data associated with the sliding window from the storage unit . The cache updating module obtains the data at the second granularity level. At step the cache updating module aggregates a first portion of the data to a first granularity level. In an embodiment aggregating data from a second granularity level to a first granularity level can include for example aggregating data obtained at hourly level to data at daily level as described with reference to .

At step the cache updating module stores the first portion of the data in the first buffer. At step the cache updating module stores the second portion of the data in the second buffer. As time progresses the sliding window moves and new data becomes available. When the time progresses by a second granularity level at step the cache updating module adds new data to the sliding window at the second granularity level. Adding the new data includes allocating a new buffer of a buffer size corresponding to the second granularity level and storing the new data in the new buffer. Since the size of the cache is fixed the new buffer may obtained by emptying an existing buffer of the same size. At step the cache updating module drops data corresponding to the earliest period of the sliding window. The data is dropped at a second granularity level to free an existing buffer whose size is equal to the new buffer.

In an embodiment the cache updating module adds the new data to the cache directly which may be obtained from any of the various components in the social networking system . The new data is written into the storage unit separately. Writing the new data into the cache directly avoids querying the storage unit which consumes significant computing resources.

At determination step the cache updating module determines whether the time has progressed by second granularity level. Responsive to a determination that the time has not progressed by second granularity level the process waits until the time has progressed by second granularity level. On the other hand responsive to a determination that the time has progressed by second granularity level at step the cache updating module determines whether the sliding window has data corresponding to the earliest period at second granularity level. Responsive to a determination that the sliding window has data corresponding to the earliest period at second granularity level the control is transferred to step to further continue adding new data and dropping earliest data. On the other hand responsive to a determination that the sliding window does not have data corresponding to the earliest period at second granularity level the control is transferred to step process to obtain new data from the storage unit .

The processor s is are the central processing unit CPU of the processing system and thus control the overall operation of the processing system . In certain embodiments the processor s accomplish this by executing software or firmware stored in memory . The processor s may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs trusted platform modules TPMs or the like or a combination of such devices.

The memory is or includes the main memory of the processing system . The memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. In use the memory may contain a code. In one embodiment the code includes a general programming module configured to recognize the general purpose program received via the computer bus interface and prepare the general purpose program for execution at the processor. In another embodiment the general programming module may be implemented using hardware circuitry such as ASICs PLDs or field programmable gate arrays FPGAs .

Also connected to the processor s through the interconnect are a network adapter a storage device s and I O device s . The network adapter provides the processing system with the ability to communicate with remote devices over a network and may be for example an Ethernet adapter or Fibre Channel adapter. The network adapter may also provide the processing system with the ability to communicate with other computers within the cluster. In some embodiments the processing system may use more than one network adapter to deal with the communications within and outside of the cluster separately.

The I O device s can include for example a keyboard a mouse or other pointing device disk drives printers a scanner and other input and or output devices including a display device. The display device can include for example a cathode ray tube CRT liquid crystal display LCD or some other applicable known or convenient display device.

The code stored in memory can be implemented as software and or firmware to program the processor s to carry out actions described above. In certain embodiments such software or firmware may be initially provided to the processing system by downloading it from a remote system through the processing system e.g. via network adapter .

The techniques introduced herein can be implemented by for example programmable circuitry e.g. one or more microprocessors programmed with software and or firmware or entirely in special purpose hardwired non programmable circuitry or in a combination of such forms. Special purpose hardwired circuitry may be in the form of for example one or more ASICs PLDs FPGAs etc.

Software or firmware for use in implementing the techniques introduced here may be stored on a machine readable storage medium and may be executed by one or more general purpose or special purpose programmable microprocessors. A machine readable storage medium as the term is used herein includes any mechanism that can store information in a form accessible by a machine.

A machine can also be a server computer a client computer a personal computer PC a tablet PC a laptop computer a set top box STB a personal digital assistant PDA a cellular telephone an iPhone a Blackberry a processor a telephone a web appliance a network router switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine.

A machine accessible storage medium or a storage device s includes for example recordable non recordable media e.g. ROM RAM magnetic disk storage media optical storage media flash memory devices etc. etc. or any combination thereof. The storage medium typically may be non transitory or include a non transitory device. In this context a non transitory storage medium may include a device that is tangible meaning that the device has a concrete physical form although the device may change its physical state. Thus for example non transitory refers to a device remaining tangible despite this change in state.

The term logic as used herein can include for example programmable circuitry programmed with specific software and or firmware special purpose hardwired circuitry or a combination thereof.

