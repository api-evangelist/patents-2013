---

title: Systems and methods for providing caching for applications with solid-state storage devices
abstract: A computer-implemented method for providing caching for applications with solid-state storage devices may include (1) identifying a plurality of solid-state drives that are available for caching input/output operations, (2) detecting at least one distinguishing hardware property of at least one solid-state drive within the plurality of solid-state drives, (3) determining at least one attribute of an application, and (4) selecting the solid-state drive for caching at least one input/output operation of the application based at least in part on the attribute of the application in combination with the distinguishing hardware property of the solid-state drive. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037792&OS=09037792&RS=09037792
owner: Symantec Corporation
number: 09037792
owner_city: Mountain View
owner_country: US
publication_date: 20130606
---
Computing devices often cache data in a caching mechanism to facilitate fast efficient access to the data. For example a computing device may attempt to access data stored within a mass storage device such as a hard disk drive that is unable to facilitate access to the data as quickly or efficiently as a caching mechanism. In this example the computing device may copy the data from the mass storage device to a caching mechanism such as a solid state drive caching system in order to increase the speed at which the data may be accessed.

Different types of solid state drives may present different benefits and drawbacks for caching data. Some solid state drives may provide very high data transfer rates but may be commensurately expensive. Some solid state drives may provide efficient read performance but may degrade relatively quickly from frequent write operations. Unfortunately configuring a caching system with a solid state drive may present difficult choices to the consumer who may be faced with difficult tradeoffs between cost performance endurance and other factors.

Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for providing caching for applications with solid state storage devices.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for providing caching for applications with solid state storage devices by matching applications to solid state drives for caching based on the attributes of the applications and the distinctive properties of the solid state drives to help ensure that a solid state drive that is better suited for an application is selected as a caching device for the application. In some examples these systems and methods may dynamically select solid state drives for applications switching solid state drives for an application based on changing attributes of the application e.g. changing input output patterns of the application .

In one example a computer implemented method for providing caching for applications with solid state storage devices may include 1 identifying a plurality of solid state drives that are available for caching input output operations 2 detecting at least one distinguishing hardware property of at least one solid state drive within the plurality of solid state drives 3 determining at least one attribute of an application and 4 selecting the solid state drive for caching at least one input output operation of the application based at least in part on the attribute of the application in combination with the distinguishing hardware property of the solid state drive.

In some examples determining the attribute of the application may include determining an input output pattern of input output operations performed by the application. In some examples determining the attribute of the application may include determining a priority level for input output operations performed by the application and or a service level agreement covering the application.

In some examples detecting the distinguishing hardware property of the solid state drive may include detecting a data transfer rate of the solid state drive that differs from a different data transfer rate of an alternative solid state drive within the plurality of solid state drives. In some examples detecting the distinguishing hardware property of the solid state drive may include detecting a write endurance of the solid state drive that differs from an alternative write endurance of an alternative solid state drive within the plurality of solid state drives.

In one embodiment 1 detecting the distinguishing hardware property of the solid state drive may include detecting that the solid state drive may include a single level cell solid state drive 2 determining the attribute of the application may include determining that the application is write intensive according to a predefined write intensity metric and 3 selecting the solid state drive for caching the input output operation of the application may be based at least in part on the solid state drive comprising a single level cell solid state drive in combination with determining that the application is write intensive according to the predefined write intensity metric.

In one embodiment 1 detecting the distinguishing hardware property of the solid state drive may include detecting that the solid state drive may include a multi level cell solid state drive 2 determining the attribute of the application may include determining that the application is read intensive according to a predefined read intensity metric and 3 selecting the solid state drive for caching the input output operation of the application may be based at least in part on the solid state drive comprising a multi level cell solid state drive in combination with determining that the application is read intensive according to the predefined read intensity metric.

In some examples the computer implemented method may further include selecting an alternative solid state drive within the plurality of solid state drives for caching at least one input output operation of an additional application based at least in part on an attribute of the alternative application in combination with a distinguishing hardware property of the alternative solid state drive.

In one embodiment the computer implemented method may further include 1 determining that the attribute of the application may have changed and 2 selecting an alternative solid state drive within the plurality of solid state drives for caching at least one additional input output operation of the application based at least in part on determining that the attribute of the application may have changed in combination with a distinguishing hardware property of the alternative solid state drive.

In some examples the computer implemented method may further include caching the input output operation of the application on the solid state drive.

In one embodiment a system for implementing the above described method may include 1 an identification module that identifies a plurality of solid state drives that are available for caching input output operations 2 a detection module that detects at least one distinguishing hardware property of at least one solid state drive within the plurality of solid state drives 3 a determination module that may determine at least one attribute of an application 4 a selection module that selects the solid state drive for caching at least one input output operation of the application based at least in part on the attribute of the application in combination with the distinguishing hardware property of the solid state drive and 5 at least one processor configured to execute the identification module the detection module the determination module and the selection module.

In some examples the above described method may be encoded as computer readable instructions on a computer readable storage medium. For example a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify a plurality of solid state drives that are available for caching input output operations 2 detect at least one distinguishing hardware property of at least one solid state drive within the plurality of solid state drives 3 determine at least one attribute of an application and 4 select the solid state drive for caching at least one input output operation of the application based at least in part on the attribute of the application in combination with the distinguishing hardware property of the solid state drive.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for providing caching for applications with solid state storage devices. As will be explained in greater detail below by matching applications to solid state drives for caching based on the attributes of the applications and the distinctive properties of the solid state drives the systems and methods described herein may make improve the performance endurance and or cost effectiveness of mixed type solid state drives in caching systems. In some examples by dynamically selecting solid state drives for applications e.g. switching solid state drives for an application based on changing attributes of the application these systems and methods may further improve the performance endurance and or cost effectiveness of mixed type solid state drives in caching systems.

The following will provide with reference to and detailed descriptions of exemplary systems for providing caching for applications with solid state storage devices. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or solid state drives computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device with solid state drives available for caching input output for one or more applications including an application . Computing device may be programmed with one or more of modules . Additionally or alternatively solid state drives may be programmed with one or more of modules .

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or solid state drives facilitate caching in computing device and solid state drives . In some embodiments one or more of modules may cause computing device and or solid state drives to provide caching for applications with solid state storage devices. For example and as will be described in greater detail below identification module may be programmed to identify solid state drives that are available for caching input output operations. Detection module may be programmed to detect at least one distinguishing hardware property of solid state drive . Determination module may be programmed to determine at least one attribute of application . Selection module may be programmed to select solid state drive for caching at least one input output operation of application based at least in part on attribute of application in combination with distinguishing hardware property of solid state drive .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Solid state drives generally represent any type or form of solid state storage device. Examples of solid state drives may include without limitation single level cell solid state drives multi level cell solid state drives enterprise multi level cell solid state drives and triple level cell solid state drives.

As illustrated in at step one or more of the systems described herein may identify a plurality of solid state drives that are available for caching input output operations. For example at step identification module may as part of computing device in identify solid state drives that are available for caching input output operations.

As used herein the phrase solid state drive may refer to any storage device using solid state memory to store data. In some examples the phrase solid state drive may refer to a storage device that stores data persistently. For example a solid state drive may include flash memory e.g. NAND based flash memory and or dynamic random access memory DRAM . In some examples a solid state drive may include no moving mechanical components.

As used herein the term as used herein the term caching may refer to any process that facilitates data access by storing and or making available data that may be likely to be accessed e.g. because the data has recently been read from and or written to .

As used herein the phrase input output operation may refer to any operation to read from and or write to a storage system and or the data that is the subject of any such operation. In some examples the input output operation may be directed to a backing store and one or more of the examples herein may cache the input output operation at a cache e.g. that includes one or more of the plurality of solid state drives .

Identification module may identify the plurality of solid state drives in any suitable manner. For example identification module may operate as a part of a cache manager and identify the plurality of solid state devices as devices available for use in caching operations. For example the cache manager may operate as a part of a file system a filter driver and or a volume manager.

In some examples identification module may identify the plurality of solid state drives as including mixed types of solid state drives. For example identification module may determine that the plurality of solid state drives includes one or more single level cell solid state drives and one or more multi level cell solid state drives. Additionally or alternatively identification module may determine that the plurality of solid state drives includes at least one solid state drive with a property e.g. data transfer rate endurance etc. that differs from a property of at least one other solid state drive within the plurality of solid state drives. In some examples one or more of the systems described herein may perform one or more of the steps described herein e.g. selectively assign applications to particular solid state drives based on identification module having identified mixed types of solid state drives within the plurality of solid state drives.

Returning to at step one or more of the systems described herein may detect at least one distinguishing hardware property of at least one solid state drive within the plurality of solid state drives. For example at step detection module may as part of computing device in detect at least one distinguishing hardware property of solid state drive .

As used herein the phrase hardware property may refer to any property pertaining to a solid state drive as hardware. For example the phrase hardware property may refer to a type design make and or model of a solid state drive. Additionally or alternatively the phrase hardware property may refer to a metric of a solid state drive such as a performance metric an endurance metric etc. In some examples the phrase hardware property may refer to a contextual property of a solid state drive as hardware such as the initial cost of the solid state drive the power consumption of the solid state drive and or the cost of use of the solid state drive. In some examples the hardware property may include a composite property based on the relationship of one or more properties of the solid state drive. For example the hardware property may use a performance per endurance metric a cost per performance metric and or a cost per storage metric.

Detection module may detect the distinguishing hardware property in any suitable manner. For example detection module may use an application programming interface of the solid state drive to retrieve the distinguishing hardware property. In some examples detection module may then tag the solid state drive with metadata describing the distinguishing hardware property. For example detection module may retrieve a model of the solid state drive and or a data transfer rate of the solid state drive and tag the solid state drive with FAST or SLOW based on the retrieved data. Accordingly in some examples detection module may detect the distinguishing hardware property by reading a metadata tag describing the solid state drive e.g. a metadata tag previously applied by detection module and or another system .

In some examples detection module may detect the distinguishing hardware property in comparison with a hardware property of one or more other solid state drives within the plurality of solid state drives. For example detection module may determine that a solid state drive is FAST and tag the solid state drive as such by determining that the solid state drive is faster than one or more alternative solid state drives within the plurality of solid state drives. Accordingly in some examples the distinguishing hardware feature may include a feature that describes the solid state drive relative to one or more of the other solid state drives within the plurality of solid state drives.

Detection module may detect any of a variety of distinguishing hardware properties of the solid state drive. For example detection module may detect a data transfer rate of the solid state drive that differs from a different data transfer rate of an alternative solid state drive within the plurality of solid state drives. For example detection module may detect a read speed and or a write speed e.g. in megabytes per second of the solid state drive.

In some examples detection module may detect a write endurance of the solid state drive that differs from an alternative write endurance of an alternative solid state drive within the plurality of solid state drive. For example detection module may detect a projected maximum program erase cycle count of the solid state drive. As another example detection module may detect an expected write amplification of the solid state drive. Generally detection module may detect any property of the solid state drive that describes how write operations affect the longevity reliability and or performance of the solid state drive.

In some examples detection module may detect that the solid state drive includes a single level cell solid state drive e.g. a solid state drive that uses single level cell technology to store one bit in each cell . Additionally or alternatively detection module may detect that the solid state drive includes a multi level cell solid state drive e.g. a solid state drive that uses multi level cell technology to store more than one bit in each cell . In some examples detection module may detect that the solid state drive includes an enterprise multi level cell solid state drive an eMLC SSD and or a triple level cell solid state drive a TLC SSD .

Using as an example at step detection module may e.g. as a part of cache manager detect that single level cell solid state drive uses single level cell technology that single level cell solid state drive has a high cost per storage unit ratio e.g. relative to multi level cell solid state drive that single level cell solid state drive has a low error rate and or that single level cell solid state drive has a low write endurance.

Returning to at step one or more of the systems described herein may determine at least one attribute of an application. For example at step determination module may as part of computing device in determine at least one attribute of application .

As used herein the term application may refer to any application program process service script and or daemon that may perform input output operations.

As used herein the term attribute as applied to applications may refer to any trait and or property of an application including static attributes e.g. unchanging attributes of the application dynamic attributes e.g. attributes that may change as the state of the application changes intrinsic attributes e.g. attributes that arise from the nature of the application and or extrinsic attributes e.g. attributes that are assigned to the application . Examples of attributes of an application may include an input output throughput of the application a type of file stored to and or read from by the application a priority level assigned to the application a service level requirement of the application a current activity level of the application and or a sensitivity of the application to input output performance.

In some examples determination module may determine the attribute of the application by determining an input output pattern of input output operations performed by the application. For example determination module may determine a projected and or actual amount of reads performed by the application a projected and or actual amount of write performed by the application and or a projected and or actual ratio of reads to writes performed by the application. In some examples determination module may determine a type of file that the application typically handles and or is handling.

In some examples determination module may determine a priority level for input output operations performed by the application. For example determination module may determine a scheduling decision pertaining to the application and or a priority rank assigned to the application. In some examples determination module may determine the priority level of the application relative to at least one other application e.g. that is also configured to using the plurality of solid state drives for caching . In one example determination module may determine a service level agreement that covers the application. For example determination module may identify a minimum throughput and or input output reliability requirement for the application.

In some examples determination module may determine that the application is write intensive according to a predefined write intensity metric. The write intensity metric may be based on any of a variety of criteria. For example the write intensity of the application may be measured according an observed amount and or proportion of write operations by the application. In some examples the write intensity of the application may be measured according to a projected amount and or proportion of writes by the application. For example the write intensity of the application may be based on one or more file types used by the application. For example determination module may determine that the application is write intensive based on the application performing input output operations primarily on dynamic data such as file system metadata.

In some examples determination module may determine that the application is read intensive according to a predefined read intensity metric. The read intensity metric may be based on any of a variety of criteria. For example the read intensity of the application may be measured according an observed amount and or proportion of read operations by the application. In some examples the read intensity of the application may be measured according to a projected amount and or proportion of reads by the application. For example the read intensity of the application may be based on one or more file types used by the application. For example determination module may determine that the application is read intensive based on the application performing input output operations primarily on static data such as video files and or digital image files.

Determination module may determine the attribute of the application in any of a variety of ways. For example determination module may observe the behavior of the application. Additionally or alternatively determination module may uniquely identify the application and query a database for the attribute of the application. In some examples determination module may determine the attribute of the application by receiving a message from the application and or a file system used by the application that indicates the attribute. In some examples determination module may receive a message from the application indicating whether the input output operations of the application are focused on persistent data or on temporary data. In some examples determination module may receive a message from the application indicating whether the application is better adapted for write back caching or write through caching. As another example determination module may receive a message from the application requesting caching by single level cell solid state drive instead of a multi level cell solid state drive or vice versa .

Using as an example at step determination module may determine an attribute of application . For example determination module may determine that application is a write intensive application with a high service level requirement.

Returning to at step one or more of the systems described herein may select the solid state drive for caching at least one input output operation of the application based at least in part on the attribute of the application in combination with the distinguishing hardware property of the solid state drive. For example at step selection module may as part of computing device in select the solid state drive for caching at least one input output operation of application based at least in part on attribute of application in combination with distinguishing hardware property of solid state drive .

Selection module may select the solid state drive based on the combination of the attribute of the application and the distinguishing hardware property in any of a variety of ways. For example selection module may select a solid state drive with a high reliability rating for a write intensive application leaving a solid state drive with a lower reliability rating to cache input output for a read intensive application. Because a read attempt can resort to backing storage in case of a failure in this manner selection module may improve the overall reliability and efficiency of the caching system for the applications that collectively rely on the caching system.

As mentioned earlier in some examples one or more of the systems described herein e.g. detection module may have detected that the solid state drive includes a single level cell solid state drive. Additionally in some examples one or more of the systems described herein e.g. determination module may have determined that the application is write intensive. Accordingly selection module may select the single level cell solid state drive for caching the input output of the write intensive application. In this manner selection module may improve the performance of the application while preventing the application from negatively impacting the endurance of a solid state drive less suited for frequent write operations e.g. a multi level cell solid state drive .

Likewise in some examples one or more of the systems described herein e.g. detection module may have detected that the solid state drive includes a multi level cell solid state drive. Additionally in some examples one or more of the systems described herein e.g. determination module may have determined that the application is read intensive. Accordingly selection module may select the multi level cell solid state drive for caching the input output of the read intensive application. In this manner selection module may provide adequate caching performance for the application while taking advantage of a solid state drive that would be negatively impacted by frequently write operations but that can cache read intensive applications cost effectively.

In some examples selection module may also select an alternative solid state drive within the plurality of solid state drives for caching at least one input output operation of an additional application based at least in part on an attribute of the alternative application in combination with a distinguishing hardware property of the alternative solid state drive.

Using as an example at step selection module may e.g. as a part of cache manager select single level cell solid state drive to cache input output for write intensive application and multi level cell solid state drive to cache input output for read intensive application . Additionally in some examples application module may be configured for a failover. Because the systems and methods described herein may have assigned single level cell solid state drive to cache all input output for application a remote direct memory access network interface card may replicate single level cell solid state drive to a remote caching device to facilitate a more efficient and effective failover.

In some examples one or more of the systems described herein e.g. determination module may determine that the attribute of the application has changed. For example an input output pattern of the application may change over time e.g. with increasing write activity . As another example an assigned priority of the application may change. In these examples selection module may select an alternative solid state drive within the plurality of solid state drives for caching at least one additional input output operation of the application based at least in part on determining that the attribute of the application has changed in combination with a distinguishing hardware property of the alternative solid state drive. Using as an example selection module may determine that application which was write intensive has become read intensive and that application which was read intensive has become write intensive. Accordingly selection module may reassign single level cell solid state drive to cache input output for application and may reassign multi level cell solid state drive to cache input output for application . By dynamically selecting solid state drives for applications based on dynamically changing attributes of the applications the systems and methods described herein may take greater advantage of the particular properties of differing solid state drives to optimize the efficacy and cost efficiency of caching application input output using solid state drives.

As explained above in connection with method in various types of solid state drives may be available in the market with varying levels of performance and cost. Solid state drives with better performance such as single level cell solid state drives may be costlier while solid state drives with inferior performance e.g. multi level cell solid state drives may be less expensive. Additionally some applications may access files more and some may access files less. Furthermore some applications processes and or files may have a greater priority level than others.

In some examples to improve input output performance in a cost effective manner the systems described herein may configure different types of solid state drives under a single cache manager for caching input output. Based on the type of input output and the properties of the solid state drives the cache manager may select a suitable solid state drive for caching the type of input output. For example the cache manager may select a multi level cell solid state drive for caching data for write sensitive applications because the multi level cell solid state drive may be cheaper than a single level cell solid state drive. Alternatively the cache manager may select a single level cell solid state drive for caching data for write centric applications because single level cell solid state drives may handle write operations more robustly e.g. with less cost to the endurance of the drive .

Additionally the cache manager may select solid state devices to cache certain types of data based on an administrator policy. For example the policy may instruct the cache manager to cache data of particular application and or a particular pattern to a particular cache device. This may make replication simpler when replicating data for a specific application. Additionally or alternatively the policy may move cached data faster solid state drive to a slower solid state drive or vice versa based on I O access patterns to utilize solid state drives cost effectively.

In some examples the cache manager may include a separate file system or a filter driver between a virtual file system and the file system used by an application. The cache manager may proactively move pages across fast and slow tiers of solid state drive based cache based on the changing priority of the application. Alternatively the cache manager may operate from a volume manager layer e.g. if solid state drive caching is disabled at the file system layer . In this case the file system may pass information about caching types e.g. persistent temporary write back write through bypass the solid state drives multi level cell solid state drive vs. single level cell solid state drives etc. to the volume manager Additionally for caching decisions from the volume manager level an application may directly pass information about where to cache its input output.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs or Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for providing caching for applications with solid state storage devices.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the phrase information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the phrase information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the phrase endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive solid state drive properties to be transformed transform the properties with attributes of an application output a result of the transformation to a cache manager use the result of the transformation to select a solid state drive for caching I O for the application and store the result of the transformation to a storage device. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

