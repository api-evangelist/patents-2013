---

title: Graphical interface for monitoring the status of concurrent computing units executing a concurrent computing process
abstract: A graphical user interface for an interactive concurrent computing environment is discussed. The graphical interface conveys the concurrent nature of the computing environment and allows a user to monitor the status of the concurrent process being executed. The graphical interface may indicate the status of the process, the status of the various computing units of the process, or the status of groups of computing units. This allows the user to monitor the concurrent process as the process is executing including whether or not computing units of the concurrent process are idle, busy or stopped.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069517&OS=09069517&RS=09069517
owner: The MathWorks, Inc.
number: 09069517
owner_city: Natick
owner_country: US
publication_date: 20131113
---
This application is a continuation of U.S. patent application Ser. No. 11 497 606 filed Jul. 31 2006 which is related to and claims the benefit of U.S. Provisional Patent Application No. 60 799 474 filed May 10 2006. U.S. patent application Ser. No. 11 497 606 filed Jul. 31 2006 is hereby incorporated by reference. This application is also related to U.S. patent application Ser. No. 11 497 881 filed Jul. 31 2006 U.S. patent application Ser. No. 11 497 878 filed Jul. 31 2006 U.S. patent application Ser. No. 11 497 871 filed Jul. 31 2006 now U.S. Pat. No. 7 631 168 and U.S. patent application Ser. No. 11 594 422 filed Nov. 8 2006.

The present invention relates generally to concurrent computing and more specifically to the monitoring of the status of concurrent computing units in a concurrent processing environment.

Engineers scientists mathematicians and educators across a diverse range of industries solve engineering and scientific problems requiring large complex models using computer applications that provide technical computing environments. One such application which provides a technical computing environment is MATLAB a product of The MathWorks Inc. of Natick Mass. MATLAB is a high performance language and a technical computing application that provides mathematical and graphical tools for mathematical computation data analysis visualization and algorithm development. MATLAB integrates numerical analysis matrix computation signal processing and graphics in an easy to use environment where problems and solutions are expressed in familiar mathematical notation without traditional programming. MATLAB is used to solve complex engineering and scientific problems by developing mathematical models that simulate the problem. A model is prototyped tested and analyzed by running the model under multiple boundary conditions data parameters or a number of initial guesses.

As a desktop application MATLAB allows scientists and engineers to interactively perform complex analysis and modeling in a familiar workstation environment. However a single workstation can be limiting due to the size of the problem that can be solved because of the relationship of the computing power of the workstation to the computing power necessary to execute computing intensive iterative processing of complex problems in a reasonable time. As problems require larger and more complex modeling computations become more resource intensive and time consuming. For example a simulation of a large complex aircraft model may take a reasonable amount of time to run once with a specified set of parameters. However the analysis of the problem may also require the model be computed multiple times with a different set of parameters e.g. at one hundred different altitude levels and fifty different aircraft weights to understand the behavior of the model under varied conditions. This would require five thousand computations to analyze the problem as desired and the single workstation would take an unreasonable or undesirable amount of time to perform these simulations. Therefore it is desirable to perform a computation concurrently using multiple workstations when the computation becomes so large and complex that it cannot be completed in a reasonable amount of time on a single workstation.

To address this problem of limited computing power being available on individual systems applications providing technical computing environments that are traditionally used as desktop applications such as MATLAB may be modified to be able to utilize the computing power of concurrent computing such as parallel computing. One problem of concurrent computing is that the user interface is based on a single instance implementation of the application. That is the interface such as the command line is generic to both a single instanced computing environment and a multiple instanced concurrent computing environment. Thus the same interface is used regardless of the number of computing units being utilized. This makes it difficult to differentiate the concurrent nature and monitor the status of each individual computing unit in the parallel processing environment. Accordingly it would be desirable to provide an interface that allows for the differentiating and monitoring of status of computing units in a concurrent processing environment. It would also be desirable to provide an interface that allows a user to target one or more computing units that make up the concurrent computing environment to receive commands.

The illustrative embodiment of the present invention provides a graphical user interface for a concurrent computing environment. The graphical user interface of the present invention conveys the concurrent nature of the computing environment and allows a user to monitor the status of a concurrent process being executed on multiple concurrent computing units. The graphical user interface allows the user to target specific concurrent computer units to receive commands. The graphical user interface also allows the user to target specific concurrent computer units about which the user can receive information about the execution of a concurrent process. The graphical user interface may indicate the status of the concurrent process the status of the various instances of the concurrent process or the status of groups of instances including whether the instances of the concurrent process are idle busy or stopped.

In one aspect of the present invention a method for monitoring the status of a concurrent computing process in a concurrent computing environment includes the step of executing multiple instances of the concurrent computing process. Each instance of the concurrent computing process is executed on one of multiple concurrent computing units. The instances of the concurrent computing process include at least one interactive instance of the concurrent computing process which accepts input from a user and displays output to the user during execution of the instances of the concurrent computing process. The method also includes the step of receiving with a monitoring facility information indicating a current status and current activity for at least one of the concurrent computing units executing instances of the concurrent computing process. The method also displays the information received by the monitoring facility that indicates at least one of the current status and current activity for the at least one of the concurrent computing units executing instances of the concurrent computing process.

In another aspect of the present invention a system for monitoring the status of a concurrent computing process in a concurrent computing environment includes multiple concurrent computing units. Each concurrent computing unit executes an instance of a concurrent computing process. At least one instance of the concurrent computing process is an interactive instance of the concurrent computing process. The interactive instance accepts input from a user and displays output to the user during execution of the instances of the concurrent computing process by the concurrent computing units. The system also includes a monitoring facility. The monitoring facility receives information indicating a current status and current activity for each of the concurrent computing units executing instances of the concurrent computing process. Additionally the system includes a graphical user interface displaying the information received by the monitoring facility that indicates at least one of a current status and current activity for at least one of the concurrent computing units.

The following illustrative embodiments will be described solely for illustrative purposes relative to a MATLAB based technical computing environment. Although the illustrative embodiment will be described relative to a MATLAB based application one of ordinary skill in the art will appreciate that the present invention may be applied to parallel or distributed processing of technical computing tasks with other technical computing environments such as technical computing environments using software products of LabVIEW or MATRIXx from National Instruments Inc. or Mathematica from Wolfram Research Inc. or Mathcad of Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc.

The memory may comprise a computer system memory or random access memory such as MRAM DRAM SRAM EDO RAM etc. The memory may comprise other types of memory as well or combinations thereof user may interact with the computing device through a display device such as a computer monitor which may include a graphical user interface GUI . The computing device may include other I O devices such a keyboard and a pointing device for example a mouse for receiving input from a user. Optionally the keyboard and the pointing device may be connected to the visual display device . The computing device may also include other suitable I O peripherals such as cameras and microphones and may use neural interfaces. The computing device may further comprise a storage device such as a hard drive or CD ROM for storing an operating system and other related software and for storing a concurrent computing process such as parallel computing with MATLAB or distributed computing with MATLAB . Concurrent computing process can be but is not limited to an application a program a module or a script. Concurrent computing process provides a concurrent computing environment to enable concurrent computing on the computing device . Concurrent computing process can also include a communication interface such as Message Passing Interface MPI CORBA or other suitable interface for setting up a communication channel with another computing device to form a collaboration. MPI is a standard for an interface for message passing that has been used between parallel machines or workstations in concurrent computing systems. One of ordinary skill in the art will appreciate that communication interface can be adapted to be included as part of the concurrent computing process or it can be a stand alone application module script or program that responds to calls from concurrent computing process such as communication interface . Additionally the operating system and concurrent computing process can be run from a bootable CD such as for example KNOPPIX a bootable CD for GNU Linux.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may be a FireWire interface FlexRay interface RS 232 interface and may include a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer sensor actuator or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the UNIX and Linux operating systems any version of the MacOS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein.

The client concurrent computing unit and concurrent computing labs A N are configured to perform distributed computing or parallel computing using a concurrent computing process . The concurrent computing process may be a technical computing software application that provides a technical computing and or graphical modeling environment for generating block diagram models and to define mathematical algorithms for simulating models. The concurrent computing process may include all or a portion of the functionality provided by the stand alone desktop application of MATLAB . Each concurrent computing unit and A N executes an instance or of the concurrent computing process . For example each concurrent computing unit A to N and the client concurrent computing unit may each be executing a different copy of MATLAB from The MathWorks Inc. of Natick Mass. The instance of the concurrent computing process executed on the client concurrent computing unit differs from the instances of the concurrent computing processes and in that it also includes a graphical user interface and is an interactive instance of the concurrent computing process. The interactive instance of the concurrent computing process is able to accept input from a user and display output to the user during the execution of the instances of the concurrent computing process. The graphical user interface displays the information collected by a monitoring facility . The graphical user interface allows a user accessing the client to control and monitor all of the executing instances and of the concurrent computing process.

The instance of the concurrent computing process executed by the client concurrent computing unit may also include the monitoring facility . Alternatively the monitoring facility may be part of or in communication with the scheduler . The monitoring facility is in communication with the client concurrent computing unit and the concurrent computing units A B . . . N and tracks the current activity and status of each concurrent computing unit.

In one aspect of the present invention functions can be defined by the client concurrent computing unit with an application programming interface API and or programming language representing a technical computing task to be executed by either a technical computing environment local to the client or remotely on the workstations A N. The graphical user interface may be built on top of the API layer. Tasks can be declared on the client concurrent computing unit and additionally organized into jobs. A job is a logical unit of activities or tasks that are processed and or managed collectively. A task defines a technical computing command such as a MATLAB command to be executed and the number of arguments and any input data to the arguments. A job is a group of one or more tasks.

In one aspect of the present invention a task can be directly distributed by the client concurrent computing unit to one or more computing resources such as concurrent computing units A N. A computing resource performs technical computing on a task and may return a result to the client concurrent computing unit .

In another aspect of the present invention the system includes a server on which a scheduler runs. The scheduler can be a scheduler provided with concurrent computing process a generic scheduler or a third party scheduler that is designed and provided by a company or individual that does not provide concurrent computing process . For example given that concurrent computing process is parallel computing with MATLAB by The MathWorks Inc. of Natick Mass. a third party scheduler can be MPI Exec LSF Condor Microsoft Compute Cluster Server or PBS. The server communicates over the network to the concurrent computing units A N and the client concurrent computing unit . One of ordinary skill in the art will appreciate that any of the concurrent computing units A N may include more than one technical computing lab to practice the present invention. Additionally client concurrent computing unit and server may also include one or more concurrent computing labs.

The scheduler includes one or more application software components to provide for the automatic distribution of tasks from the client concurrent computing unit to one or more of the concurrent computing units A N. The scheduler allows the client concurrent computing unit to delegate the management of task distribution to the scheduler . The scheduler may also set up for client concurrent computing unit the concurrent computing units A N by using the information received from the client concurrent computing unit regarding the number of concurrent computing labs needed and other configuration information. Hence the client concurrent computing unit does not need to know the specifics of the concurrent computing units A N. The client concurrent computing unit can define a function to submit the task to the scheduler and get a result of the task from the scheduler . As such the scheduler provides a level of indirection between the client concurrent computing unit and the concurrent computing unit A N.

The use of a scheduler eases the distributed programming and integration burden on the client concurrent computing unit . The client concurrent computing unit does not need to have prior knowledge of the availability of the concurrent computing units A N. For multiple task submissions from the client concurrent computing unit the scheduler can manage and handle the delegations of the tasks to the concurrent computing units A N and hold the results of the tasks on behalf of the client concurrent computing unit for retrieval after the completion of technical computing of all the tasks distributed by client concurrent computing unit . In an alternative implementation the concurrent computing units A N may provide to client concurrent computing unit directly the results of the tasks assigned to concurrent computing labs A N by the scheduler . The scheduler can further include an object oriented interface to provide control of delegating tasks and obtaining results in the system . The scheduler also provides an interface for managing a group of tasks collectively as a single unit called a job and on behalf of a client concurrent computing unit submitting those tasks making up the job and obtaining the results of each of the tasks until the job is completed. One of ordinary skill in the art will recognize that the functions and operations of the scheduler can be separated into various software components applications and interfaces. Additionally the functions and operations of the scheduler may reside on either the client concurrent computing unit or one of the concurrent computing units A N instead of the server .

Additionally each of the client concurrent computing unit the server and the concurrent computing units A N can be running the same or different operating systems with the same or different processors. For example the client concurrent computing unit can be running Microsoft Windows the server can be running a version of UNIX and the concurrent computing units A N a version of Linux. Alternatively each of the client concurrent computing unit the server and the concurrent computing units A N can be running Microsoft Windows . One of ordinarily skill in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices client server concurrent computing units A N .

In one embodiment the collaboration is dynamic. In other words a user can modify or change the size of the collaboration by adding another computing resource. On the client concurrent computing unit the user may be provided with a graphical user interface to modify or change the size of the collaboration or designate a specific resource to add or remove from the collaboration. In another embodiment of the present invention the client concurrent computing unit can forward the collaboration information to the scheduler which will determine a concurrent computing lab to be added or removed from the collaboration.

In one embodiment the present invention provides a graphical user interface for monitoring the status of instances of a concurrent computing process and . The monitoring facility is in communication with the concurrent computing units and is kept apprised of the status of the labs and A N. In one implementation the monitoring facility may first register with each of the concurrent computing labs prior to receiving any information. As noted previously the monitoring facility may also be part of or in communication with the scheduler . The monitoring facility may store the information in a global list or other type of data structure. Using the status information the graphical user interface of one embodiment of the present invention is generated to provide a visual indication of the status of the executing concurrent computing process. Possible embodiments of such a graphical user interface include but are not limited to providing a command prompt that displays the status of the concurrent computing process a user interface control for targeting selected labs A N a simultaneous integrated view of the status of multiple labs A N of the concurrent process a simultaneous integrated view of the status of multiple labs A N of the concurrent process wherein the labs A N are grouped and displayed according to the status of each lab and graphical indicators that depict where multiple computing units or labs have stopped during execution.

In one aspect of the present invention the graphical user interface includes a command window prompt capable of displaying the status of an executing concurrent computing process such as a parallel process. Most command line interfaces have a static prompt that does not change based on the status of the application. In the present invention the command prompt changes to show not only the status of one application but of several instances of a concurrent computer application and running concurrently.

An example of the type of prompt that may be displayed in the graphical user interface of the present invention is the MATLAB command window prompt. The MATLAB command window prompt is used both to display the MATLAB engine status and provide the means for the user to enter commands. The present invention allows a single prompt to continue to be used in concurrent computing environments such as environments executing a version of MATLAB with concurrent computing capability where multiple MATLAB s are run on multiple concurrent computing units.

For example the MATLAB Parallel command window prompt may be used to show the collective status for all lab windows when all labs are targeted by entered commands show the status of a single lab when a single lab is the target of entered commands and show the status of a subset of labs when a subset is the target of entered commands. Possible examples of such prompts for can be seen in the table below 

As an example the idle prompt may be P where the P designates parallel mode. By default commands go to target all labs when MATLAB is in parallel mode. Traditionally the MATLAB prompt has been used to reflect state. The prompt disappeared when the computing unit became busy and became K when expecting keyboard input such as when the process was at a breakpoint. In parallel mode the prompt will still disappear empty or NULL prompt when a command is issued and does not return until all of the targeted labs are idle. In debug mode a PK prompt may be used show when all Labs are targeted and stopped at a breakpoint and a K prompt is used to show when all labs are targeted and only some of the labs are stopped at a breakpoint.

In cases when a single lab is targeted the number of the lab may be shown in the idle and debug prompts. Thus if lab 3 is targeted the prompt may be 3 or 3K to indicate that one lab is targeted and is stopped at a breakpoint in debug mode . The prompt does not show a lab number in the debug prompt unless a single lab is specified as the target and it is in debug mode. An may be used when multiple labs are targeted but not all are stopped at breakpoints to remove any confusion about where commands are targeted. The lab number is only added to the prompt when a single lab is specified as the target. In some embodiments the status for a targeted group may also be displayed so that the designator may be a range such as 1 3 for labs 1 2 and 3 and groups such as 5 7 12 or the like. The user is also able to target the client concurrent computing unit by temporarily suspending parallel mode by changing the prompt manually or by entering ctrl Enter or similar keystrokes so that the commands are directed to the client lab. It will be appreciated that the symbols discussed above are given for the purposes of illustration and that many symbols may be used with the prompt in place of or in addition to those discussed herein without departing from the scope of the present invention.

The ability to target all labs or a subset of labs provides the user increased control over the concurrent computing environment. For example the user entering the command 

In certain embodiments audible or tactile identifiers may also be associated with the status indicated by the command prompt. In other embodiments graphics or animations may be used as part of the status information in the command prompt. Thus in one implementation the command prompt may be a text box in which the user enters commands. The status of the concurrent computing units may be displayed in the text box by altering the color outline background or some other feature of the text box. Other possible implementations and configurations will be apparent to one skilled in the art given the benefit of this disclosure. For example in one aspect of the present invention a user may hover with a mouse or other pointer over a concurrent computing unit in a list of active concurrent computing units. The hovering may result in the appearance of a command line window into which the user can enter commands. In another aspect of the present invention the hovering results in the appearance of an URL identifying the concurrent computing device. A user clicking on the URL receives additional information regarding the device.

As noted above the form of the command prompt in the present invention provides the user with information indicating the status of the concurrent computing units. The process by which the command prompt is used to convey information regarding the change in status for the concurrent computing unit s to the user is depicted in the flowchart of . depicts a sequence of steps that may be followed by the illustrative embodiment of the present invention to inform the user of a change in status of one or more concurrent computing units by altering the form of a command prompt. The sequence begins with the provision and execution of a concurrent computing process step . A GUI is generated that includes a command prompt that indicates through the displayed form of the command prompt the status of the concurrent computing units that are executing the concurrent computing process step . Information is then received regarding a change in status of at least one of the concurrent computing units step and the command prompt is altered to reflect the change in status step .

In another embodiment the graphical user interface includes a user interface control such as a pull down menu or the like that allows a user to target one or more computational units of a concurrent computing process. Once one or more units have been targeted any command issued will be directed to the target unit s .

The graphical user interface provides a means for the user to target and send commands to a subset of labs and A N and to monitor the status of those labs. The graphical user interface may include a menu item or widget that allows the user to define the target lab s for commands he or she enters. An example of this can be seen in . In the target selection widget is a combo box displayed in the toolbar . If the user sets the combo box to target All then any commands typed at the command line will be sent to all labs. shows the target set to all labs. The graphical user interface shows the results from a command sent to all labs. A second combo box indicates that all of the labs are being displayed.

When any of the labs are in debug mode the user will be able to target any single Lab or All Stopped at breakpoints. An example of this can be seen in in this case the K prompt shows that only some of the labs are stopped . At any time the user can target any single lab by selecting it from the combo box . The prompt will change to show that the targeted lab is a single lab. The commands will only be sent to the single targeted lab. This is shown in where the combo box indicates that lab 2 has been selected to receive commands and the prompt changes accordingly.

In certain implementations the user may have the ability to target a subset of Labs for example 2 4 typed into the combo box target widget to specify Labs 2 3 and 4 instead of just choosing all or single labs. The menu bar may also provide the ability to direct the graphical user interface to only display the interactions with specific labs which may also be performed using a user interface control. In some embodiments keybindings may also be used in conjunction with other controls. For example key combination Ctrl Enter could be a keybinding to select the client regardless of the target specified in the new widget . This allows the user to switch the command target by clicking on the target selection widget or by using the keybinding. Similarly labs may be targeted by using key combinations. It will be understood that these examples are but some of the possible embodiments. Other configurations and implementations for the menu item will be apparent to one skilled in the art given the benefit of this disclosure.

In another aspect of the present invention the provided graphical user interface includes a simultaneous integrated view of the status of multiple concurrent computing units of the concurrent process. In one implementation the status information for the concurrent computing units is provided in a table format which displays the current status of the multiple units as the process is executed. The use of a simultaneous integrated view allows for convenient monitoring of status or activity of multiple units labs or processors that are cooperatiyely performing a computation in an interactive environment. An interactive computational environment is one which accommodates but does not require the presence of a user while computation is occurring. A useful accommodation is to display the status or activity of each unit lab or processor on a single display. Examples of status or activity values include idle no work to do busy performing a computation busy sending data to another processor busy receiving data from another processor and stopped at a known execution point. Additional information not initially displayed in the graphical user interface such as the information referenced above or statistics related to recent activity such as the percentage of time spent waiting to receive data from another processor or the number of times data was sent to another processor may be accessed through a link or reference included in the graphical user interface. Similarly statistical plots of the additional information may be generated as a result of a user selecting a reference or link in the graphical user interface. Such information can be used for tracking the progress of a computation and for assessing the performance of the computational system and the algorithms being employed.

The table may also be extended to include additional columns with other statistics. In some embodiments the table may serve as a gateway to more detailed information such as statistical plots. Conventional mechanisms such as double clicking or making a selection from a context menu would provide access to the detailed information. A subset of the concurrent computing units may be differenced so as to compare a subset of concurrent computing units to compare the length of time the units ran the resources used how long the units took to process certain elements of a job and other types of comparisons. Additionally the collection of data indicating active concurrent computing units may be programmatically evaluated and further processed before being presented to a user. Other implementations or configurations will be apparent to one skilled in the art given the benefit of this disclosure.

A single display that shows the status or activity of each lab can be useful for tracking the progress of a computation and assessing the performance of a computational system. If a large number of labs is employed it will not generally be possible to view the entire list at once. If a particular status or activity is of interest sorting the list by status or activity might be of some help. However if status activity values change rapidly frequent reordering of the list could place a burden on display software and be disorienting to the observer. Grouping and displaying by activity or status resolves these problems by reserving a display area for each status or activity of interest and identifying in a compact way which processors are currently exhibiting that status or activity.

In such an embodiment the simultaneous integrated view of the concurrent computing units is grouped and displayed according to activity status. Grouping and displaying by activity or status reserves a display area for each status or activity of interest and identifies in a compact way which processors are currently exhibiting that status or activity.

In another aspect of the present invention the provided graphical user interface includes graphical indicators that depict where multiple computing units or labs have stopped during execution. Thus for debugging purposes execution arrows are provided which indicate where the various processing units have stopped during execution of the code. An example of this can be seen in . Here an editor window is shown wherein there are visual indicators and that indicate where various labs stopped. In this example execution arrow indicates that labs 2 and 5 stopped at line . Execution arrow indicates that lab 1 stopped at line . In some embodiments when two or more successive lab IDs appear with the same indicator the range low ID high ID may be used rather than listing each ID.

Alternatively the graphical user interface may display separate overlapped windows for each lab as shown in wherein the status of lab 2 is depicted in window and the status of lab 5 is depicted in window . The GUI and the lab stopped at a breakpoint may share the same file system in which case the GUI directly retrieves the graphical debugging file for display. Alternatively the GUI and the lab may share the same file even though the file is mapped differently or on a different file system. In such a case the GUI may use its local copy for display. Alternatively the GUI may have no access to the graphical debugging file in which case the lab transmit the file to the monitoring facility for display by the GUI. Other implementations and configuration will be apparent given the benefit of this disclosure.

It should be noted that although reference has been made herein to the practice of the illustrative embodiment of the present invention with a graphical user interface other interface modalities may also utilized within the scope of the present invention.

The present invention may be provided as one or more computer readable programs embodied on or in one or more mediums. The mediums may be a floppy disk a hard disk a compact disc a digital versatile disc a flash memory card a PROM an MRAM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language. Some examples of languages that can be used include MATLAB FORTRAN C C C Python or Java. The software programs may be stored on or in one or more mediums as object code. Hardware acceleration may be used and all or a portion of the code may run on a FPGA an ASIP or an ASIC. The code may run in a virtualized environment such as in a virtual machine. Multiple virtual machines running the code may be resident on a single processor.

Since certain changes may be made without departing from the scope of the present invention it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention.

