---

title: Systems and methods for alert management
abstract: Systems and methods for alert management in accordance with embodiments of the invention are disclosed. In one embodiment, a computing device includes a processor, an operating system configuring the processor to create a computing environment, an alert platform application, an alert pop up page file stored within the storage and containing instructions written in the rendering language to render a pop up page, and an alert history database containing alert data including an alert ID, display metadata, and application data, wherein the alert history database is configured to be queried to retrieve alert data, wherein the alert platform application is configured to query the alert history database to retrieve alert data, and wherein the alert platform application is configured to inject at least a portion of display metadata from alert data into the instructions from the alert pop up page file and render an alert pop up page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775917&OS=08775917&RS=08775917
owner: Sweetlabs, Inc.
number: 08775917
owner_city: San Diego
owner_country: US
publication_date: 20130315
---
The present invention claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application Ser. No. 61 681 547 entitled Systems and Methods for Application Alert Management filed Aug. 9 2012 the disclosure of which is herein incorporated by reference in its entirety.

The present invention is generally related to managing alerts from multiple applications and more specifically to software applications that manage alerts from a variety of local applications web applications and or web services.

A runtime environment can enable an application to be integrated into the computing environment of a computing device. Typically a runtime environment is provided for applications to be implemented natively i.e. compiled into the machine code of the computing device on which it resides on a computing device by an operating system. However other runtime environments can be provided for applications to be implemented non natively on a computing device such as web applications that can operate within a virtual machine provided by a web browser that operates natively on a computing device.

A web browser is an application that typically retrieves and presents information found on web pages maintained by content servers over a network. A web page is typically stored as one or more text files formatted in browser supported formats such as but not limited to markup languages such as but not limited to HyperText Markup Language HTML as defined by the World Wide Web Consortium scripts such as but not limited to JavaScript and or other scripts that incorporate ECMAScript as defined by the ECMA TC 39 committee of the Mozilla Foundation and style sheets such as but not limited to cascading style sheets CSS as defined by the World Wide Web Consortium that can be displayed by a web browser.

Systems and methods for alert management in accordance with embodiments of the invention are disclosed. In one embodiment a computing device includes a processor storage an operating system stored within the storage where the operating system configures the processor to create a computing environment an alert platform application stored in the storage where the alert platform application includes a rendering engine process configured to render pages within the computing environment created by the operating system by interpreting instructions written in a rendering language and implement a virtual machine configured to execute instructions written in a scripting language and an integration process that enables instructions executing within the virtual machine to modify the computing environment an alert pop up page file stored within the storage and containing instructions written in the rendering language that cause the rendering engine process to render a pop up page within the computing environment of the computing device and an alert history database containing alert data including an alert ID display metadata and application data wherein the alert history database is configured to be queried to retrieve alert data wherein the alert platform application is configured to receive alert messages containing alert data from a plurality of applications store the received alert data within the alert history database and query the alert history database to retrieve alert data and wherein the alert platform application is configured to inject at least a portion of display metadata from alert data retrieved from the alert history database into the instructions written in the rendering language from the alert pop up page file and render an alert pop up page containing the injected alert data within the computing environment of the computing device using the rendering engine process.

In another embodiment of the invention the alert platform application is at least partially natively implemented and creates an application runtime environment when executed by the computing device the computing device further including at least one cross platform application stored in the storage of the computing device where a given cross platform application includes an application alert pop up page file containing instructions written in the rendering language that cause the rendering engine process to render a pop up page within the computing environment of the computing device a background page file including executable instructions in the scripting language configured to be executed within the virtual machine to control the execution of the cross platform application in accordance with the logic of the cross platform application cause the rendering engine process to render the application alert pop up page within the computing environment of the computing device using the application alert pop up page file and provide an alert message to the alert platform application in response to an alert event where the alert includes alert data including an alert ID display metadata and application data.

In an additional embodiment of the invention execution of the executable instructions in the background page file within the virtual machine causes the cross platform application to request alert data from the alert platform application.

In yet another additional embodiment of the invention the requested alert data includes display metadata and application data where the application data includes executable instructions in the scripting language the logic of the background page is configured to inject at least a portion of the display metadata into the alert pop up page and cause the rendering of the alert pop up page using the rendering engine process and the logic of the background page configures the rendering engine process to execute the executable instructions within the scripting language within the virtual machine in response to a specific user interaction with the rendered alert pop up page.

In still another additional embodiment of the invention the display metadata of a piece of alert data includes metadata selected from the group consisting of an alert title an alert description an alert timestamp indicating when the alert occurred an application ID indicating the application that generated the alert an alert priority and a reference to at least one image file.

In yet still another additional embodiment of the invention the display metadata includes a resource locator and the alert platform application is configured to invoke a call to an API that produces resources that can be rendered for display.

In yet another embodiment of the invention the resources include at least one piece of data selected from the group consisting of text an image and executable instructions in the scripting language.

In yet another additional embodiment of the invention the cross platform application further includes an image file containing an icon the integration layer process is configured to create a launch point incorporating the icon within the computing environment of the computing device for the cross platform application using the image file and the alert platform is configured to display at least one badge on the icon in response to receipt of an alert message.

In still another additional embodiment of the invention the computing device further includes at least one native application configured to execute natively within the computing device by executing within the computing environment generated by the operating system and wherein the at least one native application is configured to provide an alert to the alert platform application in response to an alert event where the alert includes alert data configured to be rendered for display in a user interface using the rendering engine process.

In yet still another additional embodiment of the invention the display metadata of a piece of alert data includes metadata selected from the group consisting of an alert title an alert description an alert timestamp indicating when the alert occurred an application ID indicating the application that generated the alert an alert priority and a reference to at least one image file.

In yet another embodiment of the invention the display metadata includes a resource locator and the alert platform application is configured to invoke a call to an API that produces resources that can be rendered for display.

In still another embodiment of the invention the resources include at least one piece of data selected from the group consisting of text an image and executable instructions in the scripting language.

In yet another additional embodiment of the invention the resources are retrieved from a remote server.

In still another additional embodiment of the invention the alert platform application is further configured to generate display metadata in response to receipt of an alert from an application including at least one piece of metadata selected from the group consisting of an alert ID a timestamp indicating the time the alert was generated and an application identifier.

In yet still another additional embodiment of the invention the alert platform application is configured to receive alerts from at least one application from the group consisting of local native applications local cross platform application web applications and web services.

In yet another embodiment of the invention the alert platform application is configured to receive alerts from an alert synchronization server that synchronizes alert data across multiple alert platforms.

In still another embodiment of the invention the instructions in the rendering language in the pop up page are written so that the pop up page is rendered as a message notification center in which display metadata from alert data generated by multiple applications is inserted by the alert platform application.

In yet still another embodiment of the invention the scripting language is JavaScript and the rendering language is HTML.

Still another embodiment of the invention includes a method of managing alerts using an alert platform application executing on a computing device the method including executing an alert platform application including a rendering engine process configured to render pages within the computing environment created by the operating system by interpreting instructions written in a rendering language and implement a virtual machine configured to execute instructions written in a scripting language and an integration process that enables instructions executing within the virtual machine to modify the computing environment executing executable instructions written in a scripting language and contained within a locally stored background page file within the virtual machine where the executable instructions cause the computing device to render instructions written in a rendering language contained within a pop up page file using the rendering engine process to create a pop up page within the computing environment of the computing device and provide an alert to an application platform application in response to an alert event where the alert includes alert data configured to be rendered for display by the rendering engine process and storing the alert within an alert history database containing alerts and alert metadata using the application platform application where the alert metadata identifies an application that generated an alert and a timestamp indicating when the alert was generated and querying the alert history database to retrieve at least one alert using the application platform application.

In yet another additional embodiment of the invention the application platform application further includes an alert pop up page file containing instructions in the rendering language that cause the rendering engine to render a pop up page containing at least one alert within the computing environment of the computing device and the method further includes injecting at least a portion of alert data from the retrieved at least one alert into the instructions in the rendering language from the alert pop up page file and rendering the alert pop up page containing the injected alert data within the computing environment of the computing device using the rendering engine process.

In still another additional embodiment of the invention the pop up page file contains instructions in the rendering language that cause the rendering engine to render a pop up page containing at least one alert within the computing environment of the computing device and the method further includes injecting at least a portion of alert data from the retrieved at least one alert into the instructions in the rendering language from the pop up page file and rendering the pop up page containing the injected alert data within the computing environment of the computing device using the rendering engine process.

In yet still another additional embodiment of the invention executing executable instructions written in a scripting language and contained within a locally stored background page file further configures the computing device to generate alert metadata in response to an alert event and provide the alert metadata to the application platform application.

In yet another embodiment of the invention the method further includes generating alert metadata in response to receipt of an alert from an application using the application platform application.

Turning now to the drawings systems and methods for managing application alerts using an alert platform in accordance with embodiments of the invention are illustrated. An alert can be considered to be a message containing structured alert data or a block of alert data pulled from a web service including information that can be formatted for display within a user interface. An alert platform aggregates alert data and provides alert data upon request to applications for use in interactions with users and or the alert platform displays retrieved alert data within a user s computing environment in a way that enables user interaction. In many embodiments the alerts are identified by an alert ID and contain a set of display metadata and optional application data. In several embodiments the alert ID can be provided by the application or service that generated the alert and or by the alert platform. In many embodiments display metadata can include information that the alert platform can use to display an alert within a user s computing environment such as but not limited to an alert title an alert description an alert timestamp indicating when the alert occurred an application ID indicating the application that generated the alert an alert priority and a reference to one or more image files such as an avatar or an icon. The manner in which the alert platform can utilize display metadata within a user interface includes but is not limited to aggregating alerts in an alert notification center displaying individual alerts within windows within a user s computing environment and displaying badges on icons within the user s computing environment. Any of a variety of mechanisms can be utilized to display the alerts including injecting the display metadata into pages of instructions in a rendering language and then rendering the pages using the display metadata to render user interfaces using the native graphics of the computing device using a combination of the computing device s native graphics capabilities in combination with instructions in a scripting language and or a combination of a rendering engine and a native rendering of a user interface. In other embodiments any of a variety of native scripting rendering engine system alone or in combination can be utilized to render user interfaces incorporating display metadata received by an alert platform. In a number of embodiments the application data is data that the alert platform can pass to an application. In several embodiments the alert platform passes the application data to an application in response to user interaction with the displayed alert. The application data can enable applications to interact in complex ways with the alert platform and the user. In certain embodiments the alert platform can support various types of alerts that contain different types of alert metadata and or application data.

In several embodiments alert platforms manage alerts from a variety of applications including but not limited to local native applications cross platform applications web applications and or web services. Accordingly references to applications that provide alerts to an alert platform should be understood as encompassing not just local applications but natively implemented local applications local cross platform applications hosted cross platform applications web applications web pages web services and or any other process running on a computing device general computing embedded or otherwise capable of providing alert data to an alert platform in accordance with an embodiment of the invention.

In a number of embodiments the alert platform communicates with a web service that synchronizes alerts across multiple computing devices. In several embodiments the user maintains a user account with the web service and alert IDs assigned to alerts are unique with respect to a specific user account to facilitate synchronization of alerts. In certain embodiments an alert platform can be configured to transmit alerts via a web based alert synchronization service to multiple users registered with the web service. In this way an application platform on a single computing device can store and display alerts received by multiple user devices including devices configured by application platforms registered to other users.

In many embodiments the alert platform manages the display of alerts generated by applications by building an alert history for all alerts received by the alert platform whether directly from applications or via the web service. In certain embodiments alerts are stored as an alert history using a relational database management system such as but not limited to a Structured Query Language SQL database or a SQLite database. By creating a searchable alert history the alert platform application can be utilized to query alerts from a particular application groups of applications or across all applications. In embodiments where the alert platform subscribes to a web service that synchronizes alerts across multiple devices associated with a user the alert history on each device can be utilized to search for alerts received by an alert platform on any of the devices. In certain embodiments alerts stored in an alert history by an application platform and or a web service can be searched and or analyzed to customize future alerts that are presented to the user.

In a number of embodiments the alert platform generates interaction metadata concerning user interactions with alerts and the interaction metadata is associated with one or more alerts within the alert history database or elsewhere . The interaction metadata can be utilized by the alert history database in identifying alerts to display and in responding to queries.

Requests for alert data and to display alerts can originate from the user and or other sources such as but not limited to an application. In many embodiments the alert platform provides the ability for applications to query the alert history to obtain interaction metadata and aggregations of alert data or interaction metadata.

In many embodiments an alert platform is implemented using an alert platform application that provides an intuitive interface that is integrated with the computing environment of a device s operating system which enables the user receive alerts from a variety of applications. In numerous embodiments an alert platform application includes a rendering engine process. The rendering engine process utilizes various parsers and virtual machines associated with supporting specific web technologies including but not limited to HTML JavaScript and CSS to format display metadata from an alert for display in a user interface. In a number of embodiments the alert platform also includes an integration layer process that can make modifications to a user s computing environment or can call services from other applications. In several embodiments the integration layer process exposes a number of APIs that can be called by applications to provide alerts to the alert platform. In many embodiments the integration layer APIs are JavaScript APIs. In response to API calls the integration layer can communicate with the operating system and or natively implemented processes to modify the user s computing environment or call upon services from other applications. In a number of embodiments the alert platform is implemented as part of an application platform configured to create a runtime environment in which non native cross platform applications can execute similar to the applications described in U.S. application Ser. No. 13 164 740 entitled Systems and Methods for Integration of an Application Runtime Environment into a User Computing Environment filed Jun. 20 2011 the disclosure of which is incorporated by reference herein in its entirety. Alert platforms and alert management processes in accordance with embodiments of the invention are discussed further below.

Alert platforms can be implemented using alert platform applications installed on computing devices that receive alerts from applications store the alerts in an alert history respond to requests for alert data and display alert data within a user interface. References to displaying alerts can be understood to refer to the process of formatting alert display metadata for display as part of a user interface rendered within a user s computing environment. As noted above alerts can be received from a variety of applications and can include alert data such as but not limited to an alert ID a set of display metadata and optional application data. In certain embodiments the computing devices on which the application platform application executes can communicate via a network with a web based alert synchronization service that enables the synchronization of alerts across multiple computing devices.

A network diagram illustrating an alert management system in accordance with an embodiment of the invention is illustrated in . The alert management system includes a number of computing devices on which alert platform applications are executing receiving alerts from local applications that also execute on the computing devices servers on which web applications execute and or that provide web services. The alert platform applications are configured to store received alerts and alert data pulled from web services in a local alert history. Alert platform applications are also configured to display alerts within a computing environment generated by the operating system of the computing device and respond to requests for alert data stored in the alert history. In many embodiments alert platform applications are also configured to communicate via a network such as the Internet with a web based alert synchronization service that enables the synchronization of alerts between alert platforms executing on different computing devices. As noted above the alert synchronization service can enable the creation of user accounts and the registration of alert platforms with the user accounts. In this way the alert synchronization service can rely on user account information to automatically exchange alert data between registered application platforms. In several embodiments users can grant permission to share alerts with other users and or groups of users and the alert synchronization service exchanges alert data in accordance with the sharing permissions.

In a number of embodiments the alert platform is part of an application platform application that creates an application runtime environment on each computing device which can download one or more cross platform applications from an application server capable of executing within the application runtime environment. During execution the applications that execute within the runtime environment can download additional information from one or more application servers and can generate alerts that are provided to the alert platform. In several embodiments the alert platform is at least partially implemented using a cross platform application that is configured to render user interface pages such as but not limited to a message notification center page and individual pop up alerts. Pages rendered by an alert platform can enable interactive engagement with alerts by users.

Although specific systems that utilize alert platform applications to perform alert management processes are discussed above systems that are capable of performing alert management processes can be implemented in any manner as appropriate to the requirements of specific applications in accordance with embodiments of the invention. The use of alert platform applications to perform alert management processes in accordance with embodiments of the invention are discussed further below.

Application alert management processes in accordance with many embodiments of the invention can be implemented by an alert platform application that stores alerts generated by applications within an alert history. As noted above application platforms in accordance with many embodiments of the invention receive alerts containing alert data that the application platform stores in an alert history database such as but not limited to a SQLite database along with metadata related to the alert data such as but not limited interaction metadata that records user interactions with alerts. In certain embodiments the alerts stored in the alert history are determined based upon one or more predetermined criterion including but not limited to the size of the alert history the number of alerts maintained by a specific application and or any other criterion appropriate to the requirements of a specific alert platform in accordance with embodiments of the invention. Storing alert data in a searchable alert history enables retrieval of alerts generated by a single application groups of applications or across all applications. The retrieved alert metadata can be displayed by the alert platform within a user s computing environment or provided to another application. In several embodiments the alert data presented to the user via a user interface can be determined based upon user preferences and or criteria associated with the alert request. By way of example criteria associated with an alert request can include but are not limited to requests for all recent alerts from all applications all recent unread alerts or all generated alerts. In several embodiments the alert platform is capacity constrained and old alerts are removed from the alert platform and stored in the alert synchronization service. In a number of embodiments a query to an application platform can also be provided to an alert synchronization service to retrieve alert data stored remotely.

A process for managing alerts using an alert platform application in accordance with an embodiment of the invention is illustrated in . The process involves the alert platform receiving an alert message form an application. The alert platform can extract alert data from the alert message. In several embodiments the alert message contains alert data that can be supplemented with additional metadata including but not limited to associating an alert ID with the alert data associating an application ID indicating the application that generated the alert with the alert data and adding an alert timestamp indicating when the alert occurred to the alert data. The alert data itself can include display metadata that can be utilized to display alert information via a user interface and application data the structure of which is typically not known to the alert platform . In many embodiments the display metadata can include information that the alert platform can use to display an alert within a user s computing environment such as but not limited to an alert title an alert description an alert timestamp indicating when the alert occurred an application ID indicating the application that generated the alert an alert priority and a reference to one or more image files such as an avatar or an icon. In other embodiments any display metadata can be incorporated into an alert as appropriate to the requirements of a specific application. The ability to store application data within alerts provides a mechanism by which applications can communicate information. The mechanism is particularly useful where a web service provides an alert and application data within the alert can be utilized by a local application to respond to the alert. As is discussed further below the alert platform can be part of an application platform on which cross platform applications execute. In many embodiments a web application and or web service can generate an alert containing application data including instructions in an executable scripting language. An application can query the alert platform to determine whether the web application and or web service has provided any alerts recently. When the alert is detected the cross platform application can render a pop up page incorporating display metadata extracted from the alert data. In addition executable instructions in the scripting language contained within the application data can be executed in response to a specific user interaction with the user interface rendered by the cross platform application using the display metadata.

Referring again to the alert platform application can store the alert in an alert history that is formatted in such a way as to enable the querying of alerts and metadata associated with the alerts such as but not limited to interaction metadata. In many embodiments the alert platform application incorporates a text search engine that indexes keywords within text strings in the alerts to facilitate full text searching. The alert platform application can utilize the structure of the alert history to retrieve alert data in response to requests from users and or applications.

Although specific processes for managing alerts using alert platform applications are discussed above processes can be utilized to manage alert data in any manner appropriate to the requirements of specific applications in accordance with embodiments of the invention. Processes for retrieving and displaying alerts using alert platform applications in accordance with embodiments of the invention are discussed below.

Alert data stored in an alert history database in accordance with embodiments of the invention can be queried for display by an alert platform application and or provided to an application which can display the alert and or process application data associated with the alert. In addition the application can respond to interactions with an alert displayed by the application based upon information contained within the application data of the alert. As noted above in the same way that alerts can be received from a variety of local and remote applications and services alert data can be requested by a various local and remote applications.

In certain embodiments the alert platform application queries the database to retrieve alert data matching predetermined criteria including but not limited to the alert recency the alert relevance prior user interactions the application that generated the alert and or a the application that generated the alert being a member of a specific group of applications. In numerous embodiments an alert platform can customize the alert data that are displayed to a particular user. In several embodiments the alert platform application enables automatic and or manual customization of the alert data displayed to a user and the manner in which the alerts are displayed. In certain embodiments an alert platform application can automatically customize the alerts that are displayed to a particular user based upon detected trends exhibited by a specific user or class of users. These trends can include but are not limited to placing alerts matching specific criteria at the forefront of a list of alerts or by automatically removing alerts that match other criteria. In a number of embodiments the display of alerts is determined by the frequency with which users interact with specific types of alerts. In particular embodiments the selection of alerts for display by an alert platform application can be manually customized by a user. In several embodiments specific filters utilized by an alert platform application include the application that created alert data and the timestamp of the alert data. When the alert platform application utilizes an interface in which multiple alerts are displayed the alert data that is displayed can be sorted by relevant and or contextually aware. In various embodiments the time between the generation of alert data associated with a specific application and or the total number of alerts generated by an application associated with alert data can be utilized in scoring the relevance of an alert. Furthermore an alert platform application in accordance with embodiments of the invention can perform rate limiting to limit the number of alerts displayed at any given time on a per application basis.

A process that can be utilized by an alert platform application to retrieve and display alerts in response to an alert request in accordance with an embodiment of the invention is illustrated in . The process includes an alert platform application receiving a request from a user and or an application to retrieve alert data for display within a user interface generated by the alert platform application. In many embodiments the user request can be received via a user interface and a request for alert data can be received from applications via an Application Programming Interface API . In many embodiments receipt of an alert via an API causes the display of the alert. In certain embodiments the alert platform application processes the request for alert data to generate a query that can be used to retrieve alert data from the alert history database. In many embodiments an application is simply requesting alert data and the alert platform can extract the requested data from the retrieved alert data and provide the extracted data to the application. In a number of embodiments the extracted data is display metadata that can be used by the application to render a user interface containing at least a portion of the display metadata. In several embodiments the extracted data is application data that can be provided to the application. As noted above application data can be any data generated by an application including instructions written in a scripting language that can determine the manner in which the application responds to the occurrence of the alert and or a user s interaction with an alert. In several embodiments the alert platform does not possess the ability to interpret the application data.

The retrieved alert data can also be formatted by the alert platform application for rendering as a user interface within a user s computing environment. In several embodiments the alert data includes display metadata containing information that the alert platform can use to display an alert within a user s computing environment such as but not limited to an alert title an alert description an alert timestamp indicating when the alert occurred an application ID indicating the application that generated the alert an alert priority and a reference to one or more image files such as an avatar or an icon. As noted above the data that can be included in an alert s display metadata is typically only limited by the display capabilities of the computing device and the constraints of a specific application. In several embodiments the alert platform application includes a rendering engine process that is configured to interpret instructions written in a rendering language to build a Document Object Model that can be rendered for display. In a number of embodiments pieces of the display metadata can be injected into the instructions written in the rendering language to cause the rendering engine process to display a user interface containing the injected display metadata. In various embodiments the display metadata includes a resource locator such as a URL that can be used by the alert platform application to invoke a call to an API that retrieves resources such as but not limited to text images or URL links that can be utilized to render a user interface page containing pieces of the display metadata for display by a rendering engine process.

Although specific processes for retrieving and displaying alert data are discussed above processes for retrieving and displaying alert data alert platform applications executing on computing devices can be implemented in any manner as appropriate to the requirements of a specific application in accordance with embodiments of the invention. User interfaces that can be generated by application platform applications capable of application alert management processes in accordance with embodiments of the invention are illustrated below.

Alert management processes in accordance with many embodiments of the invention can enable an alert platform application to display alerts in a useful and intuitive manner to a user. In many embodiments a user s computing environment can include a work area in which a user can interact with an application and a taskbar in which a user can interact with an alert platform application launch point. A screenshot of a work area and a taskbar in a user interface in accordance with an embodiment of the invention is shown in . The majority of the area of the user interface is taken by the work area while a smaller portion of the user interface is taken by the taskbar . A user can interact with an alert platform application in the taskbar . In the illustrated embodiment the alert platform is part of an application platform that provides launch points for various applications that instruct the application platform to launch a particular application.

Display metadata retrieved from an alert history can be formatted for display within the work area of the user computing environment in accordance with many embodiments of the invention while still being associated with the launch point of an application in the taskbar. A conceptual illustration of a screenshot of alerts from an application s alert history displayed in accordance with an embodiment of the invention is illustrated in . The application s alert history is displayed in the work area but graphically illustrates an association with a particular application via a launch point in the taskbar. The rendered alerts user interface lists all recent alerts generated by the application. The list of alerts is generated by querying the alert history according to an alert request for recent alerts from a particular application. In the illustrated embodiment a title string and a description string from the display metadata of each alert is formatted into a template for rending within the user s computing environment. In several embodiments the alert platform includes a rendering engine layer that is configured to interpret instructions written in a rendering language as pop up windows within a user s computing environment. In many embodiments the alert metadata retrieved from the alert history can be injected into a template defined using instructions in the rendering language and the rendering engine process can render a user interface containing the injected display metadata using the modified template. A user can customize the alerts displayed from the alert history by selecting a button to dismiss an alert from being displayed leaving only the alerts that the user wishes to remain displayed. In certain embodiments there may be no alerts for display from an application s alert history. In a number of embodiments all user interactions with alerts displayed via the alert platform and or applications executing within the computing environment are tracked in the form of interaction metadata that is associated with the alert within the alert history. A web based alert synchronization service can also enable an alert history to store interaction data related to user interactions with alerts on other computing devices. As discussed above the interaction data can be used as a data dimension that can be queried when retrieving alert data from the alert history.

A conceptual illustration of a screenshot of an alert request that results in no alerts to display from an alert history in accordance with an embodiment of the invention is illustrated in . Similar to the alerts displayed in the indication that there are no alerts for display with respect to a specific application is illustrated within the work area with an association with a particular application from the application s launch point in the taskbar.

In various embodiments the alert platform can query the alert history for specific types of alerts. For example the alert platform can query the alert history for the most recent alert data containing display metadata concerning an application s lifecycle status. A conceptual illustration of a screenshot of a user interface page rendered using alert data injected into the alert page that was retrieved from the alert history based upon recency and subject in response to a request for information concerning an application s lifecycle status in accordance with an embodiment of the invention is illustrated in . The alert is displayed within the work area of a user interface with a graphical reference to the particular application related to the alert from the application s launch point . The display of the alert is customized for an alert request for the latest alert concerning the application s life cycle by displaying an alert that the application is still downloading.

In several embodiments an alert can display one or more images that provide a user with an intuitive and useful user interface. In certain embodiments the display of one or more images can include the display of an icon image associated with the application that generated the alert. In many embodiments an image file containing an icon image for an application is locally stored and the alert platform application renders the icon image in a displayed alert using the locally stored image file. In particular embodiments multiple overlaid images and or an animated image are displayed that provide a user with information such as but not limited to the context of an alert along with the application that created the alert. For example an icon image can be displayed with a profile picture of a user to indicate the application and the user action that triggered an alert. In other embodiments any of a variety of images appropriate to the requirements of a specific application can be displayed including but not limited to images that are downloaded from remote servers using resource locators contained within the display metadata of the alert data. In many embodiments image files containing images are bundled with alerts provided by applications.

In numerous embodiments images included in an alert provided to the alert platform application can be retrieved by an application utilizing an API call to a server system based upon a resource locator contained within the display metadata of an alert. A conceptual illustration of a screenshot of a page rendered using display metadata in which images are displayed in accordance with an embodiment of the invention is illustrated in . The alert includes an icon of the application that created the alert as well as the title and a description of the alert . The alert also includes a close button that enables a user to dismiss the alert from being displayed. A screenshot of an alert including multiple overlaid images and textual information is illustrated in . The screenshot illustrates an alert generated by an application that utilizes the Twitter service maintained by Twitter Inc. headquartered in San Francisco Calif. USA. The alert includes both textual information as well as overlaid images . The overlaid images provide context for the alert as a combination of an icon from the application that created the alert and a profile picture from a user of the Twitter service. The application retrieves an image file containing the profile picture via an API provided by the Twitter service and provides or identifies the location of the image file and the locally stored image file containing the icon to the alert platform application which generates and displays the illustrated alert.

In many embodiments a user interface can display alerts across multiple applications that can be synchronized across multiple devices and or users using an alert synchronization server. Thereby a user can view all alerts across multiple or even all applications simultaneously. Alerts can be organized for display in any manner such as being ordered chronologically by relevancy by context by an application priority contained within the alert s display metadata or by application. The alert platform application can determine the layout of a user interface including alert data based on but not limited to the number of alerts displayed per application and the priority of the displayed alerts and or applications. In a number of embodiments the alert application platform can customize the layout of the displayed alert data based upon the relevance of the alert data the context user intent display metadata defined priority and or any of a variety of other factors appropriate to the requirements of a specific application.

In several embodiments alert data is displayed as part of a notification center user interface where alert data from multiple applications can be displayed in conjunction with launch points for various application.

A screenshot of a user interface incorporating alert data rendered by an alert platform that is part of an application platform in accordance with an embodiment of the invention is illustrated in . In the illustrated embodiment display metadata associated with alert data generated by multiple applications is retrieved from an alert history and formatted for display within a notification center user interface. The alerts are retrieved and displayed within the work area of a user interface from a user selecting an icon within the taskbar e.g. an application associated with the application platform application and or an alert center . The alerts are displayed by application in chronological order. Additional functionality is also displayed alongside the display of the alerts such as a display of the applications that currently utilize or that may utilize the runtime of the application platform application.

Although specific implementations of user interfaces from application platform applications that utilize application alert management processes are discussed above application platform applications that utilize application alert management processes can utilize any user interface in any manner as appropriate to a specific application in embodiments of the invention. Application platform applications capable of application alert management in accordance with embodiments of the invention are described below.

In several embodiments the alert platform is part of an application platform application that provides a runtime environment in which cross platform application can execute. Cross platform applications capable of executing within the runtime environment provided by the application platform application include can be implemented using web technologies including but not limited to HTML JavaScript and or CSSs. An application platform application capable of providing a runtime environment for cross platform applications can be implemented using a rendering engine process. In several embodiments the application platform also incorporates an integration process. The rendering engine process is able to perform all of the functions of the rendering engine of a web browser enabling execution of cross platform applications implemented using web technologies in a similar way to the manner in which web applications execute within a web browser application i.e. without the need for a user to launch a web browser application. In a number of embodiments the rendering engine process includes various parsers and virtual machines associated with supporting specific web technologies including but not limited to HTML JavaScript and CSS. The rendering engine process of an application platform application can interpret a cross platform application in a manner similar to the manner in which the rendering engine of a web browser enables the execution of a web application. Indeed many embodiments of the invention utilize a modified version of a rendering engine developed for use in a web browser. For example a modified version of the WebKit or WebKit2 rendering engines can be used to implement a rendering engine process in accordance with an embodiment of the invention. In several embodiments the alert platform utilizes the rendering engine process to render user interface pages within a user s computing environment based upon display metadata injected into instructions in a rendering language. The manner in which an alert platform can utilize the rendering engine process and integration layer of an application platform application to receive store retrieve and display alert data in accordance with embodiments of the invention is discussed further below. In other embodiments any of a variety of mechanisms can be utilized to display the alerts including using the display metadata to render user interfaces using the native graphics of the computing device using windowing calls and or other appropriate operating mechanism e.g. Views in OSX that can vary from one operating system to the next. In several embodiments user interfaces can be rendered using a combination of the computing device s native graphics capabilities in combination with providing layout instructions in a scripting language and or a combination of a rendering engine and a native rendering of a user interface. In other embodiments any of a variety of native scripting rendering engine system alone or in combination can be utilized to render user interfaces incorporating display metadata received by an alert platform.

The integration layer process enables the integration of an alert platform and cross platform applications with a user s desktop computing environment enabling communication with natively implemented processes to provide functionality including but not limited to desktop launch points and alerts based upon data pulled from remote servers by the cross platform application. In addition natively implemented applications can use the integration layer to provide alerts to the alert platform via an API within the integration layer. In many embodiments an integration layer process serves to enable a cross platform application developed using web technologies to behave within the computing environment as if it is a conventional desktop application. In several embodiments the integration layer process exposes a number of APIs that can be called by an alert platform and or a cross platform application to make modifications to a user s computing environment including APIs that enable the alert platform and or the cross platform application to provide information to the application platform application which the application platform application can use to display alerts. In several embodiments the integration layer process APIs are JavaScript APIs that can be called by the alert platform and various cross platform applications running within the application runtime environment created by the application platform application. In response to the API calls the integration layer process can communicate with the operating system and or natively implemented processes to modify the user s computing environment.

In many embodiments an application platform application enables the integration of an alert platform and cross platform applications into the computing environment of a user device by exposing a number of APIs that can be called to make modifications to a user s computing environment and or communicate with operating system processes or other native processes . In the context of a personal computer a user s computing environment can include an application platform application installed on a personal computer that enables an alert platform and or cross platform applications to modify the desktop computing environment. Application platform applications can also be implemented for installation on other classes of device such as but not limited to mobile phones tablet computers game consoles Internet connected televisions and or consumer electronics devices that do not utilize desktop computing environments.

In numerous embodiments the alert platform and or each cross platform application is continuously active and can continuously communicate with remote servers via a network such as the Internet to receive alert message and or pull alert data from web services when the application platform application is running. Utilizing the integration with the user s computing environment provided by the application platform application alert platforms and cross platform applications can continuously provide alerts based upon information retrieved from the remote servers. In this way the alert platforms and cross platform applications can be used to extend web applications and web services to a user s computing environment.

A desktop computing environment typically includes desktop shortcuts favorites taskbar icons and or a start menu that facilitates functions including but not limited to the launching of desktop applications and the provision of alerts by desktop applications. In many embodiments an application platform application enables a alert platform and or cross platform application to behave within the computing environment as if they are conventional natively implemented desktop applications. For example an application platform application can enable icons for cross platform applications to be included in the task bar and or the start menu of the computing environment. The application platform application enables the alert platform to apply badges or alerts to the icons in response to receipt of alert messages and or pulling alert data from web services. In many embodiments the application platform application also enables a cross platform application to create desktop shortcuts to launch the cross platform application and can provide shell support for the cross platform application enabling the cross platform application or a web application associated with the cross platform application to be associated with specific file types. In several embodiments the alert platform and or cross platform application is able to behave as if it is a conventional natively implemented desktop application because the application platform application provides mechanisms by which the alert platform and or cross platform application can communicate with operating system processes and or other natively implemented processes.

In various embodiments when a cross platform application is implemented using the same technologies that are utilized to implement web applications a cross platform application can be implemented using a background page that contains all of the logic of the cross platform application. As with a conventional web page the background page is a text file as opposed to a binary executable that can include HTML JavaScript and or CSSs that the rendering engine process of the application platform application parses to implement the logic contained therein in a similar fashion to the way in which the rendering engine of a web browser application parses a conventional web page when enabling a web application on a user device.

In addition to a background page the cross platform application can also include one or more pop up pages which are similar to a conventional web page and can be displayed to the user to implement alerts and or a user interface. An alert platform in accordance with embodiments of the invention can also utilize pop up pages to render a user interface with a user s computing environment. In many embodiments a cross platform application includes a background page and at least one pop up page that are stored on the computing device. The application platform application process implements the logic contained within the background page and can provide a user interface and or alerts via various pop up pages. In several embodiments executable instructions within the background page cause retrieval of information from remote server systems and generate alerts via API calls to the application platform application in response to the retrieved information. In many embodiments the cross platform applications provide content including but not limited to audio video images and or text to the application platform application which uses the content to generate alert pop up pages. In several embodiments the cross platform applications provide instructions in a scripting language such as but not limited to JavaScript that the application platform application uses to determine the manner in which a user can interact with the alert pop up pages e.g. responses to mouse overs and or selections . APIs exposed by the application platform application enable logic within either the background page or the pop up page to modify and respond to interactions with launch points such as but not limited to icons within the user s computing environment. For example the APIs can enable any of the pages associated with the cross platform application to display alert data within a pop up page by responding to an alert request from a user hovering over or clicking on the cross platform application s icon by displaying recent alerts associated with that cross platform application or certain alerts across all applications. In several embodiments the retrieved alert data includes application data containing executable instructions written in a scripting language that an application can utilize to modify the DOM of its background page and or pop up page.

While each of the pages associated with a cross platform application are processed by the application platform application independently and do not necessarily share Document Object Model DOM or JavaScript contexts the pages can communicate with each other using a Remote Procedure Call RPC method included in the application platform application APIs and share data using unified local storage. This allows for a reduction in duplicate data transferring and processing and may be used to enhance cross platform application performance by caching data.

In embodiments where the application platform application is implemented using a rendering engine process and an integration layer process alerts can be provided via both layers. The rendering engine process supports the display of pop up alerts which can be pop up pages created using web technologies that are displayed to the user in contrast with the invisible background pages containing the logic of the cross platform application . The APIs revealed by the integration layer process of the application platform application can also enable the provision of alerts through the user s computing environment using badges and other notification capabilities provided by the operating system of the computing device.

Although specific implementations of application platform applications that utilize application alert management processes are discussed above application platform applications can utilize application alert management processes in any manner as appropriate to a specific application in embodiments of the invention.

While the above description contains many specific embodiments of the invention these should not be construed as limitations on the scope of the invention but rather as an example of one embodiment thereof. It is therefore to be understood that the present invention may be practiced otherwise than specifically described without departing from the scope and spirit of the present invention. Thus embodiments of the present invention should be considered in all respects as illustrative and not restrictive. Accordingly the scope of the invention should be determined not by the embodiments illustrated but by the appended claims and their equivalents.

