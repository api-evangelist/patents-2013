---

title: Method and system for intelligent many-to-many service routing over EPP
abstract: Method and system for routing EPP requests over a network are provided. A routing system includes multiple frontend service interfaces, one or more gateways, a management server, and a backend service platform that provides multiple application services. The frontend service interfaces are addressable using virtual IP addresses (“VIP”) and can be provided by the gateways. The routing system defines a many-to-many mapping between the frontend service interfaces and a set of services provided by the backend service platform. A requestor can send a request over EPP to a targeted service interface to access one or more backend services, by sending the request to a target IP or domain name that corresponds to a VIP associated with the targeted service interface. Using the many-to-many mapping and the VIP of the targeted service interface, the routing system can identify backend services sought by the request and provide the requestor with access to the backend services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856344&OS=08856344&RS=08856344
owner: Verisign, Inc.
number: 08856344
owner_city: Reston
owner_country: US
publication_date: 20130315
---
The present application for patent is a continuation in part of and claims priority to U.S. patent application Ser. No. 13 681 330 filed Nov. 19 2012 entitled Method and System for Intelligent Routing of Requests over EPP pending and assigned or under obligation of assignment to the same entity as this application and hereby expressly incorporated by reference in its entirety. U.S. patent application Ser. No. 13 681 330 is a continuation of and claims priority to U.S. patent application Ser. No. 12 543 462 filed Aug. 18 2009 issued Dec. 4 2012 as U.S. Pat. No. 8 327 019 and also assigned or under obligation of assignment to the same entity as this application and hereby expressly incorporated by reference in its entirety.

As Internet usage grows exponentially the demand for Internet related services is also growing rapidly. As a result of the increased usage of the Internet the demand for domain names is also growing rapidly. Consequently demand for domain related services is also on the rise. Such domain related services can include domain name creation domain name registration renewal and the like. Typically a website serves as a primary vehicle for establishing an online presence for a domain name. To meet this ever increasing demand for domain name related services it is necessary that the entities that provide these services do so in an efficient and cost effective manner.

The Domain Name System DNS is the part of the Internet infrastructure that translates human readable domain names into the Internet Protocol IP numbers needed to establish TCP IP communication over the Internet. DNS allows users to refer to web sites and other resources using easier to remember domain names such as www.example.com rather than the numeric IP addresses associated with a website e.g. 123.4.56.78 and assigned to computers on the Internet. Each domain name can be made up of a series of character strings e.g. labels separated by dots. The right most label in a domain name is known as the top level domain TLD . Examples of well known TLDs are com net org and the like. Each TLD supports second level domains listed immediately to the left of the TLD e.g. the example level in www.example.com . Each second level domain can include a number of third level domains located immediately to the left of the second level domain e.g. the www level in www.example.com.

The responsibility for operating each TLD including maintaining a registry of the second level domains within the TLD is delegated to a particular organization known as a domain name registry registry . The registry is primarily responsible for answering queries for IP addresses associated with domains resolving typically through DNS servers that maintain such information in large databases and operating its top level domain.

For most TLDs in order to obtain a domain name that domain name has to be registered with a registry through a domain name registrar an entity authorized to register Internet domain names on behalf of end users. Alternatively an end user can register a domain name indirectly through one or more layers of resellers. A registry may receive registrations from hundreds of registrars.

A registrar usually has a dedicated service connection with the registries in order to access domain related services e.g. domain name creation or renewal. Registrars typically use the Extensible Provisioning Protocol EPP as a vehicle to communicate with the registries in order to register or renew domain names. EPP is a protocol designed for allocating objects within registries over the Internet. The EPP protocol is based on Extensible Markup Language XML which is a structured text based format. The underlying network transport is not fixed although the currently specified method is over Transmission Control Protocol TCP .

Embodiments of the present disclosure relate to systems and methods for routing service requests over EPP. Specifically a routing system according to various embodiments includes multiple frontend service interfaces one or more gateways a management server and a backend service platform that provides multiple application services. The frontend service interfaces are addressable using virtual IP addresses VIP and can be provided by the gateways. The routing system defines a many to many mapping between the frontend service interfaces and a set of backend services provided by the backend service platform. A requestor can send a request over EPP to a targeted service interface to access one or more backend services by sending the request to a target IP or domain name that corresponds to a VIP associated with the targeted service interface. Using the many to many mapping and the VIP of the targeted service interface the routing system can identify backend services sought by the request and provide the requestor with access to the backend services.

The routing system according to various embodiments can maintain version numbers and or operational states associated with the version numbers in the many to many mapping to support version testing version upgrades and version downgrades or rollbacks. In some embodiments the versioning can be done in conjunction with the VIPs in the event that a backend service needs to be upgraded on different schedules across the VIPs. In additional embodiments the versioning can be done independent of the VIPs. Each backend service can be assigned a unique version number and optionally with an operational state defined for each version of the service. A state machine can be defined for the gateways to determine which service to route requests to with or without using the VIPs as a variable. Embodiments of the state machine for a backend service can include operational states such as for example inactive past current and next. One or more gateways can be configured to route a service request based on a specific operational state of the backend services.

Additional objects and advantages of the embodiments of the disclosure will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the embodiments. The objects and advantages of the embodiments will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the embodiments as claimed.

Reference will now be made in detail to example embodiments which are illustrated in the accompanying drawings. When appropriate the same reference numbers are used throughout the drawings to refer to the same or like parts.

For simplicity and illustrative purposes the principles of the present disclosure are described by referring mainly to exemplary embodiments thereof. However one of ordinary skill in the art would readily recognize that the same principles are equally applicable to and can be implemented in all types of information and systems and that any such variations do not depart from the true spirit and scope of the present disclosure. Moreover in the following detailed description references are made to the accompanying figures which illustrate specific exemplary embodiments. Electrical mechanical logical and structural changes may be made to the exemplary embodiments without departing from the spirit and scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present disclosure is defined by the appended claims and their equivalents.

Various embodiments of the present disclosure include systems and methods for intelligent routing of requests over EPP. An intelligent routing system according to various embodiments includes multiple frontend service interfaces one or more gateways a management server and a backend service platform that provides multiple application services such as domain name registry services domain name suggestion services and the like. The frontend service interfaces are addressable using virtual IP addresses VIPs and can be provided by the gateways and or components e.g. network servers communicatively coupled to the gateways.

The intelligent routing system can define a many to many mapping between the frontend service interfaces and a set of services provided by the backend service platform. A requestor can send a request over EPP to a targeted service interface of the frontend service interfaces to access one or more backend services in the set of services by sending or directing the request to a target IP or domain name that corresponds to a VIP associated with the targeted service interface. The intelligent routing system can respond to the request by providing an EPP greeting based on the VIP of the targeted service interface. Using the many to many mapping and the VIP of the targeted service interface the intelligent routing system can identify backend services sought by the request and provide or deny the requestor with access to the backend services.

In various embodiments the many to many mapping can include VIPs associated with the frontend service interfaces as a high level routing element to the backend services and the management server can store the many to many mapping in a master routing table. The management server can propagate the many to many mapping in the master routing table to the gateways. Alternatively or in addition the gateways can replicate the many to many mapping from the master routing table. Any one of the gateways can determine status information associated with the backend services based on information in a routing table stored locally in that gateway. Any one of the gateways can also receive service requests addressed to one or more of the frontend service interfaces targeted by the service requests and by using a locally stored routing table and the VIPs associated with the one or more targeted frontend service interfaces that gateway can identify backend services sought by the requests and route or deny the requests accordingly.

The intelligent routing system can generate and or update the many to many mapping between the VIPs and the backend services in a centralized approach a de centralized approach or a mixed approach e.g. de centrally with overrides managed centrally . In the centralized approach the backend services can register with the management server and the management server can generate the authoritative routing information. In the de centralized approach the backend services can generically register with the management server and the routing mapping can be configured by an administrator or by an external routing manager application. In the mixed approach the backend services can publish their desired VIPs and the management server can override the backend service preferences.

By routing service requests based at least in part on the VIPs associated with the frontend service interfaces the intelligent routing system can apply different client policies e.g. connection bandwidth security encryption quality of service etc. to each of the VIPs. In doing so the intelligent routing system can provide differentiated levels of capabilities and or apply unique client or access policies based on the VIPs of the frontend service interfaces targeted by the service requests. For example EPP greetings returned to a new connect request or other service requests for each VIP may include only the services available to that VIP. When responding to a login or connect request the intelligent routing system can take into account the VIP of the frontend service interface targeted by the login or connect request. Along with a requestor s IP address login name password and digital certificate the intelligent routing system can use the VIP of the targeted service interface as a factor in making an authentication decision. For example the gateways can grant or deny authentication through a VIP based on the user s service privileges. The gateway can also grant or deny routing requests to one or more of the backend services based on the routing table and the user s service privileges.

It would be advantageous for the intelligent routing system to route requests over EPP from requestors based on the VIPs of the frontend service interfaces targeted by the requests. For example registrars and other clients can request services over EPP with a registry in order to register and renew domain names and perform other domain name related operations. The registry can offer domain name related services for many types of TLDs e.g. Brand TLDs regulated TLDs unregulated TLDs etc. while each registrar can request domain name related operations for one or a few types of TLDs. The registry or another entity can provide one or more TLD type specific VIPs to each registrar for making service requests. The registry or another entity can also provide one or more special VIPs to select registrars for making specific types of service requests such as batch auto pool. Then when one of the registrars sends a service request to a VIP designated for a specific type of TLDs or service requests the intelligent routing system can respond to the service request in a manner appropriate and or desired for the specific type of TLDs or service requests associated with the VIP.

Furthermore the intelligent routing system can decrease server infrastructure costs because the same set of gateways and backend service platform can be utilized to provide multiple discrete backend application services. The intelligent routing system can also decrease the level of complexity for requestors and other clients because the intelligent routing system simplifies the connection pool needed to request domain name related services. Moreover the intelligent routing system can naturally handle unique client or access policies without requiring the creation of additional stacks of services e.g. gateways backend service platforms and the like . The intelligent routing system can also increase adoption of new backend services because the intelligent routing system can provide new backend services to requestors without requiring the requestors to connect to a new service interface.

In various embodiments the intelligent routing system can maintain version numbers and or operational states associated with the backend services in the many to many mapping to support version testing version upgrades and version downgrades or rollbacks. In some embodiments the intelligent routing system can factor in the version numbers and or operational states associated with the backend services when routing service requests without factoring in the VIPs associated with the backend services. In additional embodiments when routing service requests the intelligent routing system can factor in the version numbers and or operational states associated with the backend services in conjunction with their associated VIPs in the event that one or more backend services need to be upgraded on different schedules across the VIPs. Each version of a backend service can be assigned a unique version number and optionally with an operational state. A state machine can be defined for the gateways to determine which service to route requests to with or without using the VIPs as a variable. Embodiments of the state machine for a backend service can include operational states such as for example inactive past current and next. One or more gateways can be configured to route a service request to a service having a specific version number or operational state like a set of gateways could be configured to sniff test the next state while normal production gateways would be configured only for the current state. If there is a need to troubleshoot a service prior to making a decision to rollback a gateway can be configured for the past state. The inactive state can serve as a terminal state for an inactive version of a service prior to un deploying the inactive version of the service.

It would be advantageous for the intelligent routing system to maintain version numbers and or operational states associated with the backend services and route requests over EPP based at least in part on the version numbers and or operational states associated with backend services sought by the requests. By maintaining version numbers and or operational states associated with the backend services the intelligent routing system can support version testing version upgrades and version downgrades or rollbacks and allow for selective exposure of new backend services. Furthermore in doing so the intelligent routing system can seamlessly handle backend service upgrades without negatively impacting requestors and other clients because the requestors can maintain connections to the frontend service interfaces and the gateways during backend service upgrades. Having the ability to version test services and seamlessly upgrade services with no or minimal downtime or interruption provides an impetus for the backend service platform to develop and deploy new services thereby enhancing services provided to the requestors and increasing the backend service platform s competitive advantage.

Gateways can route service requests received at service interfaces from one or more requestors. Gateways and or components e.g. network servers communicatively coupled to gateways can provide service interfaces . Routing tables locally stored in gateways respectively are each a many to many mapping between service interfaces and a set of services provided by a backend service platform . Routing tables can include VIPs associated with service interfaces as a high level routing element to the set of services . Gateways can use information stored in routing tables to determine state or status information associated with the set of services . For example gateways can receive connect requests via service interfaces and provide EPP greetings based at least in part on the VIPs of service interfaces targeted by the requests. When responding to login and or connect requests gateways can take into account the VIPs of service interfaces targeted by the login and or connect requests. Along with the requestors IP addresses login names passwords and digital certificates gateways can use the VIPs of the targeted service interfaces as a factor in making authorization or authentication decisions. For instance gateways can grant a request to access one or more backend services of services when the VIP of the service interface targeted by the request is listed in its routing table as authorized to access the one or more backend services.

Gateways can use routing tables to identify services that are sought by service requests based at least in part on the VIPs associated with service interfaces targeted by the service requests. After identifying the services being sought gateways can route the service requests to the identified service s . Gateways can communicate with external systems and networks that are capable of transmitting service requests over EPP. As described earlier the default transport for EPP is TCP. However gateways can be configured to receive and transmit EPP messages over Hypertext Transfer Protocol HTTP HTTP Secure HTTPS or other network protocols. Each of gateways can be any gateway with the requisite functional capability such as for example gateway as shown in and described in greater detail below.

In various embodiments routing tables can store version numbers and or operational states associated with one or more of services in the many to many mapping. The stored version numbers and or operational states may support version testing version upgrades and version downgrades or rollbacks. Gateways can perform version dependent routing in conjunction with the VIPs in the event that backend services needs to be upgraded on different schedules across the VIPs. Alternatively gateways can perform version dependent routing independent of the VIPs. Versions of a service e.g. one of services can each be assigned a unique version number and optionally an operational state. A state machine can be defined for gateways to determine which version of the service to route requests to with or without using the VIPs as a variable. Embodiments of the state machine for a service can include operational states such as for example inactive past current and next.

As shown in system can further include a management server and backend service platform . Management server backend service platform and gateways can be communicatively coupled via a network . Network can include any combination of one or more wired or wireless communication networks such as a local area network a near field communication link or network a wide area network a cellular network the Internet a cloud based network and the like or any combination thereof. Management server can maintain a master routing table that contains a many to many mapping between VIPs associated with service interfaces and services provided by backend service platform . Management server can manage routing tables stored in gateways by propagating the many to many mapping in master routing table to gateways . Additionally and or alternatively management server can manage routing tables stored in gateways by allowing gateways to replicate the many to many mapping in master routing table .

Management server can generate and or update the many to many mapping between the VIPs and the backend services in a centralized approach a de centralized approach or a mixed approach e.g. de centrally with overrides managed centrally . In the centralized approach services can register with management server and management server can generate the authoritative routing information for services . In the de centralized approach services can generically register with management server and the routing mapping can be configured by an external routing manager application or based on preferences provided by services . In the mixed approach services can publish their desired VIPs and management server can override the preferences provided by services 

In various embodiments management server can manage services and store or provide information related to some or all of services . Each of services can communicate its unique information to management server . Management server can be a repository of information related to services . Information provided by each of services can include its name authorized and or preferred VIP s version number operational state connectivity information and the like. Additional service related information for each of services can include information about its EPP handlers EPP Poll handlers and EPP extensions. A system administrator can make updates to any one of services using an administrative user interface UI or application programming interface API on management server . After the system administrator makes changes to a service management server can automatically communicate the changes made to that service to gateways . Management server can push this information to gateways . Alternatively or in addition gateways can poll management server to gather information about services . Each of gateways can locally store this information in their corresponding routing tables 

Management server can perform various operations on each of services such as enable disable add delete modify and the like. Management server can also organize related services into a service group. For example cTLD can be a service group with individual services associated with each of dotTLD dotTLD and dotTLD included as part of the service group. A system administrator can have the ability to control the service group as a single entity and perform operations such as enable disable upgrade etc. on the service group as a whole. Management server can be any computer system with the requisite functional capability such as a computer system as shown in and described in greater detail below.

Backend service platform can be a scalable fault tolerant platform for providing one or more services . Backend service platform can use one or more protocols to communicate with gateways and management server via network and can be configured to host multiple services . Although not shown backend service platform can include one or more databases to store information related to services and a user interface to enable a user to provide inputs to management server to control and or manage activities such as maintenance upgrades etc. Services can either be individual services e.g. a domain name registry services a domain name suggestion service etc. offered by a registry or a service category with individual services included in each category. Each of services can be capable of communicating with management server and at least one gateway of gateways . Each of services can have unique information associated with it such as its name authorized and or preferred VIP s version number operational state connectivity information EPP handlers EPP Poll handlers EPP extensions etc. New services can be deployed and existing services can be modified or un deployed without affecting the normal functions of backend service platform or other services . Backend service platform can be implemented using one or more general purpose servers having the requisite functional capability such as computer system as shown in and described in greater detail below. Backend service platform can be implemented in a cluster configuration with each service cluster server including multiple services or service categories. For example J2EE clustering can be used to organize services . In such an instance a service cluster server URL can point to the service cluster server that includes the desired service and a service object identifier can be used to identify the particular service hosted by the server.

Further while system is described herein with reference to particular blocks it is to be understood that these blocks are defined for convenience of description and are not intended to imply a particular physical arrangement of component parts. Further system can have other capabilities not specifically described herein. It will be appreciated that the system configurations and components described herein are illustrative and that variations and modifications are possible. Service interfaces gateways management server network and service platform can have other capabilities not specifically described herein.

Receiving module can verify that an incoming request is an EPP request by determining the structure of the request and comparing the determined structure of the request with a standard or known EPP structure. Receiving module can be communicatively coupled to analysis module which can receive the incoming request from receiving module and analyze the request. In various embodiments receiving module and or analysis module can determine a VIP of a targeted service interface e.g. one of service interfaces to which the request is initially directed. A requestor can direct the request to the targeted service interface by sending the request to an IP address or a domain name that corresponds to the VIP associated with the targeted service interface .

The request can also include XML code that includes XML namespace information. XML namespaces can provide a simple method for qualifying element and attribute names used in XML documents by associating them with namespaces identified by Uniform Resource Identifier URI references. XML namespaces can be used for providing uniquely named elements and attributes in an XML instance. The name of the service sought by the request can be included as part of the elements and or attribute information. Analysis module can parse the XML code to extract the XML namespace information and identify at least one service being sought by a particular request based on the namespace information. For example the namespace information can be associated with a name suggestion service. In such an example parsing of the XML code included in the request would indicate that the request is intended for the name suggestion service. The XML code can include EPP sub product information in addition to the XML namespace information. In such an instance the XML namespace information can correspond to a service category e.g. domain name services and the sub product information can specify a particular service within the service category e.g. dotTLD domain service or name suggestion service. Analysis module can be also be configured to parse the XML code included in the request to determine the namespace information and the EPP extension sub product element.

Routing module can receive the VIP of the targeted service interface from receiving module or analysis module and identify the service sought by the request based at least in part on the VIP of the targeted service interface . Alternatively or in addition routing module can be configured to identify the service sought by the request only from among services that have a specific version number or operational state. In some embodiments routing module can consult a routing table to determine whether or not the requested service is available to the requestor based on the VIP of the targeted service interface and or the version number or operational state of the requested service . Routing module can receive the parsed XML from analysis module including an indication of the service sought by the request. In one example embodiment the targeted service may be determined based on a mode or state setting of the gateway or VIP. If there is a service with multiple entries in the table having an operational state of past active and next the selected service can be based on the operational state defined for that gateway or VIP which could be set to any one of the supported operational states. For example a gateway may be configured to route only to services with an operational state of next or the gateway may be configured to support all operational states. In either case however each VIP may be defined with an operational state. Further in some embodiments one VIP may be configured to route to the services having an operational state of next and another VIP may be configured to route to the services having an operational state of active. Routing module can identify the service sought by the request by referencing routing table which is described in greater detail infra. Routing table can be internal or external to routing module . In addition to status information routing module can also ascertain other information about the service e.g. connectivity information service name etc. in order to properly route the request. Routing module can also be configured to route the request upon identification of the service being sought. In certain embodiments the gateway state and or the VIP states would be defined outside of routing table .

Storage can be implemented using any non transitory computer storage medium such as disks flash memory and the like. Storage can store routing table and can also store other information like program instructions for providing frontend service interfaces analyzing incoming service requests determining VIPs associated with service interfaces targeted by the service requests performing XML code analysis routing the service requests etc. CPU which can be implemented as one or more integrated circuits e.g. a conventional microprocessor or microcontroller can control the operation of gateway . CPU can retrieve one or more program instructions stored in storage and execute the one or more programs to instruct and or cause analysis module and or routing module to perform certain functions.

Further while gateway is described herein with reference to particular blocks it is to be understood that these blocks are defined for convenience of description and are not intended to imply a particular physical arrangement of component parts. Further the blocks need not correspond to physically distinct components. Blocks can be configured to perform various operations e.g. by programming a processor or providing appropriate control circuitry and various blocks might or might not be reconfigurable depending on how the initial configuration is obtained. Embodiments of the present disclosure can be realized in a variety of devices including electronic devices implemented using any combination of circuitry and software.

Routing table can include a version number for each of the services which can be required in instances where multiple versions of a particular service are operating concurrently. In such instances version number can be helpful in directing a service request to an appropriate version of the particular service. Routing table can include connectivity information which can include URLs or addresses associated with the services or service cluster servers as described supra. A gateway e.g. one of gateways can use the URL or address information to route incoming service requests. Connectivity information can additionally include routing information for objects within the services to which requests for those services should be sent.

Routing table can include an operational state of the services. Examples of operational states can include inactive past current and next. Additional examples of operational states can include disabled offline temporarily unavailable and the like. Requests for a service can be routed based on for example a version number and or an operational state of the service. Moreover in some embodiments gateway can be configured to route the request based on a version number and or an operational state of the service. For example a set of gateways can be set up to sniff test a new version of a particular service and thus that set of gateways can route requests for that particular service based on a mapping in routing table with a version number that is greater i.e. newer than a current version. In such an example gateway may have an operation state that is set to next. Additionally and or alternatively each VIP may have a defined operational state that allows a single gateway configured for any state to drive the routing decisions. In the meantime normal production gateways can be set up to continue routing requests for that particular service based on a mapping in routing table with version number matching a current version and or operational state set to current. If there is a need to troubleshoot a service prior to making a decision to rollback a gateway can be set up to route requests for that particular service based on a mapping in routing table with version number that is smaller i.e. older than a current version and or operational state that is set to past. 

Routing table can be dynamically updated each time a change is made to a service or a service group or category. Alternatively routing table can be updated periodically. Information included in routing table can be supplied by a central management server e.g. management server . Alternatively or in addition routing table can obtain information from various sources such as the central management server a service platform e.g. backend service platform an external routing manager application and the like. In some instances information for one or more services and or service categories included in routing table can be fixed and or updated manually. Although routing table has been described with reference to certain information it will be appreciated that the information shown is for illustrative purposes only. One skilled in the art would realize that routing table can have other information in lieu of or in addition to the information illustrated in .

At block the gateway can identify at least one service sought by the request. For example the gateway can identify the service sought by the request based at least in part on the VIP associated with the targeted service interface. Alternatively or in addition the gateway can identify the service sought by the request based on version numbers and or operational states associated with the service the gateway and the VIP. For instance if the gateway is configured to sniff test new services or new versions of existing services then the gateway can look for the service sought by the request in the many to many mapping where the version number is greater i.e. newer than a current version and or the operational state set is to next. If the gateway is configured as a production gateway then the gateway can look for the service sought by the request in the many to many mapping where the version number matches a current version and or the operational state set is to current. And if there is a need to troubleshoot a service prior to making a decision to rollback then the gateway can look for the service sought by the request in the many to many mapping where the version number is smaller i.e. older than a current version or the operational state set is to past. Moreover the gateway can provide an EPP greeting to the request if the service requested is login or connect wherein the EPP greeting can include only services available to the VIP associated with the targeted service interface. The VIP can be defined with an operational state that allows the gateway to dynamically select the target services that match the VIP operational state.

After the gateway identifies the service sought by the request at block the gateway can determine whether or not the identified service is available to the requestor. For example if the service is offline the gateway can send a message indicating unavailability of the service at block . The unavailability message can include additional information that the system administrator wants to convey to the requestor such as the time the service went offline expected service reactivation time etc. If at block the gateway determines that the service is available then at block the gateway can route the request to the identified service. At block the gateway can receive a response from the identified service in reply to the request. For example the response can be a request completion message indicating that the request has been processed. Finally the completion message can be communicated to the requestor at block . For example the identified service can send the completion message to the gateway which in turn forwards the completion message to the requestor. The completion message can include additional information not communicated to the requestor such as metadata specifying additional information about the request e.g. execution time of the request. Such information may be required as part of a Service Level Agreement SLA negotiated by the service provider. The metadata information can be used to verify that the promised SLA criteria e.g. execution time of a request are being met by the service provider. The gateway can also log the metadata information for future use and only forward the completion message to the requestor.

It will be appreciated that process described herein is illustrative and that variations and modifications are possible. Acts described as sequential can be executed in parallel order of acts can be varied and acts can be modified or combined. For instance step can be omitted and the request can be sent to the service without verifying a current status of the service. In some embodiments blocks and can be combined to concurrently analyze the request and identify the service sought by the request.

While the disclosure has been described with respect to specific embodiments those skilled in the art will recognize that numerous modifications are possible. For instance the gateway and the management server can have additional functionalities not mentioned herein. In addition embodiments of the present disclosure can be realized using any combination of dedicated components and or programmable processors and or other programmable devices. While the embodiments described above can make reference to specific hardware and software components those skilled in the art will appreciate that different combinations of hardware and or software components can also be used and that particular operations described as being implemented in hardware might also be implemented in software or vice versa.

As shown system may include at least one processor a keyboard a pointing device e.g. a mouse a touchpad and the like a display main memory an input output controller and a storage device . Storage device can comprise for example RAM ROM flash memory EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. A copy of the computer program embodiment of the printer driver can be stored on for example storage device . System may also be provided with additional input output devices such as a printer not shown . The various components of system communicate through a system bus or similar architecture. In addition system may include an operating system OS that resides in memory during operation. One skilled in the art will recognize that system may include multiple processors . For example system may include multiple copies of the same processor. Alternatively system may include a heterogeneous mix of various types of processors. For example system may use one processor as a primary processor and other processors as co processors. For another example system may include one or more multi core processors and one or more single core processors. Thus system may include any number of execution cores across a set of processors e.g. processor . As to keyboard pointing device and display these components may be implemented using components that are well known to those skilled in the art. One skilled in the art will also recognize that other components and peripherals may be included in system .

Main memory serves as a primary storage area of system and holds data that is actively used by applications such as the printer driver in the barcode printing system running on processor . One skilled in the art will recognize that applications are software programs that each contains a set of computer instructions for instructing system to perform a set of specific tasks during runtime and that the term applications may be used interchangeably with application software application programs device drivers and or programs in accordance with embodiments of the present teachings. Memory may be implemented as a random access memory or other forms of memory as described below which are well known to those skilled in the art.

OS is an integrated collection of routines and instructions that are responsible for the direct control and management of hardware in system and system operations. Additionally OS provides a foundation upon which to run application software and device drivers. For example OS may perform services such as resource allocation scheduling input output control and memory management. OS may be predominantly software but may also contain partial or complete hardware implementations and firmware. Well known examples of operating systems that are consistent with the principles of the present teachings include MICROSOFT WINDOWS e.g. WINDOWS CE WINDOWS NT WINDOWS 2000 WINDOWS XP and WINDOWS VISTA MAC OS LINUX UNIX ORACLE SOLARIS OPEN VMS and IBM AIX.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For instance the various illustrative logics logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor e.g. processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

In one or more exemplary embodiments the functions described may be implemented in hardware software firmware or any combination thereof. For a software implementation the techniques described herein can be implemented with modules e.g. procedures functions subprograms programs routines subroutines modules software packages classes and so on that perform the functions described herein. A module can be coupled to another module or a hardware circuit by passing and or receiving information data arguments parameters or memory contents. Information arguments parameters data or the like can be passed forwarded or transmitted using any suitable means including memory sharing message passing token passing network transmission and the like. The software codes can be stored in memory units and executed by processors. The memory unit can be implemented within the processor or external to the processor in which case it can be communicatively coupled to the processor via various means as is known in the art.

If implemented in software the functions may be stored on or transmitted over a computer readable medium as one or more instructions or code. Computer readable media includes both tangible non transitory computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available tangible non transitory media that can be accessed by a computer. By way of example and not limitation such tangible non transitory computer readable media can comprise RAM ROM flash memory EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc as used herein includes CD laser disc optical disc DVD floppy disk and Blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Also any connection is properly termed a computer readable medium. For example if the software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. Combinations of the above should also be included within the scope of computer readable media.

Resources described as singular or integrated can in one embodiment be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims. Although the invention has been described with respect to specific embodiments it will be appreciated that the invention is intended to cover all modifications and equivalents within the scope of the following claims.

