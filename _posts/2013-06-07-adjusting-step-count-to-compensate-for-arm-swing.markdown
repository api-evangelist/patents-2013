---

title: Adjusting step count to compensate for arm swing
abstract: In some implementations, a mobile device can receive a motion signal from a motion sensor on the mobile device. The mobile device can determine a step count based on the motion signal. The mobile device can transform the motion signal from a time domain signal into a frequency domain signal. The mobile device can determine a dominant peak and harmonic peaks of the motion signal within a pedestrian frequency band. The mobile device can determine that the dominant peak corresponds to an arm swing of a user and adjust the step count to compensate for the arm swing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09459118&OS=09459118&RS=09459118
owner: Apple Inc.
number: 09459118
owner_city: Cupertino
owner_country: US
publication_date: 20130607
---
Mobile devices often include motion sensors to detect when and how a mobile device is in moving. For example the mobile device can include an accelerometer that measures movement and generates motion signals describing the movement of the mobile device. A mobile device with a motion sensor can be configured with pedometer functionality e.g. step counting that analyzes the motion signals generated by the mobile device s motion sensors to determine when a user has taken a step.

In some implementations a mobile device can receive a motion signal from a motion sensor on the mobile device. The mobile device can determine a step count based on the motion signal. The mobile device can transform the motion signal from a time domain signal into a frequency domain signal. The mobile device can determine a dominant peak and harmonic peaks of the motion signal within a pedestrian frequency band. The mobile device can determine that the dominant peak corresponds to an arm swing of a user and adjust the step count to compensate for the arm swing.

Particular implementations provide at least the following advantages The step count determined by a mobile device can be corrected to compensate for the arm swing of a user when the mobile device is worn on the user s arm.

Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features aspects and potential advantages will be apparent from the description and drawings and from the claims.

In some implementations the mobile device can perform a frequency analysis to determine a step count. For example the mobile device can perform a Fast Fourier transformation FFT on the motion signal to transform the motion signal from a time domain signal to a frequency domain signal. The frequency domain signal can be analyzed by the mobile device to determine frequency having the dominant peak e.g. peak associated with largest magnitude . The dominant frequency can be used to determine the number of steps taken by the user. For example if the dominant frequency is two hertz 2 Hz then the mobile device can count two steps per second.

The above mentioned methods of step detection work well when the mobile device is attached to the user s torso e.g. waist pockets etc. because the dominant forces detected by the motion sensor and used to determine a step will correspond to the up and down movement generated when the user takes a step. However when the mobile device is attached to the user s arm wrist or held in the user s hand the dominant forces detected by the motion sensor can correspond to the arm swing . Thus the force of the arm swing can interfere with the correct identification of a step taken by the user. For example the force of the arm swing can mix with the force of the user s step to generate a motion signal in the time domain that makes the threshold crossing step detection algorithm inaccurate e.g. prevents crossing the threshold . The force of the arm swing can make the arm swing the dominant frequency causing the frequency based step detection to produce inaccurate results.

In some implementations the step frequency can be determined by looking for the dominant frequency within the pedestrian frequency band. For example the pedestrian frequency band is a range of frequencies corresponding to the pace at which people normally walk. The pedestrian frequency band e.g. 0.4 Hz to 6 Hz can be determined empirically. The dominant frequency is the frequency within the pedestrian frequency band that has the highest power. The term dominant peak refers to the power of the dominant frequency and the shape of the frequency domain waveform at the dominant frequency. For example peak corresponds to the highest power measurement in graph and is therefore the dominant peak. Thus because frequency corresponds to dominant peak frequency is the dominant frequency in the graph and corresponds to the frequency at which a user takes a step. In some implementations step counts can be generated at the same frequency as the dominant frequency. For example if the dominant frequency is 2 Hz then two steps will be counted for every second that passes.

In some implementations graph can have peaks and that correspond to the motion generated when the user takes a step and when the user swings her arms . For example peaks and corresponding frequencies that exceed a peak quality threshold can be analyzed when determining arm swing compensation. Determining peak quality is described below with reference to .

As illustrated by graph the dominant peak corresponds to step frequency . The mobile device can determine that dominant peak corresponds to the step frequency because the dominant peak is not the lowest frequency peak within the pedestrian frequency band above the peak quality threshold. In graph the lowest frequency peak corresponds to the user s arm swing which in this case is less powerful than the power generated by the user s steps. Thus because the dominant frequency corresponds to the frequency of the user s steps no step correction is required to compensate for the user s arm swing. For example when the user wears the mobile device on her arm the motion of the arm can be detected by the motion sensor and can result in the generation of motion data that can make it difficult to determine a correct step count. When the power of the user s arm swing is less than the power of the user s step no step count correction is needed as illustrated by above. When the power of the user s arm swing is greater than the power of the user s step the arm swing frequency becomes the dominant frequency and step count correction is required as described further below.

In some implementations the need for arm swing compensation can be determined by analyzing the frequency domain motion signal to determine frequencies having peaks that exceed a peak quality threshold to determine the dominant frequency to determine that harmonics of the dominant frequency exist to determine that the dominant frequency corresponds to the peak having the smallest frequency of all peaks above a peak quality threshold and that there is another peak at about twice the dominant frequency.

For example graph can have peaks and that correspond to the motion generated when the user takes a step and when the user swings her arms. For example peaks and can be located at frequencies within the pedestrian frequency band e.g. 0.2 Hz to 6 Hz . As illustrated by graph the dominant peak corresponds to arm swing frequency which in this case is more powerful than the power generated by the user s steps. The mobile device can determine that dominant peak corresponds to the arm swing frequency if the dominant peak corresponds to the lowest frequency peak within the pedestrian frequency band e.g. 0.2 Hz to 6 Hz that exceeds a peak quality threshold value and if there is another peak at a harmonic frequency that is about two times the frequency of the dominant frequency. For example if step frequency is about twice e.g. multiplied by about two the arm swing frequency the mobile device can determine that the dominant frequency corresponds to the user s arm swing. Thus because the dominant peak corresponds to the arm swing frequency instead of the step frequency step correction is required.

For example when the user wears the mobile device on her arm the motion of the arm can be detected by the motion sensor which generates motion data that can make it difficult to determine a correct step count as described above. When the power of the user s arm swing is less than the power of the user s step step count correction is needed because the dominant frequency can no longer be counted on to provide an accurate step count. When the power of the user s arm swing is greater than the power of the user s step the arm swing frequency becomes the dominant frequency. When the dominant frequency corresponds to the user s arm swing the step count will be about half of what it should be e.g. frequency of the user s arm swing is about half of the frequency of the user s steps and step count correction is required.

At step the mobile device can determine a step count based on the motion signal. For example the mobile device can use threshold crossing or frequency analysis algorithms as described above to determine a preliminary step count based on the motion signal.

At step the mobile device can transform the motion signal from a time domain motion signal into a frequency domain motion signal. For example the mobile device can perform a FFT on the time domain motion signal to generate a frequency domain motion signal as described above with reference to .

At step the mobile device can analyze the peaks of the frequency domain motion signal to determine whether to adjust the preliminary step count. For example the mobile device can identify the dominant frequency within the pedestrian frequency band by determining which frequency has the tallest peak. If the dominant frequency corresponds to the smallest frequency peak within the pedestrian frequency band and there is a peak at a frequency that is a multiple of e.g. about two times the dominant frequency then the mobile device can determine that the dominant frequency corresponds to the arm swing of the user.

At step if the mobile device determines that the dominant frequency corresponds to the user s arm swing then at step the mobile device can multiply the preliminary step count by a factor e.g. about two to obtain the corrected step count and record the corrected step count at step . If at step the mobile device determines that the dominant frequency does not correspond to the user s arm swing e.g. the left most frequency is not the dominant frequency or there is no peak at twice the dominant frequency the mobile device can record the preliminary step count at step . For example the mobile device can record the step count at step by saving the step count to memory adding the step count to a previously determined step count and or presenting the step count to the user.

In some implementations the mobile device can determine the step count as described above for discrete sequential windows of time and then add the step count determined for a time window to step counts determined for previous windows of time. For example samples of the motion signal can be obtained at step using a first window of five seconds. The five second of samples can be analyzed as described in process to determine a step count. After the first window of samples is analyzed samples of motion signal can be obtained at step using a second window of five seconds analyzed and a step count determined. The step count determined for the second window of samples can be added to the step count of the first window of samples to get a total step count across the two windows of samples. This process can continue until the user stops taking steps or until the step counting feature of the mobile device is disabled for example.

At step a motion signal can be obtained. For example the motion signal can be obtained from a motion sensor of the mobile device. The motion signal can be a time domain motion signal that indicates the magnitude of motion over time.

At step the mobile device can obtain a first sample of the motion signal for first period of time using a first window function e.g. a 3 second window . At step the mobile device can obtain a second sample of the motion signal for a second period of time using a second window function e.g. a five second window . At step the mobile device can obtain a third sample of the motion signal for a third period of time using a third window function e.g. a 10 second window . The window functions can be applied to the motion signal concurrently or sequentially in time or can be overlapping in time to obtain samples of the motion signal to analyze when generating a composite frequency domain motion signal with the best peaks.

At steps the mobile device can transform the time domain motion signal samples for each window of time into the frequency domain. For example the mobile device can perform an FFT or other frequency transform on the motion signal sample for each window of time.

At steps the mobile device can identify the best quality peaks in the frequency domain motion sample for each window of time. For example for some users longer sample windows will generate better quality peaks. For other users shorter sample windows will generate better quality peaks. Thus the mobile device can be configured to analyze motion signal sample windows of varying lengths to determine the motion signal windows with the best quality peaks. This approach will capture a wider range of stride behavior. For example longer motion signal sample windows will generate better quality peaks for a user with slow constant pacing in their movement. Shorter motion signal sample windows will generate better quality peaks for a user with irregular pacing. A method for determining the quality of frequency domain motion signal peaks is described with reference to below.

At step once the best quality peaks are identified in each frequency domain motion signal window the best quality peaks for each frequency can be merged to generate a composite frequency domain signal. For example the best quality peak for each frequency in the pedestrian frequency band can be determined from the various frequency domain motion signal sample windows. The best peaks for each frequency across the sample windows can be combined into a composite frequency domain motion signal. For example the composite motion signal can include peaks from two or more sample windows. The best peak for one frequency can come from a short window while the best peak for another frequency can come from a long window. The composite frequency domain motion signal can be used in step of to analyze the frequency domain motion signal peaks and determine if an arm swing is detected.

One or more Application Programming Interfaces APIs may be used in implementations described herein. An API is an interface implemented by a program code component or hardware component hereinafter API implementing component that allows a different program code component or hardware component hereinafter API calling component to access and use one or more functions methods procedures data structures classes and or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.

An API allows a developer of an API calling component which may be a third party developer to leverage specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An operating system OS can have multiple APIs to allow applications running on the OS to call one or more of those APIs and a service such as a program library can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.

In some implementations the API implementing component may provide more than one API that provide access to different aspects of the functionality implemented by the API implementing component. For example one API of an API implementing component can provide a first set of functions and can be exposed to third party developers and another API of the API implementing component can be hidden not exposed and provide a subset of the first set of functions and also provide another set of functions such as testing or debugging functions which are not in the first set of functions. In other implementations the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.

An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations embodied for example by function or method calls exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling API calling component and an API implementing component. Transferring the API calls may include issuing initiating invoking calling receiving returning or responding to the function calls or messages in other words transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant key data structure object object class variable data type pointer array list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.

Furthermore data types or classes may be provided by the API and implemented by the API implementing component. Thus the API calling component may declare variables use pointers to use or instantiate constant values of such types or classes by using definitions provided in the API.

Generally an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example the API implementing component and the API calling component may each be any one of an operating system a library a device driver an API an application program or other module e.g. the API implementing component and the API calling component may be the same or different type of module from each other . API implementing components may in some cases be embodied at least in part in firmware microcode or other hardware logic.

In some implementations an API may allow a client program to use the services provided by a Software Development Kit SDK library. In other embodiments an application or other client program may use an API provided by an Application Framework. In these implementations the application or client program may incorporate calls to functions or methods provided by the SDK and or provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these implementations provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations an API call can report to an application the capabilities or state of a hardware device including those related to aspects such as input capabilities and state output capabilities and state processing capability power state storage capacity and state communications capability etc. and the API may be implemented in part by firmware microcode or other low level logic that executes in part on the hardware component.

The API calling component may be a local component e.g. on the same data processing system as the API implementing component or a remote component e.g. on a different data processing system from the API implementing component that communicates with the API implementing component through the API over a network. An API implementing component may also act as an API calling component e.g. it may make API calls to an API exposed by a different API implementing component and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.

The API may allow multiple API calling components written in different programming languages to communicate with the API implementing component thus the API may include features for translating calls and returns between the API implementing component and the API calling component. However the API may be implemented in terms of a specific programming language. An API calling component can in one embedment call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug in provider and another set of APIs from another provider e.g. the provider of a software library or creator of the another set of

For example the API implementing component can include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . The API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a machine readable medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc.

Note that the Service B has two APIs and one of which Service B API 1 receives calls from and returns values to Application 1 and the other Service B API 2 receives calls from and returns values to Application 2 . Service A which can be for example a software library makes calls to and receives returned values from OS API 1 and Service B which can be for example a software library makes calls to and receives returned values from both OS API 1 and OS API 2 . Application 2 makes calls to and receives returned values from OS API 2 .

Sensors devices and subsystems can be coupled to the peripherals interface to facilitate multiple functionalities. For example a motion sensor a light sensor and a proximity sensor can be coupled to the peripherals interface to facilitate orientation lighting and proximity functions. Other sensors can also be connected to the peripherals interface such as a global navigation satellite system GNSS e.g. GPS receiver a temperature sensor a biometric sensor magnetometer or other sensing device to facilitate related functionalities.

A camera subsystem and an optical sensor e.g. a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor can be utilized to facilitate camera functions such as recording photographs and video clips. The camera subsystem and the optical sensor can be used to collect images of a user to be used during authentication of a user e.g. by performing facial recognition analysis.

Communication functions can be facilitated through one or more wireless communication subsystems which can include radio frequency receivers and transmitters and or optical e.g. infrared receivers and transmitters. The specific design and implementation of the communication subsystem can depend on the communication network s over which the computing device is intended to operate. For example the computing device can include communication subsystems designed to operate over a GSM network a GPRS network an EDGE network a Wi Fi or WiMax network and a Bluetooth network. In particular the wireless communication subsystems can include hosting protocols such that the device can be configured as a base station for other wireless devices.

An audio subsystem can be coupled to a speaker and a microphone to facilitate voice enabled functions such as speaker recognition voice replication digital recording and telephony functions. The audio subsystem can be configured to facilitate processing voice commands voiceprinting and voice authentication for example.

The I O subsystem can include a touch surface controller and or other input controller s . The touch surface controller can be coupled to a touch surface . The touch surface and touch surface controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch surface .

The other input controller s can be coupled to other input control devices such as one or more buttons rocker switches thumb wheel infrared port USB port and or a pointer device such as a stylus. The one or more buttons not shown can include an up down button for volume control of the speaker and or the microphone .

In one implementation a pressing of the button for a first duration can disengage a lock of the touch surface and a pressing of the button for a second duration that is longer than the first duration can turn power to the computing device on or off. Pressing the button for a third duration can activate a voice control or voice command module that enables the user to speak commands into the microphone to cause the device to execute the spoken command. The user can customize a functionality of one or more of the buttons. The touch surface can for example also be used to implement virtual or soft buttons and or a keyboard.

In some implementations the computing device can present recorded audio and or video files such as MP3 AAC and MPEG files. In some implementations the computing device can include the functionality of an MP3 player such as an iPod . The computing device can therefore include a 36 pin connector that is compatible with the iPod. Other input output and control devices can also be used.

The memory interface can be coupled to memory . The memory can include high speed random access memory and or non volatile memory such as one or more magnetic disk storage devices one or more optical storage devices and or flash memory e.g. NAND NOR . The memory can store an operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks.

The operating system can include instructions for handling basic system services and for performing hardware dependent tasks. In some implementations the operating system can be a kernel e.g. UNIX kernel . In some implementations the operating system can include instructions for adjusting a step count to compensate for the user s arm swing. For example operating system can implement the arm swing compensation features as described with reference to .

The memory can also store communication instructions to facilitate communicating with one or more additional devices one or more computers and or one or more servers. The memory can include graphical user interface instructions to facilitate graphic user interface processing sensor processing instructions to facilitate sensor related processing and functions phone instructions to facilitate phone related processes and functions electronic messaging instructions to facilitate electronic messaging related processes and functions web browsing instructions to facilitate web browsing related processes and functions media processing instructions to facilitate media processing related processes and functions GNSS Navigation instructions to facilitate GNSS and navigation related processes and instructions and or camera instructions to facilitate camera related processes and functions. The memory can store other software instructions to facilitate other processes and functions such as the arm swing compensation processes and functions as described with reference to .

The memory can also store other software instructions such as web video instructions to facilitate web video related processes and functions and or web shopping instructions to facilitate web shopping related processes and functions. In some implementations the media processing instructions are divided into audio processing instructions and video processing instructions to facilitate audio processing related processes and functions and video processing related processes and functions respectively.

Each of the above identified instructions and applications can correspond to a set of instructions for performing one or more functions described above. These instructions need not be implemented as separate software programs procedures or modules. The memory can include additional instructions or fewer instructions. Furthermore various functions of the computing device can be implemented in hardware and or in software including in one or more signal processing and or application specific integrated circuits.

