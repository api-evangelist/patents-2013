---

title: Mitigating malware
abstract: Remediating a suspicious element in a web page is disclosed. An indication of a suspicious element is received. A quarantine instruction is sent to a server of the web page. One example of a quarantine instruction is an instruction to block the page from being served. Another example of a quarantine instruction in as instruction to block an element of the page from being served.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268937&OS=09268937&RS=09268937
owner: Dasient, Inc.
number: 09268937
owner_city: San Francisco
owner_country: US
publication_date: 20131011
---
This application claims priority to U.S. Provisional Patent Application No. 61 214 546 entitled METHOD AND APPARATUS FOR WEB SERVER ANTI MALWARE AND QUARANTINING filed Apr. 25 2009 and also claims priority to U.S. Provisional Patent Application No. 61 214 626 entitled METHOD AND APPARATUS FOR CONTINUOUS MONITORING OF DOMAIN URLS ON MULTIPLE BLACKLISTS filed Apr. 25 2009 both of which are incorporated herein by reference for all purposes.

One way computers have traditionally been protected from unauthorized and frequently malicious programs modifications hereinafter collectively malware is through the use of antivirus software typically installed on the computer to be protected. Increasingly malicious individuals and organizations are focusing their attacks on servers. Unfortunately while server oriented antivirus software can be used to protect the applications and operating systems of such servers from being compromised any exploits that evade detection can readily be propagated by the server to potentially hundreds of thousands of clients or more. Further even if the server itself is fully protected the pages that it serves to clients may nonetheless include malicious content loaded from external sources.

The potential for damage to many clients by a single server is sufficiently high that increasingly major search providers browser developers and other entities such as third party security companies have begun blacklisting servers that are believed to be propagating infections. While such actions can potentially protect clients from being infected because they are unable to retrieve any content from the blacklisted servers the operators of blacklisted servers may have a difficult time correcting the problem e.g. due to obfuscation techniques employed by the nefarious individuals and or being removed from the blacklist in a timely manner. For the operators being blacklisted can result in the loss of both good will and also revenue.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

System site and site respectively comprise standard commercially available server hardware e.g. having multi core processors 4 Gigabytes of RAM and Gigabit network interface adapters run typical server class operating systems e.g. Linux and also run Apache HTTP Server software. In various embodiments system is implemented across a scalable infrastructure comprising multiple such servers solid state drives and other applicable high performance hardware. Site is a commodity desktop computer and runs Microsoft Internet Information Services IIS software.

In the example shown in client is a web enabled cellular phone and clients and are personal computers. Other examples of clients that can be used in conjunction with the techniques described herein include personal digital assistants networked entertainment devices e.g. televisions portable video players and game consoles and virtually any other networkable device.

As will be described in more detail below system is configured to perform a variety of analyses on the content served by sites such as site detect suspicious elements present in that content or loaded from third party sources when the content is accessed and make available instructions that can be used to mitigate such elements if applicable. As used herein malicious elements e.g. ones intentionally included in site by a nefarious individual program represent a subset of suspicious elements. Examples of content that can be used in conjunction with the techniques described herein include HTML pages including JavaScript PDF documents and executables.

Whenever system is described as performing a task such as determining whether a website includes malicious content either a single component all components or a subset of all components of system may cooperate to perform the task. Similarly whenever a component of system is described as performing a task a subcomponent may perform the task and or the component may perform the task in conjunction with other components. Portions of the functionality of system can also be provided by or replicated by one or more third parties. As one example in some embodiments system provides only mitigation services and does not provide detection services instead obtaining detection information from a third party. As another example a very large publisher of content may choose to run its own system within its own data centers and contract only for updates and technical support.

In various embodiments at least some of the functionality provided by system is independently provided by elements of the environment shown in other than system and the techniques described herein are adapted as applicable. For example search provider which allows visitors to search the World Wide Web is configured to provide the detection functionality of system . Specifically search provider routinely scans sites and looks for the presence of problematic content. If problematic content is found search provider will prevent visitors to its site from accessing search results present on the implicated site. As another example in some embodiments a module installed on client e.g. a browser plugin is configured to intercept and remediate problematic content prior to it being rendered in a browser installed on client .

Database is configured to store a variety of information including a catalogue of known malware snippets. An example database schema for database is provided below.

Crawler is configured to enumerate the URLs of the pages hosted by a given site such as site and to provide them to detection engine . Detection engine is configured to perform a three phase analysis of site content to detect malware and pinpoint its origin also referred to herein as determining the lineage of the malware . For example using the techniques described herein the insertion of a malicious element e.g. a 1 1 pixel transparent image or an IFRAME sourcing in malicious content from a foreign web site into an otherwise benign page by a malicious and obfuscated iframe can be detected reported to the appropriate entity and ultimately prevented from infecting downstream clients.

All pages can be analyzed with equal frequency and can also be analyzed with varying frequency depending on factors such as how important the page is e.g. the front page of a page that receives millions of visitors per day or the login page of an online bank vs. a personal blog and what level of service has been contracted for e.g. premium service vs. basic service . Detection engine is configured to examine the top ten pages of site once an hour. Which pages are designated as top may be performed manually by an administrator e.g. of site and may also be automatically specified to system by software running on site that logs visitor activities. In the example shown detection engine is configured to examine the remaining pages of site and all pages of site once a day. Further while site has not contracted with system to perform malware detection or remediation services as will be described in more detail below in some embodiments detection engine is nonetheless instructed to examine its pages as well.

In the first phase of analysis content analyzer performs static and dynamic analysis of the content. Static analysis module is configured to parse pages content and recognize patterns of information such as signatures of known malware the presence of script tags and iframes and their content etc. Page content and metadata associated with the page content as well as any individual elements extracted during static analysis are stored in database by static analysis module .

In addition to static content e.g. HTML many web pages also include active content e.g. JavaScript . Malicious individuals are generally aware of ways to conceal the functionality of their active content from purely static analysis techniques. For example an attacker might anticipate that a static scanner would evaluate the source tag of a script see that a path to a foreign country is included and conclude that the script is malicious. To evade the scanner the attacker might omit the source tag and instead use an onload JavaScript handler to import malicious content into a page.

Accordingly during the first phase of analysis a variety of dynamic analysis is performed by dynamic analysis module . Dynamic analysis module is configured to emulate the effects of a given page being loaded in a browser. In some embodiments the dynamic analysis performed by module includes loading the content in a browser instrumented to track what specific actions are taken as the page is loaded by employing a set of breadcrumbs that can be used to step through the loading of the page. As a result of the examination of the content in an instrumented browser the origin of any element present in the document as finally rendered in a browser can be determined even if the element is intentionally obfuscated.

One way of constructing an instrumented browser is as follows. The instrumented browser is built in an object oriented programming language and has classes and objects inside that are responsible for rendering different parts of the page. One object is responsible for rendering HTML documents and in turn other objects are responsible for handling elements such as iframes and scripts. Mock objects can also be included such as a mock PDF renderer. When a script attempts to render a PDF the mock renderer is called an action that can be logged even if a proper PDF renderer object is not present.

The instrumented browser parses a given document into a document object model DOM that unfolds the elements of the document into a tree structure that is used to display the page elements in the correct places. Elements such as iframes import additional documents having their own DOMs into the document. The static lineage of a given element can be determined by examining its position in the DOM.

The instrumented browser is also configured to keep track of the dynamic lineage of elements. In some cases the structure of the DOM may be changed in place in the browser by a programming language that can run in the browser such as JavaScript. For example a script tag when executed might have the effect of inserting an iframe into the DOM. Such an iframe could be included for a valid reason but could also be included for malicious purposes. The iframe would be tagged to the body but the parent is not the body node. Instead the iframe has a dynamic parent that is the script node. The script node is one of the children of the body and it has a child frame.

One way to determine the dynamic lineage of elements is to configure the instrumented browser with a set of hooks into the JavaScript engine. Elements such as inline script tags are interpreted while the page is parsed. The control in the browser engine passes from the parser to the JavaScript engine and when it is complete control reverts back to the parser. Whenever the JavaScript engine is entered a pointer to the script node is pushed onto a stack. When the JavaScript engine is exited a pop of the stack is performed. In the case of script tags for which the source field is defined the browser renders other elements of the page and makes an asynchronous request to fetch the JavaScript file and when it is received there is an asynchronous entry into the JavaScript engine. Scripts can also generate more script tags. While the JavaScript engine is in control any new nodes that are created are tagged with a dynamic parent pointer that points back to the script node in whose context the JavaScript engine was entered.

The instrumented browser can also be used to keep track of redirections. For example when an advertisement needs to be served on behalf of site ad server is contacted. If ad server does not have an appropriate advertisement in inventory to serve a redirection is made to ad server and so on. Suppose ad server is ultimately responsible for serving an advertisement on behalf of site and the advertisement includes a malicious element. System will be able to detect the origin of the malicious element as being site and also note what malicious behavior e.g. initiating a driveby download it is responsible for.

As mentioned above the dynamic analysis performed by module can also include loading one or more different virtual machine images e.g. having different operating systems application versions etc. rendering instances of the content in those virtual machines and observing the results. In various embodiments both types of dynamic analysis instrumented browser examination and virtual machine emulation are used. In some embodiments if a problem is indicated that implicates a specific version of an operating system and or particular application one or more images having the implicated operating system or application are used. In other embodiments all virtual machine images are used in the analysis. Other techniques can also be used to select which virtual machine images should be used by dynamic analysis module . For example the top ten pages of site may be evaluated using all virtual machine images e.g. covering several different operating systems and versions while other pages on site are examined using a single default image that represents the most common components present in a typical desktop client.

In the second phase of analysis feature analyzer examines the output of content analyzer e.g. as stored in database and generates a set of features which are also stored in database . Examples of features include the number of scripts present on a given page the country of origin of any iframe content and any other aspects pertaining to the content and or metadata associated with the page. Examples of features that can be generated as a result of dynamic content analysis include the number of scripts generated during page load detected by the instrumented browser and the number of processes created detected during use of a virtual machine . Features may or may not inherently indicate a problem. For example an iframe that imports content from a foreign country may more likely be malicious than not but is not conclusively malicious. Other types of scans can also be performed during this phase such as by passing files such as PDF files and executable through traditional virus scanners and features such as PDF passed virus scan can be included in database as applicable.

In a subsequent phase of analysis signal analyzer combines various features together using linear combinations weighting algorithms and machine learning algorithms and determines whether any signals are present. One example of a signal is page spawns one or more processes and includes an iframe that sources information from a foreign country. Another example of a signal is page includes a snippet of known malware e.g. as determined by comparing the content of the page against the catalogue stored in database . In some embodiments signals are one of two types soft and hard. A hard signal indicates that malware has been determined to be present. Actions such as immediately notifying an administrator of the site hosting the content of the presence of malware can be taken in response. Additional actions such as performing a deep level of analysis e.g. evaluation using one or more virtual machine images may also be performed to help pinpoint or otherwise conclusively determine all malicious elements present in the page and their origins if the most thorough level of analysis was not already performed.

A soft signal indicates that malware is potentially present and that additional analysis should be performed. As one example in various embodiments the three phase analysis performed by detection engine runs in a loop. During the first loop minimal processing is performed. For example limited examination is performed in the instrumented browser and no virtual machine emulation is performed for performance reasons. Suppose as a result of the first loop a determination is made that a particular version of an application e.g. a PDF reader appears to be exploited. As one example a soft signal of script is checking for a specific outdated version of a PDF reader might be generated by signal analyzer . While there might be a valid reason for a page to insist on a particular version of the application it is more likely that a malicious element hoping to leverage a vulnerability in that particular version of the application is present. Accordingly when the soft signal is generated another loop of processing is performed by detection engine and a progressively deeper level of data is collected for analysis. For example in the second round of analysis a virtual machine image including the specific PDF reader could be used by dynamic analysis module . If malicious behavior is observed during the virtual machine emulation a hard signal can be generated by signal analyzer . If benign behavior continues to be observed either an additional round of processing is performed in even more detail or a conclusion that the script is harmless is reached as applicable.

If detection engine determines that a malicious element is present in the content it is evaluating e.g. generates a hard signal it notifies reporting engine . Reporting engine is configured to generate a variety of reports described in more detail below. Also as described in more detail below quarantine engine is configured to help prevent any detected problem from being propagated to clients by sending appropriate quarantine instructions to the web server serving the content.

If the malicious element is included in site reporting engine is configured to send an alert to a designated administrator of site that allows the administrator to initiate a remediation action via quarantine engine that will prevent the iframe from being served to any future visitors to the page. If the malicious element is included in site reporting engine is configured to send an alert to a designated administrator of site . However as site has not contracted with system to provide remediation services the administrator of site will need to remove the problematic content manually. Nonetheless because the report generated by reporting engine includes an identification of the malicious iframe itself the administrator will have a considerably easier time removing the malicious content from the page than he would absent such an identification. If the malicious element is included in site in some embodiments reporting engine is configured to alert search provider and module that site has been compromised. As yet another example if the malicious element is being served by ad server in some embodiments the operator of ad server is informed that its subsyndicate ad server has either been compromised or is a rogue ad server.

Using the techniques described herein system is able to detect iframe as being a malicious element and specifically the source of the rootkit exploit . Reporting engine will generate an appropriate report for the administrator of the site. And if the online retailer has contracted for quarantining services quarantine engine will also be configured to generate a directive to quarantine iframe .

As indicated in region a scan of the online retailer s site comprising a total of 15 web pages revealed that one page is infected and the remaining fourteen pages are not . In various embodiments other information is also included in report such as whether or not the site or portions thereof have been included in a blacklist such as a blacklist maintained by search provider .

In region a copy of iframe is provided. If the administrator selects link the administrator will be taken to a page that provides additional information about the nature of the iframe e.g. based on the catalogue of information stored in database . If the administrator checks box and selects submit button a signal will be sent to quarantine engine to initiate a quarantine instruction with respect to iframe on the online retailer s webserver. In various embodiments other actions are also made available to the administrator in report . For example if it is determined that the site has been included in a blacklist maintained by search provider a second box can be included under box that allows the administrator to request that system send a request to search provider to remove the site from the blacklist once the quarantine has been implemented.

Script decodes into an iframe element . As with iframe this iframe when loaded by a client could download additional malicious code that will cause a driveby download. Using the techniques described herein system is able to detect script as being a malicious element and specifically the source of a driveby download . Reporting engine will generate an appropriate report for the administrator of the site. And if the online retailer has contracted for quarantining services quarantine engine will also be configured to generate a directive to quarantine script .

In addition to detecting problems server can also prevent infected sites from harming clients that access those sites. In the example shown in the Apache HTTP Server software installed on site s server hardware has been extended with a module called mod antimalware. The functionality of other web server software such as IIS can similarly be extended using the techniques described herein.

In the example shown in quarantine engine is configured to securely communicate with mod antimalware through the use of client side SSL certificates or other appropriate technology. When a determination is made e.g. by detection engine and confirmed by an administrator that a malicious element on site should be quarantined quarantine engine determines an appropriate quarantine instruction and securely sends the instruction to mod antimalware. At any given time mod antimalware may have multiple quarantine directives loaded in memory for consideration when serving pages.

When requests for pages are received by the web server the mod antimalware module determines whether the URL of the content to be served matches a URL prefix for which the module has a quarantine instruction. If not the module allows the content to be served. If so mod antimalware applies the rule to the page.

In various embodiments if as a result of mod antimalware applying a rule to a page the page is altered mod antimalware is configured to insert a header X Quarantine 1 into the page. If the page is not altered no header is included. The X Quarantine header can be used to determine whether an infection in a page has been removed from the source e.g. because an administrator has edited the content or whether the processing of mod antimalware is still required to protect downstream clients from the element.

In some embodiments. upon sending quarantining directives to the web server the quarantining service initiates a verification process to determine whether or not the quarantining was successful. The verification process entails a multi phase in depth scan e.g. using the techniques described above to verify that infected web pages are no longer served once quarantining directives have been deployed. Upon completion of the verification process the site administrator receives an email and or other notification as to whether or not the quarantining process was successful. In the case that it was successful the administrator can then remove the infection at his her leisure. If the quarantining verification failed i.e. an infection was still served on some web page then the quarantining service can deploy a stronger quarantining directive. For instance in the case that a QuarantineTag directive was deployed to attempt to mitigate a particular malicious tag in a web page but the infection still was served the quarantining service can deploy a Blacklist directive to prevent the entire page from being served as filtering only part of the page was unsuccessful. Additional emails can be sent to the administrator to keep the administrator up to date on the status of the quarantining and be sent a final email once all directive upgrades are attempted. Such emails can contain a link to a more detailed report which provides the administrator with information regarding whether specific URLs were successfully quarantined whether quarantining is in progress e.g. directive not sent yet or directive is in the process of being upgraded or whether the quarantining failed.

The QuarantineTag directive instructs the mod antimalware module to remove the specified tag from pages matching a given URL prefix prior to serving them but to otherwise serve the page content as is. For a given page if a URL prefix match exists but the tag to be quarantined is not present no action is taken and the page is served as if mod antimalware was not present.

The above directive quarantines prevents from being served on any page on the site any iframe that has a source attribute of http dasienttestbaddomain.com. 

The above directive quarantines on the page Default.htm any iframe that has a source attribute of http dasienttestbaddomain.com. 

The above directive quarantines on the WordPress blog page with URL wordpress p 3 any iframe that has a source attribute of http baddomain.com. 

In contrast to the QuarantineTag which looks for tags having matching attributes the QuarantineTagBody directive instructs the mod antimalware module to quarantine content that has a matching tag body.

The directive above quarantines on any page having a URL prefix of test any script with code document.wirte .

Example QuarantineTagBody page.html script document.write unescape x3c x69 x66 x72 x61 x6d x65 x20 x73 x72 x63 x3d x22 x68 x74 x74 x70 x3a x2f x2f x77 x77 x77 x2e x6e x65 x69 x6c x64 x61 x73 x77 x61 x6e x69 x2e x63 x6f x6d x22 x20 x77 x69 x64 x74 x68 x3d x30 x20 x68 x65 x69 x67 x68 x74 x3d x30 x20 x66 x72 x61 x6d x65 x62 x6f x72 x64 x65 x72 x3d x30 x3e x20 

The QuarantinePath directive instructs the mod antimalware module to quarantine the portion of the document matching the specified portion of the document structure.

The directive above quarantines on any page having a URL prefix of test the iframe in the first paragraph tag within the body.

The QuarantineBytes directive instructs the mod antimalware module to quarantine the portion of the document matching the specified byte range.

A quarantine directive in the above format instructs mod antimalware to prevent the Default.htm page from being sent. In some embodiments an administrator specified page is sent instead. The administrator specified page can be configured with a message such as This site is currently experiencing technical difficulties please come back tomorrow to help prevent a loss of goodwill by visitors who might otherwise see an error or blank page as a result of the blacklist directive being used.

At quarantine engine determines an appropriate quarantine instruction for mitigating the presence of the malicious element on the page. Examples of quarantine instructions are provided above. At quarantine engine sends the quarantine instruction to the mod antimalware module resident on the webserver that hosts the infected page. In various embodiments the processing shown in is performed multiple times with respect to a malicious element. As one example suppose that at quarantine engine determines that a QuarantineTag directive should be sent at . After the directive is sent system scans the implicated page again to see if the malicious element is still being served. If so quarantine engine is configured to select a new quarantine instruction e.g. a QuarantineTagBody instruction or QuarantinePath instruction and send that instruction at . In a worst case scenario quarantine engine may determine that a Blacklist directive should be sent at which will have the effect of both preventing the malicious element from being served along with other content on the page .

In some cases a user such as Alice may not be able to visually tell that the mod antimalware has modified the page that she would like to view. For example in the case where the malicious element is a transparent 1 1 pixel graphic its presence or absence would not be detectable by Alice. In other cases such as where an infected third party module is blocked e.g. an electronic commerce button or other widget Alice may notice that site is not fully functional. Nonetheless Alice is much more likely to maintain positive feelings toward site when encountering a partially non functional page than she would if the page was blocked by her browser or search provider with a warning that the page is infected.

MOD DIRECTIVE LIST is a table to track active directives that have been sent to modules. mod instance id is a foreign key to the instance this directive applies to.

MOD DIRECTIVE tracks directives. signal instance is a foreign key into SIGNAL INSTANCE. crawler url id is a foreign key into CRAWLER URL and points to the URL the directive is for. directive is the actual directive e.g. QuarantineTag page.html . . . .

CRAWLER URL keeps track of the URLs that have been crawled. url is the URL e.g. http example.com page.html . crawler standing set id is a foreign key to CRAWLER STANDING SET not shown which is used to keep track of the top level domain that was scanned to get to this URL. last crawl report timestamp is the last time the site was crawled. last http response code is the last HTTP response code that was observed when crawling the site.

CONTENT EXTRACTION OUTPUT stores static content and dynamically interpreted page elements. point id is the same as the crawler url id. content type id indicates whether the content is a script iframe image applet etc. instance data stores intermediate results of the content extraction phase. static lineage stores the location of content element in the HTML DOM. dynamic lineage is the series of dynamic content elements that resulted in the generation of this content element. code snippet is the code of the content element. extraction run id is a unique identifier corresponding to the set of content elements extracted from a given page. time is the timestamp at which the content element was discovered.

EXTRACTED FEATURE stores information generated by feature analyzer . feature id is an identifier for a feature of a particular content element.

SIGNAL INSTANCE stores information about signals identified by signal analyzer . signal id is an identifier of a signal.

In various embodiments detection and remediation system is configured to monitor a plurality of third party blacklists for the presence of a subscriber s page or entire site in addition to providing the malware detection and remediation services described above. Reporting engine is configured to send reports on events such as detection of a page being blacklisted and can also be configured to send periodic confirmations that no sites belonging to a subscriber are currently blacklisted by any of the monitored blacklists. Examples of third party blacklists include a blacklist maintained by search provider a blacklist maintained by a browser company and a blacklist maintained by a consumer oriented computer security company.

As mentioned above system includes a crawler and a database . Blacklist monitor is configured to maintain in database an up to date list of URLs to monitor. Blacklist monitor can maintain this list in a variety of ways. As one example sites such as site a subscriber to the blacklist monitoring service can provide a list of URLs for monitoring to system . As another example monitor can use publicly available APIs to obtain lists of URLs from the respective third party entities. As yet another example monitor can instruct crawler to crawl site s website and gather the URLs included inside it. Techniques such as rate limiting can be used to minimize overloading site .

Blacklist monitor is also configured to maintain in database blacklist information. As one example blacklist monitor is configured to contact search provider and retrieve the list of sites that are currently blacklisted by search provider in accordance with the Terms and Conditions of search provider . Example techniques that can be used to efficiently manage large numbers of blacklists include indexing the blacklist entries inside the database and using multiple servers to perform lookup and update operations in parallel.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

