---

title: Method and system for modeling and analyzing computing resource requirements of software applications in a shared and distributed computing environment
abstract: An application manager receives or defines a service specification for a first application that defines a set of required computing resources that are necessary to run each application component of the first application. A resource supply manager in communication with the application manager manages a plurality of computing resources in a shared computing environment. The application manager is operable to request the set of required computing resources from the computing resource supply manager, and wherein the resource supply manager determines the availability of the required computing resources within the shared computing environment according to resource allocation policies and allocates computing resources to the application manager, and wherein the application manager is operable manage allocation of the computing resources to the first application, the application manager operable to create and manage deployment of instances of each application component of the first application on the allocated computing resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317338&OS=09317338&RS=09317338
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09317338
owner_city: Armonk
owner_country: US
publication_date: 20131021
---
Disclosed herein is an invention relating to management of the demand for distributed computing resources used for running software applications in a shared computing environment. Disclosed herein are systems and methods for improving application performance and availability and for allowing dynamic adjustments in the computing resources on which applications are hosted.

Generally speaking a shared computing environment can include hardware and software infrastructure configured to form an organization comprised of multiple distributed computing resources which computing resources can be shared among the different users in the network. The computing resources may even be located in geographically disperse locations. In a traditional computing environment or network where computing resources are not shared an application is generally provided with a dedicated set of computing resources for running that particular application. In a shared and distributed computing environment hereinafter generally referred to as shared computing environment the distributed computing resources may be shared among different applications and this leads to several advantages. For example such resource sharing can lead to increases in the utilization of particular computing resources and accordingly to a reduction in capital and operational expenditures. Resource sharing can also lead to improvements in fault tolerance for the application s .

In the context of the present disclosure software applications or software systems generally referred to hereinafter as applications generally comprise a set of potentially heterogeneous independent software components each software component capable of running on a separate computing resource or device in the shared computing environment. Examples of such applications can include Java 2 Platform Enterprise Edition J2EE applications client server applications web server based applications file transfer protocol FTP services Message Oriented Middleware MoM based applications computational workload based applications workload based application systems such as Platform Load Sharing Facility LSF and Platform Symphony where the whole system is made up of a master node and a number of compute nodes and executable programs. The applications are composed of a set of independent software components referred to hereinafter as application components each of which application components is capable of being run or hosted on a separate distributed computing device or resource within a shared computing environment.

In order to be able to run an application certain computing resources must be made available from the shared computing environment to host the application components of such application. In this context computing resources hereinafter generally referred to as resources can encompass any types of computing resources within the shared computing environment that might be required in order for an application to be run including hardware such as servers memory central processing unit CPU time mainframe computers networks network storage scientific instruments and other computing devices as well as software databases software licenses available network services and other non hardware resources. Other possible examples of resources could include virtual machines VM managed by hypervisors and virtual private servers VPS supported by OS virtualization technologies. In a shared computing environment the resources are generally available to be shared among the various applications that are run on the shared computing environment.

Prior art systems are known which attempt to address similar types of problems as described herein such as how to share distributed resources how to improve availability of applications and how to make on demand adjustments of resources. However the majority of these systems manage a specific type of application server all of which are running a specific type of application such systems do not adopt a generic approach that will enable them to manage different types of distributed heterogeneous applications. Other systems purport to decouple the hardware and software for servers through the use of bare metal machines and a mechanism to image repurpose such machines this involves a machine centric approach rather than an application centric approach to tackle the problems.

Described herein are methods and systems for enabling multiple applications to automatically share resources in a shared computing environment. The methods and systems enable such functionality without requiring the application computer code to be modified. More particularly disclosed embodiments relate to an application manager for managing the resource requirements for applications in a shared computing environment.

A typical application comprises a set of software or application components hereinafter referred to as application components each of which application components is capable of being run hosted on a separate resource in order for the application as whole to be run. Therefore an application will have requirements for specific types of and or numbers of resources which are necessary or preferred in order to host its constituent application components and in order for the application to be run. In addition the resources may be required to have certain characteristics or attributes certain constraints may also be placed on the required resources. The disclosed system comprises an application manager that works in conjunction with a resource supply manager referred to herein as a resource manager . The resource manager generally manages the availability of resources within the shared computing environment. Within the context of this disclosure it is contemplated that the resource manager could be any generic resource manager that may be used in a shared computing environment one example of such a suitable resource manager is Platform Enterprise Grid Orchestrator . When an application is to be initiated the application manager determines the resources that are required and any applicable constraints that should be placed on the required resources. The application manager then makes a request for the required resources to the resource manager which determines in accordance with resource allocation policies whether the requested resources are available within the shared computing environment. If there are appropriate and sufficient available resources to meet the particular resource requirements and the resource manager determines the requested resources should be made available for the particular application then the resources are allocated and mapped to the application and the application or more precisely the application components hosted thereon.

The system provides for the specification representation and automatic analysis of resource requirements. The requirements for running an application are automatically translated into generic resource requests which are made to the resource manager. Since the resource requests are translated into generic resource requests the system can enable the sharing of resources among multiple heterogeneous applications.

To obtain the full benefits of the disclosed system and of resource sharing multiple applications should be managed concurrently without multiple applications there cannot be resource sharing. In cases where the shared resources include third party products the source code of such third party products and the applications running on them are often not accessible or require substantial time and effort in order to enable them for resource sharing purposes. The methods and systems disclosed herein can allow resource sharing even without application source code access or any knowledge of the internal design of the application as long as there is a monitoring or management application programming interface API or other means to obtain metric data. The disclosed methods and systems provide a systematic non intrusive and easy to implement method of integrating applications so that they can run on the resources of the shared computing environment. Furthermore an integration of an application can be re used for other similar applications common integration can be implemented once for an application and similar applications can be enabled with minimal additional effort in some cases possibly without programming. Once applications are integrated they can be managed through a central management console thereby substantially simplifying the administration of all applications running on the shared computing environment.

Furthermore the disclosed system enables the dynamic and efficient management of shared resources. Disclosed herein is a system that provides an agile resource infrastructure adaptive to dynamic changes and failures. Since multiple applications are being concurrently run and managed on the shared computing environment the number and types of available resources are dynamically changing for example as resources from the pool of available shared resources are allocated to other applications or as resources are released back to the pool once other applications are terminated. In addition the total number of resources in the pool of shared resources may itself change from time to time as resources are integrated into or removed from the shared computing environment.

Described herein are methods and systems for enabling multiple applications to automatically share a pool of computing resources in a shared computing environment. Enabling applications for resource sharing requires a method for specification representation and automatic analysis of resource requirements.

By way of example only illustrates the component resources that might be required to host a simple application and how the component resources interrelate to each other. In this example the application could be a simple web application. An application comprises a set of application components each of which is typically a software module service . The application is specified as comprising the following application components a load balancer web or application servers three identical instances and a database how the application components interrelate to each other may also be specified. The application components need suitable resources on which they may be hosted. depicts the corresponding resources needed to host the application components and hence run the application . The resources required for the application include a load balancer three web server machines and and a database server machine . Different required or preferred arrangements for the resources are possible and these will typically be pre defined for example according to the anticipated demand or web traffic. If the required resources are available the application may be launched and run on such resources with each resource hosting the appropriate application component of the application. The running active web application can then be accessed by various clients via their web browsers . . . the load balancer can manage such access by the clients . illustrates an example of the required resource arrangements for a relatively simple application. It should be appreciated that the required resources for an application may be less or significant more complex. An application may require multiple additional resource components . . . . An application may require multiple instances of particular application components and thus multiple instances of particular resources. An application may have multiple additional tiers of required resources the application of is made up of three tiers and .

In the present disclosure the system manages the resource requirements for multiple applications in a shared computing environment. Each application has particular resource requirements or preferences for example along the lines of that shown in .

In the example shown in a particular simple application comprises three application components. The application manager evaluates what the resource requirements are for the particular application and makes a request for suitable resources to the resource manager . The resource manager applies resource allocation policies to determine whether the requested resources are available in the shared computing environment. If all the requested resources are determined to be available these are allocated to and made available for the application the application components are mapped to such resources. The application can then be launched by deploying the application components and on the allocated resources and

In the event that the requested resources for running an application are not available a service specification may provide for the possibility of relaxing the resource requirements the fewer constraints placed on the requested resources the more likely that the request will be satisfied. For example a particular web application may prefer to have five instances of an application component hosted on five web servers but it may yet be satisfactory to have only two instances of the application component hosted on two web servers.

It should be appreciated that although for ease of reference generally only a single application is depicted herein in operation the application manager manages a plurality applications more particularly the resource demands of a plurality of applications .

Although each application component is generally shown herein as being hosted on a separate resource it should be appreciated that it is possible to permit two or more application components to be hosted on the same single resource. That being said as mentioned above in practice it may often be appropriate to require or prefer that each application component be hosted on a separate resource since this reduces the risk that the failure of one resource will cause a running application to completely fail hence improving the availability of applications this will be particularly applicable in the case of critical application components where the failure of such components could result in the entire application being disabled.

The disclosed system is capable of enabling the resource sharing of different applications types heterogeneous applications including for example J2EE client server e.g. Tuxedo web server based MoM based e.g. EMS or computation workload based e.g. Condor and PBS applications.

Alternatively multiple instances of the disclosed system may be implemented on a shared computing environment with each instance of the system managing a particular type of application each with its own particular demand side semantics and implementation mechanisms.

The system can optionally provide for different applications to be designated different priorities. When applications have competing interests for the resources the application manager can take the respective priorities of the competing applications into account when deciding which application to allocate resources to or which application to terminate decommission when resources have to be returned to the pool. It should be appreciated that this prioritization is in addition to any prioritization that the resource manager itself might apply when determining whether requested resources should be allocated to competing applications .

Provided below is some additional detail regarding the disclosed system. The system provides the following several basic functions which are discussed in greater detail below 

If a suitable resource s in the shared computing environment is determined to be available an application component can be hosted on such resource. Commonly additional steps may be necessary in order to prepare the resource before it can host the application component for example software may have to be downloaded installed and or configured . There can be two possible approaches both utilizing known techniques The first involves use of provisioning and configuration tools such as Opsware the second involves the use of a virtual machine VM . With provisioning tools the process of downloading and installing the required software onto the allocated resource host can be automated. For example where the application manager requests a host to run a web server and the resource manager has allocated a suitable resource the application manager then invokes the provisioning tools to install the web server and to download the configuration file onto the allocated resource. Then the web server is started. With the VM approach the web server and the corresponding configurations can be prepared in VM images. Upon the application manager s request the virtual machine is started on a physical host selected by the resource manager and the web server is configured to start once the virtual machine starts.

As an additional optional feature of the disclosed system the service specification can define the order in which application components are deployed on the resources once the application is ready to be deployed for example for a web application one could normally provide for the database server machine to be running before the application component on the web servers are run.

When an application comprises or may comprise multiple instances of one or more identical application components the service specification of the disclosed system can express dynamic conditions in which resources for the application can be changed. The service specification can specify which application components can be adjusted and how they may be adjusted. These conditions can either be user defined or pre determined. Actions resulting from such conditions may also be user defined or pre determined actions. For example referring to the architecture previously discussed for a web application comprises three identical instances of a web server application component which are to be hosted on the three web servers machines in addition to one instance of a load balancing application component to be hosted on a load balancer and one instance of an database application component to be hosted on a database server machine. The service specification of the application may require or prefer that there be 2 to 5 instances of the web server application components hosted on the web servers. In this case the number of instances of such application component can be dynamically adjusted in accordance with changing conditions. By way of example only if web traffic exceeds a threshold level more web servers or resources that have the attributes to function as web servers may be requested and additional instances of such application component initiated on the additional servers to meet the increased traffic similarly if web traffic declines one instance of the application component may be terminated so that the corresponding resource can be returned to the pool of resources and potentially used for other applications. If it is determined that resources for the application need to be adjusted the system maps or unmaps resources of the affected application components.

An additional benefit of the disclosed system is the greater ease of managing the applications participating in resource sharing. Once the attributes of the application have been specified complex operations can be initiated by a simple command. For example in practice an entire multi tier J2EE infrastructure application can be run on the shared resources with a click of the mouse.

As indicated above the system can provide for one or multiple typically complex applications to be deployed on the shared computing environment or terminated decommissioned by a single command the system may also allow for incremental deployment or decommissioning of application components. In addition various application monitoring and application management functionality may be provided for. In practice application management operations may be facilitated by the use of a graphical user interface. In addition the status of running applications or of the resources on which application components are being hosted can be monitored by the system and appropriate action taken for example if an instance of an application component or the entire application has failed steps can be taken to redeploy or terminate the application component instance or the entire application.

In the disclosed system resource sharing and demand adjustments of dissimilar applications are made possible through 

It is common practice when configuring computing resources to configure these for specific applications dedicated compute hosts are assigned to particular applications. In the context of the present disclosure and in the context of a shared computing environment applications are decoupled from the resources they need in order to have maximum flexibility in fulfilling resource requirements. The disclosed system performs dynamic runtime late binding of resources to applications. This late binding of resources can have the effect that resources are not taken from the shared pool of resources unless all the required resources required to run an application are available and it is determined that the application can be deployed on said resources. The system performs the following high level steps during runtime for resource binding 

A generic object based approach is used to model any application participating in sharing of resources. Through the use of dynamic object introspection on the model entities and design conventions a generic system can be built to automatically manage resource requirements of many types of applications through a centralized management console. At a high level there are only a few entities in the model 

Managed services and managed objects are similar to objects in the Object Oriented programming paradigm where an object has instance variables attributes and methods actions defined by the corresponding class service specification . A managed service object has properties metrics and actions. An action is further defined by programmatic logic packaged in a software module like a script and an executable file. As with the Object Oriented programming paradigm the service specification is user defined. Users are free to define any number of properties metrics and actions although some of the managed service life cycle actions must be defined for the service to be activated properly based on the characteristics of the service itself. For example some services may require the prepare action but some others may not. This is purely service dependent it is not restricted by the disclosed system itself. In one implementation the specification may be implemented in XML format where a GUI is used to allow users to create and edit such service specifications. Describing services as objects allows users maximum flexibility in capturing the key characteristics of the services to be deployed on the shared computing environment. Due to the highly customizable nature of this model object introspection is supported for both services and managed objects where the attributes and actions of a particular object can be dynamically queried and invoked during runtime. This allows the possibility of a single application manager to be developed to handle a wide variety of services. To the application manager all external or remote services running on remote hosts in the shared computing environment are uniformly represented internally as managed service objects defined by their corresponding service specifications. The life cycle state of each internal managed service object mirrors the corresponding remote service running on a remote host in the shared computing environment. The same concepts apply to managed objects which are internal representations of external or remote resources like a compute host in the shared computing environment. New resource types managed object specifications can easily be introduced without changing the application manager itself.

3. MAP action in turn invokes the requirement analysis logic passing to it the instance repository and the allocation map describing what resources are mapped to known services at this time.

6. The resource manager collects metrics on managed hosts periodically. Based on its resource allocation policy a resource X is selected to run host service instance A.

9. With MAP action successful the PREPARE action is invoked. In this example an external provisioning tool is invoked to install and configure the required software for service A onto resource X .

While various embodiments of an application manager and a system incorporating an application manager have been described above it should be understood that these have been presented by way of example only and not limitation. Multiple inventions may be set forth according to the limitations of the multiple claims associated with this disclosure and the claims accordingly define the invention s and their equivalents that are protected thereby. In all instances the scope of the claims shall be considered on their own merits in light of the specification.

