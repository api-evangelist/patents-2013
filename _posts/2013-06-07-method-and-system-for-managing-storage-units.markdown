---

title: Method and system for managing storage units
abstract: Method and system for managing storage units are provided. A free space module scans a storage unit data structure and a reference data structure to generate an intermediate data structure that identifies storage units that are not referenced by any storage unit client. A lookup module is initiated and the storage unit clients are notified that all new references to any storage unit should be verified with the lookup module. The free space module then verifies if any of the storage units in the intermediate data structure have been referenced since the intermediate data structure was created. Any referenced storage units are removed from the intermediate data structure and a data structure identifying unreferenced storage units is generated. The data structure is then used to allocate the identified storage units.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003155&OS=09003155&RS=09003155
owner: NetApp, Inc.
number: 09003155
owner_city: Sunnyvale
owner_country: US
publication_date: 20130607
---
This patent application claims priority of and is a continuation of U.S. patent application Ser. No. 12 978 212 filed on Dec. 23 2010 and now U.S. Pat. No. 8 473 708 the disclosure of which is incorporated herein by reference in its entirety.

A storage system typically comprises one or more storage devices where information may be entered and from which information may be obtained as desired. The storage system typically includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a user or host computer.

A storage system typically stores information at a primary storage array which may then be replicated and archived at a secondary storage array for disaster recovery or any other reason. The replication process is commonly referred to as a backup operation. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. Information may also be stored on tape drives conventional magnetic disks optical disks such as CD ROM or DVD based storage flash memory storage device or any other type of non volatile storage devices suitable for storing data.

Storage of information on the disk array is preferably implemented as one or more storage volumes of physical disks defining an overall logical arrangement of disk space. The disks within a volume are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID .

A tape drive is a data storage device that reads and writes data stored on a magnetic tape and is often used for backing up data stored at other types of storage. A tape library is a storage device that may contain tape drives slots to hold tape cartridges and an automated method for physically moving tapes within the device.

Unlike hard drives that allow random access to data tape drives only allow for sequential access of data. A tape drive spends a considerable amount of time winding tape between reels to read a particular piece of data. As a result tape drives have very slow average seek times.

Despite its limitations various backup systems and applications continue to backup data at tape libraries because they can store large amounts of data. One option called a virtual tape library VTL has been used to take advantage of the existing tape infrastructure while data is replicated on disk drives or other media. VTL is a data storage virtualization technology typically used for archival and backup purposes. In generic terms VTL presents a storage component such as disk as tapes available for use with tape drives. In other words VTL presents a non tape storage device that appears to be a tape library to a backup application but actually stores data by other means. A VTL can be configured as a temporary storage location before data is actually sent to real tapes or it can be the final storage location itself. VTL technology is typically implemented in a VTL appliance that presents a plurality of virtual tape volumes VTVs also referred to as a virtual storage volumes VSVs to backup applications and other user systems. The VSVs use a plurality of storage units within a logical space for storing information at the physical storage space of a storage device.

The term logical space means a virtual storage space that is divided by the plurality of storage units. The storage units are mapped to the physical storage space at the storage device. The VSVs store data to the storage units of the logical space and are typically unaware of the physical storage space layout at the storage device.

Logic for the VTL appliance typically manages the plurality of storage units within the logical space. To manage the storage units logic for the VTL occasionally determines which storage units in the logical space are not being used at any given time such that they can be allocated to VSVs. If each VSV were to exclusively use a dedicated storage unit it would be simpler to manage the logical space. However multiple VSVs may reference the same storage unit for storing information which makes the process of determining unused storage unit complex. The process is further complicated because VSVs may seek to use a storage unit while the storage unit may be in the process of being released to a pool of available storage units. Continuous efforts are being made to improve the overall process of managing the storage units in general and to improve the process by which storage units are allocated in particular.

In one embodiment a method and system for managing storage units are provided. The storage units are presented to a plurality of virtual storage volumes to store information at a storage device. The virtual storage modules may be referred to as storage unit clients. A processor executable free space module scans a storage unit data structure and a reference data structure to generate an intermediate free storage unit data structure that identifies storage units that are not referenced by any storage unit client.

The free space module verifies if any of the storage units in the intermediate data structure have been referenced since the intermediate data structure was created. Any referenced storage units are removed from the intermediate data structure and a data structure identifying unreferenced storage units is generated. The data structure is then used to allocate the storage units identified therein. In another embodiment a machine implemented method is provided. The method includes generating an intermediate data structure identifying storage units that are not referenced by any storage unit client from among a plurality of storage unit clients. The plurality of storage unit clients are virtual tape volumes presented to a computing system for storing information on a storage device and the storage units are included in a virtual storage space between the storage device and the plurality of storage unit clients.

The method further includes providing a live reference data structure identifying any storage unit that is referenced by any storage unit client after the intermediate data structure is generated and generating a data structure after removing any storage unit identified by the intermediate data structure and included in the live reference data structure.

In yet another embodiment a machine implemented method is provided. The method includes receiving a request to reference a storage unit for storing information at a storage device and verifying if the storage unit is included in an intermediate data structure identifying storage units that are not referenced by any storage unit client.

The storage unit is removed from the intermediate data structure if the storage unit is included in the intermediate data structure and a data structure identifying a plurality of storage units that are not referenced by any storage unit client is generated.

In yet another embodiment a machine implemented method for allocating storage units among a plurality of storage unit clients for storing information at a storage device is provided. A first data structure is generated for identifying a set of storage units that are not referenced by any storage unit client. The plurality of storage unit clients are virtual storage volumes presented to a computing system for storing the information and the storage units are included in a virtual storage space between the storage device and the plurality of storage unit clients.

The method further includes generating a second data structure after verifying that the storage units identified by the first data structure are not referenced by any storage unit client. Any storage unit that is referenced since the first data structure is generated is removed from the second data structure. A third data structure is generated for identifying storage units that are not referenced by any storage unit client.

The embodiments disclosed herein have numerous advantages. For example the systems and processes generate a data structure identifying storage units that can be allocated. The data structure is verified at different stages to ensure that any storage unit in the data structure is not being used by any virtual storage volume. Because storage units are allocated accurately one can rely on the allocation for safely storing information.

This brief summary has been provided so that the nature of this disclosure may be understood quickly. A more complete understanding of the disclosure can be obtained by reference to the following detailed description of the various embodiments thereof in connection with the attached drawings.

As a preliminary note the terms component module system and the like as used in this disclosure are intended to refer to a computer related entity either programmable instructions executing general purpose processor hardware firmware and a combination thereof. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer.

By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. Also these components can execute from various computer readable media having various data structures stored thereon. The components may communicate via local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems via the signal .

Computer executable components can be stored for example on computer readable media including but not limited to an ASIC application specific integrated circuit CD compact disc DVD digital video disk ROM read only memory floppy disk hard disk EEPROM electrically erasable programmable read only memory memory stick flash memory device or any other non volatile memory device or any other storage device in accordance with the claimed subject matter.

In one embodiment a method and system for managing storage units within a logical space are provided. A processor executable free space module scans a storage unit data structure and a reference data structure to generate an intermediate free storage unit data structure that identifies storage units that are not referenced by any storage unit client. A lookup module is initiated and access to storage unit clients that want to reference a storage unit is restricted. The storage unit clients are notified that any new reference to any storage unit is to be verified with the lookup module.

The free space module then verifies if any of the storage units in the intermediate data structure have been referenced since the intermediate data structure was created. Any referenced storage units are removed from the intermediate data structure and a data structure identifying unreferenced storage units is created. The data structure is then used to allocate the storage units identified therein.

The storage system may be operationally coupled to a plurality of user systems through a network . Each user system may be for example a conventional personal computer PC workstation or the like. The network may be for example a local area network LAN a wide area network WAN a storage area network SAN or any other type of network or a combination of networks.

The user systems typically issue read and write requests for reading and writing information to primary storage . The storage system is configured to handle and process such requests.

Also connected to the network is a management console that may store and execute a management application may also be referred to as a storage management application . The management console may be for example a conventional PC a workstation or the like.

The processor executable management application may be used by an administrator to manage a pool of storage devices and various components of system . The management application includes a graphical user interface GUI module not shown to generate a GUI e.g. for use by an administrator. In another embodiment the management application may provide a command line interface CLI for use by an administrator for managing and configuring various components of system .

Management application is configured to communicate with storage system user systems and different components of system . To obtain such information communication between the management application user systems and storage system may be accomplished using any of the various conventional communication protocols and or application programming interfaces APIs the details of which are not germane to the technique being introduced here. This communication can be done through the network or it can be via a direct link not shown .

As an example system includes a console or computing system that executes a processor executable backup application for replicating information from the primary storage to a secondary storage also referred to herein as storage sub system . Although backup application is shown as being executed by a standalone computing system it may be executed by any computing system for example user system storage system or management console .

Storage sub system includes a plurality of mass storage devices for storing information that may be configured to operate in different configurations for example RAID configurations. The mass storage devices may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magneto optical MO storage flash memory storage device or any other type of non volatile storage devices suitable for storing data. The examples disclosed herein may reference a storage device as a disk drive but the adaptive embodiments disclosed herein are not limited to any particular type of storage media device.

The storage devices are accessible to a virtualization storage appliance that may also be referred to as a virtual tape library VTL . Throughout this specification the term virtualization storage appliance VTL or just appliance are used interchangeably.

Appliance presents a plurality of virtual storage volumes VSVs may also be referred to as virtual tape volumes VTVs to backup application and to other computing systems. As an example the VSVs present a non tape storage device for example storage devices to appear as a tape library to backup application but actually stores data by other means. The VSVs are used by backup application or other applications to store information at storage devices 

It is noteworthy that the embodiments disclosed herein are not limited to VTL or tape storage. The term VSV is to be interpreted such that a virtual volume is presented as a storage type that is different from the actual storage devices to backup application or other modules. The application sends an input output request based on the VSV type that is presented. For example if includes flash based and VSV is presented as a hard drive then the embodiments disclosed herein will apply. In this example backup application would send an I O request for a hard drive while the actual storage is flash based.

The generic term volume as used herein means a logical data set which is an abstraction of physical storage combining one or more physical mass storage devices or parts thereof into a single logical storage object. However each volume can represent the storage space in one storage device an aggregate of some or all of the storage space in multiple storage devices a RAID group or any other set of storage space.

In one embodiment appliance includes an input output I O interface that is configured to communicate via network using standard protocols for example Ethernet Fibre Channel Fibre Channel over Ethernet and others. The I O interface may be configured to handle tape specific I O requests for accessing storage. The embodiments disclosed herein are not limited to any particular protocol or standard.

Appliance also includes logic which in some embodiments may be embodied in hardware software or both. Logic may also be referred to as operating system throughout this specification.

In one embodiment logic includes logic for receiving and storing data via I O interface and may also include logic for managing the writing reading deleting and in general management of data at storage devices 

Logic also includes or has access to a processor executable virtual storage module that presents the VSVs to backup application for storing data at storage devices . Each VSV uses a storage unit from among a plurality of storage units within a logical storage space also referred to as logical space to read and write information to storage devices . A storage unit is a logical storage space that is available to a VSV to store information at storage devices . A storage unit may be of a fixed size for example 128 k. In one embodiment the VSVs are exposed to storage units and are unaware of the physical layout of storage devices 

In one embodiment storage units of logical space are managed by logic . Logical space is a virtual storage space having a plurality of addressable storage units that are presented to the VSVs for storing information at storage devices . A mapping structure maps the storage units to physical storage space at the storage devices . The mapping structure may be maintained by logic or storage sub system . In one embodiment appliance includes a processor executable free space module that is used to free storage units when storage units are not being referenced by any VSV. The term reference as used herein means that a VSV is using a storage unit to store information at a storage device. The free space module ensures that storage units continue to be recycled among VSVs.

In one embodiment a plurality of VSVs from among may reference a same storage unit. Because multiple VSVs may reference a same storage unit the process of freeing up the storage units is challenging. One challenge is to ensure that when a storage unit from among is made available to VSVs it is not being referenced by any other VSV or process. The functionality of free space module to free storage units is described below in more detail.

In one embodiment the storage unit clients maintain an in use data structure may also be referred to as in use log respectively. The in use data structure identifies the storage units that are used by the storage unit client at any given time.

System includes a processor executable storage allocator that allocates storage units according to one embodiment. Storage allocator tracks the total number of storage units in logical space and allocates available storage units to the plurality of clients 

In one embodiment storage allocator maintains a storage unit data structure may also be referred to as data structure that includes a storage unit identifier that identifies a storage unit and a reference count . The reference count indicates a number of storage unit clients that may be referencing a particular storage unit at any given time. For example if there are 5 clients that reference storage unit then the reference count for storage unit is 5. When a storage unit is not referenced by any client then the reference count is zero.

As described above the term reference as used throughout this disclosure means using a storage unit. A request to reference a storage unit means a request to use the storage unit.

System also includes a processor executable reference log manager that manages a reference log may also be referred to as a reference data structure and a live reference log may also be referred to as a live reference data structure according to one embodiment. When a storage unit is used by one or more storage unit clients then the client references the storage unit to indicate that it is using the storage unit. When a client is not using a storage unit then the storage unit is un referenced.

In one embodiment reference log may include fields and . Field storage unit ID field identifies a storage unit from among field shows if a storage unit has been referenced and field shows that a storage unit is unreferenced i.e. a storage unit client is no longer using the storage unit.

The live reference log is used for references that are marked as live after a first free storage unit data structure also referred to as a first free storage unit log has been generated. The process for generating the first free storage unit data structure and the live reference log is described below in more detail.

Reference log and live reference log are accessible to the free space module according to one embodiment. The details of using the reference log and the live reference log by free space module are provided below with respect to the process flow diagram of .

In one embodiment system further includes a processor executable look up service also referred to as lookup module that is used to free storage units. Details of using the lookup module are also provided below with respect to .

Free space module goes through an iterative process to generate free storage unit data structures . The free storage unit data structure is made available to storage allocator . The process of generating the free storage unit data structures will now be described in detail with respect to .

The process begins in block S when in one embodiment the free space module scans the storage unit data structure and the reference log . In block S based on the scan free space module determines which storage units have a reference count of zero and which may have a reference count greater than zero. When a storage unit has a reference count of zero it means that the storage unit is not being used by any storage unit client . When a reference count is greater than zero it means that at least one storage unit client is referencing the storage unit. In one embodiment this information is obtained from fields and of data structure and fields and of reference log during the scan of block S.

In block S the free space module generates a first free storage unit data structure according to one embodiment. The first free storage unit data structure is an intermediate data structure providing an interim list of free storage units from among 

After generating the first free storage unit data structure free space module updates the storage unit data structure . The reference log manager is notified to log any new references to a storage unit after the first free storage unit data structure is generated as live references. These live references are shown as the live reference log in . In another embodiment the live reference entries may be a part of the reference log and are simply marked as live which means that they have not been processed yet since the first free storage unit data structure was generated.

In block S the free space module validates the entries in the first free storage unit data structure . In one embodiment the free space module performs this task by verifying that the entries in the first free storage unit data structure have a reference count of zero. Free space module performs this task by comparing the entries of in use data structures and the entries in the first free storage unit data structure . Block S is a filtering process for removing any entries from the first free storage unit data structure that may also be included in data structures 

If any storage unit in the first free storage unit data structure is included in any of the in use data structures then the storage unit is removed from the first free storage unit data structure . Thereafter the free space module generates a second free storage unit data structure in block S. The second free storage unit data structure is also an intermediate data structure.

In block S the second free storage unit data structure is made available to lookup module . The second free storage unit data structure is made available to lookup module so that it can verify that a storage unit that is being requested by a storage unit client is not included in the second free storage unit data structure

In block S access to storage unit clients is restricted by free space module . The live references from the live reference data structure are also collected in block S. The storage unit clients are notified in block S to use the lookup module before they log or record any new references to a storage unit. This is to ensure that a storage unit that is being freed and is included in the second free storage unit data structure is not being referenced or requested by a storage unit client.

In block S the live reference log and the second free storage unit data structure are input to free space module . The live reference log includes the entries that may have been referenced since block S. If the live reference log includes any entries that are also in the second free storage unit data structure then those entries are removed from the second free storage unit data structure in block S. Based on the filtering in block S the third free storage unit data structure is generated in block S. Any reference to storage units in the third free storage unit data structure is removed from any other data structure not shown that is used or maintained by logic or any other module. This ensures that the storage units in the third free storage unit data structure can be allocated.

In block S the lookup service provided by lookup module is terminated and storage unit clients are notified not to use the lookup module when requesting a storage unit. Thereafter in block S the third free storage unit data structure is made available to storage allocator so that storage units can be allocated to storage clients 

Block S shows the data structure with storage units x x. The reference logs are shown as reference log reference log n. The free space module scans data structure and the reference logs in block S.

Based on the scan in block S data structure is updated and includes storage units x x x and x. The first free storage unit data structure includes storage units x x x x and x.

In block S the first free storage unit data structure is compared against the in use data structures . Based on the comparison x that is referenced in data structure is removed from the first free storage unit data structure . The second free storage unit data structure is generated in block S and includes storage units x x x and x.

In block S the second storage unit data structure is compared to the live reference log that includes storage units x x x and x. Based on the comparison the third free storage unit data structure is generated in block S and includes x x and x because storage unit x is included in the live reference log and removed from the second free storage unit data structure

It is noteworthy that although the process flow of and the example of show two intermediate data structures the embodiments disclosed herein are not limited to the two data structures. In one embodiment a single intermediate data structure may be used to generate data structure . In another embodiment more than two data structures may be used to generate data structure

At time T storage unit data structure and the reference log are scanned. Based on the scan at time T the first free storage unit data structure is generated. The reference log manager is notified to log new references as live references.

At time T the second free storage data structure is generated by removing references from storage unit data structure that are included in the in use data structures 

At time T the lookup module is started. At time T access to the storage units is restricted and the live reference log is provided to free space module . At time T the storage unit clients are notified to use the lookup module .

At time T the second free storage unit data structure is validated against the live reference log and then the third free storage unit data structure C is generated at time T. The term validation as used herein means that the second free storage unit data structures is compared with the live reference log to remove any entries from the second free storage unit data structure that may also be included in the live reference log .

At time T reference to any of the storage units in the third free storage unit data structure from any other data structure is removed. At time T the third free storage unit data structure is made available to storage unit allocator so that the storage units included in the third free storage unit data structure can be allocated to any storage unit client 

It is noteworthy that the foregoing timeline is shown as an example of the adaptive embodiments. The timeline is not to limit the embodiments disclosed herein to any specific sequence of events because some events may occur simultaneously.

In one embodiment a machine implemented method for releasing storage units within logical space is provided. The method includes receiving a request to reference a storage unit from a storage unit client verifying if the storage unit is included in an intermediate data structure for example and identifying storage units that are not referenced by a storage unit client. The method further includes removing the storage unit from the intermediate data structure if the storage unit is included in the intermediate data structure and generating a data structure identifying a plurality of storage units that are not referenced by any client and are made available for allocation to storage unit allocator .

The embodiments disclosed herein have numerous advantages. For example the systems and processes generate a data structure identifying storage units that can be allocated. The data structure is verified at different stages to ensure that any storage unit in the data structure is not being used by any virtual storage volume. Because storage units are allocated accurately one can rely on the allocation for safely storing information.

File system manager may include or interface with the free space module and the various components of system that have been described above in detail with respect to . In one embodiment file system interfaces with the virtual storage module described above and shown in . In another embodiment the virtual storage module may be integrated with the file system . The embodiments disclosed herein are not limited to the location of virtual storage module free space module or any other component.

Operating system may also include a protocol layer and an associated network access layer to allow appliance to communicate over a network with other systems such as backup application storage system user systems and management application . Protocol layer may implement one or more of various higher level network protocols such as Hypertext Transfer Protocol HTTP TCP IP and others as described below.

Network access layer may include one or more drivers which implement one or more lower level protocols to communicate over the network such as Ethernet. Interactions between user systems and mass storage devices are illustrated schematically as a path which illustrates the flow of data through operating system .

The operating system may also include a storage access layer and an associated storage driver layer to communicate with a storage device for example . The storage access layer may implement a higher level disk storage protocol such as RAID redundant array of inexpensive disks while the storage driver layer may implement a lower level storage device access protocol such as SCSI.

It should be noted that the software path through the operating system layers described above may alternatively be implemented in hardware or a combination of hardware and software. That is in an alternate embodiment of the disclosure the storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an ASIC.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this disclosure can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems.

The processing system includes one or more processors and memory coupled to a bus system . The bus system shown in is an abstraction that represents any one or more separate physical buses and or point to point connections connected by appropriate bridges adapters and or controllers. The bus system therefore may include for example a system bus a Peripheral Component Interconnect PCI bus a HyperTransport or industry standard architecture ISA bus a small computer system interface SCSI bus a universal serial bus USB or an Institute of Electrical and Electronics Engineers IEEE standard 1394 bus sometimes referred to as Firewire .

The processors are the central processing units CPUs of the processing system and thus control its overall operation. In certain embodiments the processors accomplish this by executing programmable instructions stored in memory . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices.

Memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. Memory includes the main memory of the processing system . Instructions which implements the process steps of may reside in and may be executed by processors from memory .

Also connected to the processors through the bus system are one or more internal mass storage devices and a network adapter . Internal mass storage devices may be or may include any conventional medium for storing large volumes of data in a non volatile manner such as one or more magnetic or optical based disks. The network adapter provides the processing system with the ability to communicate with remote devices e.g. storage servers over a network and may be for example an Ethernet adapter a Fibre Channel adapter or the like. The processing system also includes one or more input output I O devices coupled to the bus system . The I O devices may include for example a display device a keyboard a mouse etc.

The system and techniques described above are applicable and useful in the upcoming cloud computing environment. Cloud computing means computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. The term cloud is intended to refer to the Internet and cloud computing allows shared resources for example software and information to be available on demand like a public utility.

Typical cloud computing providers deliver common business applications online which are accessed from another web service or software like a web browser while the software and data are stored remotely on servers. The cloud computing architecture uses a layered approach for providing application services. A first layer is an application layer that is executed at client computers. In this example the application allows a client to access storage via a cloud.

After the application layer is a cloud platform and cloud infrastructure followed by a server layer that includes hardware and computer software designed for cloud specific services. Details regarding these layers are not germane to the inventive embodiments.

The storage systems and appliance described above can be a part of the server layer for providing storage services. Free space module and the various components of system may be executed at any system that is coupled to the cloud.

Thus a method and apparatus for managing logical space is provided. Note that references throughout this specification to one embodiment or an embodiment mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore it is emphasized and should be appreciated that two or more references to an embodiment or one embodiment or an alternative embodiment in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics being referred to may be combined as suitable in one or more embodiments of the invention as will be recognized by those of ordinary skill in the art.

While the present disclosure is described above with respect to what is currently considered its preferred embodiments it is to be understood that the disclosure is not limited to that described above. To the contrary the disclosure is intended to cover various modifications and equivalent arrangements within the spirit and scope of the appended claims.

