---

title: Intelligent caching
abstract: Disclosed are methods, systems, paradigms and structures for managing cache memory in computer systems. Certain caching techniques anticipate queries and caches the data that may be required by the anticipated queries. The queries are predicted based on previously executed queries. The features of the previously executed queries are extracted and correlated to identify a usage pattern of the features. The prediction model predicts queries based on the identified usage pattern of the features. The disclosed method includes purging data from the cache based on predefined eviction policies that are influenced by the predicted queries. The disclosed method supports caching time series data. The disclosed system includes a storage unit that stores previously executed queries and features of the queries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507718&OS=09507718&RS=09507718
owner: Facebook, Inc.
number: 09507718
owner_city: Menlo Park
owner_country: US
publication_date: 20130416
---
This invention generally relates to caching data in computer related technologies. More specifically the invention relates to intelligently caching data for anticipated queries.

In computer related technologies certain applications such as reports are generated to obtain information on various aspects. For example in a social networking environment reports may be generated for obtaining information such as the list of users who visited a particular website over a predefined period number of comments made by users in the last hour etc. The information presented in the reports is retrieved from a database. Obtaining results from the database every time a report is generated consumes significant computing resources and causes a significant delay.

Further processing the data retrieved from the database to a form as required by the report incurs additional computing resources further delaying the generation of the report. If the reports are generated often and at regular intervals such delays may affect the user experience. Some caching techniques have been suggested to cache frequently retrieved data. The prior caching techniques are not efficient in terms of managing the cache. For example the prior caching techniques are not efficient in determining the kind of data to be cached amount of data to be cached a duration for which the data has to be cached determining a portion of data that has to be purged etc.

While the prior caching techniques address loading data that is retrieved frequently they are inefficient in preloading data for anticipated queries. Further the prior caching techniques are not efficient in managing time series data.

Introduced here are methods systems paradigms and structures for managing cache memory in computer systems. Certain methods include caching a data that is frequently requested and b data that may be requested in the future by an application or a user. The data can include raw data obtained from a data storage unit and or further processed data. One possible intelligent caching technique anticipates queries pre computes the result for the anticipated queries and caches the result in a cache memory of the computer system. In another method the non pre computed results also referred to as intermediate results may also be cached. The intermediate results may be useful for serving different queries which request similar data in different ways. The method further includes purging the data in the cache memory based on predictions.

The anticipated queries are predicted using the knowledge of previously executed queries in the computer system. A query includes features that characterize the query. One method includes extracting features of the previously executed queries and correlating the extracted features to identify a usage pattern of the features. A prediction model predicts anticipated queries based on the identified usage pattern of the features. The data for the anticipated queries is retrieved from a storage unit such as a database and stored in the cache memory either in raw format or processed format. The queries executed in the system and the extracted features of the queries can be stored in a storage unit of the computer system.

Some embodiments of the invention have other aspects elements features and steps in addition to or in place of what is described above. These potential additions and replacements are described throughout the rest of the specification.

References in this description to an embodiment one embodiment or the like mean that the particular feature function or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not necessarily all refer to the same embodiment nor are they necessarily mutually exclusive.

Disclosed are methods systems paradigms and structures for managing cache memory in computer system. Certain methods include caching a data that is frequently requested and b data that may be requested in the future by an application or a user. The data can include raw data obtained from a data storage unit and or further processed data. One possible intelligent caching technique anticipates queries pre computes the result for the anticipated queries and caches the result in a cache memory of the computer system. The method further includes purging the data in the cache memory based on predictions.

The anticipated queries are predicted using the knowledge of previously executed queries in the computer system. A query includes features that characterize the query. One method includes extracting features of the previously executed queries and correlating the extracted features to identify a usage pattern of the features. A prediction model predicts anticipated queries based on the identified usage pattern of the features. The data for the anticipated queries is retrieved from a storage unit such as a database and stored in the cache memory either in raw format or processed format. The queries executed in the system and the extracted features of the queries can be stored in a storage unit of the computer system.

The social networking system comprises one or more computing devices storing user profiles associated with users and or other objects as well as connections between users and other users and or objects. In use users join the social networking system and then add connections to other users or objects of the social networking system to which they desire to be connected. As further described below users of the social networking system may be individuals or entities such as businesses organizations universities manufacturers. The social networking system allows its users to interact with each other as well as with other objects maintained by the social networking system . In some embodiments the social networking system allows users to interact with third party websites and financial account providers.

Based on stored data about users objects and connections between users and or objects the social networking system generates and maintains a social graph. comprising a plurality of nodes interconnected by a plurality of edges. Each node in the social graph represents an object or user that can act on another node and or that can be acted on by another node. An edge between two nodes in the social graph represents a particular kind of connection between the two nodes which may result from an action that was performed by one of the nodes on the other node. For example when a user identifies an additional user as a friend an edge in the social graph is generated connecting a node representing the first user and an additional node representing the additional user. The generated edge has a connection type indicating that the users are friends. As various nodes interact with each other the social networking system modifies edges connecting the various nodes to reflect the interactions.

A user device is a computing device capable of receiving user input as well as transmitting and or receiving data via the network . In one embodiment the user device is a conventional computer system such as a desktop or laptop computer. In another embodiment the user device may be a device having computer functionality such as a personal digital assistant PDA mobile telephone smart phone or similar device. The user device is configured to communicate with the social networking system and or the financial account provider via the network . In one embodiment the user device executes an application allowing a user of the user device to interact with the social networking system . For example the user device executes a browser application to enable interaction between the user device and the social networking system via the network . In another embodiment a user device interacts with the social networking system through an application programming interface API that runs on the native operating system of the user device such as IOS or ANDROID .

The user device are configured to communicate via the network which may comprise any combination of local area and or wide area networks using both wired and wireless communication systems. In one embodiment the network uses standard communications technologies and or protocols. Thus the network may include links using technologies such as Ethernet 102.11 worldwide interoperability for microwave access WiMAX 3G 4G CDMA digital subscriber line DSL etc. Similarly the networking protocols used on the network may include multiprotocol label switching MPLS transmission control protocol Internet protocol TCP IP User Datagram Protocol UDP hypertext transport protocol HTTP simple mail transfer protocol SMTP and file transfer protocol FTP . Data exchanged over the network may be represented using technologies and or formats including hypertext markup language HTML or extensible markup language XML . In addition all or some of links can be encrypted using conventional encryption technologies such as secure sockets layer SSL transport layer security TLS and Internet Protocol security IPsec .

The social networking system includes a web server an action logger an action log a user profile store a content store an edge store a financial account store and a cache management system . In other embodiments the social networking system may include additional fewer or different modules for various applications. Conventional components such as network interfaces security mechanisms load balancers failover servers management and network operations consoles and the like are not shown so as to not obscure the details of the system architecture.

Web server links social networking system via network to one or more user devices the web server serves web pages as well as other web related content such as Java Flash XML and so forth.

Each user of the social networking system is associated with a user profile which is stored in the user profile store . A user profile includes declarative information about the user that was explicitly shared by the user and may also include profile information inferred by the social networking system . In one embodiment a user profile includes multiple data fields each data field describing one or more attributes of the corresponding user of the social networking system . The user profile information stored in user profile store describes the users of the social networking system including biographic demographic and other types of descriptive information such as work experience educational history gender hobbies or preferences location and the like. A user profile may also store other information provided by the user for example images or videos. In certain embodiments images of users may be tagged with identification information of users of the social networking system displayed in an image. A user profile in the user profile store may also maintain references to actions by the corresponding user performed on content items in the content store and stored in the edge store .

A user profile may be associated with one or more financial accounts allowing the user profile to include data retrieved from or derived from a financial account. A user may specify one or more privacy settings which are stored in the user profile that limit information from a financial account that the social networking system is permitted to access. For example a privacy setting limits the social networking system to accessing the transaction history of the financial account and not the current account balance. As another example a privacy setting limits the social networking system to a subset of the transaction history of the financial account allowing the social networking system to access transactions within a specified time range transactions involving less than a threshold transaction amounts transactions associated with specified vendor identifiers transactions associated with vendor identifiers other than specified vendor identifiers or any suitable criteria limiting information from a financial account identified by a user that is accessible by the social networking system . In one embodiment information from the financial account is stored in the user profile store . In other embodiments it may be stored in the financial account store .

The content store stores content items associated with a user profile such as images videos or audio files. Content items from the content store may be displayed when a user profile is viewed or when other content associated with the user profile is viewed. For example displayed content items may show images or video associated with a user profile or show text describing a user s status. Additionally other content items may facilitate user engagement by encouraging a user to expand his connections to other users to invite new users to the system or to increase interaction with the social network system by displaying content related to users objects activities or functionalities of the social networking system . Examples of social networking content items include suggested connections or suggestions to perform other actions media provided to or maintained by the social networking system e.g. pictures or videos status messages or links posted by users to the social networking system events groups pages e.g. representing an organization or commercial entity and any other content provided by or accessible via the social networking system.

The content store also includes one or more pages associated with entities having user profiles in the user profile store . An entity is a non individual user of the social networking system such as a business a vendor an organization or a university. A page includes content associated with an entity and instructions for presenting the content to a social networking system user. For example a page identifies content associated with the entity s user profile as well as information describing how to present the content to users viewing the brand page. Vendors may be associated with pages in the content store allowing social networking system users to more easily interact with the vendor via the social networking system . A vendor identifier is associated with a vendor s page allowing the social networking system to identify the vendor and or to retrieve additional information about the vendor from the user profile store the action log or from any other suitable source using the vendor identifier. In some embodiments the content store may also store one or more targeting criteria associated with stored objects and identifying one or more characteristics of a user to which the object is eligible to be presented.

The action logger receives communications about user actions on and or off the social networking system populating the action log with information about user actions. Such actions may include for example adding a connection to another user sending a message to another user uploading an image reading a message from another user viewing content associated with another user attending an event posted by another user among others. In some embodiments the action logger receives subject to one or more privacy settings transaction information from a financial account associated with a user and identifies user actions from the transaction information. For example the action logger retrieves vendor identifiers from the financial account s transaction history and identifies an object such as a page in the social networking system associated with the vendor identifier. This allows the action logger to identify a user s purchases of products or services that are associated with a page or another object in the content store . In addition a number of actions described in connection with other objects are directed at particular users so these actions are associated with those users as well. These actions are stored in the action log .

The action log may be used by the social networking system to track user actions on the social networking system as well as external website that communicate information to the social networking system . Users may interact with various objects on the social networking system including commenting on posts sharing links and checking in to physical locations via a mobile device accessing content items in a sequence or other interactions. Information describing these actions is stored in the action log . Additional examples of interactions with objects on the social networking system included in the action log include commenting on a photo album communications between users becoming a fan of a musician adding an event to a calendar joining a groups becoming a fan of a brand page creating an event authorizing an application using an application and engaging in a transaction. Additionally the action log records a user s interactions with advertisements on the social networking system as well as other applications operating on the social networking system . In some embodiments data from the action log is used to infer interests or preferences of the user augmenting the interests included in the user profile and allowing a more complete understanding of user preferences.

The action log may also store user actions taken on external websites and or determined from a financial account associated with the user. For example an e commerce website that primarily sells sporting equipment at bargain prices may recognize a user of a social networking system through social plug ins that enable the e commerce website to identify the user of the social networking system . Because users of the social networking system are uniquely identifiable e commerce websites such as this sporting equipment retailer may use the information about these users as they visit their websites. The action log records data about these users including webpage viewing histories advertisements that were engaged purchases made and other patterns from shopping and buying. Actions identified by the action logger from the transaction history of a financial account associated with the user allow the action log to record further information about additional types of user actions.

In one embodiment an edge store stores the information describing connections between users and other objects on the social networking system in edge objects. Some edges may be defined by users allowing users to specify their relationships with other users. For example users may generate edges with other users that parallel the users real life relationships such as friends co workers partners and so forth. Other edges are generated when users interact with objects in the social networking system such as expressing interest in a page on the social networking system sharing a link with other users of the social networking system and commenting on posts made by other users of the social networking system. The edge store stores edge objects that include information about the edge such as affinity scores for objects interests and other users. Affinity scores may be computed by the social networking system over time to approximate a user s affinity for an object interest and other users in the social networking system based on the actions performed by the user. Multiple interactions between a user and a specific object may be stored in one edge object in the edge store in one embodiment. In some embodiments connections between users may be stored in the user profile store or the user profile store may access the edge store to determine connections between users.

The cache management system manages a cache not shown of the social networking system . The cache management system caches a data that is frequently requested and b data that may be requested in the future by the user device . For example the data can include time series data such as number of applications downloaded by a user in the last one hour number of applications downloaded in a country number of users who have visited a web page on an hourly basis for the last one week etc. The cache management system anticipates queries pre computes the result required for the anticipated queries and stores the pre computed result in the cache. When the query actually arrives at the social networking system the cache management system fetches the result which is already available in the cache from the cache and returns it to the user device .

As described above with reference to the cache management system can be used to store time series data such as number of applications downloaded by a user in the last one hour number of applications downloaded in a country number of users who have visited a web page on an hourly basis for the last one week etc. The user may generate reports having such data frequently. For example an advertiser hosting a web page in the social networking system may want to know the number of users age and gender of the users who visited their web page in the last forty eight hours. Such report may be generated on a daily basis. Further the report may be generated per country per city etc. Accordingly in order to minimize the delay in generating such reports the cache management system can obtain the data from the storage unit and store the data in the cache .

Further the cache management system also intelligently caches data that may be required by future queries. By preloading the data that may be required in the future the data retrieval performance is improved significantly. The user may not see any difference in the processing time for frequently issued queries and new queries. In an embodiment future queries are predicted using the knowledge gained from the previously executed queries. The cache management system obtains the data required by the anticipated queries from the storage unit and stores the data in the cache . The cache management system stores the queries executed by the social networking system in a storage unit such as the stats depot . The queries may also be stored in other storage units of the social networking system . Further the stats depot can be part of any of the existing storage units or an additional storage unit in the social networking system .

An aspect of previously executed queries that is used in predicting future queries is referred to as a feature of a query. A feature is a characteristic of a query. An example query and its features are described with reference to . A query may be written using various query languages including SQL. The syntax and keywords of the query depend on the query language. The query includes features such as Select From Filter Range and Window Size . A select feature specifies the data to be retrieved by the query. The select feature includes data such as number of applications downloaded by a user userID gender age and country of the user. The data can be a computed processed value such as count appID or raw value from a database table. The data in select feature are columns of applications table in the storage unit .

The from feature indicates the source of the data i.e. where the data can be obtained from. In an embodiment the source of the data can be a database table. The filter feature indicates a filter for the data. In the example query the filter feature includes a country name i.e. the country for which the data is obtained. The filter feature may also be specified using other keywords such as where having etc. Further the range feature indicates a period for which the data is obtained. The range feature can include a start date and an end date. In an embodiment the end date can have a default value of current date. The window size feature indicates an interval for which the data is obtained. For example window size of hourly in query obtains data such as number of applications downloaded per hour for every hour in the specified period.

The data can be stored in the storage unit at different granularities. For example the storage unit may have the data on a minute basis. If a query requires data at a different granularity level than what is stored in the storage unit the data is processed to the required granularity level before it is delivered. For example for the query the data is aggregated to an hourly basis before it is delivered to the user device . Accordingly the data stored in the storage unit may not be in the same form as required by the query . That is the results may have to be computed after obtaining the data from the storage unit . In another example the count appID i.e. a count of the applications downloaded is a computed value which is not stored in the storage unit . Filtering the data for a country is also a computed result. In an embodiment the cache management system caches the data in a form required by the query .

Caching the results in a form required by the queries eliminates the need to process the results every time a query is issued and thereby improves performance of the data retrieval process. In order to determine how and what data for example type of data granularity level processed or as is from the database table has to be cached the cache management system identifies a usage pattern of the features from the previously executed queries predicts future queries based on the usage pattern and obtains the data for the predicted queries ahead of the receipt of the queries.

A feature extraction module extracts the features of each of the queries stored in the stats depot . The features extracted can include features such as features of query . In another embodiment a query can have more and or different features than query . As described earlier the feature may include any characteristic of a query. The extracted features are stored in the stats depot . In an embodiment the extracted features can be stored in other storage units of the social networking system .

A feature correlation module correlates the extracted features to identify a usage pattern of the features. Identifying the usage pattern includes identifying the data obtained frequently whether the data obtained is as is from the storage unit or processed computed values the period for which the data is obtained the granularity level of the data a frequency at which a particular query is received a filter criteria in the query a user application from which the query is received an application for which the query is received etc. The feature correlation module can use various techniques for identifying the usage pattern.

The feature correlation module may consider actual values for certain features and derived values for certain features in identifying the usage pattern. For example for the filter feature the actual values such as Country USA Gender Male may be considered in identifying the usage pattern. In the case of range feature which has start date Sep. 1 2012 and end date Sep. 30 2012 a derived value such as One month is considered for the usage pattern rather than the actual values of the start date and the end date. By considering the derived value of the range filter rather than the actual values the cache management can identify for what period the data is requested and would know when to refresh the cache with new data as time progresses. For example if the frequently issued queries are queries for obtaining data for the last twenty four hours from current time the feature correlation module identifies that the data is requested on a daily basis and therefore the cache management system caches data for twenty four hour periods from the current time. Further the cache management system refreshes the cache with new data as time progresses.

Further the feature correlation module also identifies the granularity of the data requested frequently. That is whether the data is requested on for example per hour per day per week per country per age group etc. In an embodiment the cache management system can cache the data in the most frequently requested granularity level. If the data in the storage unit is not in the same granularity level it is aggregated to the required granularity level before caching. The cache is highly adaptive in the granularity level of data it stores from a final requested answer to raw data that is obtained from the storage unit.

The query prediction module predicts queries that may be received in the future based on the usage pattern identified by the feature correlation module . The query prediction module may use various prediction techniques for predicting the queries. In one embodiment the query predication module determines a probability of occurrence of each the features identified by the query correlation module . If the probability of the feature exceeds a particular threshold the query prediction module determines that the feature may reappear in the future queries.

The cache updating module updates the cache with data necessary to serve current and future queries. Updating the cache includes both writing data into the cache and evicting data from the cache . The cache updating module obtains the data from the storage unit and writes the data to cache . The data to be written into the cache may be determined by the query prediction module . In an embodiment the cache updating module may process aggregate the data obtained from the storage unit before writing the data to the cache . Further while the cache updating module caches certain type of data it may not in certain embodiments cache certain other type of data for example rapidly changing data. However features from queries issued for both cacheable data and uncacheable data are considered for predicting the future queries.

The cache updating module may combine a read request for obtaining new data for predicted future queries with other read requests. For example a read request for the new data may be combined with a read request for obtaining data for current queries. Combining the read requests makes the data retrieval process more efficient by minimizing number of reads of the storage unit and thus reducing the time consumed for retrieving the data. In another embodiment read requests for new data may be scheduled based on various scheduling policies.

Data to be evicted from the cache may be determined based on a predefined eviction policy. The predefined eviction policy includes purging the data based on at least one of a a weighted least recently used basis b a determination of whether the data in the cache will be requested by future queries c access pattern of data over a predefined duration and e low inter reference recency set. For example if a set of data to be evicted from the cache have the same time stamp then the data belonging to a user application that is accessed lesser number of times or less frequently is evicted. In another example between a set of aggregated processed data and another set of non processed aggregated data the set of non processed aggregated data is evicted. The predefined eviction policy can include various other policies that can help in managing cache efficiently.

On the other hand responsive to a determination that the data is not available in the cache at step the processor creates a first read request to read the data from the storage unit. At step the cache updating module determines whether new data required to serve predicted queries is available in the cache. Responsive to a determination that the new data is not available in the cache the processor creates a second read request to read the new data from the storage unit.

At step the processor combines the first read request and the second read request. At step processor retrieves the data and the new data from the storage unit in response to the combined read request. At step the cache updating module updates the cache with the data and the new data. At step the system sends the data to the client.

Referring back to step in an embodiment the read requests for data and the new data are combined to make the data retrieval process more efficient by minimizing number of reads of the storage unit. However in another embodiment read requests for new data may be executed separately and may be scheduled based on various scheduling policies.

Referring to step the queries may be stored in the stats depot based on a pre defined query storing policy. The pre defined query storing policy includes storing at least one of a queries received over a pre defined duration b queries received by a particular application c queries received for a particular application or d a particular type of queries received.

The processor s is are the central processing unit CPU of the processing system and thus control the overall operation of the processing system . In certain embodiments the processor s accomplish this by executing software or firmware stored in memory . The processor s may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs trusted platform modules TPMs or the like or a combination of such devices.

The memory is or includes the main memory of the processing system . The memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. In use the memory may contain a code. In one embodiment the code includes a general programming module configured to recognize the general purpose program received via the computer bus interface and prepare the general purpose program for execution at the processor. In another embodiment the general programming module may be implemented using hardware circuitry such as ASICs PLDs or field programmable gate arrays FPGAs .

Also connected to the processor s through the interconnect are a network adapter a storage device s and I O device s . The network adapter provides the processing system with the ability to communicate with remote devices over a network and may be for example an Ethernet adapter or Fibre Channel adapter. The network adapter may also provide the processing system with the ability to communicate with other computers within the cluster. In some embodiments the processing system may use more than one network adapter to deal with the communications within and outside of the cluster separately.

The I O device s can include for example a keyboard a mouse or other pointing device disk drives printers a scanner and other input and or output devices including a display device. The display device can include for example a cathode ray tube CRT liquid crystal display LCD or some other applicable known or convenient display device.

The code stored in memory can be implemented as software and or firmware to program the processor s to carry out actions described above. In certain embodiments such software or firmware may be initially provided to the processing system by downloading it from a remote system through the processing system e.g. via network adapter .

The techniques introduced herein can be implemented by for example programmable circuitry e.g. one or more microprocessors programmed with software and or firmware or entirely in special purpose hardwired non programmable circuitry or in a combination of such forms. Special purpose hardwired circuitry may be in the form of for example one or more ASICs PLDs FPGAs etc.

Software or firmware for use in implementing the techniques introduced here may be stored on a machine readable storage medium and may be executed by one or more general purpose or special purpose programmable microprocessors. A machine readable storage medium as the term is used herein includes any mechanism that can store information in a form accessible by a machine.

A machine can also be a server computer a client computer a personal computer PC a tablet PC a laptop computer a set top box STB a personal digital assistant PDA a cellular telephone an iPhone a Blackberry a processor a telephone a web appliance a network router switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine.

A machine accessible storage medium or a storage device s includes for example recordable non recordable media e.g. ROM RAM magnetic disk storage media optical storage media flash memory devices etc. etc. or any combination thereof. The storage medium typically may be non transitory or include a non transitory device. In this context a non transitory storage medium may include a device that is tangible meaning that the device has a concrete physical form although the device may change its physical state. Thus for example non transitory refers to a device remaining tangible despite this change in state.

The term logic as used herein can include for example programmable circuitry programmed with specific software and or firmware special purpose hardwired circuitry or a combination thereof.

