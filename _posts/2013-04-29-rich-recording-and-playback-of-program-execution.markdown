---

title: Rich recording and playback of program execution
abstract: Information regarding the execution of a program is recorded. A program execution monitor detects the occurrence of events related to the execution of the program. In response to detecting an event, the program execution monitor creates an entry in an event list identifying the event and the time at which the event occurred. A playback component may utilize the event list to play back the recording of the program at a time corresponding to an identified event. In other embodiments, the program execution monitor stores the operational state of a program at the time an event is detected. The stored operational state can be utilized to recreate the state of the program at the time the event was detected and restart execution of the program at that time. Other types of inputs to the program might also be recorded and played back.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09063803&OS=09063803&RS=09063803
owner: Amazon Technologies, Inc.
number: 09063803
owner_city: Seattle
owner_country: US
publication_date: 20130429
---
Software developers commonly provide promotional materials to software retailers for use in marketing software products. For example a developer of a software product might provide one or more screen captures of a software product in operation to a software retailer. The software developer might also provide a textual description of the software product. The software retailer might then utilize the promotional materials provided by the software developer when marketing the software product such as on an e commerce Web site in an online software application store or in another manner.

The promotional materials provided by a software developer for a software product might not provide the best representation of the functionality or experience provided by the software product. For example a software developer might provide static screen captures showing only a certain subset of the functionality provided by a software product. Moreover the screen captures might not express the rich sensory experience provided by certain types of software products such as video games and other types of multimedia software products. Additionally someone without a marketing or artistic background might create the text description of the software product provided by the software developer. As a result the promotional materials provided by a software developer for a software product might not generate strong consumer interest in the software product.

Some software retailers create their own promotional materials for software products to supplement or replace those provided by the developer. The creation of compelling promotional materials may however require the software retailer to devote significant financial and other types of resources. Many software retailers are unable or unwilling to commit these sometimes significant resources. As a result some software developers and retailers may experience low sales of certain software products.

The following detailed description is directed to technologies for rich recording and playback of program execution. Utilizing the technologies described herein a recording of the execution of a program can be created that describes rich aspects of the execution of the program such as aspects of the environment in which the program was executing output captured by various sensors while the program is executing and output generated by the program that would not be captured by a standard recording of the audiovisual output of the program. This type of recording of a software product may be utilized as promotional material in conjunction with an advertisement for the software product such as on an e commerce Web site in an online software application store or in another manner. For example an e commerce Web site might be configured to play back such a recording of a software program including playback of the other recorded aspects of the operation of the program such as outputs generated by the program. This type of recording of the execution of a software product might also be utilized during testing of the operation of the software product and or in other ways.

According to one aspect presented herein a computer implemented mechanism is disclosed for rich recording and playback of the execution of a computer program. In one embodiment a recording is created while a program is executed. The recording might include the audiovisual output of the program. For example an recording component might record the audio and video output of the program during execution to a file in a standard or non standard recording format. The recording might also include other data such as outputs from sensors recorded while the program is executing contextual data regarding the conditions under which the program was executed inputs received to the program and or computing device upon which the program is executing and potentially other information. The recording might be made while a user is testing the operation of the program or using the program in other ways.

During execution of the program a program execution monitor also monitors the execution of the program for the occurrence of one or more program events which may be referred to herein as events . The program events might be events that are specified by the programmer of the program e.g. flags that are set during execution of the program to signify that an event has occurred or certain comments inserted into the program input events or output events. Input events include but are not limited to inputs made to user input devices on the computing system executing the program such as key presses touch tablet or screen presses or other types of inputs made to other types of input devices. Output events include but are not limited to outputs made by the device executing the program such as the operation of a vibration motor or other type of output component or device. Other types of program events might also be detected.

When the program execution monitor detects the occurrence of an event the program execution monitor is configured to create an entry in an event list. The entry in the event list includes data that describes the event that occurred and a corresponding time in the audiovisual recording of the program output at which the event occurred. The entry might also specify the type of event or other information. In this way events occurring during the execution of the program can be detected and correlated with the time that they occur in the recording. As will be described in greater detail below the information stored in the event list may be utilized to play back the data contained in the recording at a desired location. The information stored in the event list might also be utilized to play back output events generated by the program that are not captured by an audiovisual recording such as the activation of a vibration motor or other type of output device or component.

In order to play back the recording of the program a playback component may provide a user interface for presenting some or all of the events identified in the event list. A user may be permitted to select one of the events in the event list through the user interface. In response to receiving such a selection the playback component plays back some or all of the recording beginning at or around the time specified in the event list that corresponds to the selected event. In this way a user can begin playback of the recording at or around the time a detected program event occurred at recording time. For example the audiovisual portion of the recording may be played back. Other information captured in the recording such as sensor outputs recorded while the program was executing might also be played back together with or separately from the audiovisual recording.

In some embodiments the playback component is also configured to play back certain types of events identified in the event list that are not captured in the audiovisual recording. For example if during playback of the recording the playback component identifies an entry in the event list having an associated time that occurs during playback of the recording the playback component might play back the identified event. For instance if the playback component determines that a vibration motor was activated at a certain point during execution of the program the playback component might cause a vibration motor to be activated at the same time during playback of the recording. If the device upon which playback is occurring does not include hardware e.g. a vibration motor or software necessary to play back the identified event the event might be presented on screen using text or indicated in another manner.

In another embodiment the operational state of an executing program is also saved when a program event is detected during recording. The operational state may include the contents of random access memory RAM central processing unit CPU registers and other data that can be utilized to later recreate the state of the program at the time the event was detected and to re start execution of the program from that point in time. When an event occurs an entry might also be created in the event list that identifies the detected event and the saved operational state of the program at the time the event occurred. In this embodiment the program execution monitor might also record input made to the program during execution for use in playback at a later time.

In order to play back the execution of the program in this embodiment a playback component may provide a user interface for presenting some or all of the events identified in the event list. A user may be permitted to select one of the events in the event list through the user interface. In response to receiving such a selection the playback component loads the program operational state that is associated with the selected event. The program operational state may then be utilized to restore the state of the program at the time the event occurred and to begin execution of the program at that time. In this way a user can restart execution of a program at or around the time a detected program event occurred during a previous execution of the program. Additionally input to the program recorded during a previous execution of the program might be played back to the program during the subsequent execution of the program. Additional details regarding the various components and processes described above for rich recording and playback of program execution will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein might also be practiced in distributed computing environments where tasks may be performed by remote computing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

As shown in the program is configured to generate an audiovisual output in one implementation. The audiovisual output may be presented on a display screen of the recording device . For example when the program is a game the audiovisual output might include the on screen visuals generated by the game along with any sounds generated by the game. Other types of programs might generate other types of audiovisual output .

As also shown in the program might be configured to receive various types of input . For example the program might be configured to receive and process input from various input devices and or sensors not shown in of the recording device . Example input devices and or sensors include but are not limited to hardware buttons keyboards touch pads touch screens gyroscopes global positioning system GPS sensors magnetic compass devices audio and video input devices light sensors cameras and others.

In a similar fashion the program might be configured to generate various outputs using output devices provided by the recording device . For example and without limitation the program might be configured to provide various types of output via a display screen an audio output device light emitting diodes LEDs liquid crystal displays LCDs vibration devices and other types of output devices. Different types of programs might make different types of uses of the various input and output devices described above.

A recording component might also be executed on the recording device in one implementation. The recording component is a software component configured to record various types of information such as the audiovisual output of the program to create a recording . The audiovisual portion of the recording might be formatted using a standard or non standard digital video recording format. For example the audiovisual portion of the recording might be formatted using one of a number of standards available from the Moving Pictures Expert Group MPEG such as MPEG 1 MPEG 2 or MPEG 4. Other formats might also be utilized. In some implementations the recording component is a software or hardware component that is external to the recording device .

According to various embodiments the recording component might also be configured to record other information during execution of a program . For instance and without limitation the recording component might also be configured to record the input received by the program during execution. The recording component might also be configured to record various sensor outputs made during execution of the program regardless of whether the sensor outputs are provided to the program . The sensor outputs include but are not limited to the outputs from a camera a microphone a GPS sensor a gyroscope an accelerometer a temperature sensor an altitude sensor a magnetic compass and or other types of sensor outputs. In this way for example a recording can be made that indicates the location of the device when the program was executed the sound level when the program was executed the altitude and or orientation of the device when the program was executed and potentially other information of interest.

The recording component might also be configured to record contextual data at the time the program is executed. The contextual data may include information regarding the context in which the program was executed such as but not limited to the time at which the program was executed data identifying other programs executing on the device when the program was executed the amount of RAM and or storage available on the device and or used by the program information regarding the health of the device and or other information regarding the context in which the program was executed.

The recording component might also be configured to record information identifying the particular portion of the program that is executing at a particular time. For example the recording component might store data in the recording identifying the particular portion of the program that was executing when certain sensor outputs were received. The recording component might also store data in the recording identifying the particular portion of the program that was executing when other types of events occurred. This information might be displayed to a user upon playback of the recording in the manner described below.

The recording component might also be configured to create a textual transcript of operations performed by the program . For example the recording component might create a textual transcript indicating that a program called a certain application programming interface API communicated with another program or computer utilized a peripheral device detected certain input e.g. mouse movement loaded or stored data or engaged in other types of activities. Such a transcript might be played back in synchronization with the other data stored in the recording in the manner described below.

As shown in a program execution monitor might also be executed on the recording device in one implementation. The program execution monitor is configured to monitor execution of the program and to detect the occurrence of one or more program events that occur with respect to the execution of the program . The program events might be events that are specified by the programmer of the program e.g. flags that are set during execution of the program to signify that an event has occurred or comments in the program input events output events or system events.

As mentioned briefly above input events include but are not limited to input made to the program by way of user input devices on the recording device such as key presses touch sensor or touch screen presses plugging the device into power or into another device changing networks detecting vibrations detecting changes in orientation or altitude or other types of input made to other types of input devices or sensors. Output events include but are not limited to outputs made by the program by way of the recording device such as the operation of a vibration motor or other type of output component within the recording device . System events include but are not limited to available memory falling below a certain point battery power falling below a certain level other resources being above or below a certain point and or other information related to the operational state of the device . Other types of program events might also be detected in other embodiments.

In one embodiment event definitions are provided to the program execution monitor that specify the types of program events that the program execution monitor should monitor for. A user might be permitted to add to modify or remove program events from the event definitions . Additionally program components might also be permitted to add program events to the event definitions . For example a program might identify a program event of interest through analysis of a log file generated by the program . In response thereto the program might add the identified program event to the event definitions . The program events specified in the event definitions might also be modified manually or automatically in other ways by other components and or systems in other embodiments. Moreover in addition to the use of the event definitions the program execution monitor might also be configured to detect the occurrence of certain program events in other ways in other embodiments.

In one implementation the program execution monitor is configured to detect the start of the execution of the program . The program execution monitor might also be configured to start the execution of the program . Contemporaneously with the start of the execution of the program the program execution monitor might also instruct the recording component to begin recording. In turn the recording component begins creating the recording by recording the audiovisual output the input the sensor outputs the contextual data and potentially other information. Although the recording is shown in as a single file multiple files might be utilized to create the recording . Additionally time code or another type of metadata might also be stored with the recording so that playback of the various types of recorded data can be synchronized.

Once execution of the program has started the program execution monitor begins monitoring for the occurrence of the program events . If the program execution monitor detects the occurrence of a program event the program execution monitor creates an entry in an event list . In the embodiment shown in each entry in the event list includes data that describes the program event that occurred and a corresponding time in the recording at which the detected program event occurred. Each entry might also include information describing the type of event such as an on screen video event a sensor event an input event or another type of event. In this way program events occurring during the execution of the program can be detected and correlated with the time that they occurred in the recording . This information can then be utilized during playback as described below.

In the example shown in the program is a game. In this example the programmer of the program has inserted flags or comments into the program that will cause program events to be generated each time a player starts a new level. Additionally event definitions have been created that define events of interest as including output events such as the operation of a vibration device in the recording device . Consequently the event list includes entries corresponding to the start of a first level in the program occurring at 0 23 in the recording the start of a second level in the program occurring at 3 43 in the recording and the operation of a vibration device in the recording device occurring at 3 54 in the recording . The event list might also include other entries not shown in .

As will be described in greater detail below the entries stored in the event list may be utilized to play back the recording at a desired location. The entries in the event list might also be utilized to play back output events generated by the program that are not directly captured in an audiovisual recording such as the activation of a vibration device or other type of output device or component. Additional details regarding this process will be provided below.

It should be appreciated that the entries stored in the event list shown in are merely illustrative and that many other types of program events might be detected and identified in the event list . For example and without limitation various types of program events might include the calling of an API execution of the program entering a new section of code a user starting a new program on the recording device the program completing execution and returning control to an operating system and or other types of user and system events. These examples are merely illustrative and should not be considered as limiting the scope of this application.

In one embodiment a playback device is configured to play back the recording and potentially other types of output events identified in the event list . The playback device might be any type of computing device capable of executing the playback component such as but not limited to a desktop laptop or server computer a smartphone a tablet device an e reader or another type of computing device.

In order to play back the recording the playback component may provide a transport control user interface which may be referred to as a user interface or a UI in some embodiments for presenting some or all of the events identified in the event list . A user may be permitted to select one of the events identified in the event list through the UI. The user might also be able to select the various types of information contained in the recording that should be played back. For example the user might select that the audiovisual portion of the recording be played back along with one or more of the sensor outputs . In response to receiving such a selection the playback component plays back some or all of the components of the recording .

For example the playback component might play back the audiovisual portion of the recording to generate the audiovisual playback . The playback component might also play back the other information in the recording alone or in synchronization with the audiovisual portion of the recording . For example the playback component might play back the audio recording from a microphone during the original execution of the program . Similarly the playback component might play back images recorded from a camera in the recording device during the original execution of the program . The playback component might also display the transcript described above in synchronization with the playback of other data contained in the recording .

The playback component might also present the contextual data and or other information regarding the original execution of the program contained in the recording . The playback component might also display information contained in the recording identifying the particular portion of the program that was executing when a program event occurred when certain input was received when certain outputs were performed or when other conditions occurred.

The playback of the recording begins at or around the time specified by the entry in the event list that corresponds to the event selected by the user. In this way a user can begin playback of the recording at or around the time a detected program event occurred during the original execution of the program . The particular event that should be played back might also be selected in other ways. For instance a user might be permitted to select events in the event list for playback based upon their type or other attribute.

In some embodiments the playback component is also configured to play back certain types of events identified in the event list that are not captured in the audiovisual portion of the recording . For example the playback component might identify an entry in the event list that has an associated time that occurs during playback of the recording . In this case the playback component might play back the identified event. For instance in the example shown in a user might request that playback of the recording begin at the start of level two. In response thereto the playback component may begin playback at 3 43 from the start of the recording .

Based upon an analysis of the event list the playback component might also determine that a vibration device was activated at 3 54 into the recording . In response thereto the playback component might cause a vibration motor in the playback device to be activated at the same time i.e. at 3 54 during playback of the recording . If the playback device does not include hardware e.g. a vibration device or software necessary to play back the identified event the playback component might present the event on screen using text or indicated in another manner. For instance the playback component might display the word VIBRATION overlaid on the audiovisual playback to convey to the viewer that vibration occurred at that point in time.

It should be appreciated that the recording and playback processes described above might be repeated utilizing multiple recording devices . For example in one implementation the recording device is a smartphone. In this implementation the process described above might be repeated utilizing various smartphone models from different manufacturers. In this way a unique recording and associated event list can be created for each smartphone. The recording can then be played back in the manner described above to indicate to the viewer precisely how the program will perform on each device. In some implementations the recording for several different recording devices might be synchronized and played back side by side so that a viewer can more easily identify differences between the execution of the program on different devices.

In some embodiments the mechanism described above might also be utilized to provide advertising for the program . In particular the audiovisual playback of the recording of the program may be utilized as promotional material in conjunction with an advertisement for the program such as on an e commerce Web site in an online software application store or in another manner. For example an e commerce Web site might be configured to play back some or all of the recording of a program including playback of the other recorded aspects of the operation of the program such as outputs generated by the program . The mechanism described above for recording and playing back the audiovisual and other types of output of a program might also be utilized during testing of the operation of the program and or in other ways.

As shown in the playback device is also configured with an event list editor in some embodiments. The event list editor provides functionality for allowing a user to create delete modify group or otherwise interact with the events in the event list . For example during playback of the recording a user might add an event to the event lists that is interesting to the user. The user might also delete events from the event list to create an event list that includes only events of interest to the user. The event list editor might also provide other types of functionality for modifying the event list . In other embodiments a programmatic interface might also be provided for allowing programs to modify the contents of the event list .

The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the FIGS. and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where execution of the program is started. The routine then proceeds to operation where the recording component begins recording various aspects of the operation of the program such as the audiovisual output generated by the program the input received by the program the sensor outputs the contextual data and or any of the other data described above. As mentioned briefly above the program execution monitor might instruct the recording component to begin recording once the program has started executing. In other embodiments the start of the execution of the program might trigger the recording component to begin recording. The start of the execution of the program might also trigger the program execution monitor to begin monitoring for program events .

From operation the routine proceeds to operation where the program execution monitor determines if a program event has been detected. As mentioned above the program events might include input events output events system events and other types of events specified by the event definitions . If the program execution monitor detects an event at operation the routine proceeds to operation .

At operation the program execution monitor adds an entry to the event list for the detected program event . As mentioned above each entry in the event list includes data that describes the program event that occurred. Once the new entry in the event list has been created the routine proceeds from operation to operation where the program execution monitor adds the time in the recording at which the detected program event occurred to the newly created entry in the event list . In this way the detected program event is correlated with the time that the program event occurred in the recording . Other information might also be added to the new entry such as the type of event detected and or other information. The routine then proceeds from operation to operation .

If at operation the program execution monitor determines that a program event has not been detected the routine proceeds from operation to operation . At operation the program execution monitor determines if execution of the program has stopped. If execution of the program has not ended the routine proceeds from operation to operation . At operation execution of the program is continued and at operation recording of the various types of data described above continues. From operation the routine proceeds back to operation .

If at operation the program execution monitor determines that execution of the program has ended the routine proceeds from operation to operation where recording of the data described above is ended. In this regard the program execution monitor might transmit an instruction to the recording component instructing the recording component to stop recording. The routine then proceeds from operation to operation where it ends.

From operation the routine proceeds to operation where the playback component begins playback of the selected components of the recording at or around the time associated with the event selected in the event list . The routine then proceeds from operation to operation where the playback component might also play back other events identified in the event list . For example and as described above the playback component might play back certain output operations identified in the event list that are not captured by the audiovisual portion of the recording . If the playback device does not have software or hardware necessary to perform the actual output operations the playback component might overlay text on the audiovisual playback identifying the operations. Other types of audio or visual indicators might also be provided to indicate the occurrence of an output operation.

From operation the routine proceeds to operation where the playback component determines whether a user has requested to stop playback of the recording . If a user has not requested to stop playback the routine proceeds from operation to operation where the playback component continues to play back the recording . From operation the routine proceeds to operation where the recording might be continually played back in the manner described above until it ends.

If at operation the playback component determines that a user has requested to stop playback or the recording ends the routine proceeds to operation . At operation the playback component determines whether a user has requested to exit the playback component . If the user has not requested to exit and the recording has not ended the routine proceeds back to operation where the user may be permitted to play back the recording from another location defined in the event list . If the user has requested to exit the routine proceeds from operation to operation where it ends.

When an event occurs the program execution monitor also creates an entry in an event list identifying the detected program event and the saved program operational state of the program at the time the event occurred. For example the event list shown in indicates that the program operational state A corresponds to a program event generated at the start of a first level of the program the program operational state B corresponds to a program event generated at the start of a second level of the program and the program operational state C corresponds to a program event generated in response to an output event i.e. the activation of a vibration device in the recording device .

In the embodiment shown in the program execution monitor might also utilize the recorded input made to the program for use in playback. For example and as will be described in greater detail below the recorded input might be simulated on the playback device once the program operation state for a particular program event has been loaded on the playback device and execution of the program has been restarted.

In order to play back the execution of the program in the embodiment shown in the playback component may provide a UI for presenting some or all of the events identified in the event list in the manner described above. A user may be permitted to select one of the events in the event list through the UI . In response to receiving such a selection the playback component loads the program operational state that is associated with the selected event in the event list . For example the playback component may load the contents of the RAM the CPU registers and other data in order to recreate the state of the program at the time the program operational state was created.

Once the program operational state for a particular event has been loaded on the playback device the execution of the program may be restarted at precisely the time that the corresponding event occurred. In this way a user can restart execution of the program at or around the time a detected program event occurred during a previous execution of the program . Additionally and as described briefly above input made to the program recorded during a previous execution of the program may be played back to the program executing on the playback device . In this way the program can be operated on the playback device in the same fashion as it was previously operated on the recording device .

The mechanism illustrated in might also be utilized as promotional material in conjunction with an advertisement for the program . For example a page on an e commerce site or an application store might be configured to load and execute a program operational state for a particular event on a customer device in the manner described above. In this way a customer of the e commerce site or an application store could experience the actual operation of the program . Additional details regarding the mechanism illustrated in will be provided below with regard to .

From operation the routine proceeds to operation where the program execution monitor determines if a program event has been detected. If the program execution monitor detects an event at operation the routine proceeds to operation .

At operation the program execution monitor captures and stores the program operational state for the program at the time the program event is detected. As mentioned above this might include storing the contents of RAM CPU registers and other data that can be utilized to restart execution of the program on the playback device . The program execution monitor also creates a new entry in the event list for the newly detected program event . The new entry includes data identifying the detected program event along with an identifier for the corresponding saved program operational state . The new entry in the event list might also contain other information such as that described above. This occurs at operation . The routine then proceeds from operation to operation .

If at operation the program execution monitor determines that a program event has not been detected the routine proceeds from operation to operation . At operation the program execution monitor determines if execution of the program has ended. If execution of the program has not ended the routine proceeds from operation to operation . At operation execution of the program is continued. Additionally the program execution monitor continues recording the various types of information described above at operation . From operation the routine proceeds back to operation where the program execution monitor might continue to monitor for the occurrence of program events .

If at operation the program execution monitor determines that execution of the program has ended the routine proceeds from operation to operation where recording is stopped. The routine then proceeds from operation to operation where it ends.

From operation the routine proceeds to operation where the playback component loads the program operational state corresponding to the selected event. As mentioned above this might include loading the stored contents of RAM on the playback device loading the stored CPU registers and loading other data to recreate the operational state of the program at the time the selected event was detected. In some embodiments a virtual machine or an emulator is utilized on the playback device to load the program operational state . A virtual machine or an emulator may be utilized for instance when the hardware of the recording device is not the same as the hardware of the playback device . The virtual machine or emulator might be configured to emulate the hardware of the recording device . Once the operational state has been loaded the routine proceeds to operation .

At operation execution of the program is started on the playback device utilizing the restored program operational state . In this way the program begins executing at the point at which it was executing when the program operational state was created. Once the program has started executing the routine proceeds from operation to operation where the playback component may play back recorded input to the program executing on the playback device . In this way input received at the program may be simulated on the playback device and provided to the program as if the input were actually being made on the playback device .

From operation the routine proceeds to operation where the playback component determines whether a user has requested to stop execution of the program on the playback device . If a user has not requested to stop execution of the program the routine proceeds from operation to operation where the playback component continues to play back the recorded input . From operation the routine proceeds back to operation where other recorded input might be continually played back in the manner described above.

If at operation the playback component determines that a user has requested to stop execution of the program the routine proceeds to operation . At operation the playback component determines whether a user has requested to exit the playback component . If the user has not requested to exit the routine proceeds back to operation where the user may be permitted to begin execution of the program at another location corresponding to another event in the event list . If the user has requested to exit the routine proceeds from operation to operation where it ends.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer such as the program the program execution monitor the playback component and or any of the other software components and data described above. The mass storage device might also store other programs and data not specifically identified herein.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the various routines described above with regard to and . The computer might also include computer readable storage media for performing any of the other computer implemented operations described herein.

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. The input output controllers might also receive input from a number of sensors such as but not limited to a camera a microphone a GPS sensor a gyroscope an accelerometer an ambient light sensor a temperature sensor an altitude sensor a magnetic compass and other types of sensors. Similarly the input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for rich recording and playback of program execution have been presented herein. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

