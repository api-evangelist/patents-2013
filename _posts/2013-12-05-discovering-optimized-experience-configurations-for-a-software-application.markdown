---

title: Discovering optimized experience configurations for a software application
abstract: Technologies are described herein for performing experiments on a software application and identifying optimized experience configurations for the software application. An application experiment system receives an experiment configuration from a developer of the software application. Based on the experiment configuration, the application experiment system determines an experiment strategy and generates a set of experience configurations for testing. Users available to participate in the experiment are identified, and the set of experience configurations are allocated to user computing devices associated with the available users to configure instances of the software application executing on the user computing devices. Experiment data related to the execution of the instances of the software application are collected and analyzed by the application experiment system to identify the optimized experience configuration for the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483393&OS=09483393&RS=09483393
owner: Amazon Technologies, Inc.
number: 09483393
owner_city: Seattle
owner_country: US
publication_date: 20131205
---
In order to provide a better experience to software application users developers might update or make changes to software applications by adding changing features or modifying designs. When deployed to users however those updates or changes might not achieve the initially intended goal. For example a change in the difficulty level of a game application designed to engage a user more in the game might lead to a reduction in the amount of time a user spends playing the game which may be because the user finds the updated game too hard or too simple to play. To reduce the uncertainty of the impact that updates to a software application may have on users experiments on the software application such as A B testing may be employed to test the effects of changes to a software application on a group of users before applying the changes to the software application to all users.

Most of the existing tools for software application experiments support comparisons between two versions of a software application feature a control version variation referring to the original version of the feature and a test version variation referring to the new version of the feature. While these tools might be able to satisfy the needs for software application experiments where only two versions variations of a feature are involved they become less efficient when the number of variations of software application features gets larger. For example to test more than two variations of a software application feature the developer might have to run a software application experiment tool multiple times and manually select the variations to be tested each time. When the number of variations gets larger the process might become even more cumbersome and time consuming for the software application developer.

The following detailed description is directed to technologies for performing experiments on a software application and identifying optimized experience configurations for the software application. Utilizing the concepts and technologies described herein experiments for testing multiple variations for various features or test factors of a software application can be automatically performed and optimized experience configurations can be identified without further intervention from the developer of the software application. The identified optimized experience configuration might then be automatically deployed to user computing devices and or be sent to the developer of the software application for further action.

According to one aspect presented herein a computer implemented mechanism is disclosed for performing an experiment on a software application to identify optimized experience configurations for the software application. In particular a developer of the software application might send an experiment configuration for the software application to an application experiment system. The experiment configuration might include one or more test factors for the software application a set of test values available for each of the test factors and an objective metric to be optimized. Based on the experiment configuration and other aspects such as the number of users available for the experiment the application experiment system might determine an experiment strategy to be utilized to carry out the experiment.

The experiment might proceed by identifying a user computing device and allocating an experience configuration to an instance of the software application running on the user computing device. The user computing device might be identified through receiving at the application experiment system a request for executing the software application from the user computing device. The application experiment system might also select a user computing device according to the experiment strategy and proactively push the experience configuration to the selected user computing device. The experience configuration might be generated based on the experiment configuration such as the available test values for each of the test factors. The experience configuration to be allocated to a particular user computing device might be determined dynamically or may be specified in the experiment strategy.

The allocated experience configuration might be utilized to configure the software application on the user computing device. While the software application is running at the user computing device experiment data related to the execution of the software application might be collected by the application experiment system. The experiment data might include but are not limited to interactions of the user with the software application operations or actions performed by the user during and or after the execution of the software application the time the user has spent using the software application and other data. The application experiment system may then analyze the experiment data obtained from one or more user computing devices and identify an optimized experience configuration for the software application. Additional details regarding the various components and processes described above for performing experiments on a software application and identifying optimized experience configurations for the software application will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may be practiced in distributed execution environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed execution environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

According to embodiments the application experiment system might allow one or more software application developers to define experiments and might administer the implementation of the experiments. In embodiments an experiment on a software application might include a series of tests performed on instances of the software application and each test may differ from one another in certain aspects. For example these tests may differ in terms of application settings also referred to herein as experience configurations of the software application such as parameter values user interface layouts colors add on features embedded advertisements incentives for user actions and or other aspects.

A developer may initiate an experiment on a software application by sending an experiment configuration to the application experiment system through a developer computing system . The developer computing system might be a computer utilized by the developer which might be a server computer a desktop or laptop personal computer a tablet computer a wireless telephone a personal digital assistant PDA an e reader a game console a set top box or any other computing device capable of connecting to the network and communicating with the application experiment system . According to embodiments the experiment configuration sent from the developer computing system might contain information that defines the experiment. By way of example and not limitation the experiment configuration might include the software application to be tested various features and or feature values to be tested in the experiment metrics for quantitatively measuring the experiment results and other information that may be used to set up the experiment.

Based on the experiment configuration the application experiment system may generate a set of experience configurations. Each of the experience configurations may be allocated to one or more user computing devices and be used to configure an instance of the software application running on the corresponding user computing device. The allocation of the experience configurations to the user computing devices might be performed by following an experiment strategy generated by the application experiment system . The generation of the experiment strategy might be based on the experiment configuration and other factors such as the number of users available to participate in the experiment.

As illustrated in the application experiment system may send experience configurations A N which may be referred to individually as an experience configuration or collectively as the experience configurations to user computing devices A N which may be referred to individually as a user computing device or collectively as the user computing devices . Each of the user computing devices might be associated with a user A N which may be referred to individually as a user or collectively as the users and might have an instance of the software application running on it. The user computing device might be a computer utilized by the user which might be a server computer a desktop or laptop personal computer a tablet computer a wireless telephone a PDA an e reader a game console a set top box or any other computing device capable of connecting to the network and communicating with the application experiment system .

Allocating the experience configuration to the corresponding user computing device might be triggered and implemented in various ways. For example a user computing device might have already had an instance of the software application installed thereon. When the user of the user computing device wants to start the instance of the software application he or she might submit a request for executing the software application through the user computing device to the application experiment system or any other entities for managing the execution of the software application . Once the request is received the application experiment system may identify the user as a participating user of the experiment and allocate an experience configuration to the user computing device . In another scenario the application experiment system might proactively send the experience configurations to several user computing devices . When the software application is to be executed on the user computing devices the allocated experience configuration may then be utilized to configure the instance of the software application on the corresponding user computing device .

In a further example the user computing device might not have the software application pre installed and the user of the user computing device might send a request for a copy of the software application to the application experiment system or other responsible entities. In this case a copy of the requested software application along with or configured with an experience configuration may then be sent to the user computing device for execution. It should be appreciated that the above examples are provided by way of illustration only and should not be construed as limiting. Other ways of allocating the experience configuration may be possible. For example regardless of the instance of the software application on the user computing devices different versions of the software application that implement the different experience configurations might be distributed to user computing device . It should be further appreciated that while illustrates an experience configuration is sent to one user computing device the experience configurations may be and typically are sent to multiple user computing devices for testing.

Once the software application is configured according to the experience configuration and running on the user computing device experiment data related to the execution of the software application may be collected by the application experiment system . By way of example and not limitation the experiment data may include interactions of the user with the software application operations or actions performed by the user during and or after the execution of the software application the time the user spent with the software application and other data. The collected experiment data may then be transmitted to the application experiment system . According to embodiments the application experiment system might analyze the collected experiment data to identify an optimized experience configuration for the software application. Depending on a preference specified by the developer the identified optimized experience configuration may be automatically deployed to the user computing devices and or be sent to the developer for further actions.

According to various embodiments the experiment may be initiated by the developer calling application program interfaces APIs provided by the application experiment system and or through user interfaces presented by the application experiment system on the developer computing system . In another implementation the functionalities of the application experiment system might be provided as a service such as a web service that can be accessed by the developer computing system to launch the experiment and to receive experiment results. Additional aspects regarding the application experiment system can be found in U.S. patent application Ser. No. 13 491 410 filed on Jun. 7 2012 and entitled Application Experiment System which is expressly incorporated herein by reference in its entirety Further details regarding the operation of the application experiment system will be provided below with regard to .

Referring now to one example data structure for implementing the experiment configuration and the experience configuration will be described. As briefly mentioned above an experiment configuration might contain information that defines various aspects of the experiment. In one embodiment the experiment configuration might include one or more features to be tested called test factors A B which may be referred to individually as a test factor or collectively as the test factors . Each test factor may have several test values to choose from. In the example illustrated in test factor A has test value to test value K available and might adopt one of them as its value in a particular setting or configuration of the software application . Similarly test factor B has test value to test value L available and may adopt one of them as its value in a setting or configuration of the software application . It should be understood that the test value might be quantitative such as numeric values or be qualitative such as categorical data like type shape etc.

Taking software game applications as an example a test factor might be the difficulty level of the game. The test values for the test actor may range from 1 to 10 which means a particular setting of the game may adopt one of the difficulty levels 1 to 10 such as a difficulty level of 5. Another test factor may be the background color of a user interface of the game application and the test values for the background color test factor might be blue red brown or grey. One of these colors may be chosen for an instance of the game application . Other test factors may include but are not limited to user interface layout control button shape color add on features embedded advertisements incentives for user actions in game purchase options and others.

While illustrates that each of the test values for each test factor is explicitly specified in the experiment configuration it should be appreciated that other ways of representing the test values for test factors might be employed. For example if a test factor is a numerical variable its corresponding test values might be represented as a numerical range along with a step size. The set of test values might then be generated based on the range and the step size. Continuing the above example of the game application with the difficulty level of the game being a test factor the test values for the test factor might be represented as a range 1 10 along with a step size 1 in the experiment configuration . This representation of the test factor and the test value would have similar effects as directly listing the difficulty levels 1 2 3 . . . 10 as the test values in the experiment configuration .

As discussed above based on the experiment configuration the application experiment system might generate one or more experience configurations for testing. Each of the experience configurations might include an identification to uniquely identify the experience configuration . Each experience configuration might also specify each of the test factors selecting one of the test values as its value. For example in the experience configuration A shown in test factor A takes test value from the set of test values associated with test factor . The test factor B adopts test value from the set of test values associated with test factor . After the experience configuration A is allocated and utilized to configure an instance of the software application the values of the test factors A and B in that instance of the software application will be set to the corresponding test values specified by the experience configuration A. Other experience configurations might be generated similarly.

According to one embodiment the experience configurations might be generated by exhaustively listing all the combinations of the test values of the test factors resulting in a complete experience configuration set. For example in an experiment where the developer defines two test factors two test values for one of the test factors and three test values for the other test factor there would be six experience configurations in a complete experience configuration set for the experiment each experience configuration including one combination of the test values for the two test factors .

In another embodiment a subset of the complete experience configuration set might be generated utilizing a portion of the test factors and or test values . As will be discussed in detail with regard to in some scenarios it may not be feasible to test all the experience configurations in the complete experience configuration set. In such a situation selecting and testing a subset of experience configurations might be more reasonable. To facilitate the selection of the subset of experience configurations the developer might also include a test factor value priority field in the experiment configuration .

The test factor value priority field might specify priorities assigned to test factors and or test values . For instance a test factor value priority may specify that test factor A shown in has a higher priority than test factor B and test value and test value for test factor have a higher priority than the rest of the test values. As a result experience configurations that include test factor test value or test factor test value might be generated with a higher priority than other experience configurations and thus might be tested first.

In order for the application experiment system to identify the optimized experience configuration an objective metric that is to be optimized in the experiment might also be included in the experiment configuration . In the above game application example the objective metric might be the length of time a user spends on playing the game and an experience configuration that maximize the length of play time might be identified as the optimized experience configuration . Other metrics might be utilized as the objective metric including but not limited to the percentage of users making a purchase if given the in game purchase option the percentage of users sharing the game to a friend the percentage of users clicking on an advertisement link embedded in the game and others. It should be appreciated that the selection of objective metric might be related to the type of the software application to be tested and the purpose of the experiment. Thus the objective metrics used in experiments on different software applications might be different.

The experiment configuration might also include various other data elements that might be utilized to define and carry out the experiment. For example as illustrated in the experiment configuration may also include an experience distribution setting which specifies the percentage of user computing devices receiving a specific experience configuration . Other data such as expected experiment duration desirable user profiles for users participating in the experiment and a secondary objective metric may also be included in the experiment configuration . It should be appreciated that additional data elements may be included in the experiment configuration and experience configuration beyond those described herein and that not every data element described will be available for every experiment configuration and experience configuration .

It should also be appreciated that the logical operations described herein with respect to and the other figures are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the FIGS. and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where the application experiment system receives an experiment configuration for a software application to be tested. As mentioned above a developer might send the experiment configuration through a user interface presented by the application experiment system by calling APIs exposed by the application experiment system or by accessing a service implementing the functionalities provided by the application experiment system .

From operation the routine proceeds to operation where an experiment strategy might be determined based on the experiment configuration . The experiment strategy might include information that can be utilized to guide the implementation of the experiment. Specifically an experiment strategy might include but is not limited to the experience configurations to be tested in the experiment the number of rounds that the experiment may be carried out the set of experience configurations to be included in each round of the experiment a user assignment for allocating experience configurations to user computing devices associated with corresponding users and other data. The experiment strategy may then be utilized by the application experiment system to allocate the experience configurations to user computing devices . Additional details regarding determining the experiment strategy are provided below with regard to .

From operation the routine proceeds to operation where a user is identified or selected to participate in the experiment. As discussed above a user might submit through a user computing device a request for executing the instance of the software application on the user computing device . Such a request might trigger the application experiment system to identify the user as a participating user of the experiment. Additionally or alternatively the application experiment system might select a user who might be interested in executing the software application on his her user computing device . The selection of such a user might be based on for example a history of the user behavior or preference in requesting software applications a profile of a user and or other information maintained by the application experiment system or provided by the developer .

The routine then proceeds to operation where an experience configuration might be allocated to the user computing device associated with the identified participating user . If the user computing device has an instance of the software application installed thereupon the application experiment system might only send the experience configuration to the user computing device . In another scenario where the software application might not have been installed on the user computing device the allocation of the experience configuration might include deploying the software application to the user computing device along with or configured using the experience configuration .

The allocation of the experience configuration might occur in response to requests sent by the user through the user computing device or might be initiated by the application experiment system to push the experience configuration along with an instance of the software application if necessary to the user computing device . It should be appreciated that allocating the experience configuration to a user computing device described above is for illustration only and should not be construed as limiting. Other ways of allocating the experience configuration such as by sending to the user computing device a link to retrieve the experience configuration from a storage location might also be employed.

The experience configuration might be utilized by the user computing device to configure the instance of the software application to a specific setting defined in the experience configuration upon execution. The user computing device may then execute the software application and the user might perform various operations on the software application such as playing a game if the software application is a game application or reading a document if the software application is a document viewer.

From operation the routine proceeds to operation where the application experiment system might collect experiment data related to the use of the experience configuration such as the execution of the software application configured by using the experience configuration . As discussed above the experiment data might include interactions of the user with the software application operations or actions performed by the user during and or after the execution of the software application the time the user spends on the software application and other data.

From operation the routine proceeds to operation where a determination is made as to whether enough experiment data have been collected. In one embodiment the collected experiment data might be considered as enough if the experiment data can provide statistically significant results i.e. the objective metrics obtained for different experience configurations are not different because of random variations. There are various mathematical formulations known in the art to quantitatively define the statistical significance and to determine if a result is statistically significant. It is intended that this application include all such definitions and determinations of statistically significant.

If it is determined that the collected experiment data is not enough to for analysis the routine returns back to operation where another user might be identified to participate in the experiment. If it is determined at the operation that the collected data is enough for analysis the routine proceeds to operation where the experiment data might be analyzed and an optimized experience configuration might be determined. In one embodiment the optimized experience configuration might be defined as the experience configuration that leads to a desired value of the objective metric . For example if the objective metric is the length of time a user spends on playing the game the optimized experience configuration might be determined to be the one out of a set of experience configurations that engages a user in playing the game for the longest period of time. In other examples the optimized experience configuration might be the one out of a set of experience configurations that results in the largest purchase rate of a product through an in application purchase option provides the highest rate of a user sharing the application with a friend leads to the highest click through rate of a link provided in the software application or others. From operation the routine proceeds to operation where it ends.

In another implementation the routine might also include a determination operation not shown for determining whether a time period specified by the developer or otherwise determined by the application experiment system has elapsed. If it is determined that the time period has not passed the routine would continue as normal otherwise the routine would end with or without performing the operation for identifying the optimized experience configuration . It should be appreciated that other additional operations might be added in routine depending on the experiment configuration and or the experiment strategy .

The routine begins at operation where the number of users available to participate in the experiment within a time period T might be estimated. The estimation might be performed based on a history of users requesting the software application or similar software applications. Such a history might be provided by the developer or obtained from an entity that is responsible for managing user requests for software applications. Thus a user might be counted as an available user if based on the history data the likelihood that the user requests the software application is high. In a further embodiment a user might be considered as an available user if his her profile matches the desirable user profiles for participating users provided in the experiment configuration and his her likelihood of executing the software application is high.

The time period T for estimating the number of available users might be specified by the developer for example in the experiment configuration as the time period during which the experiment expect to complete. Alternatively or additionally the time period T might be determined by the application experiment system as a reasonable time period to finish the experiment.

From operation the routine proceeds to operation where a determination is made as to whether the estimated number of users available for the experiment is large enough or not. In one embodiment the estimated number of users might be considered as large enough if statistically significant results can be obtained based on the number of available users as discussed above. In another embodiment the estimated number of user might be determined as large enough if it is higher than a pre determined threshold specified by the developer for instance in the experiment configuration .

If at operation it is determined that the estimated number of users available for the experiment is large enough the routine proceeds to operation where a further determination might be made as to whether the experiment is to be performed in one round or in multiple rounds. This determination might be based on the total number of experience configurations to be tested the number of concurrent tests supported by the application experiment system and or other factors. For example if there are three experience configurations to be tested it might be efficient to test all three experience configurations in one round. However if there are more than 10 experience configurations to be tested testing these 10 experience configurations in multiple rounds might be more manageable than testing them all in one round.

If at operation it is determined that the experiment is to be tested in one round the routine proceeds to operation where an experiment strategy might be generated to allocate the experience configurations in one round. If at operation it is determined that the experiment is to be tested in multiple rounds the routine then proceeds to operation where an experiment strategy might be generated to allocate the experience configurations in multiple rounds. The experiment strategy might further include the specific experience configurations to be tested in each round. illustrates several example of assigning experience configurations to different rounds of the experiments.

The example experiment shown in has one testing factor X and the testing factor X has six test values x x x x x x. Each table shown in corresponds to one possible experiment strategy experiment strategy I experiment strategy II experiment strategy III and experiment strategy IV . Each table contains a column representing the round sequence number and a column listing the experience configurations to be tested in each round of the experiment. Since the example experiment shown in only contains one testing factor X the experience configurations to be tested may be represented using the corresponding test values as illustrated in . Each table further includes a column listing the optimized experience configuration obtained in each round which might be considered as sub optimized experience configurations and an entry representing the overall optimized experience configuration obtained for the experiment.

The experiment strategy I illustrated in represents one type of strategy for testing experience configurations in multiple rounds. In this strategy the experience configurations might be separately tested in multiple rounds and optimized experience configurations from each round might then be tested in an extra round to identify the overall optimized experience configuration . For example in round of the experiment strategy I three experience configurations might be tested x x x and xmight be identified as the optimized experience configuration for round . In the second round experience configurations x x x might be tested and xmight be identified as the optimized experience configuration in round .

To determine an overall optimized experience configuration a third round of experimentation might be performed by testing the optimized experience configurations from previous rounds x x. The overall optimized experience configuration might be determined to be the optimized experience configuration from the third round for example xin the experiment strategy I . This extra round of experiment might help to eliminate the difference between different rounds caused by factors such as seasonality or the day of the week. Alternatively the overall optimized experience configuration might be determined by comparing the objective metrics of the optimized experience configurations from previous rounds of experiment without an extra round of experiment as illustrated in the experiment strategy II . In this experiment strategy the overall optimized experience configuration might be determined to be the one resulting in a better objective metric.

In another embodiment the experiment strategy might select the optimized experience configuration from one round to be part of the experience configurations tested in an immediate next round as illustrated in the experiment strategy III . In the experiment strategy III the optimized experience configuration identified in round x is placed in the second round for testing again along with other experience configurations and is identified as optimized experience configuration in round . As such xis tested again in round and is determined to be the optimized experience configuration in round . In this type of experiment strategy the optimized experience configuration from the last round of the experiment may be selected as the overall optimized experience configuration listed in the entry .

Under the framework presented in testing all the experience configurations in one round as might be specified in the strategy generated in operation may be presented as experiment strategy IV as shown in . Furthermore it should be understood that in each round of the experiment one of the experience configurations might be identified as the control variation of the experiment and the rest might be treated as test variations. In some scenarios the control variation might correspond to the default experience configuration of the software application in which no changes have been made. In other scenarios the control variation might correspond to an experience configuration that has been tested before such as xin round of the experiment strategy III .

In another embodiment the selection of the experience configuration for a round of experiment might be determined based on the experiment data such as the objective metrics calculated from the experiment data obtained from previous rounds. Using the game software application described above as an example the selection of test values for succeeding rounds of experiments might be determined based on the change of the objective metric of the test variation compared with that of the control variation with default difficulty level. For example in the first round of the experiment a random test value such as difficulty level 7 might be selected in a test variation for testing. If the objective metric for example the length of play time of the tested difficulty level 7 is shorter than that of the control variation with a default difficulty level the difficulty level for the next round of experiment might be selected to be a value closer to the default difficulty level. The selection of the new difficulty level to be tested might also depend on how large the reduction in the length of play time. If the reduction is large then the step size for selecting the test value for the next round of experiment might be larger otherwise the step size might be smaller.

Generally speaking the selection of the test value for the next round of the experiment might depend on the sign and the rate of the change in the objective metric of the test variation compared with that of the control variation. As shown in if the test variation leads to a worse objective metric the next test value to be tested Z might be selected along the negative direction of the change of the tested test value Z compared with the default test value Y. If the test variation leads to a better objective metric the next test value to be tested Z might be selected along the positive direction of the change of the tested test value Z compared with the default test value Y. The step size for choosing the next metric value to be tested might be proportional to the rate of the change in the objective metrics. By selecting test values in this way the application experiment system might obtain the optimized experience configuration without testing all the experience configurations in the complete experience configuration set.

In a further embodiment each round of the experiment might be constructed to test multiple test values as illustrated in . In an experiment where the test values corresponds to a numerical range such as the difficulty levels in the above game software application example the numerical range might be divided into multiple regions and one test value might be picked from each of the regions in one round of the experiment. Within each region the test value might be selected in a similar way as described above and illustrated in . A sub optimized test value might be obtained for each region. The obtained sub optimized test values from the multiple regions might be compared using their respective object metrics or be tested in an extra round of experiment to identify the overall optimized test value.

Referring back to if at operation it is determined that the estimated number of users available for the experiment is not large enough the routine proceeds to operation where a further determination is made as to whether the developer is willing to extend the time period of the experiment so that more users might be included in the experiment. Such information might be obtained from the developer through the interaction of the developer with a user interface presented by the application experiment system . Alternatively or additionally the developer might pre set his her preference on extending the experiment time period in the experiment configuration .

When deciding whether or not to extend the experiment time period there may be a tradeoff between the accuracy of the experiment results and the time length of the experiment. Generally speaking the more users there are to participate in the experiment the more accurate the experiment results would be that is the identified optimized experience configuration would be more likely to be the true optimized experience configuration . To get more users involved in the experiment however typically requires a longer experiment time. On the other hand to complete the experiment in a short time period there may not be enough users available to participate in the experiment which may lead to low accuracy of the experiment results.

While in general it might be preferred to get as many users as possible to be involved in the experiment at the expense of long experiment time there might be situations where the application experiment system might have to conduct the experiment with a limited number of users. For example the total number of users for a software application might be small in nature. The number of experience configurations to be tested might be relatively large with respect to the number of users. The experiment might be a preliminary test that needs to be finished in a short time of period and the accuracy of the experiment results is less crucial. Depending on the specific situation a developer might face the developer might instruct the application experiment system to choose either reducing the number of experience configurations to be tested or selecting some users to participate in the tests of multiple experience configurations . Reducing the number of experience configurations to be tested might help to keep the user number for testing one experience configuration at a desired scale whereas selecting some users to participate in multiple tests might keep the number of tested experience configurations unchanged by sacrificing the accuracy of the experiment results.

In if it is determined that the experiment time period can be extended at operation the routine proceeds to operation where the time period T might be expanded by an amount of T. The routine then returns back to operation . If it is determined that the experiment time period cannot be extended the routine proceeds to operation where the application experiment system might determine whether a smaller set of experience configurations may be tested. The application experiment system might make this determination based on information obtained from the developer through a user interface presented to the developer . Alternatively or additionally the developer might pre set his her preference on reducing the number of experience configurations in the experiment configuration .

If at operation it is determined that the number of experience configurations can be reduced the routine proceeds to operation where the number of the experience configurations might be reduced by selecting a subset of the experience configurations for testing. In some embodiments the selection of the subset of experience configurations might be performed by randomly choosing experience configurations . In other embodiments the selection might be performed based on instructions provided by the developer . For example as discussed above the experiment configuration might contain a test factor value priority field which specifies priorities assigned to the test factors and or test values . Based on the test factor value priority the application experiment system might first select experience configurations corresponding to the test factor values with high priority to be included in the subset of experience configurations and some experience configurations corresponding to low priority test factor values might not be selected. It should be understood that these examples are only illustrative and should not be construed as limiting. Other ways of selecting the subset of experience configurations may be utilized. From operation the routine proceeds to operation from which point the routine proceeds as discussed above.

If at operation it is determined that the number of experience configurations cannot be reduced the routine proceeds to operation where some user computing devices might be allocated with multiple experience configurations due to the insufficient number of available users. In one implementation the multiple experience configurations allocated to one user computing device might be tested in separate rounds. In other words the user might participate in multiple rounds of the experiment and in each round his her computing device might receive a different experience configuration . It should be noted that by involving one user in multiple rounds of the experiment the user s behavior might be influenced by the software application that has been presented to the user before. As such the obtained objective metric might be biased leading to inaccurate experiment results. From operation operation or operation the routine proceeds to operation where it ends.

In embodiments the generated experiment strategy might also include a user assignment for allocating experience configurations to user computing devices associated with the corresponding users . In one implementation the user assignment might be generated by randomly assigning the experience configurations to available users. In another implementation the user assignment might be obtained by utilizing the hash value based assignment method described in U.S. patent application Ser. No. 13 491 410 filed on Jun. 7 2012 and entitled Application Experiment System. 

It should also be understood that the experiment strategy might be dynamically updated based on current situations of the experiment. For example the estimation of the available number of users might be adjusted as the experiment is being carried out. Based on the adjusted estimation the determinations made at operations and as well as the operations following those determinations might be updated accordingly. It should be further appreciated that the process of generating experiment strategy described in is merely illustrative and that other implementations might also be utilized.

The distributed execution environment can provide instances of computing resources on a permanent or an as needed basis. The instances of computing resources provided by the distributed execution environment may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. Each type or configuration of an instance of a computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity.

Instances of data processing resources may be available as virtual machine instances in a number of different configurations. The virtual machine instances may be configured to execute applications including Web servers application servers media servers database servers and other types of applications. Instances of data storage resources may include file storage devices block storage devices and the like. Instances of remote desktop sessions might also be utilized in various embodiments presented herein. A remote desktop session may be established utilizing the remote desktop protocol RDP or another similar protocol for viewing and interacting with a graphical user interface provided by another computer. It should be understood that an instance may include any combination of the various types of resources described above.

The instances of computing resources provided by the distributed execution environment are enabled in one implementation by one or more data centers A N which may be referred to herein singularly as a data center or in the plural as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that implements the concepts and technologies disclosed herein for providing a service to perform experiments on a software application and to identify optimized experience configurations for the software application will be described below with regard to .

As a customer of the distributed execution environment the developer may access the computing resources provided by the data centers over a network such as the network the Internet or any other networking topology known in the art that connects the data centers to the developer computing system associated with the developer . It should also be appreciated that combinations of such networks might also be utilized.

The developer computing system may be utilized to configure aspects of the computing resources provided by the distributed execution environment . In this regard the distributed execution environment might provide a Web interface through which aspects of its operation may be configured. For instances a Web browser application program executing on the customer computing system might be utilized to access the Web interface and configure the operation of the distributed execution environment . Alternatively a stand alone application program executing on the customer computing system might access an application programming interface API exposed by the distributed execution environment for performing the configuration operations. Other mechanisms for configuring the operation of the distributed execution environment might also be utilized.

In one embodiment the instances A N which may be referred herein singularly as an instance or in the plural as the instances are virtual machine instances. As known in the art a virtual machine instance is an instance of a software implementation of a machine i.e. a computer that executes programs like a physical machine. Each of the servers may be configured to execute an instance manager capable of instantiating and managing the instances. In the case of virtual machine instances for example the instance manager might be a hypervisor or another type of program configured to enable the execution of multiple virtual machine instances on a single server for example. Each of the instances may be configured to execute all or a portion of an application. According to one implementation one or more instances might be configured to execute the service provided by the application experiment system as illustrated in . It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machine instances other types of instances of computing resources can be utilized with the concepts and technologies disclosed herein.

The data center shown in also includes a server computer F reserved for executing software components for managing the operation of the data center the server computers the instances and other resources within the distributed execution environment . In particular the server computer F might execute the instance launch manager to receive instance launch requests from one or more developer computing systems and to instantiate one or more of the instances in response to the requests.

In the example data center shown in an appropriate local area network LAN is utilized to interconnect the server computers A E and the server computer F. The LAN is also connected to the network illustrated in . It should be appreciated that the configuration and network topology illustrated in has been greatly simplified and that many more computing systems networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and between instances of computing resources provided by the distributed execution environment .

It should be appreciated that the data center described in is merely illustrative and that other implementations might be utilized. In particular functionality described herein as being performed by the instance launch manager might be performed by one or more other components. Additionally it should be appreciated that the functionality provided by these components might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer such as modules implementing the functionalities provided by the application experiment system and or any the other software components and data described above. The mass storage device might also store other programs and data not specifically identified herein.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the routines described above with regard to . The computer might also include computer readable storage media for performing any of the other computer implemented operations described herein.

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for performing experiments on a software application and identifying optimized experience configurations for the software application have been presented herein. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

