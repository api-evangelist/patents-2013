---

title: Method and system for providing a rotating key encrypted file system
abstract: A file system data is divided into two or more data blocks. A unique encryption key is assigned to each data block with the encryption key assigned to each data block being distinct from other encryption keys used to encrypt the other data blocks and each of the data blocks is encrypted using its assigned encryption key. One of the data blocks within the file system is then selected and decrypted using the distinct encryption key assigned to the selected data block and a new encryption key, distinct for the previously assigned encryption key, is assigned to the selected data block and the selected data block is re-encrypted using the new encryption key. This process is then repeated for each data block on a sequential/cyclic and continually rotating basis.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037870&OS=09037870&RS=09037870
owner: Intuit Inc.
number: 09037870
owner_city: Mountain View
owner_country: US
publication_date: 20130816
---
When electronic data such as file system data is sensitive enough to require encryption one of the fundamental actions required to ensure the encryption of the data provides the desired level of security is to change or rotate the encryption key used to encrypt and decrypt the electronic data on a periodic basis. The changing of the encryption key is necessary to prevent the encryption key and therefore the encrypted data from being compromised. Consequently currently encryption keys are changed on a periodic or scheduled basis and or on an on demand basis in response to a lost or potentially compromised encryption key.

To some degree changing the encryption key used to encrypt data is effective in preventing encrypted data from being compromised. However currently in order to change the encryption key used to encrypt and decrypt file system data the entirety of the file system data must first be decrypted using the existing encryption key and then re encrypted using a newly assigned encryption key. This process is complicated and typically involves making the entirety of the encrypted data inaccessible for a significant period of time thereby interrupting live traffic and consuming significant amounts of processor power and other resources.

As a result of the situation described above the changing of encryption keys is often performed less frequently than would be optimal for security purposes in order to avoid interruption of live traffic and the consumption of processing resources. However when the encryption keys are changed less frequently the vulnerability to compromise of both the encryption key and the encrypted data is often significantly increased.

What is needed is a method and system that allows the changing of encryption keys more frequently but does not require making the entirety of the encrypted data inaccessible for a significant period of time or interrupting live traffic and consuming significant amounts of processor power and other resources.

In accordance with one embodiment a method and system for providing a rotating key encrypted file system includes a process for providing a rotating key encrypted file system whereby in one embodiment access to a file system containing file system data is obtained and two or more data blocks within the file system are designated each of the two or more data blocks including part of the file system data.

In one embodiment a unique encryption key is assigned to each data block of the two or more data blocks with the encryption key assigned to each data block being distinct from other encryption keys used to encrypt the other data blocks of the two or more data blocks within the file system. In one embodiment each of the two or more data blocks within the file system is then encrypted using the distinct encryption key assigned to that data block.

In one embodiment one of the two or more data blocks within the file system is selected and decrypted using the distinct encryption key assigned to the selected data block. A new encryption key distinct for the previously assigned or aging old encryption key is then assigned to the selected data block and the selected data block is re encrypted using the new encryption key.

In one embodiment the process of selecting one of the two or more data blocks within the file system decrypting the selected data block using the distinct encryption key assigned to the selected data block and then re encrypting the selected data block using a new encryption key that is distinct from the previously assigned encryption key is then repeated for each data block on a sequential cyclic and continually rotating basis such that at any given time only one data block of the two or more data blocks within the file system is being encrypted using a new encryption key.

Common reference numerals are used throughout the FIG.s and the detailed description to indicate like elements. One skilled in the art will readily recognize that the above FIG.s are examples and that other architectures modes of operation orders of operation and elements functions can be provided and implemented without departing from the characteristics and features of the invention as set forth in the claims.

Embodiments will now be discussed with reference to the accompanying FIG.s which depict one or more exemplary embodiments. Embodiments may be implemented in many different forms and should not be construed as limited to the embodiments set forth herein shown in the FIG.s and or described below. Rather these exemplary embodiments are provided to allow a complete disclosure that conveys the principles of the invention as set forth in the claims to those of skill in the art.

In one embodiment a process for providing a rotating key encrypted file system includes one or more applications such as software packages modules or systems implemented on one or more computing systems.

As used herein the term computing system includes but is not limited to a desktop computing system a portable computing system a mobile computing system a laptop computing system a notebook computing system a tablet computing system a workstation a server computing system a mobile phone a smart phone a wireless telephone a two way pager a Personal Digital Assistant PDA a media player i.e. an MP3 player and or other music and or video player an Internet appliance or any device that includes components that can execute all or part of any one of the processes and or operations as described herein. In addition as used herein the term computing system can denote but is not limited to systems made up of multiple desktop computing systems portable computing systems mobile computing systems laptop computing systems notebook computing systems tablet computing systems workstations server computing systems smart phones wireless telephones two way pagers Personal Digital Assistants PDAs media players Internet appliances or any devices that can be used to perform the processes and or operations as described herein.

In one embodiment one or more computing systems are connected by one or more communications channels such as but not limited to any general network communications network or general network communications network system a cellular network a wireless network a combination of different network types a public network a private network a satellite network a POTS network a cable network or any other network capable of allowing communication between two or more computing systems as discussed herein and or available or known at the time of filing and or as developed after the time of filing.

As used herein the term network includes but is not limited to any network or network system such as but not limited to a peer to peer network a hybrid peer to peer network a Local Area Network LAN a Wide Area Network WAN a public network such as the Internet a private network a cellular network a POTS network any general network communications network or general network communications network system a wireless network a wired network a wireless and wired combination network a satellite network a cable network any combination of different network types or any other system capable of allowing communication between two or more computing systems whether available or known at the time of filing or as later developed.

In accordance with one embodiment a method and system for providing a rotating key encrypted file system includes a process for providing a rotating key encrypted file system whereby in one embodiment access to a file system containing file system data is obtained and two or more data blocks within the file system are designated each of the two or more data blocks including one or more parts of the file system data.

In various embodiments the file system containing file system data can be any file system as discussed herein and or as known in the art at the time of filing and or as developed after the time of filing. As a specific illustrative example in one embodiment the file system containing the file system data is an Amazon Web Services AWS Elastic Compute Cloud EC2 file system.

In one embodiment two or more data blocks within the file system are designated each of the two or more data blocks including one or more parts of the file system data. As a specific illustrative example in one embodiment N data blocks are designated within the file system where N is a whole number greater than one.

In this manner the file system and file system data is partitioned into multiple distinct data blocks.

In one embodiment a unique encryption key is assigned to each data block of the two or more data blocks with the encryption key assigned to each data block being distinct from other encryption keys used to encrypt the other data blocks of the two or more data blocks within the file system. In one embodiment each of the two or more data blocks is then initially encrypted using the respective encryption key assigned to that data block.

As a specific illustrative example in one embodiment N data blocks are designated within the file system where N is a whole number greater than one and N 1 unique encryption keys are provided with one of the N 1 unique encryption keys being assigned to a respective one of the N data blocks and with a 1 encryption key being temporarily unassigned. In this specific illustrative example the N data blocks are then initially encrypted using their respective ones of the N 1 encryption keys.

In one embodiment once each of the two or more data blocks is then initially encrypted one of the two or more data blocks within the file system is selected and decrypted using the unique encryption key assigned to the selected data block. A new encryption key distinct from the aging old or previously assigned encryption key is assigned to the selected data block and the selected data block is re encrypted using the new encryption key.

As a specific illustrative example in one embodiment N data blocks are designated within the file system where N is a whole number greater than one and N 1 unique encryption keys are provided with one of the N 1 unique encryption keys being assigned to a respective one of the N data blocks and with a 1 encryption key being temporarily unassigned. In this specific illustrative example the N data blocks are then initially encrypted using their respective ones of the N 1 encryption keys. Then a selected one of the N data blocks is decrypted using its aging old or previously assigned one of the N 1 encryption keys. Then the previously unassigned 1 encryption key of the N 1 encryption keys is assigned to the selected data block as a new encryption key and the selected one of the N data blocks is re encrypted using the new or 1 encryption key.

In one embodiment the process of selecting one of the two or more data blocks within the file system decrypting the selected data block using the distinct encryption key assigned to the selected data block and then re encrypting the selected data block using a new encryption key that is distinct from the previously assigned encryption key is repeated for each data block on a sequential cyclic and continually rotating basis such that at any given time only one data block of the two or more data blocks within the file system is being encrypted using a new encryption key e.g. is being rekeyed.

As a specific illustrative example of one embodiment of one implementation of process for providing a rotating key encrypted file system assume the file system is implemented operated in a Linux operating system environment and more particularly is implemented as an Amazon Web Services AWS Elastic Compute Cloud EC2 file system.

In this specific illustrative example the process for providing a rotating key encrypted file system is a kernel based system residing between the upper virtual file system layers and the low level block device driver to implement transparent encryption and decryption. However in other illustrative examples and embodiments the process for providing a rotating key encrypted file system is independent of the file system type.

As noted in this specific illustrative example the file system is virtually divided into N data blocks with each data block containing one or more parts of the file system data. As also noted above in this specific illustrative example N 1 encryption keys are used to protect the designated N data blocks with the 1 or previously unassigned encryption key being used to replace an aging old one of the N encryption keys assigned to a selected one of the N data blocks during a rekeying process of the selected one of the N data blocks.

In this specific illustrative example Linux CryptoAPI is used to encrypt and or decrypt each of the N data blocks. In one embodiment each of the assigned N encryption keys is used to protect continuous parts in the data blocks.

In one embodiment the N data blocks are re keyed e.g. the data blocks are decrypted and then re encrypted on a cyclic and continually rotating basis using an automatic rekeying daemon in one embodiment called Autorekee running in a low priority mode such that at any given time only one data block of the two or more data blocks within the file system is being encrypted using a new encryption key. To this end a part of a selected data block that is being re keyed will have two associated encryption keys the previously assigned or old aging encryption key and the new encryption key.

In this specific illustrated example it is required that the encryption keys not remain within the AWS. Consequently a REpresentational State Transfer REST service that will only respond to the AWS instance is provided. In this specific illustrative example during the EC2 boot time the process for providing a rotating key encrypted file system retrieves the encryption keys from the REST service. In this specific illustrative example the encryption keys are mapped to a given Elastic Block Store IDentifcation EBSID . In the specific illustrative example the REST service is also used to send out the new i.e. the 1 encryption key and retire the old aging i.e. previously assigned encryption key.

In one embodiment of this specific illustrative example the process for providing a rotating key encrypted file system leverages the superblock to store metadata such as the total number of encryption keys i.e. the value of the number N 1 the total number of data blocks i.e. the value of the number N the name of the previously assigned i.e. aging or old encryption key and the new encryption key and or the last block number that was rekeyed.

In one embodiment of this specific illustrative example the metadata allows the process for providing a rotating key encrypted file system to keep track of which data block is being protected by two encryption keys i.e. the old encryption key and the new encryption key and which data block can be accessed with which encryption key i.e. old or new.

In this specific illustrative example the process for providing a rotating key encrypted file system leverages the page cache and bio infrastructure of the kernel to provide transparent encryption and decryption of the data using the encryption keys present in the kernel key management service.

In some cases the work queue interface is used to enable the coalescing of multiple bio requests to reduce the overhead of individual bio requests for file system blocks. In other embodiments similar implementations used by other encryption file systems such as dm crypt are accommodated.

In instances where the encrypted file system data must be maintained in a page cache encryption and decryption can be implemented to copy the data between the page cache and the user space buffer specified in the read write and or other system calls.

For the relatively rare situations where input output I O access is made to a part of a data block that is currently being rekeyed the I O call is held off until the rekeying process is finished on that part of the data block. When the rekeying process is completed the block can then be accessed with the new encryption key.

In this specific illustrative example a daemon called Autorekee runs continuously in the background of the AWS instance. The primary task of the Autorekee is to continuously rekey the data blocks with a new encryption key. In one embodiment the Autorekee daemon works through each of the N data blocks in a sequential and cyclic manner.

A specific illustrative example of one algorithm used to generate the Autorekee daemon is represented by the following pseudo code 

In the Autorekee daemon pseudo code presented above lines 1 through 3 are initialization statements with line 3 retrieving the data block being rekeyed.

In the Autorekee daemon pseudo code presented above line 5 performs the actual rekey which involves decrypting the data block with the aging or previously assigned encryption key and re encrypting the data block with the new encryption key.

In the Autorekee daemon pseudo code presented above lines 7 to 10 contain the logic for when a new part within a data block or a data block is reached. As seen in lines 8 to 10 if the current data block is the beginning of a new section the current aging or previously assigned encryption key and the new encryption key are associated with the next key pair.

The Autorekee daemon pseudo code presented above also handles cases where the Autorekee crashes and needs to resume. The progress of the Autorekee s location is continuously tracked as metadata in the superblocks. When the last part of the last data block is reached Autorekee begins the rekeying process again at the first data block.

In this specific illustrative example the process for providing a rotating key encrypted file system utilizes keyed hashes to enforce file integrity. In one embodiment the hash list for a file consists of a separate message authentication code computed for every data block used by that file s contents. In one embodiment this code is verified on every read and updated on every write operation on the corresponding data block. In one embodiment the top hash computed over the hash list itself must be verified or updated for every read or write call.

As noted above the specific illustrative example discussed above is but one illustrative example of one implementation of one embodiment of the process for providing a rotating key encrypted file system. Those of skill in the art will readily recognize that other implementations and embodiments are possible. Therefore the discussion above should not be construed as a limitation on the claims provided below.

Using the method and system for providing a rotating key encrypted file system discussed herein the risk of file system data being compromised is significantly reduced by having the encryption keys continuously rotated throughout the file system. Consequently the Time To Live TTL for each encryption key is extremely short. As a result even if the encryption key were compromised the attacker would only have a very short window to gain access to one section i.e. one data block of the file system.

In addition using the method and system for providing a rotating key encrypted file system discussed herein performance and data accessibility are negligibly affected with only minor overhead being added. Consequently using the method and system for providing a rotating key encrypted file system discussed herein encryption keys can be changed more frequently without the entirety of the encrypted data being inaccessible for any significant period of time and without interrupting live traffic or consuming significant amounts of processor power and other resources.

As discussed in more detail below using the below embodiments with little or no modification and or user input there is considerable flexibility adaptability and opportunity for customization to meet the specific needs of various users under numerous circumstances.

In one embodiment provider computing system is any computing system as discussed herein and or as known in the art at the time of filing and or as developed thereafter that includes components that can execute all or part of a process for providing a rotating key encrypted file system in accordance with at least one of the embodiments as described herein.

In one embodiment the process for providing a rotating key encrypted file system is implemented operated in a Linux operating system environment and more particularly is implemented as an Amazon Web Services AWS Elastic Compute Cloud EC2 file system.

In one embodiment applications is in communication with libraries and virtual file system and file system . In one embodiment user buffer space of virtual file system and file system is in communication with metadata in super block of process module .

In the specific illustrative example of the process for providing a rotating key encrypted file system is coordinated and implemented at least in part in process module via process core . In this embodiment the process for providing a rotating key encrypted file system is a kernel based system residing between the upper virtual file system layers e.g. virtual file system and file system and the low level block device driver e.g. device drivers to implement transparent encryption and decryption. However in other embodiments the process for providing a rotating key encrypted file system is independent of the file system type.

In one embodiment the file system data in virtual file system and file system not explicitly shown in is virtually divided into N data blocks not explicitly shown in in data blocks with each data block containing one or more parts of the file system data. As also noted above in this specific illustrative example N 1 encryption keys are used to protect the designated N data blocks with the 1 or previously unassigned encryption key being used to replace an aging old one of the N encryption keys assigned to a selected one of the N data blocks during a rekeying process of the selected one of the N data blocks.

In this specific illustrative example a Linux Crypto API is used to encrypt and or decrypt each of the N data blocks. In one embodiment each of the assigned N encryption keys is used to protect continuous parts in the data blocks.

In one embodiment the N data blocks are re keyed e.g. the data blocks are decrypted and then re encrypted on a cyclic and continually rotating basis using an automatic rekeying daemon Autorekee running in a low priority mode such that at any given time only one data block of the two or more data blocks within data blocks is being encrypted using a new encryption key. To this end a part of a selected data block that is being re keyed will have two associated encryption keys the previously assigned or old aging encryption key and the new encryption key.

In this specific illustrated example it is required that the encryption keys not remain within the AWS. Consequently a REpresentational State Transfer REST service that will only respond to the AWS instance is provided not explicitly shown in . In this specific illustrative example during the EC2 boot time the process for providing a rotating key encrypted file system retrieves the encryption keys from the REST service. In this specific illustrative example the encryption keys are mapped to a given Elastic Block Store IDentifcation EBSID . In the specific illustrative example the REST service is also used to send out the new i.e. the 1 encryption key and retire the old aging i.e. previously assigned encryption key.

In one embodiment the process for providing a rotating key encrypted file system leverages the superblock to store metadata in superblock such as the total number of encryption keys i.e. the value of the number N 1 the total number of data blocks i.e. the value of the number N the name of the previously assigned i.e. aging or old encryption key and the new encryption key and or the last block number that was rekeyed.

In one embodiment metadata in superblock allows in kernel key management to keep track of which data block is being protected by two encryption keys i.e. the old encryption key and the new encryption key and which data block can be accessed with which encryption key i.e. old or new.

In this specific illustrative example the process for providing a rotating key encrypted file system leverages the page cache and bio infrastructure of the kernel to provide transparent encryption and decryption of the data using the encryption keys present in the in kernel key management .

In some cases the work queue interface is used to enable the coalescing of multiple bio requests to reduce the overhead of individual bio requests for file system blocks. In other embodiments similar implementations used by other encryption file systems such as dm crypt are accommodated.

In instances where the encrypted file system data must be maintained in page cache encryption and decryption can be implemented to copy the data between page cache and user space buffer as specified in the read write and or other system calls.

For the relatively rare situations where input output I O access is made to a part of a data block that is currently being rekeyed the I O call is held off until the rekeying process is finished on that part of the data block. When the rekeying process is completed the block can then be accessed with the new encryption key.

In this specific illustrative example Autorekee runs continuously in the background of the AWS instance. The primary task of Autorekee is to continuously rekey the data blocks with a new encryption key. In one embodiment Autorekee works through each of the N data blocks in a sequential and cyclic manner.

A specific illustrative example of one algorithm used to generate Autorekee is represented by the following pseudo code 

In the Autorekee pseudo code presented above lines 1 through 3 are initialization statements with line 3 retrieving the data block being rekeyed.

In the Autorekee pseudo code presented above line 5 performs the actual rekey which involves decrypting the data block with the aging or previously assigned encryption key and re encrypting the data block with the new encryption key.

In the Autorekee pseudo code presented above lines 7 to 10 contain the logic for when a new part within a data block or a data block is reached. As seen in lines 8 to 10 if the current data block is the beginning of a new section the current aging or previously assigned encryption key and the new encryption key are associated with the next key pair.

In the Autorekee pseudo code presented above also handles cases where Autorekee crashes and needs to resume. The progress of In the Autorekee s location is continuously tracked as metadata in metadata in super block . When the last part of the last data block is reached In the Autorekee begins the rekeying process again at the first data block.

In this specific illustrative example the process for providing a rotating key encrypted file system utilizes keyed hashes to enforce file integrity. In one embodiment the hash list for a file consists of a separate message authentication code computed for every data block used by that file s contents. In one embodiment this code is verified on every read and updated on every write operation on the corresponding data block. In one embodiment the top hash computed over the hash list itself must be verified or updated for every read or write call.

As noted above the specific illustrative example discussed above is but one illustrative example of one implementation of one embodiment of the process for providing a rotating key encrypted file system. Those of skill in the art will readily recognize that other implementations and embodiments are possible. Therefore the discussion above should not be construed as a limitation on the claims provided below.

In accordance with one embodiment access to a file system containing file system data is obtained and two or more data blocks within the file system are designated each of the two or more data blocks including part of the file system data.

In one embodiment a unique encryption key is assigned to each data block of the two or more data blocks with the encryption key assigned to each data block being distinct from other encryption keys used to encrypt the other data blocks of the two or more data blocks within the file system. In one embodiment each of the two or more data blocks within the file system is then encrypted using the distinct encryption key assigned to that data block.

In one embodiment one of the two or more data blocks within the file system is selected and decrypted using the distinct encryption key assigned to the selected data block. A new encryption key distinct for the previously assigned or aging old encryption key is then assigned to the selected data block and the selected data block is re encrypted using the new encryption key.

In one embodiment the process of selecting one of the two or more data blocks within the file system decrypting the selected data block using the distinct encryption key assigned to the selected data block and then re encrypting the selected data block using a new encryption key that is distinct from the previously assigned encryption key is then repeated for each data block on a sequential cyclic and continually rotating basis such that at any given time only one data block of the two or more data blocks within the file system is being encrypted using a new encryption key.

Process for providing a rotating key encrypted file system begins at ENTER OPERATION of and process flow proceeds to ACCESS A FILE SYSTEM CONTAINING FILE SYSTEM DATA OPERATION .

In one embodiment at ACCESS A FILE SYSTEM CONTAINING FILE SYSTEM DATA OPERATION access to a file system containing file system data is obtained.

In various embodiments the file system containing file system data accessed at ACCESS A FILE SYSTEM CONTAINING FILE SYSTEM DATA OPERATION can be any file system as discussed herein and or as known in the art at the time of filing and or as developed after the time of filing. As a specific illustrative example in one embodiment the file system containing the file system data accessed at ACCESS A FILE SYSTEM CONTAINING FILE SYSTEM DATA OPERATION is an Amazon Web Services AWS Elastic Compute Cloud EC2 file system.

In one embodiment once access to a file system containing file system data is obtained at ACCESS A FILE SYSTEM CONTAINING FILE SYSTEM DATA OPERATION process flow proceeds to DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION .

In one embodiment at DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION two or more data blocks within the file system of ACCESS A FILE SYSTEM CONTAINING FILE SYSTEM DATA OPERATION are designated each of the two or more data blocks including one or more parts of the file system data.

As a specific illustrative example in one embodiment N data blocks are designated within the file system at DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION where N is a whole number greater than one.

In this manner at DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION the file system and file system data is partitioned into multiple distinct data blocks.

In one embodiment once two or more data blocks within the file system of ACCESS A FILE SYSTEM CONTAINING FILE SYSTEM DATA OPERATION are designated at DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION process flow proceeds to ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION .

In one embodiment at ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION a unique encryption key is assigned to each data block of the two or more data blocks of DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION with the encryption key assigned to each data block being distinct from other encryption keys used to encrypt the other data blocks of the two or more data blocks within the file system.

As a specific illustrative example in one embodiment N data blocks are designated within the file system where N is a whole number greater than one and N 1 unique encryption keys are provided with one of the N 1 unique encryption keys being assigned to a respective one of the N data blocks and with a 1 encryption key being temporarily unassigned.

In one embodiment once a unique encryption key is assigned to each data block of the two or more data blocks of DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION at ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION process flow proceeds to ENCRYPT EACH OF THE TWO OR MORE DATA BLOCKS USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THAT DATA BLOCK OPERATION .

In one embodiment at ENCRYPT EACH OF THE TWO OR MORE DATA BLOCKS USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THAT DATA BLOCK OPERATION each of the two or more data blocks of DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION is initially encrypted using the unique encryption key assigned to each data block at ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION .

As a specific illustrative example in one embodiment N data blocks are designated within the file system where N is a whole number greater than one and N 1 unique encryption keys are provided with one of the N 1 unique encryption keys being assigned to a respective one of the N data blocks and with a 1 encryption key being temporarily unassigned. In this specific illustrative example the N data blocks are then initially encrypted at ENCRYPT EACH OF THE TWO OR MORE DATA BLOCKS USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THAT DATA BLOCK OPERATION using their respective ones of the N 1 encryption keys.

In one embodiment once each of the two or more data blocks of DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION is initially encrypted using the unique encryption key assigned to each data block at ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION at ENCRYPT EACH OF THE TWO OR MORE DATA BLOCKS USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THAT DATA BLOCK OPERATION process flow proceeds to SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION .

In one embodiment at SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION one of the two or more data blocks within the file system is selected and decrypted using the unique encryption key assigned to the selected data block at ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION .

As a specific illustrative example in one embodiment N data blocks are designated within the file system where N is a whole number greater than one and N 1 unique encryption keys are provided with one of the N 1 unique encryption keys being assigned to a respective one of the N data blocks and with a 1 encryption key being temporarily unassigned. In this specific illustrative example the N data blocks are then initially encrypted using their respective ones of the N 1 encryption keys. Then a selected one of the N data blocks is decrypted using its aging old or previously assigned one of the N 1 encryption keys at SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION .

In one embodiment once one of the two or more data blocks within the file system is selected and decrypted using the unique encryption key assigned to the selected data block at ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION at SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION process flow proceeds to ASSIGN A NEW ENCRYPTION KEY TO THE SELECTED DATA BLOCK THAT IS DISTINCT FROM THE PREVIOUSLY ASSIGNED ENCRYPTION KEY FOR THE SELECTED DATA BLOCK OPERATION .

In one embodiment at ASSIGN A NEW ENCRYPTION KEY TO THE SELECTED DATA BLOCK THAT IS DISTINCT FROM THE PREVIOUSLY ASSIGNED ENCRYPTION KEY FOR THE SELECTED DATA BLOCK OPERATION a new encryption key distinct from the aging old or previously assigned encryption key of ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION is assigned to the selected data block of SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION .

As a specific illustrative example in one embodiment N data blocks are designated within the file system where N is a whole number greater than one and N 1 unique encryption keys are provided with one of the N 1 unique encryption keys being assigned to a respective one of the N data blocks and with a 1 encryption key being temporarily unassigned. In this specific illustrative example the N data blocks are then initially encrypted using their respective ones of the N 1 encryption keys. Then a selected one of the N data blocks is decrypted using its aging old or previously assigned one of the N 1 encryption keys. Then the previously unassigned 1 encryption key of the N 1 encryption keys is assigned to the selected data block as a new encryption key.

In one embodiment once a new encryption key distinct from the aging old or previously assigned encryption key of ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION is assigned to the selected data block of SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION at ASSIGN A NEW ENCRYPTION KEY TO THE SELECTED DATA BLOCK THAT IS DISTINCT FROM THE PREVIOUSLY ASSIGNED ENCRYPTION KEY FOR THE SELECTED DATA BLOCK OPERATION process flow proceeds to RE ENCRYPT THE SELECTED DATA BLOCK USING THE NEW ENCRYPTION KEY OPERATION .

In one embodiment at RE ENCRYPT THE SELECTED DATA BLOCK USING THE NEW ENCRYPTION KEY OPERATION the selected data block of SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION is re encrypted using the new encryption key distinct from the aging old or previously assigned encryption key of ASSIGN A NEW ENCRYPTION KEY TO THE SELECTED DATA BLOCK THAT IS DISTINCT FROM THE PREVIOUSLY ASSIGNED ENCRYPTION KEY FOR THE SELECTED DATA BLOCK OPERATION .

As a specific illustrative example in one embodiment N data blocks are designated within the file system where N is a whole number greater than one and N 1 unique encryption keys are provided with one of the N 1 unique encryption keys being assigned to a respective one of the N data blocks and with a 1 encryption key being temporarily unassigned. In this specific illustrative example the N data blocks are then initially encrypted using their respective ones of the N 1 encryption keys. Then a selected one of the N data blocks is decrypted using its aging old or previously assigned one of the N 1 encryption keys. Then the previously unassigned 1 encryption key of the N 1 encryption keys is assigned to the selected data block as a new encryption key and the selected one of the N data blocks is re encrypted using the new or 1 encryption key.

In one embodiment once the selected data block of SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION is re encrypted using the new encryption key distinct from the aging old or previously assigned encryption key of ASSIGN A NEW ENCRYPTION KEY TO THE SELECTED DATA BLOCK THAT IS DISTINCT FROM THE PREVIOUSLY ASSIGNED ENCRYPTION KEY FOR THE SELECTED DATA BLOCK OPERATION at RE ENCRYPT THE SELECTED DATA BLOCK USING THE NEW ENCRYPTION KEY OPERATION process flow proceeds to REPEAT THE SELECTION DECRYPTION AND RE ENCRYPTION PROCESS FOR EACH DATA BLOCK OF THE TWO OF MORE DATA BLOCKS ON A CYCLIC AND ROTATING BASIS OPERATION .

In one embodiment at REPEAT THE SELECTION DECRYPTION AND RE ENCRYPTION PROCESS FOR EACH DATA BLOCK OF THE TWO OF MORE DATA BLOCKS ON A CYCLIC AND ROTATING BASIS OPERATION the process of selecting one of the two or more data blocks within the file system of and decrypting the selected data block using the distinct encryption key assigned to the selected data block of SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION and then re encrypting the selected data block using a new encryption key that is distinct from the previously assigned encryption key of RE ENCRYPT THE SELECTED DATA BLOCK USING THE NEW ENCRYPTION KEY OPERATION is repeated for each data block on a sequential cyclic and continually rotating basis such that at any given time only one data block of the two or more data blocks within the file system is being encrypted using a new encryption key e.g. is being rekeyed.

In one embodiment once the process of selecting one of the two or more data blocks within the file system of and decrypting the selected data block using the distinct encryption key assigned to the selected data block of SELECT A DATA BLOCK AND DECRYPT THE SELECTED DATA BLOCK USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THE SELECTED DATA BLOCK OPERATION and then re encrypting the selected data block using a new encryption key that is distinct from the previously assigned encryption key of RE ENCRYPT THE SELECTED DATA BLOCK USING THE NEW ENCRYPTION KEY OPERATION is repeated for each data block on a sequential cyclic and continually rotating basis such that at any given time only one data block of the two or more data blocks within the file system is being encrypted using a new encryption key e.g. is being rekeyed at REPEAT THE SELECTION DECRYPTION AND RE ENCRYPTION PROCESS FOR EACH DATA BLOCK OF THE TWO OF MORE DATA BLOCKS ON A CYCLIC AND ROTATING BASIS OPERATION process flow proceeds to EXIT OPERATION .

In one embodiment at EXIT OPERATION process for providing a rotating key encrypted file system is exited to await new data.

As a specific illustrative example of one embodiment of one implementation of process for providing a rotating key encrypted file system assume the file system of ACCESS A FILE SYSTEM CONTAINING FILE SYSTEM DATA OPERATION is implemented operated in a Linux operating system environment and more particularly is implemented as an Amazon Web Services AWS Elastic Compute Cloud EC2 file system.

In this specific illustrative example process for providing a rotating key encrypted file system is a kernel based system residing between the upper virtual file system layers and the low level block device driver to implement transparent encryption and decryption. However in other illustrative examples and embodiments process for providing a rotating key encrypted file system is independent of the file system type.

As noted in this specific illustrative example the file system is virtually divided into N data blocks at DESIGNATE TWO OR MORE DATA BLOCKS WITHIN THE FILE SYSTEM EACH OF THE TWO OR MORE DATA BLOCKS INCLUDING PART OF THE FILE SYSTEM DATA OPERATION with each data block containing one or more parts of the file system data.

As also noted above in this specific illustrative example at ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION and ENCRYPT EACH OF THE TWO OR MORE DATA BLOCKS USING THE UNIQUE ENCRYPTION KEY ASSIGNED TO THAT DATA BLOCK OPERATION N 1 encryption keys are used to protect the designated N data blocks with the 1 or previously unassigned encryption key being used to replace an aging old one of the N encryption keys assigned to a selected one of the N data blocks during a rekeying process of the selected one of the N data blocks.

In this specific illustrative example Linux CryptoAPI is used to encrypt and or decrypt each of the N data blocks. In one embodiment each of the assigned N encryption keys of ASSIGN A UNIQUE ENCRYPTION KEY TO EACH DATA BLOCK OF THE TWO OR MORE DATA BLOCKS OPERATION is used to protect continuous parts in the data blocks.

In one embodiment the N data blocks are re keyed e.g. the data blocks are decrypted and then re encrypted on a cyclic and continually rotating basis at REPEAT THE SELECTION DECRYPTION AND RE ENCRYPTION PROCESS FOR EACH DATA BLOCK OF THE TWO OF MORE DATA BLOCKS ON A CYCLIC AND ROTATING BASIS OPERATION using an automatic rekeying daemon in one embodiment called Autorekee running in a low priority mode such that at any given time only one data block of the two or more data blocks within the file system is being encrypted using a new encryption key. To this end a part of a selected data block that is being re keyed will have two associated encryption keys the previously assigned or old aging encryption key and the new encryption key.

In this specific illustrated example it is required that the encryption keys not remain within the AWS. Consequently a REpresentational State Transfer REST service that will only respond to the AWS instance is provided. In this specific illustrative example during the EC2 boot time the process for providing a rotating key encrypted file system retrieves the encryption keys from the REST service. In this specific illustrative example the encryption keys are mapped to a given Elastic Block Store IDentifcation EBSID . In the specific illustrative example the REST service is also used to send out the new i.e. the 1 encryption key and retire the old aging i.e. previously assigned encryption key.

In one embodiment of this specific illustrative example process for providing a rotating key encrypted file system leverages the superblock to store metadata such as the total number of encryption keys i.e. the value of the number N 1 the total number of data blocks i.e. the value of the number N the name of the previously assigned i.e. aging or old encryption key and the new encryption key and or the last block number that was rekeyed.

In one embodiment of this specific illustrative example the metadata allows process for providing a rotating key encrypted file system to keep track of which data block is being protected by two encryption keys i.e. the old encryption key and the new encryption key and which data block can be accessed with which encryption key i.e. old or new.

In this specific illustrative example process for providing a rotating key encrypted file system leverages the page cache and bio infrastructure of the kernel to provide transparent encryption and decryption of the data using the encryption keys present in the kernel key management service.

In some cases the work queue interface is used to enable the coalescing of multiple bio requests to reduce the overhead of individual bio requests for file system blocks. In other embodiments similar implementations used by other encryption file systems such as dm crypt are accommodated.

In instances where the encrypted file system data must be maintained in a page cache encryption and decryption can be implemented to copy the data between the page cache and the user space buffer specified in the read write and or other system calls.

For the relatively rare situations where input output I O access is made to a part of a data block that is currently being rekeyed the I O call is held off until the rekeying process is finished on that part of the data block. When the rekeying process is completed the block can then be accessed with the new encryption key.

In this specific illustrative example a daemon called Autorekee runs continuously in the background of the AWS instance. The primary task of the Autorekee is to continuously rekey the data blocks with a new encryption key. In one embodiment the Autorekee daemon works through each of the N data blocks in a sequential and cyclic manner.

A specific illustrative example of one algorithm used to generate the Autorekee daemon is represented by the following pseudo code 

In the Autorekee daemon pseudo code presented above lines 1 through 3 are initialization statements with line 3 retrieving the data block being rekeyed.

In the Autorekee daemon pseudo code presented above line 5 performs the actual rekey which involves decrypting the data block with the aging or previously assigned encryption key and re encrypting the data block with the new encryption key.

In the Autorekee daemon pseudo code presented above lines 7 to 10 contain the logic for when a new part within a data block or a data block is reached. As seen in lines 8 to 10 if the current data block is the beginning of a new section the current aging or previously assigned encryption key and the new encryption key are associated with the next key pair.

The Autorekee daemon pseudo code presented above also handles cases where the Autorekee crashes and needs to resume. The progress of the Autorekee s location is continuously tracked as metadata in the superblocks. When the last part of the last data block is reached Autorekee begins the rekeying process again at the first data block.

In this specific illustrative example process for providing a rotating key encrypted file system utilizes keyed hashes to enforce file integrity. In one embodiment the hash list for a file consists of a separate message authentication code computed for every data block used by that file s contents. In one embodiment this code is verified on every read and updated on every write operation on the corresponding data block. In one embodiment the top hash computed over the hash list itself must be verified or updated for every read or write call.

As noted above the specific illustrative example discussed above is but one illustrative example of one implementation of one embodiment of the process for providing a rotating key encrypted file system. Those of skill in the art will readily recognize that other implementations and embodiments are possible. Therefore the discussion above should not be construed as a limitation on the claims provided below.

In the discussion above certain aspects of one embodiment include process steps and or operations and or instructions described herein for illustrative purposes in a particular order and or grouping. However the particular order and or grouping shown and discussed herein are illustrative only and not limiting. Those of skill in the art will recognize that other orders and or grouping of the process steps and or operations and or instructions are possible and in some embodiments one or more of the process steps and or operations and or instructions discussed above can be combined and or deleted. In addition portions of one or more of the process steps and or operations and or instructions can be re grouped as portions of one or more other of the process steps and or operations and or instructions discussed herein. Consequently the particular order and or grouping of the process steps and or operations and or instructions discussed herein do not limit the scope of the invention as claimed below.

Using the process for providing a rotating key encrypted file system discussed herein the risk of file system data being compromised is significantly reduced by having the encryption keys continuously rotated throughout the file system. Consequently the Time To Live TTL for each encryption key is extremely short. As a result even if the encryption key were compromised the attacker would only have a very short window to gain access to one section i.e. one data block of the file system.

In addition using process for providing a rotating key encrypted file system discussed herein performance and data accessibility are negligibly affected with only minor overhead being added. Consequently using process for providing a rotating key encrypted file system discussed herein encryption keys can be changed more frequently without the entirety of the encrypted data being inaccessible for any significant period of time and without interrupting live traffic or consuming significant amounts of processor power and other resources.

As discussed in more detail above using the above embodiments with little or no modification and or input there is considerable flexibility adaptability and opportunity for customization to meet the specific needs of various parties under numerous circumstances.

The present invention has been described in particular detail with respect to specific possible embodiments. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. For example the nomenclature used for components capitalization of component designations and terms the attributes data structures or any other programming or structural aspect is not significant mandatory or limiting and the mechanisms that implement the invention or its features can have various different names formats or protocols. Further the system or functionality of the invention may be implemented via various combinations of software and hardware as described or entirely in hardware elements. Also particular divisions of functionality between the various components described herein are merely exemplary and not mandatory or significant. Consequently functions performed by a single component may in other embodiments be performed by multiple components and functions performed by multiple components may in other embodiments be performed by a single component.

Some portions of the above description present the features of the present invention in terms of algorithms and symbolic representations of operations or algorithm like representations of operations on information data. These algorithmic or algorithm like descriptions and representations are the means used by those of skill in the art to most effectively and efficiently convey the substance of their work to others of skill in the art. These operations while described functionally or logically are understood to be implemented by computer programs or computing systems. Furthermore it has also proven convenient at times to refer to these arrangements of operations as steps or modules or by functional names without loss of generality.

Unless specifically stated otherwise as would be apparent from the above discussion it is appreciated that throughout the above description discussions utilizing terms such as but not limited to activating accessing adding aggregating alerting applying analyzing associating calculating capturing categorizing classifying comparing creating defining detecting determining distributing eliminating encrypting extracting filtering forwarding generating identifying implementing informing monitoring obtaining posting processing providing receiving requesting saving sending storing substituting transferring transforming transmitting using etc. refer to the action and process of a computing system or similar electronic device that manipulates and operates on data represented as physical electronic quantities within the computing system memories resisters caches or other information storage transmission or display devices.

The present invention also relates to an apparatus or system for performing the operations described herein. This apparatus or system may be specifically constructed for the required purposes or the apparatus or system can comprise a general purpose system selectively activated or configured reconfigured by a computer program stored on a computer program product as discussed herein that can be accessed by a computing system or other device.

Those of skill in the art will readily recognize that the algorithms and operations presented herein are not inherently related to any particular computing system computer architecture computer or industry standard or any other specific apparatus. Various general purpose systems may also be used with programs in accordance with the teaching herein or it may prove more convenient efficient to construct more specialized apparatuses to perform the required operations described herein. The required structure for a variety of these systems will be apparent to those of skill in the art along with equivalent variations. In addition the present invention is not described with reference to any particular programming language and it is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references to a specific language or languages are provided for illustrative purposes only and for enablement of the contemplated best mode of the invention at the time of filing.

The present invention is well suited to a wide variety of computer network systems operating over numerous topologies. Within this field the configuration and management of large networks comprise storage devices and computers that are communicatively coupled to similar or dissimilar computers and storage devices over a private network a LAN a WAN a private network or a public network such as the Internet.

It should also be noted that the language used in the specification has been principally selected for readability clarity and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the claims below.

In addition the operations shown in the FIG.s or as discussed herein are identified using a particular nomenclature for ease of description and understanding but other nomenclature is often used in the art to identify equivalent operations.

Therefore numerous variations whether explicitly provided for by the specification or implied by the specification or not may be implemented by one of skill in the art in view of this disclosure.

