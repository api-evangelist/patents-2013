---

title: Method and apparatus for supporting multi-modal dialog applications
abstract: An embodiment of the present invention includes a method for creating a dialog system that provides a framework for creating a multi-modal dialog application and includes a runtime application package (RAP) enabling runtime media grammars, prompts, classifiers, and so forth, to be separate from a multi-modal dialog application that utilizes the RAP. Embodiments disclosed herein enable newly trained runtime media supporting the multi-modal dialog application to be deployed with ease, and to do so while a dialog service is in operation. Embodiments disclosed herein enable the multi-modal dialog application to be created, deployed, and maintained in an easy and flexible manner, saving an end-user that may be providing the multi-modal dialog application to customers both time and cost.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075619&OS=09075619&RS=09075619
owner: Nuance Corporation, Inc.
number: 09075619
owner_city: Burlington
owner_country: US
publication_date: 20130115
---
A Web application may include HyperText Markup Language HTML pages JavaServer Pages JSPs servlets resources source files etc. A Web archive WAR file is a packaged Web application that may be used to deploy a Web application into a Web server.

A method corresponding system apparatus and non transient computer readable medium employed in conjunction with a dialog system are disclosed herein. An example embodiment includes a method for creating a dialog system that may comprise providing a framework for creating a multi modal dialog application configurable to perform pipeline operations on dialog during a runtime mode in a server. The example embodiment may comprise including runtime media contained within a Runtime Application Package RAP and files of properties associated with the runtime media in the framework. The properties may include runtime and non runtime properties for the runtime media. The RAP may support the multi modal dialog application created. The example embodiment may further comprise enabling customization of the RAP in the server accessible by a client via a computer network by enabling modification of the runtime media and the runtime and non runtime properties of the runtime media via the computer network. The example embodiment may still further comprise enabling activation of the RAP customized to specialize support of the multi modal dialog application created.

The properties may include tiers of properties. For example a first set of properties may configure a web service. A second set of properties may override the first set optionally in part as well as act as the default to influence runtime behavior and ancillary non runtime services. Properties contained within the RAP may override the tiers affecting both runtime and off line ancillary service behavior.

The runtime properties may effect pipeline operations related to processing user input and providing a response to the user input and the multi modal dialog application created may be a frequently asked questions FAQ multi modal dialog application.

According to one aspect runtime properties may target the framework itself. For example runtime properties may control the suspension and resumption of client sessions such as an FAQ session.

The runtime properties may include properties that effect a behavior of the framework surrounding the pipeline operations.

The non runtime properties may include properties related to inventory management classifier training and other ancillary services.

The runtime media may include grammars prompts and classifiers configured to support the multi modal dialog application created.

The runtime media may include a re write rules file filter grammar disambiguation grammar stop words and training files. A re write rules file may define abbreviations acronyms synonyms and other short cuts that might be used in a dialog exchange. Filter grammar may detect out of vocabulary text that a FAQ classifier may not be able to handle. Disambiguation grammar may extend grammars to parse customer responses to disambiguation prompts. A stop words file may define extraneous words that appear in customer queries. Training files may contain anticipated questions and answers for the dialog application.

Enabling activation of the RAP customized may include enabling deploying the RAP customized to the server and controlling via the non runtime properties whether or not the RAP customized is put into service concurrent with its deployment.

A mechanism to upload and deploy a RAP may employ a representational state transfer REST compliant protocol e.g. RESTful protocol to the ancillary services. For example an update service may be provided on the server that may be configured to support a RESTful protocol. The update service may be configured to add or remove RAPs from the inventory and promote a specified RAP into service based on requests communicated via the RESTful protocol. By promoting the specified RAP into service the update service may effectively take a then active RAP out of service.

Deploying the RAP customized may include uploading the RAP customized to the server wherein uploading does not affect operation of the multi modal dialog application created if the multi modal application created is in service.

Enabling customization of the RAP may include enabling an update to or an overwrite of the runtime media and the files of properties while the RAP and the multi modal dialog application created are in service.

The example embodiment may further comprise enabling an activated RAP to be later reverted via the non runtime properties to another version of the RAP while the multi modal dialog application created is in service.

Activating the RAP customized may include enabling the RAP customized to be put into service temporarily without affecting a behavior of an in service multi modal application.

Enabling customization of the RAP may include enabling copying pasting editing and saving the RAP as a new version of the RAP.

The example embodiment may further comprise enabling utilization of the RAP customized by multiple service instances of the multi modal dialog application created wherein the multi modal dialog application is a web service application on the server.

The example embodiment may further comprise deploying the RAP customized on one or more web servers connected by a network topology. The one or more web servers may be Tomcat web servers.

Another example embodiment may include a non transient computer readable medium having stored thereon a sequence of instructions which when loaded and executed by a processor causes the processor to complete methods disclosed herein.

It should be understood that embodiments of the invention can be implemented in the form of a method apparatus system or computer readable medium with program codes embodied thereon.

Embodiments disclosed herein separate and deploy media to support applications such as a multi modal dialog application in a manner that maximizes ease of use for creating deploying and maintaining the multi modal dialog application. A client such as an original equipment manufacturer OEM may provide the multi modal dialog application to customers interacting with the multi modal dialog application. Over time the client may need to update and maintain the multi modal dialog application based on observed performance of the interactions of customers with the multi modal dialog application.

Media such as applications runtime media including grammars prompts classifiers and so forth have historically been treated as distinct resources with limited effort invested in making the maintenance update or deployment of these easy on the client. Enterprise solutions have traditionally been hard for clients to deploy and maintain. Traditionally neither the product nor the sample application leveraging the product work out of the box causing clients to invest time and money to climb steep learning curves in order to provide applications to customers.

Embodiments disclosed herein may utilize Web technologies enabling a multi modal application to be delivered as a generic language locale specialized Web Archive WAR which includes a default runtime application package RAP for the multi modal application effectively creating a sample application e.g. bootstrap media . As a WAR is first deployed to a Web server the bootstrap media may be installed into service taking on a service identity from whichever name is specified at the time the WAR is deployed. In this manner a multi modal application may be ready to be run out of the box with an identity chosen by the client. A framework including a Web server and other ancillary tools may be installed by a client. The client may deploy an application WAR to the Web Server through traditional e.g. familiar Web procedures. The client is immediately able to use the dialog system which utilizes an expanded version of the sample application on startup.

Embodiments disclosed herein relate to packaging runtime media separate from an advanced natural language understanding NLU application that uses it and a framework for enabling same. A package including the runtime media is called a runtime application package RAP . The RAP may include prompt bundles grammars classifiers unstructured information management architecture UIMA descriptors etc. A RAP may include runtime and training parameter settings and overrides. Embodiments disclosed herein enable training of the media that supports a multi modal dialog application with the deployment of the media into service while the service is in operation.

A client may customize a RAP by adapting the RAP over time based on performance trends of interactions observed for a customer base using the multi modal application. For example if the multi modal application is a frequently asked questions FAQ application the types of questions being asked by customers over time may change and updates to the RAP may improve accuracy for responses provided to the questions. By providing a RAP creating specializing deploying and maintaining a multi modal application may be performed with ease. The RAP enables a client to think about and customize the multi modal application in its entirety as the client may understand each of the components in a single context the context of the RAP.

In the example embodiment of the dialog system includes a multi modal dialog application such as an FAQ application that runs on the server . The server may be a web server such as a Tomcat web server or any other suitable server. It should be understood that the multi modal dialog application may be any suitable multi modal dialog application and is not restricted to an FAQ type application included in the example embodiment. In the example embodiment a server may respond to input from a customer . A client application may pass the input to the server and may pass a response from the server back to the customer.

An FAQ application is an NLU application that may classify questions and other information from a customer into one of many categories and effect a response to be provided to the customer . The response may include an answer to the customer s question or may include a prompt for more information from the customer . For example if a meaning of the customer s input e.g. a question provided by the customer via text or speech is not clear the FAQ application may prompt the customer for more information in order to narrow the scope of possible responses.

Thus a customer s interaction with the FAQ application may include a series of questions and responses interrupted by an occasional prompt to help find the best response in a list of answers maintained within the FAQ application . The client not shown may provide the FAQ application to users e.g. customers of the client such as the customer . The FAQ application may accept questions and provide answers relating to products services subscriptions features versions procedures etc. According to embodiments disclosed herein the client may be enabled to create and maintain a multi modal dialog application such as the FAQ application with ease.

The client s FAQ application may be used to provide answers about the client s products services subscriptions features versions procedures etc. to customers. The RAP may include a listing of questions that need to be asked and a mapping between the questions in the list and responses to the questions. For example text or speech input by the customer may be mapped by a classifier in the RAP by translating to a set of known questions that are mapped to most likely answers. Thus one or more files may control the dialog.

The classifier may be configured to perform semantic classification to enable an understanding of the meaning and purpose of a customer s question and to return an appropriate answer. In the FAQ application dialog may include a series of questions and responses interrupted by an occasional prompt to help find the best response in a list of ambiguous answers. For example if the meaning of the customer s input is not clear the FAQ application may prompt the customer for more information to narrow the scope of possible responses. Over time the classifier may be trained by the client by using domain specific data to improve response accuracy.

The RAP may be expanded to interpret a response providing disambiguating dialog code. For example the RAP may include content to enable a disambiguation step in a dialog. The RAP may include what is needed in order to implement the FAQ application . The RAP may be customized to enable the dialog system to be implemented according to the client s preferences and to adapt an existing dialog system by deploying a RAP that may be identified based on components included in the RAP as being a new RAP.

The FAQ application may initially be based on information that may be available through company websites catalogs brochures marketing materials and technical documentation etc. Over time it may be determined that the performance of the FAQ application would be improved by updating the FAQ application . For example the performance of the FAQ application may be improved by adding new information when a tuning analysis reveals unexpected questions also referred to herein as queries from customers interacting with the FAQ application .

For example the customer may interact with the FAQ application by providing a question to a customer device e.g. smart phone that submits the question via a client s application to the server where the FAQ application is deployed. The server may be a web server and the FAQ application may be run as a web service on the web server. The web service may include the RAP that is deployed on the server . The RAP may support the FAQ application . The RAP may bundle together all of the components such as runtime media needed for the client to tailor and configure the FAQ application .

Embodiments of methods disclosed herein may enable the dialog system to be specialized by the RAP that is configured to support the multi modal dialog application such as the FAQ application on the server . For example the RAP may support a multi modal dialog application such as the FAQ application on the server . The FAQ application may utilize the RAP thereby enabling the dialog exchange with the customer in the dialog system . The client may be enabled to create and maintain the dialog system with a core set of files or runtime media that are included in the RAP . The runtime media may include a classifier database of previously trained questions and answers for the FAQ application and as well as other customization files. The FAQ application may use semantic classification to understand the meaning an purpose of a customer s speech or text and to return appropriate answers. Over time a classifier may be trained with domain specific data for greater accuracy.

The runtime media may include other components such as a re write rules file filter grammar disambiguation grammar stop words and training files not shown . A re write rules file may define abbreviations acronyms synonyms and other short cuts that might be used in a dialog exchange. Filter grammar may detect out of vocabulary text that a FAQ classifier may not be able to handle. Disambiguation grammar may extend grammars to parse customer responses to disambiguation prompts. A stop words file may define extraneous words that appear in customer queries. Training files may include anticipated questions and answers for the multi modal dialog application.

Referring back to the RAP includes multiple components such as those included in the runtime media that may be integrated together as one package. The client may edit the RAP in a clear and consistent manner using a skeleton RAP that may be provided as a starting point. The application processing may be controlled via parameters included in the RAP. Application processing may be based on editable properties of the RAP. According embodiments disclosed herein the multi modal application may be easily created and deployed by the client by providing the client with a validated installation including a multi modal application e.g. NLU pipeline servlets etc. and a sample RAP that may be used as the skeleton in which the client s customized application may be created.

The sample RAP provided may support a few simple questions for a FAQ application. A multi modal dialog application may interpret the RAP to implement dialog specific to the multi modal dialog application. Multiple sample RAPs may be provided to support the few simple questions in multiple languages. The sample RAP may be bundled with the multi modal dialog application representing a generic usable example of the multi modal dialog application.

A WAR may be deployed to a web service and expanded enabling the sample application to be automatically put into service. The client may be enabled to override the sample application with the client s tailored RAP. The sample RAPs provided may serve as templates for developing a multi modal dialog application such as the FAQ application for each of the multiple languages. For example for an FAQ application the client may edit a list of questions included in the runtime media . The client may edit the runtime media of the RAP in a prescribed manner. A client may edit a prompt file that may be implemented in Extensible Markup Language XML or in any other suitable manner.

According to embodiments of methods disclosed herein the client simply pulls the sample RAP from a server such as the server or any other server edits a set of one or more core files included in the RAP s runtime media to customize the application and generates a new RAP that may be pushed into service on the server . A framework including the RAP may enable creation customization and deployment of the multi modal application such as the FAQ application to be performed easily by the client on premises. According to one embodiment a WAR may include a sample multi modal application such as an FAQ application. The WAR may enable client to get the application up and running. When deployed the web service may load a specific application in the form of the RAP. The default RAP may be the sample application included. A client may replace the sample application with a customized RAP.

The computer network may be any suitable computer network and may be wired or wireless. The client device may be configured to support an application development system for a client not shown and to perform runtime operations on a multi modal dialog application provided by the client to customers not shown that interact with multi modal dialog application on the server . The client device may communicate with the server using Hypertext Transfer Protocol HTTP or any other suitable protocol.

Web server operations may run on the server and may include operations such as deploying a web service as well as starting stopping resuming and reloading web services. Web server operations may include providing status regarding the web services running on the server . Ancillary services e.g. servlets running on the server may handle the upload download deletion putting into service and training of a RAP as well as aggregating and fetching logs event logs and trace logs reports etc.

The server may include an inventory . The inventory may include a sample RAP and a set of one or more RAPs and one or several of which may be active at a time. The web server operations and ancillary services may support protocols that accept HTTP requests from a web browser not shown on the client device . HTTP or another suitable protocol may be used by the web browser on the client to get or put RAPs on the server . The workflow for a client s multi modal application development may include downloading a RAP from the inventory and creating a new application by updating the runtime media and generating a new RAP that may be deployed on the server

The client may download e.g. get upload e.g. put and deploy a RAP into service using HTTP methods such as GET PUT and POST from a web browser not shown or any other suitable protocol or methods. The inventory may include a production RAP e.g. current release a completed RAP undergoing tests e.g. targeted for use in a next release and an in development RAP e.g. targeted for use in a future release . Embodiments disclosed herein enabled the client to revert and switch among all RAPs in the inventory.

A WAR may include a sample application such as an FAQ. The WAR may be enough to get the application up and running. The RAP may include all of the components necessary to tailor and configure the application wrapped up in a bundle. The client may train the application by creating training files from a knowledge base. For example a knowledge base may include information from company websites catalogs marketing materials etc. Embodiments disclosed herein enable new information to be added easily by the client when a tuning analysis reveals unexpected text entered by customers. Embodiments disclosed herein may bundle the training files with an existing application RAP deploying training media to a server. According to one embodiment the RAP may be a Java Archive file with a well defined structure. The RAP may be versioned to gauge compatibility with the multi modal application supported by the RAP. By leveraging a ubiquitous and well recognized format such as a Java Archive file format the RAP may be assembled by the client via common Java software development kit SDK tools. On premises the client may be enabled to build an application easily. The user may update the application by editing a prompt properties file edit or add filter or disambiguation grammars edit a runtime properties file re package the RAP and deploy the new RAP. According to another embodiment the RAP may be signed enabling corrupted components of the RAP to be identified before any attempt is made to deploy the RAP.

The client device may attach to a log file not shown on the server via any suitable protocol. A web service application not shown on the server may include multiple service instances not shown . The web service application may be implemented in any suitable manner such as via Tomcat web server instances that may enable an application to run on one or more web servers that may each instantiate one or more service instances. After training a single RAP the RAP may be deployed to each service instance and may be replicated by the client on multiple web servers throughout a network topology.

The inventory may support multiple different variations and enable the client to revert and synchronously activate new RAPs by coordinating changes of multiple different files. For example the files may be encapsulated as a single RAP enabling an update to happen for all files synchronously at the same time. The time may be a predetermined time that is scheduled. Embodiments disclosed herein may enable control of the activation of simultaneous changes such as different questions in an FAQ application. An inventory label may be assigned to the RAP enabling specific versions of the various RAP components to be packaged together and deployed into service synchronously. The client may push the RAP to an ancillary service that maintains the inventory of the RAP. A global identifier may be assigned that enabling the client to provide a label so that the RAP may be retrieved and uploaded. The client may query the ancillary service for inventory to determine which RAP is in service.

Embodiments disclosed herein enable the client to create delete tag inventory revert and protect or lock the RAP. Clients may train new RAPs and validate a RAP by replicating the application supported by the RAP. For example an in service RAP may be replicated and a client may need to gauge various RAP responses to FAQs. The replicated RAP may be put into service temporarily to gauge the responses. For test purposes a service instance may be decoupled from the active client running on the client s device . A client may upload a new RAP and run tests or sanity checks to validate the new RAP before coupling the new RAP to the active client running on the client s device .

Embodiments disclosed herein may enable a client to validate operation of a deployed RAP by sending queries to the deployed RAP without affecting the operation of the currently active RAP. The client may train the classifier by reconstructing the RAP with a new classifier that more closely matches the behavior desired. A set of configurable application properties may be provided that are cohesive and tie together the runtime media grammars prompts and classifiers . The properties may enable runtime characteristics behavior and non runtime auxiliary functions such as training to be easily configured by a client. The runtime and non runtime properties may both define the application and enable a client to utilize an updated version of the same. A new RAP may be created by a client by editing properties of the RAP. The level to which the RAP is updated and deployed is controlled by the client. For example one client may select RAP refreshes every two hours while another client may select a refresh every two months.

Embodiments disclosed herein may enable one or several multi modal dialog applications to make use of a common framework that may include a Web server. In this manner one or several applications or several instances of an application may be deployed in a consistent manner. Since an application may intern itself with a name specified at a time of deployment more than one application instance may easily be supported on the same Web Server framework instance enabling validation testing with limited physical resources. A client tailors or customizes an application provided the customization may be based on specifics of the client s use. For example a customer may tailor the prompts grammars etc. by overriding the media of the sample RAP provided with the application and available for download from a RESTful ancillary service of the application or generating a RAP anew. The new RAP may be uploaded and deployed into service with the application.

Embodiments disclosed herein enable the update of runtime media while the service is in operation. Subsequent hot updates may be performed in a manner identical to the procedure for customizing the sample application to begin with enabling ease of use through familiar simple repeated procedures. The output of the ancillary training service is a RAP ready for use by the client. According to one aspect if the only update to an existing RAP is the classifier the ancillary training service may handle the update automatically. For example a new RAP may be automatically generated that includes the new classifier bundled with elements of the existing RAP.

Embodiments disclosed herein include an inventory method that enables the upload and delayed deployment of new media. Rollback to known good RAPS is supported. According to one embodiment an inventory method may be offered at a more macro level wherein all Web servers belonging to a cluster may access the RAP. The RAP may be deployed to a distributed and dynamic application topology. Embodiments disclosed herein may enable multiple Web Servers in a cluster on a processing host to share a RAP facilitating complex processing topologies that include fault tolerance. Furthermore WARs can be deployed on multiple instances of the underlying framework which have been assigned to distinct CPU or cores to optimize performance.

By including runtime media within a package a client may be enabled to easily and automatically rollback a RAP if an issue is detected in an attempt to deploy a new package. Similarly a client may quickly rollback the RAP to an already uploaded and correct package. Testing and validation may be accomplished by simply deploying a same application WAR with a different identity specialized with an alternate RAP.

A RAP may include runtime properties that may include overrides for both the supporting framework as well as the actual application. By including the properties within the RAP the properties may be catalogued along with the other media that was current while in service enabling a highly accurate off line reproduction of in field performance.

According to one embodiment several RESTful ancillary services may be included in the framework. Ancillary services may include an update service to upload download deploy list and delete RAPs and a training service that may take as input a RAP along with additional data files and produces as output a new RAP. The newly generated RAP is immediately ready for use and can be retrieved from the service and later deployed into service with which ever host a client selects. Training and subsequent hot updates require only four REST operations that are consistent with one another.

Embodiments disclosed herein simplify testing accurate off line after the fact reproduction of in field performance and achieve application verification that resembles a push to service process. Embodiments disclosed herein facilitate configuration of local load balanced clusters and distributed topologies provide support for runtime parameter changes and enable tracking to the changes enable rollback to previous application configurations and achieve process and core affinity support for optimal performance.

Example embodiments of the present invention may be configured using a computer program product for example controls may be programmed in software for implementing example embodiments of the present invention. Further example embodiments of the present invention may include a non transitory computer readable medium containing instructions that may be executed by a processor and when executed cause the processor to complete methods described herein. It should be understood that elements of the block and flow diagrams described herein may be implemented in software hardware firmware or other similar implementation determined in the future. In addition the elements of the block and flow diagrams described herein may be combined or divided in any manner in software hardware or firmware. If implemented in software the software may be written in any language that can support the example embodiments disclosed herein. The software may be stored in any form of computer readable medium such as random access memory RAM read only memory ROM compact disk read only memory CD ROM and so forth. In operation a general purpose or application specific processor loads and executes software in a manner well understood in the art. It should be understood further that the block and flow diagrams may include more or fewer elements be arranged or oriented differently or be represented differently. It should be understood that implementation may dictate the block flow and or network diagrams and the number of block and flow diagrams illustrating the execution of embodiments of the invention.

While this invention has been particularly shown and described with references to example embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.

