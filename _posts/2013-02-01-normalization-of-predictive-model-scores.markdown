---

title: Normalization of predictive model scores
abstract: Methods, systems, and apparatus, including computer programs encoded on computer storage media, for score normalization. One of the methods includes receiving initial training data, the initial training data comprising initial training records, each initial training record identifying input data as input and a category as output. The method includes generating a first trained predictive model using the initial training data and a training function. The method includes generating intermediate training records by inputting input data of the initial training records to a second trained predictive model, the second trained predictive model generated using the training function, each intermediate training record having a score. The method also includes generating a score normalization model using a score normalization training function and the intermediate training records.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09406019&OS=09406019&RS=09406019
owner: Google Inc.
number: 09406019
owner_city: Mountain View
owner_country: US
publication_date: 20130201
---
This application is a continuation of U.S. application Ser. No. 13 248 474 filed on Sep. 29 2011 entitled SCORE NORMALIZATION. 

Predictive analytics generally refers to techniques for extracting information from data to build a model that can predict an output from a given input. Predicting an output can include predicting future trends or behavior patterns or performing sentiment analysis to name a few examples. Various types of predictive models can be used to analyze data and generate predictive outputs. Typically a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output respectively.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving initial training data the initial training data comprising initial training records each initial training record identifying input data as input and a category as output. The methods also include the actions of generating a first trained predictive model using the initial training data and a training function. The methods also include the actions of generating intermediate training records by inputting input data of the initial training records to a second trained predictive model the second trained predictive model generated using the training function each intermediate training record having a score. The methods also include the actions of generating a score normalization model using a score normalization training function and the intermediate training records.

Other embodiments of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other embodiments can each optionally include one or more of the following features alone or in combination generating intermediate training records may include dividing the initial training records into sets of training records the sets of training records including a first set of training records generating the second trained predictive model using at least one of the sets of training records and generating an intermediate training record for each initial training record in the first set of training records each intermediate training record having a value as input and the category of a respective initial training record as output wherein the value is generated by inputting input data of the respective initial training record into the second trained predictive model. Generating the second trained predictive model may include generating the second trained predictive model using all of the plurality of sets of training records except the first set of training records. The methods may also include the actions of calculating a mean of the scores of the intermediate training records and for each intermediate training record reducing the score of the intermediate training record by the mean. The methods may also include the actions of determining a high end score for the scores of the intermediate training records identifying an intermediate training record having a score greater than the high end score and changing the score of the identified intermediate training record to be the high end score. The methods may also include the actions of determining a low end value for the scores of the intermediate training records identifying a second intermediate training record having a score less than the low end score and changing the score of the identifier second intermediate training record to be the low end score. The score normalization model may be configured to generate scores associated with predictive outputs wherein the scores are between zero and one inclusive. The methods may also include the actions of receiving a predictive request from a client device the predictive request including input data generating an intermediate output by inputting the input data to the first trained predictive model generating a predictive output by providing the intermediate output to the score normalization model and providing the predictive output to the client device. Each of the intermediate training records may include a value for each distinct category in the initial training data.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following benefits. Predictive models can be retained and replaced with new predictive models utilizing different training functions while maintain a consistent client experience. Predictive models can be replaced with better performing predictive models.

Generally predictive models accept one or more inputs and produce a corresponding output and a score. The predictive models are generated using a training function and a set of training data. Predictive models can be trained using a variety of different training functions. Different training functions can produce predictive models that generate different prediction scores for the same queries. For example changing the training function for a predictive model can result in sudden change in scores. For example a predictive model trained with one training function may produce scores between 0 and 50 while a predictive model trained with a different training function may produce scores between 100 and 1000.

To provide a consistent output to users of the predictive models a second predictive model can be used to normalize the scores. For example scores can be normalized to produce values between zero and one inclusive.

A client entity an individual or a group of people or a company for example may desire a trained predictive model that can receive input data from a client computing system belonging to or under the control of the client entity and generate a predictive output. To train a particular predictive model can require a significant volume of training data for example one or more gigabytes of data. The client computing system may be unable to efficiently manage such a large volume of data. Further selecting and tuning an effective predictive model from the variety of available types of models can require skill and expertise that an operator of the client computing system may not possess.

The system described here allows training data to be uploaded from the client computing system to the predictive modeling server system over the network . The training data can include initial training data which may be a relatively large volume of training data the client entity has accumulated for example if the client entity is a first time user of the system . The training data can also include new training data that can be uploaded from the client computing system as additional training data becomes available. The client computing system may upload new training data whenever the new training data becomes available on an ad hoc basis periodically in batches in a batch once a certain volume has accumulated or otherwise.

The server system front end can receive store and manage large volumes of data using the data center . One or more computers in the data center can run software that uses the training data to estimate the effectiveness of multiple types of predictive models and make a selection of a trained predictive model to be used for data received from the particular client computing system . The selected model can be trained and the trained model made available to users who have access to the predictive modeling server system and optionally permission from the client entity that provided the training data for the model. Access and permission can be controlled using any conventional techniques for user authorization and authentication and for access control if restricting access to the model is desired. The client computing system can transmit prediction requests over the network. The selected trained model executing in the data center receives the prediction request input data and request for a predictive output and generates the predictive output . The predictive output can be provided to the client computing system for example over the network .

Advantageously when handling large volumes of training data and or input data the processes can be scaled across multiple computers at the data center . The predictive modeling server system can automatically provision and allocate the required resources using one or more computers as required. An operator of the client computing system is not required to have any special skill or knowledge about predictive models. The training and selection of a predictive model can occur in the cloud i.e. over the network thereby lessening the burden on the client computing system s processor capabilities and data storage and also reducing the required client side human resources.

The term client computing system is used in this description to refer to one or more computers which may be at one or more physical locations that can access the predictive modeling server system. The data center is capable of handling large volumes of data e.g. on the scale of terabytes or larger and as such can serve multiple client computing systems. For illustrative purposes three client computing systems are shown however scores of client computing systems can be served by such a predictive modeling server system .

In the implementations shown the trained predictive model is not itself provided. The trained predictive model resides and executes at a location remote from the client computing system . For example referring back to the trained predictive model can reside and execute in the data center thereby not using the resources of the client computing system . Once the client computing system has access to the trained predictive model the client computing system can send input data and a prediction request to the trained predictive model Step . In response the client computing system receives a predictive output generated by the trained predictive model from the input data Step . In general the predictive output can include one or more categories and a corresponding score for each category. The scores being representative of confidence that the category is appropriate for the input data. As discussed below the scale of the score can vary depending on the training function used to generate the predictive model. For example one predictive model may produce scores from 100 to 100 while a different predictive model generates scores from 0 to 50.

From the perspective of the client computing system training and use of a predictive model is relatively simple. The training and selection of the predictive model tuning of the hyper parameters and features used by the model to be described below and execution of the trained predictive model to generate predictive outputs is all done remote from the client computing system without expending client computing system resources. The amount of training data provided can be relatively large e.g. gigabytes or more which is often an unwieldy volume of data for a client entity.

The predictive modeling server system will now be described in more detail with reference to the flowchart shown in . is a flowchart showing an example process for serving a client computing system using the predictive analytic platform. The process is carried out to provide access of a selected trained predictive model to the client computing system which trained predictive model has been trained using initial training data.

Referring to training data i.e. initial training data is received from the client computing system Step . For example the client computing system can upload the training data to the predictive modeling server system over the network either incrementally or in bulk i.e. as batch . As describe above if the initial training data is uploaded incrementally the training data can accumulate until a threshold volume is received before training of predictive models is initiated. The training data can be in any convenient form that is understood by the modeling server system to define a set of records where each record includes an input and a corresponding desired category. By way of example the training data can be provided using a comma separated value format or a sparse vector format. In another example the client computing system can specify a protocol buffer definition and upload training data that complies with the specified definition.

The process and system can be used in various different applications. Some examples include without limitation making predictions relating to customer sentiment transaction risk species identification message routing diagnostics churn prediction legal docket classification suspicious activity work roster assignment inappropriate content product recommendation political bias uplift marketing e mail filtering and career counseling. For illustrative purposes the process and system will be described using an example that is typical of how predictive analytics are often used. In this example the client computing system provides a web based online shopping service. The training data includes multiple records where each record provides the online shopping transaction history for a particular customer. The record for a customer includes the dates the customer made a purchase and identifies the item or items purchased on each date. The client computing system is interested in predicting a next purchase of a customer based on the customer s online shopping transaction history.

Various techniques can be used to upload a training request and the training data from the client computing system to the predictive modeling server system . In some implementations the training data is uploaded using an Hypertext Transfer Protocol HTTP web service. The client computing system can access storage objects using a RESTful API to upload and to store their training data on the predictive modeling server system . The predictive modeling server system can provide utility software that can be used by the client computing system to upload the data. In some implementations the predictive modeling server system can be made accessible from many platforms including platforms affiliated with the predictive modeling server system and platforms entirely independent of the predictive modeling server system e.g. a desktop application. The training data can be large e.g. many gigabytes. The predictive modeling server system can include a data store e.g. the training data repository operable to store the received training data.

The predictive modeling server system includes a repository of training functions for various predictive models which in the example shown are included in the training function repository . At least some of the training functions included in the repository can be used to train an updateable predictive model. An updateable predictive model refers to a trained predictive model that was trained using a first set of training data e.g. initial training data and that can be used together with a new set of training data and a training function to generate a retrained predictive model. The retrained predictive model is effectively the initial trained predictive model updated with the new training data. One or more of the training functions included in the repository can be used to train static predictive models. A static predictive model refers to a predictive model that is trained with a batch of training data e.g. initial training data and is not updateable with incremental new training data. If new training data has become available a new static predictive model can be trained using the batch of new training data either alone or merged with an older set of training data e.g. the initial training data and an appropriate training function.

When new training data is received for an existing predictive model a new predictive models may be trained. The new predictive model may be trained using a different training function than was used to train the existing predictive model. Consequently the predictive output generated by the new predictive model may vary from the predictive output generated from the existing predictive model for example scores associated with a predictive output may be on a different scale.

Some examples of training functions that can be used to train a static predictive model include without limitation regression e.g. linear regression logistic regression classification and regression tree multivariate adaptive regression spline and other machine learning training functions e.g. Na ve Bayes k nearest neighbors Support Vector Machines Perceptron . Some examples of training functions that can be used to train an updateable predictive model include without limitation Online Bayes Rewritten Winnow Support Vector Machine SVM Analogue Maximum Entrophy MaxEnt Analogue Gradient based FOBOS and AdaBoost with Mixed Norm Regularization. The training function repository can include one or more of these example training functions.

Referring again to multiple predictive models which can be all or a subset of the available predictive models are trained using some or all of the training data Step . In the example predictive modeling server system a model training module is operable to train the multiple predictive models. The multiple predictive models include one or more updateable predictive models and can include one or more static predictive models.

The client computing system can send a training request to the predictive modeling server system to initiate the training of a model. For example a GET or a POST request could be used to make a training request to a Uniform Resource Locator URL . A training function is applied to the training data to generate a set of parameters. These parameters form the trained predictive model. For example to train or estimate a Na ve Bayes model the method of maximum likelihood can be used. A given type of predictive model can have more than one training function. For example if the type of predictive model is a linear regression model more than one different training function for a linear regression model can be used with the same training data to generate more than one trained predictive model.

For a given training function multiple different hyper parameter configurations can be applied to the training function again generating multiple different trained predictive models. Therefore in the present example where the type of predictive model is a linear regression model changes to an L penalty generate different sets of parameters. Additionally a predictive model can be trained with different features again generating different trained models. The selection of features i.e. feature induction can occur during multiple iterations of computing the training function over the training data. For example feature conjunction can be estimated in a forward stepwise fashion in a parallel distributed way enabled by the computing capacity of the predictive modeling server system i.e. the data center.

Considering the many different types of predictive models that are available and then that each type of predictive model may have multiple training functions and that multiple hyper parameter configurations and selected features may be used for each of the multiple training functions there are many different trained predictive models that can be generated. Depending on the nature of the input data to be used by the trained predictive model to predict a predictive output different trained predictive models perform differently. That is some can be more effective than others.

The effectiveness of each of the trained predictive models is estimated Step . For example a model selection module is operable to estimate the effectiveness of each trained predictive model. In some implementations cross validation is used to estimate the effectiveness of each trained predictive model. In a particular example a 10 fold cross validation technique is used. Cross validation is a technique where the training data is partitioned into sub samples. A number of the sub samples are used to train an untrained predictive model and a number of the sub samples usually one is used to test the trained predictive model. Multiple rounds of cross validation can be performed using different sub samples for the training sample and for the test sample. K fold cross validation refers to portioning the training data into K sub samples. One of the sub samples is retained as the test sample and the remaining K sub samples are used as the training sample. K rounds of cross validation are performed using a different one of the sub samples as the test sample for each round. The results from the K rounds can then be averaged or otherwise combined to produce a cross validation score. 10 fold cross validation is commonly used.

In some implementations the effectiveness of each trained predictive model is estimated by performing cross validation to generate a cross validation score that is indicative of the accuracy of the trained predictive model i.e. the number of exact matches of output data predicted by the trained model when compared to the output data included in the test sub sample. In other implementations one or more different metrics can be used to estimate the effectiveness of the trained model. For example cross validation results can be used to indicate whether the trained predictive model generated more false positive results than true positives and ignores any false negatives.

In other implementations techniques other than or in addition to cross validation can be used to estimate the effectiveness. In one example the resource usage costs for using the trained model can be estimated and can be used as a factor to estimate the effectiveness of the trained model.

In some implementations the predictive modeling server system operates independently from the client computing system and selects and provides the trained predictive model as a specialized service. The expenditure of both computing resources and human resources and expertise to select the untrained predictive models to include in the training function repository the training functions to use for the various types of available predictive models the hyper parameter configurations to apply to the training functions and the feature inductors all occurs server side. Once these selections have been completed the training and model selection can occur in an automated fashion with little or no human intervention unless changes to the server system are desired. The client computing system thereby benefits from access to a trained predictive model that otherwise might not have been available to the client computing system due to limitations on client side resources.

Referring again to each trained model is assigned a score that represents the effectiveness of the trained model. As discussed above the criteria used to estimate effectiveness can vary. In the example implementation described the criterion is the accuracy of the trained model and is estimated using a cross validation score. Based on the scores a trained predictive model is selected Step . In some implementations the trained models are ranked based on the value of their respective scores and the top ranking trained model is chosen as the selected predictive model. Although the selected predictive model was trained during the evaluation stage described above training at that stage may have involved only a sample of the training data or not all of the training data at one time. For example if k fold cross validation was used to estimate the effectiveness of the trained model then the model was not trained with all of the training data at one time but rather only K partitions of the training data. Accordingly if necessary the selected predictive model is fully trained using the training data e.g. all K partitions Step for example by the model training module . A trained model i.e. fully trained model is thereby generated for use in generating predictive output e.g. trained predictive model . The trained predictive model can be stored by the predictive modeling server system . That is the trained predictive model can reside and execute in a data center that is remote from the client computing system .

As discussed above when a predictive model is retrained a new predictive model may be generated using a different training function. As a result scores associated with predictive outputs generated by the new predictive model may be of a different scale that the scores generated by the previous predictive model. A score normalization model can be trained to normalize scores provided by the trained predictive model . The score normalization model is generated using the training data and predictive models trained using the training function of the trained predictive model as described below.

Of the multiple trained predictive models that were trained as described above some or all of them can be stored in the predictive model repository . Each trained predictive model can be associated with its respective effectiveness score. One or more of the trained predictive models in the repository are updateable predictive models. In some implementations the predictive models stored in the repository are trained using the entire initial training data i.e. all K partitions and not just K partitions. In other implementations the trained predictive models that were generated in the evaluation phase using K partitions are stored in the repository so as to avoid expending additional resources to re compute the trained predictive models using all K partitions.

Access to the trained predictive model is provided Step rather than the trained predictive model itself. In some implementations providing access to the trained predictive model includes providing an address to the client computing system or other user computing platform that can be used to access the trained model for example the address can be a URL Universal Resource Locator . Access to the trained predictive model can be limited to authorized users. For example a user may be required to enter a user name and password that has been associated with an authorized user before the user can access the trained predictive model from a computing system including the client computing system . If the client computing system desires to access the trained predictive model to receive a predictive output the client computing system can transmit to the URL a request that includes the input data. The predictive modeling server system receives the input data and prediction request from the client computing system Step .

In response the input data is input to the trained predictive model and a predictive output generated by the trained model Step . The predictive output can include a score. In some implementations the score of the predictive output can be provided to score normalization model . The score normalization model can provide an updated score within a predetermined range for example between zero and one inclusive. The predictive output is provided it can be provided to the client computing system Step .

In some implementations where the client computing system is provided with a URL to access the trained predictive model input data and a request to the URL can be embedded in a Hypertext Markup Language HTML document e.g. a webpage. In one example JavaScript can be used to include the request to the URL in the HTML document. Referring again to the illustrative example above when a customer is browsing on the client computing system s web based online shopping service a call to the URL can be embedded in a webpage that is provided to the customer. The input data can be the particular customer s online shopping transaction history. Code included in the webpage can retrieve the input data for the customer which input data can be packaged into a request that is sent in a request to the URL for a predictive output. In response to the request the input data is input to the trained predictive model and a predictive output is generated. The predictive output is provided directly to the customer s computer or can be returned to the client computer system which can then forward the output to the customer s computer. The client computing system can use and or present the predictive output result as desired by the client entity. In this particular example the predictive output is a prediction of the type of product the customer is most likely to be interested in purchasing. If the predictive output is blender then by way of example an HTML document executing on the customer s computer may include code that in response to receiving the predictive output cause to display on the customer s computer one or more images and or descriptions of blenders available for sale on the client computing system s online shopping service. This integration is simple for the client computing system because the interaction with the predictive modeling server system can use a standard HTTP protocol e.g. GET or POST can be used to make a request to a URL that returns a JSON JavaScript Object Notation encoded output. The input data also can be provided in JSON format.

The customer using the customer computer can be unaware of these operations which occur in the background without necessarily requiring any interaction from the customer. Advantageously the request to the trained predictive model can seamlessly be incorporated into the client computer system s web based application in this example an online shopping service. A predictive output can be generated for and received at the client computing system which in this example includes the customer s computer without expending client computing system resources to generate the output.

In other implementations the client computing system can use code provided by the client computing system or otherwise that is configured to make a request to the predictive modeling server system to generate a predictive output using the trained predictive model . By way of example the code can be a command line program e.g. using cURL or a program written in a compiled language e.g. C C Java or an interpreted language e.g. Python . In some implementations the trained model can be made accessible to the client computing system or other computer platforms by an API through a hosted development and execution platform.

In the implementations described above the trained predictive model is hosted by the predictive modeling server system and can reside and execute on a computer at a location remote from the client computing system . However in some implementations once a predictive model has been selected and trained the client entity may desire to download the trained predictive model to the client computing system or elsewhere. The client entity may wish to generate and deliver predictive outputs on the client s own computing system or elsewhere. Accordingly in some implementations the trained predictive model is provided to a client computing system or elsewhere and can be used locally by the client entity.

Components of the client computing system and or the predictive modeling system e.g. the model training module model selection module and trained predictive model can be realized by instructions that upon execution cause one or more computers to carry out the operations described above. Such instructions can comprise for example interpreted instructions such as script instructions e.g. JavaScript or ECMAScript instructions or executable code or other instructions stored in a computer readable medium. The components of the client computing system and or the predictive modeling system can be implemented in multiple computers distributed over a network such as a server farm in one or more locations or can be implemented in a single computer device.

As discussed above the predictive modeling server system can be implemented in the cloud . In some implementations the predictive modeling server system provides a web based service. A web page at a URL provided by the predictive modeling server system can be accessed by the client computing system . An operator of the client computing system can follow instructions displayed on the web page to upload training data to the cloud i.e. to the predictive modeling server system . Once completed the operator can enter an input to initiate the training and selecting operations to be performed in the cloud i.e. by the predictive modeling server system or these operations can be automatically initiated in response to the training data having been uploaded.

The operator of the client computing system can access the one or more trained models that are available to the client computing system from the web page. For example if more than one set of training data e.g. relating to different types of input that correspond to different types of predictive output had been uploaded by the client computing system then more than one trained predictive model may be available to the particular client computing system. Representations of the available predictive models can be displayed for example by names listed in a drop down menu or by icons displayed on the web page although other representations can be used. The operator can select one of the available predictive models e.g. by clicking on the name or icon. In response a second web page e.g. a form can be displayed that prompts the operator to upload input data that can be used by the selected trained model to provide predictive output data in some implementations the form can be part of the first web page described above . For example an input field can be provided and the operator can enter the input data into the field. The operator may also be able to select and upload a file or files from the client computing system to the predictive modeling server system using the form where the file or files contain the input data. In response the selected predicted model can generate predictive output based on the input data provided and provide the predictive output to the client computing system either on the same web page or a different web page. The predictive output can be provided by displaying the output providing an output file or otherwise.

In some implementations the client computing system can grant permission to one or more other client computing systems to access one or more of the available trained predictive models of the client computing system. The web page used by the operator of the client computing system to access the one or more available trained predictive models can be used either directly or indirectly as a link to another web page by the operator to enter information identifying the one or more other client computing systems being granted access and possibly specifying limits on their accessibility. Conversely if the client computing system has been granted access by a third party i.e. an entity controlling a different client computing system to access one or more of the third party s trained models the operator of the client computing system can access the third party s trained models using the web page in the same manner as accessing the client computing system s own trained models e.g. by selecting from a drop down menu or clicking an icon .

Generated predictive outputs can include one or more categories and a corresponding score for each category. A score may be for example a measure of confidence that the category is an appropriate response for the predictive request. Predictive models using different training functions product different predictive models that provide a variety of different scores even when trained using the same training data. For example a predictive request provided to a predictive model generated using one training function may produce scores between 0 and 50. Another trained predictive model generated using a different training function may produce scores between 100 and 1000. Because a dynamic predictive modeling server system can retrain predictive models using different training functions client computing systems can suddenly receive score that are inconsistent with previously received predictive outputs.

A second trained predictive model called a score normalization model can be used to normalize the scores and deliver a consistent experience.

The training records are provided to a model training module . As discussed above the model training module generates a trained predictive model . The training records are inputted into the trained predictive model to generate output records . In some implementations as discussed below each training record is inputted into a trained predictive model that was trained using a subset of the training data that does not include the training record. Each of the output records includes one or more categories and a score for each category. For example training record provided to the trained predictive model generates output record . Output record identifies Blue Green and Red categories and provides a score for each 130 50 and 10 respectively. Similarly training records inputted to the trained predictive model results in output records respectively. In some implementations each of the output records includes each of the possible categories and a score that represents a measure of confidence that the category applies to the inputted training record.

The score preprocessing module generates score training records using the output records . The score training records include as input modified scores for each category in the output records and the category from the original input records .

The output records are processed by the score preprocessing module . The score preprocessing module analyzes the scores of the output records . In some implementations the score preprocessing module identifies outlying records. For example the score preprocessing module can determine a high score value and a low score value. The high score value can be defined such that five percent of the output records have scores that exceed the high score value. The low score value can be defined such that five percent of the output records have scores that are lower than the low score value. The high score value and the low score value can also be determined using other means. For example the high score value and the low score value may be determined to be one two or three standard deviations from the mean score. In some implementations output records with scores above the high score value or below the low score value can have their score changed to the high score value or low score value respectively. In other implementations output records with scores above the high score value or below the low score value are discarded. The high score value and low score value can be determined separately for scores associated with each category. In other implementations a separate single high score value and a single low score value is determined for each category.

In this example assuming the score preprocessing module identifies a low score value of 21 for the Blue category. The score associated with the Blue category of output record is changed from 30 to 21. Similarly assuming the score preprocessing module identifies a high score value of 150 for the scores associated with the Green category the score preprocessing module changes the score associated with the Green category of output record from 504 to 150.

The score preprocessing module can determine a mean value for the scores of the output records for each category. The score of each output record can be reduced by the corresponding mean. By reducing the scores by the mean value the scores of the output records are distributed around zero. In this example the score preprocessing module calculates a mean value of 95.4 for scores associated with the Blue category a mean value of 82.8 for scores associated with the Green category and a mean value of 62.4 for scores associated with the Red category.

The score preprocessing module subtracts the mean value for each category from the respective scores. As a result the scores corresponding to output record become 34.6 for Blue i.e. 130 95.4 32.8 for Green i.e. 50 62.4 and 52.4 for Red i.e. 10 62.4 . These scores are provided as input data to the score training record . The process is repeated for each of output records generating score training records 

The score preprocessing module can store the mean value high score value and low score value for each category in a data store not shown for later use. The mean values high score values and low score values are associated with the trained predictive model . Different trained predictive models have different mean values high score values and low score values.

In some implementations the score training record includes a numerical representation of the category of the original input record. For example the score preprocessing module may determine that Blue corresponds to 1 Green corresponds to 2 and Red corresponds to 3. 

The score training data is provided to the module training module . The model training module generates a score normalization model . In some implementations the model training module uses a logistic regression training function to train the score normalization model . The logistic regression training function maps the scores provided in the preprocessed output records to a score between zero and one inclusive.

The training records can be divided into multiple sets of training records. In this example the training records are divided into Training Set A Training Set B Training Set C Training Set D and Training Set E . In some implementations the training records are divided into five sets with each set comprising approximately twenty percent of the training records. In scenarios in which the training records cannot be evenly divided extra training records can be distributed among the training sets.

Some of the training sets are provided to the model training module . The model training module generates a trained predictive model using the provided training sets. In some implementations all of the training sets except one are used to generate the trained predictive model . For example eighty percent of the records may be used to generate the trained predictive model .

The remaining training set in this example Training Set E is inputted into the trained predictive model . The trained predictive model outputs training records .

In order to create a complete set of training records the process may be repeated so that all of the training sets are provided as input to a trained predictive model generated using the remaining training sets. For example training set A training set B training set C training set E can be used to generate a trained predictive model using the training function. Training set D can be provided to the trained predictive model to generate another set of output records etc.

The output records generated from each training set can be combined into a set of output records for use in training the model training module.

The trained predictive model receives the predictive request . The trained predictive model generates an output record based on the predictive request . As discussed above the output record includes categories and a score for each category.

In this example a score preprocessing module receives the output record . The score preprocessing module obtains the mean value the high score value and the low score value for each category from a data store not shown . If the score of the output record for any category exceeds the high score value for that category then the score preprocessing module changes the score of the output record to the high score value. If the score of the output record for any category is less than the low score value for that category then the score preprocessing module changes the score of the output record to the corresponding low score value. The score preprocessing module subtracts the mean value for each category from the score of the respective category.

The resulting preprocessed output record is inputted into the score normalization model . The score normalization model generates a normalized score output record . The normalized score about record can be provided to the client device.

The process receives initial training data . The initial training data includes initial training records that identify input data as input and a category as output.

The process generates a first trained predictive model. The trained predictive model can be generated using the initial training data and a training function. For example by the model training module of using the process described above with respect to .

The process generates intermediate training records. The intermediate records can be generated by inputting the input data of the initial training records to a second trained predictive model. The second trained predictive model can be generated using the same training function as the first trained predictive model. Each intermediate training record has a score associated with a category.

Intermediate training records can be generated by dividing the initial training records into sets of training records the sets of training records including a first set of training records. In some implementations the intermediate training records are divided into five sets of training records.

A trained predictive model can be trained using at least one of the sets of training records. In some implementations four sets of training records are used to generate the trained predictive model. The fifth set of training records can be inputted into the trained predictive model to generate intermediate training records. The process can be repeated until an intermediate training record is generated for each of the initial training records. In some implementations each intermediate training record can include a score for each distinct category identified by the initial training records.

The process generates a score normalization model. The score normalization model can be generated using a score normalization training function and the intermediate training records. In some implementations the score normalization model may be a trained predictive model generated using the intermediate training records and the process described above with respect to .

Various implementations of the systems and techniques described here may be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and may be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here may be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well for example feedback provided to the user may be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user may be received in any form including acoustic speech or tactile input.

The systems and techniques described here may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system may be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or of what may be claimed but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

A number of embodiments have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other embodiments are within the scope of the following claims.

