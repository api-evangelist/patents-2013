---

title: Securing virtual machines with virtual volumes
abstract: Embodiments provide virtual volumes to virtual machines based on configuration information to secure the virtual machines. Each virtual volume, without a file system, represents a portion of a storage array and is associated with at least one of the virtual machines. A host computing device attaches the virtual volume to the virtual machine based on the configuration information. Security software executing on the virtual machine accesses security information (e.g., encryption keys, etc.) stored in the virtual volume to provide security to the virtual machine (e.g., during bootup). In some embodiments, the virtual volume is attached and detached from the virtual machine as a universal serial bus (USB) device via an application programming interface to the storage array.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189609&OS=09189609&RS=09189609
owner: VMware, Inc.
number: 09189609
owner_city: Palo Alto
owner_country: US
publication_date: 20130610
---
Virtualization provides datacenters with highly efficient and available resource networking and storage management to reduce infrastructure costs such as capital power space cooling labor and the like. In particular virtual datacenters can have numerous host computers each executing thousands of virtual machines and guest operating systems. In such virtual datacenters or other shared storage systems multiple host computers may share the same set of storage devices.

However stealing a virtual machine by copying or modifying a file representing the virtual machine may be performed from anywhere on a network or by using a flash drive. Further the virtual machine has at least one data file e.g. a virtual machine disk such as in the VMDK format describing the virtual machine. This data file may be copied even when the virtual machine is not powered on potentially resulting in data loss.

Some existing systems attempt to prevent unauthorized access to the physical host computers. For example some of the existing systems use hardware specific cryptographic coprocessors or virtualized modules in a dedicated virtual machine. However these existing systems fail to protect virtual machines and their supporting data hosted on the physical host computers. Further in a virtualized environment a virtual machine may be migrated from one host to another host through operations such as vMotion from VMware Inc. In this case it is difficult to provide security for these virtual machines using hardware specific cryptographic coprocessors. In particular preventing access to the physical host computers does not secure individually the virtual machines hosted thereon. For example using a virtualized module in a virtual machine dedicated to protecting the host computer does not protect the dedicated virtual machine. With the existing systems virtual machine data may still be leaked even if the physical host computer hosting the virtual machine is protected using the existing systems.

One or more embodiments described herein secure virtual machines VMs with virtual volumes. The virtual volume is defined from storage accessible to a host computing device and associated with the host computing device and with the VM on the host computing device. The virtual volume is provided to a guest operating system of the VM for use by the VM as secure storage.

Alternatively or in addition some embodiments contemplate the host computing device providing the virtual volume of storage to the VM based on configuration information. The configuration information defines access by the VM to the virtual volume. The virtual volume stores security information associated with the VM. Security software executing on the VM obtains the security information from the virtual volume for use in securing the VM. The host computing device removes the virtual volume from the VM based on the configuration information.

This summary introduces a selection of concepts that are described in more detail below. This summary is not intended to identify essential features nor to limit in any way the scope of the claimed subject matter.

Embodiments described herein provide an ecosystem for securing virtual machines VMs in a virtualized environment in conjunction with security software executing on VMs . A virtual volume is created virtualized as a mass storage device and associated with one VM in some embodiments. As an example aspects of the disclosure are operable with any virtual volume such as vVols provided by VMware Inc. In general virtual volumes represent a portion of storage e.g. storage that is attached natively e.g. without a file system to VMs . Virtual volumes may be created via any application programming interface API to storage arrays such as by the VMware vStorage APIs for Storage Awareness VASA provided by VMware Inc. Virtual volumes are viewed by guest operating systems executing on VMs as for example a universal serial bus USB disk connected to a virtual USB controller of the VM .

Security software executing on guest operating system stores encryption keys certificates passwords software licenses or other security information in virtual volume . Virtual volume is attached and detached according to configuration information to enable security software to access security information at particular times to secure VM e.g. prevent unauthorized access by entities to VM . For example aspects of the disclosure provide security from a pre boot environment until guest operating system has booted by attaching virtual volume during the pre boot environment e.g. to enable access by disk encryption software which supports operating system disk encryption and then detaching virtual volume after guest operating system has booted. In this manner even if data describing VM is stolen by an entity VM remains encrypted by security information that is unavailable to the entity because security information is stored separate from the data describing VM .

Aspects of the disclosure further achieve security with at least platform integrity disk encryption and password protection. Platform integrity is achieved by for example providing security for the data describing VM e.g. providing security for a VM disk file corresponding to VM . Some embodiments provide platform integrity by preventing tampering with VMs . Further disk encryption is achieved by enabling full disk encryption applications to use virtual volumes to protect the keys used to encrypt the operating system and or any disk and to provide secure booting of VM and its guest operating system . Some embodiments further contemplate adding a user defined password when attaching virtual volume to VM .

Host computing device may include a user interface device for receiving data from a user and or for presenting data to user . User may interact indirectly with host computing device via another computing device such as VMware s vCenter Server or other management device. User interface device may include for example a keyboard a pointing device a mouse a stylus a touch sensitive panel e.g. a touch pad or a touch screen a gyroscope an accelerometer a position detector and or an audio input device. In some embodiments user interface device operates to receive data from user while another device e.g. a presentation device operates to present data to user . In other embodiments user interface device has a single component such as a touch screen that functions to both output data to user and receive data from user . In such embodiments user interface device operates as a presentation device for presenting information to user . In such embodiments user interface device represents any component capable of conveying information to user . For example user interface device may include without limitation a display device e.g. a liquid crystal display LCD organic light emitting diode OLED display or electronic ink display and or an audio output device e.g. a speaker or headphones . In some embodiments user interface device includes an output adapter such as a video adapter and or an audio adapter. An output adapter is operatively coupled to processor and configured to be operatively coupled to an output device such as a display device or an audio output device.

Host computing device also includes a network communication interface which enables host computing device to communicate with a remote device e.g. another computing device via a communication medium such as a wired or wireless packet network. For example host computing device may transmit and or receive data via network communication interface . User interface device and or network communication interface may be referred to collectively as an input interface and may be configured to receive information from user .

Host computing device further includes a storage interface that enables host computing device to communicate with one or more datastores which store virtual disk images software applications and or any other data suitable for use with the methods described herein. In exemplary embodiments storage interface couples host computing device to a storage area network SAN e.g. a Fibre Channel network and or to a network attached storage NAS system e.g. via a packet network . The storage interface may be integrated with network communication interface .

The virtualization software layer supports a virtual machine execution space within which multiple virtual machines e.g. VMs may be concurrently instantiated and executed. Hypervisor includes a device driver layer and maps physical resources of hardware platform e.g. processor memory network communication interface and or user interface device to virtual resources of each of VMs such that each of VMs has its own virtual hardware platform e.g. a corresponding one of virtual hardware platforms each virtual hardware platform having its own emulated hardware such as a processor a memory a network communication interface a user interface device and other emulated I O devices in VM . Hypervisor may manage e.g. monitor initiate and or terminate execution of VMs according to policies associated with hypervisor such as a policy specifying that VMs are to be automatically restarted upon unexpected termination and or upon initialization of hypervisor . In addition or alternatively hypervisor may manage execution VMs based on requests received from a device other than host computing device . For example hypervisor may receive an execution instruction specifying the initiation of execution of first VM from a management device via network communication interface and execute the execution instruction to initiate execution of first VM .

In some embodiments memory in first virtual hardware platform includes a virtual disk that is associated with or mapped to one or more virtual disk images stored on a disk e.g. a hard disk or solid state disk of host computing device . The virtual disk image represents a file system e.g. a hierarchy of directories and files used by first VM in a single file or in a plurality of files each of which includes a portion of the file system. In addition or alternatively virtual disk images may be stored on one or more remote computing devices such as in a storage area network SAN configuration. In such embodiments any quantity of virtual disk images may be stored by the remote computing devices .

Device driver layer includes for example a communication interface driver that interacts with network communication interface to receive and transmit data from for example a local area network LAN connected to host computing device . Communication interface driver also includes a virtual bridge that simulates the broadcasting of data packets in a physical network received from one communication interface e.g. network communication interface to other communication interfaces e.g. the virtual communication interfaces of VMs . Each virtual communication interface for each VM such as network communication interface for first VM may be assigned a unique virtual Media Access Control MAC address that enables virtual bridge to simulate the forwarding of incoming data packets from network communication interface . In an embodiment network communication interface is an Ethernet adapter that is configured in promiscuous mode such that all Ethernet packets that it receives rather than just Ethernet packets addressed to its own physical MAC address are passed to virtual bridge which in turn is able to further forward the Ethernet packets to VMs . This configuration enables an Ethernet packet that has a virtual MAC address as its destination address to properly reach the VM in host computing device with a virtual communication interface that corresponds to such virtual MAC address.

Virtual hardware platform may function as an equivalent of a standard x86 hardware architecture such that any x86 compatible desktop operating system e.g. Microsoft WINDOWS brand operating system LINUX brand operating system SOLARIS brand operating system NETWARE or FREEBSD may be installed as guest operating system OS in order to execute applications for an instantiated VM such as first VM . Virtual hardware platforms may be considered to be part of virtual machine monitors VMM that implement virtual system support to coordinate operations between hypervisor and corresponding VMs . Those with ordinary skill in the art will recognize that the various terms layers and categorizations used to describe the virtualization components in may be referred to differently without departing from their functionality or the spirit or scope of the disclosure. For example virtual hardware platforms may also be considered to be separate from VMMs and VMMs may be considered to be separate from hypervisor . One example of hypervisor that may be used in an embodiment of the disclosure is included as a component in VMware s ESX brand software which is commercially available from VMware Inc.

Host computing device has at least one processor and a memory area . Processor includes any quantity of processing units and is programmed to execute computer executable instructions for implementing aspects of the disclosure. The instructions may be performed by processor or by multiple processors executing within host computing device or performed by a processor external to computing device. In some embodiments processor is programmed to execute instructions such as those illustrated in the figures e.g. and or .

In some embodiments not shown host computing device accesses hosts and datastores via a network. The network represents any means for communication with hosts and datastores. Aspects of the disclosure are operable with any network type or configuration.

Memory area includes any quantity of computer readable media associated with or accessible by host computing device . Memory area or portions thereof may be internal to host computing device memory external to host computing device e.g. storage or both.

In the example of memory area further stores one or more VMs each having at least one guest operating system executing thereon. In the example of VM stores security software . Security software may be any of a plurality of security software products available to guest operating system e.g. stored in memory area executed by VM . For example security software may include applications installed on VM such as BITLOCKER brand computer software Symantec Endpoint Encryption TRUECRYPT brand computer software and McAfee Endpoint Encryption. However aspects of the disclosure are operable with any security software that operates to prevent unauthorized access to VM or portions thereof. For example security software includes any disk encryption software that accesses an encryption key as a token.

Memory area further stores configuration information associated with at least VM as shown in . Configuration information defines access by VM to virtual volume . For example configuration information describes when to attach and or when to detach virtual volume from VM e.g. from guest operating system . Aspects of the disclosure are operable with any form of configuration information settings conditions and the like. In some embodiments the type content and or format of configuration information differs based on the brand or version of security software available to guest operating system .

Memory area further stores a link or location of at least one virtual volume . Virtual volume represents external storage available to VM e.g. external to VM . As an example virtual volume may be provided as a partition of a storage array and or as a raw disk e.g. without a file system . Virtual volume is provided and removed e.g. attached and detached from VM based on configuration information . Virtual volume is capable of storing any data. In some embodiments virtual volume stores security information for use by security software .

VM disk files differ from virtual volumes at least in that VM disk files may be stored in storage after creating a file system at the host computing device level e.g. VM file system such as VMFS provided by VMware Inc. accessible to multiple host computing devices in a virtual datacenter. In contrast while virtual volumes may also be stored in storage each virtual volume is accessible only by VM to which virtual volume is assigned e.g. confirmed through authentication . Further VM disk files are files whereas virtual volumes are partitions or other raw disks from the host computing device without file systems written thereon in some embodiments. The raw disk is attached as a USB disk to a virtual USB controller of VM . The guest operating system or application inside VM can use the raw disk with or without a file system on the disk. For example the guest operating system or application inside VM may create any type of file system on the attached USB disk and store security keys or certificates on the attached USB disk.

In operation hypervisor communicates with storage via a storage API provider to provide and or remove virtual volume from VM and virtual volume from VM . For example a VASA daemon executing on host computing device interacts with storage using a vendor provided storage API to attach and or detach virtual volume and virtual volume as USB drives. Aspects of the disclosure however are operable with any storage API provider capable of describing the storage capabilities of one or more storage arrays or otherwise interacting with the storage arrays. VASA the VMware vStorage APIs for Storage Awareness provided by VMware Inc. in particular is capable of interacting with multiple vendors of storage arrays. In some embodiments a computing device or VM executes to implement storage API provider .

In the example of each of virtual volume and virtual volume are provided to VM and VM respectively as 10 megabyte MB USB drives. Those skilled in the art will note however that virtual volume and virtual volume may represent any amount of memory e.g. 5 megabytes 100 megabytes etc. . Further the amount of virtual volume and virtual volume may be the same or different.

Guest operating system has security software installed thereon such as any disk encryption software . Guest operating system creates virtual volumes and the VM disk files are encrypted from guest operating system by disk encryption software . For example guest operating system creates virtual volume VM disk file is encrypted and the disk encryption keys are stored in virtual volume . Similarly guest operating system creates virtual volume VM disk file is encrypted and the disk encryption keys are stored in virtual volume .

In operation user requests through VM tools attachment of virtual volume . In response VM tools communicates the user request to host computing device e.g. to hypervisor associated with host computing device to attach virtual volume . Hypervisor communicates with the storage array such as storage from via storage API provider . For example hypervisor instructs storage API provider to attach virtual volume to VM as a USB drive. In this example virtual volume is attached to a virtual USB controller of VM using VASA based on user request. In other example virtual volume may be attached on startup of VM or upon meeting any other condition s context rules or other settings described by configuration information .

Additional description of the creation and use of virtual volumes is next described with reference to and . While methods are described with reference to execution generally by host computing device it is contemplated that any of methods may be performed by any component associated with host computing device and or any component associated with a computing device separate from host computing device . For example methods may be performed by hypervisor VM guest operating system applications executing on guest operating system and or other entities. Further methods may be performed by computer executable instructions stored on one or more computer readable storage media. When executed by a processor such as processor the instructions cause the processor to secure VMs with virtual volumes .

At virtual volume is assigned to or otherwise associated with host computing device and with one of a plurality of VMs on host computing device . In such embodiments virtual volume is associated with only one VM e.g. to maintain security for VM . In other embodiments however virtual volume is not specific to any particular VM but instead may be used to store security information associated with a plurality of VMs . The plurality of VMs may be stored on the same host computing device or on different host computing devices . At host computing device provides virtual volume to guest operating system executing on the assigned VM .

At host computing device configures VM to use virtual volume as secure storage. For example host computing device may define and subsequently rely upon configuration information describing authorized access by the assigned VM to virtual volume . Configuration information describes for example when to attach and or detach as a partition virtual volume from the assigned VM . As an example configuration information defines attaching virtual volume before booting guest operating system and detaching virtual volume after booting guest operating system to secure VM . In another example configuration information defines attaching virtual volume when a particular application is executed by VM . In still another example configuration information defines attaching virtual volume storing a software license key only when a particular application is attempting to verify the software license key.

In some embodiments host computing device uses configuration information to configure access to virtual volume by security software available to guest operating system . As an example VM stores in virtual volume hashed security information for use by security software . Security software accesses the hashed security information from virtual volume in accordance with configuration information . In some embodiments security software executes to define configuration information . For example host computing device provides virtual volume to VM and then user interacts with security software to define configuration information for securing VM .

In embodiments in which a plurality of security software products is available to guest operating system host computing device may identify each of those security software products. For example host computing device may access a list of applications installed on guest operating system and identify those application that may operate to secure VM e.g. based on an application type declared by each of the applications or by guest operating system . Further one or more of the plurality of security software products may be automatically selected by host computing device to use virtual volume to secure VM . That is in some embodiments a plurality of security software products executing on VM may access the same virtual volume to secure VM . In other embodiments a plurality of security software products executing on VM may access different virtual volumes assigned to VM . Host computing device may automatically select one or more of the security software products based on for example criteria or preferences associated with user applications executing on guest operating system and or guest operating system . For example a mail application on guest operating system may require a level of encryption provided only by a particular security software product. In this example host computing device identifies the security software product that provides the desired level of encryption.

If a secure virtual volume is desired host computing device authenticates with storage at using for example an API such as VASA. In some embodiments host computing device authenticates by presenting credentials uniquely associated with host computing device relative to other devices. The credentials may include one or more identifiers associated with host computing device such as a media access control MAC address serial number and or hardware data. The credentials may take the form of a hash key.

Upon successful authentication virtual volume is created and assigned at only to host computing device that created VM . At virtual volume is assigned to VM as for example a mass storage device. For example host computing device virtualizes virtual volume as a USB disk. In the example of guest operating system executing on VM sets conditions or otherwise configures use of virtual volume by security software to secure VM .

Virtual volume stores in this example security information . At VM executes security software to access security information from virtual volume for use in securing VM . At host computing device removes virtual volume from VM based on configuration information . For example host computing device detaches virtual volume from VM as a USB mass storage device such as after bootup of VM or guest operating system . In another example host computing device receives a request from user or guest operating system to detach virtual volume from VM .

Upon determining virtual volume should be attached to VM host computing device authenticates with storage API provider at . For example host computing device authenticates with VASA. Upon successful authentication host computing device attaches virtual volume to VM at .

At host computing device determines whether conditions have been met to detach virtual volume from VM or whether an explicit request has been received from guest operating system . For example host computing device accesses configuration information to determine when to detach virtual volume . In such an example configuration information may store rules or parameters that host computing device evaluates to determine whether a current context of VM and or guest operating system satisfies the rules to prompt detachment of virtual volume .

Upon determining virtual volume should be detached from VM host computing device authenticates with storage API provider at . For example host computing device authenticates with VASA. Upon successful authentication host computing device detaches virtual volume from VM at .

In one scenario virtual volume is stored in a storage array accessible by a plurality of host computing devices . Further it may be desirable to migrate VM from a first host computing device to a second host computing device. For example an operation such as VMware Inc. s vMotion may be performed to migrate VM from one host to another while VM remains powered on. During such a migration the first host computing device e.g. source host grants permission for the second host computing device e.g. destination host to access virtual volume associated with VM . For example first host computing device authenticates with storage API provider that manages the storage array and identifies the second host computing device to storage API provider . After migration of VM from the first host computing device to the second host computing device the second host computing device revokes permission for the first host computing device to access virtual volume . For example second host computing device authenticates with storage API provider and identifies the first host computing device to storage API provider . In this manner access to virtual volume is preserved after migration of VM from one host computing device to another host computing device .

In some examples configuration information for a plurality of virtual volumes on host computing device is stored as a table. An exemplary table for storing such configuration information is shown below in Table 1.

In the example of Table 1 a 10 MB virtual volume mapped to storage array S is attached to VM preboot and detached postboot a 100 MB virtual volume also mapped to storage array S is attached to VM preboot and detached upon OS shutdown e.g. when VM powers off a 10 MB virtual volume mapped to storage array S is attached to VM preboot and detached postboot a 10 MB virtual volume mapped to storage array S is attached when application A executes and removed when application A terminates and a 10 MB virtual volume mapped to storage array S is attached when application A executes and removed when application A terminates.

Table 1 also identifies host computing device hosting VMs as well as whether OS disk encryption is enabled and which applications are authorized to access virtual volumes . However those skilled in the art will appreciate that more or less information may be stored as configuration information in Table 1.

The operations described herein may be performed by a computer or computing device. The computing devices communicate with each other through an exchange of messages and or stored data. Communication may occur using any protocol or mechanism over any wired or wireless connection. A computing device may transmit a message as a broadcast message e.g. to an entire network and or data bus a multicast message e.g. addressed to a plurality of other computing devices and or as a plurality of unicast messages each of which is addressed to an individual computing device. Further in some embodiments messages are transmitted using a network protocol that does not guarantee delivery such as User Datagram Protocol UDP . Accordingly when transmitting a message a computing device may transmit multiple copies of the message enabling the computing device to reduce the risk of non delivery.

Exemplary computer readable media include flash memory drives digital versatile discs DVDs compact discs CDs floppy disks and tape cassettes. By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media are tangible and are mutually exclusive to communication media. In some embodiments computer storage media are implemented in hardware. Exemplary computer storage media include hard disks flash drives and other solid state memory. In contrast communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media.

Although described in connection with an exemplary computing system environment embodiments of the disclosure are operative with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the disclosure include but are not limited to mobile computing devices personal computers server computers hand held or laptop devices multiprocessor systems gaming consoles microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the disclosure may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. The computer executable instructions may be organized into one or more computer executable components or modules. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the disclosure may be implemented with any number and organization of such components or modules. For example aspects of the disclosure are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the disclosure may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

Aspects of the disclosure transform a general purpose computer into a special purpose computing device when programmed to execute the instructions described herein.

At least a portion of the functionality of the various elements illustrated in the figures may be performed by other elements in the figures or an entity e.g. processor web service server application program computing device etc. not shown in the figures.

In some embodiments the operations illustrated in the figures may be implemented as software instructions encoded on a computer readable medium in hardware programmed or designed to perform the operations or both. For example aspects of the disclosure may be implemented as a system on a chip or other circuitry including a plurality of interconnected electrically conductive elements.

The order of execution or performance of the operations in embodiments of the disclosure illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the disclosure may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the disclosure.

When introducing elements of aspects of the disclosure or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements. The term exemplary is intended to mean an example of. 

Having described aspects of the disclosure in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the disclosure as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the disclosure it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

