---

title: Framework for automated storage processes and flexible workflow
abstract: Methods and systems for providing a framework for automated storage processes and flexible workflow are disclosed. The framework provides a user workflow design tool to create and/or customize workflow automation processes without needing to write software code. Additionally, the workflow design tool provides a mechanism that allows the workflow to make decisions, such as selecting storage resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09377936&OS=09377936&RS=09377936
owner: NETTAPP, INC.
number: 09377936
owner_city: Sunnyvale
owner_country: US
publication_date: 20131021
---
This application is a continuation application of U.S. patent application Ser. No. 13 093 656 filed Apr. 25 2011 entitled FRAMEWORK FOR AUTOMATED STORAGE PROCESSES AND FLEXIBLE WORKFLOW the entire contents of which are hereby incorporated by reference.

At least one embodiment of the present invention pertains to network storage systems and more particularly to a workflow design tool for automating storage processes.

Certain storage management operations can be complex and time consuming processes. For example end to end storage provisioning is typically a multi step process that allocates storage capacity to a storage server by assigning space on physical storage devices to meet the user s need for storage capacity and requirements for performance security and efficiency. Storage provisioning involves steps such as the assignment of servers to appropriate storage media specifying paths between the servers and storage devices and zoning the network to ensure access by the appropriate servers.

Traditionally software based storage management tools have been used to carry out a specific sequence of operations for performing storage related processes such as provisioning. However existing storage management tools are not easily customizable by a user to enable additional operations not already provided or to change a storage operation s workflow to suit specific needs of the user. While the operations carried out by some existing tools may be customized to meet a user s needs the customization involves reading of program code to interpret the pre established workflow sequence and manually modifying the code.

Further existing storage management tools only automate storage centric commands specific to a particular vendor s storage products. However even common storage centric workflows include commands associated with non storage elements such as servers applications virtualization layers network elements and internal information technology systems. Thus existing storage management tools are not able to automate the entire end to end storage management process.

Described in detail below is a framework that can be used as a design tool to customize and automate workflows. In particular a storage architect can use the framework to customize and automate end to end storage management processes. The tool in one embodiment uses a table based workflow layout that provides an intuitive way for a user e.g. a storage administrator or architect to create modify and visualize the various steps involved in a complex storage management process. The user selects each storage command to be performed and determines an order in which the commands are to be performed in the workflow. The framework displays the commands sequentially in the first row of a workflow table from left to right. The contents of the cells in the table correspond to storage objects upon which the respective storage command associated with the cell s column operates. Each storage object can be defined and has associated parameters that can be configured by the user. Each storage command also has configurable parameters. With the table layout each row of the table represents an easily visualized storage related workflow that is based on the commands associated with the columns of the table.

The storage server or servers may be for example one of the FAS xxx family of storage server products available from NetApp Inc. of Sunnyvale Calif. The client systems . . are connected to the storage server via the computer network which can be a packet switched network for example a local area network LAN or wide area network WAN . Further the storage server is connected to the disks via a switching fabric which can be a fiber distributed data interface FDDI network for example. It is noted that within the network data storage environment any other suitable numbers of storage servers and or mass storage devices and or any other suitable network technologies may be employed.

The storage server can make some or all of the storage space on the disk s available to the client systems . . in a conventional manner. For example each of the disks can be implemented as an individual disk multiple disks e.g. a RAID group or any other suitable mass storage device s . The storage server can communicate with the client systems . . according to well known protocols such as the Network File System NFS protocol or the Common Internet File System CIFS protocol Fibre channel or iSCSI to make data stored on the disks available to users and or application programs. The storage server can present or export data stored on the disk as volumes to each of the client systems . .. A volume is an abstraction of physical storage combining one or more physical mass storage devices e.g. disks or parts thereof into a single logical storage object the volume and which is managed as a single administrative unit such as a single file system. A file system is a structured e.g. hierarchical set of stored data objects. A data object as indicated herein refers to a logical container of data e.g. volume logical unit LUN directory file . Note that a file system does not have to include or be based on files per se as its units of data storage.

Various functions and configuration settings of the storage server and the mass storage subsystem can be controlled from a management station coupled to the network . Among many other operations deployment provisioning scheduling backups and snapshots and management of storage can be initiated from the management station . The management station includes a workflow design tool shown in more detail in that performs various functions to generate a visual representation of a framework for a workflow of storage management related commands. In one embodiment the storage management related commands are to be performed on the storage server system . In one embodiment the storage management related commands are to be performed on virtualization systems and or server systems.

Each of the nodes is configured to include several modules including an N module a D module and an M host each of which may be implemented by using a separate software module and an instance of for example a replicated database RDB . Specifically node . includes an N module . a D module . and an M host . node .N includes an N module .N a D module .N and an M host .N and so forth. The N modules . .M include functionality that enables nodes . .N respectively to connect to one or more of the client systems over the network while the D modules . .N provide access to the data stored on the disks . .N respectively. The M hosts provide management functions for the clustered storage server system . Accordingly each of the server nodes in the clustered storage server arrangement provides the functionality of a storage server.

The nodes are interconnected by a cluster switching fabric which can be embodied as a Gigabit Ethernet switch for example. The N modules and D modules cooperate to provide a highly scalable distributed storage system architecture of a clustered computing environment implementing exemplary embodiments of the present invention. Note that while there is shown an equal number of N modules and D modules in there may be differing numbers of N modules and or D modules in accordance with various embodiments of the technique described here. For example there need not be a one to one correspondence between the N modules and D modules. As such the description of a node comprising one N module and one D module should be understood to be illustrative only.

The above description provides a general illustration of a storage server system on which the techniques described herein can be implemented. The following sections provide a description of methods and systems by which a graphical workflow layout can be generated to perform custom storage related operations on a network storage system a virtualization system and or a server system.

As described further below the design tool can be used to automate an end to end storage centric process and presents an intuitive layout of workflow information for defining and editing storage management processes where intuitive means that the layout is easy to use and understand. In one embodiment the layout is in the form of a data structure such as a two dimensional data structure array or a table. A table based format makes the complex interactions of the steps of a workflow straight forward to understand. The table can be made up of sub tables of commands that have a small number of columns for example two to three columns where the sub tables are building blocks of a workflow. Each building block sub table is a representation of a pre defined program code for a command that includes a number of adjustable command parameters. The architect of the workflow can adjust parameter values to suit a particular workflow rather than writing program code for any of the building blocks or the workflow itself. The architect simply selects or defines the appropriate building blocks specifies the command parameters for the building blocks and designates their relative order in the table to create a workflow. Further the architect enters data for the variables for the corresponding workflow command in the cells of the table. The values of each cell and the parameters associated with each cell are made available to all cells that are both a to the right of that cell and b are either at the same row or at a lower row. Thus the table format provides for a logical encapsulation of the relationships between objects associated with the cells of the table. When the workflow executes the commands in the table are performed sequentially from left to right one building block at a time and the workflows of each row are executed from the top of the table to the bottom. The table format of the workflow helps the architect to visualize the interconnected steps of the workflow.

In the first layer of the design tool construct the architect selects commands that make up the workflow. In one embodiment the architect selects commands from a list of pre defined commands and arranges the commands in an appropriate sequential order for the workflow. Once the commands have been sequentially ordered by the architect the commands are displayed from left to right in a workflow table with the names of the selected commands shown at the top of each column. In the example of the first row of table lists the series of selected storage commands i.e. building blocks that are to be executed to perform the provisioning of storage for the database.

The first column heading in table shown in row is an abbreviated form for the command Create Volume . The command Create Volume when executed selects a storage area on a storage array such as in an aggregate of physical storage. Continuing along row the next column heading in table is the command Create Qtree which creates a qtree also known as a quota tree. A qtree is a top level directory within a volume which has special properties for managing quotas to limit disk or other media storage usage and file usage and also for managing access permissions. The next column heading in row is the command Create Export which makes the storage available to a host by exporting the file system paths on the storage system and making them available for mounting by for example NFS clients.

The remaining two column headings in row are the commands Create DR Volume and Create VSM . These commands relate to creating secondary volumes that can be used for disaster recovery DR or replication of data. The command Create DR Volume selects a storage area on a storage array to be used for disaster recovery and the command Create VSM creates a destination volume on a destination file server that has the same size or greater size as the source volume that is being protected. A utility is used for replicating the data on the source storage at the destination volume.

The second row of table contains pre defined headings that describe the types of values for the variables associated with each command to be inserted in the cells in the respective columns. In the second layer of the design tool construct the architect enters the data for the variables for each of the selected commands. In one embodiment the architect can enter a value for the variable in the cell and click on the cell to select the cell for further editing. For example clicking on the cell in row of table that has the value data vol brings up an editable window shown for example in . The variable is shown to have the name data vol because it was either entered in table or entered in this window by the architect. The variable is a storage object that has been selected to have a type volume . In the example of no policy is selected however a policy can be selected that describes how the data in the volume is to be managed.

In the third layer of the design tool construct the architect enters parameter values for each variable attribute. The attribute table for a volume variable is shown in . Each of the attributes in the table is used to define the data vol variable. The values for the attributes can be entered by the architect. In some instances the architect can select a predefined function to be used for an attribute value. A function works like a macro to perform small repetitive tasks for example an addition function or a subtraction function. In some instances the values can be specified at run time by the operator when the workflow is executed for example an identification number.

Each of the selected workflow commands can have a large number of variables that can be adjusted. For example the command Create QTree has two variables DiskLimit and Qtree shown in the row labeled in table directly below the command name. The variable names are descriptive pre defined names that aid the architect in supplying the correct information to the workflow framework. In order to make the workflow table more compact not every variable is necessarily displayed in . The architect can specify preferences for how many variables are shown for each command displayed in the table. The architect can display a variable for editing and subsequently hide the column from view for example if it does not impact the overall understanding of the workflow.

The heading DiskLimit denotes that the contents of the cells in that column are values that specify a limit to the disk space or other media storage space available to the qtree that is created and the heading Qtree denotes that the contents of the cells in that column are names of the qtree storage object to be created. Thus the contents of the cell in row below DiskLimit specifies the value for the limit to the disk or other media storage space the quota for the qtree called data qt that is specified in the cell in row directly below Qtree .

Continuing in the second row of table below the storage command Create Export there are four headings Export Filer RWhosts and Security . The heading Export denotes that the contents of the cells in that column are names of file system volumes to be exported. The heading Filer indicates that the contents of the cells in that column are names of file system paths that are available for mounting by NFS clients. The heading RWhosts indicates the contents of the cells in that column are read write hosts. The heading Security indicates that the contents of the cells in that column are types of security styles for the exported file system paths.

There are two remaining headings shown in the last two columns of row of table Volume below Create DR Volume and VSM below Create VSM . Similar to the storage command Create Volume Volume denotes that the contents of the cells in that column are names of volumes to be created for disaster recovery while VSM indicates that the contents of the cells in that column are names of destination volumes to be created for replication of source volumes.

The workflow is a series of storage commands to be performed. The ordering of the storage commands in the table layout from left to right specifies the order in which the storage commands are to be performed. Further the rows in a workflow table are executed sequentially from top to bottom. Thus row is a workflow and each of the rows in table are also workflows that execute the same commands as row but with different input variable values. Typically the commands are executed sequentially from left to right and the workflows are executed from the top of the table to the bottom. However in some embodiments the command order and workflow execution order can be defined to be in a different order. Further some embodiments can provide a layout different from a table with its own corresponding arrangement of command order.

Further execution of the workflow table from left to right and top to bottom readily provides for automatic referencing of implicit dependencies between storage objects in the table. For example in row the qtree data qt should be created inside a volume. No volume is explicitly provided to the Create QTree command however the Create QTree command searches for the first variable having the type volume that is to the left of the data qt cell in the same row or in a row above that cell. For example for the qtree data qt the volume in which it will be created is specified in the same row data vol while for the qtree redomir qt in row in table the volume in which it will be created is specified in the row above row redo vol . Thus the workflow table supports implicit dependencies between cells based upon relative locations of the cells in the table such that if a command to be performed on a storage object in a particular cell needs a parameter of a particular type that has not been explicitly provided by the storage architect parameters having the same type that have been defined in cells that are to the left of or to the left and above the particular cell in the workflow table are available to be automatically and implicitly referenced by the particular cell.

Additionally the user can edit the workflow using the table format. For example the user can select two storage commands and their respective columns in a workflow table. After selecting those two storage commands a user can actuate a mouse or other human interface device to move those columns to another location in the table. In other embodiments left or right controls can be used to change the order of the columns in the table. The interface can further be configured to permit a user to select one or more columns and remove a command from the workflow altogether. In a similar manner the user can select one or more rows of the workflow table to remove the rows from the table add rows to the table and move rows to other positions in the table to change the order in which the workflows are executed.

In one embodiment the architect can define a new command and add it to the workflow layout. A new command can be defined by specifying a list of parameters for the command and each parameter can be associated with a name and an object type. Then the parameters are linked to computer code that provides instructions for performing the task. The architect can upload code written in Perl Java Microsoft Powershell or other scripting languages

The design tool described above can also allow the workflow to include a construct for making decisions such as selecting appropriate storage resources without requiring the architect to write computer code. In the fourth layer of the design tool construct the architect defines filters to be used by the workflow. A combination of filters creates a construct called a finder that is used by the workflow to make a resource selection decision.

The architect uses the filters as logic building blocks that specify the criteria to be used in making a decision without having to write computer code to do so. Filters can be easily added or removed from a finder. In one embodiment filter criteria or parameters can be presented to the user in a drag and drop format for ease in defining a finder search algorithm. One or more filters are used to define a finder. Each filter can have no parameters one parameter or multiple parameters and a finder s parameters are the parameters of all of the filters that make up the finder.

The workflow design tool construct can be used for automating any type of process and finders can be constructed to perform a general search not just for storage resources. As an example a finder can be defined for finding a particular street in a database using two filters. A first filter can search for streets in the database that are in a particular town in the United States. The architect can specify that parameters to be used with the first filter are the name of the town and the state in which the town is located. A second filter can then be defined to search for a particular street in the town found by the first filter and the architect specifies the parameters to be used with the second filter are the name of the street and the number of buildings located on the street. The parameters used for the first and second filters should be data that is available in an accessible database. Thus a finder can be designed by the architect to select a particular street in the United States even though there is no predefined algorithm available.

In the example of each volume storage object that is specified under the command Create Volume is defined by the architect in the second layer of the design tool construct as described above and shown in . In the case of a volume storage object the volume should be created in an appropriate aggregate where an aggregate is a logical aggregation of physical storage. Thus in an automated storage process that creates a volume the workflow should be able to independently find an appropriate aggregate in which to create the volume. In one embodiment the workflow uses a finder to identify an aggregate. Thus some storage objects such as a volume have a finder associated with them that should be defined before executing the workflow.

In the example of an editable window for defining a finder used by the workflow to find an aggregate in which to create a volume is shown. Similar to defining a storage object the finder variable is given a name data vol aggr and a type . The type assigned to this particular variable is aggregate . In the example of the finder has been selected from a pull down menu listing pre defined finders find aggregate . A parameter table for the finder variable is shown in where each of the parameters of the finder and its associated value are listed.

Although the filters that make up the find aggregate finder are not displayed explicitly in all of the parameters for the filters that collectively define the find aggregate finder are shown in parameter table . The values for the parameters can be entered by the architect or designated to be entered as an input value by an operator at run time when executing the workflow. For example the aggregate location is assigned a value Datacenter that is to be specified by the operator at run time for the workflow the maximum number of flexible volumes that the aggregate contains is specified to be no more than 300 and the overcommitment threshold of the aggregate is specified to be no greater than 300. These are some example filter criteria that the workflow can use to select an appropriate aggregate in which to place the volume data vol that is created.

In one embodiment a storage resource filter selection can be applied to cloud deployment of applications by managing multiple storage domains in a customized manner. Customized filters can be specified to define a search algorithm for finding appropriate storage domains. The user can define new filters and finders and change parameters of previously defined filters and or finders.

Once the four layers of the design tool construct have been accessed as needed by the architect a workflow engine for the design tool can be directed to enter a planning phase. In the planning phase each object in the workflow table is converted to a set of parameters. To do this the workflow engine evaluates each cell in the workflow table by running finders if there are any to find the appropriate resources and automatically performing implicit referencing of implicit dependencies between storage objects. The output of the planning phase is an execution plan that is made up of a list of commands with specific parameters for every cell in the workflow table.

After the execution plan for the workflow has been generated it is ready to be executed. Typically the execution plan is executed by an operator and the operator provides run time input values to be used by the workflow. The run time input values to be provided are predetermined by the architect of the workflow and the values provide the operator the flexibility to adapt the automated workflow process to a particular application. Non limiting examples of run time input values include a security identifier SID or a datacenter in which volumes are to be created. In one embodiment the architect can design the workflow not to require any input values from the operator.

At block the workflow design tool generates a visual representation of the workflow layout with the user selected commands. In one embodiment the workflow layout is in the format of a table. Next at block the workflow design tool receives values for the variables for the selected commands. Each selected command can have a number of different variables that may need to be entered by the user to specify a storage object.

At block the workflow design tool receives values for attributes of storage objects defined at block . For example the name of a volume can be entered into a cell as an input value and attribute values associated with that cell would be attribute related to the specified volume such as the array in which the volume is located. Then at block the workflow design tool converts the objects in each cell of the workflow table to a set of parameters upon which the corresponding command of the cell s column operates. The process ends at block .

While an example of storage provisioning is shown in a workflow layout for automating any storage operation or any process can be set up in a similar manner. Further although the workflow layout was described above with respect to a table based format any other type of graphical representation can be used for the workflow layout.

As discussed above a resource selection filter can be created by using the workflow design tool without having to write computer code. It is also possible to allow automated decision making based not only on information residing on data repositories that are known at the time the workflow is designed but on data stored on any arbitrary repository. A mechanism through which this can be implemented is a configurable data warehouse that includes a repository and engine for data management and analytics. As shown in the example of in one embodiment a data warehouse can be accessed through the network by the workflow design tool .

The arbitrary data repositories . . are coupled to the network as shown in . In one embodiment the data repositories . . can include a central repository used by virtualization software where the central repository includes information on the location of storage resources for a virtual infrastructure. In one embodiment the data repositories . . can include a generic data center. In one embodiment SQL is used to extract information from storage management stations virtual centers and other similar systems.

In one embodiment a Simple Object Access Protocol SOAP based application programming interface API that uses an extensible markup language XML formatted file is used as a means to import configuration setting data from and export configuration setting data to a workflow design tool for automating storage processes. Configuration setting data can include the description of workflows commands filters finders pre defined objects such as volumes and qtrees and functions that can be pre defined or defined by the architect to perform small repetitive tasks such as adding values or multiplying values. An XML file can be customized by the architect to communicate with a particular storage management station to perform an extract transform and load ETL process on a target repository where the data from the target repository is retrieved and placed in the data warehouse. In the example of the XML file can be customized to retrieve data from data repositories . . managed by their respective storage management stations . . over a network and to store the data in a data warehouse . In one embodiment the storage management stations . . are similar to the management station shown in and communicate with their respective data repositories.

Once the data has been retrieved and stored in the data warehouse the filters and finders described above can be applied to the data warehouse to determine appropriate storage resources to be allocated to various steps of the workflow.

Then at block the workflow design tool applies filters and finders to the data warehouse to determine the storage resources to be used for various steps in the workflow. The process ends at block .

The processor s can include central processing units CPUs that can execute software or firmware stored in memory . The processor s may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices.

The memory represents any form of memory such as random access memory RAM read only memory ROM flash memory or a combination of such devices. In use the memory can contain among other things a set of machine instructions which when executed by processor causes the processor to perform operations to implement embodiments of the present invention.

Also connected to the processor s through the interconnect is a network interface device . The network interface device provides the system with the ability to communicate with remote devices such as the management station and may be for example an Ethernet adapter or Fiber Channel adapter.

The system can also include one or more optional input devices and or optional display devices . Input devices can include a keyboard a mouse or other pointing device. The display device can include a cathode ray tube CRT liquid crystal display LCD or some other applicable known or convenient display device.

In the example of the workflow design tool includes a user interface generator module a user input module a workflow engine and a data retrieval module . The user interface generator module generates a user interface that includes a visual representation of a framework for a workflow of storage related commands to be performed. The visual representation can be in the form of a table or any other suitable format.

The user input module receives user inputs directed to the visual representation generated by the user interface generator module . The user inputs can include a selection of storage related commands a selection of storage objects and parameters for the commands and storage objects. The user inputs can also include a selection of filters and parameters for the filters.

The workflow engine converts the objects in the workflow table to a specific set of parameters by running filters and finders to look for appropriate resources and performing automatic referencing of the cells in the table.

The data retrieval module accesses an XML file for performing an extract transform and load ETL process on a data repository to retrieve data for storage in a configurable data warehouse. The XML file is customized for the particular target data repository.

The techniques introduced above can be implemented by programmable circuitry e.g. general purpose microprocessor programmable microcontroller etc. programmed or configured by software and or firmware or entirely by special purpose hardwired circuitry or in a combination of such forms. Such special purpose circuitry if any can be in the form of for example one or more application specific integrated circuits ASICs programmable logic devices PLDs field programmable gate arrays FPGAs etc.

Software or firmware for use in implementing the techniques introduced here may be stored on a machine readable storage medium and may be executed by one or more general purpose or special purpose programmable microprocessors. A machine readable medium as the term is used herein includes any mechanism that can store information in a form accessible by a machine a machine may be for example a computer network device cellular phone personal digital assistant PDA manufacturing tool any device with one or more processors etc. . For example a machine accessible medium includes recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

The term logic as used herein can include for example special purpose hardwired circuitry software and or firmware in conjunction with programmable circuitry or a combination thereof.

Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.

