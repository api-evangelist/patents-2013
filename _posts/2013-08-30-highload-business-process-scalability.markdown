---

title: High-load business process scalability
abstract: The present disclosure involves systems, software, and computer implemented methods for providing high-load business process scalability in cloud-based infrastructures. One process includes operations for receiving a message at a first computer node executing a first business process instance. A second business process instance associated with the message is identified. The message is sent to a messaging queue for retrieval by the second business process instance if the second business process instance is not located at the first computer node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135595&OS=09135595&RS=09135595
owner: SAP SE
number: 09135595
owner_city: Walldorf
owner_country: DE
publication_date: 20130830
---
This application is a Continuation of and claims priority under 35 USC 120 to U.S. patent application Ser. No. 13 094 366 filed on Apr. 26 2011 issued as U.S. Pat. No. 8 561 080 on Oct. 15 2013 the entire contents of which are hereby incorporated herein by reference.

The present disclosure relates to software computer systems and computer implemented methods for providing high load business process scalability.

The increased use of high bandwidth networks and data connections and high capacity data storage servers has resulted in the implementation of different deployment models such as cloud computing solutions. In cloud computing solutions resources services enhanced functionality or software can be provided to a client computer across a network. The resources can be shared among multiple clients through virtualization techniques to achieve improved resource utilization and scaling effects. Cloud computing models can also be used to provide shared access and remote storage of data to users. In cloud computing solutions computing resources are provided as hosted services across a network such as the Internet. These services can include on demand services that are provided through a cloud computing network without installation of applications or software on a client computer.

Companies employ business process management suites BPMS to model document automate govern optimize simulate and monitor core business processes and complex repetitive tasks. In some instances an on demand BPMS achieves scalability or elasticity by dynamically assigning additional cloud instances computer nodes to handle additional workload. At the same time a cloud based BPMS is connected to a wide range of other software components including client software running on mobile devices on premise business software installations e.g. enterprise resource planning systems web based clients other cloud based business software and other software run by business partners. Business processes in the BPMS system can exchange events with those external software components.

The present disclosure describes techniques for providing high load business process scalability in cloud based infrastructures. A computer program product is encoded on a tangible storage medium where the product comprises computer readable instructions for causing one or more processors to perform operations. These operations can include receiving a message at a first computer node executing a first business process instance. A second business process instance associated with the message is identified. The message is sent to a messaging queue for retrieval by the second business process instance if the second business process instance is not located at the first computer node.

While generally described as computer implemented software embodied on tangible non transitory media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

This disclosure generally describes computer systems software and computer implemented methods for providing high load business process scalability in cloud based infrastructures. In cloud computing or cluster node infrastructures multiple computer nodes or cloud instances can be used to provide an application or service to external components and users. An event received at a first cloud or cluster node instance hereafter referred to as a cloud instance may need to be forwarded to a second receiving cloud instance for processing. An event is a message or request exchanged between applications and or business processes. Instead of immediately communicating with the receiving cloud instance to initiate processing of the event the event is persisted in a database backed event queue. The receiving cloud instance may then retrieve the event from the event queue for dispatch to a locally running process instance for consumption of the event. In some implementations a notification call to the receiving cloud instance will trigger the receiving cloud instance to retrieve the event without delays. The receiving process instance can consume the event at an appropriate time based on its internal state.

Business processes are run by business process management suites BPMS orchestrating process steps such as automated activities user tasks and events that synchronize a process with other components. These process steps often interact with external applications and devices. For instance a user task may be sent to a user s mobile device where it is processed passing back data to the underlying business process. In another example an RFID reader may send a signal to a business process where it is consumed in an event to trigger certain follow up actions. In another example a business process calls out from an automated activity to an enterprise resource planning ERP system to alter a business object e.g. an invoice or material master data that is managed there.

In some implementations BPMS systems can be offered as on demand installations in a cloud computing network to support on demand business applications and to benefit from a low total cost of ownership that comes with the intrinsic elasticity and scalability characteristics of the cloud infrastructure. Technically a single BPMS installation is distributed across a dynamic range of computer nodes provided by the underlying cloud infrastructure. Those nodes jointly run a number of business processes. The number of nodes may grow whenever there is a larger workload to be processed at a time or shrink whenever there is a smaller workload to be processed. Some of the nodes may execute different instances of particular business processes while other nodes may execute entirely different business processes in various implementations.

Turning to the illustrated example illustrates an example environment for executing business processes associated with business process management suites BPMS in a cloud based infrastructure. The illustrated environment includes or is communicably coupled with a plurality of components in a network such as cloud network . In general environment depicts an example configuration of a system capable of orchestrating process steps such as automated activities user tasks and events within cloud network in synchronization with external applications and devices such as mobile devices or clients . The BPMS can be distributed across multiple computer nodes in the cloud network including nodes and so on. As used in the present disclosure the terms computer node and cloud instance may be used interchangeably as appropriate without departing from the scope of this disclosure. In cluster computing environments not illustrated the terms computer node and cloud instance may be also analogous to a cluster node. 

Each computer node in network can include a plurality of different components needed to run a number of business processes or process instances. For example as depicted in the computer nodes can include a business process management BPM runtime environment messaging middleware or communication adapters. The internal components at the computer nodes allow the computer node to perform process steps associated with the BPMS communicate with other computer nodes or external components receive and respond to events from external components and execute business processes. The implementation of the BPMS in a cloud computing environment provides flexibility and scalability to the BPMS by assigning additional computer nodes when needed to handle additional workload.

As seen in a cloud based BPMS can also be connected to other external software components for providing on demand services to the external software components. For example the BPMS can be connected to external components including one or more clients mobile devices on premise systems and other business partner systems . The external components can run client software components that interact with the BPMS through the cloud network . Business processes running at the computer nodes and can exchange events with the external software components. Further the cloud network can also include components for facilitating communications between the external components and computer nodes such as interfaces for managing and synchronizing communications in the cloud network and or a load balancer for managing distribution of workload among computer nodes. A typical load balancer can be used to divide a total workload into smaller work packages of fixed size before assigning the work packages to available work processes. Generally the typical load balancer receives a message and distributes the message to an available node although not necessarily to a particular node associated with the received message or to a node where the receiving process instance is running.

The exchange of events among business processes and external components may require the business processes to consistently synchronize their internal state to the received events. When an event is received by a business process the business process needs to reliably react to the event in order to achieve an intended effect on the control flow and data flow of the business process. Accordingly the state of the business process needs to be synchronized in a transactional manner in order to maintain the business process consistency with external components. In other words the state of the business process should reflect the state of the external components interacting with the business process at any discrete point in time.

In some instances the business process and external component can be synchronously coupled to ensure consistency in states. Dedicated distributed transactional protocols such as Two Phase Commit for example synchronously couple two business applications such as a BPMS and an external software component. That is both applications hold their individual state on different computer nodes and perform actions of a single logical transaction simultaneously e.g. persisting a snapshot of their state on a database . Synchronously coupling different software components and different computer nodes however may not be efficient for business applications that process high workloads and need to comply with service level agreements SLAs regarding processing throughput and latencies. By requesting another application to perform an action simultaneously with the requesting application neither the other application s current availability nor its underlying infrastructure is taken into account. In effect the other application may currently not be able to respond to the request such that the entire transaction is delayed. This problem is aggravated when a computer node needs to serve multiple requests at a time. In essence distributed transaction protocols that rely on synchronous coupling do not scale on a cloud based infrastructure.

In order to avoid synchronous coupling reliable asynchronous protocols may be employed. Asynchronous protocols may pass an event from an external software component to a business process in an asynchronously de coupled fashion only guaranteeing that the event will eventually be delivered. Similarly business processes may also pass back events to the external software component in this way. The asynchronous protocols avoid the blocking characteristics of distributed transactions. These protocols however require a loose coupling between a business process and an external software component. For example the asynchronous functions such as waiting for an incoming event need to be explicitly modeled into the business process. Further the external software component e.g. an ERP system may not be configured to understand what the receiving software components of an event are or on which specific computer node a receiving software component like a business processes instance is currently running. Accordingly certain event correlation mechanics which may be part of a BPMS or other messaging middleware are required to dispatch the event to the receiving software components.

In certain implementations a cluster enablement protocol can be used to address problems with scalability in a cloud based BPMS implementation. A cluster enablement protocol can rely on an eviction algorithm to transport full process instances between two computer nodes. In particular the receiving process instance is transported to the node where the event was received. In some instances a software component issues a request on a first computer node while the affected process instance that is supposed to receive the request is currently running on a second different computer node. The process instance associated with the first computer node may be evicted from the first computer node and migrated to the second different computer node in order to process the event while maintaining transactional synchronization with the event.

For example as depicted in an external software component e.g. task management software running on an external device at client can submit an event to a BPMS distributed across multiple nodes including nodes and . Initially the event can be received by load balancer which selects one of the nodes under its management to send the event to. In the present example the event is sent to a particular process instance at node but the consumption of the event may need to be performed at a different node . Based on a cluster enablement protocol the BPMS waits for the process instance at node to reach an idle state such as when waiting for a user task to be completed. During the idle state the process instance at node including its state information is evicted from the node and persisted onto a database. Node then recovers the process instance by loading the state information from the database and resuming the process instance at node . The received event is then passed to the process instance at node which effectively synchronizes the process state.

The cluster enablement protocol may result in latency and throughput issues in certain situations. First performance of the business processes in the BPMS may be adversely affected when the process instances are associated with complex states. Many customer scenarios come with large process models that employ deeply nested subflow invocations. In effect the process state that needs to be persisted and fetched to and from the database in a cluster transport may be prohibitively large and may generate substantial load on the database. Further certain factors may cause frequent cluster transports which can further occupy system resources. Some business process models contain many artifacts that may trigger a cluster transport. Examples of artifacts that may trigger cluster transports are human activities e.g. user tasks intermediate message catch events timer events and sending responses to synchronous process interfaces. Generally each occurrence of these artifacts may trigger transporting a process instance across a cluster which can be a costly operation for system resources. Third the cluster protocol makes use of synchronous communications between the nodes which limits scalability due to intrinsic availability constraints.

Additionally many process models may rarely encounter an idle state which is a prerequisite for performing a cluster transport. A number of artifacts can inhibit idle situations such as sequential or parallel loops automated activities invoking long running services e.g. ERP Enterprise Services and customer provided data mapping functions which can be arbitrarily complex and hence consume processing time in an unpredictable manner. When the artifacts reside on parallel branches in any subflow of the calling stack they may temporarily inhibit the process from being evicted as part of a cluster transport. In effect the request to deliver an event to the process fails and needs to be repeated later which can hamper message throughput.

In a cloud based infrastructure the events transmitted by an external component can arrive at a particular cloud instance while the receiving process instance that will be processing the event may reside on another cloud instance. A protocol to consistently dispatch the events to the receiving business processes in a distributed cloud infrastructure can be provided. In some implementations the protocol may introduce no costly protocol overhead and need not depend on a business process being idle to receive an event. When either the number of events or the number of process instances increases both process turnaround times and overall process end to end throughput can be easily compensated for by assigning additional cloud instances to handle the additional workload. Further by persisting an event at a centralized database I O and network load can be reduced because the receiving process instance does not need to be transported across clusters in the cloud network. Also the latency associated with successfully delivering an event to the BPMS runtime is greatly reduced. An event no longer needs to wait for the receiving process instance to be transported across the cluster in order to complete the delivery transaction. Finally the likelihood of failing to deliver an event is also substantially reduced because a process instance that is unable to be transported across a node cluster can no longer inhibit or withhold the event from being delivered.

The present disclosure addresses the challenges associated with high load processing in a cloud computing infrastructure by de coupling event receipt and consumption in a business process both physically and asynchronously. That is when an event is received on a first cloud instance it is persisted in a database backed event queue for the receiving business process which may be running at a second cloud instance. The second cloud instance running the receiving business process will regularly fetch newly arrived events from the queue and dispatch them to the locally running process instance where the event is consumed. The second cloud instance can in some instances fetch new events based on polling of the event queue. In some implementations an optional notification call will actively trigger the second cloud instance once the event has been put into the queue eliminating polling delays.

The receiving process instance is free to consume the event based on its internal state and availability without blocking the transaction that has issued the event on the first cloud instance. For instance task management software may autonomously set the status of a user task that was created by a business process running on another cloud instance from in progress to completed . In effect an event will be generated and persisted i.e. enqueued for that process instance for the affected process to be picked up on its own cloud instance in a separate asynchronously de coupled transaction. External components may in certain instances send events to the process without running into locking conflicts. In rare instances when both the external component and the business process access joint state variables a lock may need to be acquired from a central locking provider. The locking can be avoided by packaging any state changes into separate event entities that are only generated when the external software component issues the event. Generally however business processes manage private resources and do not directly access external resources while external components generally do not manipulate internal process resources.

In general node can be any electronic computing device such as a server operable to receive transmit process store or manage data and information associated with the environment . Node can be a server that stores one or more business process applications where at least a portion of the business process applications are executed via requests and responses sent to users or clients within and communicably coupled to the illustrated environment of . In some instances node can store a plurality of various business process applications while in other instances node can be a dedicated server meant to store and execute only a single business process application . In some instances node can comprise a web server or be communicably coupled with a web server where the business process applications represent one or more web based applications accessed and executed via network by remote system to perform the programmed tasks or operations of the business process application .

Node illustrated in can be responsible for receiving application requests i.e. events from one or more client applications or business applications associated with the remote system of environment responding to the received requests by processing said requests in the business process application and sending the appropriate response from the business process application back to the requesting client application if the received request is a synchronous request. Node may also receive requests and respond to requests from other components on network such as the messaging system or other nodes not illustrated in . Alternatively the business process application at node can be capable of processing and responding to requests from a user locally accessing node . Accordingly in addition to requests from the remote system illustrated in requests associated with the business process applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single node comprising a computer environment can be implemented using one or more nodes as well as computers other than servers including a server pool. Indeed node remote system and messaging system can be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated nodes remote system and messaging system may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system.

In the present implementation and as shown in node includes a processor an interface a memory and one or more business process applications . The interface is used by the node for communicating with other systems in a client server or other distributed environment including within environment connected to the network e.g. remote system as well as other systems communicably coupled to the network . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated environment .

In some implementations node may also include a user interface such as a graphical user interface GUI . The GUI comprises a graphical user interface operable to for example allow the user of the server to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting or analyzing data as well as viewing and accessing source documents associated with business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. Specifically the GUI may for instance be used to present user tasks originating from a business process. The GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of business process application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually.

Generally example node may be communicably coupled with a network that facilitates wireless or wireline communications between the components of the environment i.e. between node and remote system as well as with any other local or remote computer such as messaging system additional clients servers or other devices communicably coupled to network but not illustrated in . In the illustrated environment the network is depicted as a single network in but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients.

The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN such as for example the connection between remote system and node . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations.

Remote system may have access to resources such as node within network . In certain implementations the servers within network including node in some instances may comprise a cloud computing platform for providing cloud based services. The terms cloud cloud computing and cloud based may be used interchangeably as appropriate without departing from the scope of this disclosure. Cloud based services can be hosted services that are provided by servers and delivered across a network to a client platform to enhance supplement or replace applications executed locally on a client computer. Remote system can use cloud based services to quickly receive software upgrades applications and other resources that would otherwise require a lengthy period of time before the resources can be delivered to the remote system . Additionally other devices may also have access to cloud based services such as on demand services provided by servers accessible through network . Further a cloud platform deployment implementation is not a required element of the present disclosure and other distributed infrastructures such as cluster based systems can also be used.

As described in the present disclosure on demand services can include multiple types of services and business processes such as products actionable analytics enterprise portals managed web content composite applications or capabilities for creating integrating using and presenting business applications. For example a cloud based implementation can allow remote system to transparently upgrade from an older user interface platform to newer releases of the platform without loss of functionality.

As illustrated in node includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular embodiments of environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of node and specifically the one or more plurality of business process applications . Specifically the server s processor executes the functionality required to receive and respond to requests from the remote system and their respective client applications as well as the functionality required to perform the other operations of the business process application .

Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible non transitory medium operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. It will be understood that while portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate. In the illustrated environment processor executes one or more business process applications on node .

At a high level each of the one or more business process applications is any application program module process or other software that may execute change delete generate or otherwise manage information according to the present disclosure particularly in response to and in connection with one or more requests received from the illustrated remote system and its associated client applications or from other servers or components through a network . In certain cases only one business process application may be located at a particular node . In others a plurality of related and or unrelated business process applications may be stored at a single node or located across a plurality of other nodes as well. In certain cases environment may implement a composite business process application . For example portions of the composite application may be implemented as Enterprise Java Beans EJBs or design time components may have the ability to generate runtime implementations into different platforms such as JEE Java Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET among others.

Additionally one or more of the business process applications may represent web based applications accessed and executed by remote system or client applications via the network e.g. through the Internet . Further while illustrated as internal to node one or more processes associated with a particular business process application may be stored referenced or executed remotely. For example a portion of a particular business process application may be a web service associated with the application that is remotely called while another portion of the business process application may be an interface object or agent bundled for processing at a remote system . Moreover any or all of the business process applications may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the business process application may be executed by a user working directly at node as well as remotely at remote system .

As illustrated node can also include a business process management BPM runtime that provides services libraries and tools for executing business process applications . A business process instance is an executing instance of a particular business process. In some cases multiple instances of the same business process can be running e.g. multiple discrete purchase orders may be generated concurrently by different business process instances . Further multiple instances of the same business process can be running at different nodes such that each business process instance is associated with information specific to the node hosting the business process instance.

The BPM runtime can also handle any state changes to business processes including state changes associated with execution of process steps based on received events. Node also includes messaging middleware . Messaging middleware can comprise a software or hardware infrastructure configured to facilitate sending and receiving messages between distributed systems and provide for transactional failover safe message delivery message queuing and publish subscribe features. Generally messaging middleware allows application modules to be distributed over heterogeneous platforms and reduces the complexity of developing applications that span multiple operating systems and network protocols by insulating the application developer from the details of the various operating system and network interfaces. In some instances the messaging middleware can provide methods and techniques for sending messages to and receiving messages from the messaging system and its messaging queue . The messaging middleware of node can also provide messaging middleware application programming interfaces API such as Java Message Service JMS APIs for example that allow interaction between node and diverse platforms across different networks.

One or more incoming message adapters can also be included in node . The incoming message adapter comprises hardware or software components used to receive messages or events received from external components such as remote system other nodes or messaging system . The incoming message adapter can also be coupled with a message analyzer module . Message analyzer module can be any application configured to analyze received events to determine an appropriate recipient for the event. In some instances message analyzer module can determine a queue into which the received event should be routed to. The event may need to be consumed at a particular node or by a specific process instance based on the external component transmitting the event or on other context information associated with the event. In some instances the message analyzer module may identify a received event as an event associated with a business process instance executing on the same node . In those instances the received event or message can be consumed without forwarding or sending the message to the messaging queue or another system.

In general node also includes memory for storing data and program instructions. Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Memory may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of node and its one or more business process applications .

Memory can also store data objects such as business process models and business process metadata . Business process models can include data objects representing various aspects or processes of an enterprise and business process metadata can include any metadata associated with business processes that node is managing or interacting with. In particular memory can hold process instance data such as instantiated process contexts process tokens and other process instance data. In some implementations business process models can be BPMN based Business Process Modeling Notation models or BPEL based Business Process Execution Language models.

The illustrated environment of also includes one or more remote systems . Each remote system may be any computing device operable to connect to or communicate with at least node and or via the network using a wireline or wireless connection. Further as illustrated in remote system includes a processor an interface a client application and a memory . In some instances remote system can also include a graphical user interface GUI . In general remote system comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the environment of . It will be understood that there may be any number of remote system associated with or external to environment . For example while illustrated environment includes remote system alternative implementations of environment may include multiple clients communicably coupled to node or any other number of clients suitable to the purposes of the environment . Additionally there may also be one or more additional remote systems external to the illustrated portion of environment that are capable of interacting with the environment via the network . The term remote system may also refer to any computer application or device such as a mobile device that is communicably coupled to one or more servers through a network . Moreover while each remote system is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

In some implementations remote system can be a client system and GUI may be associated with remote system . In these instances GUI comprises a graphical user interface operable to for example allow the user of remote system to interface with at least a portion of the platform for any suitable purpose such as creating preparing requesting or analyzing data as well as viewing and accessing source documents associated with business transactions. Generally the GUI provides the particular user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. Generally GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI is often configurable supports a combination of tables and graphs bar line pie status dials etc. and is able to build real time portals where tabs are delineated by key characteristics e.g. site or micro site . Therefore the GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information in the platform and efficiently presents the results to the user visually. GUI however is not a required component of the present disclosure. In some instances for example remote system may be a server or other component of an ERP system that does not necessarily include a GUI.

As used in this disclosure remote system can encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example each remote system may comprise a computer that includes an input device such as a keypad touch screen mouse or other device that can accept user information and an output device that conveys information associated with the operation of the node and business process application or the remote system itself including digital data visual information the client application or the GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media CD ROM or other suitable media to both receive input from and provide output to users of remote system through the display namely the GUI .

In some implementations node is also communicably coupled with a messaging system which provides a messaging queue stored in memory for persisting incoming events. In some instances memory can be non volatile memory or a database system. Messaging system can be any electronic computing device configured to receive store or provide access to events or messages received from other components. In some instances messaging system is coupled with one or more nodes as a backbone or back end system while in other instances messaging system represents a stand alone system connected to a plurality of other nodes devices and components through network . Messaging system can include a processor interface or other components used to receive and manage events. In some implementations messaging system includes consistency and failover features through messaging middleware. Messaging middleware at messaging system can receive enqueue and forward dequeue messages in a transactional manner without losing messages or delivering duplicate messages. Further messaging middleware can also provide for ordering of messages such as First In First Out FIFO ordering. In other words the messaging middleware at messaging system can be used to persist incoming events for later retrieval by process instances. Although messaging middleware can be implemented as a central database at messaging system it can also be implemented using any appropriate means such as local persistency or with lazy replication techniques.

For example external components such as remote system can send events or requests to a particular node in a cloud network. The event may need to be consumed at a different location however and node can forward the event to messaging system to persist the event in messaging queue so that the appropriate business process can retrieve the event from the messaging queue for consumption. The functionality provided by messaging system for providing a queue for received events can be performed by messaging service . In certain implementations messaging service can also send a notification message to a particular node containing the process instance to be used for consuming a particular event stored in messaging queue . Notification messages can be also provided by the node itself such as through the messaging middleware when messages or events are sent to the messaging queue . Although the messaging system is depicted in as being remotely located with respect to node in some implementations messaging system can be located as part of one of the plurality of nodes or distributed across different nodes in a BPMS.

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. For example one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

In any event messaging middleware can provide interfaces that allow persistence of incoming events for later retrieval by receiving process instances. In some implementations messaging middleware can be implemented in connection with a centralized database in a repository or backbone system available to different process instances across multiple computer nodes with each process instance having access to messaging queue for retrieving events for consumption. Alternatively messaging middleware can rely on other approaches such as replication protocols with local persistency to provide distributed queues for incoming events. If the affected process instance is located at the same computer node as the node that first received the event the event can be delivered to or consumed by the appropriate process instance without persisting the event in messaging middleware .

In some implementations the affected process instances are actively notified through messaging middleware after determining which process instance is affected and after persisting the event in the process queue. The notification call to computer node can in some instances avoid delays in retrieving and consuming the event by a process instance at computer node . In some implementations the computer node containing the affected process instance can perform regular polling of process queues at messaging middleware at to determine whether a particular event has been received at the messaging middleware . The computer node can then retrieve the event from the messaging middleware after determining that an event has been received for consumption by a process instance at computer node . Once the event has been retrieved at computer node it can be consumed by process instance .

The forwarding of events to messaging middleware as described above in relation to can be implemented across each node in a BPMS. In some instances however the events are persisted in messaging middleware only with respect to certain nodes of the BPMS certain process instances certain events received or under certain conditions. By persisting events in a process queue at a messaging system the performance of a BPMS when exchanging events can be improved especially in relation to certain scenarios. In situations where user tasks interact with the invoking process instance very frequently persisting received events in a process queue can decrease latency associated with frequent invoking of process instances. For example a form that is presented to a plurality of users who need to fill in data in the form and pass the form back to the process instance after completion can occupy resources because any user triggered task status change could result in an event sent to a process instance. Given the relatively long processing times of user tasks passing task status change events to the process instance through a messaging middleware polling approach can be beneficial to performance of the BPMS.

If the identified business process instance is executing on the first node the received message is provided to the identified business process instance at where the message and its contents can be locally accessed and consumed on the first node. If the identified business process instance is not executing on the first node the received message is to be processed at a second computer node. The location of the second computer node however may not be identified yet. Accordingly the message is sent to messaging middleware at for retrieval by the second computer node. In some implementations active notification can be enabled within the messaging middleware in order to notify the second computer node of the message awaiting retrieval by the second computer node. Accordingly a determination is made as to whether active notification has been enabled at . If active notification has been enabled a notification message is sent to the second computer node at . The active notification can include information related to the particular message sent to the messaging queue at or notification that a message associated with the second computer node is available at the messaging queue without further details. If the active notification has not been enabled the process returns to normal operations and awaits arrival of further messages.

In some implementations the notification method is coupled with a polling approach. The receiving process instance may poll the message queue for pending messages at certain intervals but may immediately check the queue if a notification has been received from the first computer node. Accordingly if a notification has been received indicating that a message is available for the second computer node in the message queue the centralized messaging queue is polled for related messages at . If a notification has not been received a determination is made at as to whether it is time to poll the centralized messaging queue for any available messages for retrieval. The polling time for each business process instance may be different to allow for differences between the business processes being performed. Each business process instance can be associated with a polling time appropriate for that particular business process instance depending on whether the process instance is a time critical or non time critical process instance for example. In some instances the polling time can be manually modified by a user or administrator set to a default value or dynamically modified based on a calculation related to the average or median time in which new messages are received. In some instances messages may be sent to a business process at differing times such that a default polling time may be used. If it is not the time to poll the messaging queue the process returns to determining whether a notification is received from the related business process node at . If it is time to poll the messaging queue the second computer node polls the centralized messaging queue for related messages at . If there are no related messages stored in the centralized messaging queue at the process returns to determining whether a notification is received from messaging middleware at . If there are related messages in the messaging queue then the related messages are retrieved from the centralized messaging queue at . After a message is retrieved from the messaging queue it is consumed in the appropriate business process instance at the second computer node at .

The persistence of received events in a messaging queue allows process instances to reside on a particular cloud instance for the lifetime of the process instance sometimes referred to as business process stickiness. Exceptions to this can include changes to the cloud topology e.g. additional cloud instances are assigned to handle part of the load . In order to let the business processes receive events reliably and consistently in a transactional manner any inbound event e.g. the task status change and the message in is locally persisted onto messaging middleware with a messaging queue in the same transaction as when the inbound event is delivered to the BPMS runtime . When an event is received on a cloud instance that is different from the cloud instance where the receiving process es currently reside the event is persisted in a database backed queue for retrieval by the process instances that the event is supposed to be dispatched to. In some instances an event may need to be dispatched to multiple process instances.

If the event is delivered to the cloud instance where the receiving process instance currently resides the event is immediately delivered to the process instance bypassing the messaging queue. Further steps may not be required here because the event is successfully delivered to the appropriate process instance for consuming the event. If the event is delivered to a cloud instance where the receiving process instance does not reside however the event may be persisted in a centralized messaging queue in order to deliver the event to the receiving process instance.

Turning to the illustrated example the change to a task status as submitted by a user may require locking of a state variable associated with the task status because the change requested results in modification of an existing state variable that is shared between the process instance that orchestrates the task and the task management component that presents the task to the user. As seen in the BPMS runtime can acquire a lock on the task state variable by accessing a central locking service at to prevent consistency violations with respect to the task state variable. Once the task state variable has been locked by the central locking service the BPMS runtime can generate an alter event at in response to the task change request received from the first cloud instance. The event is then persisted or enqueued in messaging middleware at such as in messaging queue as illustrated in in order to dispatch the event to an appropriate receiving process instance to complete the task status change. After the event is passed to the central database the lock on the task variable can be released by the central locking service at . In some implementations a notification call can be sent to the cloud instance at which the receiving process instance is located to inform the cloud instance that an event is available for retrieval. In those instances the notification can be sent as a signal event at to the BPMS runtime associated with a second cloud instance associated with the receiving process instance.

In the signal event can be received at the BPMS runtime of the second cloud instance at . On the node where the receiving process instance resides certain mechanics can be implemented to allow local process instances to receive events. In some implementations a receiving process instance can perform polling methods or regular checks on a related database queue for incoming events. The checks can be consolidated into a single regular database lookup which checks the process queues for all events that can be received at all process entities that reside at the local cloud instance. The process specific database lookup may be part of a single transaction which checks the event queues for all process instances that reside on the local cloud instance. Alternatively each process instance may have its own polling transaction to achieve better decoupling between different processes and to configure individual polling intervals. Accordingly the number of database transactions can be kept to a minimum. Although a polling method may be implemented by the cloud instance if a signal event is received indicating an incoming event at the central database the BPMS runtime of the cloud instance can immediately retrieve the event from the central database which may reduce some delays caused by relying on polling alone.

Fetching newly arrived events from the message queues can be performed using regular polling requests where the time interval between database checks is configurable to particular process instances if no interval is configured for a process instance default values for the process type or all process types can be applied . In some implementations the time interval between database checks can be automatically adjusted based on a frequency of previously received events a business process type associated with the receiving business process instance or on any other factor associated with the business process instance. The polling interval can be overridden when another cloud instance actively notifies the cloud instance where the process resides that an event has been included in one of the message queues associated with the cloud instance. Thus increased latencies resulting from lengthy polling intervals can be avoided. In cases where the notification mechanism is omitted or the notification is lost consistency is still maintained because the next polling interval will ultimately fetch the message from the message queue.

In the illustrated example the BPMS runtime of the second cloud instance initiates polling of the central database at triggering a lookup call to the central database at to search for newly queued events. Here the event submitted to the central database by the first cloud instance as described above in relation to can be retrieved by the second cloud instance for consumption. In some instances the retrieved event needs to become part of the process state which can be achieved by materializing the event in a process state variable change. The event received at the second cloud instance however may require locking of the state variable associated with the receiving process instance. Accordingly the locking mechanism is requested from the central locking service at before the event is applied to the corresponding state variable at . The event is then fetched from the message queue and purged or dequeued from the message queue. After the transaction within which the process instance has fetched the event from the queue and applied it to the state variable has committed the lock can be released at .

Here the BPMS runtime can then optionally trigger successive process steps that react on the state variable change. Those steps will normally affect control flow and or the data flow aspects of the process instance. Under certain circumstances triggering those process steps may be deferred or depend on other conditions. In those cases the materialized event i.e. a process state variable is still part of the process state but may actually only later be consumed by the process. In some of these cases the process may never consume the event. In those cases the BPMS runtime may be configured to either 1 remove the materialized event when the process has terminated or 2 free up the event for other process instances at that point. For instance in a scenario where a stream of messages is consumed by process instances where each instance only handles a fixed number of messages messages that exceed that number need to be picked up by a follow up process instance. In other cases the event may actually become irrelevant once the process has terminated. For instance a process instance may be cancelled while an associated user task was still in progress. When that user task completes the corresponding event does not need to be dispatched to another process instance but can be discarded.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously and or in different orders than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

