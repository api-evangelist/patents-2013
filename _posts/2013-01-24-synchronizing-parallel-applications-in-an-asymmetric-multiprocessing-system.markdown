---

title: Synchronizing parallel applications in an asymmetric multi-processing system
abstract: A method for synchronizing parallel applications in a partitioned asymmetric multi-processing system having multiple independent levels of security is provided. Synchronized access to a shared data memory region is provided for a first application through a first instance of a para-virtualized user library linked against a first application in a first domain having a first security level. Synchronized access is provided to the shared data memory region for a second application in parallel with the first application through a second instance of the para-virtualized user library linked against the second application in the first domain. The second instance of the para-virtualized user library also accesses the synchronization structure. Access is prevented to the shared data memory region and the synchronization structure by other applications in one or more other domains having other levels of security per domain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09304945&OS=09304945&RS=09304945
owner: RAYTHEON COMPANY
number: 09304945
owner_city: Waltham
owner_country: US
publication_date: 20130124
---
The present invention relates to computer processing systems and more specifically to the synchronizing parallel applications in an asymmetric multi processing system.

Computer systems that include multiple independent levels of security MILS are typically implemented using asymmetric multi processing AMP . Asymmetric multi processing enables the use of multiple processing cores where processing tasks are partitioned asymmetrically between processing cores according to security level and other factors. To port existing application programs to an AMP MILS system typically requires redesigning and re implementing the application programs to make use of the resources of more than one processing core while operating within a desired level of security.

According to one embodiment of the present invention a method for synchronizing parallel applications in an asymmetric multi processing system having multiple independent levels of security is provided. Synchronized access to a shared data memory region is provided for a first application through a first instance of a para virtualized user library linked against the first application in a first domain having a first level of security. The synchronized access is provided through a para virtualized standard synchronization application programming interface implemented as a user library accessing a synchronization structure. Synchronized access is provided to the shared data memory region for a second application in parallel with the first application through a second instance of the para virtualized user library linked against the second application in the first domain having the first level of security. The second instance of the para virtualized user library accesses the synchronization structure. Access is prevented to the shared data memory region and the synchronization structure by other applications in one or more other domains having other levels of security per domain.

According to another embodiment of the present invention a partitioned asymmetric multi processing system having multiple independent levels of security includes a first domain having a first level of security and one or more other domains having other levels of security per domain. The first domain includes one or more processing cores a synchronization memory region and a shared data memory region. The first domain is configured to provide synchronized access to the shared data memory region for a first application through a para virtualized user library linked against the first application. The synchronized access is provided through a para virtualized standard synchronization application programming interface implemented as a user library accessing a synchronization structure of the synchronization memory region. The first domain is further configured to provide synchronized access to the shared data memory region for a second application in parallel with the first application through a second instance of the para virtualized user library linked against the second application. The second instance of the para virtualized user library accesses the synchronization structure. Access to the shared data memory region and the synchronization structure by the one or more other domains is prevented.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features refer to the description and to the drawings.

The embodiments described herein include systems and methods for synchronizing parallel applications in an asymmetric multi processing system with multiple independent levels of security. illustrates a block diagram of an exemplary embodiment of an asymmetric multi processing AMP multiple independent levels of security MILS system including a first domain domain A a second domain domain B and a third domain domain C . The domains contain one or more virtual environments running at the security level of the domain. For example the first domain can have a first level of security while the second and third domains and have other levels of security e.g. top secret secret confidential etc. . Each of the domains defines a shared synchronization memory region and one or more shared data memory regions where resources are shared within each of the domains but are isolated between each of the domains . For example virtualized environments and in the first domain can share access to a synchronization memory region and a shared data memory region but virtualized environments in domains and are prevented from accessing memory regions or of the first domain . Preventing access to shared memory regions by virtual environments in other domains such as domains and can be enforced by one or more memory management units under the control of a MILS separation kernel to maintain multiple independent levels of security in an asymmetric multi processing mode within the system . Blocking access to synchronization structures across domains maintains each security level per domain.

In the example of each of the processing cores includes separation kernel SK . Each processing core also contains one or more virtualized environment each virtualized environment having an application instance . Each of the application instances is linked against a respective para virtualized user library to provide synchronized shared access functions for memory regions and . The virtualized environments may be modified versions of known operating systems such as LINUX VxWorks or High Assurance Environment HAE . The SKs provide separation of virtualized environments while allowing application instances to access the shared data memory region as synchronized through the synchronization memory region . The synchronization memory region and the shared data memory region may each include multiple regions of memory defined in separate address ranges. Although only a single application instance is depicted in each of the virtualized environments each core may support more than one virtualized environment and the virtualized environments may each support multiple application instances.

In exemplary embodiments the virtual environments are para virtualized guest operating systems i.e. modified operating systems configured to run as multiple guest operating systems alongside each other. One or more memory management units MMUs control access to addresses defining various memory regions such as the shared data memory region and support memory mapping and cache management. Various processes of the virtualized environments may attempt to modify MMU configuration to allow access the shared data memory region . Rather than allow the virtualized environments to modify the MMU configuration the SKs can be configured to block or ignore requests to modify the MMU configuration such that the virtualized environments are unaware of their inability to modify the MMU configuration . Preventing dynamic reconfiguration of the memory regions ensures that statically defined synchronization structures remain consistently defined between the virtualized environments . MMU configuration modification functions of the SKs ensure that only virtualized environments have access to the synchronization memory region . To support synchronization between the application instances the application instances are linked against para virtualized user library instances which are modified user libraries configured to access synchronization features that may not otherwise be available to the virtualized environments . This may include for example portable operating system interface POSIX synchronization functions as further described herein.

The para virtualized user library instances can implement POSIX compatible application programming interfaces APIs to provide common synchronization methods to applications that are resident in other virtualized environments and or processing cores within the same domain. The APIs may appear as standard synchronization APIs such that minimal modification is needed when porting preexisting applications to the system as the application instances . The para virtualized user library instances may be separate instances of a common user library linked against each associated application instance . Para virtualization is used to modify underlying structures and signaling to support synchronization for MILS across multiple processing cores per domain such as processing cores of the first domain . A boot loader can be used to load a synchronization structure such as synchronization structure of that is statically defined in the synchronization memory region . In an exemplary embodiment the boot loader performs loading of the synchronization memory region prior to releasing the processing cores to execute at system startup reset.

A variety of para virtualized functions can be modified to support asymmetric multi processing with multiple independent levels of security. Examples of para virtualized functions for synchronization in a POSIX API for POSIX threads pthreads include pthread mutex init pthread mutex destroy pthread mutex attr init pthread mutex attr destroy pthread mutex lock pthread mutex unlock pthread mutex trylock pthread cond init pthread cond destroy pthread condattr init pthread condattr destroy pthread cond wait pthread cond signal and pthread cond broadcast. Other standard synchronization processes can also be para virtualized such as communication APIs.

An example process for a spinlock based synchronization function is depicted in . The spinlock based synchronization function is an example of a para virtualization of the pthread mutex lock standard synchronization API. At block of application code such as application instance of makes an API call to the spinlock based synchronization function which can be part of the para virtualized user library instance of . The API call is received as a lock request for a granule in the shared data memory region of . At block an address of a granule identifier in the synchronization structure of associated with the granule is resolved. Address resolution may be performed once at startup. At block a test and set of a granule value in the synchronization structure associated with the granule identifier is performed until the granule value is successfully written to lock the granule. Test and set may include a check and conditional write as an atomic operation to increment the granule value to reserve the lock. At block data associated with the granule in the shared data memory region are accessed upon locking the granule. Upon completion of exclusive data processing at block an application code API call is made to an unlock function which can be part of the para virtualized user library instance of . At block the granule value in the synchronization structure is modified e.g. decremented to release the lock and continue with processing on non shared data.

An alternative to a spinlock is interrupt based synchronization. illustrates an exemplary embodiment of a lock process of an interrupt based synchronization function . At block of application code such as application instance of makes an API call to the interrupt based synchronization function which can be part of the para virtualized user library instance of . The API call is received as a lock request for a granule in the shared data memory region of . An address of a granule identifier in the synchronization structure of associated with the granule is resolved. Address resolution may be performed once at startup. The process registers for an interrupt with a separation kernel such as SK of . At block a test and set of a granule value in the synchronization structure associated with the granule identifier to lock the granule is performed. Test and set may include a check and conditional write as an atomic operation to increment the granule value to reserve the lock. At block based on failing to lock the granule execution is suspended until interrupt arrives. After the interrupt arrives the test and set of the granule value is performed again by returning to block . When the lock is reserved the granule value is incremented as part of the test and set of block . At block data associated with the granule in the shared data memory region are accessed upon locking the granule. After processing of the data is completed an unlock process is performed. The unlock process may vary depending upon whether single processing core or multi processing core unlocking is performed.

At block it is determined whether there are any blocked processes by examining the blocked process list of . If there are blocked processes one or more blocked processes selectively wakeup at block under the control of the para virtualized user library by sending a virtual interrupt as wakeup signal to the SK of the same processing core such as SK of processing core as part of a wakeup sequence before continuing with the processing on non shared data. At block of the wakeup sequence the SK dispatches a virtual interrupt to an associated virtualized environment such as SK and virtualized environment . At block the virtualized environment processes the virtual interrupt and schedules a blocked task. At block similar to block an instance of the para virtualized user library performs a test and set to reserve a lock. At block based on failing to lock a granule execution is suspended until another virtual interrupt arrives from block . After the virtual interrupt arrives the test and set is performed again by returning to block . When the lock is reserved the granule value is incremented as part of the test and set of block . At block data associated with the granule in the shared data memory region are accessed upon locking the granule. After processing of the data is completed the lock is released by decrementing the granule at block .

A wakeup sequence can be predetermined using priority scheduling or a random sequence. The wakeup sequence is implemented by the para virtualized user library based on the set of blocked tasks pending tasks and the scheduling regime. Once the selected blocked process or processes are signaled control returns to application code such as the application instance of . Rather than waking up all blocked processes and re suspending all but one process block of selectively wakes up blocked processes to avoid additional overhead associated with wakeup and re suspension of processes that are not successful in immediate lock reservation.

At block a virtual interrupt is sent using a hypercall as wakeup signal to the SK of the same processing core such as SK of processing core before continuing with the processing on non shared data. At block the SK dispatches a hardware interrupt to one or more other SKs on one or more other processing cores within the same domain such as SKs and of processing cores and in domain . Each SK receiving the hardware interrupt processes it respectively in blocks . Each of the SKs can then initiate a local instance of the wakeup sequence of .

Interrupts can be initiated by one SK and sent to other SKs in the same domain even though they are associated with different virtualized environments. For example the SK of can handle hardware interrupts and pass interrupts to SKs and . Interrupts for synchronization can be para virtualized to customize the behavior of virtualized interrupts. For example additional codes status and actions can be defined for synchronization interrupts. In one embodiment all blocked or pending processes wakeup in response to an interrupt and all processes that are not successful in lock reservation return to a suspended or blocked state until the next interrupt.

The technical effects and benefits of the embodiments described herein provide synchronizing parallel applications in an asymmetric multi processing system having multiple independent levels of security. Using para virtualized standard synchronization application programming interfaces allows for porting of existing applications with minimal modification and redesign to run on an AMP MILS system.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one more other features integers steps operations element components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated

The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention had been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

