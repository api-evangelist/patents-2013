---

title: Anti-malware system, method of processing data in the same, and computing device
abstract: Provided are an anti-malware (AM) system, a method of processing data in the AM system, and a computing device including the AM system. The AM system includes a hardware-based AV engine configured to perform hash matching on data for AV scanning of the data, and an AV function module configured to determine whether or not the data includes a virus pattern on the basis of a result of the hash matching.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09118625&OS=09118625&RS=09118625
owner: SAMSUNG SDS CO., LTD.
number: 09118625
owner_city: Seoul
owner_country: KR
publication_date: 20131118
---
This application claims priority to and the benefit of U.S. Provisional Patent Application No. 61 727 917 filed on Nov. 19 2012 the disclosure of which is incorporated herein by reference in its entirety.

The present disclosure relates to a system for use in providing a security solution and more particularly to a system including a hardware based anti virus AV engine and to a method of processing data in such a system.

With the spread of the Internet the number of pieces of malware or malicious code for example a computer virus a worm a Trojan horse a spyware program a rootkit a distributed denial of service DDoS attack etc. designed to perform a malicious action against a user s intention is drastically increasing and accordingly there is a growing need for an anti malware AM solution for effective security of a computer system.

In addition with the widespread use of mobile devices such as a smartphone a tablet etc. it is deeply concerned that malware that has attacked personal computers PCs would also have severe harmful effects on the mobile devices. Thus an effective AM solution is required for the mobile devices as well.

In general AM solutions used in mobile devices are based on software. According to such a software based solution AM software is installed in a mobile device in the form of an application and performs malware detection.

Mobile devices have relatively strict limitations on resources such as a central processing unit CPU a battery and so on. Due to the limited resources software based AM solutions in the mobile devices may have reduced sets of functions as compared to those in PCs. For example a software based AM solution of a mobile device is programmed to detect malware only when an application is executed in the mobile device or a file is downloaded to the mobile device via the Internet and does not carry out a real time check for malware threats. This is because a heavy load of the real time check operation would result in a nuisance to other operations performed in the mobile device.

One or more exemplary embodiments may overcome the above disadvantages and other disadvantages not described above. However it is understood that one or more exemplary embodiments are not required to overcome the disadvantages described above and may not overcome any of the problems described above.

The present disclosure is directed to providing improved AV performance in a computing device having limited resources.

Further the present disclosure is directed to performing at a hardware based AV engine certain operations for providing an AV function at a high speed and to implementing other AV operations on a software level of a platform including the AV engine so that various security solutions can be provided.

According to an exemplary embodiment there is provided an anti malware AM apparatus including a hardware based anti virus AV engine configured to perform hash matching on data for AV scanning of the data and to generate a hash matching result and an AV function module configured to determine whether the data includes a virus pattern on the basis of the hash matching result.

According to an aspect of the AM apparatus the hardware based AV engine includes a hash loader configured to perform a first hash matching operation on a first portion of the data and a suffix matcher configured to perform a second hash matching operation on a second portion of the data in response to detecting that a matching occurs in the first hash matching operation the second portion of the data being subsequent to said first portion of the data.

According to an aspect of the AM apparatus the hardware based AV engine further includes an AV digest unit configured to calculate a message digest of the data.

According to an aspect of the AM apparatus said first portion of the data when input to the hash loader is input to the AV digest unit and the calculation of the message digest is performed in parallel with at least one of the first hash matching operation and the second hash matching operation.

According to an aspect of the AM apparatus the AV digest unit temporarily pauses the hash loader to prevent the hash loader from performing a hash matching operation on a subsequent portion of the data while the AV digest unit is calculating the message digest.

According to an aspect of the AM apparatus the AV function module loads for use by the hardware based AV engine at least one of a hash matching database and the virus pattern.

According to an aspect of the AM apparatus the AV function module is implemented as an application said application being executed by an external CPU in cooperation with the hardware based AV engine.

According to an aspect of the AM apparatus the hardware based AV engine includes a central processing unit CPU and a memory and wherein the firmware implementing the AV function module is stored in the memory.

According to an aspect of the AM apparatus the hardware based AV engine is integrated with a processor and wherein the processor includes a security execution environment module configured to virtualize the processor into different processors respectively corresponding to a normal mode and a security mode.

According to an aspect of the AM apparatus the virtualized processor corresponding to the security mode is configured to execute an application received by the AM apparatus.

According to an aspect of the AM apparatus the AM apparatus further includes a storage device connected to the processor wherein the security execution environment module further virtualizes the storage device into different storage devices respectively corresponding to the normal mode and the security mode.

According to an aspect of the AM apparatus the virtualized storage device corresponding to the security mode stores at least one of a library related to the AM apparatus a driver related to the AM apparatus and the virus pattern.

According to another exemplary embodiment there is provided a method of processing data in an AM apparatus including performing hash matching on data for AV scanning of the data with a hardware based anti virus AV engine generating a hash matching result and determining at an AV function module whether the data includes a virus pattern on the basis of a the hash matching result.

According to an aspect of the method the performing of the hash matching includes performing at a hash loader of the hardware based AV engine a first hash matching operation on a first portion of the data performing at a suffix matcher of the hardware based AV engine a second hash matching operation on a second portion of the data in response to detecting that a matching occurs in the first hash matching operation the second portion of the data being subsequent to said first portion of the data.

According to an aspect of the method the method further includes calculating at an AV digest unit of the hardware based AV engine a message digest of the data.

According to an aspect of the method said first portion of the data when input to the hash loader is input to the AV digest unit and the calculation of the message digest is performed in parallel with at least one of the first hash matching operation and the second hash matching operation.

According to an aspect of the method the method further includes using the AV digest unit to temporarily pause the hash loader to prevent the hash loader from performing a hash matching operation on a subsequent portion of the data while the AV digest unit is calculating the message digest.

According to an aspect of the method the method further includes loading at least one of a hash matching database and the virus pattern for use by the hardware based AV engine.

According to an aspect of the method the method further includes providing the AV function module implemented as firmware.

According to an aspect of the method the method further includes providing the AV function module implemented as an application said application being executed by an external CPU in cooperation with the hardware based AV engine

According to an aspect of the method the hardware based AV engine includes a central processing unit CPU and a memory and wherein the providing of the AV function module includes storing the firmware in the memory.

According to an aspect of the method the method further includes using a security execution environment module to virtualize a processor integrated with the hardware based AV engine into different processors respectively corresponding to a normal mode and a security mode wherein the security execution environment module is included in the processor.

According to an aspect of the method the method further includes executing an application using the AM apparatus on the virtualized processor corresponding to the security mode.

According to an aspect of the method the method further includes virtualizing at the security execution environment module a storage device connected to the processor into different storage devices respectively corresponding to the normal mode and the security mode.

According to an aspect of the method the method further includes storing at least one of a library related to the AM apparatus a driver related to the AM apparatus and the virus pattern in the virtualized storage device corresponding to the security mode.

According to still another exemplary embodiment there is provided a computing device including a CPU core and an anti malware AM apparatus configured to provide a security platform on which an anti virus AV software application is executed wherein the AM apparatus includes a hardware based AV engine configured to perform hash matching on data for AV scanning of the data and to generate a hash matching result and an AV function module configured to determine whether the data includes a virus pattern on the basis of the hash matching result.

Exemplary embodiments of the present disclosure will be described in detail below with reference to the accompanying drawings. However the embodiments are merely examples and are not to be construed as limiting the present disclosure.

Various details already understood by those familiar with this field will be omitted to avoid obscuring the gist of the present disclosure. Terminology described below is defined considering functions in the present disclosure and may vary according to a user s or operator s intention or usual practice. Thus the meanings of the terminology should be interpreted based on the overall context of the present specification.

The spirit of the present disclosure is determined by the claims and the following exemplary embodiments are provided only to efficiently describe the spirit of the present disclosure to those of ordinary skill in the art.

An AM system includes a processor such as an application processor a storage medium such as a read only memory ROM and or a random access memory RAM and a bus that connects various hardware components including the storage medium to the processor . The processor may include at least one CPU core . The storage medium may include many different types of storage media having different performance characteristics. The bus may include a memory bus or memory controller a peripheral bus and a local bus using any of various bus architectures.

The storage medium of the AM system is configured to store instructions executable by a processing unit such as the processor . For example the instructions stored in the storage medium may include instructions of an operating system OS for operating the various components and instructions of AM software running on the OS. As will be described later the AM software may be configured to provide AM functions to a user of the AM system . In certain embodiments drivers for the hardware components libraries firmware and various types of application software may be stored in the storage medium . In accordance with different embodiments the drivers the libraries the firmware and or the application software may be stored in a different storage medium.

The AM system further includes an AM module for malware detection. As shown in the AM module may be included in the processor . The AM module is connected through the bus to the CPU core and the storage medium . The AM module includes at least one hardware based engine for example an anti virus AV engine and or a firewall FW engine . The AV engine may perform hash matching on certain data for AV scanning of the data. The FW engine may perform an FW function of filtering a packet. In a certain exemplary embodiment the AM module may be configured in the form of a system on chip SoC . Such a SoC is configured as a single chip having hardware logic and firmware for malware detection. In another exemplary embodiment the AM module may be configured in the form of hardware logic e.g. the AV engine and or the FW engine only and may cooperate with certain software e.g. an application executed by an external CPU for malware detection.

The exemplary AM system may be included in a computing device having stored thereon data and or files to be scanned. The computing device may be a mobile device such as a smartphone or a tablet etc. an embedded device a desktop computer or so on.

The exemplary AM module may be constituted in various ways. For example as shown in the AM module includes the AV engine and the FW engine . In addition the AM module may further include an AV reset unit and an FW reset unit .

In the AV engine and the FW engine may operate independently of each other. The AV engine reads data e.g. the whole or a part of a database or a file in word units e.g. four bytes from a master device e.g. the storage medium of the AM system external to the AM module through a first interface . The external master device may control the AV engine and check a state of the AV engine through a second interface and control the FW engine and check a state of the FW engine through a third interface . The AV engine and the FW engine output an AV interrupt signal and an FW interrupt signal respectively.

The AV engine and the FW engine receive a clock signal HCLK . shows that the clock signal is used in common for the AV engine and the FW engine which is however merely illustrative.

The AV reset unit may receive a software reset request signal from the AV engine and a system reset input signal HRESETn from an external of the AM module to provide an AV reset signal to the AV engine . The FW reset unit may receive a software reset request signal from the FW engine and the externally applied system reset input signal to provide an FW reset signal to the FW engine . shows that the system reset input signal is used in common for the AV reset unit and the FW reset unit which is however merely illustrative.

Certain exemplary embodiments involve integration of the AM module and the processor . The AM module may be integrated with the processor in various ways. For example as shown in and the AM module may be integrated into the processor .

As an example the AM module illustrated in is integrated with the processor so that it can use the CPU core in the processor and a designated area of a certain memory e.g. the storage medium through the bus . This is referred to as a non isolated scheme. According to the non isolated scheme the AV engine and the FW engine of the AM module are connected to the CPU core of the processor through the bus and also connected to an external memory e.g. the storage medium through the bus . The AM module of may have an additional engine e.g. a crypto engine which is also connected to the CPU core and the storage medium through the bus . According to the non isolated scheme the AM module may enable relatively rapid data detection using the CPU core of the processor .

As another example the AM module illustrated in is integrated with the processor according to an isolated scheme. The AM module itself of includes a CPU and a memory . According to the isolated scheme the AM module may use the CPU and the memory to reduce use of the CPU core of the processor . According to the scheme shown in the AV engine and the FW engine of the AM module are connected through an internal bus to the CPU the memory and an interface . The interface connects the AM module to the CPU core and the storage medium through the bus . Likewise an additional engine e.g. a crypto engine included in the AM module may be connected through the bus to the interface the CPU and the memory in the AM module . Alternatively another engine e.g. a crypto engine located outside the AM module may be directly connected to the bus to use the CPU core of the processor .

Meanwhile a dotted line of denotes that the AM module can be integrated with a modem external to the processor . According to such a modem integration scheme the AM module is present between a network stack of the OS not shown and the modem and may be used to detect a harmful packet for the security of the AM system including the AM module . Further according to the modem integration scheme the usage of the CPU core of the processor is low. In this case the AM module may directly receive a network packet through the modem and process the packet in the transport layer.

Alternatively a dotted line of denotes that the AM module is integrated with the processor while the modem is connected to the processor through the bus . In this case since the AM module serves as a coprocessor e.g. the CPU in the AM system the AM module may detect a packet for use in the CPU core of the processor thereby facilitating network packet processing over layers including the application layer to the transport layer.

An exemplary security platform includes a hardware level and a software level. Sub modules of each level may be modified or extended according to the design of the platform . Such modules implement certain functions to be performed on the platform . In other words certain functional modules operate on the platform . These functional modules are implemented at the hardware level or the software level of the platform . For example an AV function may be performed on the platform and to this end the platform operates a certain AV function module. Using the AV function module an AV software application e.g. an AV application may be executed on the platform .

In the hardware level of the platform a hardware based AV engine is included. An exemplary constitution of the hardware based AV engine will be described later. In the hardware level of the platform an FW engine may be further included and a crypto engine s and or for performing encryption functions may be additionally included. The constitution of the platform will be described below particularly in terms of the AV function among the functions of the platform .

In the hardware level of the platform AV firmware may be further included. At the hardware level of the platform the AV firmware implements a functional module that performs certain operations for the AV function. The instructions of the AV firmware may be stored in a certain memory and executed by a certain processing unit. For example when the AM module including the AV engine is integrated with the processor according to the isolated scheme the instructions of the AV firmware may be stored in the memory of the AM module and executed by the CPU of the processor . By way of another example when the AM module including the AV engine is integrated with the processor according to the non isolated scheme the instructions of the AV firmware may be stored in the storage medium and executed by the CPU core of the processor . However it will be understood that the foregoing examples are illustrative and that variations may be made therein.

The software level of the platform includes a driver an AV library and an AV application . The instructions of the driver the instructions of the library and the instructions of the AV application may be stored in a certain memory e.g. the storage medium and executed by a certain processing unit e.g. the processor . A functional module for performing certain operations for the AV function is implemented as software by the driver and or the library . Also the driver provides an interface with the hardware level of the platform . The AV application is software for providing an AV solution on the basis of the platform . The AV application may use and or control the platform through for example an AV application programming interface API provided by the library and receive an output from the platform using a callback function.

In the platform the firmware the driver and or the library may implement operations that need to be frequently updated to cope with new malicious codes and strengthen security. According to how closely the AM module is related with the processor e.g. how the AM module is integrated with the processor an operation to be performed on the platform may be implemented in firmware at the hardware level or in a driver or a library at the software level.

In a certain exemplary embodiment as will be described in further detail later the hardware based AV engine performs hash matching operations on data for AV scanning of the data.

When the AM module is integrated with the processor according to the isolated scheme some processing operations related to the above operations may be implemented by the AV firmware at the hardware level. For example certain operations performed after the hash matching operations may be implemented by the AV firmware and other processing operations may be implemented by the library and or the driver . The operations of the AV function module implemented as the AV firmware includes full matching of determining whether or not data includes a virus pattern virus signature on the basis of a result of performing hash matching on the data and or loading of a database for use in the hash matching and a database such as the virus patterns for use in the full matching.

Alternatively certain processing operations including the full matching and or the database loading may be implemented as software by the driver and or the library . For example when the AM module is integrated with the processor according to the non isolated scheme the platform may be configured in this manner.

A security solution based on the platform may enable respective vendors to make the best use of advantages of the hardware based AM module in the course of developing various applications e.g. the AV application . Thus for the security solution hardware based improvement in its performance can be achieved while its unique security functions can be implemented as software.

Furthermore the platform may involve an enhanced security structure. A computing device including an AM system that provides such a platform is improved in the stability of security.

In an exemplary embodiment a module for providing a security execution environment to the hardware level of the platform is included in the hardware level of the platform . The security execution environment module may be included in the processor integrated with the AV engine . The security execution environment module may support platform authentication generation storage of a measurement value for integrity check protection of data storage and so on. The security execution environment module interfaces with a higher level function e.g. the AV function provided by the driver and or the library through a security execution environment driver and or a security execution environment library .

The security execution environment module allows the operating environment of the CPU core and or the CPU of the processor to have a normal mode and a security mode and virtualizes the processor into two processors corresponding to the respective modes. Applications at the software level of the platform are executed on the virtualized processor corresponding to the normal mode or the security mode. In other words applications at the software level of the platform are logically classified as either normal or security applications where the normal application and the security application may be respectively executed on the two virtualized processor as if they were executed on two separate processors. For example the AV application using the AM system is executed by the virtualized processor corresponding to the security mode.

The security execution environment module logically partitions a storage device or a peripheral device connected to the CPU core and or the CPU of the processor as well as the processor and virtualizes the storage device or the peripheral device into devices corresponding to the respective modes.

Such logical partitioning enables the following. First security critical portions for example a certain library and or driver e.g. the library and or the driver a key FW rules a virus signature database etc. may be stored in the virtualized storage medium corresponding to the security mode. When the stored library and or driver is installed or updated performing an integrity checking process through a mechanism such as an electronic signature may prevent the contents of the library and or driver from being tampered with or damaged or from being improperly updated. Likewise when the virus signature database and the FW rules are updated the tampering and improper update of their contents can be prevented. Also it is possible to prevent the library the drive the FW rules and the virus signature database from being updated by a source posing as a trustworthy update server. Furthermore a process for authenticating an application operating in the normal mode may be executed in the security mode so as to prevent the application from being tampered with.

According to the hardware constitution shown in the AV engine includes a register a remote direct memory access RDMA unit a text loader a direct memory access DMA buffer a hash loader a text buffer a shift table a hash buffer a parallel cyclic redundancy check CRC unit a CRC buffer a suffix matcher a suffix buffer and an AV digest unit . The text loader may include the DMA buffer . The hash loader may include the text buffer . At least one of the DMA buffer the text buffer the hash buffer the CRC buffer and the suffix buffer may be a first in first out FIFO type of queue.

The register monitors a state of the AV engine controls operations of the AV engine and stores results of the operations performed therein.

Data to be scanned is read into a memory e.g. the storage medium or the memory in units of a predetermined size i.e. in scan units and the positions of the data stored in the memory are delivered to the AV engine by firmware e.g. the AV firmware a driver e.g. the driver and or a library e.g. the library . For example when the text loader of the AV engine is notified of the start of scanning by a control register in the register the text loader accesses the positions at which the data to be scanned is stored through the RDMA unit and loads the stored data. The read data is sequentially stored in the text buffer via the DMA buffer of the text loader .

Through the RDMA unit a pattern database to be used by the hash loader is transmitted loaded from a memory external to the AV engine to the shift table . Such database loading may be performed in advance by the firmware e.g. the AV firmware the driver e.g. the driver and or the library e.g. the library .

The hash loader performs hash matching on the data stored in the text buffer . Specifically the hash loader performs a certain hash matching operation on a portion of the data for the hash matching of the data. Such hash matching operation is performed using the pattern database of the shift table . For example for every byte e.g. an i th byte in the text buffer the hash loader performs hash matching on the three successive bytes from the byte e.g. from the i th byte to an i 2 th byte . The hash loader performs this hash matching operation to store in the hash buffer information including a match position where a matching has occurred during the hash matching operation and the stored information is delivered to the suffix matcher . In parallel with this the parallel CRC unit calculates a CRC value e.g. a 32 bit CRC value .

The CRC value calculated by the parallel CRC unit is stored in the CRC buffer and input to the suffix matcher together with the value stored in the hash buffer . When the match result of the hash matching operation performed by the hash loader is stored in the hash buffer the suffix matcher performs an additional hash matching operation on a portion subsequent to the portion on which the hash loader has performed the hash matching operation i.e. on text that follows the match position stored in the hash buffer and stores in the suffix buffer the match result including a position at which another matching has occurred during the additional hash matching operation. The additional hash matching operation uses an additional pattern database stored in a suffix table not shown . After an address of the suffix table is set in the AV engine in advance the additional pattern database is loaded from the address into the suffix matcher through the RDMA unit .

In a certain exemplary embodiment a set of the hash loader the hash buffer the parallel CRC unit and the CRC buffer operating between the text loader and the suffix matcher may be expanded. For example a plurality of such sets may be arranged in a parallel structure.

Additionally the AV digest unit may calculate a message digest of the whole or a specific section of data in the text buffer according to a designated hash algorithm. The AV digest unit may support at least one of MD5 SHA1 SHA256 SHA284 and SHA512 as an algorithm for calculating the digest. The calculated digest may be accessed through an API on a needed basis.

The calculation of the message digest by the AV digest unit may be performed in parallel with AV scanning of the data. To this end when a certain portion of the data is input to the hash loader the portion may also be input to the AV digest unit . Also to prevent the hash loader from performing a hash matching operation on the next part of the data while the AV digest unit is calculating the message digest the AV digest unit may temporarily pause the hash loader .

On the match results stored in the suffix buffer full matching may be performed. In certain exemplary embodiments based on the suffix matching results stored in the suffix buffer it is determined by the firmware the driver or the library whether or not the hash matched data includes a pattern of a virus database i.e. whether or not the hash matched data completely matches a virus pattern . For example such full matching may be implemented using the driver and or the library at the software level of the platform or implemented using the AV firmware at the hardware level of the platform .

Meanwhile when a mismatch occurs at the byte of the i th position while the hash matching operations are performed by the hash loader and the suffix matcher a check for the current position that is the i th position is halted and a check is performed for the next position that is the i 1 th position. For example a hash matching operation may be performed on the three bytes from the i 1 th byte to the i 3 th byte by the hash loader and an additional hash matching operation may be performed on subsequent text by the suffix matcher .

The AV engine repeats the above process until it is notified of the last byte by the firmware e.g. the AV firmware the driver e.g. the driver and or the library e.g. the library .

In the RDMA unit has two Read DMA channels CH0 and CH1 to alternately read stored data. One of the two channels e.g. CH0 is used to read data from an external memory and store the read data in the DMA buffer or the shift table and the other e.g. CH1 is used to refer to a pattern database of the external memory when matching is performed by the suffix matcher . Through the two channels the RDMA unit reads data from the external memory in word units and may operate even for unaligned source addresses. For example the RDMA unit may support up to a 16 burst mode. When the two channels simultaneously request DMA the RDMA unit may process one of the channels e.g. CH1 by priority.

The text loader converts the data that is read and stored in the DMA buffer by the RDMA unit into a 3 byte structure and adds the converted data into the text buffer of the hash loader . For example suppose that buffers in the AV engine can read data in units of 32 bits 4 bytes . When input text of 2048 bytes is scanned the text loader shifts a 3 byte hash window one by one byte for the text that is input in units of four bytes thereby generating 2048 3 byte units. Among the 2048 bytes of the whole text the 2047th byte and the 2048th byte lack one byte and two bytes respectively to constitute the 3 byte hash window. Thus the 3 byte structure is completed by inserting a dummy byte to the last one byte of the hash window in case of the 2047th byte and inserting dummy bytes to the last two bytes of the hash window in case of the 2048th byte. A value of each dummy byte may be 8 hFF.

The hash loader calculates a hash value of the data of the 3 byte structure filling the text buffer and checks whether a match occurs between the data and a certain pattern using the shift table . For example the shift table is a hash table storing a maximum of 65536 1 bit entries. The hash loader indexes a specific bit in the shift table using a hash value calculated from 3 byte data determines that a match has occurred when a value stored in the bit is 0 and determines that a mismatch has occurred when the value stored in the bit is 1. When a match occurs the result is stored in the hash buffer and delivered to the suffix matcher . Subsequently the suffix matcher continuously performs a matching operation for data following the 3 byte data. For example data stored in the hash buffer is as shown in Table 1 below.

When no match occurs in the hash loader no subsequent hash matching is performed by the suffix matcher and the hash loader continuously checks the text in the next hash window.

The suffix matcher reads data stored in the hash buffer and the CRC buffer receives a certain size of text that follows a match position stored in the hash buffer through the RDMA unit and performs hash matching on the text with a virus pattern in the suffix table. When a matching occurs the suffix matcher adds into the suffix buffer a result including the match position. For example the result of the suffix matching may be 50 bit data which may be divided into two pieces of 25 bit data and added to the suffix buffer . One of the two pieces of 25 bit data is an index of an entry in a database storing an actual virus pattern matching with a hash value and the other is an offset with respect to the text position at which a matching has occurred in a memory that stores the text. Subsequently the result data read from the suffix buffer may be expanded to 32 bits and delivered. For example when full matching is performed by the firmware or the library the result data of 32 bits is used for the full matching so that the virus pattern database can be loaded and text can be read from the offset.

The parallel CRC unit may operate at the same speed as the scan speed of the text loader . Every time the text loader stores 3 byte data in the text buffer the parallel CRC unit calculates a 32 bit CRC value of a 32 bit input consisting of 24 upper bits of the 3 byte data and 8 lower bits of 0. The calculated CRC value is added to the CRC buffer every time a match occurs in the hash loader and the result is added to the hash buffer .

For example when a match occurs at the N th 3 byte structured data of the text buffer in the hash matching operation performed by the hash loader the parallel CRC unit stores a CRC value of a total of the four pieces of data i.e. from the N th 3 byte structure to the N 3 th 3 byte structure in the CRC buffer and delivers the CRC value to the suffix matcher . It is possible to store only the 16 upper bits of each CRC value in the CRC buffer and discard the 16 lower bits or vice versa. As a result every time a match occurs in the hash loader one record having a length of 6 bytes is added to the CRC buffer . Consequently the suffix matcher can recognize which record of the hash buffer each record input to the CRC buffer corresponds to.

The AV digest unit calculates a message digest of the whole or a partial section of input text while the input text is being scanned. The AV digest unit may be activated by a user on a needed basis.

When the AV digest unit is activated data read from the text buffer by the hash loader to calculate a hash value may also be input to the AV digest unit so that an operation of calculating a digest can be performed in parallel with a scanning operation. The digest calculation is gradually performed along with the scanning of text and the digest may be provided when the scanning is completed. For example when the AV digest unit operates slower than the hash loader the hash loader may be prepared to scan the next position of input text while the calculation of the AV digest has not yet been finished. In this case the AV digest unit may generate a hold signal to temporarily pause the hash loader .

A digest value calculated by the AV digest unit is stored in the register . The AV digest unit may support algorithms such as MD5 SHA1 SHA256 SHA384 and or SHA512. Among these algorithms MD5 SHA1 and SHA256 are methods of collecting input data in units of 64 bytes to calculate a digest value and SHA384 and SHA512 are methods of calculating a digest value in units of 128 bytes. For this reason according to the length of input text the input text may not fill up a unit block for calculating an AV digest. The unit block may be completely filled up when padding data is input.

The hardware based AM system described above can be implemented in various mobile devices PCs or embedded devices. In particular a mobile device including the AM system can have the following characteristics. Since an AV solution can use a full scan function and several engines on a platform provided by the AM system it is possible to have a malicious code detection rate similar to that of a PC. While a software based mobile security solution mainly prevents infection of malicious codes through an application real time network monitoring and blocking functions can be provided on the above platform and thus it is possible to prevent infection of malicious codes even when an application is updated or downloaded through a network. A virus scanning function provided on the basis of hardware is faster than a software based solution and a hardware based security solution may have increased FW rules compared to a software based firewall so that a reduction in packet throughput can be prevented and a high network transmission rate can be ensured. Also battery use of a mobile device can be reduced compared to a case of using a software based security solution. Furthermore on the aforementioned platform it is possible to easily cope with new malicious codes by updating a database and firmware and in terms of expandability a virus database can be applied by various vendors.

Meanwhile an exemplary embodiment of the present disclosure may include a computer readable recording medium including a program for performing the predetermined methods described herein on a computer. The computer readable recording medium may separately include program commands local data files local data structures etc. or include a combination of them. The medium may be specially designed and configured for the present disclosure. Examples of the computer readable recording medium include magnetic media such as a hard disk a floppy disk and a magnetic tape optical recording media such as a CD ROM and a DVD magneto optical media such as a floptical disk and hardware devices such as a ROM a RAM and a flash memory specially configured to store and perform program commands. Examples of the program commands may include high level language codes executable by a computer using an interpreter etc. as well as machine language codes made by compilers.

In certain exemplary embodiments a computing device having limited resources can provide improved AV performance.

In certain exemplary embodiments operations for providing an AV function are performed at a high speed in a hardware based AV engine and other AV operations are implemented in a software level of a platform including the AV engine so that various security solutions can be provided.

It will be apparent to those familiar with this field that various modifications can be made to the above described exemplary embodiments of the present disclosure without departing from the spirit or scope of the present disclosure. Thus it is intended that the present disclosure covers all such modifications provided they come within the scope of the appended claims and their equivalents.

