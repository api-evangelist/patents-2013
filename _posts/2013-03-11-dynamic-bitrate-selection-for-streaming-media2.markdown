---

title: Dynamic bitrate selection for streaming media
abstract: A bitrate selector on a user device monitors a first stream of a plurality of bitrate media streams of a media file, the first media stream having a first bitrate, these plurality of bitrate media streams comprising a first subset of bitrate media streams including the first media stream and a second subset of bitrate media streams having a bitrate higher than the first bitrate. The bitrate selector calculates an expected download time for a subsequent chunk of the media file in each bitrate media stream of the second subset of bitrate media streams. The bitrate selector selects a bitrate media stream of the second subset of bitrate media streams for the subsequent chunk based on the expected download times and downloads the subsequent chunk from the selected bitrate media stream.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09654528&OS=09654528&RS=09654528
owner: Google Inc.
number: 09654528
owner_city: Mountain View
owner_country: US
publication_date: 20130311
---
This disclosure relates to the field of streaming media and in particular to dynamic bitrate selection for streaming media.

Streaming media is multimedia such as video and audio content which is received by and presented to an end user while being delivered by a streaming provider. With streaming media a client media player can start playing media content before the entire file has been transmitted from a server e.g. over a telecommunications network. For example a user may visit a media streaming website using a web browser running on a personal computing device. The user may play multimedia content including video and audio portions in a media player from the media streaming website. The streaming provider may transmit the audio and video portions of the content to the personal computing device over a network such as the Internet which may be played back in the media player.

Adaptive bitrate streaming is a technique used in streaming multimedia over computer networks. Most adaptive streaming technologies are based on Hypertext Transfer Protocol HTTP and are designed to work efficiently over large distributed HTTP networks such as the Internet. In general a web browser or media player detects the user s bandwidth in real time and adjusts the quality of a media stream accordingly. The web server or media server providing the media stream uses an encoder to encode a single source file at multiple bitrates. The player client switches between streaming the different encodings depending on available resources. Each of the different bitrate streams may be segmented into small multi second chunks. The segment size can vary depending on the particular implementation but they are typically between two 2 and ten 10 seconds. When starting to stream the media data the client typically requests the chunks from the lowest bitrate stream i.e. the lowest quality . If the client finds that the current bandwidth can support a higher bitrate then the client usually request the next higher bitrate chunks. However when multiple processes e.g. in the same or different application are using the network together it may be difficult to determine how much bandwidth is actually available for streaming the media file.

The following is a simplified summary of the disclosure in order to provide a basic understanding of some aspects of the disclosure. This summary is not an extensive overview of the disclosure. It is intended to neither identify key or critical elements of the disclosure nor delineate any scope of the particular implementations of the disclosure or any scope of the claims. Its sole purpose is to present some concepts of the disclosure in a simplified form as a prelude to the more detailed description that is presented later.

In one implementation a bitrate selector on a user device monitors a first stream of a plurality of bitrate media streams of a media file the first media stream having a first bitrate these plurality of bitrate media streams comprising a first subset of bitrate media streams including the first media stream and a second subset of bitrate media streams having a bitrate higher than the first bitrate. The bitrate selector calculates an expected download time for a subsequent chunk of the media file in each bitrate media stream of the second subset of bitrate media streams. The expected download time for the subsequent chunk in each bitrate media stream may be based on a size of the subsequent chunk and at least one of a download rate of a previous chunk of the media file and an average download rate of a plurality of previous chunks of the media file. In one implementation the bitrate selector determines the size of the subsequent chunk by multiplying a playing time of the subsequent chunk and the first bitrate of the first media stream.

The bitrate selector selects a bitrate media stream of the second subset of bitrate media streams for the subsequent chunk based on the expected download times and downloads the subsequent chunk from the selected bitrate media stream. To select one of the plurality of bitrate media streams the bitrate selector selects a highest bitrate from the second subset of bitrate media streams that is less than or equal to a weighted download rate of the subsequent chunk and for which the estimated download time is less than the buffer duration. The bitrate selector may determine the weighted download rate by applying a weighting value to a download rate of the subsequent chunk the weighting value based on a stage of the streaming buffer. The bitrate selector may determine the stage of the streaming buffer by comparing the buffer duration of the chunks of the media file stored in the streaming buffer to a plurality of threshold values where the plurality of threshold values includes at least the first threshold.

Implementations are described for dynamically selecting a bitrate for streaming media. In one implementation chunks of a media file are received at a user device and temporarily stored in a streaming buffer. A media server which provides the chunks may have several available bitrate streams where each stream has a different bitrate. The user device can select which bitrate stream to download subsequent chunks from based on the desire for higher quality e.g. higher bitrate and the desire to avoid buffering events. In one implementation the user device includes a bitrate selector to dynamically determine which bitrate stream to download a next chunk from. The bitrate selector may make this determination based on an estimated download time of the subsequent chunk with the goal of maximizing the quality of the media data while avoiding buffering events.

In one implementation the bitrate selector calculates an estimated download time for the subsequent chunk of the media file from each bitrate stream in a subset of the bitrate streams having a higher bitrate than the current bitrate. Another subset of bitrate media streams may include the current bitrate and streams having a lower bitrate. The estimated download time may be based on a size of the subsequent chunk and the download rates of previous chunks of the media file. The bitrate selector may select a highest bitrate from the available bitrate media streams that is less than or equal to a weighted download rate of the subsequent chunk and for which the estimated download time is less than the current buffer duration i.e. the playing time of the chunks stored in the streaming buffer . The download rate may be weighted based on a stage of the current buffer duration.

The bitrate selection methods described herein can allow a user device to download a media file at the highest bitrate i.e. highest quality available depending on the currently available network bandwidth. The methods can also minimize the risk of buffering events. A buffering event refers to a situation in which chunks of a media file that are buffered in a streaming buffer are exhausted before additional chunks of the media file can be downloaded from the media server . The combination of these two factors can significantly increase the user experience when streaming a media file.

Web server and media server may include a network accessible server based functionality various data stores and or other data processing equipment. The servers and may be implemented by a single machine or a cluster of machines. As illustrated in web server and media server are separate devices. In another implementation however web server and media server may be combined into a single machine or device. One or both of web server and media server may be hosted for example by computer system of . In one implementation web server hosts web page . Web server can deliver web page to user device or another client device using for example the Hypertext Transfer Protocol HTTP . Web page may be part of for example a media content hosting website that allows users to upload view and share multimedia content. Media server may be a dedicated computer appliance or a specialized software application designed to store and share media data such as images music video etc.

In one implementation media server includes one or more media files encoded at multiple bitrates. For example the media file may have different bitrates . The media file may represent the audio and video content that a user plays through web page . For example when a user of user device views web page using a web browser media player or other program running on user device and requests to view a certain multimedia content web server can send a message to media server requesting the media file at one of the multiple bitrates . Media server can initiate streaming of the media file to user device via network . In one implementation the media file is a music video file including both a visual and an audio component. In other implementations however the media file may be some other type of media file. In one implementation user device may additionally include streaming buffer . Streaming buffer may include a region of a physical memory storage used to temporarily hold chunks of the media file data while it is being streamed from media server to user device . Streaming buffer can be implemented in a fixed memory location in hardware or by using a virtual data buffer pointing at a location in the physical memory. Streaming buffer may be used when there is a difference between the rate at which the chunks of media data are received and the rate at which it can be processed i.e. displayed in web browser or a media player .

User device can include a bitrate selector that can dynamically select which of the multiple bitrates to use for streaming subsequent chunks of the media file from media server . In one implementation bitrate selector is part of an operating system of user device . Bitrate selector can for example publish an application programming interface API which can be called by various applications e.g. web browser to select an appropriate bitrate. In other implementations bitrate selector can be part of the application used to stream the media file such as web browser . Bitrate selector can select the bitrate based on the buffer duration i.e. the playing time of the buffered media chunks in streaming buffer and the expected download time of subsequent chunks of the media file. Some implementations of bitrate selector are discussed in more detail below.

In one implementation buffer monitoring module can monitor the status of streaming buffer . For example buffer monitoring module can keep track of the current size or amount of buffered chunks stored in streaming buffer at any given point in time. In one implementation buffer monitoring module may periodically poll streaming buffer to determine the size of the buffered chunks. In one implementation buffer monitoring module may also determine the playing time of the buffered chunks . This may be referred to in some cases as the buffer duration. In one implementation the buffer duration may be determined from metadata associated with the buffered chunks . For example the playing time of each chunk may be stored in the metadata and buffer monitoring module may add together the playing times of all the chunks in streaming buffer to determine the buffer duration. In another implementation each of the buffered chunks may have a fixed duration so that buffer monitoring module can simply count the chunks to determine the buffer duration.

In one implementation buffer monitoring module can compare the buffer duration to one or more thresholds or bounds to determine a stage of the streaming buffer. In one implementation there may be a lower bound used to designate an increasing stage. If buffer monitoring module determines that the buffer duration is less than the lower bound the streaming buffer can be said to be in the increasing stage. In the increasing stage it may be desirable to increase the buffer duration so as to avoid buffering events while playing the media file. A buffering event can occur when the buffered chunks in the streaming buffer are exhausted i.e. played before additional chunks of the media file can be downloaded from media server . In another implementation there may be an upper bound used to designate a decreasing stage. If buffer monitoring module determines that the buffer duration is greater than the upper bound the streaming buffer can be said to be in the decreasing stage. In the decreasing stage there is a sufficient amount of buffered chunks to allow the user device to stream the media file at a higher bitrate. This would provide a higher quality media file but could potentially take longer. It would be unlikely for a buffering event to occur however because the buffer duration is sufficiently long. If buffer monitoring module determines that the buffer duration is between the lower bound and the upper bound it can be said that the streaming buffer is in a maintaining stage. In the maintaining stage the bitrate will likely remain the same in order to maintain the current buffer duration as more buffered chunks are played i.e. removed from streaming buffer while new chunks are added from media server .

In one implementation download rate module can determine the download rate of the buffered chunks in streaming buffer . The download rate may be determined by dividing a size of the chunk e.g. measured in bytes by the download time of the chunk e.g. measured in seconds . The size and download time may both be stored in metadata associated with a buffered chunk and download rate module can read the metadata and then perform the calculations to determine the download rate. In one implementation download rate module may store the calculated download rate in the metadata or as part of chunk data in streaming buffer . In another implementation download rate module may also calculate an average download rate for all or a subset of the chunks of a media file. Download rate module may also be configured to compare the download rate of a particular chunk to the average download rate to determine a lesser of the two download rates. In one implementation download rate module can determine and or update the download rate each time a chunk is received by user device from media server .

In one implementation download rate module may also calculate a weighted download rate for each of buffered chunks . The weighting may be based on the stage of the streaming buffer as determined by buffer monitoring module . In one implementation the download rate may be multiplied by a weighting factor or weighting function to determine the weighted download rate. For example the weighting factor may be 0.5 for the increasing stage 1.0 for the maintaining stage and 1.5 for the decreasing stage. These weighting factors are merely examples and in other implementations some other values may be used.

In one implementation chunk size module can determine the estimated size of next or subsequent chunk to be received at streaming buffer . Chunk size module can determine the chunk size by multiplying the playing time of the chunk measured in seconds by the current bitrate being used to download chunks measured in bits per second . The resulting value may be the size of the subsequent chunk. In one implementation each chunk has a known fixed playing time e.g. 2 seconds and the bitrate can be determined from bitrate selection module .

In one implementation estimated download time module can calculate an estimated download time for a next or subsequent chunk to be received at a streaming buffer . The estimated download time may be used by bitrate selection module to select an appropriate bitrate. The estimated download time may be based on for example the current bitrate a playing time of the chunk and the download rate of the chunk. If there are multiple bitrates available for selection estimated download time module may calculate an estimated download time using each of the bitrates e.g. . In one implementation estimated download time module may divide the size of the subsequent chunk as determined by chunk size module by the lesser of the download rate of the previous chunk and the average download rate of all prior chunks in the media data file. Estimated download time module may store the calculated download time estimates in chunk data .

In one implementation bitrate selection module may select a bitrate to use to download the subsequent chunk based on the estimated download times calculated by estimated download time module . Bitrate selection module may select the highest bitrate which is less than or equal to the weighted download rate as calculated by download rate module and which has an estimated download time that is less than the current buffer duration as calculated by buffer monitoring module . If no chunks satisfy these conditions bitrate selection module may select the lowest available bitrate. In one implementation bitrate selection module may be configured to select or update the bitrate each time a chunk is received by user device from media server . In this manner bitrate selector can download each chunk of the media file at an optimal bitrate so as to avoid buffering events and improve the user experience.

Referring to at block method monitors streaming buffer while user device is streaming a media file from media server . In one implementation buffer monitoring module may periodically poll streaming buffer to determine the buffer duration of the buffered chunks . In one implementation each of the buffered chunks may have a fixed duration so that buffer monitoring module can simply count the chunks to determine the buffer duration.

At block method determines if the buffer duration of the streaming buffer is below a first threshold or bound. In one implementation buffer monitoring module can compare the buffer duration to one or more thresholds or bounds to determine a stage of the streaming buffer. In one implementation there may be a lower bound used to designate an increasing stage. If buffer monitoring module determines that the buffer duration is less than the lower bound the streaming buffer can be said to be in the increasing stage. In the increasing stage it may be desirable to increase the buffer duration so as to avoid buffering events while playing the media file.

If at block method determines that the buffer duration is not below the first threshold method may return to block to continue monitoring streaming buffer . If at block method determines that the buffer duration is below the first threshold i.e. that streaming buffer is in the increasing stage at block method calculates the expected download time for a subsequent chunk or segment of the media file in each of the available bitrate media streams . Some implementations of how bitrate selector calculates the expected download times are discussed in more detail below with respect to .

At block method selects a bitrate based on the expected download times calculated at block . Some implementations of how bitrate selector selects the bitrate are discussed in more detail below with respect to . At block method downloads the subsequent segment at the selected bitrate.

Referring to at block method determines a download rate of a previous chunk of the media file. In one implementation download rate module can determine the download rate of the buffered chunks in streaming buffer . The download rate may be determined by dividing a size of the chunk measured in bytes by the download time of the chunk measured in seconds . The size and download time may both be stored in metadata associated with a buffered chunk and download rate module can read the metadata and then perform the calculations to determine the download rate.

At block method determines an average download rate of all or a subset of the previous chunks in the media file. In one implementation download rate module may calculate an average download rate for all or a subset of the chunks of a media file. The subset may include for example some number e.g. 20 of previous chunks in the media file. In other implementations download rate module may calculate some other representative download rate such as the median rate or the mode rate.

At block method determines a lesser of the previous download rate determined at block and the average download rate determined at block . In one implementation download rate module may compare the download rate of a particular chunk e.g. the most recently download chunk of the media file to the average download rate of the previous chunks to determine a lesser of the two download rates.

At block method selects a first bitrate stream from the available bitrate streams . For example bitrate selection module may identify a first bitrate stream or some other randomly selected bitrate stream. At block method determines a size of a subsequent chunk by multiplying the playing time of the chunk to the bitrate of the identified stream. In one implementation chunk size module can determine the estimated size of next or subsequent chunk to be received at streaming buffer . Chunk size module can determine the chunk size by multiplying the playing time of the chunk measured in seconds by the identified bitrate measured in bits per second . The resulting value may be the size of the subsequent chunk. In one implementation each chunk has a known fixed playing time e.g. 2 seconds and the bitrate can be determined from bitrate selection module .

At block method determines an estimated download time for the subsequent chunk at the first bitrate by dividing the size of the subsequent chunk by the lesser of the download rates determined at block . In one implementation estimated download time module can calculate an estimated download time for a next or subsequent chunk to be received at a streaming buffer . In one implementation estimated download time module may divide the size of the subsequent chunk as determined at block by the lesser of the download rates as determined at block . At block method stores the estimated download time for the first bitrate. Estimated download time module may store the calculated download time estimate for this particular bitrate in chunk data .

At block method determines if there are additional bitrate media streams. If there are additional bitrate media streams method returns to block selects another bitrate media stream and repeats the steps at blocks for each remaining bitrate media stream.

Referring to at block method identifies a current stage of the streaming buffer and identifies the corresponding function value. In one implementation buffer monitoring module can compare the buffer duration to one or more thresholds or bounds to determine a stage of the streaming buffer. In one implementation there may be a lower bound used to designate an increasing stage and an upper bound used to designate a decreasing stage. If buffer monitoring module determines that the buffer duration is less than the lower bound the streaming buffer can be said to be in the increasing stage. If the buffer duration is greater than the upper bound the streaming buffer can be said to be in the decreasing stage. If the buffer duration is between the lower bound and the upper bound it can be said that the streaming buffer is in a maintaining stage. The weighting may be based on the stage of the streaming buffer as determined by buffer monitoring module . For example the weighting factor may be 0.5 for the increasing stage 1.0 for the maintaining stage and 1.5 for the decreasing stage. In one implementation buffer monitoring module may lookup the weighting values from memory in user device . At block method determines the weighted download rate by multiplying the download rate and the corresponding function value. The values may be multiplied by download rate module .

At block method identifies a next highest bitrate from the available bitrate media streams . If this is the first pass through method bitrate selection module may identify the highest available bitrate stream. In subsequent passes method may step down sequentially to the next highest available bitrate stream.

At block method determines if the bitrate is less than the weighted download rate determined at block . In one implementation bitrate selection module compares the identified bitrate to the weighted download rate as determined at block .

If at block method determines that the bitrate is not less than the weighted download rate at block method determines if any lower bitrate media streams are available. If at block method determines that the bitrate is less than the weighed download rate at block method determines if the estimated download time is less than the buffer duration. In one implementation bitrate selection module compares the estimated download time for the identified bitrate as calculated by method described above to the buffer duration as calculated by buffer monitoring module .

If at block method determines that the bitrate is not less than the weighted download rate method returns to block . If at block method determines that the bitrate is less than the weighted download rate at block method selects the current bitrate for use in downloading the subsequent chunk of the media file. If no chunks satisfy the conditions at blocks and bitrate selection module may select the lowest available bitrate.

In one implementation the exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus . Any of the signals provided over various buses described herein may be time multiplexed with other signals and provided over one or more common buses. Additionally the interconnection between circuit components or blocks may be shown as buses or as single signal lines. Each of the buses may alternatively be one or more single signal lines and each of the single signal lines may alternatively be buses.

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium on which is stored one or more set of instructions e.g. software embodying any one or more of the methodologies of functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. The instructions may further be transmitted or received over a network via the network interface device .

The machine readable storage medium may also be used to store instructions to perform a method for dynamic bitrate selection for streaming media as described herein. While the machine readable storage medium is shown in an exemplary implementation to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. A machine readable medium includes any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . The machine readable medium may include but is not limited to magnetic storage medium e.g. floppy diskette optical storage medium e.g. CD ROM magneto optical storage medium read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory or another type of medium suitable for storing electronic instructions.

The preceding description sets forth numerous specific details such as examples of specific systems components methods and so forth in order to provide a good understanding of several implementations of the present disclosure. It will be apparent to one skilled in the art however that at least some implementations of the present disclosure may be practiced without these specific details. In other instances well known components or methods are not described in detail or are presented in simple block diagram format in order to avoid unnecessarily obscuring the present disclosure. Thus the specific details set forth are merely exemplary. Particular implementations may vary from these exemplary details and still be contemplated to be within the scope of the present disclosure.

Reference throughout this specification to one implementation or an implementation means that a particular feature structure or characteristic described in connection with the implementations included in at least one implementation. Thus the appearances of the phrase in one implementation or in an implementation in various places throughout this specification are not necessarily all referring to the same implementation. In addition the term or is intended to mean an inclusive or rather than an exclusive or. 

Although the operations of the methods herein are shown and described in a particular order the order of the operations of each method may be altered so that certain operations may be performed in an inverse order or so that certain operation may be performed at least in part concurrently with other operations. In another implementation instructions or sub operations of distinct operations may be in an intermittent and or alternating manner.

