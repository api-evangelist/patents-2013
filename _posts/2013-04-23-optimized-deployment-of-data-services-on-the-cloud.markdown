---

title: Optimized deployment of data services on the cloud
abstract: Methods, systems, and computer-readable storage media for providing on-demand data services. In some implementations, actions include receiving a request for execution of a data services job, the data services job including interactions between at least one of a plurality of applications hosted on a cloud platform and a plurality of application components within an application hosted on the cloud platform, each application including one or more application schemas, each application schema only being accessible by a respective application component, in response to the request, retrieving the data services job from a job repository, scheduling execution of the data services job by a virtual machine (VM) of a plurality of VMs, the VM being stateless and providing interaction between the at least one of the plurality of applications and the plurality of application components, and executing the data service job using the VM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09329881&OS=09329881&RS=09329881
owner: SAP SE
number: 09329881
owner_city: Walldorf
owner_country: DE
publication_date: 20130423
---
Data can be stored across a plurality of databases. In some examples each database can store data in a respective data schema. Data schemas can be disparate between databases. Cross schema and cross database data access is a long established problem domain and has led to a set of tools collectively providing extraction transformation and loading ETL functionality. Extraction can be defined as a process for retrieving data from a source or set of sources. Transformation can refer to data manipulation such as reformatting error correction normalization of information and the like. Loading can be defined as the delivery of outputs to a target database or set of databases.

A number of products and solutions exist for ETL in conventional on premise landscapes. An on premise landscape can include applications and or data sources that are local to an entity e.g. an enterprise . For example an on premise application is a computer executable application that is locally executed using computing devices that are operated by the enterprise e.g. a company . Existing ETL solutions can require bespoke configuration maintenance and operation.

A direct replication to an on demand landscape or cloud space is considered sub optimal due to potentially low levels of service utilization and the high resource costs of providing large volumes of frequently redundant servers. An on demand landscape can include applications and or data sources that are hosted by a third party service provider e.g. a cloud service provider . For example an on demand application is a computer executable application that is hosted on a platform provided by a service provider and that is remotely accessed by one or more entities e.g. enterprises .

Implementations of the present disclosure include computer implemented methods for providing on demand data services. In some implementations actions include receiving a request for execution of a data services job the data services job including interactions between at least one of a plurality of applications hosted on a cloud platform and a plurality of application components within an application hosted on the cloud platform each application including one or more application schemas each application schema only being accessible by a respective application component in response to the request retrieving the data services job from a job repository scheduling execution of the data services job by a virtual machine VM of a plurality of VMs the VM being stateless and providing interaction between the at least one of the plurality of applications and the plurality of application components and executing the data service job using the VM.

In some implementations each VM of the plurality of VMs includes a data services component that is wrapped in a web application the web application brokering access between data sources during execution of the data service job.

In some implementations the web application receives data service jobs writes connectivity information based on a received data services job executes the received data services job and provides log information indicating a status of the received data services job.

In some implementations the web application deletes connectivity information from the VM in response to completion of the data services job.

In some implementations the VM is only able to access one or more data sources associated with the data services job during execution of the data services job.

In some implementations actions further include during a design time storing the data services job in the job repository the data services job being stored as a computer readable document.

In some implementations the computer readable document provides a mapping between one or more data sources and one or more platform coordinates each platform coordinate indicating a location of an application of the plurality of applications within the cloud platform.

In some implementations actions further include during design time generating a document having a first format and exporting the document to provide the computer readable document the computer readable document having a second format that is different from the first format.

In some implementations the computer readable document includes one or more fragments each fragment representing a particular data source that is to be accessed at run time and one or more tuples each tuple representing coordinates of an application of the plurality of applications within the cloud platform.

In some implementations actions further include transmitting a message to the VM the message including the data service job data source metadata for each data source that is to be accessed during execution of the data services job.

In some implementations the message further includes a name of the data services job a unique identifier and a callback endpoint for receiving log messages from the VM.

In some implementations the data source metadata includes credentials and a resource locator for each data source that is to be accessed during execution of the data services job.

In some implementations actions further include completing execution of the data services job wherein in response to completion of the data services job the VM deletes connectivity credentials associated with the data services job delete the data services job from a repository that is local to the VM and transmits a confirmation message indicating that the VM is reset and is available for execution of a subsequent data services jobs.

The present disclosure also provides a computer readable storage medium coupled to one or more processors and having instructions stored thereon which when executed by the one or more processors cause the one or more processors to perform operations in accordance with implementations of the methods provided herein.

The present disclosure further provides a system for implementing the methods provided herein. The system includes one or more processors and a computer readable storage medium coupled to the one or more processors having instructions stored thereon which when executed by the one or more processors cause the one or more processors to perform operations in accordance with implementations of the methods provided herein.

It is appreciated that methods in accordance with the present disclosure can include any combination of the aspects and features described herein. That is methods in accordance with the present disclosure are not limited to the combinations of aspects and features specifically described herein but also include any combination of the aspects and features provided.

The details of one or more implementations of the present disclosure are set forth in the accompanying drawings and the description below. Other features and advantages of the present disclosure will be apparent from the description and drawings and from the claims.

Implementations of the present disclosure are generally directed to a high utilisation architecture and mechanism for extraction transformation and loading ETL services in an on demand landscape. In some implementations a service can be provided as a stateless appliance and requiring low to no maintenance. As discussed in further detail herein implementations of the present disclosure enable securely managed cross schema data access for applications running on a cloud platform as well as high utilization and efficient use of resources. Implementations of the present disclosure address both design time and run time and provide a robust and secure solution for both.

In some implementations services include an ETL data service a cloud platform service and on demand data services. In some implementations services can each be provided as one or more computer executable programs executed using one or more computing devices e.g. servers .

In some examples the ETL data service provides ETL operations based on a predefined set of instructions or jobs. In some examples a job encapsulates the metadata used to establish connections to a source data schema and a target data schema as well as any transforms that are to be used. In some examples the ETL data service maintains a database schema Job Repository that stores a catalogue of jobs and a job execution history. An example ETL data service can include SAP Data Services provided by SAP AG of Walldorf Germany.

In some examples the cloud platform service is provided as a managed platform that enables the deployment and execution of multi tenant applications. An example cloud platform service can include SAP Netweaver Cloud provided by SAP AG of Walldorf Germany. In some examples each application hosted on the cloud platform has an isolated data schema. In some examples no application hosted on the cloud platform can directly query or otherwise interact with the schema of another application hosted on the cloud platform. Although this is prudent for application and data isolation the performance of meaningful data analysis can be inhibited. For example analytic applications can require a variety of input data sources and an ETL solution would be required to overcome this isolation. As discussed in further detail herein implementations of the present disclosure enable communication between hosted applications while maintaining isolation.

In some examples applications hosted on the cloud platform can be referenced using an abstract coordinate system. In this manner physical redeployment or readdressing of applications can be provided while maintaining transparent logical access. In some examples the coordinate system can also be used to reference the associated schema using a secure persistence service provided by the cloud platform. In some examples the persistence service manages all interaction between applications hosted on the cloud platform and their associated data schemas. In practice the persistence service resolves the coordinate system to an actual database uniform resource locator URL at run time on a per request basis. Consequently any such resolution request results in the correct URL at that moment in time and repeated requests with the same coordinates may result in different URLs as resources are managed by the cloud platform and can be relocated.

In accordance with implementations of the present disclosure on demand data services are provided using a platforms job repository a dispatcher service a data services client library and virtual machines VM provided as stateless run time VMs. Each of these components is discussed in further detail below.

In some implementations the job repository is provided in computer readable memory and is provided on the cloud platform. In some examples the job repository stores ETL jobs and associated coordinate metadata. In some examples the jobs can be retrieved from the job repository at execution time.

In some implementations the dispatcher service is provided as one or more computer executable programs executed using one or more computing devices e.g. servers . In some examples the dispatcher service is provided as a tenant aware service and is provided on the cloud platform. In some examples the dispatcher service securely retrieves jobs from the job repository according to time intervals set by a scheduler component.

In some examples upon retrieving a job from the job repository the dispatcher dereferences the application coordinate system to retrieve the correct database credentials and connectivity information. In some examples the dispatcher maintains a listing of available run time VMs and their respective execution states and dispatches a job to an available VM. In some examples the dispatcher provides a callback mechanism that enables the VMs to provide logging information. In this manner the dispatcher can monitored and record the respective states of execution of the VMs.

In some implementations the data services client library is a utility that is included with each application hosted on the cloud platform that wants to make use of the dispatcher service. In some examples the data services client library is provided as a computer readable document and or a computer executable program that can be integrated with or accessed by hosted applications. In some examples the data services client library handles interaction between a respective application and the dispatcher services.

In some implementations each run time VM is provided as a stateless engine that executes jobs e.g. ETL jobs . In some examples and in this context statelessness differentiates the VMs from a standard data services runtime implementation. More particularly a data services installation on a given host ordinarily includes a repository that stores all jobs and the host also stores all database connections using standard open database connectivity ODBC settings for example. While a single on premise enterprise can rely on such a configuration multi tenant cloud based scenarios cannot.

In accordance with implementations of the present disclosure a standard data services installation is wrapped in a web application that brokers all access. In some examples the web application receives jobs from the dispatcher service dynamically writes the ODBC information executes the job streams log information back to the dispatcher and when the job is complete deletes the connectivity and job information from the host. In this manner the host is returned to the state prior to execution of the job. Consequently and at run time this means that any given VM can only access the databases that have been allocated using the dispatcher service and can only execute the jobs sent by the dispatcher service. Accordingly each VM can be reallocated as soon as execution completes to handle any available job. In this manner each VM has the potential to achieve a utilization rate of 100 .

In some examples each application includes one or more components and each component is associated with a respective dedicated schema . Each component in turn includes one or more bundles . In accordance with implementations of the present disclosure at least one component within a given application includes a data services client library bundle . In some examples the data services client library interacts with a set of tables provided in the associated schema the tables including an application job repository. In accordance with the constraints addressed by the present disclosure no component is able to access the schema of another component and vice versa. More particularly components within the same application are unable to access each other s schemas and components in different applications are unable to access each other s schemas .

The example architecture further includes a plurality of stateless run time VMs . In some examples each VM includes a standard installation of a data services run time as well as a web application to handle interaction with the dispatcher service a data services local repository and a standard operating system level ODBC connectivity service . An example ODBC connectivity service can include unixODBC for Linux.

In accordance with implementations of the present disclosure a plurality of processes are provided that drive run time architectures e.g. the example architecture of . depict example processes that can be executed in accordance with implementations of the present disclosure. The example processes can include a design time process a VM registration process a job scheduling process a dispatcher run time execution process a VM run time execution process and a run time monitoring process .

In some implementations at design time jobs are designed using a data services designer. In some examples a job is provided as an ETL job and includes a plurality of tasks that are to be performed to provide ETL functionality. In some examples the data services designer is provided as one or more computer executable programs executed using one or more computing devices. In accordance with implementations of the present disclosure rather than publishing the jobs to a given data services run time repository the jobs are enhanced with additional metadata and are uploaded to the job repository e.g. the job repository of . In some examples the additional metadata includes the coordinates of the deployed application e.g. the applications of for each data source that has been modeled. In some examples the coordinates can be used at run time to access the associated application schema e.g. the application schemas of .

In further detail data services designer enables jobs to be created and exported in a standard format. An example format includes ATL. For on demand data services in accordance with the present disclosure the jobs are exported e.g. in ATL and the exported job forms the basis of a respective job document e.g. an extensible mark up language XML document . In some examples the job document is encoded to ensure that special characters for example are preserved as well as metadata for each connection defined in the job. For example the job document includes a Base64 encoded version of job export e.g. in ATL .

In some examples ATL documents specify database data sources in terms of data source names DSNs e.g. ODBC DSNs . In some examples each DSN references a specific database schema and can include associated access credentials. In some examples for on demand data services the database schema location is not known at run time. Consequently the job document e.g. XML document includes a mapping for each DSN to a particular set of platform coordinates that can be resolved at run time. In this manner the DSNs are decoupled from the actual databases. The job document e.g. XML document is published to the job repository from which the underlying job can be scheduled for execution.

Each job document can contain many fragments each fragment representing a particular database that is to be accessed at run time. In the example job document the space appliance component tuple triple represents the coordinate system of the deployed application. In some examples this can be resolved to an instance of the corresponding database schema at runtime. In the example job document contains the Base64 encoded version of the job while is the name of the job itself.

Referring now to an example process will be discussed in detail. The example process includes a design time process for creating and publishing jobs to the job repository. A data services job is modeled . For example a designer can model a data services job using a data services design application executed on a computing device. Application coordinates are defined for each data source . A job document is generated . For example the data services design application can generate the job document as a computer readable file based on the model and the application coordinates. In some examples the job document is generated as an XML document. The job document is published to the job repository . For example the job document is stored and indexed in the job repository.

Referring now to an example process will be discussed in detail. The example process includes a process for registering run time VMs that can be used to provide on demand data services in accordance with implementations of the present disclosure.

A run time VM is selected . For example a run time VM can be selected from a pool of run time VMs. In some examples the VM is selected by the dispatcher service. An attempt is made to register the VM with the dispatcher service . For example the VM is associated with a unique identifier ID that the dispatcher service uses to register the VM in an index of registered VMs. In some examples the dispatcher service uses the index of registered VMs to monitor and record the respective states of execution of the VMs during run time as discussed in further detail herein.

It is determined whether the VM is already registered . If the VM is already registered registration is complete and the process exits.

If it is determined that the VM is not already registered the VM is checked . In some examples a VM is queried to determine the status of the various services therein. It is determined whether the VM is operating properly . For example the results of the query to the VM determine whether the VM is operating properly. If the VM is operating properly the VM is registered and a current state of the VM is set to IDLE . If the VM is not operating properly it is determined whether to retry checking of the VM . In some examples a threshold number of attempts can be made to check proper operation of the VM. If the threshold number of attempts has not been achieved it is determined to retry checking of the VM and the example process loops back. If the threshold number of attempts has been achieved the VM is registered and a current state of the VM is set to FAILED and the example process exits.

Referring now to an example process will be discussed in detail. The example process is directed to scheduling a job to be executed by a registered run time VM.

A job e.g. ETL job is selected from the job repository . For example a hosted application can require execution of a particular job and can select a corresponding job from the job repository. In some examples selection of a job is triggered in response to user input received by an application. In some examples each hosted application can access an index of jobs that are available in the job repository. A data services client attempts to import the selected job from the job repository . For example and as discussed above the hosted application that selected the job includes the data services client which attempts the job import. It is determined whether the import was successful . If the import was not successful the import is rejected and the example process loops back.

If the import was successful a schedule type is specified . In some examples scheduling can be set to either an interval based period or to a single immediate execution. If an interval based period is selected a start interval is specified and a period is specified . For immediate execution the job is submitted to the dispatcher . The dispatcher requests database credentials e.g. username password based on the associated DSN . It is determined whether the credentials have been successfully received . If not successful the example process loops back to specify the scheduling parameters. If successful the job is scheduled .

Implementations of the present disclosure further address execution of the dispatcher service at run time. In some examples a dispatcher run time process is initiated when the scheduler e.g. the scheduler of requests that a given job is executed. In some examples the dispatcher e.g. the dispatcher of retrieves the job from the job repository and requests database credentials for each DSN from the persistence service. A set of database URLs and access credentials are provided to the dispatcher in response.

If a run time VM is available e.g. a VM in of the registered VM has a status of IDLE the dispatcher allocates the job to the VM and dispatches a message to the VM. In some examples the message is provided as an XML message that includes the job the database metadata for each DSN the name of the job a unique ID for the specific request and a callback endpoint that will receive log messages from the VM. In some examples the job is encoded in Base64. An example structure of the XML document can be provided as 

In this example there is a element for every DSN which contains the URL username and plaintext password for that database. The element is a unique ID generated by the dispatcher for each execution instance. In some examples the unique ID is used by the URL to match log messages to the particular request for execution. The is the name of the ETL job to be executed and the element contains the job e.g. Base64 encoded .

Once the job has started executing on the run time VM a synchronous response is sent back to the dispatcher confirming that the job is either running or could not be started. If the job is running it is marked as RUNNING otherwise it is marked as either SCHEDULED or FAILED as discussed in further detail below. In some examples upon completion of the job the VM sends a message to the dispatcher. In some examples the message is provided as a reset complete message. In response the dispatcher marks the status of the VM as IDLE indicating that the VM can be allocated to execute another job.

Referring now to an example process will be discussed in detail. The example process is directed to run time execution of the dispatcher.

Execution of a job is requested . A status associated with the job is updated to QUEUED . For example the scheduler updates the job status. It is determined whether a VM is available . For example the dispatcher checks the statuses of the registered VM. IF a status of a registered VM is IDLE the VM is available. If none of the statuses are IDLE a VM is not available. If a VM is not available the dispatcher waits for an available VM . For example the dispatcher can wait until a VM sends a reset complete message discussed above.

If a VM is available the job is dispatched to the VM . For example and as discussed above the dispatcher allocates the job to the VM and dispatches a message to the VM. The status of the job is set to PENDING and the status of the VM is set to ALLOCATED . Consequently the particular VM can be determined to be unavailable for subsequent jobs. It is determined whether a response is received . In some examples a VM that has been allocated a job sends a response confirmation message back to the dispatcher. If the response has not been received it is determined whether the response has failed a threshold number of times . If the response has not failed a threshold number of times the status of the job is set to SCHEDULED and the example process loops back. If the response has failed a threshold number of times the job is set to RESET . In some examples if a RESET state complete message has not been received after a specified period of time the dispatcher pre emptively determines that the job has failed. The fail count is incremented and the VM is returned to an IDLE state if the threshold has not been exceeded . If the threshold has been exceeded the job is set to state RESET .

If the response is received the status of the job and the status of the VM are set to RUNNING . It is determined whether a reset complete message has been received . If a reset complete message discussed above has not been received the example process loops back. If the reset complete message has been received the number of fails is reset and the status of the VM is set to IDLE . In this manner the VM is again available to handle another job.

Implementations of the present disclosure further address execution of the VM at run time. In some examples VMs interact with the dispatcher through an interface. An example interface includes a representational state transfer REST ful web interface. In some examples when a job is dispatched to a VM the VM receives a message from the dispatcher e.g. the XML message discussed above . In some examples the VM extracts the DSN information for each data source listed in the message and writes new ODBC entries for each data source. In some examples the VM decodes the Base64 version of the ATL job discussed above. At design time when the job was defined the usernames and passwords that are used at run time were unknown. Consequently the VM rewrites these entries to match credentials that had been retrieved by the dispatcher from the persistence service. In some examples the data services run time can require that all passwords are encrypted using its own encryption service. In some examples encryption can be performed for each password prior to rewrite. A rewritten document ATL document is published to the data services local repository of the VM e.g. the data services local repository of .

In some implementations the VM requests that the job is executed by the data services runtime. The data services runtime provides a response that includes a process ID for the executing job. In some examples the VM initiates a separate monitor thread that can use the process ID to monitor execution for the job. The VM sends a synchronous response to the initial message from the dispatcher confirming that the job has started. If for example the job could not start the synchronous response instead includes an appropriate error message.

Referring now to an example process will be discussed in detail. The example process is directed to run time execution of the VM.

A request is received from the dispatcher . For example the dispatcher provides a REST call to a selected VM to assign execution of a job to the VM. DSN information is extracted . For example the VM extracts DSN information from the message e.g. XML message . Connectivity information ODBC connectivity information is written for each DSN . The ATL document is decoded and tenantIDs are rewritten . Usernames are extracted and the ATL document is rewritten to include the usernames . Passwords are extracted . The passwords are encrypted and the ATL document is rewritten to include the encrypted passwords . The ATL document is published to the data services local repository and the job is executed . A monitoring thread is started and a response is sent to the dispatcher .

Implementations of the present disclosure further address monitoring execution of the job. In some examples when a VM has successfully started executing a job the VM initiates a monitor thread that can poll for updates and send information back to the dispatcher. In some examples the monitor thread uses the process ID of the job and the response endpoint specified by the dispatcher. In some examples and based on a pre defined polling interval the monitor thread requests trace and error logs from the data services runtime and generate a response e.g. in XML based thereon. The responses are sent the dispatcher response endpoint. In some examples if the overall state of the job comes back as COMPLETE FAILED or WARNING the monitor thread begins resetting the state of the VM by deleting any ODBC credentials that have been set by the job and by deleting the job itself from the data services local repository. Once this is complete the VM sends a final response the reset complete message to the endpoint the dispatcher confirming that the VM has been reset and is available for future jobs.

Referring now to an example process will be discussed in detail. The example process is directed to monitoring run time execution of a job.

A monitor request is received . The data services run time is polled for log data . Log entries received in response to a poll request are sent to the dispatcher . It is determined e.g. from the log entries whether the state of job execution is COMPLETE FAILED or WARNING . If it is determined that the state of job execution is none of COMPLETE FAILED or WARNING the example process loops back. If it is determined that the state of job execution is any of COMPLETE FAILED or WARNING the connectivity settings ODBC connectivity settings are reset the job is deleted from the data services local repository and a reset complete message is sent to the dispatcher .

Referring now to a schematic diagram of an example computing system is provided. The system can be used for the operations described in association with the implementations described herein. For example the system may be included in any or all of the server components discussed herein. The system includes a processor a memory a storage device and an input output device . The components are interconnected using a system bus . The processor is capable of processing instructions for execution within the system . In one implementation the processor is a single threaded processor. In another implementation the processor is a multi threaded processor. The processor is capable of processing instructions stored in the memory or on the storage device to display graphical information for a user interface on the input output device .

The memory stores information within the system . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit. In another implementation the memory is a non volatile memory unit. The storage device is capable of providing mass storage for the system . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device. The input output device provides input output operations for the system . In one implementation the input output device includes a keyboard and or pointing device. In another implementation the input output device includes a display unit for displaying graphical user interfaces.

The features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Elements of a computer can include a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer can also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

A number of implementations of the present disclosure have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the present disclosure. Accordingly other implementations are within the scope of the following claims.

