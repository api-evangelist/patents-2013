---

title: Systems, methods and techniques for polymorphic queries
abstract: Techniques for providing polymorphic query requests. A request is received that has at least a database query. The database query comprises at least an expression using a polymorphic relationship. The request is processed utilizing the polymorphic relationship. A user-readable result is provided for the query where the result is defined by at least the polymorphic relationship.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09442974&OS=09442974&RS=09442974
owner: salesforce.com, inc.
number: 09442974
owner_city: San Francisco
owner_country: US
publication_date: 20130829
---
This application claims priority to Provisional U.S. Patent App. No. 61 697 045 filed on Sep. 5 2012 entitled System and Method for Optimizing the Result of a Database Operation which is incorporated herein by reference in its entirety and for all purposes.

Embodiments relate to database operations. More specifically embodiments relate to techniques to provide a more useful and efficient results from one or more database operations.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also correspond to implementations of the claimed inventions.

With ever growing organizations using huge databases it is challenging to handle very large query requests require complex data process. Moreover these organizations are seeking efficient ways of ensuring that unusually large query requests do not tie up the system and interrupt smooth execution of other queries.

Traditional query languages with large queries do not currently have a mechanism to apply polymorphism to very large queries and make the code more efficient and database processing faster and effective.

In the following description numerous specific details are set forth. However embodiments of the invention may be practiced without these specific details. In other instances well known circuits structures and techniques have not been shown in detail in order not to obscure the understanding of this description.

Given the shortcomings set forth above an opportunity arises to provide an efficient and effective system and method for handling very large queries by using polymorphism relationships that will provide users with great experience and increase their engagement.

The technology disclosed herein is related to enhancing large queries in for example salesforce Object Query Language SOQL with support for selection of data using polymorphic relationships by adding in one embodiment a TYPEOF expressions added to the SOQL SELECT clause. In one embodiment TYPEOF expressions can function as a case expression that can allow the user to specify the fields of a related parent object that are to be selected based on the type of the parent object.

In another implementation the technology disclosed herein involves selecting different fields from a target of a polymorphic reference based on the target type. For example while using a user interface abbreviated UI when a user chooses the type as account for the what tab the system can automatically select relevant information such as the name website or billing city associated with the account. In case if the user chooses the type as opportunity for the what tab the system can select the critical information related to that opportunity including its name account name and the amount. This technology can be used to reduce latency especially in mobile environments by instrumenting a single very large query such as salesforce object query language abbreviated SOQL .

In one implementation the technology disclosed herein includes a special form of a so called CASE expression that can be added to an SOQL SELECT clause. This implementation allows query authors to select a particular set of fields based on the runtime type of a polymorphic reference. The CASE expression can begin with the keyword TYPEOF and can conform to the BNF style grammar 

In one embodiment the SELECT clause can be extended. The following is one example of use of the extended SELECT clause.

The TYPEOF expression includes field that can denote a polymorphic relationship field. The field can be evaluated at runtime and the type of the related entity can be compared against the type name listed in each WHEN clause. The type name that matches determine the list of fields that can be populated in the related parent entity. The fields in the matching WHEN clause s can be populated and a list containing the values can be returned as the value of the TYPEOF expression.

The elements in the returned list can be concatenated to the SELECT clause s and mapped to an object result using the usual conventions for mapping entries in the select list to object results. The TYPEOF expressions can be used in the SELECT clause of an object query. An optional can be used to specify a list of fields that are returned when there is no matching . The used for the may only contain path expressions that are valid for the name entity. If no is specified and there is no matching the reference to the parent entity can be set to null. The argument can provide implicit context for the path expressions in each WHEN clause s and thus can be implicitly appended to each path name to determine the field that is selected as illustrated by the following example.

The example above includes a query that selects the id description and related what parent entity for all events. For example if the what tab references an account then the name phone website and billing city fields of the referenced account can be populated. If what references an opportunity then the name account.name amount and stage name fields of the referenced opportunity can be populated.

In one embodiment if what does not reference either an account opportunity or contact then the name phone and e mail fields of the name entity can be selected. Each type name in the WHEN section can be unique and include a valid type for the polymorphic reference field. Otherwise an error can be generated. The custom fields may appear in the WHEN clause and path expressions as illustrated below.

It may be noticed that the field lists may become repetitive. In one embodiment the implicit context rule can be used to eliminate this repetitiveness. Since implicit context may not be optional the query may be invalid. This example is included only to illustrate how implicit context can work in SOQL TYPEOF expressions.

In another implementation the technology disclosed herein includes filtering and selection based on the polymorphic type. The query in immediately above can select events that reference an account opportunity or contact via what . The fields that are selected for each case can be determined by the TYPEOF expression as illustrated above. Other types besides account opportunity and contact may appear in the WHEN section.

There can exist inconsistency between the WHERE and SELECT clauses because in the WHERE clause type names are strings while in the SELECT clause they are proper type names. In yet another implementation the technology disclosed herein introduces a new TYPE function that may remove this inconsistency.

In one embodiment the new TYPEOF expression can be used in nested child sub queries for the new many who feature to work well with polymorphic relationships. In another implementation the TYPEOF expression can be used for retrieving data using a separate query. The additional queries can count towards governor limits just like regular foreign key relationship queries. In another implementation multiple TYPEOF expressions may appear in the same SELECT clause.

In another implementation the technology disclosed herein includes filter expressions in the WHERE clause which can be consistent with TYPEOF expressions in the SELECT clause. This implementation allows adding a new TYPE function. TYPE can return the type such as account or contact of its path expression argument. The path expression can denote a polymorphic reference field such as event.what case.owner and etc.

In another implementation the TYPE function can be used to create type restriction expressions which restrict or constrain the set of allowed types of a polymorphic reference field. Type restriction expressions may appear in the WHERE clause. The example below illustrates the selection of all events whose what field references an account.

More specifically the query above can select the id and description fields of all events whose what field reference an account. The type restriction expression in the where clause can also be used to match the events that reference to an account via their what field. The example below is an alternative formulation of the query immediately above.

The range variable e of the query above can be declared explicitly and used in the type restriction expression as illustrated below. Here the range variable w an alias for the event.what field can be declared explicitly in the FROM clause and used in the WHERE clause.

In another implementation a user can create a filter based on a set of types. The following example depicts a query that selects only events with what field referencing to an account contact or opportunity. Each element of the list can be unique and a valid type for event.what .

The following example illustrates a query with restriction expressions that are combined using standard logical operators. The following query can select events with what and who fields both referencing an account.

The following example query illustrates the use of disjunction to combine type restriction expressions. It can select events with what or who fields both referencing an account.

In one embodiment type restriction expressions can be combined with regular filter expressions in the WHERE clause. The following example query can select events with what field referencing an account or activity date filed referencing to today.

In another implementation the type of a polymorphic reference can also be selected. For example the following query can select the id description and the type of the what field for all events.

The following table depicts example results of the performance of above described queries. It may be noticed that the result of the TYPE function can be implicitly converted to string when it appears in the SELECT clause.

In yet another implementation the technology disclosed herein allows aggregation of expressions based on types. For example the following example query can count the number of events that reference account opportunity etc. via what and producing results depicted following the example query.

In yet another implementation the technology disclosed herein allows general TYPE expressions in the WHERE clause. For example the following example query can select the events with the same type of what and who fields.

The example of illustrating the use of technology disclosed herein in database environment such as SOQL should not be taken as limiting or preferred. This example sufficiently illustrates the technology disclosed without being overly complicated. It is not intended to illustrate all of the technologies disclosed. For instance it does not illustrate use of query paging and optimization in SOAP REST queryMore UnQL YQL QUEL and other query languages and APIs.

Accordingly these implementations can save valuable computation time and are suited for use with devices with a small form factor limited interactive capability limited display size limited memory or storage capacity limited processing power and short battery life and or with networks that have are not consistently available slow data transfer rates erratic data transfer services and no consistent standards with data having massive quantity and that is not organized for mobile users with users that have short attention spans no patience are on the move and are routinely in awkward or limited usage situations and with managers who have security concerns and where applications devices and users require a new management layer.

In one embodiment to provide the functionality described herein queries may be handled in batches. In one embodiment a high level query e.g. SOQL query can be broken down into multiple queries to a relational database. This can for example reduce the total number of queries performed. In one embodiment a limited number of events can be selected and relational database queries for the limited number of events can be performed and a subsequent batch of queries can be performed for a different set of events. The batching techniques described herein are particularly useful with the TYPEOF clause.

A query is performed for a batch of entities . In one embodiment for each batch a single query e.g. SQL query can be used to retrieve all of the related entities of each type. This is more efficient than querying for each related entity individually.

When a query is completed the next related entity in the relationship is processed to generate query related entity data . In one embodiment for each related entity a relationship is created between the original and corresponding related entity .

If there are more related entities in the current relationship then the next related entity in the relationship is processed . If there are no more related entities in the current relationship then the system determines if there are more batches to process . If there are more batches to process then the next batch query is processed . If there are no more batches to process then the query handling is complete.

Electronic system includes bus or other communication device to communicate information and processor coupled to bus that may process information. While electronic system is illustrated with a single processor electronic system may include multiple processors and or co processors. Electronic system further may include random access memory RAM or other dynamic storage device referred to as main memory coupled to bus and may store information and instructions that may be executed by processor . Main memory may also be used to store temporary variables or other intermediate information during execution of instructions by processor .

Electronic system may also include read only memory ROM and or other static storage device coupled to bus that may store static information and instructions for processor . Data storage device may be coupled to bus to store information and instructions. Data storage device such as a magnetic disk or optical disc and corresponding drive may be coupled to electronic system .

Electronic system may also be coupled via bus to display device such as a cathode ray tube CRT or liquid crystal display LCD to display information to a user. Alphanumeric input device including alphanumeric and other keys may be coupled to bus to communicate information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys to communicate direction information and command selections to processor and to control cursor movement on display .

Electronic system further may include network interface s to provide access to a network such as a local area network. Network interface s may include for example a wireless network interface having antenna which may represent one or more antenna e . Network interface s may also include for example a wired network interface to communicate with remote devices via network cable which may be for example an Ethernet cable a coaxial cable a fiber optic cable a serial cable or a parallel cable.

In one embodiment network interface s may provide access to a local area network for example by conforming to IEEE 802.11b and or IEEE 802.11g standards and or the wireless network interface may provide access to a personal area network for example by conforming to Bluetooth standards. Other wireless network interfaces and or protocols can also be supported.

IEEE 802.11b corresponds to IEEE Std. 802.11b 1999 entitled Local and Metropolitan Area Networks Part 11 Wireless LAN Medium Access Control MAC and Physical Layer PHY Specifications Higher Speed Physical Layer Extension in the 2.4 GHz Band approved Sep. 16 1999 as well as related documents. IEEE 802.11g corresponds to IEEE Std. 802.11g 2003 entitled Local and Metropolitan Area Networks Part 11 Wireless LAN Medium Access Control MAC and Physical Layer PHY Specifications Amendment 4 Further Higher Rate Extension in the 2.4 GHz Band approved Jun. 27 2003 as well as related documents. Bluetooth protocols are described in Specification of the Bluetooth System Core Version 1.1 published Feb. 22 2001 by the Bluetooth Special Interest Group Inc. Associated as well as previous or subsequent versions of the Bluetooth standard may also be supported.

In addition to or instead of communication via wireless LAN standards network interface s may provide wireless communications using for example Time Division Multiple Access TDMA protocols Global System for Mobile Communications GSM protocols Code Division Multiple Access CDMA protocols and or any other type of wireless communications protocol.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein.

A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator.

In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared.

In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network .

Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units.

A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B .

As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks.

As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data.

Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API .

A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. provisional patent application Ser. No. 30 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers .

In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields.

For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

While the invention has been described in terms of several embodiments those skilled in the art will recognize that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting.

