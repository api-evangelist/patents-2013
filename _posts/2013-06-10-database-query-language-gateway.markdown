---

title: Database query language gateway
abstract: A method includes receiving a query request, generating a modified query in a database query language by modifying a stored query in the database query language based on the query request, and transmitting the modified query to a database endpoint. The method includes receiving query results in the database query language and converting by the processor the query results from the database query language to a format usable by a reporting engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384248&OS=09384248&RS=09384248
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09384248
owner_city: Armonk
owner_country: US
publication_date: 20130610
---
The present application is a continuation of U.S. patent application Ser. No. 13 494 153 filed Jun. 12 2012 currently issued as U.S. Pat. No. 9 183 265 which is hereby incorporated by reference in its entirety.

The present invention relates to a database query language gateway and more specifically to a gateway configured to convert a query request to a modified SPARQL Protocol and RDF Query Language SPARQL query and SPARQL query results to a reporting engine format.

Reporting engines receive data in a predetermined format and generate reports usable by users and systems using the data. Resource Description Framework RDF has emerged as a powerful tool for linking data and RDF data may be stored and queried in a database to access the RDF data. SPARQL protocol and RDF query language SPARQL is a language that allows a user or system to access and query RDF data stored in a database and are defined by the World Wide Web Consortium W3C . However reporting engines may not be capable of receiving generating managing or interpreting SPARQL data and the reporting engines may thus be unable to generate reports based on RDF data stored in a database.

According to one embodiment of the present disclosure a database query gateway includes a query request interface configured to receive a query request and extract query parameters from the query request a database endpoint interface configured to modify a stored query based on the query parameters to transmit the modified query to a database endpoint and to receive from the database endpoint query results based on the modified query and a reporting engine interface configured to convert the query results into a reporting engine format.

According to another embodiment of the present disclosure a system includes a database query endpoint including a database configured to store relational data and a gateway configured to receive a query request in a first format to modify by a processor a stored query in a database query language based on query parameters of the query request to generate a modified query to transmit to the database query endpoint the modified query to receive from the database query endpoint query results in the database query language and to convert the query results from the database query language into a format usable by a reporting engine.

According to another embodiment of the present disclosure a method includes receiving a query request generating by a processor a modified query in a database query language by modifying a stored query in the database query language based on the query request transmitting the modified query to a database endpoint receiving query results in the database query language and converting by the processor the query results from the database query language to a format usable by a reporting engine.

According to yet another embodiment of the present disclosure a computer program product includes a processor and memory. The memory is configured to store a computer program executable by the processor to perform a method. The method includes receiving a query request generating by a processor a modified query in a database query language by modifying a stored query in the database query language based on the query request transmitting the modified query to a database endpoint receiving query results in the database query language and converting by the processor the query results from the database query language to a format usable by a reporting engine.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features refer to the description and to the drawings.

Embodiments of the present disclosure provide a database query language gateway configured to convert query parameters into a query of a database query language query and to convert query results to a reporting engine format to allow a reporting engine to generate a report based on the database query results.

It is understood in advance that although this disclosure includes a detailed description on database queries in a network environment implementation of the teachings recited herein are not limited to a network environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Referring to a database query system includes a database a database query endpoint a gateway and one or more reporting engines and .

The gateway receives a query request and modifies a query in a database query language based on the query request. As illustrated in query request devices include a user interface device including a user input and a display . Examples of user interface devices include personal desktop computers laptops mobile computing devices such as personal data assistants tablet computers smartphones or any other device capable of receiving a user input converting the user input to a digital signal in the form of a query request and transmitting the query request to the gateway .

In one embodiment the user interface device is configured to provide a web user interface which may be displayed on the display and with which the user may interact via the user input . The user may configure the gateway with the web user interface.

Another example of a query request device is a computer which generates a query request as a result of an operation of a query request program and not based on a user input. The computer may include a processor memory and a data interface to interface with the gateway . The query request program may be a software program stored in memory and executed by the processor to generate a query request at a certain time and having a pre programmed query object. In other words a query request may be generated based on a user input from a user interface or automatically in the process of an executing program being executed by a computer . In one embodiment the computer uses a REST application programming interface API to configure the gateway .

Reporting engines and include report generators and respectively configured to generate reports. In particular reporting engines and are configured to receive raw data and organize the raw data into a predetermined reporting format for storage display printing or performing any other process. The report may be for example an html file a pdf file word processing document image document any other electronically storable file or any displayable file.

In embodiments of the present disclosure the user interface computer and reporting engines and may be part of the same device or may be separate devices. For example the computer may not represent a separate device from the user interface but rather that the computer generates the query request without use of the user interface . The query request may be generated using software or hardware corresponding to the reporting engines or . For example a user may open a program utilizing the reporting engine on a computer and may use the user interface to generate a query in the program utilizing the reporting engine .

The gateway receives the query request at a query request interface including any query search terms and modifies a pre stored query in a database query language to generate a query based on the query search terms of the query request. The gateway transmits the query to the database query endpoint via the endpoint interface . The database query endpoint receives the query in the database query language at a query interface . The database interface queries the database based on the search terms in the query and outputs the results to a query results generator which generates query results. The query results are transmitted from the query interface to the gateway where a reporting engine interface converts the query results to a reporting engine language to communicate with one or more reporting engines or .

In embodiments of the present disclosure the query request interface the endpoint interface and the reporting engine interface may be software programs stored in memory and executed by a processor to perform interfacing data processing data conversion and other operations. In addition any one or more of the query request interface the endpoint interface and the reporting engine interface may include a processor memory and any supporting logic required to execute the interfacing data processing data conversion and other operations. In one embodiment one or more of the query request interface the endpoint interface and the reporting engine interface may share a processor or memory and in an alternative embodiment one or more of the query request interface the endpoint interface and the reporting engine interface may include separate hardware including a processor memory and logic circuitry. In one embodiment the gateway includes local storage that may be accessed by one or more of the query request interface the endpoint interface and the reporting engine interface . For example the local storage may query and endpoint resources.

In addition in embodiments of the present disclosure the database interface the query results generator and the query interface may be software programs stored in memory and executed by a processor to perform interfacing data processing query response generation database searching data conversion and other operations. In addition any one or more of the database interface the query results generator and the query interface may include a processor memory and any supporting logic required to execute the interfacing data processing query response generation database searching data conversion and other operations. In one embodiment one or more of the database interface the query results generator and the query interface may share a processor or memory and in an alternative embodiment one or more of the database interface the query results generator and the query interface may include separate hardware including a processor memory and logic circuitry.

The gateway converts the query results into a reporting engine language with the reporting engine interface and outputs the query results in the reporting engine language. A reporting engine may receive the query results directly from the gateway in the reporting engine language and may generate a report including the query results with a report generator . The report may be for example an html file a pdf file word processing document image document any other electronically storable file or any displayable file.

The reporting engine may be incapable of generating a report based directly on the reporting engine language output by the gateway . Accordingly the reporting engine may include a driver between the reporting engine and the gateway to convert the reporting engine language into a second reporting engine language capable of being used to generate a report by the report generator .

Accordingly as illustrated in embodiments of the present disclosure provide a gateway configured to receive a query request from one or more sources including a user and a computer program to generate a query and transmit the query to a database query endpoint and to convert a resulting query response into a format readable or convertible by one or more reporting engines and .

Embodiments of the present disclosure include a SPARQL protocol and RDF query language SPARQL gateway. In one embodiment the SPARQL gateway is a software component that enables reporting on Linked Data sources. Linked Data uses Resource Description Framework RDF as the data mode for describing resources.

A client of a development tool may request an RDF representation of any development artifact via an HTTP GET request that contains an Accept header for an RDF media type. The representations of many development artifacts from many tools may be stored in an RDF database known as a triple store which integrates the data and enables queries across all the data using the RDF query language SPARQL.

A query parameter collection unit is configured to extract query parameters or conditions from a query request. A query resource unit includes one or more query resources that associate a predefined SPARQL query with an endpoint resource. Each query resource is used to send a query to the endpoint resource to obtain query results and each query resource may refer to exactly one endpoint resource.

A translation unit is configured to translate query parameters from a query request into a modified query using a predefined SPARQL query of the query resource unit . In addition the translation unit is configured to translate query results into a format usable by a reporting engine. An endpoint resource unit stores one or more endpoint resources including a URL of a SPARQL query service and any credentials such as user ID s passwords etc. necessary to access the SPARQL query service via the URL.

The gateway of may be configured by a user or by a computer program. When configured by a user the user may use a Web user interface to configure the gateway . When configured by a computer program the program may use a REST application API.

In operation the control unit receives from a reporting engine or other query generating device or program a query request including query parameters and a data service URL. The query parameters may be part of the request sent to the data service URL. The query parameter collection unit obtains the query parameters from the request and the control unit retrieves from the query resource unit a SPARQL query associated with the data service URL.

The query parameter translation unit translates the incoming query parameters into SPARQL filter statements that are added to the SPARQL query stored in the query resource unit . In other words in one embodiment the gateway does not generate the query from scratch but rather modifies a stored SPARQL query of a query resource in the query resource unit to include conditions defined by the query parameters of the query request.

The control unit transmits the query including any necessary credentials to the URL defined by the query and receives in response query results from an endpoint such as the database query endpoint of . The query parameter translation unit converts the query results into a format usable by a reporting engine and transmits the query results to the reporting engine.

In particular the SPARQL gateway includes a SPARQL interface a reporting engine interface and a query request interface . The SPARQL gateway may correspond to the gateway of of . The query request interface receives a query request from the query request unit . The query request unit may include a user input unit such as a personal computer or a program executed by a computer. The query request unit may correspond to the user interface or the computer of .

Upon receipt of the query request from the query request unit the SPARQL interface modifies a stored SPARQL query and transmits the modified SPARQL query to the SPARQL endpoint . The SPARQL endpoint includes a SPARQL interface to receive the SPARQL query and to access the RDF triples containing RDF data based on the modified SPARQL query. The SPARQL interface returns query results as SPARQL data to the SPARQL interface . Upon receipt of the SPARQL data the gateway converts the SPARQL data with the reporting engine interface to a language corresponding to one or more reporting engines. In one embodiment the reporting engine interface converts the SPARQL query results into Plain Old XML PDX transmitted over REST REST PDX . In one embodiment the gateway includes local storage that may be accessed by one or more of the query request interface the endpoint interface and the reporting engine interface . For example the local storage may query and endpoint resources.

In an embodiment illustrated in reporting engines include a Business Intelligence and Reporting Tools BIRT engine a Rational Publishing Engine RPE a Cognos engine and a Microsoft Office program such as Excel . The SPARQL gateway transmits the REST PDX data to one or more of the BIRT engine the RPE and the Cognos engine which are configured to receive the REST PDX data and to generate a report based on the query results using the REST PDX data. In one embodiment the BIRT engine RPE and Cognos engine are incapable of generating a report using SPARQL data directly. Accordingly the gateway generates the SPARQL query and converts the query results to a REST PDX language accessible by the BIRT engine RPE and Cognos engine .

The BIRT engine may include data storage including templates for generating reports and a data processor for receiving query results and applying the query results to a BIRT template to provide a BIRT report. The BIRT engine may further include or be connected to a driver to convert XML data output from the SPARQL gateway into Java Database Connectivity JDBC data readable by the BIRT engine .

The RPE may directly receive the REST PDX data and may include data storage including templates and a data processor to apply the REST PDX data to the templates to generate an RPE report.

The Cognos engine may include data storage including templates for generating reports and a data processor for receiving query results and applying the query results to a Cognos template to provide a Cognos report. The Cognos engine may further include or be connected to a driver to convert XML data output from the SPARQL gateway into Open Database Connectivity ODBC data readable by the Cognos engine .

In one embodiment of the present disclosure the reporting engines and the query request unit the SPARQL gateway and the SPARQL endpoint all include computer programs executed by a processor and including supporting logic and are all located on separate computers or in separate devices. The SPARQL data the query request and the query results may all be transmitted via a network such as a wired network or a wireless network. In another embodiment two or more of the reporting engines and the query request unit the SPARQL gateway and the SPARQL endpoint are located on a same computer or in a same device. For example a user computer program or reporting engine may generate a query request from a computer terminal and may access a server via a network to generate query parameters. The computer terminal may transmit the query request including query parameters to the server to generate a modified query in the server. Query results may be transmitted from the server back to one or more reporting engines or located in the computer terminal.

In yet another embodiment each of the query request unit the SPARQL gateway and the reporting engines and may be located stored and or executed in the same computer terminal. The computer terminal may transmit a modified SPARQL query to the SPARQL endpoint via a wired or wireless network.

In one embodiment the SPARQL gateway is a web application. In one embodiment the web application is implemented as a Java servlet although embodiments of the present disclosure encompass any appropriate web technology to execute the web application. The SPARQL gateway may provides a REST Application Programming Interface API and a web User Interface UI for managing all of its resources. These include SPARQL endpoints and SPARQL queries. The REST API and web UI support the creation modification deletion and retrieval of the resources managed by the SPARQL gateway . The web UI delegates actions to the REST API.

The SPARQL gateway may have a base Uniform Resource Identifier URI which represents the SPARQL gateway application as a whole. An HTTP GET request may be configured to return useful information about the SPARQL gateway and links to its main resources. The response may be configured to be either HTML or RDF depending on an Accept header. If HTML is requested then the SPARQL gateway may provide a very simple user interface for managing the SPARQL gateway and accessing its resources. For example a SPARQL gateway base URI may be 

The gateway may manage a set of SPARQL endpoints . Each SPARQL endpoint may have a URI that supports the SPARQL protocol. The SPARQL gateway manages other descriptive information about each SPARQL endpoint e.g. a title and description so that users may easily select the SPARQL endpoint that they want to query. An example URI for a set of SPARQL endpoint descriptions may be 

An HTTP GET request on the SPARQL endpoint set URI gives a list of the endpoint descriptions. An HTTP POST to this URI creates a new endpoint description. A URI of a SPARQL endpoint description may be 

A SPARQL endpoint description may be retrieved modified and deleted by sending HTTP GET PUT and DELETE requests to its URI. The SPARQL gateway manages a set of SPARQL queries. These may be written by hand or generated by some other tool. The SPARQL gateway assigns each query a URI which supports the Reportable REST API. A URI for the set of queries may be 

An HTTP GET request on the query may give a list of the queries. An HTTP POST to this URI creates a new query. A URI of a query may be 

A query may be retrieved modified and deleted by sending HTTP GET PUT and DELETE requests to its URI. The SPARQL gateway may make the query behave as a Reportable REST data service. The URI for the data service defined by query 42 may be 

The SPARQL gateway may manage some metadata about each SPARQL query. This metadata may be inferred by parsing the SPARQL query or it may be provided explicitly with the SPARQL query or by an administrator. For example when a SPARQL query is a SELECT query the metadata may include the names and data types of the columns of the result set. The SPARQL gateway may use this metadata to generate an XML Schema to describe the Reportable REST result. It also uses this metadata to generate other artifacts as described below. The URI of the XML schema that describes the Reportable REST data service for query 42 may be 

When the SPARQL gateway receives an HTTP request on a Reportable REST URI associated with a SPARQL query it may perform the following functions 1 The SPARQL gateway parses the query parameters on the request URI. These query parameters may be in an XPath syntax defined by the Reportable REST specification. The query parameters specify filtering conditions. 2 The SPARQL gateway may transform the XPath filtering conditions into SPARQL graph patterns and adds then to the WHERE clause of the SPARQL query. 3 The SPARQL gateway may send the modified SPARQL query to the SPARQL endpoint . 4 The SPARQL gateway may receive the result of the SPARQL query. 5 The SPARQL gateway may transform the result of the SPARQL query into an XML format that is conformant with the Reportable REST specification and returns it in the HTTP response.

Accordingly the SPARQL gateway may provide a means of providing query results from a SPARQL query to a reporting engine to allow the reporting engine which may not have a SPARQL compatibility to generate a report based on the SPARQL query.

The system may also include one or more servers or computers to run programs to generate query requests. The computer may run the programs to generate query requests without a user input. For example a computer readable medium such as a disk or solid state memory device including a computer program configured to generate a query request may be provided to the computer to control the computer to automatically generate the query request without user input.

The system may include a gateway or . The gateways and may be computer programs stored in memory and executed by a processor and may correspond to the gateways and of respectively. The gateway may be part of a computer connected to the network and may be in a separate device or computer than the user controlled computer the computer and the host systems and . The gateway may be accessed by the user controlled computer or computer via the network and may transmit query results to the reporting engine via the network .

The system may include one or more host systems . The host system may comprise a computer server local area network LAN or other assembly including a gateway and a reporting engine . The host system may comprise a computer server LAN or other assembly including a gateway user interface and a reporting engine . The user interface may correspond to the user interface of . The reporting engines and may correspond to the reporting engine or the reporting engine of .

The system may further include a server or computer corresponding to the database query endpoint of . The server or computer may include a query interface and database interface. In one embodiment the server or computer includes a database and the database interface in the server or computer queries the database within the server or computer . In another embodiment the system includes data storage such as volatile memory or non volatile memory having stored therein a database. The server or computer may query the database stored in the data storage to generate query results.

In other words in some embodiments one or more of the user interface gateway reporting engines and database query endpoints are stored in a same computer or server. In other embodiments one or more of the user interface gateway reporting engines and database query endpoints are located in separate devices housings or systems and are connectable to each other via a wireless network wired network or a combination of the two.

The gateway database query endpoints and reporting engines of the above described embodiments may be operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with gateways database query endpoints and reporting engines of embodiments of the present disclosure include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

The gateway database query endpoints and reporting engines of the above described embodiments may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. The gateway database query endpoints and reporting engines of the above described embodiments may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

The gateway database query endpoints and reporting engines of the above described embodiments may include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory. The gateway database query endpoints and reporting engines of the above described embodiments may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage systems may be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. Memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

In block the gateway may obtain the query parameters from the query request and may modify a stored query based on the query parameters. The SPARQL gateway parses the query parameters on a request URI. The query parameters may be in an XPath syntax defined by the Reportable REST specification and the query parameters specify filtering conditions. The SPARQL gateway may transform the XPath filtering conditions into SPARQL graph patterns and adds then to a WHERE clause of the SPARQL query.

In block the gateway transmits the query to a database. The database may be part of a database query endpoint or may be connected to the database query endpoint. In particular the SPARQL gateway may send the modified SPARQL query to the SPARQL endpoint.

In block the gateway obtains query results from the database or from the database query endpoint. The query results may be in the database query language or in SPARQL. In block the gateway converts the query results from the database query language into a reporting engine format. The reporting engine format may be a REST PDX format. In block the gateway transmits the query results to the reporting engine which generates a report based on the query results.

Providing as an example implementation of one embodiment an RDF database may have a list of all the cities in the world and all the countries in which the cities are located. A SPARQL query may be generated in a gateway to return all cities and the corresponding countries. The SPARQL query may be associated with the RDF database.

A query request may be generated by a reporting engine or other query request source to determine all the cities in Canada. For example a user may access a web page corresponding to the gateway and may select Canada from a list of countries provided on the web page and corresponding to a SPARQL query stored in the gateway and associated with the RDF database. The gateway may modify the stored SPARQL query to search from cities in all countries of the world to limit the query to only cities in Canada based on the user selection. In other words the gateway extracts the Canada parameter from the query request and rewrites the stored SPARQL query to filter the query results to return only the cities of Canada.

A gateway may be configured to include any number of pre stored SPARQL queries that may be modified by query requests. Once the SPARQL query is generated and stored in the gateway the SPARQL query may be accessed and modified any number of times in subsequent query requests.

Embodiments of the present disclosure encompass a gateway configured to generate a query in a database query language obtain query results and convert the query results into a reporting engine format. Embodiments of the present disclosure further encompass assemblies systems and methods configured to generate a query in a database query language obtain query results and convert the query results into a reporting engine format. Accordingly multiple different types of reporting engines which are not configured to communicate with a database are able to obtain database query results from a same query or different queries by means of a gateway to convert query results into a format accessible by the reporting engines.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one more other features integers steps operations element components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated

The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention had been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

