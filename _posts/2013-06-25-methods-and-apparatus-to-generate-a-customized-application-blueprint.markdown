---

title: Methods and apparatus to generate a customized application blueprint
abstract: Methods and apparatus to generate a customized application blueprint are disclosed. An example method includes determining a first virtual machine within an application definition, automatically identifying a property for the first virtual machine, and generating an application blueprint based on the identified property of the virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268592&OS=09268592&RS=09268592
owner: VMware, Inc.
number: 09268592
owner_city: Palo Alto
owner_country: US
publication_date: 20130625
---
This disclosure relates generally to cloud computing and more particularly to methods and apparatus to generate a customized application blueprint.

 Infrastructure as a Service also commonly referred to as IaaS generally describes a suite of technologies provided by a service provider as an integrated solution to allow for elastic creation of a virtualized networked and pooled computing platform sometimes referred to as a cloud computing platform . Enterprises may use IaaS as a business internal organizational cloud computing platform sometimes referred to as a private cloud that gives an application developer access to infrastructure resources such as virtualized servers storage and networking resources. By providing ready access to the hardware resources required to run an application the cloud computing platform enables developers to build deploy and manage the lifecycle of a web application or any other type of networked application at a greater scale and at a faster pace than ever before.

However deployment tools currently in use are usually a homegrown patchwork of various software products from different vendors. Such tools are generally process driven with heavy reliance on custom scripts and property files. Additionally these tools often heavily utilize network bandwidth through continuous polling for readiness of execution or rely on a centralized mechanism that causes a central point of resource contention. Traditional deployment tools are also not configured for automation with cloud computing platforms that dynamically provision virtual computing resources.

Wherever possible the same reference numbers will be used throughout the drawing s and accompanying written description to refer to the same or like parts.

Many IT groups now have the need to move their traditional data centers and or web applications to the cloud. The cloud can be private public or hybrid. In order to do so they need to transfer multi tier applications with a specific configuration to the cloud. The virtual infrastructure administrators are often not aware of all the configuration details that need to be customized or how to configure the applications components to work together.

Some applications are composed of mixtures of out of the box e.g. standard components such as software objects. The out of the box components may be configured to interface with common or standard types of modifications being applied to the components to make the overall application function as desired by the developer. In contrast some applications and or portions of applications require specialized modifications to the application components interfaces and or virtual machines VMs hosting the application components e.g. operating systems virtual hardware etc. .

While previous application management or lifecycle software may be capable of re creating such customized configurations the management or lifecycle software must be manually provided with the desired customizations and properties by a developer or administrator. Such manual provisioning of customizations limits the use of previous application management or lifecycle software to deployments of newly defined applications and or deployments of applications that must be manually re created from a deployed application. Such re creation results in a duplication of effort is costly and is subject to configuration errors and or omissions of properties from the resources underlying the application causing execution errors.

Example methods and apparatus disclosed herein facilitate the automatic conversion of unmanaged customized applications including multiple VMs to managed application deployments. Example methods and apparatus enable a deployed application to be imported to an application manager such as vFabric Application Director a commercially available product from VMware Inc. from which the application can be managed. Example methods and apparatus use configuration discovery script s to scan deployed applications and or application service packages. By scanning example methods and apparatus disclosed herein identify customized application configuration properties of the application. Example methods and apparatus include the customized application configuration properties in the resulting application blueprint that describes the application. The application configuration properties are implemented upon deployment of the managed application based on the application blueprint.

Example methods and apparatus disclosed herein discover application properties by executing a discovery script via VM s implementing the application. For example a VM may execute a discovery script to discover middleware settings stored in files operating system registry keys and or any other source for implementing customized application configuration properties. Example customized application configuration properties include dependencies between VMs services and or other application components in the application node cluster definitions load balancing port configurations ciphers custom drivers and or limits on simultaneous executing threads. Such items are easily overlooked when manually reviewing an application component s configuration. However the example discovery scripts disclosed herein may be additionally or alternatively used to discover any other customized application configuration properties.

Examples disclosed herein provide deployment systems for deploying a multi tier application to a cloud computing environment. Some example deployment systems enable a developer or application architect to create customized application blueprints from currently running or deployed applications. The application blueprints define the structure of the application enable the use of standardized application infrastructure components and specify installation dependencies and default configurations. The application blueprints define the topology for deployment in an infrastructure agnostic manner to be portable across different cloud computing environments.

Example methods disclosed herein include determining a first virtual machine within an application definition automatically identifying a property for the first virtual machine and generating an application blueprint based on the property of the first virtual machine.

Example apparatus disclosed herein a service analyzer to identify a first virtual machine that is within an application definition a virtual machine analyzer to identify a property for the first virtual machine and an application blueprint generator to generate an application blueprint based on the property of the first virtual machine.

As used herein the term application component refers to code e.g. custom code that has been packaged according to a format e.g. as an archive format such as an enterprise archive e.g. .ear file a web archive e.g. .war file etc. .

As used herein the term node or logical node refers to a VM or a cluster of VMs defined in a blueprint.

As used herein the term cluster refers to a collection of hosts that can be managed as a single entity. The resources from the hosts in a cluster may be aggregated into a single pool. A cluster appears as a stand alone host but typically has more resources available.

As used herein the term blueprint refers to a logical topology of an application for deployment. A blueprint captures the structure of an application with logical nodes their corresponding services and operating systems dependencies default configurations and network topology requirements.

As used herein the term deployment environment refers to an environment in a cloud provider. A deployment environment may be used for example for development testing staging and or production. A cloud provider can have multiple deployment environments.

As used herein the term catalog refers to a library that contains logical templates e.g. pointers to cloud templates . Catalogs provide one or more reusable services that can be used in multiple applications and installed on a VM. Catalogs may also provide tasks that perform additional customized functions in an application deployment.

As used herein the term logical template refers to a predefined VM definition. A logical template can be mapped to an actual template in a cloud catalog. Logical templates allow an application blueprint to remain cloud agnostic.

As used herein the term service refers to scripted software that can be installed on a VM and reused in multiple applications.

As used herein the term properties refers to configuration variables used by scripts to set parameters on a script and run various configurations. For example setting an installation path property value causes installation scripts to use the property to specify the path to use to install a service during an application deployment process.

The example unmanaged application is deployed in the deployment environment provided by a cloud computing platform provider also referred to herein simply as a cloud provider . The example cloud computing platform provider of may include any number of deployment environments .

The example application of includes multiple VMs . The example VMs of provide different functions within the application e.g. services portions of the application etc. . One or more of the VMs of the illustrated example are customized by an administrator and or a developer of the application relative to a stock or out of the box version of the services and or application components. Additionally the services executing on the example VMs may have dependencies on other ones of the VMs .

As illustrated in the example cloud computing platform provider may provide multiple deployment environments for example for development testing staging and or production of applications. The administrator and or the developer may access services from the cloud computing platform provider for example via REST Representational State Transfer APIs Application Programming Interface and or via any other client server communication protocol. One particular implementation of a REST API for cloud computing services is vCloud Director API available from VMware Inc. The example cloud computing platform provider provisions virtual computing resources e.g. the VMs to provide the deployment environments in which the administrator and or developer can deploy multi tier application s . One particular example of a deployment environment that may be used to implement the deployment environments of is vCloud DataCenter cloud computing services available from VMware Inc.

The example application director of which may be running in one or more VMs orchestrates deployment of multi tier applications onto one of the example deployment environments . As illustrated in the example application director includes a topology generator a deployment plan generator and a deployment director .

The example topology generator generates a blueprint that specifies a logical topology of an application to be deployed. The example application director may also import a blueprint from the example virtual infrastructure navigator for deployment and or management. The example blueprints generally capture the structure of an application as a collection of application components executing on virtual computing resources. For example the blueprint generated by the example topology generator for an online store application may specify a web application e.g. in the form of a Java web application archive or WAR file comprising dynamic web pages static web pages Java servlets Java classes and or other property configuration and or resources files that make up a Java web application executing on an application server e.g. Apache Tomcat application server that uses a database e.g. MongoDB as a data store. As used herein the term application generally refers to a logical deployment unit comprised of application packages and their dependent middleware and operating systems. Applications may be distributed across multiple VMs. Thus in the example described above the term application refers to the entire online store application including application server and database components rather than just the web application itself.

The example blueprint of may be assembled from items e.g. templates from a catalog which is a listing of available virtual computing resources e.g. VMs networking storage that may be provisioned from the cloud computing platform provider and available application components e.g. software services scripts code components application specific packages that may be installed on the provisioned virtual computing resources. The example catalog may be pre populated and or customized by an administrator e.g. IT or system administrator that enters in specifications configurations properties and or other details about items in the catalog . Based on the application the example blueprints may define one or more dependencies between application components to indicate an installation order of the application components during deployment. For example since a load balancer usually cannot be configured until a web application is up and running the developer may specify a dependency from an Apache service to an application code package.

The example deployment plan generator of the application director generates a deployment plan based on the blueprint that includes deployment settings for the blueprint e.g. virtual computing resources cluster size CPU memory networks and an execution plan of tasks having a specified order in which virtual computing resources are provisioned and application components are installed configured and started. The example deployment plan provides an IT administrator with a process oriented view of the blueprint that indicates discrete steps to be performed to deploy the application. Different deployment plans may be generated from a single blueprint to test prototypes e.g. new application versions to scale up and or scale down deployments and or to deploy the application to different deployment environments e.g. testing staging production . The deployment plan is separated and distributed as local deployment plans having a series of tasks to be executed by the VMs provisioned from the deployment environment . Each VM coordinates execution of each task with a centralized deployment module e.g. the deployment director to ensure that tasks are executed in an order that complies with dependencies specified in the application blueprint .

The example deployment director of executes the deployment plan by communicating with the cloud computing platform provider via a cloud interface to provision and configure the VMs in the deployment environment . The example cloud interface provides a communication abstraction layer by which application director may communicate with a heterogeneous mixture of cloud provider and deployment environments . The deployment director provides each VM with a series of tasks specific to the receiving VM herein referred to as a local deployment plan . Tasks are executed by the VMs to install configure and or start one or more application components. For example a task may be a script that when executed by a VM causes the VM to retrieve and install particular software packages from a central package repository . The example deployment director coordinates with the VMs to execute the tasks in an order that observes installation dependencies between VMs according to deployment plan . After the application has been deployed the application director may be utilized to monitor and or modify e.g. scale the deployment.

The virtual infrastructure navigator of generates the example application blueprint based on the deployed application which may be imported to the example application director to be deployed and or managed. To generate the application blueprint the example virtual infrastructure navigator of includes a service analyzer a VM analyzer an application blueprint generator an application definition generator and an application configuration database . The example virtual infrastructure navigator of is in communication with a discovery script repository .

The example service analyzer of identifies the VMs that are within an application definition . In some examples the service analyzer analyzes an application service package to identify the VMs e.g. VM name VM IP address VM host resource s etc. . In some other examples the application definition generator generates the application definition based on scans of the VMs by the service analyzer based on a seed VM .

The example service analyzer receives a VM identifier e.g. the VIN ID IP address and or the application identifier of .

The example service analyzer of receives e.g. from the administrator a VM identifier e.g. a VIN ID and or an IP address of a currently running VM from which the service analyzer may iteratively determine VMs belonging to the application . The example service analyzer analyzes the VM identifier to determine for example IP addresses and or credentials for the VM s . Additionally or alternatively the example service analyzer may receive an application identifier for the application such as a unique application name and an identifier of the deployment environment in which the application is deployed. The example service analyzer of may be required to translate the discovered properties into logical locations e.g. IP addresses URLs URIs etc. at which the VM analyzer may access the VMs to perform analysis. The example service analyzer of identifies the VMs from the VM identifier by for example querying the cloud computing platform provider . The service analyzer of the illustrated example stores identifiers of the VMs included in the application in the application configuration database .

As mentioned above the example service analyzer may analyze the VMs to facilitate generation of the application definition . For example the service analyzer of the illustrated example may access and or execute the discovery script s in the discovery script repository to discover properties such as dependencies node cluster definitions and or interfaces to other unidentified ones of the VMs in the application . The example service analyzer adds the discovered ones of the VMs to a list of VMs to be analyzed by the VM analyzer and provides any relevant configuration items to the example application definition generator . The example application definition generator generates the application definition based on the configurations and or properties resulting from the configurations.

The example VM analyzer of identifies customized configurations e.g. configuration items for the identified VMs in the application . For example the VM analyzer selects for analysis the VMs that were identified by the service analyzer defined in the application definition and or stored in the application configuration database . To analyze the example VMs the example VM analyzer of selects and or accesses discovery script s stored in the discovery script repository .

In the illustrated example discovery scripts execute on the VM analyzer and or on the VMs e.g. using administrator credentials for the VMs to discover configuration items of the VMs . For example the VM analyzer of may execute the discovery script s to access the VM via an interface e.g. a command and or text based interface through which the VM analyzer may request and receive access to data elements e.g. configurable items of the VM . In some other examples the VM analyzer may transfer the discovery script s to the VM for execution. The VM analyzer of the illustrated example receives the configurations from the VM e.g. from communications by the executing discovery script s . The example VM analyzer of stores discovered configuration items in the application configuration database . In some examples the VM analyzer requests and or executes a first discovery script in the discovery script repository which results in calling additional discovery scripts based on the discovered configurations of the VMs .

In the example of the VM analyzer stores the discovered properties and configurations in association with data for respective ones of the VMs such that the VMs can be deployed by the application director with the same respective configurations and or properties to deploy a functionally identical version of the application .

In some examples the discovery script s used by the service analyzer to analyze and determine the application definition are different than discovery script s used by the VM analyzer to determine configurations of the VMs for generating the application blueprint . For example the service analyzer calls a first discovery script to determine the application definition based on identification of a seed VM and the VM analyzer calls a second discovery script to obtain the configurations of the VMs when the application definition is generated e.g. via running the first discovery script and or when the application definition is determined from an application service package e.g. a WAR file .

The example application blueprint generator of generates the application blueprint based on the identified configurations of the VMs in the application . The application blueprint generator of converts or translates the configuration items e.g. configurable data elements in the VMs to properties e.g. variables to be used by scripts to set parameters on a script and run various configurations during deployment for inclusion in the application blueprint . The example application blueprint generator generates the application blueprint to be substantially identical to an application blueprint that would be generated manually by an administrator or developer by selecting logical templates and or customizing properties via the topology generator .

In the example of the application blueprint generator accesses the application configuration database to select a VM that was analyzed by the VM analyzer . The example application blueprint generator of the illustrated example determines logical template s that may be used to implement the selected VM and or services executing on the selected VM as part of the application . The example application blueprint generator of populates the blueprint with the selected template s . The application blueprint generator then determines customized properties based on the discovered configuration items of the VM e.g. configuration items stored in the application configuration database by the VM analyzer and applies the same and or corresponding customized properties to the respective application components e.g. logical templates in the blueprint . When the application components e.g. logical templates have been customized by the example application blueprint generator of the illustrated example the example application components in the blueprint are configured such that the example application director may deploy a VM in the managed application to provide the same components and or services of the application as the VM that was analyzed by the VM analyzer .

In the example of the example VM analyzer identifies any customized configuration elements of the VMs that may be implemented manually via the topology generator . Example configuration elements that may be discovered by the VM analyzer e.g. via the discovery scripts and implemented in the blueprint include dependencies between the VMs services and or other application components in the application node cluster definitions load balancing port configurations ciphers custom drivers and or limits on simultaneous executing threads. However the example VM analyzer may execute the discovery scripts to discover any other customized application configuration elements. For example the VM analyzer may execute the discovery scripts to discover configurations stored on the VM in files operating system registry keys and or any other source for implementing customized application configurations. When the application blueprint generator of the illustrated example has processed each of the VMs analyzed by the VM analyzer the example application blueprint of is representative of the customized application of including configurations of the VMs and may be deployed by the application director to a deployment environment as a managed application .

The example services of may include one or more dependencies e.g. dependencies on other services dependencies on services executing on other VMs in the application etc. . The dependencies may include for example input data and or confirmation of performance of another task prior to execution of a task by the services .

The example guest OS of includes a file system a registry and a kernel . The example file system includes configuration files ciphers application files definitions and custom drivers . The example registry of includes communication port configurations thread limits node cluster definitions and load balancing settings . However the example configuration items may be included in and or divided among any of the virtual components .

To identify properties of the example VM the example VM analyzer of accesses a virtual machine manager VMM that manages the execution of the VM and other VMs on physical resources . In some examples the VM analyzer is provided with credentials e.g. a user name and password of a user or administrator authorized to access the relevant portions of the VM to access the components and or properties via a communications interface of the VMM and or a communications interface of the VM e.g. when the VM is executing on the physical resources . For example the VM analyzer may issue text based commands to the VM to access data from the file system the registry and or the kernel .

The example file system the example registry the example kernel the example configuration files the example ciphers the example application files definitions the example custom drivers the example communication port configurations the example thread limits the example node cluster definitions and the example load balancing settings of are virtualized components. In some examples the VM analyzer e.g. via executing discovery scripts accesses data representative of the VM e.g. a stored VM file a VM suspended state or snapshot state file a virtual memory file etc. to identify the properties from the VM components . The example VM may access the data representative of the VM via the VMM e.g. via the interface and or via the physical resources e.g. in a physical storage device or memory .

While an example manner of implementing the system is illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example application the example deployment environment the example application director the example virtual infrastructure navigator the example cloud provider the example deployment environments the example VMs the example topology generator the example deployment plan generator the example deployment director the example blueprints the example deployment plans the example catalog the example cloud interface the example central package repository the example service analyzer the example VM the example application blueprint generator the example application definition generator the example application configuration database the example discovery script repository the example application definition and or more generally the example system of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example application the example deployment environment the example application director the example virtual infrastructure navigator the example cloud provider the example deployment environments the example VMs the example topology generator the example deployment plan generator the example deployment director the example blueprints the example deployment plans the example catalog the example cloud interface the example central package repository the example service analyzer the example VM the example application blueprint generator the example application definition generator the example application configuration database the example discovery script repository the example application definition and or more generally the example system could be implemented by one or more analog or digital circuit s logic circuits programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s . When reading any of the apparatus or system claims of this patent to cover a purely software and or firmware implementation at least one of the example application the example deployment environment the example application director the example virtual infrastructure navigator the example cloud provider the example deployment environments the example VMs the example topology generator the example deployment plan generator the example deployment director the example blueprints the example deployment plans the example catalog the example cloud interface the example central package repository the example service analyzer the example VM the example application blueprint generator the example application definition generator the example application configuration database the example discovery script repository and or the example application definition is are hereby expressly defined to include a tangible computer readable storage device or storage disk such as a memory a digital versatile disk DVD a compact disk CD a Blu ray disk etc. storing the software and or firmware. Further still the example system of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

Flowcharts representative of example machine readable instructions for implementing the system of is shown in and or . In this example the machine readable instructions comprise programs for execution by a processor such as the processor shown in the example processor platform discussed below in connection with . The programs may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Blu ray disk or a memory associated with the processor but the entire programs and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example programs are described with reference to the flowchart illustrated in many other methods of implementing the example system may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable storage medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals. As used herein tangible computer readable storage medium and tangible machine readable storage medium are used interchangeably. Additionally or alternatively the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a non transitory computer and or machine readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable device or disk and to exclude propagating signals. As used herein when the phrase at least is used as the transition term in a preamble of a claim it is open ended in the same manner as the term comprising is open ended.

The example instructions of begin by determining VMs e.g. the VMs of within an application definition of the application e.g. the application definition of block . For example the service analyzer may identify the VMs within the application of by analyzing one or more of the VMs and or based on an application service package. Example instructions to implement block are described below with reference to .

The example VM analyzer identifies properties for the VMs that are within the application definition block . For example the VM analyzer may access and execute discovery scripts stored in the discovery script repository of to identify configurations of the VMs of the application . The example application blueprint generator converts or translates the configurations e.g. configuration items to properties. Example configuration items that may be discovered by the example VM analyzer include middleware settings stored in files operating system registry keys and or any other source s for implementing customized application configurations. Example configuration items include dependencies between VMs services and or other application components in the application node cluster definitions load balancing port configurations ciphers custom drivers and or limits on simultaneous executing threads.

The example VM analyzer may discover the properties by for example executing the discovery script s to access the VMs while they are executing on physical resources e.g. the physical resources of and or to access data representative of the VMs while the VMs are not executing e.g. while the VMs are suspended . Example instructions to implement block are described below with reference to .

The example application blueprint generator of generates a customized application blueprint based on the VMs and including the properties identified by the example VM analyzer block . For example the application blueprint generator may populate the customized application blueprint using logical templates e.g. from the catalog of based on the services provided by corresponding ones of the VMs . The example application blueprint generator then customizes the logical templates using the identified properties to copy the functionality of the VMs in the application . Example instructions to implement block are described below with reference to .

The example application director of imports the customized application blueprint block . For example the application director may load a WAR file or other type of application blueprint file. The example deployment plan generator generates a deployment plan e.g. the deployment plan s of based on the customized application blueprint block . The example deployment director deploys the application in a managed deployment environment e.g. the deployment environments of using the customized application blueprint and the deployment plan s . The example deployment director manages the deployed application . For example the administrator of may monitor and or modify the deployed application via the deployment director . The example instructions then end. In some examples management of the deployed application in block may be ongoing after application has been deployed via the deployment director .

The example service analyzer of selects an identified VM block . For example the service analyzer may be provided with an identification e.g. the VIN ID IP address of of a first VM in the application as a seed VM.

The example service analyzer analyzes the selected VM to determine dependencies for the application block . For example the service analyzer may determine other service s and or VMs on which services operating on the selected VM depend.

The example service analyzer analyzes the selected VM to identify node clusters for the application block . For example the selected VM may be configured in a cluster of VMs that are part of the application .

The example service analyzer of analyzes the selected VM to determine port configuration s for the application block . For example the VMs in the application may be configured to communicate with other ones of the VMs at different IP addresses via designated ports. By identifying the port configuration s the example service analyzer may obtain the IP addresses and or identifiers of other VMs in the application .

The example service analyzer of analyzes the selected VM to determine other VM identifiers for the application block . For example the service analyzer may analyze any other configuration items of the VMs in the application from which additional VMs in the application may be identified.

The example service analyzer of determines whether additional VMs have been identified from analysis of the selected VM block . If VMs have been identified block the example service analyzer adds any identified e.g. newly identified VMs to a list of VMs to be analyzed block . The list of VMs to be analyzed may be used by the example service analyzer to identify further VMs in the application and or by the VM analyzer of to identify the configurations of the VMs .

After adding identified VMs to the list block or if no additional VMs have been identified by analyzing the selected VM block the example service analyzer determines whether additional VMs in the list of VMs are to be analyzed block . If there are no additional VMs to be analyzed by the service analyzer block the example service analyzer determines whether another VM identifier e.g. another VM seed has been received for the application block . For example if there are additional VMs in the application that were not identified by the service analyzer by analyzing a first seed VM the example administrator or another user may seed an additional VM identifier to the service analyzer to continue identifying the VMs in the application . If there are additional VMs in the list block or if another VM identifier has been received block control returns to block to select another VM e.g. from the list or based on a received VM seed .

When there are no additional VMs in the list block and another VM identifier has not been received block the example application definition generator of generates an application definition block . For example the application definition generator may generate the application definition for the application based on a list of VMs identified by the service analyzer and VMs seeded to the example service analyzer . The example instructions then end and control returns to block of .

The example VM analyzer of selects a VM in the application definition block . For example the application definition may list identifiers URLs URIs and or any other uniquely identifying information for the VMs in the application of . The example VM analyzer loads discovery scripts block . For example the VM analyzer may access the discovery script repository of to load one or more discovery scripts which in turn may call additional discovery scripts during execution by the VM analyzer . In some examples the VM analyzer loads a discovery script based on a type or function of the selected VM .

The example VM analyzer of executes the discovery script s to determine custom VM configurations block . For example the VM analyzer may execute the discovery script s to access the example file system the example registry and or the example kernel to identify configuration files ciphers application files definitions custom drivers communication port configurations thread limits node cluster definitions load balancing settings and or other properties of the VM . For example the discovery script may be executed to access the interface of the VM and or the interface of the VMM of . In some other examples the VM analyzer loads the discovery scripts onto the selected VM and or the VMM of to discover and provide the configurations to the VM analyzer . The example VM analyzer stores the identified custom VM configurations e.g. configuration items block . For example the VM analyzer may store the VM properties in the example application configuration database .

The example VM analyzer determines whether there are additional VMs in the application definition to be analyzed block . If there are additional VMs to be analyzed block control returns to block to select another VM . When there are no more VMs to be analyzed for custom configurations block the example instructions of end and control returns to block of .

The example application blueprint generator of selects a VM in the application definition block . The application blueprint generator selects a logical template from a catalog e.g. the catalog of to match the VM configuration block . For example the application blueprint generator selects one or more logical templates from the catalog to represent the services operating systems and or hardware associated with the selected VM e.g. the services of . In the example block the example application blueprint generator matches an unmodified or out of the box version of the service s guest OS and or virtual hardware identified for the selected VM . The unmodified or out of the box versions may be stored in the example application configuration database of by the example VM analyzer . For example the VM analyzer may identify and store type s and or version s of the service s guest OS and or physical hardware of in addition to identifying customized configurations of the example VM .

The example application blueprint generator adds the selected logical template s to the application blueprint block . For example the application blueprint generator may add the logical templates to a container or other data structure representative of a VM to be included in a deployment of the application .

The example application blueprint generator determines whether additional VM s are to be represented as logical template s block . If additional VMs are to be represented as logical template s block control returns to block to select another VM in the application definition .

When each of the example VMs have been represented in the application blueprint as logical template s block the example application blueprint generator re processes each of the VMs in the application definition to customize the properties of the VMs in the application blueprint based on the discovered configurations e.g. configuration items configuration settings etc. of the VMs . The example application blueprint generator selects a VM in the application definition block . The VM selected in block is a VM that was previously selected during an iteration of block .

The example application blueprint generator identifies properties for the selected VM based on the configuration of the VM block . For example the application blueprint generator may convert configuration items identified by the example VM analyzer for the selected VM to properties to be used by the application director when deploying the application and the VMs . The application blueprint generator of the illustrated example customizes the configuration s e.g. properties of the logical template s e.g. application components in the blueprint corresponding to the selected VM by applying the identified e.g. resulting properties block . For example the application blueprint generator of modifies the logical template s for the selected VM by modifying the example file system the example registry the example kernel to customize configuration files ciphers application files definitions custom drivers communication port configurations thread limits node cluster definitions load balancing settings and or other properties of the logical templates and or application components for the selected VM . The resulting application components provide identical or substantially identical services to the selected VM .

The example application blueprint generator of determines whether additional VMs are to be selected to customize the configuration of the logical template s and or application component s block . If there are additional VMs to be selected to customize the appropriate logical template s and or application component s block control returns to block to select another VM . When there are no more VMs to be selected block the example application blueprint generator inserts any dependencies between the VMs in the application block . For example the application blueprint generator may wait to insert the dependencies until the application components corresponding to the VMs are customized with the appropriate properties. While the dependencies may be identified and or stored using temporary identifiers of the analyzed VMs the example customized properties may result in modifying the identifiers of the example application components such that previously configured dependencies may be broken.

Furthermore some dependencies may be based on logical location s of the deployed VMs rather than identifiers of the VMs . Accordingly the example application blueprint generator may generate a separate data structure in the application blueprint that identifies the dependencies between application components in the blueprint . The example deployment plan generator may generate the deployment plan by converting the dependencies to logical locations. In some other examples the application blueprint generator inserts the dependencies during block when customizing the configuration s of the logical templates e.g. subsequent to adding logical template s and or application components to the application blueprint . After inserting the dependencies block the example instructions end and control returns to block of .

The processor platform of the illustrated example includes a processor . The processor of the illustrated example is hardware. For example the processor can be implemented by one or more integrated circuits logic circuits microprocessors or controllers from any desired family or manufacturer.

The processor of the illustrated example includes a local memory e.g. a cache . The processor of the illustrated example is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The processor platform of the illustrated example also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

In the illustrated example one or more input devices are connected to the interface circuit . The input device s permit s a user to enter data and commands into the processor . The input device s can be implemented by for example an audio sensor a microphone a camera still or video a keyboard a button a mouse a touchscreen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit of the illustrated example. The output devices can be implemented for example by display devices e.g. a light emitting diode LED an organic light emitting diode OLED a liquid crystal display a cathode ray tube display CRT a touchscreen a tactile output device a light emitting diode LED a printer and or speakers . The interface circuit of the illustrated example thus typically includes a graphics driver card a graphics driver chip or a graphics driver processor.

The interface circuit of the illustrated example also includes a communication device such as a transmitter a receiver a transceiver a modem and or network interface card to facilitate exchange of data with external machines e.g. computing devices of any kind via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processor platform of the illustrated example also includes one or more mass storage devices for storing software and or data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives Blu ray disk drives RAID systems and digital versatile disk DVD drives.

The coded instructions of may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable tangible computer readable storage medium such as a CD or DVD.

As mentioned above example methods and apparatus disclosed herein facilitate the automatic conversion of unmanaged customized applications including multiple VMs to managed application deployments. Example methods and apparatus disclosed herein enable application deployments to the cloud in a manner that is faster less expensive and less prone to errors caused by manual entry of application properties. Furthermore example methods and apparatus enable a more accurate analysis of the properties and configurations of VMs in an application by automating the VM analysis process thereby enabling application deployments that accurately reflect the original unmanaged application. The foregoing advantages enable enterprises to more readily take advantage of cloud computing and Infrastructure as a Service to implement customized web applications.

Although certain example methods apparatus and articles of manufacture have been disclosed herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

