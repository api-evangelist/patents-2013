---

title: Information processing apparatus and instruction offloading method
abstract: In general, according to one embodiment, an information processing apparatus includes an issuer and a communicator. The issuer issues an offload instruction corresponding to a first process executed in company with a first identifier capable of uniquely specifying a resource of a first arithmetic operation device. The communicator transmits the offload instruction to a second arithmetic operation device and receives a result of execution of the offload instruction from the second arithmetic operation device. In the second arithmetic operation device, the first identifier contained in the offload instruction is converted into a second identifier capable of uniquely specifying a resource of the second arithmetic operation device, and processing specified by the offload instruction is executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09477466&OS=09477466&RS=09477466
owner: Kabushiki Kaisha Toshiba
number: 09477466
owner_city: Minato-ku, Tokyo
owner_country: JP
publication_date: 20130926
---
This application is based upon and claims the benefit of priority from Japanese Patent Application No. 2012 214578 filed Sep. 27 2012 the entire contents of which are incorporated herein by reference.

Embodiments described herein relate generally to an information processing apparatus and a method for offloading an instruction.

In recent years the majority of computers employ an architecture referred to as a von Neumann computer that includes a central processing unit CPU at its kernel with a storage device such as a memory connected to the CPU. Addresses are attached to all devices accessed by the CPU so that all of those devices can be operated in an address space held by the CPU.

In expectation of reducing a load on the CPU or speeding it up a method used often is referred to as offloading which uses an external CPU to substitute for the processing of the CPU. Particularly in the field of networks the processing such as a checksum calculation of TCP IP and a repetitive calculation of a communication protocol such as Internet Protocol Security IPsec for encryption are offloaded to an external device instead of being executed by the CPU so as to make it possible to enhance a communication speed and reduce a delay period.

However it is rather difficult to directly access a resource held by another CPU. While changing addresses makes it possible to access all resources a different CPU has a different address space and therefore a conversion will be complex making it difficult to respond to a change in architecture. Several methods exist for sharing a resource among a plurality of CPUs. Known techniques include for example bus bridges remote procedure call PRC and memory mapped I O.

In general according to one embodiment an information processing apparatus includes an issuer and a communicator. The issuer issues an offload instruction corresponding to a first process executed in company with a first identifier capable of uniquely specifying a resource of a first arithmetic operation device. The communicator transmits the offload instruction to a second arithmetic operation device and receives a result of execution of the offload instruction from the second arithmetic operation device. In the second arithmetic operation device the first identifier contained in the offload instruction is converted into a second identifier capable of uniquely specifying a resource of the second arithmetic operation device and processing specified by the offload instruction is executed.

The present embodiments each include therein an identifier management table that allows conversion of an identifier that is represented by a file descriptor and is held by a CPU on one side into an identifier held by a CPU on the other side so that the former CPU converts the identifier upon occurrence of an access thereby realizing sharing of a resource.

An access to hardware and a specific memory area is typically protected by an operating system OS so that an access to such memory area by a common user application is carried out via an application programming interface API that is referred to as a system call provided by an OS. In this case an identifier referred to as a file descriptor is used for providing an access while the actual address of the memory area is concealed.

The present embodiments use an identifier management table for converting an identifier correlated with a main CPU into an identifier correlated with a CPU in an offload destination thereby enabling an application on the main CPU side to access a resource connected to the CPU in the offload destination. This configuration allows the conversion using an abstracted identifier thereby making it possible to easily use a resource on the offload destination without performing conversion between an address according to the main CPU and an address according to the CPU in the offload destination the conversion that has been necessary according to a conventional technique.

The first embodiment applies to a case in which a main board holds an identifier management table therein. A case in which another board such as a network process board in place of the main board holds the identifier management table therein is put forth in a second embodiment and thereafter. The present embodiment is applicable to both an execution of offloading from the start of a system and that of offloading from any given timing after the start of the system. Whether to start an offload process is determined according to the system call e.g. a socket requesting to secure a resource.

A main board includes therein an offload instruction issuance section a communication section an identifier management section and an identifier information retention section . The offload instruction issuance section converts a task assigned to the main board into a form that allows processing at an offload destination and requests a network process board to execute the processing for the main board. The communication section performs communication with the network process board . The identifier information retention section retains an identifier management table in which an identifier on the network process board side is correlated with an identifier e.g. a process ID a socket number a buffer number or a queue number on the main board side. The identifier management section performs input or output of an identifier into or from the identifier management table for registration searching or deletion of the identifier with respect to the identifier management table retained by the identifier information retention section .

The network process board includes therein an offload instruction execution section a network process section and a communication section . The offload instruction execution section executes a task accepted from the main board . The communication section performs communication with the main board . The network process section performs external communication via a network .

An offload operation using the identifier management table is categorized into three procedures that is registration search and deletion with respect to the identifier management table.

Whether an offload function is to be used is determined by a user setup a ratio of power consumption of a device to a power supply thereto a residual battery capacity a profile in which a pre set power saving policy is described whether a quick response is require of an application whether the application performs an intermittent operation and the like steps S and S . If the offload function is not to be used a system call is processed as usual step S . Immediately after a start of using the offload function the identifier management table retained by the identifier management section is empty. The work for registering a set of identifiers including the identifier of the main board and that of the network process board on the identifier management table is carried out in connection with a system call with which a user application requests an OS to prepare a resource managed thereby. For example according to Linux a registered trademark a socket is prepared upon issuance of a socket system call that is a system call for requesting an OS to prepare a socket. When such socket system call is issued the main board prepares a virtual socket number i.e. a socket number for specifying a socket on a network process board instead of actually preparing a socket step S . The virtual socket number is desirably a file descriptor that allows the OS to lend out in connection with a file descriptor managed by the OS. This configuration allows the user application to use an offload function without being conscious of whether the offload function is in use.

At the same time the offload instruction issuance section generates and issues an offload instruction with at least one or more arguments of those of the system call as arguments steps S and S . The offload instruction execution section of the network process board executes the offload instruction so that the offload instruction issuance section receives a socket number on the network process board as a return value step S . A set including the virtual socket number generated at the main board and the socket number generated at the network process board is registered on the identifier management table step S . In this event if a plurality of user applications exist on the main board the process IDs of them are also registered. It is noted that a return value of a system call for requesting preparation of a resource managed by the OS is defined as a virtual socket number step S .

When an application is to perform input into or output from a resource managed by an OS a system call is issued without exception step S . Examples of system calls for carrying out network related processes include the processes related to socket operations such as bind listen connect recvfrom sendto close shutdown setsockopt getsockname and getpeername. Whether an offload function is to be used is determined at this stage. If a socket number or a process ID in addition to the socket number if there are a plurality of user applications as one of arguments of the system call exists in the identifier management table the system call can be determined to be related to the offload function steps S and S .

If the system call is determined to be related to the offload function the offload instruction issuance section generates and issues an offload instruction with at least one or more arguments of those other than the socket number of system call arguments and with a number produced by the identifier management section converting the aforementioned socket number into a socket number on the network process board as an argument step S to request execution of the offload instruction at the network process board . The offload instruction issuance section receives data as a return value from the offload instruction execution section step S and returns the data as the return value of the system call to the user application step S . Information that must be notified as a result of executing the offload instruction is also transmitted together to the main board. Such information includes for example a change in condition occurring to a communication interface and an error code at the occurrence of the error.

When a user application releases a resource managed by an OS a system call is issued without exception step S . In this event if a socket number that is one of arguments of the system call exists in the identifier management table the system call can be determined to be related to the offload function. If the system call is determined to be related to the offload function the offload instruction issuance section searches the identifier management section for a socket number on the network process board the socket number corresponding to the socket number that exists in the identifier management table and is one of arguments of the system call step S . The offload instruction issuance section generates an offload instruction with at least one or more arguments of those other than a socket number of the system call and with a socket number on the network process board as an argument the offload instruction for requesting release of a resource related to the socket step S and requests the offload instruction execution section of the network process board to process the offload instruction step S . The offload instruction execution section releases the applicable resource step S and returns a result of the execution to the offload instruction issuance section . With this the registration of the applicable identifier is deleted from the identifier information retention section step S . The offload instruction issuance section returns the result of releasing the resource as the return value of the system call to the user application step S .

The second embodiment is applied to a case in which a network process board is provided with an identifier management table and corresponds to a case in which an offload function is used immediately after starting a system. The configuration and operations of the present embodiment similar to those of the first embodiment are not described in detail in the following.

A main board includes therein an offload instruction issuance section and a communication section . The offload instruction issuance section converts a task assigned to the main board into a form that allows processing at an offload destination and requests the network process board to process such for the main board. The communication section performs communication with the network process board .

The network process board includes therein an offload instruction execution section a network process section a communication section an identifier management section and an identifier information retention section . The offload instruction execution section executes a task accepted from the main board . The communication section performs communication with the main board . The network process section performs external communication via a network . The identifier information retention section retains an identifier management table in which an identifier on the network process board side is correlated with an identifier e.g. a process ID a socket number a buffer number or a queue number on the main board side. The identifier management section performs input or output of an identifier into or from the identifier management table for registration searching or deletion of the identifier with respect to the identifier management table retained by the identifier information retention section .

An offload operation using the identifier management table is categorized into three procedures that is registration search and deletion with respect to the identifier management table.

Whether an offload function is to be used is determined by a user setup the power consumption of a device and the condition of a power supply thereto a preset profile the category of user application and the like steps S and S . If the offload function is not used a system call is processed as usual step . Immediately after a start of using the offload function the identifier management table retained by the identifier management section is empty. The work for registering a set of identifiers including the identifier of the main board and that of the network process board on the identifier management table is carried out in connection with a system call with which a user application requests an OS to prepare a resource managed thereby step S . For example according to Linux a socket is prepared upon issuance of a socket system call that is a system call for requesting an OS to prepare a socket. When the socket system call is issued the main board prepares a number a virtual socket number to be lent out of consecutive numbers to be attached respectively to other identifiers instead of actually preparing a socket step S .

At the same time the offload instruction issuance section generates and issues an offload instruction with at least one or more arguments of those of the system call and with the virtual socket number as an argument steps S and S . The offload instruction execution section of the network process board executes the offload instruction step S . With this a socket number is generated. The identifier management section registers a set of numbers on the identifier management table the numbers including the virtual socket number generated at the main board and the socket number generated at the network process board step S . In this event if a plurality of user applications exist on the main board the identifier management section also registers the process IDs of them. It is to be noted that a return value of a system call for requesting preparation of a resource managed by the OS is defined as a virtual socket step S .

When an application is to perform input into or output from a resource managed by an OS a system call is issued without exception step S . Examples of system calls for performing network related processes include the processes related to socket operations such as bind listen connect recvfrom sendto close shutdown setsockopt getsockname and getpeername. Whether an offload function is to be used is determined at this stage. If a socket number handed over to the OS as an argument of the system call is registered in the identifier management section of the network process board the system call can be determined to be related to an offload step S .

If the system call is determined to be related to an offload function the offload instruction issuance section generates and issues an offload instruction with the socket number and at least one or more arguments of other arguments of system call arguments step S to request execution at the network process board step S . Here the socket number is the virtual socket number described above.

The identifier management section of the network process board searches the identifier information retention section for an identifier on the network process board side the identifier corresponding to the virtual socket number the identifier . The offload instruction execution section uses the retrieved identifier to execute the offload instruction and returns a result of the execution to the offload instruction issuance section of the main board step S . The offload instruction issuance section returns the execution result received from the offload instruction execution section to the user application as the return value of the system call step S .

When a user application releases a resource managed by an OS a system call is issued without exception step S . In this event if a socket number or a process ID in addition to the socket number if there is a plurality of user applications that is one of arguments of the system call exists in the identifier management table the system call can be determined to be related to the offload function step S . If the system call is determined to be related to the offload function the offload instruction issuance section searches for a socket number on the network process board via the identifier management section of the network process board the socket number corresponding to the socket number that is one of arguments of the system call. The offload instruction issuance section generates an offload instruction with at least one or more arguments of those other than the socket number of the system call and with a socket number on the network process board as an argument the offload instruction for requesting release of a resource related to the socket step S thereby requesting the offload instruction execution section of the network process board to execute the offload instruction step S . The offload instruction execution section releases the applicable resource step S and returns a result of the execution to the offload instruction issuance section . Also the offload instruction execution section deletes the registration of the applicable identifier from the identifier information retention section step S . The offload instruction issuance section returns the result of releasing the resource to the user application as the return value of the system call step S .

The third embodiment is configured to determine a storage process board to be an offload destination.

The configuration and operations of the present embodiment similar to those of the first embodiment are not described in detail in the following.

A main board includes therein an offload instruction issuance section an identifier management section an identifier information retention section and a communication section . The offload instruction issuance section converts a task assigned to the main board into a form that allows processing at an offload destination and requests a storage process board to execute the processing for the main board. The communication section performs communication with the storage process board . The identifier information retention section retains an identifier management table in which an identifier on the storage process board side is correlated with an identifier e.g. a process ID and a file number on the main board side. The identifier management section performs input or output of an identifier into or from the identifier management table for registration searching or deletion of the identifier with respect to the identifier management table retained by the identifier information retention section .

The storage process board includes therein an offload instruction execution section a storage access process section a communication section and a storage area . The offload instruction execution section executes a task accepted from the main board . The communication section performs communication with the main board . The storage access process section takes charge of input into or output from the storage area . The storage area is a storage device capable of retaining data. The storage area may be a network storage unit such as a network file system NFS and an Internet small computer system interface iSCSI or a storage incorporated in the storage process board .

The configuration shown in includes therein both the identifier management section and the identifier information retention section disposed in the main board . Both of them however may be disposed in an offload destination as in the configuration of the second embodiment. In such case the identifier management section and the identifier information retention section are disposed in the storage process board as shown in .

An offload operation using the identifier management table is categorized into three procedures that is registration search and deletion with respect to the identifier management table.

Whether an offload function is to be used is determined by a user setup the power consumption of a device and the condition of a power supply thereto a preset profile the category of user application and the like. Immediately after a start of using the offload function the identifier management table retained by the identifier management section is empty. The work for registering a set of identifiers on the identifier management table the identifiers including the identifier of the main board and that of the storage process board is carried out in connection with a system call with which a user application requests an OS to open or close a file managed thereby. For example according to Linux when a file is to be accessed an open system call is issued and the system call for opening the file is requested to the OS. When the open system call is issued the main board prepares a number a virtual file number consecutive to numbers to be lent out by the OS to other identifiers. At the same time the offload instruction issuance section issues an offload instruction that contains positional information for specifying a position of the file and requests for opening the file. The offload instruction execution section of the storage process board opens the file and then returns the file number on the storage process board as a return value to the offload instruction issuance section . The identifier management section registers on the identifier management table a set of thus obtained file number of the storage process board and the virtual file number generated at the main board . If a plurality of user applications exist on the main board the process IDs of the user applications are also registered in this event. It is noted that a return value of a system call with which an application requests the OS to open a file is defined as a virtual socket number.

When a user application writes to or reads a file managed by an OS a system call is issued without exception. For example as regards a file operation under Linux a read write or the like is issued. Whether an offload function is to be used is determined in this event. If a file number or a process ID in addition to the file number if there are a plurality of user applications that is handed over to the OS as an argument of the system call is registered in the identifier management section the system call can be determined to be related to an offload function. If the system call is determined to be related to the offload function the offload instruction issuance section generates an offload instruction with one or more arguments of those other than file numbers of system call arguments and with a number produced by the identifier management section converting the file number into a file number on the storage process board as an argument thereby requesting execution at the network process board . The offload instruction issuance section receives data as a return value from the offload instruction execution section and returns the data to the user application as the return value of the system call.

When the user application is to close a file managed by an OS a system call is issued without exception. In this event if a file number that is one of arguments of the system call exists in the identifier management table the system call can be determined to be related to an offload function. If the system call is determined to be related to the offload function the offload instruction issuance section searches the identifier management section for a file number on the storage process board the file number corresponding to the file number that is one of the arguments of the system call. The offload instruction issuance section generates an offload instruction with at least one or more arguments of those other than the file number of the system call and with the file number on the storage process board as an argument and with which an operation of closing the file is requested the offload instruction for requesting an operation for closing the file thereby requesting the offload instruction execution section for processing. The offload instruction execution section returns data of a result of the execution to the offload instruction issuance section so as to return the data to the user application as the return value of the system call.

The fourth embodiment is applicable to a case in which a network process board is specified as an offload destination depending on the operation mode and is configured to enable switchover of a communication interface I F for a wire line LAN a wireless LAN and the like. An identifier retained by an identifier management section is for use in management of a resource in an abstract layer and therefore the identifier is not limited to a specific physical layer. Therefore even if communication I Fs in a lower layer of a network process section are switched over an application program itself is not necessarily changed in accordance with the changeover and thereby the program can be simplified.

The configuration and operations of the present embodiment similar to those of the first embodiment are not described in detail in the following.

A main board includes therein an offload instruction issuance section a communication section an identifier management section and an identifier information retention section . The offload instruction issuance section converts a task assigned to the main board into a form that allows processing at an offload destination and requests the network process board to execute the processing for the main board. The communication section performs communication with the network process board . The identifier information retention section retains an identifier management table in which an identifier on the network process board side is correlated with an identifier e.g. a process ID a socket number a buffer number or a queue number on the main board side. The identifier management section performs input or output of an identifier into or from the identifier management table for registration searching or deletion of the identifier with respect to the identifier management table retained by the identifier information retention section .

The network process board includes therein an offload instruction execution section a network process section a communication section and an operation mode storage section . The offload instruction execution section executes a task accepted from the main board . The communication section performs communication with the main board .

The network process section is configured to communicate with the outside via a network and internally includes a plurality of interfaces I Fs . The network process section includes therein for example a low power consumption wireless I F a high speed wireless I F and a wire line I F .

Basic operations using an offload function i.e. registration search or deletion with respect to the identifier management section are similar to the case of the embodiments described above. The differences are described in the following.

The offload instruction execution section confirms and changes operation statuses by way of a change of interfaces a timer interrupt and the like which occur in the network process section . The operation statuses are represented by parameters such as the On Off status of each individual communication interface a link up link down status the data rate and power consumption of an individual communication interface a packet loss ratio a response delay period and a communication speed.

An operation mode is pre set by a user thereafter dynamically changed and retained in the operation mode storage section . The operation modes include for example a low power consumption mode for suppressing power consumption during communication a low delay mode for minimizing a delay period and a high throughput mode for maximizing a throughput. For example if the low power consumption mode is set in the state of using high speed wireless communication the offload instruction execution section checks a communication interface that is linked up and switches over to the communication interface e.g. the low power consumption wireless I F if it is possible.

The fifth embodiment is applicable to a case in which a network process board is designated as an offload destination and is adapted to enable switchover of layers of a communication protocol and network buffers.

In the case of allowing the layers of a socket to be changed during usage of the network a new system call is defined for setting the change of layers for a socket that is in offload. For example if a new system call is defined when the socket in offload has been engaged in TCP communication the communication is permitted to perform in an Ethernet a Registered Trademark layer that is a lower layer. The present embodiment is configured to change the layers by issuing a new system call thereby making it possible to perform communication in the lower layer by using the socket of the TCP communication as is the socket that has been used prior to the issuance of the new system call. The switchover of the layers of a communication protocol makes it possible to switch to for example Ethernet to obtain an Ethernet frame thereby obtaining communication contents in the lower layers including a media access control MAC address.

Similarly to the case of the communication protocol layer network buffers i.e. queues at an offload destination may be switched over. The configuration and operations of the present embodiment are described by exemplifying the aforementioned case. In the case of allowing change of queues when the network is in use a new system call is defined for setting the change of queues that are in offload.

The configuration of a main board is similar to that of the first embodiment. While the configuration of the network process board is approximately the same as that of the first embodiment the difference therefrom is that the network process board has a network process section provided with a plurality of queues e.g. queue 1 through queue 4 corresponding to a plurality of sockets and that the queues can be changed by a new system call. This configuration makes it possible to instantly change over quality of service QoS queues and protocol categories enabling reduction in a delay period of time.

Basic operations of registration usage and deletion at an identifier management section are similar to the case of the first embodiment. The contents of changes are described in the following.

A new system call is defined for changing queues being in offload. Upon issuance of the system call step S the offload instruction issuance section searches for whether a specified virtual socket number is registered in the identifier management section and whether an identifier on the corresponding network process board exists step S . The offload instruction issuance section transmits to the offload instruction execution section an instruction that contains the checked identifier on the network process board as an argument steps S and S . If the applicable socket is in use and if a queue corresponding to the specified queue exists the offload instruction execution section returns the queue number to the offload instruction issuance section step S . The offload instruction issuance section receives a notification that the change of queues is complete step S and notifies the user application of the received notification step S .

The sixth embodiment relates to a simultaneous use of two offload processes. The present embodiment is applicable to a case in which a network process board and a storage process board are designated as offload destinations or a case in which an offload process board capable of performing both a network process and a storage process is constituted. The configuration and operations of the present embodiment similar to those of the first embodiment are not described in detail in the following.

An offload operation using the identifier management table is categorized into three procedures that is registration search and deletion with respect to the identifier management table.

Similarly to the case of the first and third embodiments whether an offload function is to be used is determined by a user setup the power consumption of a device and the condition of a power supply thereto a preset profile the category of user application and the like step S . Immediately after a start of using the offload function the identifier management table retained by the identifier management section is empty. The work for registering a set of identifiers including the identifier of the main board and that of the storage process board on the identifier management table is carried out in connection with a system call with which a user application requests an OS to prepare a file managed thereby step S . Selection of the offload function for either of a network process and a storage process is determined accordingly to the category of the system call and an identifier handed as an argument of the system call. For example according to Linux if a socket system call is issued it can be determined that either of inter process socket communication and communication on the network is started. In contrast if an open system is called with a specific position a file name or the like of a directory structure as an argument it can be determined that an access to a storage is started. If it is determined that an offload for a network process and for an offload process is started using on the basis of a condition of a profile and the like and a condition of a system call the offload instruction issuance section generates a virtual identifier step S and simultaneously issues an offload instruction to the network process section or the storage access process section so as to prepare a resource as in the case of the first and third embodiments steps S and S . The virtual identifier the identifier on the network process board the identifier generated by the offload instruction execution section the ID of the process that has called the system call and an offload process category ID are registered in the identifier management section step S . The virtual socket number is returned to the user application step S .

When a user application is to perform input into or output from a resource managed by the OS a system call is issued without exception step S . The categories of the system calls are similar to the ones noted in the first and third embodiments. If a socket number or a process ID in addition to the socket number if there is a plurality of user applications that is one argument of those of a system call exists in the identifier management table the system call can be determined to be related to an offload function with a resource already secured at the offload process board step S . The offload instruction issuance section generates an offload instruction with at least one or more arguments of those other than an identifier of system call arguments and with another identifier produced by the identifier management section converting the identifier into an identifier on an offload process board as an argument step S thereby requesting the offload process board to execute the offload instruction the board determined on the basis of the offload process category ID step S . The offload instruction execution section of the offload process board causes the network process section or the storage access process section to execute the received offload instruction and returns a result of the execution to the offload instruction issuance section . The offload instruction issuance section receives the result of the execution of the offload instruction from the offload instruction execution section as a return value and returns the data to the user application as the return value of the system call step S .

When a user application is to release a resource managed by an OS a system call is issued without exception step S . In this event if an identifier that is one of arguments of the system call exists in the identifier management table the system call can be determined to be related to the offload function step S . If the system call is determined to be related to the offload function the offload instruction issuance section searches the identifier management section for an identifier on the offload process board the identifier corresponding to an identifier that is one of arguments of the system call. In this event the offload instruction issuance section also searches for an offload category. The offload instruction issuance section generates on the basis of the offload category ID an offload instruction for requesting the network process section or the storage access process section that has secured a resource on the offload process board to release the resource related to the identifier step S thereby requesting the offload instruction execution section of the offload process board to execute the processing step S . The offload instruction execution section releases the applicable resource step S . The identifier management section deletes the registration of an identifier corresponding to the released resource step S . A result of the execution of the resource release instruction is returned to the offload instruction issuance section which then returns the data of the result to the user application as the return value of the system call step S .

The seventh embodiment is configured to enable an offload destination to execute also a task other than an offload instruction. Accordingly the present embodiment includes therein an offload task management section that manages a task to be autonomously operated in addition to the configuration of the first embodiment. The configuration and operations of the present embodiment similar to those of the first embodiment are not described in detail in the following.

Similarly to the case of the first embodiment a main board includes therein the offload instruction issuance section the communication section the identifier management section and the identifier information retention section . The network process board includes therein the offload task management section in addition to the offload instruction execution section the network process section and the communication section of the first embodiment. The offload task management section manages execution of a task to be autonomously operated.

As a premise a system call for an offload process is newly defined with respect to autonomous operation of a task.

When a user application has called the new system call an OS generates a virtual identifier step S . At the same time the offload instruction execution section generates a new standby task at the offload task management section of the network process board . The generated virtual identifier and the identifier of the standby task are registered in the identifier management section steps S through S .

When a system call is issued from a user application with the virtual identifier as an argument the identifier management section is searched for the identifier of a standby task. The system call defined as that here is to write output using the virtual identifier as an argument. By so doing a standby task to be autonomously operated is loaded onto the offload process board . shows a flowchart of the operation for loading the offload program steps S through S . In step S the standby task is loaded onto the offload process board .

A result of the execution can be read by performing read to the virtual identifier. shows the operation for receiving the result of the execution steps S through S . In step S the result of the execution of the standby task is returned from the offload task management section to be returned to the offload instruction issuance section .

Notification of completion of the processing can be realized by interrupt polling and the like. The operation for receiving a notification of update from the offload task management section is shown in the flowchart of and in the sequence diagram of steps S through S . In step S the notification of update i.e. a notification from the standby task is obtained from the offload task management section by means of interrupt polling and the like and the notification is returned to the user application in step S.

Similarly to the case of the first embodiment when a user application is to release a resource a system call is issued step S . For example a system call for closing a virtual identifier is issued. When the system call is issued a task in the offload task management section is ended steps S through S . An entry is deleted also from the identifier management table step S and the user application is notified of the completion of releasing the resource step S .

The eighth embodiment relates to an exemplary operation of the offload task noted in the seventh embodiment. The configuration and operations of the present embodiment similar to those of the first embodiment are not described in detail in the following.

An offload task according to the eighth embodiment accumulates in a buffer a given amount of data received from the network . A main CPU of the main board shifts a mode to the low power consumption mode. When receiving of data from the network is completed or if the data accumulated in the buffer exceeds a given amount the main board is notified of such event. In response to the notification the main board receives the data accumulated in the buffer in a lump from the network process board .

The ninth embodiment relates to another exemplary operation of the offload task in the seventh embodiment. The configuration and operations of the present embodiment similar to those of the first embodiment are not described in detail in the following. Similarly to the case of the eighth embodiment an offload task according to the ninth embodiment accumulates the data received from the network in a buffer. Further the offload task of the ninth embodiment refers to the data accumulated in the buffer to determine whether to notify the main board of the event of receiving the data. At this stage the main board is in the low power consumption mode namely for example a sleep mode.

The data received from the network contains for example a new incoming mail an update file of an application and schedule data. When data that requires an instant notification the data such as a new incoming mail and schedule data is received the offload task of the ninth embodiment notifies the main board of such event. In contrast when data that requires no instant notification is received the offload task accumulates the data in the buffer and does not notify the main board of the event. It is appreciated that a configuration may enable setup of a category of data requiring such notification.

When such notification is received from the offload task of the network process board the main board recovers from a sleep mode and quickly carries out a data reception process. Data accumulated in the buffer instead of being notified of at the reception of the data is put into a reception process in a lump for example upon recovery from the sleep mode.

The embodiments described above enable the realization of offloading of instructions by means of a conversion function of an identifier capable of uniquely specifying a resource.

While certain embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions. Indeed the novel embodiments described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the embodiments described herein may be made without departing from the spirit of the inventions. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the inventions.

