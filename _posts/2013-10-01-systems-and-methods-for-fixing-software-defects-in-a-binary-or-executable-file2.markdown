---

title: Systems and methods for fixing software defects in a binary or executable file
abstract: This disclosure relates generally to application development, and more particularly to systems and methods for fixing software defects in a binary or executable file. In one embodiment, a software defect management system is disclosed, comprising: a processor; and a memory disposed in communication with the processor and storing processor-executable instructions comprising instructions for: obtaining an application programming interface call for a black-box software application; determining whether the black-box software application is configured in a defective manner to process the application programming interface call; identifying a call processing application to process the application programming interface call, based on determining whether the black-box software application is configured in a defective manner to process the application programming interface call; and providing the application programming interface call for the identified call processing application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547581&OS=09547581&RS=09547581
owner: WIPRO LIMITED
number: 09547581
owner_city: Bangalore
owner_country: IN
publication_date: 20131001
---
This disclosure relates generally to application development and more particularly to systems and methods for fixing software defects in a binary or executable file.

A software product typically goes through a software development life cycle SDLC including among other things software programming or coding followed by software testing. The reliability and quality of a software impacts customer satisfaction and sales in a competitive business environment. Features like reliability security and quality are attributed to a software when it does not have any defects or bugs. Such defects or bugs can cause feature lapse or accrue undesired deficiency.

Typically in scenarios where a user commercially exploits software and experiences undesired functionality or defects in it the user has to live with it or wait for the original vendor to fix it. If the defect or bug is detected before the software is deployed then the creator of the software may fix it but if the defects are detected post deployment especially to a large number of users then fixing the defects in the already deployed version is challenging. When the Defects or bugs are fixed using software patches plug ins or wrapper solutions. Each of these is appropriate to specific scenarios. Patches correct the defects replacing the defective portion with a corrected code. Patches are typically authored by the same source as the original software development team. Effective and efficient patches do not come from a third party since third parties have little to no knowledge about the internal workings of the original defective software.

Wrapper solutions push the correct code into defective software and deactivate or encapsulate the defective portion. Plug ins tend to introduce enhancements into a software rather than actually fixing a defect in the software. Plug ins are usually from third parties but they do not fix software defects. Developing wrappers and plug ins both require knowledge of the internal structure of the defective software.

In one embodiment a software defect management system is disclosed comprising a processor and a memory disposed in communication with the processor and storing processor executable instructions comprising instructions for obtaining an application programming interface call for a black box software application determining whether the black box software application is configured in a defective manner to process the application programming interface call identifying a call processing application to process the application programming interface call based on determining whether the black box software application is configured in a defective manner to process the application programming interface call and providing the application programming interface call for the identified call processing application.

In one embodiment a software defect management method is disclosed comprising obtaining an application programming interface call for a black box software application determining via a processor whether the black box software application is configured in a defective manner to process the application programming interface call identifying via the processor a call processing application to process the application programming interface call based on determining whether the black box software application is configured in a defective manner to process the application programming interface call and providing the application programming interface call for the identified call processing application.

In one embodiment a non transitory computer readable medium is disclosed storing computer executable software defect management instructions comprising instructions for obtaining an application programming interface call for a black box software application determining via a processor whether the black box software application is configured in a defective manner to process the application programming interface call identifying via the processor a call processing application to process the application programming interface call based on determining whether the black box software application is configured in a defective manner to process the application programming interface call and providing the application programming interface call for the identified call processing application.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Exemplary embodiments are described with reference to the accompanying drawings. In the figures the left most digit s of a reference number identifies the figure in which the reference number first appears. Wherever convenient the same reference numbers are used throughout the drawings to refer to the same or like parts. While examples and features of disclosed principles are described herein modifications adaptations and other implementations are possible without departing from the spirit and scope of the disclosed embodiments. It is intended that the following detailed description be considered as exemplary only with the true scope and spirit being indicated by the following claims.

In some embodiments a middleware switch is provided that may sit in between a caller and a remote web service . The middleware switch may provide a value added service e.g. a service to fix certain defects or product anomalies at the remote web service . The middleware switch may route APIs that are not defective directly to the remote web service but may capture the APIs that are defective and implement a local and correct implementation of the defective APIs e.g. as an alternative to routing those APIs for processing to the remote web service .

In some embodiments the caller module may be an application that is configured to use the remote web service . The Caller module may be a third party application that calls APIs in the remote web service . As an example the remote web service may implement accounting software providing basic accounting functions as APIs. The caller module may be an application that performs the payroll function of a business which uses the accounting API calls. The caller module may have access to the API specifications but may be designed without knowledge of any internal design or code details of the remote web service .

In some embodiments the remote web service may be an external third party system supporting a number n of APIs. These may be represented as API API . . . APIn see . They may be called over an HTTPS path for secure connection or HTTP if security is not required . The remote web service may offer certain basic business functions which may be used by other applications to build and offer value added services to end clients.

In some embodiments a test process may be provided to facilitate testing APIs to determine which are defective and which are not and for initialization of the middleware switch . The outcome s of the test process may indicate which APIs are defective or are perceived to be product anomalies and require one or more changes . The test process may be the output of a formal software test team deliverable. It may also be the output of a debug or triage operation. Any mechanism or method that provides a knowledge and tabulation regarding which APIs are working correctly or are defective may be utilized as a test process .

In some embodiments the middleware switch may include an API defect table that captures a list of defective APIs e.g. from the test process . In some implementations the API defect table may include a list of API names e.g. with API syntax e.g. list of in out parameters tabulated for each API. A more complex version is possible depending upon the implementation wherein priority of the API defects may be factored in or a defect may be differentiated to a product change request.

In some embodiments a shared data analysis unit may be provided which handles API in out parameter level data flow analysis. For example one of the defective APIs may use data that is shared with one or more non defective APIs. The shared data analysis unit may facilitate taking control of all the shared data amongst the defective and non defective APIs and making sure that the appropriate data is provided for computations related to any defective or non defective API.

In some embodiments a local copy database may be provided which may serve as the local repository for all shared data. It may be used as a primary database making any database of the remote web service serve instead as a shadow database. The primary database content e.g. that of the local database may take precedence and Read Write logic may be implemented to maintain the shadow database to be consistent to the content of the primary database.

In some embodiments an application business logic module may be provided including features specific to each of the defective APIs. For example every time the API call processing switching logic refers to a local copy the application business logic module may be utilized to format the data stored in the local copy such that it may be used by the API call processing switching logic . In some embodiments the application business logic module may implement a unitary transformation e.g. 1 1 value translation where the core Read Write Create functions may be executed as is. For example an inventory web database application may directly write the product ID and price to the database without any value transformation. In a more complex product setting the application business logic module may be required to transform the price from one currency to another or apply various discount policies depending on the merchant involved which may not be a straight forward database read write operation but instead may require the application business logic module to intervene.

In some embodiments the switch server may store the obtained information e.g. in the form of the API defect table in switch database see .

In some embodiments although the API call is ultimately intended to be provided to the application server the API call may be directed to a switch server instead see . For example in the API call above www.webservice1.com may point to switch server rather than application server . In alternate embodiments the API call may be addressed to the application server itself that is in the example above www.webservice1.com may point to application server itself but the application server may be configured to execute a middleware switch software module e.g. via a DLL that intercepts the API call before the API call is read by a web service application executing on the application server. It is to be understood that although the disclosure hereinafter may refer to a switch server the switch server may be implemented as a standalone server or as a process or application executing on the application server or in any other configuration.

In some embodiments the switch server may obtain the API call from the user device see . The switch server may generate a local copy of the API call see . The switch server may parse the copy of the API call and extract the API name and API call parameters see . For example if the switch server utilizes PHP commands the switch server may utilize the standard GET request  GET param to extract the API call parameters from the API call. Using the API call name and or API call parameters as inputs to a database query e.g. using PHP SQL commands such as SELECT the switch server may query a switch database for a whether the API name is listed on a defect list b other API s with whom the API shared data and c whether those API s are on the defect list see . An example of PHP SQL commands to query the switch database using the API call name as a lookup variable is provided below 

In some embodiments such records may be stored in a file e.g. a CSV text file etc. as an object in memory a hash table etc. In some embodiments the switch database records may be stored in a secure database and may be accessed only by the switch server or the middleware switch module executing on the application server .

The switch server may obtain the response of the switch database to the switch server query. The switch server may parse the received records and identify a whether the API name is listed on a defect list b other API s with whom the API shared data and c whether those API s are on the defect list. If the switch server determines that the API name is not on the defect list see option No e.g. the value of the defect flag in the pseudo code example above is FALSE the switch server may then determine whether the API shares data with an API that is on the defect list see . If the switch server determines that the API does not share data with any API that is on the defect list see option No e.g. the value of the datashareAPI defectflag list is NULL or otherwise indicates that no API listed in datashare API list is on the defect list the switch server may forward the original API call to the application server for processing see and the middleware processing may end at that point. Should the application server return results of the API call processing to the switch server the switch server may store the results in the switch database and or forward the results to the user device .

With reference to in some embodiments if the switch server determines that the API name is on the defect list see option Yes e.g. the value of the defect flag in the pseudo code example above is TRUE the switch server may then determine the type of data operation the API call invokes with respect to the shared data see . For example the API call may invoke the switch server to read write or create data that is shared by one or more other APIs. As an example the switch server may be required for processing the API call to read data that is created by the switch server processing another API call for an API that may or may not be on the defect list. As another example the switch server may be required for processing the API call to write data that may be later read by the switch server to process an API call for another API that may or may not be on the defect list.

If the switch server determines that the type of data operation is a READ operation see option Read the switch server may query the switch database for a local copy of the shared data that is to be read for processing the API call see . The switch database may provide the requested data see . Using the requested shared data the switch server may invoke a local copy of the API call for processing and may utilize the obtained shared data for processing the API call locally e.g. at the middleware switch solution rather than by the application service associated with application server see . If the switch server determines that the type of data operation is a CREATE or WRITE operation see option Write Create the switch server may invoke a local copy of the API call for processing rather than forward the API call to the application service associated with application server see . If the local copy of the API call is invoked the switch server may write the output of the call processing to the switch database see which may store the output of the call processing for later retrieval and use see .

With reference to in some embodiments if the switch server determines that the API name is not on the defect list see option No but does share data with an API that is on the defect list see option Yes the switch server may then determine the type of data operation the API call invokes with respect to the shared data see . If the switch server determines that the type of data operation is a READ operation see option Read the switch server may query the switch database for a local copy of the shared data that is to be read for processing the API call see . The switch database may optionally provide the requested data see . The switch server may invoke a local copy of the API call for processing and may utilize the obtained shared data for processing the API call locally e.g. at the middleware switch solution rather than by the application service associated with application server see .

If the switch server determines that the type of data operation is a CREATE or WRITE operation see option Write Create the switch server may forward the original API call to the application server for processing see and request the result of call processing from the application server . Should the application server return results of the API call processing to the switch server see the switch server may store the results in the switch database see . For example the switch server may write the output of the call processing to the switch database see which may store the output of the call processing for later retrieval and use see .

The above stated method operations are presented in an algorithm written in pseudo code below. The algorithm may be implemented using a computer programming language as software that runs on a computer system such as described below with reference to .

The embodiments above in the current disclosure are targeted to fix defects from outside of the defective black box software. However this concept is also extensible to providing other value add to the black box software which might be deficient in other defect unrelated issues. One such example is being deficient in SDLC software development life cycle artifacts. If the black box software is developed in an ad hoc manner without adequate SDLC artifacts or in a merger acquisition scenario where the SDLC artifacts are simply unavailable then the proposed concepts can be used to build and provide the missing SDLC artifacts. For example box in and likewise box in can be an SDLC accelerator in some embodiments which can retrofit the missing SDLC artifacts to the otherwise deficient black box software.

Embodiments of the disclosure may differentiate the API call processing logic using the nature Read Write or Create of the API call. For non defective APIs with shared data with defective APIs the implementation may use reference to both local copy as well as remote web services maintained copies of the data set. Shared data analysis may be made per atomic data items as referenced in the API call parameters list. However this approach of shared data analysis on per atomic data item may become micromanagement of the local stored copies as well as repeated frequent calls to the remote web services. Indeed it is possible to group a number of data items into a single cluster and make a single DB call or single call to the remote web services to reduce the call processing overhead. In such designs a cluster of API calls may be processed together each logically following the system and method described above however the actual Read Write Create requests to the local storage or to the remote web services may be combined. Exemplary benefits could include performance gain and reduced database overhead.

Embodiments of the present disclosure are API call reference based. The target defective black box software may be hosted as a remote web service and the references to the defective software may be API calls. API calls may be intercepted in transit to determine if a fix is required and the fix solution may be rendered in real time. However this idea is not limited to API calls only. The idea is perfectly scalable to client server messaging domain. If the target defective software is hosted as a Server to with which the clients communicate via messaging i.e. non web based request response then a gateway for message processing can be implemented analogous to the API call processing switch. The messaging gateway may likewise make a distinction between defective calls vis vis non defective but shared data calls vis vis non defective and data disjoint calls. The call processing logic may be analogous and equivalent however the specific implementation details would depend on the messaging platform instead of HTTP or HTTPS protocol.

Embodiments of the present disclosure target defective black box software either in API reference format or in client server messaging format by directly intervening the API calls or the message requests. This may be a direct 1 1 caller to called relationship tracking system. The design and the underlying ideas of fixing a black box defective software can be scaled from 1 1 to 1 many environments. In this model multiple N defective black box software each with its own defect list may be processed at a central call processing switch. In addition to the call processing logic of differentiating based upon defective or not nature of the APIs and API operation type Read Write Create there may also be a first level switch which steers the call to anyone of the N different and distinct black box defective software that are being processed. Logically the central processing switch becomes a grand OR i.e. Union operation over the call processing switches for each respective black box defective software. This implementation can be useful if the current invention is being designed and deployed as a scalable service add ON for fixing defects in any black box defective software.

Processor may be disposed in communication with one or more input output I O devices via I O interface . The I O interface may employ communication protocols methods such as without limitation audio analog digital monoaural RCA stereo IEEE 1394 serial bus universal serial bus USB infrared PS 2 BNC coaxial component composite digital visual interface DVI high definition multimedia interface HDMI RF antennas S Video VGA IEEE 802.n b g n x Bluetooth cellular e.g. code division multiple access CDMA high speed packet access HSPA global system for mobile communications GSM long term evolution LTE WiMax or the like etc.

Using the I O interface the computer system may communicate with one or more I O devices. For example the input device may be an antenna keyboard mouse joystick infrared remote control camera card reader fax machine dongle biometric reader microphone touch screen touchpad trackball sensor e.g. accelerometer light sensor GPS gyroscope proximity sensor or the like stylus scanner storage device transceiver video device source visors etc. Output device may be a printer fax machine video display e.g. cathode ray tube CRT liquid crystal display LCD light emitting diode LED plasma or the like audio speaker etc. In some embodiments a transceiver may be disposed in connection with the processor . The transceiver may facilitate various types of wireless transmission or reception. For example the transceiver may include an antenna operatively connected to a transceiver chip e.g. Texas Instruments WiLink WL1283 Broadcom BCM4750IUB8 Infineon Technologies X Gold 618 PMB9800 or the like providing IEEE 802.11a b g n Bluetooth FM global positioning system GPS 2G 3G HSDPA HSUPA communications etc.

In some embodiments the processor may be disposed in communication with a communication network via a network interface . The network interface may communicate with the communication network . The network interface may employ connection protocols including without limitation direct connect Ethernet e.g. twisted pair 10 100 1000 Base T transmission control protocol internet protocol TCP IP token ring IEEE 802.11a b g n x etc. The communication network may include without limitation a direct interconnection local area network LAN wide area network WAN wireless network e.g. using Wireless Application Protocol the Internet etc. Using the network interface and the communication network the computer system may communicate with devices and . These devices may include without limitation personal computer s server s fax machines printers scanners various mobile devices such as cellular telephones smartphones e.g. Apple iPhone Blackberry Android based phones etc. tablet computers eBook readers Amazon Kindle Nook etc. laptop computers notebooks gaming consoles Microsoft Xbox Nintendo DS Sony PlayStation etc. or the like. In some embodiments the computer system may itself embody one or more of these devices.

In some embodiments the processor may be disposed in communication with one or more memory devices e.g. RAM ROM etc. via a storage interface . The storage interface may connect to memory devices including without limitation memory drives removable disc drives etc. employing connection protocols such as serial advanced technology attachment SATA integrated drive electronics IDE IEEE 1394 universal serial bus USB fiber channel small computer systems interface SCSI etc. The memory drives may further include a drum magnetic disc drive magneto optical drive optical drive redundant array of independent discs RAID solid state memory devices solid state drives etc. Variations of memory devices may be used for implementing for example switch database API defect table local copy or the like.

The memory devices may store a collection of program or database components including without limitation an operating system user interface application web browser mail server mail client user application data e.g. any data variables or data records discussed in this disclosure etc. The operating system may facilitate resource management and operation of the computer system . Examples of operating systems include without limitation Apple Macintosh OS X Unix Unix like system distributions e.g. Berkeley Software Distribution BSD FreeBSD NetBSD OpenBSD etc. Linux distributions e.g. Red Hat Ubuntu Kubuntu etc. IBM OS 2 Microsoft Windows XP Vista 7 8 etc. Apple iOS Google Android Blackberry OS or the like. User interface may facilitate display execution interaction manipulation or operation of program components through textual or graphical facilities. For example user interfaces may provide computer interaction interface elements on a display system operatively connected to the computer system such as cursors icons check boxes menus scrollers windows widgets etc. Graphical user interfaces GUIs may be employed including without limitation Apple Macintosh operating systems Aqua IBM OS 2 Microsoft Windows e.g. Aero Metro etc. Unix X Windows web interface libraries e.g. ActiveX Java Javascript AJAX HTML Adobe Flash etc. or the like.

In some embodiments the computer system may implement a web browser stored program component. The web browser may be a hypertext viewing application such as Microsoft Internet Explorer Google Chrome Mozilla Firefox Apple Safari etc. Secure web browsing may be provided using HTTPS secure hypertext transport protocol secure sockets layer SSL Transport Layer Security TLS etc. Web browsers may utilize facilities such as AJAX DHTML Adobe Flash JavaScript Java application programming interfaces APIs etc. In some embodiments the computer system may implement a mail server stored program component. The mail server may be an Internet mail server such as Microsoft Exchange or the like. The mail server may utilize facilities such as ASP ActiveX ANSI C C Microsoft .NET CGI scripts Java JavaScript PERL PHP Python WebObjects etc. The mail server may utilize communication protocols such as internet message access protocol IMAP messaging application programming interface MAPI Microsoft Exchange post office protocol POP simple mail transfer protocol SMTP or the like. In some embodiments the computer system may implement a mail client stored program component. The mail client may be a mail viewing application such as Apple Mail Microsoft Entourage Microsoft Outlook Mozilla Thunderbird etc.

In some embodiments computer system may store user application data such as the data variables records etc. e.g. API defect table shared data analysis unit API call processing switching logic application business logic local copy or the like as described in this disclosure. Such databases may be implemented as fault tolerant relational scalable secure databases such as Oracle or Sybase. Alternatively such databases may be implemented using standardized data structures such as an array hash linked list struct structured text file e.g. XML table or as object oriented databases e.g. using ObjectStore Poet Zope etc. . Such databases may be consolidated or distributed sometimes among the various computer systems discussed above in this disclosure. It is to be understood that the structure and operation of any computer or database component may be combined consolidated or distributed in any working combination.

The specification has described systems and methods for fixing software defects in a binary or executable file. The illustrated steps are set out to explain the exemplary embodiments shown and it should be anticipated that ongoing technological development will change the manner in which particular functions are performed. These examples are presented herein for purposes of illustration and not limitation. Further the boundaries of the functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternative boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed. Alternatives including equivalents extensions variations deviations etc. of those described herein will be apparent to persons skilled in the relevant art s based on the teachings contained herein. Such alternatives fall within the scope and spirit of the disclosed embodiments. Also the words comprising having containing and including and other similar forms are intended to be equivalent in meaning and be open ended in that an item or items following any one of these words is not meant to be an exhaustive listing of such item or items or meant to be limited to only the listed item or items. It must also be noted that as used herein and in the appended claims the singular forms a an and the include plural references unless the context clearly dictates otherwise.

Furthermore one or more computer readable storage media may be utilized in implementing embodiments consistent with the present disclosure. A computer readable storage medium refers to any type of physical memory on which information or data readable by a processor may be stored. Thus a computer readable storage medium may store instructions for execution by one or more processors including instructions for causing the processor s to perform steps or stages consistent with the embodiments described herein. The term computer readable medium should be understood to include tangible items and exclude carrier waves and transient signals i.e. be non transitory. Examples include random access memory RAM read only memory ROM volatile memory nonvolatile memory hard drives CD ROMs DVDs flash drives disks and any other known physical storage media.

It is intended that the disclosure and examples be considered as exemplary only with a true scope and spirit of disclosed embodiments being indicated by the following claims.

