---

title: Automation and programmability for software defined networking systems
abstract: System, method, and computer program product to orchestrate software defined networking (SDN) applications, by providing a plurality of network elements in a network, each network element comprising a plurality of ingress interfaces, a plurality of egress interfaces, and a routing information base (RIB), providing, to an SDN application, an application program interface (API) to abstract properties and events of: (i) the ingress interfaces, (ii) the egress interfaces, and (iii) the RIB of a specified network element, receiving a request from the SDN application apply a function to the specified network element, the function specifying to modify: (i) a preprocessing operation on a data packet, (ii) the RIB, (iii) a post processing operation on the data packet, and (iv) the properties of the ingress interfaces, egress interfaces, and RIBs of the specified network element, and applying the function to the specified network element through the API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047143&OS=09047143&RS=09047143
owner: Cisco Technology, Inc.
number: 09047143
owner_city: San Jose
owner_country: US
publication_date: 20130315
---
Embodiments presented in this disclosure generally relate to software defined networking SDN systems. More specifically embodiments disclosed herein provide automation and programmability for SDN enabled networking systems.

Networks have not traditionally been programmable entities. Although some programming frameworks may be used to configure networks the intelligence has always been in the framework and not the network. It would be useful to put more programmability in each switch and router rather than in the framework where network operations may be implemented as a series of operations that are reflected into the network hardware. As networks become more complex and the need for them to respond to external changes in near real time the current approach of configuring networks at individual devices becomes impractical.

Embodiments disclosed herein provide a method to orchestrate software defined networking SDN applications. This method may generally include providing a plurality of network elements in the software defined network each of the plurality of network elements comprising a plurality of ingress interfaces a plurality of egress interfaces and a routing information base RIB providing to an SDN application executing on a specified network element an application program interface API to abstract properties and events of i the ingress interfaces of the specified network element ii the egress interfaces of the specified network element and iii the RIB of the specified network element receiving a request from the SDN application invoke a function of the API to apply the function to the specified network element and applying the function to the specified network element through the API.

Software defined networking SDN techniques disclosed herein allow a network traditionally a static entity to become more dynamic in nature. SDN opens networks to application developers who may write applications to manage network elements and data flows passing through a network element without requiring physical access to the network elements themselves. Thus rather than a network element being a fixed function appliance SDN considers network hardware to be part of a distributed computational system that can be manipulated by software. An application developer writing applications for an SDN may execute the application in the network which may include any device which processes data flows between computing systems e.g. a switching or routing element connecting host systems to a network and devices connecting one computing network to another as well as other computing devices able to execute the application while connected to the network. The application may execute commands and apply functions to the network devices and the data flows remotely or locally on the network element itself. Using applications in an SDN developers may manage networking functions of a network element such as routing quality of service QoS and bandwidth allocation as well as manage performance and or properties the network elements themselves. Additionally different programming logic may be applied to different flows or packets in the same network topology such that each network graph need not have its own instance of the SDN application.

Software defined networking in general provides additional flexibility and solidarity relative to conventional networks. Using an SDN controller which may be either centrally located or located on the respective network devices a network administrator can configure the control plane and dictate how the network devices route data. For example the network administrator may assign criteria or SDN rules that when satisfied instruct the network device to perform a specific action on the received packet e.g. drop the packet forward the packet to a particular network device evaluate the packet using an application on the network device and the like. In one embodiment the SDN controller configures the routing table or forwarding table i.e. forwarding information base in a network device based on the criteria or SDN rules.

Embodiments disclosed herein allow user applications to manage and coordinate applications executing on a variety of network hardware devices e.g. switches and routers in a data center. In one embodiment application programming interfaces APIs abstract the specific implementation details of each network element from such applications. This common programming model allows network elements to be accessed and modified using SDN applications that use application program interfaces APIs which abstract system and network services common to all network elements.

After receiving a packet on an ingress port a network device in the SDN enabled network may evaluate the packet to determine what action to take. The network devices may rely on the different headers of the packet e.g. source and destination addresses security group tag MAC layer priority value VLAN ID etc. to determine the action. The network device may also perform deep packet inspection to determine what action is appropriate. By matching the packets to a packet field in a SDN rule the network device is able to identify an action to take regarding the packet.

The descriptions of the various embodiments of the present disclosure have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the disclosure may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present disclosure a user may access the application programming interfaces APIs for network elements or related data available in the cloud. An operator of a physical data center in the cloud providing cloud services may use the APIs to alter control or otherwise determine routing and forwarding controls for traffic generated by cloud customers e.g. customers hosting virtual machine instances networked by virtual networks based on non routing criteria relevant to the service provider. In such a case the APIs could store modified routes and data related to the non traditional routing criteria at a storage location in the cloud. Doing so allows a user to access this information from any computing system attached to a network connected to the cloud e.g. the Internet .

The network elements generally include a processor connected via a bus to a memory and a network interface device . The network elements are configured to execute containerized software applications such as the networking application . The network elements are generally under the control of an operating system not shown . Examples of operating systems include the UNIX operating system distributions of the Linux operating system and the IOS operating system by Cisco Systems . The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. The processor may execute software developed for the purposes of embodiments disclosed herein. Similarly the memory may be a random access memory. While the memory is shown as a single identity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. The network interface device may be any type of network communications device allowing the network elements to communicate with other network elements and computers via the SDN enabled network .

As shown the memory contains an orchestration application which is an application generally configured to orchestrate automation and programmability of the network elements in the SDN enabled network . Generally the orchestration application is an interface to a plurality of APIs used to abstract the implementation specific details of the network elements in the SDN enabled network . Stated differently the APIs of the orchestration application are abstraction tools that permits a programmer or network administrator to access and monitor different functions and outputs of network elements in the SDN enabled network . By using the orchestration application and the APIs functional programming techniques may be used to program a wide range of network elements regardless of the wide array of distinctions found between specific network elements . In particular the orchestration application may provide an interface to allow an application such as the networking application to read write and modify the routing table and routing engine of a network element .

The memory also contains a networking application which may be any application configured to inspect or modify the networking capabilities attributes and functionalities of the network elements as well as the data flows passing through them. For example the networking application may invoke functions provided by the APIs to return attributes and functionalities from a network element and issue commands through the APIs to apply functions to change the attributes and routing functionalities of the network element . Additionally the networking application may modify the functionality of the network element e.g. to manipulate the forwarding and processing of data flows in the network element . For example the networking application may use the APIs provided by the orchestration application to modify the RIB and routing engine of the network elements .

The network elements in the SDN enabled network may be any networking device such as a router switch bridge etc. More generally each network element provides computing hardware used to forward route or otherwise process network data e.g. packets and frames as it flows from one host to another. Each network element may run an operating system tailored to the particular hardware or networking functions of that networking element. At the same time disparate network elements execute the orchestration application and provide the APIs in order to allow different types of functions to be applied consistently by the networking application . The routing engine of the network elements is an application generally configured to execute the core networking functions of the respective network element. The routing engine may interact with the routing information base RIB also referred to as a routing table which specifies a plurality of rules used by the routing engine to route packets received on an ingress port not shown of the network elements to a proper egress port not shown of the network elements . In one embodiment the RIB of each respective network element includes immediate topology information of the SDN enabled network i.e. what other network elements a respective network element is connected to and so on.

As shown the memory also contains the application programming interfaces APIs which stores the APIs provided by the orchestration application to the networking application . In one embodiment the APIs are an integrated component of the orchestration application or the networking application . The APIs abstract and provide data associated with the different functions of the network elements such as statistics associated with the network element their routing tables a status of the network elements topology information errors and the like. Moreover APIs may also permit a programmer or network administrator to control the functions of the network elements such as change settings in the forwarding engine change the state of the network elements etc. An application such as the networking application may use the APIs to send commands to access data from and apply functions to the network elements .

The networking application may invoke APIs supported by the orchestration application to read and modify the RIB as well as the decisions made by the routing engine in routing packets. In addition the networking application may read the RIB to determine where the routing engine routes a given packet. Furthermore the networking application may read and modify preprocessing and post processing operations performed on data packets flowing through the network elements . Attributes properties and events of the network elements and their respective interfaces may be provided to the networking application by the orchestration application through one or more APIs . Likewise these attributes properties and events may be modified by the networking application using the APIs provided by the orchestration application .

The computers may be capable of executing applications such as the networking application which may utilize the APIs provided by the orchestration application . Therefore in one embodiment the orchestration application the networking application as well as other user applications may be executed on one or more of the computers in order to modify the routing behavior or any behavior of some or all of the network elements . In still another embodiment the computers may be blade servers which execute the networking application in the SDN enabled network .

When one of the ingress interfaces receives a data packet or frame a designated component of the network element may apply a respective set of preprocessing functions to the data packet . The preprocessing functions may be any type of networking function such as dropping packets based on predefined logic applying a quality of service QoS function DHCP rules logging events authentication authorization and accounting AAA protocols deep packet inspection formatting reordering queuing tagging modifying destination IP addresses or a custom networking function based on rules defined by an application programmer. The rules may orchestrate several components of the network element to perform the preprocessing functions which may be applied across several network elements.

In one embodiment an application such as the networking application may read and write attributes and events of the ingress interfaces using the APIs provided by the orchestration application . For example the APIs may return properties statuses link information and other attributes of the ingress interfaces which the networking application can then modify. Additionally the networking application may read write modify delete and add functions to the preprocessing functions . For example the networking application may trigger the application of QoS while preprocessing some packets and include deep packet inspection while preprocessing other packets. As another example the networking application may modify the QoS of different packets by directing an input filter of the ingress interfaces to identify a particular set of packets such as those belonging to a particular user or application and modify the priority of the packets when detected.

Once the network element preprocesses the data packet the routing engine determines where to route the data packet based on information contained in the routing information base RIB . The RIB may implement routing rules including but not limited to Open Shortest Path First OSPF Intermediate System to Intermediate System IS IS and Enhanced Interior Gateway Routing Protocol EIGRP to determine which egress interface the data packet should be forwarded through in order to reach its appropriate destination.

A programmer may develop applications i.e. the networking application to read write modify and override the rules in the RIB . In one embodiment to do so the programmer may invoke the APIs provided by the orchestration application . For example the networking application may examine the RIB and determine that the data packet may reach its destination by being forwarded out of egress interface . However the networking application may have determined as part of the preprocessing functions that the data packet belongs to a particular class of applications whose packets should be diverted to a server for further processing prior to being forwarded towards a destination. The networking application may use the APIs of the orchestration application to identify the properties of the egress interfaces in order to determine that egress interface is connected to the server. Alternatively the networking application may use the RIB to determine that a packet destined for the server should use egress interface . The networking application may then override the decision to forward the packet through egress interface and instead forward the packet through egress interface such that it is sent to the server for further processing.

Once the routing decision has been made by the routing engine a plurality of post processing functions may be applied to the data packet by a designated component of the network element before it is forwarded via the appropriate egress interface . The post processing functions may be any type of networking function such as dropping packets based on predefined logic applying a quality of service QoS function DHCP rules logging events authentication authorization and accounting AAA protocols deep packet inspection formatting reordering queuing tagging modifying destination IP addresses or a custom networking function based on rules defined by an application programmer. The rules may orchestrate several components of the network element to perform the post processing functions which may be applied across several network elements.

Embodiments disclosed herein allow an application such as the networking application to read and write attributes and events of the egress interfaces by using the APIs provided by the orchestration application . For example the APIs may return properties statuses link information and any other attributes of the egress interfaces which may then be modified by the networking application . Additionally the networking application may read write modify delete and add functions to the post processing functions . For example the networking application may drop packets that meet predefined criteria or change the egress port through which one or more packets is routed.

Advantageously any networking operation may be performed on the network element and the components thereof using the APIs provided by the orchestration application . The APIs also allow an application such as the networking application to read and write any attribute capability status or any value of the network element and the components thereof regardless of whether the application executes on the network element or an external computing device.

The service sets provide a set of base network services that allow application developers to run existing applications that run on any platform within a container and discover other services and network resources. The network services may be the common APIs that applications such as the networking application code to. The APIs may be the same for all implementations of the network element providing the underlying network functionality. A network service may be made available to the developer s application in the language and programming of model of choice by the service presentation function of the orchestration application . The layer below the application presentation library may be an application communication library which may act as the client for transporting network services from the network element. A service set may be derived from one or more network element features and may require one or more feature APIs. The implementation of a network service from these feature APIs occurs within a network element abstraction library of the orchestration application . The layer below the abstraction library is the network element communication library of the orchestration application which may act as the server for transporting the network service to one or more network applications such as the network application requiring the service.

The data path service set may provide APIs that allow an application developer to hook into the packet flow of a network element such as a switch or a router and extract packets from that flow of packets. These packets may either be copied from the data path to an application such as the networking application or they may be punted or diverted to the networking application . When a packet is punted it does not continue to its destination until the application returns it to the data path possible modified. When copied a copy of the packet continues to its destination while the other is sent to the application.

The policy service set may be a QoS policy service set which allows requesting applications to apply a QoS policy to a network element. A policy is a mechanism to detect packets with specific attributes such as a specific SCP value and then apply a QoS action such as priority queuing to those packets.

The routing service set may provide APIs allow access to the RIB of network elements route up down support and the application route table. The element service set may return capabilities and attributes of a network element. The capabilities of network elements may be specific network functions which may be performed by each respective network element including but not limited to routing firewall Quality of Service QoS deep packet inspection encryption and compression. The attributes of a network element may include but are not limited to hardware components operating systems physical location states interfaces interface attributes element and interface events and the like. In one embodiment an element service set may be provided which returns the network element properties. An application requesting information such as the networking application would connect to a given network element and the session would be managed by the element service set . Once the networking application is authenticated and authorized it may access the network element information and other provided service sets.

Examples of specific services provided by the element service set include the ability to provide information representing the hardware that hosts the network element s operating system and providing services to requesting applications. The element service set may also provide static attributes of the network element which may be cached and dynamic attributes of the network elements that may be retrieved on demand to reflect the latest network element status. Example attributes include a textual description of the network element which indicates the full name and version identification of the network element s hardware type software operating system and networking software. Additionally the description may include an administratively assigned name for the network element and a time since the network element was last restarted. Process information about the network element may also be returned such as CPU and memory status which indicate the processes running on the network elements.

The element service set may also provide introspection into network element interfaces and ports by providing an abstraction for virtual and or physical interfaces on a network element. The element service set may provide information related to interface attributes including but not limited to a static property configuration dynamic status and packet statistics of the network interface. Additionally an application using the element service set may register for network interface events such as CDP Cisco Discovery Protocol events filtering criteria and state events.

The discovery service set may provide a mechanism for an application to discover remote or local network elements a network topology and network elements providing common services. The discovery mechanism may be dynamic or static. The discovery service set interface may use a discovery protocol such as CDP on the network element or from the requesting application itself. In either case information returned to the application will be the same with the source of the information being the only difference. In the case of a remote discovery the event source may be the name of the network element and in the case of application discovery the event source may be the application name.

The utility service set may provide an interface to perform authentication authorization and accounting AAA for users using standard RADIUS TACACS protocols without requiring an AAA client that understands these protocols. The utility service set may also allow applications to register for notifications of events. A developer service set may provide interfaces to set unset and query a logging level audit trails a tracing interface and a management interface. The developer service set may provide interfaces to set unset and query a logging level audit trails a tracing interface and a management interface.

Advantageously embodiments disclosed herein provide abstractions which allows for the programming and management of a wide range of network elements regardless of the underlying implementation thereof.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In view of the foregoing the scope of the present disclosure is determined by the claims that follow.

