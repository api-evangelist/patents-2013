---

title: Using windows authentication in a workgroup to manage application users
abstract: An system for authenticating users of an application program executing at a front-end computer using the security features built into the operating system of a logon computer is provided. Initially, an administrator establishes user accounts for each user with an operating system executing at the logon computer with access to application resources. When the application program starts executing at the front-end computer, the application program prompts the user for credentials. The application program attempts to access resources managed by the logon computer using the received credentials. When access to a resource is successful, the application program knows that the logon computer has authenticated the user and the user is authorized to access the resource. In this manner, the application program can take advantage of the security features built into the operating system executing at the logon computer to authenticate users of the application program and authorize access to application resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997194&OS=08997194&RS=08997194
owner: Microsoft Technology Licensing, LLC
number: 08997194
owner_city: Redmond
owner_country: US
publication_date: 20130703
---
This application is a continuation application of U.S. patent application Ser. No. 12 138 302 filed on Jun. 12 2008 now U.S. Pat. No. 8 533 797 and entitled USING WINDOWS AUTHENTICATION IN A WORKGROUP TO MANAGE APPLICATION USERS which is incorporated herein in its entirety by reference.

Many organizations such as companies and nonprofit organizations use application programs to manage various resources such as financial records inventories transaction histories and other databases. These application programs include point of sale programs accounting programs customer relation management programs enterprise resource management programs security programs and so on. Some application programs may be multi user programs installed on each of several front end computers connected via a communications link each front end computer providing a user with access to the application program. For example a retail store may provide front end computers at each of several checkout lanes where a cashier can access the application program and conduct various transactions. A user may first logon to a front end computer using a pre established account on the front end computer and then execute the application program. Alternatively the front end computer may already be logged into an account such as a guest account or may allow any user to execute the application program without logging on. Application programs may manage or have access to privileged or confidential information or resources e.g. customer data credit card information transaction records or secured premises and require varying levels of access to these resources. For example a retail cashier may be able to view customer data and perform sales transactions while a retail manager may be able to edit customer data and void transactions in addition to being able to perform all of the actions a cashier can perform.

Some application programs authenticate and authorize access to resources using proprietary or third party security mechanisms built into the application program. For example a point of sale application program may store credentials and user account information at a primary computer and prompt users to provide credentials to logon to their account each time they require access to the application program. When the user provides credentials the application program may transmit the credentials to an instance of the application program at the primary computer to authenticate the user and authorize requests from users to access data. Alternatively credentials and account information may be distributed to front end computers periodically so that the application program can authenticate and authorize requests from users to access data without accessing a primary computer. However distributing credentials and account information can create latency issues. For example a computer may not be available when the information is distributed and new users or users whose account and credential information has changed may be unable to connect to the application program until the next distribution.

Requiring application program providers to integrate security features into their application programs and maintain these features can be time consuming expensive and duplicative for the providers as each application program provider may need to implement their own security mechanisms or incorporate third party security modules. Further complicating this problem is the requirement that the security features of these application programs comply with various industry standards such as the Payment Card Industry PCI Data Security Standard and Payment Application Best Practices PABP set forth by various standards setting bodies such as the PCI Security Standards Council and Visa Inc. Application program providers must continually update their application programs to meet these changing standards or face security risks loss of customer confidence and loss of accreditation.

An authentication system for authenticating the user of an application program executing at a front end computer using security features built into the operating system of a logon computer is provided. Initially an administrator establishes user accounts for each user with an operating system executing at the logon computer. The administrator grants each user via the user account access to a resource access to which is managed by the operating system executing at the logon computer. Access to protected resources and data used by the application may be managed by the operating system executing at the logon computer by an intermediary computer or by other mechanisms. When the application program starts executing at the front end computer the application program needs to authenticate the user and check whether that user is authorized to access those resources. To authenticate the user the application program prompts the user to enter their credentials. When the application program receives the credentials the application program attempts to access the resource managed by the logon computer by sending a request to access the resource and the received credentials to the logon computer which stores account information and access rights for each user account. Using the pre established user accounts the operating system executing at the logon computer can determine whether a user has provided valid credentials and whether the user account associated with those credentials has permission to access the resource. An indication of whether the attempt was successful is then returned to the front end computer. The front end computer may then provide an indication to the user that the attempt was successful and that the user is authenticated. If the attempt was unsuccessful the application program may prompt the user to re enter credentials. In this manner the application program can take advantage of the security functionality built into the operating system executing at the logon computer to authenticate users of the application program.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

An authentication system for authenticating the user of an application program executing at a front end computer using security features built into the operating system of a logon computer is provided. Initially user accounts are established for each user with an operating system executing at the logon computer. For example an administrator or a user with administrative privileges may connect to the logon computer and establish accounts for two users Joe and Sally. Each account specifies credentials for authenticating a specific user such as a username password date of birth social security number biometric data etc. The administrator may grant each user via the user account access to a resource access to which is managed by the operating system executing at the logon computer. For example the administrator may grant Joe and Sally access to a file or a database located on the logon computer. These permissions may be stored in association with the user accounts the resources or both. Furthermore the administrator may associate each user account with a group with a set of privileges that may be attributed to any user account associated with the group. These groups may correspond to user roles established by the application program. For example the administrator may associate Joe with a cashier group and associate Sally with a manager group. The cashier group may have read access to a database located on the logon computer and the manager group may have read and write access to the database.

When a user accesses a front end computer the user may need to log on to the operating system executing at the front end computer before executing the application program. Once executed the application program needs to check the credentials of the user. The logon accounts at each front end computer may be inefficient for authenticating a user because they require that each front end computer contain complete account information for each user which can create latency problems and duplicative account information stored at several front end computers. To authenticate the user the application program prompts the user to enter their credentials by for example displaying a dialog box providing a location for a user to enter a username and password or any other data the application program may require to authenticate the user. When the user supplies the credentials to the application program the application program attempts to access the resource managed by the logon computer by sending a request to access the resource and the received credentials to the logon computer which stores account information and access rights for each user account. Because the operating system executing at the logon computer manages access to the resource the authentication system can take advantage of the security features built into the operating system to authenticate the user. Using the pre established user accounts the operating system executing at the logon computer can determine whether a user has provided valid credentials and whether the user account associated with those credentials has permission to access the resource. The operating system executing at the logon computer then transmits to the front end computer an indication of whether the attempt was successful. The front end computer may then provide an indication to the user that the attempt was successful and the user is authenticated such as displaying a welcome message or transitioning to another user interface screen of the application program. If the attempt was not successful the user may be prompted to re enter credentials. In this manner the application program can take advantage of the security functionality built into the operating system executing at the logon computer to authenticate the user of an application program without requiring complete account information to be transferred to or stored at each front end computer.

In some embodiments the operating system of the logon computer may use tokens to authenticate users. Tokens provide information about a user account such as a user identifier groups with which the user account is associated and access rights and privileges associated with the user account. Operating systems generate tokens based on user credentials and use the tokens to authenticate users and authorize user requests to access resources. When credentials are presented to an operating system some operating systems generate a token and return the token along with an indication of whether the credentials are valid i.e. the user is authenticated . Some operating systems however generate tokens without indicating whether the credentials are valid. If a user provides incorrect credentials the operating system generates a token having no access to resources managed by the operating system. If the operating system does not indicate whether the credentials are valid the authentication system will not know whether the user has been authenticated by the operating system. In these environments additional steps are required to authenticate a user. For example an application may determine whether the token is valid and thus authenticate the user by requesting access to a resource managed by the operating system using the token generated with credentials received from the user. If the requested access is successful the application considers the token valid and authenticates the user.

In some embodiments the authentication system may take advantage of the built in security features of the operating system executing at the logon computer to authenticate users of an application program and to authorize requests made by those users to access a resource. As described above user accounts are established for each of a plurality of users with an operating system executing at the logon computer and access to a resource managed by the operating system is granted to each user. For example each user may be granted permission to open a connection to a database. Upon executing the application program the user is prompted to enter credentials these credentials are then passed to the operating system executing at the logon computer e.g. via a remote logon request of the MICROSOFT WINDOWS operating system which generates a token using the received credentials. Because the token generation process may not indicate whether the credentials are valid the application program cannot confirm authentication upon receipt of the token. To determine whether the token is valid and thus authenticate the user the application program may attempt to use the token to access a resource managed by the operating system executing at the logon computer. For example the application program may automatically attempt to open a connection to a database managed by the logon computer using the token. Because the operating system executing at the logon computer manages access to the database the authentication and authorization features built into the operating system are used to process the request to open a connection to the database. If the operating system executing at the logon computer denies access to open a connection to the database then the application program assumes the credentials were invalid or that the account with those credentials was not authorized to connect to the database and prompts the user to re enter the credentials. If a connection is opened the user is assumed to be authenticated and authorized to connect to the database and the token stored at the front end computer so that requests by the user to access the database can be made using the token. When the user requests access to the database e.g. to read data the application program forwards a request with the token to the logon computer. The operating system executing at the logon computer determines whether the user has permission to access the database in the manner requested and if so the database is accessed. In this manner the authentication system uses the operating system executing at the logon computer to authenticate users of the application program and to authorize access requests made by those users.

In some embodiments the authentication system may use the built in security features of the operating system executing at the logon computer to authenticate an application program user at a front end computer attempting to access a resource located at an intermediary computer. In this example the intermediary computer uses the token model to authenticate users requesting access to a database stored at the intermediary computer. As described above user accounts are first established with the logon computer. Each user account specifies access rights to at least one resource managed by the logon computer. Furthermore an access control list is created and stored at the intermediary computer by for example an administrator. The access control list provides an indication of each user s access rights to the database. When a user executes the application program the application program prompts the user to enter credentials. The application program passes these credentials to the intermediary computer which requests a token from the logon computer using the credentials e.g. via a remote logon request . After receiving the token the intermediary computer requests access to the resource of the logon computer using the token. Because the operating system executing at the logon computer manages access to the resource the security features of the operating system are employed to authorize the request access and therefore validate the token and authenticate the user. An indication of whether the operating system executing at the logon computer authorizes the requested access is then returned to the intermediary computer which forwards it to the front end computer. If the access request was not successful the user may be prompted to re enter credentials. If the access request was successful the user is authenticated and the front end computer stores the token so that requests to access the database can be made using the token. In some embodiments the token is also stored at the intermediary computer. When the token is stored at the intermediary computer and a user requests access to the database using a token the user is authenticated at the intermediary computer by comparing the stored token with the received token. If the tokens are identical the user is authenticated. If however the token is not stored at the intermediary computer and a user requests access to the database using a token the token is passed to the logon computer where the validity of the token and the authenticity of the user can be determined by attempting to access the resource at the logon computer using the token. Once the user is authenticated the access control list is used to determine whether the user is authorized to access the database in the manner requested. In this manner the security features of the operating system executing at the logon computer are used to authenticate users at front end computers attempting to access a resource at an intermediary computer.

The computing devices on which the authentication system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives . The memory and storage devices are computer readable media that may be encoded with computer executable instructions that implement the authentication system which means a computer readable medium that contains the instructions. In addition the instructions data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communications link and may be encrypted. Various communications links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the authentication system may be implemented in and used with various operating environments that include personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers computing environments that include any of the above systems or devices and so on.

The authentication system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. For example in some embodiments a single computer may perform roles of both the front end computer and the logon computer. As another example the authentication system may use the security features built into an operating system executing at a logon computer to control access to other devices such as a peripheral attached to the logon computer a security gate a vault and so on. Furthermore the authentication system can authenticate users of multiple application programs or multiple features of application programs by associating a different resource managed by the operating system executing at a logon computer to each application program or application program feature. The specific features and acts described above are disclosed as example forms of implementing the claims. Accordingly the invention is not limited except as by the appended claims.

