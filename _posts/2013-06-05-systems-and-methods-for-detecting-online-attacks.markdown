---

title: Systems and methods for detecting online attacks
abstract: Detecting online attacks is described, including identifying one or more events associated with users on a social graph. For each type of event of the one or more events, generating at least one directed acyclic graph (DAG), where each node on the DAG represents a node on the social graph where an event of the type occurs and each edge on the DAG represents a propagation of the event from a first node of the edge to a second node of the edge.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183387&OS=09183387&RS=09183387
owner: GOOGLE INC.
number: 09183387
owner_city: Mountain View
owner_country: US
publication_date: 20130605
---
Online users often encounter unsolicited unwelcomed phishing spoofing and or deceiving messages collectively referred to as malicious messages or malicious information . To detect and mitigate malicious messages some data processing networks rely on the online users to report malicious messages. However not all malicious messages are reported and some reports are false positive e.g. reporting messages that are not malicious .

Some data processing networks employ automated e.g. not relying on user reporting techniques to detect and mitigate malicious messages. However on a social network perpetrators of malicious information may exploit the social connections of online users to avoid detection. For example these sophisticated malicious information perpetrators may create many fake accounts e.g. sybil accounts and establish social connections with the sybil accounts.

To further disguise the sybil accounts to avoid detection fake positive feedback may be associated with the sybil accounts e.g. initiating and or receiving likes 1 comments reposts re shares etc. to inflate the reputation and or standing of these accounts on a network. Sybil accounts with a high reputation are used to spread malicious messages undetected and carry out online attacks.

The subject matter described herein relates generally to data processing networks and more particularly to detecting online attacks.

The subject matter described herein may provide various advantages such as reducing unproductive use of resources in addressing false positive attacks taking advantage of social graphs or the like to better detect attacks and providing better user experience with a higher accuracy in detecting and mitigating attacks.

The subject matter includes a method for detecting online attacks including identifying one or more events associated with users on a social graph. For each type of event of the one or more events generating at least one directed acyclic graph DAG where each node on the DAG represents a node on the social graph where an event of the type occurs and each edge on the DAG represents a propagation of the event from a first node of the edge to a second node of the edge.

In some implementations the propagation of the event from the first node of the edge to the second node of the edge is based on the event occurs at a time T1 at the first node the event occurs at a time T2 at the second node and T1 is earlier than T2.

In some implementations the propagation of the event from the first node of the edge to the second node of the edge comprises propagation of a first event occurs at the first node to a second event occurs at the second node and content of the first event is related to content of the second event.

In some implementations the method may include determining a cluster of the at least one DAG and determining a score associated with the cluster.

In some implementations the score is based on a size of the cluster which is a sum of a number of nodes of the at least one DAG.

In addition to a method as described above the implementations may include a device a system and or a computer readable medium but are not limited thereto.

The subject matter described herein is taught by way of example implementations. Various details have been omitted for the sake of clarity and to avoid obscuring the subject matter. The examples shown below are directed to structures and functions for implementing and detecting online attacks.

One or more of the stages may be executed in parallel. For example the event detection stage may be detecting events parallel e.g. detecting multiple events associated with one or more users and or social graph at the same time . A latter stage e.g. stage or may be executed in parallel e.g. stage performs the propagation analysis in parallel stage performs the clustering analysis in parallel and or stage performs the post processing in parallel .

One or more of the stages may be executed concurrently. For example stage may provide sets of events to stage for propagation analysis. After stage provides the first sets of event to stage stages and may be executed concurrently e.g. while stage is detecting a second set of event stage is concurrently analyze the first sets of events .

At the event detection stage one or more signs of an attack e.g. events may be received identified reported or detected. For example one user may report abuse spam or malicious message an event . The event may show or be traced to another user attacker . A system may be running an attack detection process which may detect or identify one or more attacking events. The attack detection process may use any one or more techniques to detect identify or determine attacking events e.g. determining that an event which is in the form of an email is sent from an unknown source or an altered or fake address identity source etc. . Detection techniques include but are not limited to the following three examples.

 1 Production of reported or abusive material In this case an attack event may be the production or reproduction of content e.g. profile post photo or comment by a user that has been reported as abusive by at least another user or that has been classified as abusive e.g. by an automatic or semi automatic system .

 2 Propagation of a specific content In this context a message e.g. a post or comment produced by a user is considered as an event. The actual content of the message e.g. after a textual preprocessing defines the type of the event. Variations of this technique may include the consideration of only messages that match specific keywords or patterns with the content in an original post e.g. to detect that a message or post is not re shared but is reproduced verbatim .

 3 Decrease in the user reputation score In this case an event is detected when a user reputation score drops below a certain threshold. Variations of this technique may consider the maximum variation of the scores in one day and the direction of the variation increase or decrease .

In some implementations a score can be computed or determined based on one or more aspects of users nodes and or graphs. For example a number of attack events found on one graph or cluster of graphs may be compared to the number of attack events found on another graph or cluster of graphs. Other example aspects include user profiles usage history frequency of usage e.g. posting messaging etc. concentration of events of certain types etc.

After one or more events are detected at the event detection stage to determine or increase the confidence level that the events are attack events pipeline processes the events through the propagation analysis stage described with below clustering analysis stage described with and A D below and post processing stage described with below . Pipeline when it is deployed in a social network takes advantage of social connections or social graphs and the likes on the network.

On a social network malicious perpetrators may create fake accounts and plant them in social connections or circles e.g. join social circles or invite other users real or fake to join social circles . The fake accounts are used to perpetrate malicious attacks.

Pipeline is implemented to identify any social network attack which leaves a trail of attack signals propagating through a social graph. Attack examples include account hijacking spam clusters a.k.a. spam farm bulk creation of fake accounts production of content on behalf of users in violation of the system policies etc. A system that deploys pipeline process or the like may analyze user data in a social network to identify for example a suspicious pattern of user behavior and or other malicious behavior propagating over the social network from user to user.

For example after an event associated with a user is identified reported or detected at the event detection stage if the event propagates through a social graph which the user in on the event may spread to other users on the same social graph and or different social graphs. Pipeline in the propagation analysis stage and clustering analysis stage follows the spread or propagation of the attack event on the social graphs.

The propagation of the events that are the same similar or related to the a detected event on a social network provides reliable evidence or a higher level of confidence that the events are attack events. At the post processing stage the evidence is analyzed to provide a level of confidence that the events are attack events. Post processing stage may also reveal that the users on the social graphs are attackers or sybil users who might have created the accounts in the first place or hijacked them . Pipeline and it stages are described further below with .

An example of one or more devices may be computing device described below in . Devices may include but are not limited to a computer e.g. a laptop computing device a mobile device e.g. smartphone or tablet a television a device associated with a vehicle a server computer computing devices storage devices and .

In some implementations devices may be considered user devices e.g. devices that may be used by users to perpetrate attack events and or report attack events . Devices may be devices associated with service providers e.g. used by service providers to provide services e.g. including attack detection and mitigation and or store data .

For example a user e.g. Alice may access view and or share content of a webpage using user device or on a social network supported by one or more devices . Alice may receive a malicious message and report the message to the social network e.g. to an administrator or the social network or using a reporting page provide by the social network . The social network may be executing programming codes that implement pipeline on by one or more devices . The event detection stage of the pipeline receives Alice s report of the event and after one or more optional verification of the event works the event through the other stages of pipeline which is described above and further described below.

Any stage may be executed sequentially parallelly or a combination thereof. For example a system may contain many users on many social graphs with each user being associated with multiple events. Pipeline may start with users on a social graphs and or users regardless of their associated social graphs. Pipeline may start with detecting different events associated with one user the same and or similar events associated with different users or a combination thereof.

For illustration purposes are described with one set of same and or similar events on one social graph. are described with multiple sets of same and or similar events on one social graph.

In some implementations event detection may start with a user e.g. Daisy on a social graph e.g. graph and identify or detect one or more events associated with the user e.g. a message associated with Daisy is reported as spam or malicious . In other implementations event detection may start with a user e.g. Daisy or if executed in parallel two or more users including for example Daisy. Event detection propagation analysis or another module may then determine or identify the social graph that Daisy is on e.g. social graph .

If social graph needs to be established starting with user Daisy social graph may be built out e.g. conceptually or in a digital representation using Daisy s social connections to users Alice Bob Elen and Fay e.g. from her contact list and or social circles etc. . The build out step then repeats with the social connections of Alice Bob Elen and Fay and so on e.g. with the social connections to newly identified users e.g. Chris Gill Haley and Jason that have not been considered in the build out until all users have been considered e.g. after processing user Ian whose is connected to users all have been considered in the build out . When social graph is built out user Daisy is identified associated with node in this example.

In some implementations the event detection stage analyzes data stream e.g. user interactions and or communication messages etc. to identify suspicious events that may be evidence of an attack. Any attack events messages anomalies and or abuses may be detected using any detection technique. In some implementations machine learning may be employed in this stage to identify potential attack events.

Examples of possible attack events whose propagation can be tracked by the system includes but are not limited to the followings any specific user action sharing posting commenting feedback such as 1 or like etc. any changes in the user behavioral pattern the production of any content any changes in the reputation of the user according to some known metrics etc.

Identifying or detecting an event includes identifying at least the type of the event and at what time it has occurred e.g. the event associated with Daisy occurs at a time T . The type of the event may be used to distinguish among different possible events or types of events that may occur and may be used to track the propagation of events independently e.g. in parallel processes .

In an attack using fake users on a social network the attacking events are likely linked together following a social graph. Many of these events are likely traceable to a plausible propagation path on the social graph by analyzing their similarities and or temporal occurrences. If the events are not correlated to the social network structure such as random false positive events once the events are projected on the social network they are likely to appear as isolated events e.g. not possible to cluster them to identify propagation paths .

Propagation analysis and clustering analysis uses a social network structure or social graphs to confirm or increase confidence level of attacks on a social network or attacks using a social graph or the like.

In some implementations propagation analysis follows an algorithm that considers two events occurring in association with two users e.g. Bob at node and Daisy at node . The two events propagate e.g. from Bob to Daisy if the following conditions are all met 1 Bob at node has a social connection e.g. a link arc or edge with Daisy at node . 2 The two events occurred at both Bob and Daisy have the same type e.g. if the events are messages they are the same similar or related if the events are actions they are the same similar or related . 3 The event at Daisy occurs at a time Tthat is later than the event at Bob occurs at a time T i.e. Tis later than T .

An event can possibly have caused another same or similar event only if the latter event has occurred later and if the user e.g. Bob causing the latter event is known to the other user experiencing the event e.g. Daisy . The social graph that includes Bob and Daisy provides the evidence that Bob knows Daisy. The temporal factor provides evidence of a movement or propagation of the events and the direction of the movement. The movement and direction can be used to build a DAG to represent followership of attacks.

For a specific event type e.g. an email message a message posted on a social network etc. the social edges corresponding to a pairs of correlated events e.g. pairs of messages that are the same or similar can be arranged in a graph structure showing how an event of the event type has spread from one node to other nodes. The graph structure becomes a Directed Acyclic Graph DAG if formed with a temporal order.

Using social graph shown as light circled nodes connected with broken line edges with DAG A merely for facilitating discussion herein the nodes adjacent to node are identified e.g. Bob at node Elen at node and Fay at node . Applying the above described algorithm for propagation analysis reveals that for example events of the same type have occurred at node node and node at times T T and T respectively. With this information DAG A is expanded to include nodes and . The edge from node is shown pointing to node due to for example T

DAG A shows that for example events of the same type are propagating through some nodes. If an event is the posting reposting of a message or a post on a social network two posts are considered of same type if they have the same content or similar content. The propagation of the event is the posting and reposting of the message or similar message e.g. the message content or a link or hash code of the message for example from node to node then to nodes and . The timestamps e.g. T T T and Tin microseconds of the events may be the times of receiving the message by Bob Daisy Elen and Fay.

Propagation analysis may be executed in a parallel processing computing system network or environment that can identify large or very large e.g. millions hundreds of millions billions etc. pairs of plausibly correlated events of different types e.g. using different social graphs in different attacks at the same time.

In this example a same or similar event occurs at every node except node . Propagation analysis of node Using social graph shown as light circled nodes connected with broken line edges with DAG B the nodes adjacent to node are identified e.g. nodes and . Node has been analyzed previously and is not considered here. Applying the above described algorithm for propagation analysis reveals that events of the same type have occurred at nodes and at times T and T respectively. With this information DAG B is expanded to include nodes and though node is already included from a previous analysis . The edge between nodes and is shown pointing to node due to for example T

Propagation analysis of node The nodes adjacent to node are identified as nodes and . Node is eliminated because no same or similar event occurs there. Applying the above described algorithm for propagation analysis reveals that events of the same type have occurred at node at a time T. DAG B is expanded to include node . The edge between nodes and is shown pointing to node due to for example T

Propagation analysis of node The nodes adjacent to node are identified as nodes and with nodes and having previously considered. Applying the above described algorithm for propagation analysis reveals that events of the same type have occurred at nodes and at times T and T respectively. DAG B is expanded to include nodes and . The edge between nodes and is shown pointing to node due to for example T

Propagation analysis of node yields one new node node and one new edge pointing from node to node e.g. T

Propagation analysis of node yields no new node. In some implementations a directed edge from node to node e.g. T

Graph shows for example user a experiences an event X user b experiences three events X Y and Z and user c experiences no event etc. The edges of graph represent the propagations of events as described above e.g. based on timestamps and or other factor . For each type of events e.g. X Y or Z one or more DAGs or subgraphs in one or more clusters may be generated in any manner.

For example A cluster that includes subgraphs may be generated based on social graph for events X. A cluster that includes subgraph or DAG may be generated based on social graph for events Y. And a cluster that includes subgraph or DAG may be generated based on social graph for events Z. Subgraphs are shown over e.g. on top of graph for reference.

As an example of generating one or more clusters for a type of event X Y or Z a list of user event pairs may be identified and constructed. The list may be based on a social graph or other graph e.g. graph . For example the user event pairs for graph grouped by event types for easy readability are 

With each group of events of the same type e.g. same and or related events such as events X Y or Z one or more clusters per event X Y or Z may be constructed. For example based to part 1 above of the generated list users a b e f and i of graph all experience events X e.g. events of type X . The clustering stage determines that there are multiple distinct components in the graph with events X and creates for example a cluster of one or more subgraphs . Subgraph is a DAG with users a b and f. Since user e and i which also experience events X are not connected to any of users a b and f users e and i are in their own subgraphs or DAGs and respectively. Note that all nodes in subgraphs are nodes in a single graph . A single graph e.g. graph can include multiple completely disjoint subgraphs e.g. . A graph e.g. graph is represented as a collection of edges and this collection of edges does not have to be connected in a cluster unconnected edges in the cluster are shown as dotted edges .

Based to part 2 above of the generated list users b d f and g of graph all experience events Y and are represented in DAG . Based to part 3 above of the generated list users b d f and h j of graph all experience events Z and are represented in cluster . Each cluster which groups one or more subgraphs or DAGs per event X Y or Z is a distinct subset of the graph .

In some implementations one processing goal may be constructing a list event user a user b tuples that indicate user a and user b had the event and user a had it before user b and user a and user b are linked in the social network. Each tuple represents an edge in a DAG. For example a list of tuples representing subgraph or DAG may be 

In some implementations a tuple may include more than two users. For example tuples of Set 1 may be represented by event Z b d e j and tuples of Set 2 may be represented by event Z b f h i j 

Tuples representing events X for forming subgraphs and tuples representing events Y for forming subgraph or DAG may be generated similarly.

Subgraphs may be generated using pipeline or one or more other processes that detect the events X Y and Z. The pipeline then analyzes the propagations of the events such as generating tuples that represent events X propagate from users a to b then from b to f.

Then the processing in the clustering stage turns the lists of labeled edges or tuples into multiple DAGs per event that correspond to the connected components of graph . For example the clustering stage creates subgraph based on the tuples that represent events X propagate from users a to b then from b to f. A post processing stage may be executed to identify non attacking events attacking events and or potential attacking event. The algorithm for each stage and or goal which may create intermediary results can be executed in parallel on for example the entire graph on more than one graph on the users and or events.

In some analyses such as for identifying an attack or a social network abuse the clarity of an attack or abuse may be revealed by the size of a DAG or cluster e.g. cluster with 18 nodes shows a clearer sign of attack or abuse than the other cluster . The bigger the DAG or cluster the higher the probability that the related events associated with it are correlated to an attack e.g. on a social network . False positive events which are not related to the social structure do not cluster together. Analyses of false positive events which do not propagate or do not propagate to too many users produce small DAGs or fewer DAGs in clusters.

Sharing of an event e.g. posting a message is not suspicious. However the sharing or the event can be considered suspicious if the modality in which the event has been propagated is suspicious and or the group of users propagating the event is suspicious.

Generated DAGs may be processed in different methods to answer different questions or provide different answers to the same questions. For example DAGs may be processed to determine a fraction or ratio of public private posting or sharing. Are event sharing to public users e.g. broadcast to many users including those not in social circles or private users e.g. sharing only to a small number of users or to users in social circles . On a social network where a large set of users are provided the options to share posts in public and private it is expected that a fraction users use each option. If a large random group of users is selected it is statistically unlikely that all of them have adopted sharing in the same way e.g. public or private by chance.

Therefore if a large number of users on a social graph are sharing to the public it is a clearer sign that they are acting according to a deterministic control e.g. they are all under the control of the same attacker account hijacker or they are all bots or fake accounts etc. . In the case of a high or very high fraction of public shares it is clear that a spam networks and hijackers have all the interest to share the message to the widest possible audience.

In another post processing example a DAG may be evaluated based on other DAGs e.g. a large number of other DAGs which may be created using parallel or massively parallel processing methods . For example the average number of nodes of the large number of other DAGs is X and the number of nodes of the DAG under evaluation is greater or much greater than X the underlying events used to create the DAG under evaluation may be concluded as attack events likely attack events suspicious events e.g. to be reviewed by an administrator etc.

The results from post processing may be stored e.g. in storage for further processing and or reporting. The results may trigger actions that may be automatic e.g. not human intervention semi automatic or manual e.g. performed by an administrator . For example the size of a generated DAG is at least a threshold size e.g. five nodes the events occurred nodes may be remove or mitigated e.g. removing deleting five posts of the same content at those nodes . The top results that do not trigger automatic actions may be provided to social network administrators for further analysis and or actions.

At block a node corresponding to the node on the social graph may be added to a DAG. The added node on the DAG may be referred to as a current node or by another label. A time e.g. time of occurrence associated with the detected event block may be determined at any point during process before the time is needed used in the process. At block one or more nodes adjacent to the node on the social graph are determined.

At block for each of the adjacent node that has associated with it an occurrence of an event the same as or related similar to the event detected at block add a node referred to as a new node to the DAG corresponding to the adjacent node on the social graph and add a directed edge between the newly added node and the current node. The direction of the directed edge is pointed to the node associated with a later timestamp. In some implementations the direction of the edge may be reverse e.g. point to the node associated with an earlier timestamp . At block for each of the adjacent node that does not have associated with it an occurrence of an event the same as or related similar to the event detected at block the adjacent node is dropped from processing e.g. not considered .

If process reaches a stopping condition as described above the process stop and the DAG is stored at block . If a stopping condition has not been reached the process continues to block which iterates each adjacent node processed above at block through the operations of blocks and .

Process may be implemented in a parallel or massively parallel computing environment where one or more blocks shown may be executed in parallel in different processes or systems e.g. executed concurrently or simultaneously . In some examples process may be implemented with different fewer or more blocks. Process may be implemented as computer executable instructions which can be stored on a medium loaded onto one or more processors of one or more computing devices and executed as a computer implemented method.

Computing device can be communicatively coupled to input user interface and output device interface . Either one or both of input user interface and output device interface can be a wired or wireless interface and can be detachable. Input user interface may include any device component sensor or interface physical or virtual that can be used to provide input e.g. buttons touch screen interface keyboard a pointing cursor control microphone camera braille motion sensor optical reader and or the like . Output device interface may include a display television monitor printer speaker braille or the like. In some example implementations input user interface and output device interface can be embedded with or physically coupled to the computing device . In other example implementations other computing devices may function as or provide the functions of input user interface and output device interface for a computing device .

Examples of computing device may include but are not limited to highly mobile devices e.g. smartphones devices in vehicles and other machines devices carried by humans and animals and the like mobile devices e.g. tablets notebooks laptops personal computers portable televisions radios and the like and devices not designed for mobility e.g. desktop computers other computers information kiosks televisions with one or more processors embedded therein and or coupled thereto radios and the like .

Computing device can be communicatively coupled e.g. via I O interface to external storage and network for communicating with any number of networked components devices and systems including one or more computing devices of the same or different configuration. Computing device or any connected computing device can be functioning as providing services of or referred to as a server client thin server general machine special purpose machine or another label.

I O interface can include but is not limited to wired and or wireless interfaces using any communication or I O protocols or standards e.g. Ethernet 802.11x Universal System Bus WiMax modem a cellular network protocol and the like for communicating information to and or from at least all of the connected components devices and network in computing environment . Network can be any network or combination of networks e.g. the Internet local area network wide area network a telephonic network a cellular network satellite network and the like .

Computing device can use and or communicate using computer usable or computer readable media including transitory media and non transitory media. Transitory media include transmission media e.g. metal cables fiber optics signals carrier waves and the like. Non transitory media include magnetic media e.g. disks and tapes optical media e.g. CD ROM digital video disks Blu ray disks solid state media e.g. RAM ROM flash memory solid state storage and other non volatile storage or memory.

Computing device can be used to implement techniques methods applications processes or computer executable instructions in some example computing environments. Computer executable instructions can be retrieved from transitory media and stored on and retrieved from non transitory media. The executable instructions can originate from one or more of any programming scripting and machine languages e.g. C C C Java Visual Basic Python Perl JavaScript and others .

Processor s can execute under any operating system OS not shown in a native or virtual environment. One or more applications can be deployed that include logic unit application programming interface API unit input unit output unit event detection and propagation analysis clustering analysis post processing and inter unit communication mechanism for the different units to communicate with each other with the OS and with other applications not shown . For example event detection and propagation analysis clustering analysis and post processing may implement one or more processes shown or described in . The described units and elements can be varied in design function configuration or implementation and are not limited to the descriptions provided.

In some example implementations when information or an execution instruction is received by API unit it may be communicated to one or more other units e.g. logic unit input unit output unit event detection and propagation analysis clustering analysis and post processing . For example event detection and propagation analysis may identify or detect an event e.g. receive a report of an event through input unit and perform propagation analysis on it as described above. Depending on implementations the propagation analysis may be enough to provide a level of confidence that the event is an attack event. In implementations that call for more analysis the results from event detection and propagation analysis are passed to clustering analysis to further analyze the detected event as described above. After clustering analysis reaches a stopping condition which may be based on a threshold the end social graph e.g. no more new node and or another condition the results are processed by post processing to rank and or identify the attack events or likely attack events. Actions may be taken automatically on the identified attacking events e.g. removing the events . For the likely attack events they may be routed via the API unit and or output unit for additional analysis e.g. analysis by an administrator .

In some instances logic unit may be configured to control the information flow among the units and direct the services provided by API unit input unit output unit event detection and propagation analysis clustering analysis and post processing in some example implementations described above. For example the flow of one or more processes or implementations may be controlled by logic unit alone or in conjunction with API unit .

In situations in which the systems discussed here collect personal information about users or may make use of personal information the users may be provided with an opportunity to control whether programs or features collect user information e.g. information about a user s social network social actions or activities profession a user s preferences or a user s current location or to control whether and or how to receive content from the content server that may be more relevant to the user. In addition certain data may be treated in one or more ways before it is stored or used so that personally identifiable information is removed. For example a user s identity may be treated so that no personally identifiable information can be determined for the user or a user s geographic location may be generalized where location information is obtained such as to a city ZIP code or state level so that a particular location of a user cannot be determined. Thus the user may have control over how information is collected about the user and used by a content server.

Although a few example implementations have been shown and described these example implementations are provided to convey the subject matter described herein to people who are familiar with this field. It should be understood that the subject matter described herein may be implemented in various forms without being limited to the described example implementations. The subject matter described herein can be practiced without those specifically defined or described matters or with other or different elements or matters not described. It will be appreciated by those familiar with this field that changes may be made in these example implementations without departing from the subject matter described herein as defined in the appended claims and their equivalents.

