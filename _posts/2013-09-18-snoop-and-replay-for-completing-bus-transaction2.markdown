---

title: Snoop and replay for completing bus transaction
abstract: Systems and devices configured to implement techniques for ensuring the completion of transactions while minimizing latency and power consumption are described. A device may be operably coupled to a bidirectional communications bus. A bidirectional communications bus may include a clock line and a data line. The device may be configured to determine if an initiated transaction corresponds to a device in a low power state. The device may pause the transaction. The device may replay portions of the transaction when the device is in an appropriate power state. The device may replay portions of the transaction using an override interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612994&OS=09612994&RS=09612994
owner: NVIDIA Corporation
number: 09612994
owner_city: Santa Clara
owner_country: US
publication_date: 20130918
---
This disclosure relates to systems and methods for bus communications and more particularly to techniques for completing bus transactions.

Devices including laptop or desktop computers tablet computers televisions digital video recorders set top boxes digital media players video gaming devices video game consoles and cellular telephones may include one or more graphics processing units GPUs . A GPU may include multiple cores. GPUs may utilize one or more wired communication protocols for communications. To conserve power a GPU may cause one or more of the cores to enter a low power state.

The IC bus Inter IC specification defines a two wire bidirectional bus for efficient inter IC integrated circuit control. The System Management Bus SMBus specification is based on IC and defines another protocol for the two wire bidirectional bus interface. For both the IC bus and SMBus a serial data line and a serial clock line are used to transfer data from one device connected to the bus to another device connected to the bus. In both IC bus and SMBus a device that initiates a data transfer is referred to as a master device and a device that is addressed by a master is referred to as a slave device. A data transfer may be dropped if a slave device is in a low power state when a master initiates a data transfer.

In general this disclosure describes techniques for completing bus transactions. In particular this disclosure describes techniques for ensuring the completion of transactions while minimizing latency and power consumption. In some examples the techniques described herein may be implemented by a graphics processing unit GPU . A GPU may be included in a graphics processing device such as for example a personal computing device.

According to one example of the disclosure a method for completing a bus transaction comprises receiving an address corresponding to one of a plurality of devices connected to a communications bus determining whether the address corresponds to a device that is in a power state that does not enable completion of a transaction and upon determining the address corresponds to a device that is in a power state that does not enable completion of a transaction pausing a transaction associated with the received address causing the device to enter a power state that enables completion of the transaction transmitting the address to the device and releasing the transaction.

According to another example of the disclosure an apparatus for completing a bus transaction comprises means for receiving an address corresponding to one of a plurality of devices connected to a communications bus means for determining whether the address corresponds to a device that is in a power state that does not enable completion of a transaction and means for upon determining the address corresponds to a device that is in a power state that does not enable completion of a transaction pausing a transaction associated with the received address causing the device to enter a power state that enables completion of the transaction transmitting the address to the device and releasing the transaction.

According to another example of the disclosure a device for completing a bus transaction comprises one or more processors configured to receive an address corresponding to one of a plurality of devices connected to a communications bus determine whether the address corresponds to a device that is in a power state that does not enable completion of a transaction and upon determining the address corresponds to a device that is in a power state that does not enable completion of a transaction pause a transaction associated with the received address cause the device to enter a power state that enables completion of the transaction transmit the address to the device and release the transaction.

According to another example of the disclosure a non transitory computer readable storage medium has instructions stored thereon that upon execution cause one or more processors of a device to receive an address corresponding to one of a plurality of devices connected to a communications bus determine whether the address corresponds to a device that is in a power state that does not enable completion of a transaction and upon determining the address corresponds to a device that is in a power state that does not enable completion of a transaction pause a transaction associated with the received address cause the device to enter a power state that enables completion of the transaction transmit the address to the device and release the transaction.

According to another example of the disclosure a bidirectional communication system comprises a first device operably coupled to a communications bus and configured to operate as a slave device and a second device operably coupled to the communications bus configured to receive an address corresponding to the first device determine that the first device is in a power state that does not enable completion of a transaction pause a transaction associated with the received address transmit the received address to the first device and release the transaction.

According to another example of the disclosure a device operably coupled to a bidirectional communications bus including a clock line and a data line comprises one or more processors configured to determine a power state of a device operable coupled to the bidirectional communications bus and determine whether to replay one or more portions of a bus transaction based on the determined power state and an override interface configured to provide clock and data communications to the one or more processors independent of the clock line and data line.

According to another example of the disclosure a method for managing a power down request comprises receiving a power down request allowing a power down process to be initiated for a device monitoring transactions on a communications bus and aborting a power down process if there is a pending transaction for the device.

According to another example of the disclosure an apparatus for managing a power down request comprises means for receiving a power down request for a device means for allowing a power down process to be initiated for the device means for monitoring transactions on a communications bus and means for aborting a power down process if there is a pending transaction for the device.

According to another example of the disclosure a device for managing a power down request comprises one or more processors configured to receive a power down request allow a power down process to be initiated for a device monitor transactions on a communications bus and abort a power down process if there is a pending transaction for the device.

According to another example of the disclosure a non transitory computer readable storage medium has instructions stored thereon that upon execution cause one or more processors of a device to receive a power down request allow a power down process to be initiated for a device monitor transactions on a communications bus and abort a power down process if there is a pending transaction for the device.

The details of one or more examples are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

This disclosure describes techniques for ensuring a slave device completes a transaction regardless of the power state of the slave device at the time the transaction is initiated by a master device. A device configured to communicate according to a bus communications protocol such as for example SMBus and or IC bus may be configured to have multiple power states. For example a device may have various sleep modes. That is individual components of a device may be independently powered on and off. For example an entire device and or device components responsive to a clock and or a data signal may be powered on off. A slave device being in a particular power mode at the time a transaction is initiated by a master device may cause a transaction to be dropped.

In some cases a slave device may implement a wake up e.g. power up components and or power up device in response to bus activity. Bus activity that may initiate a wake up may include for example a clock toggle or a START condition defined by SMBus and or IC bus. However even if a slave device is powered up in response to activity a transaction may still be dropped if a master device does not receive an acknowledge in a timely manner and or the master device does not support retry of the dropped transaction. In some cases typical wake up and retry techniques may increase the latency for accessing the slave device. Further typical wake up and retry techniques may cause false wakeups if the transaction is not targeted to the slave device. This results in wasted power. Dropped transactions may also occur if a power management system places a device in a low power state when a device is completing a transaction. In some cases a power management system may determine power states of bus devices based on system resources and may not be aware of communications occurring on the bidirectional bus. This disclosure provides techniques for ensuring the completion of transactions while minimizing latency and power consumption.

Each of bus devices A N may be described as a master device or a slave device during a transaction depending on how a transaction is initiated. For example if bus device A initiates sending data to or receiving data from device N bus device A would be referred to as a master device and bus device N would be referred to as a slave device for both of these transactions. Bus devices A N may include devices having integrated or discrete logical circuitry including for example digital signal processors DSPs general purpose microprocessors application specific integrated circuits ASICs field programmable logic arrays FPGAs flash memory devices graphics processing units GPUs and GPU cores. In one example bus devices A N may include GPUs described below with respect to .

Transaction is initiated when a master device presents a START condition S on the bus. In one example a START condition may be a high to low data transition while the clock is high. Subsequent to presenting a START condition a master device presents a byte including a seven bit slave address and a direction bit on the bus. In the example illustrated in direction bit indicates the type of transaction is a write transaction Wr . In other examples direction bit may indicate the type of transaction is a read transaction. In one example a direction bit logical value of zero may indicate a request to transmit WRITE data to a slave device and a direction bit logical value of one may indicate a request to receive READ data from a slave device. In the example illustrated in a slave device acknowledges the request of the master device by presenting an acknowledgement A . After receiving an acknowledgment the master device presents data . In some examples data may be organized into bytes. In the example of a read transaction the slave device would present the data. In the example illustrated in the slave device acknowledges receiving the data by presenting acknowledgement A . Transaction is terminated by a STOP condition P generated by the master device. In one example a STOP condition may be a low to high data transition while the clock is high. It should be noted that in some cases if a master device still wishes to communicate on the bus the master device can generate a repeated START condition Sr and address another slave device without first generating a STOP condition. Thus various combinations of read write formats are possible.

It should be noted that the completion of transaction is subject to clock synchronization of a master device and a slave device. A master device and a slave device are synchronized based a clock signal presented on clock line. Clock synchronization allows devices of different speeds to co exist on a bus. Each of IC bus and SMBus allow slave devices to cope with faster master devices by clock stretching. That is for example a slave device may delay acknowledgement and subsequent data transmissions by holding the clock line to a low value after a data byte is presented. Clock stretching may be used to provide a slave device more time to process received data or to prepare for data transmission.

Computing device includes central processor unit s BIOS system memory system interface storage device s I O devices network interface graphics subsystem and display . As illustrated in system memory includes applications A N and operating system . Further as illustrated in graphics subsystem includes GPU s A N and GPU memory A N. It should be noted that although example computing device is illustrated as having distinct functional blocks such an illustration is for descriptive purposes and does not limit computing device to a particular hardware or software architecture. Functions of computing device may be realized using any combination of hardware firmware and or software implementations.

CPU s may be configured to implement functionality and or process instructions for execution in computing device . CPU s may be capable of retrieving and processing instructions code and or data structures for implementing one or more of the techniques described herein. Instructions may be stored on a computer readable medium such as system memory or storage devices . CPU s may include digital signal processors DSPs general purpose microprocessors application specific integrated circuits ASICs field programmable logic arrays FPGAs or other equivalent integrated or discrete logic circuitry. CPU s may include multi core central processing units. CPU s may be configured such that dedicated graphic processing units such as those included in graphics subsystem are used for graphics processing.

BIOS Basic Input Output System may include a storage medium having low level system software stored thereon. For example BIOS may include a program stored in read only memory ROM or flash memory that is run whenever computing device boots up and enables basic input and output functionality. Further BIOS may be configured to initialize and boot an operating system such as for example operating system .

System memory may be configured to store information that may be used by computing device during operation. System memory may be used to store program instructions for execution by CPU s and may be used by software or applications running on computing device to temporarily store information during program execution. For example system memory may store instructions associated with operating system and applications A N. Applications A N may be any applications implemented within or executed by computing device and may be implemented or contained within operable by executed by and or be operatively communicatively coupled to components of computing device . Applications A N may include instructions that may cause CPU s of computing device to perform particular functions. Applications A N may include algorithms which are expressed in computer programming statements such as for loops while loops if statements do loops etc.

As further illustrated in applications A N may execute on top of operating system . That is operating system may be configured to facilitate the interaction of applications A N with CPUs s and other hardware components of computing device such as for example graphics subsystem . Operating system may be an operating system designed to be installed on laptops desktops smartphones tablets set top boxes and or gaming devices. For example operating system may be a Windows Linux or Mac OS Android iOS Windows Mobile or a Windows Phone operating system.

System memory may be described as a non transitory or tangible computer readable storage medium. In some examples system memory may provide temporary memory and or long term storage. In some examples system memory or portions thereof may be described as non volatile memory and in other examples portions of system memory may be described as volatile memory. Examples of volatile memories include random access memories RAM dynamic random access memories DRAM and static random access memories SRAM . Examples of non volatile memories include magnetic hard discs optical discs floppy discs flash memories or forms of electrically programmable memories EPROM or electrically erasable and programmable EEPROM memories.

System interface may be configured to enable communication between components of computing device . In one example system interface comprises structures that enable data to be transferred from one peer device to another peer device or to a storage medium. For example system interface may include a chipset supporting Accelerated Graphics Port AGP based protocols Peripheral Component Interconnect PCI bus based protocols such as for example the PCI Express PCIe bus specification which is maintained by the Peripheral Component Interconnect Special Interest Group or any other form of structure that may be used to interconnect peer devices.

Storage device s represents memory of computing device that may be configured to store relatively larger amounts of information for relatively longer periods of time than system memory . Similar to system memory storage device s may also include one or more non transitory or tangible computer readable storage media. Storage device s may be internal or external memory devices and in some examples may include non volatile storage elements. Examples of memory devices include file servers an FTP servers network attached storage NAS devices a local disk drive or any other type of device or storage medium capable of storing data. Storage medium may include Blu ray discs DVDs CD ROMs flash memory or any other suitable digital storage media. When the techniques described herein are implemented partially in software a device may store instructions for the software in a suitable non transitory computer readable medium and execute the instructions in hardware using one or more processors.

I O device s may be configured to receive input and provide output during operation of computing device . Input may be generated from an input device such as for example touch sensitive screen track pad track point mouse a keyboard a microphone video camera or any other type of device configured to receive input. Output may be provided to output devices such as for example speakers or a display device. In some examples I O device s may be used for basic input and output functions associated with BIOS . In some examples I O device s may be external to computing device and may be operatively coupled to computing device using a standardized communication protocol such as for example Universal Serial Bus protocol USB .

Network interface may be configured to enable computing device to communicate with external computing devices via one or more networks. Network interface may be a network interface card such as an Ethernet card an optical transceiver a radio frequency transceiver or any other type of device that can send and receive information. Network interface may be configured to operate according to one or more of the communication protocols associated with a packet based network such as a local area network a wide area network or a global network such as the Internet. Examples of communication protocols include Global System Mobile Communications GSM standards code division multiple access CDMA standards 3rd Generation Partnership Project 3GPP standards Internet Protocol IP standards Wireless Application Protocol WAP standards and or an IEEE standards such as one or more of the 802.11 standards as well as various combinations thereof.

Display may be configured to provide visual output generated during the operation of computing device . For example display may include a cathode ray tube CRT monitor a liquid crystal display LCD or any other type of device that can provide output. In some examples display may be an integrated display. In the example where computing device is a mobile device display may be an integrated touch screen display. For example display may be an organic light emitting diode OLED display configured to receive user touch inputs such as for example taps drags and pinches. In other examples display may be an external display device coupled to computing device using a standardized communication protocol such as for example High Definition Multimedia Interface HDMI Digital Visual Interface DVI DisplayPort and Video Graphic Array VGA .

Graphics subsystem may be configured to receive commands and data and output pixel data. Graphics subsystem may be configured to output pixel data to display according a standardized communication protocol e.g. HDMI DVI DisplayPort and or VGA . As illustrated in graphics subsystem may include a plurality of graphics processing units A N. GPUs A N may include multiple processing cores. GPUs A N may perform graphics processing associated with the execution of applications A N. GPUs A N may be configured to operate according to an application programming interface such as for example OpenGL and or Direct3D. GPUs A N may operate according to a graphics pipeline process e.g. input assembler vertex shader geometry shader rasterizer pixel shader and output merger . Each of GPUs A N may have primary display and 3D rendering capabilities. GPU memories A N may include storage mediums configured to store data generated during a graphics pipeline process. For example GPU memories A N may include frame buffers. Further GPU memories A N may store instructions that are executed by GPUs A N.

As described above processing cores of GPUs may be configured to communicate according to a bidirectional bus protocol such as for example SMBus and or IC bus. GPUs A N and or components thereof including processing cores may be configured to operate according to a bidirectional communications bus. Further GPUs A N and or components thereof may be configured to complete bus transactions according to the techniques described herein. is a block diagram illustrating an example of a bidirectional bus system in accordance with one or more techniques of this disclosure.

As illustrated in system includes snoop and replay device a plurality of bus devices A N and A N operably coupled to clock line CLK and data line DATA . The transfer of data using clock line CLK and data line DATA in system may be similar to the transfer of data described above with respect to system . For the sake of brevity details of data transfer using CLK and DATA as provided above with respect to system are not repeated. Bus devices A N and A N may include GPUs and or components thereof. As illustrated in in addition to being operatively coupled to CLK and DATA each of snoop and replay device and bus devices A N are operably coupled to override line OVERRIDE . Thus each of snoop and replay device and bus devices A N may be configured to communicate using CLK DATA and OVERRIDE. It should be noted that although it is not explicitly illustrated in each of snoop and replay device and bus devices A N may have outgoing CLK signals which are effectively logically AND ed. As described in detail below snoop and replay device may pause a transaction using an outgoing CLK signal.

As illustrated in bus device receives a CLK signal a DATA signal and an OVERRIDE signal where CLK and DATA signals are defined according to a bidirectional communication bus protocol. OVERRIDE signal includes an enable signal ENABLE an override clock signal O CLK and an override data signal O DATA . As described in detail below OVERRIDE signal may be controlled by snoop and replay device and may be used to repeat portions of a bus transaction. Snoop and replay device may use OVERRIDE to independently repeat any portion of a bus transaction. For example snoop and replay device may use OVERRIDE to independently repeat a START condition a slave address a direction bit and or a STOP condition. Snoop and replay device may use pause and replay transactions based on the power state of a slave device.

After a respective synchronizer removes metastability from a received signal the signal is received at one of multiplexer or multiplexer . As illustrated in a synchronized ENABLE signal is daisy chained from multiplexer to multiplexer and controls the output of multiplexer and multiplexer provided to bus core logic . Bus core logic may be configured to receive and process bidirectional bus communication transactions according to a bus protocol. For example bus core logic may be configured to process transaction according to IC bus and or SMBus.

As illustrated in multiplexer receives synchronized CLK and O CLK signals as inputs and outputs one of CLK or O CLK based on the value of ENABLE. In a similar manner multiplexer receives synchronized DATA and O DATA as inputs and outputs one of DATA or O DATA based on the value of ENABLE. Thus values of each of CLK and DATA may be overridden by O CLK and O DATA based on the value of ENABLE.

Snoop and replay device may be configured to monitor all transactions occurring on a communications bus. In one example snoop and replay device is an always on power island. In one example comparative logic may be implemented using minimal logic e.g. AND OR circuits thereby minimizing power requirements and space required to implement snoop and replay device . However it should be noted that functions of snoop and replay device may be realized using any combination of hardware firmware and or software implementations.

In the example illustrated in comparative logic stores a default device address device addresses device power states and device activity states. A stored default device address may be defined according to a bus standard and may be used by a master device to issue a general command to devices connected to a bus. For example SMBus allows for the use of a default address for Address Resolution Protocol ARP commands. Stored device addresses may be the respective address of one or more devices e.g. devices A N operably coupled to a clock line and a data line of a bus. Stored device power states may be power states e.g. ON OFF corresponding to one or more of a plurality of devices connected to a bus. In one example device power states may be stored using a state machine corresponding to each of the devices. Stored device activity states may indicate whether a device is currently executing a transaction. A device activity state may be stored using a state machine that stores the last device address received on a bus. For example comparative logic may receive a device address as described above with respect to and determine that a device corresponding to the device address is executing a transaction if a STOP condition has yet to occur.

In one example snoop and replay device may include a snoop state machine and a replay state machine. A snoop state machine may be configured to output status states to a replay state machine. is a flowchart illustrating an example operation of a snoop state machine according to techniques of this disclosure. In the example illustrated in snoop state machine includes three status states IDLE NOT IDLE and BUSY. An IDLE state may correspond to a state where no transactions for any devices on the bus are pending. For example an IDLE state may indicate that a STOP condition has been received and no START conditions have been received. A NOT IDLE state may correspond to a state where a transaction for a device other than a particular device is pending on the bus. For example a START condition may have been received but an address may not match the address of a particular device. A BUSY state may correspond to a state where a transaction for a particular device is pending on the bus. For example a START condition may have been received and an address may match the address of a particular device. Snoop state machine may remain in a NOT IDLE or BUSY state until a STOP condition or a repeated START condition occurs.

As described above a power management system such as for example power management software may determine power states of a bus device based on system resources and may not be aware of communications occurring on the bidirectional bus. For example if a bus device is one of a plurality of graphics processing cores in a GPU a power management system may determine a power state for the bus device based on the amount of graphics processing resources that are expected to be utilized during a time period. Referring again to snoop and replay device is configured to receive a sleep request and output a sleep request response. That is snoop and replay device may be configured to keep track of whether slave device is actively handling a bus transaction when a power management system wishes to power down the slave device or is in the process of powering down the slave device.

Snoop and replay device may handle power up and power down processed based on one of IDLE NOT IDLE and BUSY described above with respect to . For example snoop and replay device may be configured to allow a sleep request to proceed for a bus device if a current bus transaction is not targeted to the bus device but may cause a sleep request to be aborted if the bus device is currently in the middle of a transaction. As described above snoop and replay device may use OVERRIDE to independently replay a STOP condition. The replay of the STOP condition may ensure that a slave device never sees two bus transactions merged into one transaction regardless of when the slave device sleeps and wakes with respect to any transaction in progress. In one example snoop and replay device may determine whether to replay a STOP condition based on a status state when a device entered a low power state.

As illustrated in a replay state machine may monitor sleep requests associated with one of devices A N. Upon receiving a sleep request replay state machine may query the status state provided by sleep state machine. As illustrated in replay state machine may cause the power down process to be aborted if the status is BUSY i.e. the device to be powered down is currently involved in a pending transaction. In the event of NOT IDLE or an IDLE state replay state machine may allow the power down process to continue and set the value of ENABLE such that CLK and DATA are overridden by O CLK and O DATA. Based on whether a state is a NOT IDLE or an IDLE state replay state machine may determine whether a STOP condition should be replayed when the device associated with the sleep request is powered up. That is snoop and replay device may replay a STOP condition to ensure that a device which entered a sleep mode during a transaction does not wake up expecting information related to the transaction as the transaction is likely to have been completed while the device was in a sleep mode.

As illustrated in the power up process of a device may be based on whether the status is BUSY or not BUSY. For example as illustrated in if a device begins to power up during a not BUSY state i.e. branch ending in B a transaction will not be paused. If the power up process occurs in response to a BUSY status i.e. branch ending in A the transaction will be paused until the device wakes up. When the device completes wake up a START condition and a device address will be replayed. After the START condition and device address are replayed a transaction may be released. Pausing and releasing a transaction are described in greater detail below with respect to . In either of branch A or branch B a STOP condition may be replayed depending on the status state when the device entered a low power mode.

Each of provide example operations of snoop and replay device and based on the example operations illustrated in snoop and replay device may be configured to perform several methods for powering up and powering down one of devices A N based on several bus communications scenarios. illustrate particular example methods that may be implemented according to the techniques of this disclosure. It should be noted that for the sake of brevity all possible methods based on the example operations of snoop state machine and replay state machine described with respect to are not described in detail but that snoop and replay device may be configured to perform any method based on the operations illustrated in .

In one example the address may correspond to bus device and bus device may be in a sleep state. Upon determining that the address corresponds to a device that is in a power state that does not enable completion of a transaction snoop and replay device pauses the transaction associated with the received address . In one example snoop and replay device may pause the transaction using clock stretching described above. That is snoop and replay device may pull and hold CLK to a low value. While the transaction is paused snoop and replay device may cause bus device to enter a power state that enables completion of the transaction . In one example snoop and replay device may be configured to wake up bus device . In another example bus device may be configured to wake up through internal or external logic e.g. power management software . In this case snoop and replay device may be configured to communicate with the internal or external logic to initiate a wake up process. It should be noted that in one example snoop and replay device will not cause other devices on the bus in a sleep state to wake up if the transaction does not identify them i.e. snoop and replay device avoids false wakeups . Further it should be noted that from the perspective of a master device bus communications originating from snoop and replay device appear to be from a slave device in a normal operating state. That is a master device may be designed according to a bus communications protocol and may not require any specific modifications to support the operation of snoop and replay device .

Once bus device enters a power state that enables completion of the transaction snoop and replay device may determine whether a STOP condition should be replayed . As described above a STOP condition may be replayed if a device entered a sleep state during a transaction. If it is determined that a STOP condition needs to be replayed snoop and replay device may replay a STOP condition . Snoop and replay device may then replay a START condition and the device address . As described above START condition device address and STOP condition may be replayed by setting ENABLE such that bus device sees O DATA instead of DATA and O CLK instead of CLK. After bus device receives the address snoop and replay device may release the device e.g. disable OVERRIDE and the transaction . For example snoop and replay device may release CLK and DATA and bus device may send an acknowledgement to the master device initiating the transaction. As described above with respect to a master device may send data to or receive data from a bus device after receiving an acknowledgement. Thus snoop and replay device and bus device may be configured such that a master device operating according to IC bus and or SMBUS can complete a transaction even if a transaction is initiated at a time when a slave device such as bus device is in a power state that does not allow for the completion of a transaction. In this manner a bus device may frequently enter low power states thereby conserving power usage without dropping bus transactions intended for bus device .

A power down process may include actions associated with placing a device in a power state where it can complete bus transactions in a power state where the device is unable to complete bus transactions. In some examples the time it takes to complete a power down process may generally be longer than the time it takes for multiple bus transactions to be initiated. Snoop and replay device monitors transactions on a communications bus. Snoop and replay device may monitor transactions on a communications bus by monitoring addresses received subsequent to START conditions as described above. Snoop and replay device determines if any transactions correspond to a bus device identified in the sleep request . Snoop and replay device may determine if there are pending transaction by comparing received addresses to stored addresses as described above. Upon determining that there are no pending transactions for a slave device snoop and replay device allows the sleep process to continue and continues to monitor transactions. Upon determining that there are pending transactions for a slave device snoop and replay device causes a sleep process to be aborted . For example snoop and replay device may provide a sleep request response to a power management system that indicates that transactions are pending for a device. Further snoop and replay device may pause a transaction as described above with respect to in .

Once a power down process is aborted and a transaction is paused power management system may return a bus device to a power state that allows transactions to be completed and may perform the transaction replay process described above with respect to and described above with respect to . For the sake of brevity details of and described above with respect to are not repeated. In this manner snoop and replay device represents an example of a device configured to ensure the completion of transactions while minimizing latency and power consumption.

In one or more examples the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored on or transmitted over as one or more instructions or code a computer readable medium and executed by a hardware based processing unit. Computer readable media may include computer readable storage media which corresponds to a tangible medium such as data storage media or communication media including any medium that facilitates transfer of a computer program from one place to another e.g. according to a communication protocol. In this manner computer readable media generally may correspond to 1 tangible computer readable storage media which is non transitory or 2 a communication medium such as a signal or carrier wave. Data storage media may be any available media that can be accessed by one or more computers or one or more processors to retrieve instructions code and or data structures for implementation of the techniques described in this disclosure. A computer program product may include a computer readable medium.

By way of example and not limitation such computer readable storage media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices flash memory or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also any connection is properly termed a computer readable medium. For example if instructions are transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. It should be understood however that computer readable storage media and data storage media do not include connections carrier waves signals or other transient media but are instead directed to non transient tangible storage media. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and Blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

Instructions may be executed by one or more processors such as one or more digital signal processors DSPs general purpose microprocessors application specific integrated circuits ASICs field programmable logic arrays FPGAs or other equivalent integrated or discrete logic circuitry. Accordingly the term processor as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition in some aspects the functionality described herein may be provided within dedicated hardware and or software modules. Also the techniques could be fully implemented in one or more circuits or logic elements.

The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses including a wireless handset an integrated circuit IC or a set of ICs e.g. a chip set . Various components modules or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques but do not necessarily require realization by different hardware units. Rather as described above various units may be combined in a codec hardware unit or provided by a collection of interoperative hardware units including one or more processors as described above in conjunction with suitable software and or firmware.

Various examples have been described. These and other examples are within the scope of the following claims.

