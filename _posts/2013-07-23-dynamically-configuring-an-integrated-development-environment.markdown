---

title: Dynamically configuring an integrated development environment
abstract: In a method for configuring an integrated development environment for programming a type of computer application, a computer receives a selection of a target application runtime program supporting one or more types of computer applications. The computer sends a request for information and receives information on the one or more types of computer applications supported by the target application runtime program. The computer determines, based on the received information, the one or more types of computer applications supported by the target application runtime program. The computer requests and receives a selection of the type of computer application. The computer configures an integrated development environment for programming the type of computer application selected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135001&OS=09135001&RS=09135001
owner: International Business Machines Corporation
number: 09135001
owner_city: Armonk
owner_country: US
publication_date: 20130723
---
This application is a continuation of U.S. patent application Ser. No. 13 535 829 filed Jun. 28 2012 the entire content and disclosure of which is incorporated herein by reference.

The present invention relates generally to integrated development environments and more specifically to a method system and computer program product for configuring an integrated development environment for programming a specific type of software application.

An integrated development environment IDE gives a computer application developer an environment wherein the appropriate tools needed for source code editing compiling linking testing debugging and profiling are seamlessly integrated. The advantage of using an integrated development environment is that the computer application developer need not be concerned about the tool interfaces when moving from one phase of code development to the other.

Some IDE s such as Eclipse available under the Common Public License from the Eclipse Foundation Inc. have built in functionality but most of that functionality is very generic. Additional tools are necessary to extend the platform to work with new computer application types to do new things with existing computer application types and to focus the generic functionality on something specific. Eclipse is built on a mechanism for integrating and running modules called plug ins.

An application runtime program also called runtime program or just runtime is a software component designed to support the execution of computer programs written in some computer language. The runtime program contains implementations of basic low level commands and may also implement higher level commands and may support type checking debugging and even code generation and optimization.

A runtime program relieves programmers from the burden of writing code for mundane tasks such as drawing text on the screen or making an Internet connection. It also provides an abstraction layer that hides the complexity or variations in the services offered by the operating system.

Aspects of an embodiment of the present invention disclose a method system and a program product for configuring an integrated development environment for programming a type of computer application. The method includes a computer receiving a selection of a target application runtime program supporting one or more types of computer applications. The method further includes the computer sending a request for information on the one or more types of computer applications supported by the target application runtime program. The method further includes the computer receiving information on the one or more types of computer applications supported by the target application runtime program and in response the computer determining based on the received information the one or more types of computer applications supported by the target application runtime program. The method further includes the computer requesting a selection of a type of computer application from the one or more types of computer applications supported. The method further includes the computer receiving a selection of the type of computer application and in response the computer configuring an integrated development environment for programming the type of computer application selected.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In the depicted embodiment computing system includes computer and application runtime server interconnected over network . Network may be a local area network LAN a wide area network WAN such as the Internet any combination thereof or any combination of connections and protocols that will support communications between computer and application runtime server in accordance with embodiments of the present invention. Network may include wired wireless or fiber optic connections. Computing system may include additional computers application runtimes server computer client computers or other devices not shown.

Computer may be a desktop computer laptop computer tablet computer personal digital assistant PDA or smart phone. In general computer may be any electronic device or computing system as described in further detail with respect to capable of sending and receiving data and communicating with application runtime server over network . Computer contains integrated development environment IDE user interface UI and IDE configuring function .

Application runtime server may be a management server a web server or any other electronic device or computing system as described in further detail with respect to capable of receiving and sending data. In other embodiments application runtime server may represent a server computing system utilizing multiple computers as a server system such as in a cloud computing environment. Application runtime server contains application runtime program metadata publishing program and metadata file storage .

Application runtime program executes on application runtime server . Application runtime program may be a runtime program such as IBM WebSphere or any other program or function that supports the execution of a single type of computer application or multiple types of computer applications and can communicate with metadata publishing program . Generally a runtime program is a software component designed to support the execution of computer applications written in some computer language.

In one embodiment application runtime program would provide a service e.g. metadata publishing program capable of responding to a request for information on the one or more types of computer applications supported by application runtime program . It could be delivered as an inherent part of application runtime program or it could be delivered as a separate program that runs alongside application runtime program .

Metadata publishing program operates to determine and publish information on the one or more types of computer applications supported by application runtime program . Metadata publishing program may be a dedicated program a function integrated within application runtime program or any program that can communicate with application runtime program .

In one embodiment metadata publishing program calls application runtime program for information on the one or more types of computer applications supported. Metadata publishing program receives the information from application runtime program and stores the information in metadata file storage . In another embodiment metadata publishing program is an application programming interface API capable of responding to requests from other programs for information on the one or more types of computer applications supported by application runtime program .

In one embodiment information on the one or more types of computer applications supported by application runtime program may include at least the name of the type of computer application supported and the version of the type of application supported. In other embodiments the information on one or more types of computer applications supported by application runtime program may also include the location of plug ins required to develop the type of computer application supported.

In one embodiment metadata publishing program resides on application runtime server . In other embodiments metadata publishing program may reside on another server or another computing device provided that metadata publishing program is accessible to IDE configuring function and has access to application runtime program and metadata file storage .

Metadata file storage may be a repository that may be written and read by metadata publishing program and may be accessible to IDE configuring function . For example metadata file storage may be a database such as an Oracle database or an IBM DB2 database.

Integrated development environment IDE operates on computer to provide a software development environment for writing computer applications. IDE may be an IDE program such as Eclipse available under the Common Public License from the Eclipse Foundation Inc. or any other program or function that provides a software development environment. In one embodiment IDE resides on computer . In other embodiments IDE may reside on another computing device provided that IDE can communicate with IDE configuring function and UI .

UI operates on computer to visualize content such as icons and application material and allows a user to interact with IDE . UI may comprise one or more interfaces such as an operating system interface and application interfaces. UI may receive input from a user and report the input to IDE . UI may also visualize content received from IDE for a user to observe.

IDE configuring function operates to configure an integrated development environment for programming a specific type of computer application based on information obtained from an application runtime program. In one embodiment IDE configuring function prompts a user e.g. a computer application developer to select a specific type of computer application from the one or more types of computer applications supported by application runtime program . IDE configuring function configures IDE based on the specific type of computer application selected by the user.

In one embodiment IDE configuring function is a function of IDE on computer . In other embodiments IDE configuring function may be a separate program that resides on another computer or another computing device provided that IDE configuring function is able to communicate with metadata publishing program metadata file storage IDE and UI .

In step metadata publishing program queries application runtime program for information on the one or more types of computer applications supported by application runtime program . Metadata publishing program receives the information on each of the one or more types of computer applications supported by application runtime program from application runtime program step .

In step metadata publishing program creates a file containing the information on each of the one or more types of computer applications supported by application runtime program . In one embodiment the file created is an Extensible Markup Language XML file. A simple example XML file is discussed in greater detail in reference to . In another embodiment the file created by metadata publishing program may be a JavaScript Object Notation JSON file or any other type of file that may be read by IDE configuring function and written by metadata publishing program . Metadata publishing program stores the file containing the information on each of the one or more types of computer applications supported by application runtime program in metadata file storage step .

In another embodiment metadata publishing program does not follow the steps of the flowchart of . Metadata publishing program is an API capable of responding to requests from other programs for information on the one or more types of computer applications supported by application runtime program .

In one embodiment information on the one or more types of computer applications supported by application runtime program expressed in XML includes the type and version of each type of computer application supported. The information in shows that application runtime supports Java Enterprise Edition EE version 6.0 Ruby version 1.5 and PHP version 5.0 computer applications. In other embodiments the XML file may include location information about required plug ins or assets such as a Software Development Kit SDK needed to develop the computer application. Location information may be in the form of a Uniform Resource Locator URL .

In one embodiment initially a user at computer opens IDE via UI . IDE prompts the user to select a target application runtime program. The target application runtime program is a runtime program selected by a user for which the user will develop a computer application. In one embodiment IDE will send a request to UI to prompt the user to select a target application runtime program from a list of application runtime programs. In another embodiment the user may input a target application runtime program.

In step IDE configuring function receives an indication that a user has selected a target application runtime program via UI . In one embodiment IDE receives the user selection of application runtime program from UI and forwards the selection to IDE configuring function . In another embodiment UI sends the user selection of application runtime program to IDE configuring function .

In response to receiving the indication that the user has selected the target application runtime program IDE configuring function sends a request for information on the one or more types of computer applications supported by the target application runtime program step . In one embodiment IDE configuring function calls metadata publishing program for information on the one or more types of computer applications supported by application runtime program . In another embodiment IDE configuring function will call metadata file storage to retrieve the file containing the information on the one or more types of computer applications supported by application runtime program .

In step IDE configuring function receives the information on the one or more types of computer applications supported by the target application runtime program. In one embodiment in response to receiving the request for information on the one or more types of computer applications supported by application runtime program metadata publishing program calls metadata file storage to retrieve the file containing the information on the one or more types of computer applications supported by application runtime program . Metadata publishing program sends the file containing the information to IDE configuring function over network . In another embodiment the file containing the information on the one or more types of computer applications supported by application runtime program is retrieved and uploaded to IDE configuring function over network IDE in response to configuring function calling metadata file storage to retrieve the file.

In step IDE configuring function prompts the user to select a type of computer application from the one or more types of computer applications supported by the target application runtime program. In one embodiment IDE configuring function reads the file containing the information on the one or more types of computer applications supported by application runtime program to extract the one or more types of computer applications supported by application runtime . IDE configuring function will send a request to UI to prompt the user to select a type of computer application from the one or more types of computer applications supported by application runtime program . The prompt may be in the form of a popup window displayed through UI that lists the one or more types of computer applications supported by application runtime program .

In step IDE configuring function receives an indication that the user has selected a type of computer application. In one embodiment UI sends the user selection of the type of computer application to IDE configuring function .

In step IDE configuring function configures the integrated development environment for programming the type of computer application selected by the user. IDE configuring function configures IDE based on the information on the type of computer application selected by the user.

In one embodiment IDE configuring function creates a new computer application project in IDE for the type of computer application selected by the user. IDE configuring function may in another embodiment send a request to IDE to create a new computer application project for the type of computer application selected by the user. IDE configuring function reads the file containing the information on the type of computer application selected by the user for information on required plug ins or assets. IDE configuring function determines whether IDE contains the required plug ins or assets. If IDE already contains the required plug ins or assets IDE configuring function activates in IDE the required plug ins wizards and perspectives for developing the type of computer application selected by the user.

In another embodiment IDE configuring function reads the file containing the information on the type of computer application selected by the user for information on required plug ins or assets. IDE configuring function retreives and installs any required plug ins or assets if they do not already exist in IDE . IDE configuring function reads the file containing the information on the type of computer application selected by the user to determine the location of any required plug ins or assets such as a Software Development Kit SDK needed to develop the type of computer application. IDE configuring function determines whether IDE contains the required plug ins or assets. If IDE does not already contains the required plug ins or assets IDE configuring function sends a request to download the required plug ins or assets to the location of the required plug ins or assets determined from the file containing the information the type of computer application selected by the user. After downloading IDE configuring function activates in IDE the required plug ins wizards and perspectives for developing the type of computer application selected by the user.

Computer and application runtime server each include one or more buses which provide for communications between one or more processors memory persistent storage communications unit and one or more input output IO interfaces .

Memory and persistent storage are examples of computer readable storage mediums. Computer readable storage mediums are capable of storing information such as data program code in functional form and or other suitable information on a temporary basis and or permanent basis.

One or more operating systems integrated development environment UI and IDE configuring function are stored in persistent storage of computer for execution and or access by one or more of the respective processors of computer via one or more memories of memory of computer .

One or more operating systems application runtime program metadata publishing program and metadata file storage are stored in persistent storage of application runtime server for execution and or access by one or more of the respective processors of application runtime server via one or more memories of memory of application runtime server .

Memory can include one or more random access memories RAM cache memory or any other suitable volatile or non volatile storage mediums. Persistent storage can be a magnetic disk storage medium of an internal hard drive. Alternatively persistent storage can be a semiconductor storage medium such as ROM EPROM flash memory or any other computer readable storage medium that can store a computer program and digital information. The storage medium used for persistent storage can also be removable. For example a removable hard drive can be used for persistent storage . Other examples include optical or magnetic disks thumb drives or smart cards that are inserted into a drive for transfer onto another storage medium that is also a part of persistent storage .

Communications unit provides for communications with other computer systems and or devices via network . The network may comprise for example copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers. Communications unit may include network adapters or interfaces such as TCP IP adapter cards wireless Wi Fi interface cards 3G or 4G wireless interface cards or interfaces for other wired or wireless communications links. Software and data used to practice embodiments of the present invention can be downloaded from an external computer system via network and communications unit and can be loaded onto persistent storage .

One or more I O interfaces allow for input and output of data with other devices that may be connected to computer or application runtime server . For example I O interfaces can provide a connection to one or more external devices and display . External devices can include for example a keyboard computer mouse touch screen and other human interface devices. External devices can also include portable computer readable storage mediums such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention can be stored on such portable computer readable storage mediums and can be loaded onto persistent storage .

Display provides a mechanism to display data to a user and can be for example a computer monitor. Alternatively display can be an incorporated display that also functions as an input device such as for example a display that also functions as a touch screen.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The foregoing description of various embodiments of the present invention has been presented for purposes of illustration and description. It is not intended to be exhaustive nor limit the invention to the precise form disclosed. Many modifications and variations of the present invention are possible. Such modifications and variations that may be apparent to a person skilled in the art of the invention are intended to be included within the scope of the invention as defined by the accompanying claims.

