---

title: Method and system for storing, categorizing and distributing information concerning relationships between data
abstract: A method and system for storing, categorizing and distributing information concerning relationships between data that involves the use of tags in place of traditional, mutually-exclusive file folders by querying any number of servers for information regarding a tag, associating the tag with data on an electronic device, and suggesting other tags that might be relevant as well.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832162&OS=08832162&RS=08832162
owner: Think Computer Corporation
number: 08832162
owner_city: Mountain View
owner_country: US
publication_date: 20130324
---
This application claims the benefit of U.S. Provisional Application No. 61 615 325 filed 25 Mar. 2012 entitled Method and System for Storing and Categorizing Relationships Between People and Data which is incorporated in its entirety by this reference.

This invention relates generally to the computer operating system field and more specifically to a new and useful method and system for storing classifying and distributing information about relationships between computer data files.

For decades personal computers have stored information using a hierarchical file folder metaphor in which pieces of information or files have been categorized through their placement in folders also referred to as directories with concise names. Some of the earliest computer operating systems that have long since fallen out of use such as CP M used names for files and folders alike that were restricted to a syntactical format involving at most eight characters followed by a period or dot followed by at most three more characters the extension intended to represent the type of the file. For example a file called COMMON.DOC was and to some extent still is often referred to as a having a .DOC file type somewhat opaquely indicating that it is intended to be used by Microsoft Word. With this conventional limiting and hierarchical system unlike a traditional filing cabinet it is nonetheless possible to store a folder within another folder recursively essentially ad infinitem. Yet many limitations exist among them the fact that it is not possible to store the exact same file in two or more folders at once which might be helpful for categorization purposes without making a duplicate asynchronous copy of that file.

The problem of addressing files has traditionally been handled through the use of special characters to denote logical relationships. On UNIX operating systems the forward slash character denotes that the subsequent string of characters is a file or folder that is a subset of the folder or storage device corresponding to the preceding string of characters. A typical UNIX file path therefore might be etc httpd conf httpd.conf with representing the root node or storage device. On MS DOS and Windows systems this character has traditionally been a backward slash giving rise to file paths such as C WINDOWS SYSTEM32 KERNEL32.DLL with C representing the root node or storage device. Apple Macintosh systems prior to Mac OS X used two sets of colons with file paths such as Macintosh HD Documents My Letter.doc . Mac OS X built on the FreeBSD UNIX kernel now uses UNIX file paths.

The implication that digital information must obey physical laws such as conservation of matter meaning that a file like a chair might only be in one place or another at any given point in time has had unintended consequences that have afflicted millions of computer users. Unintentionally renaming or moving a system file i.e. a file integral to the proper functioning of core system software might render a computer completely inoperable and require hours of maintenance to fix. Another consequence of mutually exclusive file addressing involves naming conventions naming a revision of a legal document pertaining to multiple issues might require an awkward and overly verbose file name such as March 31 client X Johns sales revision 3 with changes about cameras.docx so that it is likely to appear in future searches for data pertaining to sales figures John and cameras. In other words crucial system files are not identified to operating systems by their crucial nature but rather by an arbitrary string that is hard coded into a piece of software corresponding to a particular location nor are user files identifiable to users by the definition of any particular attributes except clumsy names. Yet another consequence of the over dependence upon special file names is that by changing the data at such a hard coded address i.e. file name in cases where a computer does not stop functioning outright it is also possible to insert malicious software.

 Tags also sometimes referred to as labels have recently gained a foothold on the internet as an improved method of categorizing e mail messages blog posts and other disparate types of information stored on remote servers. Nonetheless tags are not found at the lower operating system or file system levels where files accessible through an operating system kernel are organized on a physical data storage medium or disk. Nor are tags found within one program or web site typically usable on another. They exist for all practical purposes only in independent silos.

The organization of large numbers of files on a physical storage medium presents challenges that have serious implications for software development and use. For example many computer software applications make use of dynamic linked libraries or collections of commonly used software functions that can undergo numerous revisions by programmers throughout the lifespan of a given computer system. Some libraries which frequently have multiple versions must also be offered in 32 bit and 64 bit editions simultaneously to account for different types of microprocessor architectures available in modern computers. File paths are the sole identifier that modern filesystems use to distinguish between types of files and only one file with a given name can exist in a given folder. Though each revision and type of software library must be treated as completely distinct in order for other inter linked programs to function properly confusion frequently reigns often causing software crashes since completely distinct versions and or editions of libraries can have confusingly similar and sometimes identical file names.

Compounding the failure to distinguish between microprocessor platforms and revision numbers modern filesystems are unable to quickly find files made by the same person or employer let alone those that meet more abstract search criteria such as files made by any company located in the greater London area. The simple fact that there are only two possible types of data namely files and folders on popular filesystems ranging from FAT32 to NTFS to ZFS to HFS to CDFS explains why such limitations persist even on what are otherwise considered to be cutting edge filesystems.

The application layer that associates certain file name suffixes with specific programs is itself extremely error prone and confusing. For example OpenOffice the open source equivalent to Microsoft Office can read and edit .DOC .XLS and .PPT files extensions that originated with Microsoft software but if OpenOffice is installed after Microsoft Office it may re assign itself to those file types leaving Microsoft out of the equation on that particular computer. While this may be desired behavior in some instances it may also be highly undesired at times. Today there is no concept of a word processing document according to an operating system only that of a .DOC extension that must either correspond to one software application or another.

Using traditional file system hierarchies files and folders also fail to persist across multiple computer devices including multiple devices that belong to the same individual. In general this means that information cannot easily be made available to groups of people without using a software application running on top of the operating system as an intermediary distribution mechanism e.g. Microsoft SharePoint Lotus Notes web browsers etc. For a given individual this major drawback of today s operating system software also necessitates regular data transfer and file folder synchronization which is increasingly time consuming and error prone as more devices become involved.

Tags fill another gap left by traditional file systems involving data that does not need from the perspective of an average user a proper name such as a particular photograph in a set of many family photographs taken in rapid succession. Photographs stored on traditional storage media are usually assigned meaningless names such as DSC1398.JPG which convey no meaning to the photographer or viewer whatsoever aside from the largely irrelevant fact that the photograph is the 1 398image to be captured by that camera since its counter was last reset.

A need exists for a new type of operating system that can better organize real world data e.g. contact records events financial documents medical records e mail messages personal letters legal notices software code photographs video sound music and abstract data sets among others and then relate those pieces of data to each other through the use of tags. Until such a system exists in the commercial marketplace there will also be a need for a transitional technology that moves large volumes of data from existent operating systems those based upon arbitrary independent hierarchies of folders to new systems that employ intuitive labels not required to be mutually exclusive and that can easily persist across devices and applications.

Tags have often been used on web sites. However they have not been employed as the main channel of accessing information in any major operating system let alone a channel that makes inherent use of the internet due to several limitations in the existing implementations which are addressed by this invention.

A need further exists for a new method and system for associating data with tools such as software applications that are capable of working with that data. For example while it is easily possible to write an essay without the use of a computer by using a pencil on the left side of a piece of 8.5 11 paper and then to paint a picture with a paintbrush and colored paints on the right side of that same page accomplishing a similar feat through the use of a computer is surprisingly far more difficult. The latter process is a cumbersome exercise involving the creation of two to three files in two to three different software applications the essay in a word processor the painting in a drawing program and the page itself in a desktop publishing application capable of uniting the other files according to particular layout specifications. Therefore while the technology employed for data storage and organization today is extremely functional and widespread it still lacks the ability to quickly assemble and categorize information and later to help the user find that information. There is therefore a need in the operating system field and the file system field specifically to create a new and useful method and system for storing categorizing and distributing relationships between data. This invention provides such a new and useful method and system.

The method for storing categorizing and distributing information concerning relationships between data of the preferred embodiment includes creating and storing independent lists of system defined and user defined tags accessible at the operating system level requiring the assignment of at least one tag to each new piece of information written to disk throughout a user session optionally suggesting the assignment of additional tags to each new piece of information written to disk based upon tags that have been previously assigned to similar pieces of information allowing the user to choose which tags to make public or private to various groups of people allowing the user to suggest new tags for remotely stored data allowing the user to endorse vote up or discourage vote down tags that have already been applied to data generated elsewhere requiring the user to perform authentication steps in order to use certain tags with restricted permissions allowing tags to be linked to other tags in a variety of manners e.g. equal equivalent subset superset null etc. and automatically synchronizing tags and their corresponding data across a network of interconnected computers. The method functions to allow a user of the embodiment to keep track of information in a non hierarchical and cross indexed manner such that searching for information is both faster than with conventional means and more likely to lead to either the immediately desired data or data closely related to the subject of a search query. In the preferred embodiment the method allows individuals to keep track of their real world relationships to one another through the use of tags that correspond to commonly used terms in the real world e.g. client vendor buyer merchant etc. In another embodiment the method provides an accurate and verified record of a person s career educational history or credit history through the authenticated and selective application of restricted tags. In another embodiment the method provides users with an ad hoc relational database storage engine by using tags to define field templates so that data can be grouped together without need for any programming. In another embodiment the method links previously disparate systems reliant on independent software applications such as corporate office calendars and corporate receipt tracking software through the use of tags that correspond to meeting locations and expense types. In another embodiment the method serves as an electronic communications medium through the augmentation of message data with message type tags. Most preferably the user can access the data storage system through a personal computer a thin client computer such as a tablet connected to a server via the internet or a mobile device.

In some embodiments herein a flexible data classification method is disclosed. Such a data classification method may be used to index newly created information existing information on a device belonging to an entity or through the use of a network existing information on a different device belonging to a different entity. A data synchronization mechanism is also disclosed as an intermediate method necessary on some devices not capable of using the flexible data classification method without significant modification by the device manufacturer.

In one example a digital copy of IRS Form 1099 DIV from a hypothetical brokerage firm called Stocks Plus may be saved on a device with tags chosen by the user entitled 2013 Taxes Stocks Plus and IRS so that the document could be recalled later by searching for 2013 Taxes Stocks Plus IRS or slight variations on these terms. Should another digital copy of a tax form also be tagged with Stocks Plus such as an IRS Form 1099 DIV from a prior year the Stocks Plus tag may provide a visual indication within the tag itself or elsewhere on a display of the arithmetic sum of the numeric amounts of money contained within those documents. Or if specific fields within the tax form are tagged with their respective field names the values only in those tagged fields might be totaled. In this manner any tag may serve to facilitate arithmetic operations on associated underlying numeric data.

In another example the digital copy of IRS Form 1099 DIV may arrive pre loaded with tags chosen by the document s creator to assist the recipient in categorizing the data for later retrieval. The user may be given an opportunity to accept reject or augment the pre loaded tags with tags more relevant to that particular user.

In yet another example the client device may automatically suggest tags relevant to a digital copy of IRS Form 1099 DIV downloaded from the web site of the brokerage firm by relying upon rules associating the brokerage firm s domain name s and meta data contained within the digital document with specific tags available to the end user.

The classification mechanism may be used to de couple content from file format information. Two files containing the exact same content with the exact same file name but represented on disk in different formats may be differentiated by system defined tags indicating file format.

The classification mechanism may also be used to centralize views of vast amounts of information stored in different locations on different devices. For example a law firm with offices in New York Chicago and London may store information pertaining to clients on servers physically located in each office with data pertaining to a specific client matter stored on each server. Using the classification mechanism the law firm s employees may automatically without the need for manual indexing view all of the information pertaining to the client matter on one device without regard to the location of the data the type of data or the tool used to create the data.

The following description of the preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

1. Method for Storing Categorizing and Distributing Information Concerning Relationships Between Data

As mentioned above and as shown in the method for storing categorizing and distributing information concerning relationships between data includes creating and saving data on a desktop laptop mobile or other client device S and determining whether that file system supports tag based storage S.

If the device s file system does natively support tag based storage then the process continues by the user indicating at least one tag to classify the data with S the client device requesting a partial tag list from tag servers corresponding to the supplied string S the tag servers filtering the resulting list according to privacy rules associated with each tag S the tag servers returning filtered result lists to the client device plus any additional suggested relevant tags S the client device optionally storing these results in a local cache for future use S the user choosing the proper tag from the results and the client device storing the user chosen tag identification numbers IDs in association with the given data S and the client device suggesting to the user any additional relevant tags that were offered by the tag servers in the result lists S. Steps S and S can repeated as many times as necessary with the user applying additional tags and the client device suggesting new related tags each time.

If the operating system does not support tag based storage then it is necessary to use another device s operating system or another application that does support tag based storage as an intermediary mechanism. In the preferred embodiment the process continues by computing a hash of the data S and comparing the hash to the last known hash of the data if available on a remote server S. If the hashes match the data has not changed since the last synchronization operation and so the process stops. If the hashes do not match or no prior hash exists on a remote server then the process continues by segmenting the data on the client device S comparing the hashes of each segment on the client device to corresponding hashes of segmented data on a remote server S transferring any segments with non matching hashes or no prior hashes to a remote server S and applying tags to data on a remote server S such that a software application running on a remote server handling these intermediate steps behaves as would a client device S.

Step S which involves the creation of new digital data on a device or the modification of existing digital data as well as the user s subsequent choice to save that data as depicted in serves to define a finite set of information for labeling with a tag. Identifying a piece of data might be accomplished by starting a new text document taking a photograph with a digital camera visiting a web site saving a file working within a mobile application or performing some other kind of task that involves the creation or manipulation of digital information. Each type of data e.g. text photograph web site etc. would in the preferred embodiment correspond with a system defined tag for that data type which could in turn be associated with software tools capable of editing the data. Unless the given device already natively supported the method and system described herein in which case the data s location in a specific folder would no longer be relevant or necessary the user would be prompted to choose a location in which to store the data.

Step S which involves the determination as to whether or not the local file system natively supports tag based addressing functions to bypass certain steps that are unnecessary on devices with native tag support but crucial for devices that lack such support. Devices without native tag support require an intermediary device or software application that does support tags in order for them to be applied. The introduction of a second device into the system necessitates a data synchronization and transmission process which is described by steps S through S.

Step S which involves indicating a specific tag that can be used to classify data typically through the use of a keyboard voice recognition or some similar device functions to provide a query string that can be transmitted to any number of servers as shown in and .

Step S which involves the client device requesting a partial tag list from any number of servers functions both to limit the computational load on the servers since the complete tag list may be very large and to limit the number of results that is returned back to the client device based upon the query string provided. For example as shown in and the aggregate result list only shows tags that begin with the same characters as the provided query string. Limiting the number of results transmitted over the network is advantageous insofar as there may be a charge for bandwidth used by servers and insofar as a large result set might overwhelm the end user with irrelevant information.

Step S which involves the tag servers filtering their respective result lists according to permissions associated with each tag functions to ensure that results are tailored to the particular individual making the request. Some tags might be used to classify information that is private or the classification itself might be private. It is therefore necessary to filter the results according to privacy rules stored on the servers before being transmitted back to the client device. Tags might be limited to one particular user the creator of the tag a group of users possibly corresponding to workplace or employer or not limited at all in which case any user would be able to apply the tag to any content. Each level of visibility might correspond to a different visual icon or color cue so that users could rapidly identify the privacy level of a given tag. Tags might also have an optional property forcing other tags or corresponding content to inherit that tag s privacy settings so that a specific public tag when applied would automatically make the underlying content public. Such a setting may also correspond to a specific visual icon or color. Rules embedded in tag servers may govern conflicts between differing privacy rules associated with different tags causing some tags rules to override others.

Step S which involves the transmission of the filtered result lists back to the client device functions to complete the query between the client and the server.

Step S which involves the client device storing the aggregated filtered results in a local cache functions to allow the client device to continue operating with a greater degree of speed and reliability. In the event that the network is unavailable severing the conduit to remote tag servers the client device may use the local cache to perform lookups of tag unique identifier information instead of attempting to query the inaccessible number of servers. Even if the network is technically available it may be slow or unreliable and so it may be advantageous to use the local cache to perform faster queries without any network latency.

Step S which involves the application of the chosen tag unique identifiers to an underlying piece of data functions to store on disk and or in memory the user s desired classification of the data for the long term. Since tags can be applied to more than one piece of information and each piece of information can be associated with more than one tag tags are the most efficient way to represent complex information relationships. The unique identifier underlying each tag can be hidden from view of the user through the operating system s user interface even if the unique identifier is ultimately the key piece of information stored for future retrieval. Once applied tags may also be disassociated with data through the use of an icon indicating deletion as depicted in the example user interface in .

Step S which involves the suggestion of additional tags to the user based upon those tags previously chosen serves to assist individuals in classifying information properly and completely. Suggestions might be based upon other tags already chosen for a given piece of data or based upon the most frequently used tags over a longer period of time in the past either for a particular individual or for a group of individuals. Once a tag has been applied to one piece of data it is more likely to be applied again to another.

Step S which involves computing an overall hash of the data in question functions to avoid unnecessary synchronization and data transmission. The synchronization process operates by computing an overall hash of the data to be transmitted and comparing it with the last known hash of the corresponding data on the remote server if any.

Step S which involves comparing the hash on the client device to the hash on the server halts the process if no additional synchronization work is necessary.

Step S which involves segmenting the data functions to further reduce the need for any unnecessary data transmission. Given that some data files such as videos can be several gigabytes in size it is far more efficient and cost effective to transmit only the segments of a file actually modified rather than the entire file itself.

Step S which involves comparing the hash of each segment on the client device to the hash of each segment on the server again functions to avoid unnecessary synchronization and data transmission. Upon detecting a difference between the segment hash string on the local computer and the segment hash string on the remote server the process marks those segments with differing hashes for transmission.

Step S which involves transmitting certain segments to a remote server functions to ensure that data on the remote server is synchronized with data on the client device. Transmission of data may be accomplished through a variety of standard data transmission mechanisms such as HTTP FTP AFP and encrypted if necessary.

Step S which involves the user applying tags to data on a remote server functions to substitute for the client device not being able to support tag associations itself.

Step S which involves an application on the remote server behaving as a client starts the process beginning with step S.

2. System for Storing Categorizing and Distributing Information Concerning Relationships Between Data

As shown in the system for storing categorizing and distributing information concerning relationships between data of the preferred embodiment includes primary tag servers secondary tag servers at least one client device natively capable of associating tags with data other tag aware devices such as mobile devices an Application Programming Interface API and legacy devices as well as tag API enabled software applications . Many of these devices work while connected to a globally interconnected network of computers i.e. the internet .

The primary tag servers of the preferred embodiment function as an accessible central node that stores a list of tags in a relational database for the general public as well as registered users to reference.

The secondary tag servers of the preferred embodiment function as accessible private nodes that store lists of tags in relational databases for only specific registered users to reference such as employees of a particular company or students at a university.

The tag aware devices and of the preferred embodiment functions as a client device that can make direct queries to primary and secondary tag servers and without the use of additional application software.

The API of the preferred embodiment functions as a bridge between legacy devices that cannot make direct queries to primary and secondary tag servers and between tag enabled applications and primary and secondary tag servers.

The API of the preferred embodiment functions as a bridge between legacy devices that cannot make direct queries to primary and secondary tag servers and between tag enabled applications and primary and secondary tag servers.

As depicted in in the preferred embodiment the tags themselves may be represented to the user by rounded rectangles containing the name of the tag along with icons representing privacy settings and disassociation capability. Clicking on the privacy icon may reveal a dialog box corresponding to privacy and other settings for that particular tag that can be dismissed by an icon representing exit functionality . The privacy rule itself may be defined by a list of groups to share with including the general public that updates the privacy icon . Settings regarding the tag s hierarchical placement may also be governed by controls in the dialog such as which tag is the parent of the present tag. A password may also be set restricting access to data associated with the tag which can be confirmed within the same dialog or a different dialog to ensure accurate typing since password fields are typically masked. Other settings such as mutual exclusion may be configurable through the dialog pertaining to the tag. Changes to the settings may be saved through the use of a button that commits the changes to long term storage through the use of a request to the proper tag server.

As previously discussed and as depicted in a tag or multitude of tags may be applied to remote content authored by a different individual than the present user . On the part of the content s author it may be desirous to gauge applicability of various tags by enabling voting controls for those tags . On the part of the content s author it may further be desirous to display the number of votes recorded in either direction for each tag with a counter . In the event that any tag receives a large number of votes in either direction it may also be desirous to alter the appearance of that tag to encourage or discourage attention or even remove the tag s association with the content entirely beyond a certain user defined threshold.

As shown in a client device may be configured to query any number of tag servers via a user interface with standard OK and Cancel response buttons that write the choices to disk and or memory or discard them respectively. The user interface may divide servers into primary and secondary designations and may optionally hard code or provide default selections for the primary servers. The user may have the ability to add delete edit re order upward and re order downward servers in the primary or secondary tag server lists. Servers may be designated by IP address DNS hostname or any other appropriate network addressing mechanism. The user interface may also present a method for manually clearing the local tag cache rather than simply allowing outdated cache entries to expire.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

