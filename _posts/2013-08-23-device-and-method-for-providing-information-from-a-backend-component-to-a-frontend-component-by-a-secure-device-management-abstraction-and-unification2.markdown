---

title: Device and method for providing information from a backend component to a frontend component by a secure device management abstraction and unification module
abstract: An exemplary system that includes a computing device that stores an abstraction and unification module, the abstraction and unification module being executable by a processor of the computing device to receive from a frontend component a request for information located within a backend component of the computing device and validate that the frontend component is authorized to receive the information specified in the request. The abstraction and unification module may further pass the request to an abstraction engine that extracts the information from the backend component and provides the information extracted from the backend component to frontend component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09576153&OS=09576153&RS=09576153
owner: Cellco Partnership
number: 09576153
owner_city: Basking Ridge
owner_country: US
publication_date: 20130823
---
Computing devices such as wireless based telecommunication devices have evolved from point to point to all in one devices with multiple characteristics including such things as device settings networking voice and video calls multi media acquisition messaging playback data storage and the like. For example cell phone operability has evolved so much from the humble call only phones that the term smart phone is utilized to describe an entire developing class of these all in one devices.

Yet with the increase of device characteristics the complexity of supporting software has also increased. That is each all in one device employs one or more unique software components to perform operations particular to a characteristic. In turn an assortment of separate software components e.g. backend components such as clients device drivers and application programmable interfaces and frontend components such as user experience diagnostic and analytic applications have been collected and combined to support the multiple device characteristics resulting in software fragmentation.

Software fragmentation is an inconsistent combination of software and hardware e.g. assortment of separate software components that creates an inconsistent software ecosystem. Inconsistent software ecosystems intrinsically include communication problems between the software components due to varying code standards and possess security risks due to software component integration flaws. Further inconsistent software ecosystem may also limit scalability since any increase in the number unique software components may equate to an increase of communication and security problems.

Thus the increase of device operability has resulted in a trend of software fragmentation that has increased the storage footprint and resource utilization within the all in one devices while decreasing software flexibility security and scalability.

A secure device management abstraction and unification module SDMAUM has been developed which operates as middleware to abstract interactions between backend and frontend components. Abstraction by the SDMAUM results in a consistent communication mechanism for backend and frontend components that perform the operations within an otherwise inconsistent software ecosystem.

For instance a computing device which resides on a network within an exemplary communication system includes on a memory a software ecosystem in which an SDMAUM operates. When the software ecosystem and or portions thereof such as an operating system OS of the computing device are updated or altered without the SDMAUM each application frontend component must also be modified to interact with the updated or altered OS e.g. the backend clients device drivers and application programmable interfaces APIs of the OS . However a middleware abstraction of these components by the SDMAUM provides the scalability of modifying a single module i.e. the SDMAUM when the OS is updated instead of having to modify all frontend components that interact with the backend clients device drivers and APIs of the OS.

Thus regardless of the component variety and or upgrade status the middleware modular strategy executed by the SDMAUM provides consistent communication between backend and frontend components. Further because the middleware modular strategy enables a consistent and secure approach to communicating device information between components the development of and time to production for the new and or enhanced computing device characteristics e.g. advanced system settings networking voice and video calls multi media acquisition messaging playback data storage mapping systems speech recognition internet browsing etc. may be respectively simplified and decreased.

As illustrated in system includes the computing device and the servers . The exemplary computing device and servers may be any computing system and or device that includes a processor and a memory e.g. and respectively . Computing systems and or devices generally include computer executable instructions e.g. an OS SDMAUM etc. where the instructions may be executable by one or more computing devices such as those listed below. Computer executable instructions may be compiled or interpreted from computer programs created using a variety of programming languages and or technologies including without limitation and either alone or in combination Java C C Visual Basic Java Script Perl etc.

In general a processor or a microprocessor e.g. CPU receives instructions from a memory e.g. memory and executes these instructions thereby performing one or more processes including one or more of the processes described herein. Such instructions and other data may be stored and transmitted using a variety of computer readable mediums e.g. memory . Further computing systems and or devices may employ any of a number of computer operating systems including but by no means limited to versions and or varieties of the Microsoft Windows operating system the Unix operating system e.g. the Solaris operating system distributed by Oracle Corporation of Redwood Shores Calif. the AIX UNIX operating system distributed by International Business Machines of Armonk N.Y. the Linux operating system the Mac OS X and iOS operating systems distributed by Apple Inc. of Cupertino Calif. the BlackBerry OS distributed by Research In Motion of Waterloo Canada and the Android operating system developed by the Open Handset Alliance.

Examples of computing devices include without limitation cell phones smart phones super phones tablet computers next generation portable devices mobile printers handheld computer secure voice communication equipment or some other computing system and or device. Alternatively computing devices may also be a computer workstation a server a desktop notebook or laptop.

The CPU may include processes comprised from any hardware software or combination of hardware or software that carries out instructions of a computer programs by performing logical and arithmetical calculations such as adding or subtracting two or more numbers comparing numbers or jumping to a different part of the instructions. For example the CPU may be any one of but not limited to single dual triple or quad core processors on one single chip graphics processing units visual processing units and virtual processors.

The memory may be in general any computer readable medium also referred to as a processor readable medium that may include any non transitory e.g. tangible medium that participates in providing data e.g. instructions that may be read by a computer e.g. by a CPU of the computer device . Such a medium may take many forms including but not limited to non volatile media and volatile media. Non volatile media may include for example optical or magnetic disks and other persistent memory. Volatile media may include for example dynamic random access memory DRAM which typically constitutes a main memory. Such instructions may be transmitted by one or more transmission media including coaxial cables copper wire and fiber optics including the wires that comprise a system bus coupled to a processor of a computer. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EEPROM any other memory chip or cartridge or any other medium from which a computer can read.

In the exemplary illustration of the non transitory memory of the computing device may store backend device components e.g. device management DM client DM applications Apps unified DM user interface UI and the SDMAUM as executable instructions within the OS for the computing device executable by the CPU to perform one or more of the processes described herein.

The backend device components may be device side executable instructions that alone or in combination configure and or operate the physical components of the device e.g. a touch screen display antenna integrated camera etc. . Examples of backend device components include device drivers APIs and device management clients.

A device driver is a computer routine that controls a particular physical component of device or a peripheral e.g. a printer attached to the device. Similar to a device driver is an OS Layer Kernel which manages and translates input output requests into data processing instructions for the central processing unit e.g. CPU . An application programming interface API is a set of executable instructions that itemizes and implements the data structures object classes and variables that interact with the device drivers to operate physical components and that launch programs.

A device management client may include executable instructions that manage a physical device by setting configurations and diagnostics based on a particular protocol. Device management clients generally manage physical devices via provisioning configuring fault managing and upgrading operations. Provisioning is the enabling and disabling of both physical device components and software components. Configuring is the changing of settings and or parameters of the device. Fault managing is the monitoring and sometimes correcting of errors generated by the physical and software components.

Software upgrading is the loading of new software and or bug fixes onto the device including applications and OS upgrades. For example a device management client may utilize software upgrading operations related to Firmware Over the Air FOTA operations. FOTA is a process for updating software on computing devices wirelessly or directly over the air from the service provider e.g. a mobile phone provider to the computing devices. FOTA also allows manufacturers and operators to push out firmware upgrades to ensure that the computing devices have the latest software improvements.

Pushing out firmware upgrades may be initiated via a notification service that sends through an open connection notifications from servers to devices. Notifications may generally include badges sounds or custom alphanumeric visual based alerts. Thus by utilizing notification services and FOTA operations a device management client may be configured to receive the wireless distribution of applications data and configuration settings for all types of device operations.

The DM client is an example of a device management client. The DM client may for example execute a protocol specified by the Open Mobile Alliance which is a specific to the management of wireless devices and include a push notification service specified by Google Cloud Messaging or Apple Push Notification Service Management. Therefore the DM client may be configured to update and manage the computing device configurations and diagnostics based on the Open Mobile Alliance in conjunction with Google Cloud Messaging.

The frontend device components are user side executable instructions that alone or in combination present applications and run applications. Examples of frontend device components include the DM Apps and the unified DM UI . An example of presenting an application is the generation and display of a user interface on a display of the computing device . An example of running an application may be the continuous operation of a timer feature of a clock application regardless of whether the user interface is on the display of the computing device .

The DM Apps may include user experience diagnostic and analytic applications e.g. frontend components such as third party and or enterprise application that are specifically designed to meet the needs and objectives of manufacturers customers and service providers. One example of a DM App may include a virtual local area network management policy server VMPS . The VMPS may include executable instructions configured to run on a computing device that acts as a network switch for mapping the computing device to a virtual local area network VLAN and providing general network management. The VMPS thus may allow an authorized computing device to connect to and communicate through a VLAN established by a service provider.

The unified DM UI may include a set of executable instructions for generating and managing user interfaces which based on a received input control the device characteristics via the SDMAUM and operate the front components. For instance the unified DM UI may be configured to generate present and provide one or more user interfaces e.g. in a menu icon tabular map or grid format in connection with other modules for presenting information and receiving inputs e.g. configuration adjustments such as inputs altering updating or changing the device settings . The inputs are communicated by the unified DM UI to the SDMAUM which in turn abstracts and forwards the inputs as described below. The unified DM UI may also include local terminal web based and mobile interfaces and any similar interface that presents and provides information relative to the SDMAUM e.g. a single UI for DM mobile front end UI self care heal app etc. .

The SDMAUM may include a set of executable instructions configured to facilitate communication between the sub modules of the SDMAUM and hardware software components external to the SDMAUM including servers . That is the SDMAUM may be configured to communicate directly with other applications modules models devices systems and other sources through both physical and virtual interfaces. Further the SDMAUM may include executable instructions and specifications for routines data structures object classes and variables that receive package present and transfer data through a connection or over a network as further described below. For example the SDMAUM may be configured to receive instructions from sources external to the computing device and based on those instructions abstract interactions between the backend device components the DM Apps and the unified DM UI .

The SDMAUM delivers a uniquely consistent approach to device management through abstraction. That is by abstracting interactions between the backend device components the DM Apps and the unified DM UI the SDMAUM operates as a middleware for communications. In this example middleware provides increased control and adaptation operations via single module scalability as discussed above. In addition to single module scalability the SDMAUM may also provide enhanced device management capabilities such as self wakeup polling and policy control. Enhanced device management capabilities are further described below in reference to each sub module to the SDMAUM .

The SDMAUM may include the sub modules of a Device Management Command and Event Listener DMCEL an Embedded Rules and Policy Engine ERPE a Rules and Policy Access Control List RPAC that stores a timing heuristic an Embedded Heuristics and Analytics Engine EHAE a Device Management Translation Engine DMTE a Kernel Drivers Libraries Abstraction Engine KDLAE and a Device Management Client Abstraction Engine DMCAE to provide the above discussed operations.

The DMCEL is configured to listen for commands or queries from frontend components and external server requests e.g. the DMCEL generally invokes the operations of SDMAUM . For example the DMCEL listens for device events that may require the wake up of a client or operation and passes those requests on to the ERPE for validation. Also when the DMCEL interacts with the ERPE and RPAC the DMCEL stores device and programmatic events in a SDMAUM Event Log. The SDMAUM Event Log in conjunction with either the EHAE or with an external analytics server may detect deviations from a baseline that indicate abnormal network or device events. A baseline may be a set of operating conditions in which for example no errors occur on a device or congestion on a network. Deviations in general are difference measurements between an observed value e.g. baseline and some other value e.g. abnormal network or device events . Examples of deviations may include sensitivity measurements when in relation to the baseline an upper or lower tolerance threshold is breached and quantity measurements when a number of deviations above or below the baseline is met or exceeded. The information in the SDMAUM Event Log may be used for the purpose of analytics or self help and heal scenarios by feeding the information to front end applications or external servers. In addition the DMCEL utilizes APIs provided through the SDMAUM SDK to forward the call or interact with the ERPE when a call is made from an application regardless of the application type.

The ERPE is configured to validate that a calling entity e.g. a frontend component is legitimate and authorized to communicate with the backend components. The ERPE utilizes the policies present in the RPAC to ensure authorization and security for these communications.

The RPAC is a sub module enabling the selective restriction of access to device resources and configurations. For instance the RPAC may include an access control list ACL that itemizes permissions attached to an object application or component e.g. an ACL specifies approved operations . All calls to the SDMAUM from the OS device components clients applications APIs polling engine DMCEL DMTE KDLAE DMCAE and external entities are passed through the ERPE which in conjunction with the RPAC ensures that the request is being generated or received from a legitimate authorized source e.g. the associated application call contains a valid digital signature .

Digital signatures may be used to verify the applications or entities calling on the operations of the SDMAUM . The RPCAC may store digital signatures of valid and authorized entities that have proper permissions to interact with the SDMAUM and backend or frontend components.

Hashing heuristics may also be used to add additional security to calls for more secure interactions. In general a hash heuristic may be any methodology or subroutine that maps data of variable length to data sets of a fixed length e.g. hash values . For example a hash heuristic may manipulate the data of a queue according hash tables or other data structures such that the data may be split or distributed into buckets based on their computed hash values e.g. data may be read from the queue based on keys such as a mobile number an account number a customer identification level or other parameters .

On example of adding additional security by using digital signatures and hashing heuristics may be an authentication of frontend or backend entities during the communication process where a digital signature may be utilized to ensure that an application has permissions to interact with the SDMAUM and a backend component and a hashing heuristic may be utilized to ensure that the application is who it claims to be e.g. the hashing heuristic may also enable a hash authentication at the time of the application call .

In addition responses from these sources e.g. objects applications or components may also be securely validated in the same manner.

The ERPE may also be configured to enable polling of OTA and DM systems e.g. over the air device management server . In general the ERPE may directly poll connect to and download from OTA and device management systems the RPAC which may include OTA polling intervals and a clock randomization heuristic e.g. timing heuristic .

The timing heuristic e.g. code that creates and manages a table of start times in connection operating clock may be used to avoid all activated devices from polling or updating at the same time which in turn may overload network e.g. and or server systems e.g. . That is the RPAC stores the timing heuristic that is used by the ERPE to manage a virtual clock or timer created by the ERPE. The clock based on the timing heuristic triggers the SDMAUM to self wake and poll the DM systems to for RPAC updates. The timing heuristic of the RPAC may thus govern the polling intervals and or a specific date time for polling. The DM systems interacting with the SDMAUM may also inform the computing device as to whether or not it needs to check for available software updates.

The ERPE also includes a retry mechanism for intelligent updates and content delivery that enables enhanced network scalability and operability. A retry mechanism for example may be code that manages maintains a queue for retransmitting messages or data at different intervals. The specific intervals are defined in the RPAC and utilized by the ERPE in the event of a failed poll or operation call.

The ERPE may utilize feedback loops to generate and or receive network intelligence and alerts from OTA and DM systems to define Quality of Service QoS parameters. QoS parameters may enable the OTA and DM systems to modify the RPAC to control polling intervals software updates and content delivery schedules. Feedback loops may be used in normal or emergency network situations in which the number of devices attempting to connect to the OTA and DM systems was causing congestion on the network or server. In this case the DM systems may inform the device to download a new RPAC which may in turn tell the device to stop polling the OTA systems and give an alternate time at which it should try to connect again or give the DNS name of a backup DM system to poll. This may prevent a denial of service from occurring due to resource or network consumption.

Utilizing the ERPE of the SDMAUM the RPAC may additionally be modified to update the OTA and DM system e.g. over the air device management server on the computing device . For example a user that has permission to configure a particular OTA and DM service may alter change or update the OTA and DM system and configurations identified by the RPAC e.g. directly configure the polling intervals an OTA and DM system name or access method through the SDMAUM .

The ERPE may be configured to control the secure access policy for APIs client calls from other applications and secure communications with network entities. Using digital signatures and interacting with public key infrastructure mechanisms the ERPE may ensure that all calls to backend clients are from authorized applications. Authorized applications include applications for which a set of executable instructions has been signed with a valid digital signature and is compared with signatures contained within an approved application and network entity list stored by the RPAC . The RPAC may in addition store the digital public key signatures of approved network entities that have the rights to poll the SDMAUM for access to SDMAUM operations or the clients that intact with the SDMAUM . The ERPE may consult the RPAC signature and key store before performing actions on behalf of an application or network entity and use these keys for secure network communication as well as for ensuring that calls came from valid and authorized device or network entities.

Using this secure signing method front end applications may be made available to users enabling user directed wake ups of device clients and the SDMAUM operability such as in the case of self care heal applications or general troubleshooting scenarios. The application interacting with the SDMAUM may have a valid digital signature in the RPAC with a list of clients and operations it has access to. If because of device or network issues the client were unable to be woken by the DM systems through the SDMAUM then the users may be directed to a front end application that may then have the ability to either pull the diagnostic information from the phone directly or wake the client up locally through an API call to the DMCEL .

This same methodology may be employed by self care heal applications that may in turn either use the operations of the EHAE or an external analytics engine to identify potential device issues and define possible resolutions. By modifying the RPAC applications may wake certain device operations to feed the diagnostic information to these applications on a defined schedule via an events call from the DMCEL or by user interactions with a front end application.

The EHAE is configured to read the events provided and stored by the RPAC . The EHAE may analyze these events on an interval or constant basis to create an event baseline determine when abnormal conditions occur on the device and provide alerts to either backend clients or front end applications through the ERPE . The EHAE may utilize heuristic rules and policies provided to the RPAC by the ERPE to modify the behavior of the analytics engine providing for customization by device type make and model or changing network conditions e.g. the analytics engine may be according to whether the device is a smart phone or tablet computer . The EHAE by using rules downloaded by the ERPE and held in the RPAC may alert users or administrators to specific device issues. Further the downloaded rules may be heuristic rules specific to a device make and model and changed if there are updates to the baselines of those devices. This modification process may allow the EHAE to be adaptable to specific devices changing device conditions or network events and therefore offer more usable help and alerting capabilities.

The EHAE may also offer general troubleshooting information to a user through a front end application that may interact with the SDMAUM . That EHAE may further provide integration with virus and malware scanning applications. In this scenario device events dropping network connection high CPU may be coupled with heuristic information from anti virus software to alert a user to a device condition high CPU utilization and a potential cause for the issue malware or anti virus software downloaded to the device . This interaction may allow the virus software to interact either directly with the ERPE using secure code signing and digital certificates or through API calls to the DMCEL. A digital certificate is a set of executable instructions or an electronic document that utilizes a digital signature to verify a software license or licensed identity.

The DMTE may be configured to translate device commands from the DMCEL API e.g. calls from frontend components that are forwarded through DMCEL to commands that can be used by embedded agents e.g. a set of executable instructions that acts on behalf of another program 3rd party device management clients and or device management clients. This enables calls from user applications to utilize a standardized API so that regardless of the backend client the user application may communicate in the same consistent manner with the SDMAUM . In addition for backend communication the DMTE is configured to convert responses from embedded agents 3rd party clients or device management clients to either a unified API translated response to the user application layer or another communication standard to preserve legacy 3rd party DM system solutions or BYODM implementations. The DMTE may also be configured validate all calls with the ERPE .

For example when a DM request comes from the service provider s DM system the SDMAUM receives the request while knowing that there is no DM client on the device that supports the service provider s DM call translates the service provider s DM commands to the TR 069 standard and sends those commands to the TR 069 compliant client. In turn the return communication is then translated from TR 069 to Service Provider s DM communication protocol. This operability enables the SDMAUM to be scalable to changing device clients and standards. However if the service provider only supports DM operations on its network then it may have to add support for TR 069 in order to add those devices or develop a DM client for those devices. The DMTE removes these dependencies as DM control communications may be translated by the DMTE to continue to support the current and future architecture of the service provider network and infrastructure.

The KDLAE is configured to interact with the OS layer Kernel device drivers and libraries and extract information requested by the DMCEL API. The DMCEL API once the request is received may either work through the DMTE to translate the commands if necessary or may send the request to the ERPE which may in turn examine the RPAC to ensure that the calling entity is authorized to receive the specific data it requested. If so the ERPE may pass the request to the KDLAE which then interacts with the proper OS level components or kernel and retrieves the information.

The KDLAE may also be expanded to include support for chipset data extraction and logging by including any API calls for the chipset as a valid source and destination entity within the RPAC .

The DMCAE is configured to operate in a similar fashion to the KDLAE . The DMCAE interacts with the device management clients and in conjunction with the ERPE may be used to wake up any of the clients present in the RPAC that are approved for interaction. The DMCAE may also interact directly with the DM standard client and behave as a virtual server in the communication path. In this manner the standard client may send and receive commands to the DMCAE as if it were interacting with a DM system. This allows for the flexibility of utilizing the DM clients already present on the device or to expand support to include new standard based clients without having to modify the communication standards for these clients. These clients may interact with the DMCAE as if it were a DM or OTA systems on the network.

The DMCAE may also be configured to self wake the client component but then remove itself from the communication pathway. That is to continue support for standard clients while removing the need for the SMS wakeup method the DMCAE may be used to wake up the client when there is an SMS failure. After wake up the client may continue to communicate with the standard systems it was originally configured to use. This policy may be configured within the RPAC and instituted by the ERPE .

The DMCAE may also be configured to extend support for future standards and clients by creating a layer between the DMCEL and standard DM client. That is because the DMCAE acts as a virtual server the standard does not have to be modified and the DMCAE name becomes the DM server name for those clients. The operations and communications path can be modified via an update to the RPAC which may then change the interactions between the DMCAE and DM client through ERPE operations.

Thus the SDMAUM performs middleware operations and provides enhanced device management capabilities by utilizing the sub modules described above to abstract interactions between the backend device components the DM Apps and the unified DM UI . Additional operations and capabilities of the SDMAUM may include adapting to changing DM standards management clients OS APIs by maintain the consistent communication approach to interacting with components that have not been updated or changed e.g. via the APIs of the SDMAUM . The operations and capabilities of the SDMAUM may also include fortifying the system through granular control of computing devices by the SDMAUM via enhanced security mechanisms e.g. trusted modules signed APIs and trusted applications .

The SDMAUM may also be OTA programmable. That is the SDMAUM through the ERPE may be configured to offer support for specific DM protocols that keep the SDMAUM light weight while enabling support for multiple computing environments and communication protocols. In this way a subscriber could subscribe to TR 069 device support and Open Mobile Alliance Device Management network support in which the SDMAUM may be updated with the set of commands used by the DMTE to translate between these two protocols. Being programmable also may enable support of proprietary protocols by enabling customers to work with the SDMAUM provider and have proprietary protocol support and translation coded into the module via the DMTE .

The SDMAUM may further collect diagnostics from computing device APIs and DM clients communicate computing device information from backend device components to the DM Apps and the unified DM UI and supply the collected diagnostics to analytics engines e.g. the KDLAE and the DMCAE . The SDMAUM may also provide support management and granular control e.g. increased operability of mobile to mobile M2M devices bring your own device BYOD bring your own device management BYODM and dual persona initiatives. In turn the SDMAUM may simplify device requirements while streamlining and optimizing device management development testing and certification all of which decreases the time to production for new device management operations and OS changes updates.

In addition the middleware operations and enhanced device management capabilities of the SDMAUM may generate new business opportunities and initiatives such as software licensing and utilization tracking Software licensing is a contractual agreement granting a party an explicit right to the use or redistribution of a particular copy of software. Utilization tracking is a scheme that logs the operations and data used by a computing device.

For instance the SDMAUM may employ the ERPE to validate a computing device and the EHAE to log the activity. Then the SDMAUM may report the log to a server that outputs a bill or charge to the owner of the computing device . For example the SDMAUM architecture may permit licensing of the SDMAUM to third party vendors. Thus the third party vendor may take advantage of the security and control offered by the SDMAUM while the licensor charges for the software service accordingly.

Licensing of the SDMAUM may also include licensing of the individual modules and operation of the SDMAUM . For instance the RPAC may store a license key file that may include the licensed operations and services the SDMAUM . A license key file may allow granular control and licensing of SDMAUM . The key file may be downloaded and installed at device activation when provisioning occurs. Key lifetimes may also be used to control how long the SDMAUM is licensed for and handle deactivation if the keys expire. Keys may also control update and software assurance operability. Subscribers that subscribe to SDMAUM software assurance may automatically become eligible for updates of the SDMAUM itself which may be controlled by interactions with a DM server and the ERPE and license key file. Licensed subscribers may also be upgraded when enhanced versions of the SDMAUM became available.

In one example of licensing a third part server of a subscriber may interact with and control the operation of the SDMAUM based on the provisioned services within the license key file along with the RPAC . If the license key file is not present then the SDMAUM is not activated and therefore sits idle on the device without utilizing device resources. In this fashion the subscriber must update the license key file to access the operability provided by the SDMAUM . Thus when calls are made to the SDMAUM the service making the call may either be allowed or denied based on the license key file as governed by the ERPE .

Other business opportunities and initiatives may include licensing of SDMAUM SDK to enterprise applications allowing vendors and wholesalers to interact with the SDMAUM providing particular software development kit SDK licensing to original equipment manufacturers OEMs via development portal enabling licensing of SDMAUM Client to non branded OEMs and providing DM service and certification via the SDMAUM licensing. In addition the utilization tracking operations of the SDMAUM may permit the monetization of OTA the data service associated with OTA and or FOTA operations.

Servers as noted above are computing devices that include a processor and a memory e.g. and respectively . In the case of server is an over the air device management OTA DM server and server is a third party client server .

The OTA DM server may be service provider computing device that manages the software updates and device configuration for computing device via over the air programming. Over the air programming OTA generally includes distributing new software updates configuration settings and updating encryption keys to computing devices e.g. OTA utilizes wireless mechanisms to send provisioning data or update packages for firmware or software updates to computing devices . OTA provides a central location for pushing an update to all the computing devices on a network that applies immediately. The computing devices are generally unable to refuse defeat or alter that update. For example OTA operations may be provided to computing devices via the 228 service code standard which enables device configurations and preferred roaming lists to be updated. OTA may also permit the management of computing device operability including renumbering handsets updating applications and updating subscriber data.

The third party client server may be a third party computing device that manages the software updates and device configuration particular to the proprietary software of the third party. In general third party software must be updated in accordance with OS and DM upgrades however because of the middleware abstraction by the SDMAUM frontend third party applications may remain unmodified.

In addition servers may be any computing device acting as databases data repositories or other data stores that includes any type of data source and or file system that operates to support the SDMAUM . For instance data sources may include DM client updates along with licenses e.g. license the permit control and access to the device by third parties platforms relating to a DM access and configurations and or device operability.

In general databases data repositories or other data stores e.g. servers described herein may include various kinds of mechanisms for storing providing accessing and retrieving various kinds of data including a hierarchical database a set of files in a file system an application database in a proprietary format a relational database management system RDBMS etc. Each such data store may generally be included within or external to a computing system and or device e.g. servers employing a computer operating system such as one of those mentioned above and or accessed via a network or connection in any one or more of a variety of manners. A file system may be accessible from a computer operating system and may include files stored in various formats. An RDBMS generally employs the Structured Query Language SQL in addition to a language for creating storing editing and executing stored procedures such as the PL SQL language mentioned above.

Further in some examples the elements of computing device and servers may be implemented as computer readable instructions e.g. software on one or more computing devices e.g. servers personal computers etc. stored on computer readable media associated therewith e.g. disks memories etc. . A computer program product may comprise such instructions stored on computer readable media for carrying out the operations described herein.

A network may provide the infrastructure through which the computing device and servers communicate. In general a network e.g. network may be a collection of computers and other hardware to provide infrastructure to establish virtual connections and carry communications. For instance a network may be an infrastructure that generally includes edge distribution and core devices and provides a path for the exchange of information between different devices and systems e.g. between the computer devices and servers . Further a network may be any conventional networking technology and may in general be any packet network e.g. any of a cellular network global area network wireless local area networks wide area networks local area networks or combinations thereof but may not be limited thereto that provides the protocol infrastructure to carry communications. The network is representative and thus while a single cloud illustrates the network this illustration may represent a single network a combination of different networks components and technologies and or a plurality of networks as described above.

Connections may be wired or wireless connections between two endpoints devices or systems that carry electrical signals that facilitate virtual connections. Examples of connections may be any transmission media including coaxial cables copper wire fiber optics and the like. Virtual connections are comprised of the protocol infrastructure that enables communication to and from computing device and servers . For instance connections may be the wireless connections between computer device and towers connections may be the wired connections between towers and gateway equipment and connections may be the wired connection between the gateway equipment and servers . Further the combination of connections provide the virtual connection between computing device and servers .

The exemplary communication system and components e.g. the SDMAUM and sub modules thereof will now be described with reference to the exemplary process flow of .

In general illustrate an exemplary process flow executed by SDMAUM . Note that the SDMAUM is a piece of the entire SDMAUM architecture that spans the entirety of the system and controls the configuration settings for a plurality of computing devices in the network . Thus when the exemplary process flow is executed across the system operability and security of the system and network are optimized while cost and downtime minimized. In turn similar to how the SDMAUM provides adaptable secure and scalable device management options for a singular computing device the installation of the SDMAUM on multiple computing devices creates an SDMAUM architecture that provides adaptable secure and scalable device management options for the system . For instance an SDMAUM architecture provides system wide scalability by enabling updating controlling and securing multiple and or various computing devices with standard and or customized set of executable instructions. In turn when any backend or frontend component is updated the SDMAUM architecture permits a single modular update to each SDMAUM on each computing device of the system rather than a full system overhaul.

The exemplary process flow begins when the OTA DM Server generates a software update bound for a plurality of computing devices on a network . At this time computing devices with inactive SDMAUMs may be activated by the OTA DM server via a communication across the network to the respective DMCELs which are in a listening state as described above. Once activated the SDMAUM via the ERPE downloads from OTA DM Server the RPAC which includes OTA polling intervals and the timing heuristic . The timing heuristic sets the randomized clock which informs the SDMAUM poll the OTA DM Server for updates to the RPAC computing devices that already have active SDMAUMs also already have their randomized clock set .

Next the SDMAUM of each computing device checks whether the randomization clock has counted to the interval designated by the RPAC . For instance if the randomized clock is a decrementing counter with an interval set to the equivalent of 168 hours e.g. one week then when the SDMAUM may proceed to poll the OTA DM Server when the clock reaches zero e.g. after a week has passed . For each computing device in which the clock is currently decrementing then computing device waits the interval is complete before polling the OTA DM Server .

When each respective interval designated by each respective RPAC is complete each computing device via the ERPE of the SDMAUM polls for software updates from OTA DM Server . The ERPE then downloads software updates and configurations changes if available while utilizing the RPAC to validate the software updates and configurations changes. In addition in the event of a failed poll or operation call to the OTA DM Server the ERPE may utilize the retry mechanism as defined in the RPAC .

If validated e.g. the policies defined by the RPAC approved the updates and changes the SDMAUM communicates with the modules of the computing device such as the backend device components to implement or install the software updates and configurations changes.

Next the KDLAE performs abstraction operations based on updates and changes implemented by the SDMAUM to extract information from OS layer Kernel device drivers and libraries as requested by the DMCEL API.

In turn the DMCAE of the SDMAUM abstracts commands between the DMCEL API to commands that can be used by embedded agents third party clients and or device management clients e.g. DM Apps and Unified DM UI .

With the SDMAUM abstracting commands and acting as middle ware between frontend and backend device component computing devices may now poll the third party client server and install software updates for third party clients within the DM Apps without the need to convert alter third party clients in accordance with recent software updates from server .

While one exemplary process flow is shown in the this flow is not intended to be limiting. Indeed additional or alternative flows and or implementations may be used. For example the exemplary process flow may be split into two flows. A first flow may include when an application or OTA DM Server may interact with the SDMAUM via the DMCEL to request diagnostic or configuration information from the SDMAUM . Based on the information being requested and if the application or network entity had rights as approved by the ERPE and RPAC a second flow may include when the KDLAE or DM client queries for the information that may be supplied back to SDMAUM for processing DMTE or security check ERPE and then forwards the information back to the requester. The second flow may also be used for interactions that involve configuration updates or device level changes. Implementing exemplary process flow in separate flows thus illustrates that interactions in the system are not required to be initiated by network systems or software update processes e.g. the SDMAUM provides flexibility based on customer needs .

In addition to the above described exemplary process flow the SDMAUM architecture may implement other features thus further extending the operability of computing devices . Examples of other features include Machine to Machine M2M applications BYOD Dual Persona applications and connected home applications.

M2M application may be a thin version of the SDMAUM that is licensed to third party partners and or vendors. This may allow third party partners and or vendors to control the SDMAUM during device module sensor activation. During activation the ERPE may modify access control lists ACLs by device type e.g. E health sensor life critical home temperature monitor non critical etc. which in turn may offer granular policy and security controls for how the computing device is managed. Further the thin version of the SDMAUM may be offered as a service to users who may have their devices provisioned and managed by type. This may enable flexible billing scenarios for particular M2M device services to be billed by the device type and guaranteed QoS levels. The OTA installation and activation of SDMAUM features also supports wholesale M2M device providers that need OTA operability. That is instead of certifying the device for use with a particular service provider s OTA and or DM requirements the vendor may purchase licenses for the SDMAUM . When the computing device activates the SDMAUM may be downloaded and installed as part of a software update which may immediately make the device compliant with the service provider s OTA and or DM requirements.

Regarding BYOD Dual Persona applications because the SDMAUM utilizing the ERPE can install and update ACLs is generally based on the user that logs into the computing device the SDMAUM may be configured to permit BYOD Dual Persona scenarios where two ACLs may be installed on the computing device . For instance one ACL may be an Enterprise or Corporate persona and another ACL be a personal persona. Thus the Enterprise Administrator may control operations relating to Enterprise operability while blacklist operations may be deemed personal and private to ensure the user s privacy. This also helps to limit privacy liability for corporations looking to control access to the corporate network while allowing employees the flexibility of utilizing their own devices because the enterprise administrators may not have access to data and or operations deemed private and personal yet allow them to control corporate policies on the device.

In addition the SDMAUM using the ERPE and RPAC can white list certain OTA and DM operations so that the service provider regardless of Enterprise Policy may have access to those enabled operations. These operations may include but are not limited to firmware updates diagnostics polling device OS updates. This may offer the flexibility to continue to control those operations which may endanger the service provider s network or result in user dissatisfaction or technical issues as in the case of an enterprise policy blocking a device software update that prevents a user from receiving a critical update that then results in increased network traffic or poor device performance which ultimately leads to user dissatisfaction. Another use case may be the white listing of diagnostic operations so that the user may continue to utilize any self care heal applications or allow user service representatives access to these diagnostics if the user calls the service provider for device issues instead of the Enterprise Administrator.

Regarding connected home applications a service provider may support computing devices through the DMTE operability of the SDMAUM that have non standard or unsupported DM clients.

With regard to the processes systems methods heuristics etc. described herein it should be understood that although the steps of such processes etc. have been described as occurring according to a certain ordered sequence such processes could be practiced with the described steps performed in an order other than the order described herein. It further should be understood that certain steps could be performed simultaneously that other steps could be added or that certain steps described herein could be omitted. In other words the descriptions of processes herein are provided for the purpose of illustrating certain embodiments and should in no way be construed so as to limit the claims.

Accordingly it is to be understood that the above description is intended to be illustrative and not restrictive. Many embodiments and applications other than the examples provided would be apparent upon reading the above description. The scope should be determined not with reference to the above description or Abstract below but should instead be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled. It is anticipated and intended that future developments will occur in the technologies discussed herein and that the disclosed systems and methods will be incorporated into such future embodiments. In sum it should be understood that the application is capable of modification and variation.

All terms used in the claims are intended to be given their broadest reasonable constructions and their ordinary meanings as understood by those knowledgeable in the technologies described herein unless an explicit indication to the contrary in made herein. In particular use of the singular articles such as a the said etc. should be read to recite one or more of the indicated elements unless a claim recites an explicit limitation to the contrary.

