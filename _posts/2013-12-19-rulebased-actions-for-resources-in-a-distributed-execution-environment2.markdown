---

title: Rule-based actions for resources in a distributed execution environment
abstract: A distributed execution environment provides resources such as computing resources, hardware resources, and software resources. Resource action rules (“rules”) may be defined and associated with resources in the distributed execution environment. The rules may be evaluated based upon resource state data defining the state of one or more resources. The results of the evaluation of the rules may be utilized to take various actions. For example, the results of the evaluation of rules may be utilized to generate a user interface (UI) object for providing information regarding the evaluation of the rule, to initiate a workflow, and/or perform another type of action. The results might also be utilized to prohibit certain types of operations from being performed with regard to a resource. The results might be propagated to other resources. A UI might also be provided for use in defining the rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09647896&OS=09647896&RS=09647896
owner: Amazon Technologies, Inc.
number: 09647896
owner_city: Seattle
owner_country: US
publication_date: 20131219
---
Network based services exist that allow customers to purchase and utilize virtual machine instances on a permanent or as needed basis. In addition to virtual machine instances these services typically allow customers to purchase and utilize other types of computing resources. For example customers might be permitted to purchase and utilize data storage resources database resources networking resources and other types of computing resources which may be referred to herein as resources .

Managing network based services such as those described above can be extremely complex. At least some of this complexity is attributable to the large number of computing resources that typically exist in such a service at any given time. For example some network based services might utilize dozens of geographically dispersed data centers hundreds of thousands or even millions of server computers and virtual machine instances along with large numbers of networking components software programs and other types of resources. When large numbers of resources such as these are utilized by a network service in this way it can be very difficult to obtain information regarding the operational status of a particular resource. Moreover it may be difficult to determine when the current operational status of one resource may affect the operation of other resources.

The following detailed description is directed to technologies for performing actions based upon the evaluation of rules associated with resources in a distributed execution environment. Utilizing the concepts and technologies described herein various types of actions can be performed based upon the evaluation of resource action rules which may be referred to herein as resource rules or rules that are associated with resources in a distributed execution environment. For example a UI might be provided that includes a UI object configured to present information regarding the current operational status of a resource. The results of the evaluation of the resource action rules for a resource might also be propagated to other related resources. In this way information regarding the operational status of a resource might also be presented with regard to other related resources. Other types of actions might also be performed based upon the results of the evaluation of rules associated with resources in a distributed execution environment.

According to one aspect presented herein a computer implemented mechanism is disclosed for performing actions based upon the evaluation of rules associated with resources in a distributed execution environment. In one implementation the mechanism disclosed herein operates in conjunction with a network based distributed execution environment in which customers can purchase configure and utilize computing resources such as virtual machine instances data storage resources networking resources and database resources on a permanent or as needed basis.

The distributed execution environment may offer computing resources for purchase and use in various configurations. For example the distributed execution environment might offer virtual machine instances available for purchase and use that have many different configurations of processor capabilities main memory disk storage and operating system. A customer of the distributed execution environment might create configure and deploy various combinations of computing resources provided by a distributed execution environment to create solutions that provide various types of functionality such as application hosting backup and storage content delivery Web hosting enterprise IT solutions database services and others.

The distributed execution environment might also include various types of computing resources such as those described above hardware resources such as data centers rooms of server computers in data centers racks of server computers individual server computers software resources resources describing customers and other users of the distributed execution environment and other types of resources. As will be described in greater detail below the technologies disclosed herein can be utilized to assist with the management of the operation of these and potentially other types of resources.

A resource monitoring component executing within or in conjunction with the distributed execution environment might be configured to collect data regarding the state of computing resources in the distributed execution environment. For example the resource monitoring component might collect resource state data that describes the operational state of data centers racks of server computers server computers networking devices software components and or instances of virtual machines and other types of resources in the distributed execution environment. The resource monitoring component might also make the collected resource state data available for consumption and use by other components.

In one implementation a resource state viewing tool executes within or in conjunction with the distributed execution environment and provides a resource management UI through which users can view the resource state data collected by the resource monitoring component. For example an administrator or customer of the distributed execution environment might utilize a user computing system like a desktop or laptop computer a smartphone or a tablet computing device to request and view the resource management UI for a particular resource. In order to provide this functionality the resource management UI might be provided by way of a Web page a client server application a mobile application or in another manner. The resource management UI may allow a user to quickly view information about resources in the distributed execution environment at various levels of granularity.

In one implementation resource action rules might also be defined and utilized to perform various actions with regard to resources in the distributed execution environment. In order to provide this functionality a UI or another type of interface may be provided through which resource action rules can be defined. Resource action rules are rules that define one or more actions to be taken if certain conditions occur with respect to the operational state of a resource or resources in a distributed execution environment. For example and without limitation resource action rules may define one or more actions that are to be taken when the resource state data for a resource collected by the resource monitoring component described above meets certain pre defined conditions. Various types of logical arithmetic and other types of operators might be utilized to define the resource action rules.

Certain types of events may trigger the evaluation of resource action rules for a resource in the distributed execution environment. For example and without limitation a request may be received to view the resource management UI described above for a particular resource in the distributed execution environment. In response to receiving such a request one or more resource action rules may be identified that are associated with the resource. For example if the resource is a virtual machine instance a determination may be made as to whether any resource action rules have been created and stored that apply to virtual machine instances and or to the particular virtual machine instance. In this regard it should be appreciated that resource action rules may be defined on a per resource basis based upon resource type or on another basis.

If one or more resource action rules have been defined that apply to the resource resource state data for the resource may be obtained. As discussed above the resource state data defines aspects of the operational state of a resource in the distributed execution environment. The resource state data may be obtained for example from the resource monitoring component described above. The resource state data might be obtained from other sources in other implementations.

Once the resource state data has been obtained for the resource the resource action rule or rules associated with the resource is evaluated using the obtained resource state data. One or more actions may then be taken with regard to the resource based upon the results of the evaluation of the resource action rule or rules. For example and without limitation a UI object which may be referred to herein as a badge may be generated for presentation in the resource management UI for the resource that contains content based at least in part upon the results of the evaluation of the resource action rule or rules associated with the resource. As a specific example a rule might specify that a UI object should be presented in the resource management UI for the resource indicating that a server computer should not be touched e.g. shut down or restarted if the server computer is currently executing one or more virtual machine instances that are owned by external customers of the distributed execution environment. In this example a UI object might be presented in the resource management UI indicating that the resource should not be touched if the specified conditions are satisfied. If the conditions specified by the rule are not satisfied a UI object might also be displayed indicating that the server computer is safe to touch. The UI object might also include UI controls which when selected will cause various types of actions to be performed with regard to the resource. The UI controls that are shown with the UI object might be defined by the associated resource action rule or rules.

It should be appreciated that other types of stimuli might also cause the resource action rules for a resource to be evaluated and other types of actions might also be taken based upon the results of the evaluation of the resource action rules. For example and without limitation operations may be prohibited e.g. shutting down or rebooting a server computer based upon the results of the evaluation of resource action rules associated with a resource. Operations might also be performed e.g. initiating a workflow based upon the results of the evaluation of resource action rules associated with a resource. An indication of the results of the evaluation of resource action rules might also be provided by way of a hardware device associated with a resource. For example and without limitation a light might be illuminated on a hardware device based upon the results of the evaluation of the resource action rules.

The results of the evaluation of resource action rules for a resource might also be propagated to other related resources. For example and without limitation the results of resource action rules for a virtual machine instance might be propagated up to the server computer upon which the virtual machine instance is executing. Similarly the results of the evaluation of resource action rules for a server computer may be propagated up to a server rack containing the server computer. By propagating the results of the evaluation of resource action rules the results can be utilized with other related resources.

For example and without limitation a resource action rule may indicate that a server computer is executing external customer virtual machine instances and should therefore not be touched e.g. rebooted or shut down . In this case a UI object may be presented in the resource management UI for the server computer indicating that the server computer should not be touched. By propagating the results of the evaluation of this resource action rule to a server rack that contains the server computer a similar indication might also be provided by way of a UI object in the resource management UI for the server rack indicating that the server rack contains server computers executing virtual machine instances owned by external customers and that the rack should therefore not be modified e.g. powered down . Other types of indications and actions might be performed utilizing results of the evaluation of resource action rules that have been propagated from one resource in a distributed execution environment to another resource. Additional details regarding the various components and processes described above for performing actions based upon the evaluation of rules associated with resources in a distributed execution environment will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may be practiced in distributed execution environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed execution environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

In addition to the virtual machine instances A the distributed execution environment might also utilize and or provide many other types of computing resources. For example and without limitation the distributed execution environment might also include hardware resources B such as data centers that include rooms with racks of server computers software resources C and other resources D such as networking resources power resources resources describing customers and other users of the distributed execution environment and other types of resources. The distributed execution environment might also include other types of computing resources not shown in or identified explicitly above. As will be described in greater detail below the technologies disclosed herein can be utilized to perform various types of actions with respect to these and potentially other types of computing resources in the distributed execution environment .

The operator of the distributed execution environment may charge a fee for operating the virtual machine instances A to the customer that creates the virtual machine instances A. Various different pricing models might be utilized to charge a customer for use of the virtual machine instances A within the distributed execution environment . The operator of the distributed execution environment might also charge a fee for the creation and or use of other types of computing resources within the distributed execution environment .

In some implementations a resource monitoring component executes within or in conjunction with the distributed execution environment and collects data referred to herein as resource state data regarding the state of the resources in the distributed execution environment . For example the resource monitoring component might collect resource state data that describes the operational state of hardware resources B in the distributed execution environment such as data centers in the distributed execution environment rooms of server computers in each data center racks of server computers in each room individual server computers in each rack of server computer cooling components power components and networking components in the distributed execution environment . The resource monitoring component might similarly collect resource state data that describes the operational state of software resources C and virtual machine instances A. The resource monitoring component might also collect resource state data regarding the configuration status and operation of other types of resources in the distributed execution environment .

In some implementations the resource monitoring component also makes the collected resource state data available for consumption and use by other components. For example in some embodiments the resource monitoring component is configured to expose an application programming interface API or another mechanism through which other systems or components can request and receive the resource state data collected for a particular computing resource. It should be appreciated that while the resource state data is discussed herein primarily in the context of data describing the operational state of a computing resource the resource state data might include other information about a computing resource such as information describing the configuration of the computing resource and other aspects of a computing resource. In this way the resource monitoring component can be utilized to obtain virtually any type of information about a resource in the distributed execution environment .

In some embodiments a resource state viewing tool executes within or in conjunction with the distributed execution environment and provides a UI through which users can view the data collected by the resource monitoring component . For example in one implementation the resource state viewing tool is configured to provide a resource management UI . The resource management UI provides a UI for viewing and interacting with data collected regarding the computing resources in the distributed execution environment . In one implementation a user of a user computing device such as a smartphone A a desktop or laptop computer B or a tablet computing device C might utilize an appropriate client application not shown in to request view and interact with the resource management UI . In order to provide this functionality the resource management UI might be provided by way of a Web page a client server application a mobile application or in another manner.

The resource management UI may be configured in order to allow a user to quickly view information about computing resources in the distributed execution environment at various levels of granularity. For example in one particular implementation the resource management UI allows a user to view information about resources in the distributed execution environment such as information about the operational state of the resources at levels of granularity varying from a worldwide level down to a level showing a particular virtual machine instance or other software component executing on a particular server computer. The user can utilize functionality provided by the resource management UI to quickly and easily navigate between levels and view aggregated information about resources in the distributed execution environment at each level. One particular resource management UI is described in U.S. patent application Ser. No. 13 733 604 entitled Managing Resources in a Distributed Execution Environment which was filed on Jan. 3 2013 and which is expressly incorporated by reference herein in its entirety. The embodiments disclosed herein might also be utilized with other types of user interfaces.

In order to generate the resource management UI for a particular resource the resource state viewing tool may request the resource state data for the resource from the resource monitoring component . In particular in one embodiment the resource state viewing tool transmits a request for the resource state data for a resource to the resource monitoring component that includes a resource identifier ID . The resource ID uniquely identifies the resource for which resource state data is requested. The request may be provided to an API for example exposed by the resource monitoring component . The resource monitoring component utilizes the provided resource ID to locate the resource state data for the resource and returns the resource state data in response to the request. The resource state viewing tool may then utilize the resource state data to create the resource management UI for the resource.

It should be appreciated that the resource management UI might be configured for use by users employed by the owner or operator of the distributed execution environment such as technical administrative employees. In this case the resource management UI might be configured to allow the users to view operational information about all of the computing resources in the distributed execution environment . These users might also be limited to viewing data for certain resources based upon a security or clearance level or some other mechanism. In other embodiments however the users might be customers of the distributed execution environment or employees of the customers. In this case the resource management UI might limit the users to viewing data only for resources in the distributed execution environment that have been purchased by or that are in use by the customer. In this way customers may be restricted to using the resource management UI to obtain management information for their own resources . The resource management UI might also restrict the provision of data to users of the distributed execution environment in other ways.

As described briefly above resource action rules might also be defined in some embodiments and utilized to perform various actions with regard to resources in the distributed execution environment . In order to enable this functionality a rule definition component is provided in one embodiment. The rule definition component provides a UI for defining and storing the resource action rules . As discussed briefly above the resource action rules are rules that define one or more actions to be taken if certain conditions occur with respect to the operational state of a resource or resources in the distributed execution environment . For example and without limitation resource action rules may define one or more actions that are to be taken when the resource state data for a resource collected by the resource monitoring component described above meets certain pre defined conditions. As mentioned above various types of logical arithmetic and other types of operators might be utilized to define the resource action rules . The rules might also specify which resources or types of resources they apply to and or other types of information. Although the rule definition component is shown in as a standalone component the functionality provided by the rule definition component might be provided by another component in other implementations. Various aspects regarding the operation of the rule definition component in one implementation will be provided below with regard to .

In some implementations a resource action rule processing component the rule processing component is configured to evaluate the resource action rules and to cause actions defined by the rules to be performed based upon the results of the evaluation. Certain types of events may trigger the rule processing component to evaluate the resource action rules for a resource in the distributed execution environment . For example and without limitation the resource state viewing tool may receive a request to view the resource management UI for a particular resource in the distributed execution environment such as a virtual machine instance A. In response thereto the resource state viewing tool may retrieve the resource state data in the manner described above. The resource state viewing tool might also initiate the evaluation of any resource action rules associated with the resource. For example the resource state viewing tool may transmit a request to the rule processing component that includes the resource ID for a particular resource.

In response to receiving a request from the resource state viewing tool the rule processing component is configured to identify the resource action rules if any that are associated with the identified resource. For example if the identified resource is a virtual machine instance A the rule processing component may determine whether any resource action rules have been previously created and stored that apply to virtual machine instances A and or to the particular virtual machine instance identified by the specified resource ID . As mentioned above the resource action rules may be defined on a per resource basis based upon resource type or on another basis. Various algorithms such as the Rete algorithm may be utilized to select and execute the resource action rules and to manage the propagation of events and state changes to other rules and resources in the manner described below. Other types of algorithms might also be utilized.

If the rule processing component determines that one or more resource action rules have been previously defined that apply to the identified resource the rule processing component may obtain the resource state data for the identified resource from the resource monitoring component . For example and without limitation the rule processing component may transmit a request to the resource monitoring component that includes the resource ID for the resource for which the resource state data is requested. The resource monitoring component will respond to the request with the resource state data for the identified resource. As discussed above the resource state data defines aspects of the operational state of the resource in the distributed execution environment . The resource state data might be obtained from other sources in other implementations.

Once the rule processing component has obtained the resource state data for the identified resource the rule processing component evaluates the resource action rule or rules associated with the identified resource using the resource state data for the resource. The rule processing component may then cause one or more actions to be taken with regard to the identified resource based upon the results of the evaluation of the resource action rule or rules . For example and without limitation the rule processing component may return the results of the evaluation of the resource action rules to the resource state viewing tool for use in creating the resource management UI for the identified resource. For example and without limitation the resource state viewing tool may use the results to generate a UI object which may be referred to herein as a badge for presentation in the resource management UI for the resource.

The UI object may be a graphical or textual UI object that contains content based at least in part upon the results of the evaluation of the resource action rule or rules associated with the identified resource. As a specific example a rule might specify that a UI object should be presented in the resource management UI for the resource indicating that a server computer should not be touched e.g. shut down or restarted if the server computer is currently executing one or more virtual machine instances A that are owned by external customers of the distributed execution environment . In this example a UI object might be generated for presentation in the resource management UI indicating that the resource should not be touched. The UI object might also include UI controls which when selected will cause various types of actions to be performed with regard to the identified resource. Details regarding one illustrative UI object generated and presented in one particular implementation will be provided below with regard to .

It should be appreciated that other types of stimuli might also cause the rule processing component to evaluate the resource action rules for a resource. In some implementations the rule processing component is configured to periodically evaluate the resource action rules and to store the results for use in responding to requests such as from the resource state viewing tool . Additionally other types of actions might also be taken based upon the results of the evaluation of the resource action rules . For example and without limitation operations may be prohibited e.g. shutting down or rebooting a server computer based upon the results of the evaluation of resource action rules associated with a resource. Operations might also be performed such as initiating a workflow based upon the results of the evaluation of resource action rules associated with a resource. An indication of the results of the evaluation of resource action rules might also be provided by way of a hardware device associated with a resource. For example and without limitation a light might be illuminated on a hardware device based upon the results of the evaluation of the resource action rules for a resource.

The rule processing component might also propagate the results of the evaluation of resource action rules for a resource to other related resources. For example and without limitation the results of the evaluation of resource action rules for a virtual machine instance A might be propagated up to the server computer upon which the virtual machine instance A is executing. Similarly the results of the evaluation of resource action rules for a server computer may be propagated up to a server rack containing the server computer. By propagating the results of the evaluation of resource action rules the results can be utilized with other related resources.

For example and without limitation a resource action rule may indicate that a server computer is executing external customer virtual machine instances A and should therefore not be touched e.g. rebooted or shut down . In this case a UI object may be presented in the resource management UI for the server computer indicating that the server computer should not be touched. By propagating the results of the evaluation of this resource action rule to a server rack that contains the server computer a similar indication might also be provided by way of a UI object in the resource management UI for the server rack indicating that the server rack contains server computers executing virtual machine instances A owned by external customers and that the rack should therefore not be modified e.g. powered down . Other types of indications and actions might be performed utilizing the results of the evaluation of resource action rules that have been propagated from one resource in the distributed execution environment to another resource.

In some embodiments the rule processing component utilizes a resource relationship graph to propagate the results of the evaluation of resource action rules from one resource to one or more other resources. The resource relationship graph defines relationships between related resources in the distributed execution environment . For example and without limitation the resource relationship graph might indicate that a virtual machine instance A is executing on a particular server computer that the server computer is in a particular rack of server computers that the rack of server computers is in a particular room that the room is in a particular data center and that the data center is in a particular region. This information may then be used to propagate results from one resource to another resource. For example results of the evaluation of resource action rules for a virtual machine instance A might be propagated to the server computer upon which the virtual machine instance A is executing. Similarly results of the evaluation of resource action rules for a server computer in the distributed execution environment might be propagated to the rack containing the server computer. Other mechanisms might also be utilized to determine which if any other resources the results of the evaluation of the resource action rules should be propagated. For example and without limitation the resource action rules might define how propagation of the results is to occur. Additional details regarding the various components and processes described above for performing actions based upon the evaluation of rules associated with resources in a distributed execution environment will be presented below with regard to .

In the embodiment shown in the resource state viewing tool is configured to consume the results of the evaluation of the resource action rules . It should be appreciated however that other devices systems services and components might also consume the results of the evaluation of the resource action rules in order to perform various types of actions or to prevent certain types of actions from being taken with respect to a resource. For example and without limitation a capacity management system operating in conjunction with the distributed execution environment might take a server computer out of service based upon results of the evaluation of resource action rules .

It should be appreciated that the implementation shown in is merely illustrative and that other components operating within or outside the distributed execution environment might be utilized to provide the functionality disclosed herein. For example many more computers networking devices networks software components and other devices than those shown in might be utilized in order to provide the functionality described herein. Moreover these devices might be arranged configured and interconnected in other ways than shown in to achieve the technical result disclosed herein. The embodiments presented herein should not be limited to the particular arrangement shown in or the other FIGS. In this regard it should be appreciated that the UI components shown in are merely illustrative and that other types of UI controls and components arranged in other ways might also be utilized. Details regarding the configuration and operation of the distributed execution environment will be provided below with regard to .

The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the FIGS. and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where a component such as the rule definition component or another component provides a UI for defining the resource action rules . One illustrative UI for defining the resource action rules will be described below with regard to . Other types of UIs might also be provided in other embodiments.

Once a resource action rule has been defined through a UI such as that shown in and described below the routine may proceed from operation to operation . At operation the defined resource action rule is stored in an appropriate data store such as a database. Other types of data stores might also be utilized to store the resource action rules .

From operation the routine proceeds to operation where other types of interfaces might also be provided for defining and or receiving resource action rules . For example and without limitation the rule processing component or another component might define an API or another type of interface through which resource action rules might be submitted. The resource action rules might be defined utilizing the extensible markup language XML another type of declarative language or in another manner altogether. In one specific implementation a domain specific language is utilized to define the resource action rules . Interfaces other than APIs might also be exposed for defining and or receiving previously defined resource action rules .

From operation the routine proceeds to operation where the resource action rules defined and or received at operation may be stored in an appropriate data store. The routine then proceeds from operation to operation where it ends.

The UI controls D G are utilized to define the action or actions that are taken when the conditions specified by the UI controls A C have been met. For example the UI controls D and E are utilized in this example to specify that a UI object should be displayed in the resource management UI for a resource indicating Do Not Touch if the specified conditions have been met i.e. a host computer is executing an instance owned by an external customer . In this way the UI object can be defined so that it includes data relating to the results of the evaluation of a resource action rule . The UI might allow the user to specify the particular content to be presented in the UI object if the specified conditions are met.

The UI controls F and G are utilized in the example shown in to specify that certain types of actions should also be prohibited in response to the specified conditions being met. In particular in the illustrated example rebooting of the server computer is prohibited if the server is executing virtual machine instances A that are owned by external customers. The user might also be able to specify exceptions to the actions. For example the user might be able to specify that only certain individuals or a group of individuals may reboot a server computer if the specified conditions are met. It should be appreciated that similar UI controls might be utilized to specify that other types of operations are prohibited and or to specify actions that are to be taken in response to the identified conditions being met.

In the example UI shown in a UI control H is also provided through which a user can specify that results of the evaluation of the defined rule are to be propagated to other resources in the distributed execution environment . The results of the evaluation of the rule being defined in for example might be propagated to a related resource such as a rack containing a server computer that satisfies the conditions specified in the rule .

Once a user has completed defining a new rule using the UI shown in the user may select the UI control I using an appropriate user input mechanism such as the mouse cursor shown in in order to save the rule . The user might alternately select the UI control J in order to cancel any input made to the UI . Any modifications made to the UI will not be saved if the UI control J is selected.

It should be appreciated that more or fewer UI controls than shown in might be utilized in order to define other types of rules having other types of conditions and actions in other implementations. For example a user may be permitted to add or remove UI controls in order to define a resource action rule having desired conditions and actions. The user might also be permitted to specify various logical and arithmetic operators utilized in the rule . In this regard it should be appreciated that the UI shown in is merely illustrative and that other types of UIs might be utilized to define the resource action rules .

In response to receiving a request to evaluate resource action rules the routine proceeds from operation to operation . At operation the rule processing component determines if any resource action rules have been defined that apply to the specified resource. If no resource action rules have been defined that apply to the specified resource the routine proceeds from operation to operation where it ends. If any resource action rules apply to the specified resource the routine proceeds from operation to operation .

At operation the rule processing component obtains the resource state data for the specified resource. As mentioned above for example the rule processing component might obtain the resource state data from the resource monitoring component or from another source. Once the rule processing component has obtained the resource state data for the specified resource the routine proceeds from operation to operation .

At operation the rule processing component utilizes the obtained resource state data to evaluate the conditions specified by the resource action rules that apply to the specified resource. The routine then proceeds from operation to operation where the rule processing component causes the one or more actions defined by the rules that apply to the specified resource to be performed. For example and without limitation a UI object may be created and presented that includes information relating to the results of the evaluation of the rule other types of operations might be performed operations might be prohibited and other types of indications might be provided. The results of the evaluation of the rules might also be stored for use in responding to future requests to evaluate the rules associated with a resource.

From operation the routine proceeds to operation where the rule processing component may propagate the results of the evaluation performed at operation to other resources in the distributed execution environment . As mentioned above the rule processing component may utilize the resource relationship graph to identify the resources to which the results are to be propagated. The rules might also specify the manner in which results are to be propagated. From operation the routine proceeds to operation where it ends.

In the example resource management UI A shown in graphical representations A C corresponding to virtual machine instances or other software components executing on the corresponding server are also presented. Various types of overlays might also be applied to the graphical representations A C to show information about these resources. A user might also be permitted to select one of the graphical representations A C in order to obtain more information about the instance or other software component.

The graphical representations A C might also be filtered in various ways in various embodiments. For example and without limitation the resource state viewing tool or one or more other components might interface with an identity and access management system not shown . A set of permissions might be obtained from the identity and access management system for a user requesting the resource management UI . The set of permissions for the user may be utilized to filter the graphical representations A C and UI objects described in detail below that are presented to the user in the resource management UI . Other mechanisms might also be utilized to filter the objects that are presented to a particular user based upon permissions associated with the user.

It should be appreciated that user permissions such as those described above might also be utilized in some embodiments when evaluating the resource action rules . For example and without limitation the resource action rule processing component might utilize permissions associated with a user that created a resource action rule to determine whether the user has sufficient permissions to perform the action or actions specified by the resource action rules . For example and without limitation certain users might not have sufficient rights to cause a UI object to be presented in association with a resource to prohibit actions from being taken with respect to the resource and or to cause other types of actions to be taken with regard to a resource. The resource action rule processing component may utilize the permissions associated with a user in order to perform only those actions that the user has sufficient rights to perform.

It should also be appreciated that the resource action rules might have a corresponding access control policy. For example a rule indicating that a UI object should be provided indicating Do Not Touch when certain conditions are met might have an associated access control policy also indicating that users with privileges lower than a certain level are not permitted to take certain actions with regard to the resource. If the specified conditions are met and a user attempts to take an action with respect to the resource the results associated with the corresponding resource action rule and the associated access control policy may be provided to a policy evaluation engine not shown . The policy evaluation engine may evaluate the request to modify the resource and determine whether the requested action can be authorized based upon the results of the resource action rule and the access control policy. It should be appreciated that this example is merely illustrative and that an access control policy might also be utilized and evaluated in conjunction with results of the resource action rules in other ways.

In some implementations cross account access to the results of the resource action rules might also be provided. For example and without limitation one customer of the distributed execution environment might define a resource action rule for which its results might be shared with another customer of the distributed execution environment . In this way for example one customer might specify a resource action rule that results in a UI object being shown to another customer when the resource management UI for a resource is presented. In another embodiment a customer may define a resource action rule for which its results are shared with an administrator of the distributed execution environment . Such an implementation might be utilized to indicate important infrastructure information to an administrator or to share information with a customer support representative. Various types of policies might be defined in order to enable cross account sharing in scenarios such as those described above.

The example resource management UI A shown in also includes a UI object generated as a result of the evaluation of one or more resource action rules associated with the represented server computer. In this example the UI object is a graphical badge that contains text relating to the results of the evaluation of the associated rules . It should be appreciated however that the UI object might be pure text might be presented as a different type of static graphic or animation or might be presented in another fashion such as an audible indicator. Additionally the UI object might include one or more other UI controls not shown in which when selected cause various actions to be taken with regard to the associated resource. Selection of the UI object e.g. double clicking with a mouse might present additional information regarding the results of the evaluation of the rule or rules .

The UI object might also be configured to provide additional information regarding the results of the evaluation of the relevant resource action rules in some embodiments. For instance in the example shown in the UI control is configured to display additional text in response to a user hovering a mouse cursor over the UI object . In this regard it should be appreciated that the text might be displayed continually or in response to other types of input. Additionally the UI control might be configured to present other types of information in other implementations.

As discussed above the results of the evaluation of resource action rules for a resource may be propagated to other resources. The propagated results may then be utilized to take various actions with regard to the resource to which the results were propagated. For example and without limitation the results of the evaluation of one or more resource action rules might be propagated to other resources for use in presenting a UI control that indicates the status of a related resource. For instance the example resource management UI B shown in includes graphical representations A L of server computers in a rack.

In the example shown in the graphical representation K corresponds to the server computer represented in the example resource management UI A shown in . Additionally the results of the evaluation of the resource action rules associated with the server computer represented in have been propagated to the rack containing the represented server computer. Consequently the resource management UI B shown in also includes a UI object that includes information relating to the evaluation of the resource action rules . In particular the UI object shown in indicates that at least one server in the represented rack i.e. the server represented by the graphical representation K has external customer instances executing thereon and therefore the rack should not be modified in a manner that might impact the customer instances e.g. powered down .

The UI object shown in might also have additional text presented therewith that provides additional information regarding the content presented in the UI object . As mentioned above the text might be displayed in response to a user hovering a mouse cursor over the UI object . Other types of user input might also cause the text to be presented. The UI object might also have other UI controls displayed therewith for taking various types of actions with regard to the represented resource i.e. the rack of server computers represented in . The available actions for a particular resource may be defined by the resource action rules . In this regard it should be appreciated that the presentation of the UI object depicted in is merely illustrative that other configurations might be utilized and that other types of functionality might be provided by the UI object in other implementations.

It should be appreciated that in some implementations the results of the evaluation of the resource action rules might be stored and utilized for other purposes. For example and without limitation the results might be utilized to generate metrics regarding resources in the distributed execution environment e.g. metrics defining a number of resources satisfying a certain rule or rules might be utilized to cluster resources in the distributed execution environment e.g. cluster resources together that satisfy a certain rule or rules and or the results might be utilized to search for resources in the distributed execution environment e.g. resources that satisfy a certain rule or rules . The results might also be utilized for other purposes not specifically mentioned herein.

It should also be appreciated that while the embodiments disclosed herein have been primarily presented using examples applicable to an administrator of the distributed execution environment the embodiments disclosed herein might also be utilized by customers of the distributed execution environment . For example and without limitation a customer of the distributed execution environment might utilize a user computing system like a desktop or laptop computer a smartphone or a tablet computing device to request and view the resource management UI for a particular resource. In this example the customer might also configure resource action rules to present custom UI objects when resources in the distributed execution environment owned by the customer are viewed in the resource management UI . For example and without limitation a customer might define a resource action rule that presents an informational message in a UI object when a virtual machine instance executing a database utilized by the customer is displayed in the resource management UI . Customers of the distributed execution environment might also define other types of resource action rules for use in conjunction with resources owned by the customers.

The instances of computing resources provided by the distributed execution environment may include various types of resources such as data processing resources data storage resources networking resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example and as discussed briefly above instances of data processing resources may be available as virtual machine instances in a number of different configurations. The virtual machine instances may be configured to execute applications including Web servers application servers media servers database servers and other types of applications. Instances of data storage resources may include file storage devices block storage devices and the like. Each type or configuration of an instance of a computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity.

As also mentioned above the instances of computing resources provided by the distributed execution environment are enabled in one implementation by one or more data centers A N which may be referred to herein singularly as a data center or collectively as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that may be utilized to implement the concepts and technologies disclosed herein for performing rule based actions for resources in a distributed execution environment will be described below with regard to .

Users of the distributed execution environment may access the computing resources provided by the data centers over a suitable data communications network such as a Wide Area Network WAN . Although a WAN is illustrated in it should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to the user computing devices may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

As known in the art a virtual machine instance is an instance of a software implementation of a machine i.e. a computer that executes programs like a physical machine. Each of the servers may be configured to execute an instance manager capable of instantiating and managing the virtual machine instances . The instance manager might be a hypervisor or another type of program configured to enable the execution of multiple virtual machine instances on a single server for example.

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machine instances other types of instances of computing resources can be utilized with the concepts and technologies disclosed herein. For instance the technologies disclosed herein might be utilized with instances of hardware resources instances of data storage resources instances of data communications resources instances of networking resources instances of database resources and with other types of instances of computing resources.

The data center shown in also includes a server computer F reserved for executing software components for managing the operation of the data center the server computers the instances and other resources within the distributed execution environment . In particular the server computer F might execute the resource monitoring component the resource state viewing tool and the resource action rule processing component . Details regarding the operation of each of these components have been provided above. In this regard it should be appreciated that while these components are illustrated as executing within the distributed execution environment computing systems that are external to the distributed execution environment might also be utilized to execute some or all of these components. Other configurations might also be utilized.

In the example data center shown in an appropriate local area network LAN is utilized to interconnect the server computers A E and the server computer F. The LAN is also connected to the WAN illustrated in . It should be appreciated that the configuration and network topology illustrated in has been greatly simplified and that many more computing systems networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and between virtual machine instances provided by the server computers A F.

It should be appreciated that the data center described in is merely illustrative and that other implementations might be utilized. In particular functionality described herein as being performed by the resource monitoring component the resource state viewing tool and the resource action rule processing component might be performed by one another might be performed by other components or might be performed by a combination of these or other components. Additionally it should be appreciated that the functionality provided by these components might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer such as the resource monitoring component the resource state viewing tool the resource action rule processing component and or any of the other software components and data described above. The mass storage device might also store other programs and data not specifically identified herein.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the various routines described above with regard to .

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. The input output controllers might also receive input from a digital camera and or video camera a GPS sensor a compass a gyroscope or another type of sensor utilized to determine the location and or the orientation of the computer . The input output controller might also be connected to one or more wireless radios for facilitating wireless communication with the computer .

The input output controller might also provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in . For example the computer might be implemented utilizing system on a chip SOC technologies and other types of technologies suitable for use in implementing smartphones tablet computing devices and other types of mobile computing devices.

Based on the foregoing it should be appreciated that technologies for performing actions based upon the results of evaluating rules associated with resources in a distributed execution environment have been presented herein. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

