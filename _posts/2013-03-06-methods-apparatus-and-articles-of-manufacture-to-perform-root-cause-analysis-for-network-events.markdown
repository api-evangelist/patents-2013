---

title: Methods, apparatus and articles of manufacture to perform root cause analysis for network events
abstract: Example methods, apparatus and articles of manufacture to perform root cause analysis for network events are disclosed. An example method includes retrieving a symptom event instance from a normalized set of data sources based on a symptom event definition; generating a set of diagnostic events from the normalized set of data sources which potentially cause the symptom event instance, the diagnostic events being determined based on dependency rules; and analyzing the set of diagnostic events to select a root cause event based on root cause rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08761029&OS=08761029&RS=08761029
owner: AT&T Intellectual Property I, L.P.
number: 08761029
owner_city: Atlanta
owner_country: US
publication_date: 20130306
---
This patent arises from a continuation of U.S. patent application Ser. No. 12 728 002 which was filed on Mar. 19 2010 and is hereby incorporated herein by reference in its entirety.

The present disclosure pertains to network events and more specifically to methods apparatus and articles of manufacture to perform root cause analysis for network events.

Internet Service Provider ISP networks may be complex having a number of hardware devices and or software systems operating at different networking layers which need to work seamlessly together to implement networking services. In order to ensure customer satisfaction network operators work to quickly detect fault s network event s and or performance problem s diagnose the root cause s and resolve the problem s in a timely fashion to reduce service impacts.

Example methods apparatus and articles of manufacture to perform root cause analysis for network events are disclosed. A disclosed example method includes retrieving a symptom event instance from a normalized set of data sources based on a symptom event definition generating a set of diagnostic events from the normalized set of data sources which potentially cause the symptom event instance the diagnostic events being determined based on dependency rules and analyzing the set of diagnostic events to select a root cause event based on root cause rules.

A disclosed example apparatus includes a data gatherer to gather and normalize data related to network events a join finder to create a set of diagnostic network events joined to a symptom network event and a root cause identifier to identify a root cause event of the symptom network event based on the set of diagnostic network events.

Among the tasks that a network operator may perform during their day to day operations root cause analysis may consume a significant percentage of their time. Moreover the diverse numbers and types of fault s network event s and or performance problems s that may occur in a large network may increase the complexity of identifying root causes. Two example scenarios in which root cause analysis may be applied are troubleshooting individual service impacting network incidences and long term investigations to continually improve network performance and or reliability. Individual service impacting network incidences include those currently present in the network in which case network operators may be under great pressure to analyze a large number of alarm s log s and or measurement s data to identify a root cause and or past network events to which a network operator seeks a better understanding of the root cause s to prevent it from reoccurring and or to reduce its impact s in the future.

Example long term investigations to improve overall network performance may include the analysis of critical faults and or service interruptions and or the analysis of non critical outages and or undesirable conditions in the network. An example short duration event is a link flap that automatically clears itself. Example minor events include but are not limited to a router processor becoming temporarily overloaded increasing the risk for protocol malfunction and or sporadic packet losses. However short and or minor incidences of service impairments may represent a chronic issue that may result in customer dissatisfaction. Hence it is beneficial for network operators to keep track of such network events to analyze and or characterize their root cause s and to prioritize the correction of identified root cause s . For example if link congestion is determined as a primary root cause for reported and or detected packet losses capacity may need to be added to the network.

Network operators may manually investigate the root cause s of various network faults network events and or performance problems based on their knowledge and experience. However gathering the relevant data together to manually investigate faults events and or performance problems may take hours. Such methods may be impractical for large networks and or a large number of faults events and or performance problems. Despite the critical role that root cause analysis may have in networking operations automated root cause analysis tools are not widely available. The existing tools that network operators rely on are either purpose built for a specific task e.g. troubleshooting a line card failure focusing on a specific domain such as fault management or completely depending on domain knowledge input i.e. lack of automated rule learning capabilities .

To perform root cause analysis for the example network of the example communication system of includes the example root cause analyzer . The example root cause analyzer of analyzes the data parameters and or information collected by the example data sources and to determine and or identify the root cause s of identified detected and or reported network events network faults and or performance problems. The example root cause analyzer identifies the root cause s by implementing applying and or carrying out one or more rules that are defined specified and or provided by one or more network operator s network designer s and or technician s associated with the example network . The example operator of interfaces with the example root cause analyzer via a user interface to provide domain knowledge and or to operate the example root cause analyzer . Initially the operator provides specifies and or defines an initial set of rules that the root cause analyzer applies implements and or uses to identify root cause s of detected reported and or identified network events.

As used herein a symptom event is any type of network event network fault performance problem and or network incident representing an observed reported identified and or detected problem occurring in the network . An example symptom event represents an abnormally slow network connection reported by a user. A root cause event as used herein is a network event determined to be the root cause of one or more system events observed in the network . For example the root cause event of an abnormally slow network connection may be the overloading of a particular network device e.g. an edge device a router a switch etc . . . . In some examples the example root cause analyzer statistically correlates symptom events and or root cause events to update create form and or generate new rules models and or parameters which the operator may accept modify and or reject via the example user interface .

The example root cause analyzer of reports identified root cause event s to the operator via for example the example user interface . Upon notification of identified example root cause event s the operator may initiate resolution of the identified root cause event s by for example generating and or creating one or more trouble tickets in a trouble ticket system to initiate resolution of the identified root cause event s . Additionally or alternatively the example root cause analyzer may automatically create the trouble ticket s via an application programming interface API implemented by the example trouble ticket system .

While an example communication system has been illustrated in the elements illustrated in may be combined divided re arranged eliminated and or implemented in any way. Further the example communication system may include additional devices databases servers systems networks and or processors in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated devices databases servers networks systems and or processors.

To store data and or information the example root cause analyzer of includes a data storer and a data store . The data and or information collected by the example data gatherer may be stored in the example data store using any number and or type s of data structures and or data records such as binary data comma delimited data tab delimited data structured query language SQL structures etc. The example data store of may be implemented using any number and or type s of volatile and or non volatile memory ies memory device s and or storage device s . For example the data store of may be implemented using a distributed database. Example data and or information that may be stored in the example data store includes but is not limited to rules log files of symptom events and or previously identified root cause events. Example event data structures that may be used to represent symptom events and or root cause events are described below in conjunction with . Example data structures that may be used to represent rules or models are described below in conjunction with and .

The example data storer of implements any number and or type s of API s and or data store interface s that enable other elements of the example root cause analyzer e.g. the example data gatherer the user interface and or a root cause identifier to query for update create modify and or delete data records and or structures stored in the example data store .

To identify symptom events that may have a common root cause event the example root cause analyzer of includes a join finder . The example join finder of obtains symptom event instances of interest from the example data store via the example data storer and joins and or combines diagnostic data and or information associated with the retrieved symptom events to create one or more symptom event instance graphs. Example operations of the example join finder are described below in conjunction with .

Based on one or more symptom event graphs generated by the example join finder the example root cause identifier of identifies the root cause s of the currently considered symptom events. Example operations of the example root cause identifier are described below in conjunction with .

To correlate outputs of the example root cause identifier with rules stored in the example data store the example root cause analyzer includes an rule generator . The example rule generator of statistically correlates the output of the root cause identifier with other time series of events stored in the data store to learn adapt and or incorporate previously unknown and or learned knowledge of the network . In some circumstances relationships between pairs of events might be obscured when other events in the network are also correlated with these two events. For symptom events not having identified root causes the example rule generator can perform statistical correlations with suspected or possible root cause events in identify and or define new dependency rules.

The example user interface of implements any number and or type s of graphical user interface s and or APIs that enable the operator and or other network operation systems and or servers to define create modify and or delete rules in the data store to initiate root cause analysis to view and or obtain the results of root cause analysis and or to view query modify and or add symptom event data and or information stored in the example data store .

While an example manner of implementing the example root cause analyzer of has been illustrated in the interfaces modules elements and or devices illustrated in may be combined divided re arranged eliminated and or implemented in any way. For example the data gatherer the data storer and or the data store may be implemented separately from the root cause analyzer . Further the example data gatherer the example data storer the example data store the example user interface the example root cause identifier the example join finder the example rule generator and or more generally the example root cause analyzer of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example data gatherer the example data storer the example data store the example user interface the example root cause identifier the example join finder the example rule generator and or more generally the example root cause analyzer may be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc. When any of the appended apparatus claims are read to cover a purely software and or firmware implementation at least one of the example data gatherer the example data storer the example data store the example user interface the example root cause identifier the example join finder the example rule generator and or more generally the example root cause analyzer are hereby expressly defined to include a tangible medium such as a memory a digital versatile disc DVD a compact disc CD etc. storing the software and or firmware. Further still the example root cause analyzer may include additional interfaces modules elements and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated interfaces modules elements and or devices.

A symptom event definition represents the symptom or problem occurring in the network to be analyzed. An example symptom event definition is end to end packet loss. Upon receiving the symptom event definition via the user interface the example join finder applies one or more dependency rules and or models to generate the symptom event instance graphs .

As shown in the cause effect relationship or dependency between a pair of events e.g. a root cause event that may cause a symptom event may be represented by edges of a graph with the events represented as respective nodes. For example the root cause event link congestion can cause the symptom event end to end packet loss. As a further example symptom event link congestion can be caused by the root cause event link failure. The example join finder allows these events to be joined combined and or associated to each other based on dependency rules so that a more accurate analysis of the root cause can be performed. In other words for each potential root cause event of a presently considered symptom event a node and associated graph edge are added to the symptom event instance graph . As used herein two events are joined when a symptom event instance graph includes an edge between the two events.

The example dependency rule of includes a symptom event of interest and root cause events . The example root cause events of include an event A an event B an event C an event D and an event E . Knowledge of the causal relationships between pairs of the events is represented as edges of the graph or rule . The symptom event of interest represents a problem occurring in the network for which the operator is attempting to identify a root cause. As shown in the symptom event of interest may have dependencies to multiple root cause events. For example the symptom event of interest can be caused by the event A and or the event B and the event A can be caused by the event C the event D and or the event E . While an example dependency rule is shown in a dependency rule may have any number and or type s of events having any number and or type s of relationships. Furthermore each edge in the example dependency graph or rule may have one or more temporal joining rules to indicate the temporal nature of the dependency ies and or may have one or more associated spatial joining rules to represent which events at which locations have causal relationships.

Spatial rules allow the operator to define locations or types of locations at which an event may occur. The operator may use a spatial model to for example represent details such as dynamic routing information Internet Protocol IP topologies router configurations cross layer dependency and layer 1 connectivity information by only needing to specify a location type for each symptom root cause event pair.

The join finder automatically converts the locations of symptom events and root cause events into the same location type join level so that they can be directly compared. As shown in joining based on the spatial model might result in the joining of multiple locations and two event instances are considered joined when their locations at a join level overlap. Join level is an optional parameter which is by default the same as the location type of root cause event.

In an example scenario the symptom event definition is an end to end packet loss event that has a location type of the example Source Destination . The root cause event is a internal router backplane event that has a location type of the Router . The joining level can be Backbone Router level Path which means only internal router backplane events in a router along the backbone path not all the routers on the backbone will be joined with this end to end packet loss event.

Temporal joining rules specify under what conditions a root cause event instance is considered to be temporally joined with a symptom event instance. Temporal rules allow the operator to specify a time period of network events selected for root cause analysis. An example temporal rule that may be implemented by the example join finder is shown in . The temporal rule of contains a start time an end time a start end expanding option a start start expanding option and an end end expanding option . The example temporal joining rule includes six parameters symptom event s left and right margins and respectively root cause event s left and right margins and respectively and two expanding options for symptom event and root cause event and respectively. These six parameters may be used by the operator to represent temporal relationships between symptom event instances and root cause event instances such as the cause effect delays and measurement artifacts.

The example join finder expands the time period of symptom root cause event instances with left right margins based on the example expanding options shown in . If the two expanded periods overlap the event instances are joined. An example temporal joining rule between events external border gateway protocol eBGP flap and Interface flap has symptom event left and right margins of 180 seconds and 5 seconds respectively. The root cause event s left and right margins are both 5 seconds and both are start start expanding options . Here 180 seconds is used to model the cause effect delay between eBGP flap and Interface flap as 180 seconds is the default setting of an example eBGP hold timer. In other words the event eBGP flap is likely to occur 180 s after the event Interface flap occurs. The 5 seconds margins are used to model the inaccurate time stamps in syslog messages. Both expanding options are start start expanding options because when an eBGP session goes down the start time of eBGP flap is only related to when interface goes down.

The example outputs include identified symptom event instances . The example identified symptom event instances are related to the symptom event instances respectively. Further the highlighted leaf nodes of the identified symptom event instances represent the events that have been identified as the root cause.

For example consider the example symptom event instance graph which has 2 instances of event A 4 instances of event B 4 instances of event C 3 instances of event D and 2 instances of event E. In some examples event E is selected as the root cause of symptom event graph because it has the highest priority of 50.

Additionally or alternatively the priority of a particular root cause event may depend on the number of event instances associated with the root cause event node. Specifically the priority of a root cause event node may be multiplied by the number of event instances associated with the root cause event node. For example event C for graph has a priority of 45 4 which is greater than the priority of 50 2 associated with event E . Such methods may be used to bias the identified root cause towards root cause events with more supporting instances.

Further still root cause events may be selected based on the sum of the priorities along the path from the root cause event to the symptom event of interest . For example using this algorithm event C instead of event E is the root cause of the symptom event graph because 30 45 20 50.

Moreover the priorities can be variable or be selected depending on the attributes of event instances. For example the priority of CPU overload event may vary according to the value of CPU utilization which is an attribute of CPU overload event instances. For example the root cause event of CPU utilization may be assigned a priority that increases as the CPU utilization increases.

While example reasoning rules were described above any number and or type s of additional and or alternatively rules may be applied. Further combinations of the rules described above may be applied using for example majority voting.

Returning to in addition to or instead of the example rules based reasoning module the example Bayesian inference module may be used to identify root causes. Using one or more inference parameters root cause rules the example Bayesian inference module determines the probability that a given root cause event is the actual root cause of a symptom event. The example Bayesian inference module of models unobservable root cause conditions i.e. those that do not have strong observable evidence or signatures and uncertainty of diagnostic evidences. Bayesian inference also allows multiple symptom event instances to be examined together and deduce a common root cause for them which typically achieves better accuracy than when each individual symptom instance is diagnosed separately. In some examples a Na ve Bayesian Classifier is used to model the root cause identification problem in which the potential root causes are the classes and the presence or absence of the diagnostic evidences as well as the symptom events themselves are the features. The likelihood for a particular root cause r given the features observed el . . . en is defined by the following mathematical expression

where R is the set of potential root causes. The root cause may be identified by maximizing the maximum likelihood ratio

Consider an example where the operator assesses the likelihood ratio for a border gateway protocol BGP session flap due to overloaded router CPU. In this case p r is the a priori probability of the overloaded router CPU inducing a BGP session timeout and p e . . . en r is the probability of the presence of evidences such as SNMP 5 minute average CPU measurement being high or a BGP hold timer expiry notification observed in router syslog under such scenario it is divided by p e . . . en which is the chance for the same evidences to appear when the BGP flap is due to other root causes. Hence the first term in the EQN 1 quantifies how likely the root cause without any additional information is and the second term quantifies how much confidence gained or lost from observing or not observing the set of evidences. When the features are conditionally independent the second term can be decoupled to

Different diagnostic evidences may be indicative of different root causes. In the previous discussed BGP session flap example one root cause can be CPU overload at router x between time t to t . The time and location information are extracted from the symptom event instances automatically. Moreover a symptom event instance can itself be evidence to some root causes. For example if many BGP sessions have timed out about the same time on the same router even when the corresponding SNMP 5 minute CPU average is unavailable missing data it may be used to determine that the common factor to these BGP sessions the router CPU is likely the root cause of the problem. In fact missing CPU measurements can be due to router CPU being too busy to respond to an SNMP poll. It too can be model as a Low contributor to the CPU overload virtual root cause event the Low value is due to the high uncertainty since missing SNMP measurements can be caused by an overloaded SNMP poller and or a loss of User Datagram Protocol UDP packets carrying the result. The Bayesian inference module may be used to implement fuzzy reasoning logic.

While an example manner of implementing the example root cause identifier of has been illustrated in the interfaces modules elements and or devices illustrated in may be combined divided re arranged eliminated and or implemented in any way. Further the example rule based reasoning module the example Bayesian inference module the example reasoning rules the example inference parameters and or more generally the example root cause identifier of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example rule based reasoning module the example Bayesian inference module the example reasoning rules the example inference parameters and or more generally the example root cause identifier may be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc. When any of the appended apparatus claims are read to cover a purely software and or firmware implementation at least one of the example rule based reasoning module the example Bayesian inference module the example reasoning rules the example inference parameters and or more generally the example root cause identifier are hereby expressly defined to include a tangible medium such as a memory a digital versatile disc DVD a compact disc CD etc. storing the software and or firmware. Further still the example root cause identifier may include additional interfaces modules elements and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated interfaces modules elements and or devices.

The example machine accessible instructions of begin when the operator provides a symptom event definition to the example root cause analyzer block . The operator may provide the symptom event definition in response to network tools that are monitoring the network and or in response to a complaint received from a user. The join finder retrieves symptom event instances from the remote data sources and via the data gatherer block . The join finder applies one or more dependency rules to the collected data block applies one or more spatial joining rules block and applies one or more temporal joining rules block to form the example symptom event instance graphs block . Control then exits from the example machine accessible instructions of .

The example machine accessible instructions of begins with the root cause identifier receiving one or more symptom event instance graphs from the example join finder block . The root cause identifier determines whether the example rule based reasoning module or the example Bayesian inference model is to be used to identify the root cause event block . The example operator may select which model to use when defining the symptom event definition. However the determination may be made based on any number of other factors. For example certain event types e.g. based on the symptom event definition may be more accurately analyzed by a particular model . In that case the model most suited to identifying the root cause may be selected to provide the most accurate results. If the rule based reasoning model is selected block the rule based reasoning module gathers priority values from the data store block . The priority values are then applied and or combined to the symptom event instance graph for example as described above in connection with to identify the root cause block . The identified root cause is then presented to the user block . 

Returning to block if Bayesian inference is selected block the Bayesian inference module gathers the Bayesian inference parameters block The Bayesian inference module applies the inference parameters to the symptom event instance graph block and computes the likelihood of each event in the symptom event graph being the root cause block . The root cause identifier selects the root cause event with the highest likelihood as the root cause block and displays the identified root cause to the operator block . Control then exits from the example machine accessible instructions of .

The system P of the instant example includes a processor P such as a general purpose programmable processor. The processor P includes a local memory P and executes coded instructions P present in the local memory P and or in another memory device. The processor P may execute among other things the machine readable instructions represented in . The processor P may be any type of processing unit such as one or more microprocessors from the Intel Centrino family of microprocessors the Intel Pentium family of microprocessors the Intel Itanium family of microprocessors and or the Intel XScale family of processors. Of course other processors from other families are also appropriate.

The processor P is in communication with a main memory including a volatile memory P and a non volatile memory P via a bus P. The volatile memory P may be implemented by Static Random Access Memory SRAM Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory P may be implemented by flash memory and or any other desired type of memory device. Access to the main memory P P is typically controlled by a memory controller not shown .

The processor platform P also includes an interface circuit P. The interface circuit P may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a third generation input output 3GIO interface.

One or more input devices P are connected to the interface circuit P. The input device s P permit a user to enter data and commands into the processor P. The input device s can be implemented by for example a keyboard a mouse a touchscreen a track pad a trackball an isopoint and or a voice recognition system.

One or more output devices P are also connected to the interface circuit P. The output devices P can be implemented for example by display devices e.g. a liquid crystal display a cathode ray tube display CRT by a printer and or by speakers. The interface circuit P thus may include a graphics driver card.

The interface circuit P also includes a communication device such as a modem or network interface card to facilitate exchange of data with external computers via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. . The example interface circuit P may be used to implement the example data gatherer and or the example user interface of .

The processor platform P also includes one or more mass storage devices P for storing software and data. Examples of such mass storage devices P include floppy disk drives hard drive disks compact disk drives and digital versatile disk DVD drives. The mass storage device P may implement the example data store . Alternatively the volatile memory P may implement the example data store .

As an alternative to implementing the methods and or apparatus described herein in a system such as the device of FIG. P the methods and or apparatus described herein may be embedded in a structure such as a processor and or an ASIC application specific integrated circuit .

Although the above discloses example systems including among other components software executed on hardware it should be noted that such systems are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of the disclosed hardware and software components could be embodied exclusively in dedicated hardware exclusively in software exclusively in firmware or in some combination of hardware firmware and or software.

In addition although certain methods apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all apparatus methods and articles of manufacture fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents.

