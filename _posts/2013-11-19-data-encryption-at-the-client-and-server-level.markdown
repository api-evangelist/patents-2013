---

title: Data encryption at the client and server level
abstract: Embodiments of the present invention include a computer system and computer program product for implementing encryption of data. A computer system determines that a first data field of a plurality of data fields of a web form requires encryption. The computer system tags the first data field with one or more HTML encryption tags. The computer system displays the web form to a user. The computer system receives user input, wherein at least a portion of the user input is contained in the first data field of the web form. The computer system encrypts the first data field on a first computer, wherein a first user specific encryption key is associated with at least the first data field. The computer system inserts the encrypted first data field into at least one record stored on a second computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09350714&OS=09350714&RS=09350714
owner: GLOBALFOUNDRIES INC.
number: 09350714
owner_city: Grand Cayman
owner_country: KY
publication_date: 20131119
---
The present invention relates generally to the field of data protection and more specifically to selective encryption of sensitive data.

Sensitive confidential data may be entered by a user at a client computer. For example a doctor nurse or even a medical receptionist may enter sensitive data such as medical conditions or symptoms medications date of birth social security number insurance card number and credit card number into one or more medical forms. Typically the data is sent to and stored at a central server so it is centrally available for access by client computers at different locations and for security reasons in case a client computer is hacked.

Data transmitted between client computers and servers is vulnerable to interception by hackers in both directions. Protocols such as Secure Socket Layer SSL or Transport Layer Security TLS allow for an encrypted secure bi directional connection between a client computer and a mail server or web server. These protocols use asymmetric cryptography for authentication and then symmetric encryption for the actual data transmission. This helps to protect sensitive data from hackers who eavesdrop on transmitted data or change data in transit.

Computer databases allow the storage of digital data in an organized format that allows for searches to retrieve a particular subset of data utilizing specialized commands in a query language such as Structured Query Language SQL . SQL allows data entry manipulation and deletion. SQL statements may be generated by a client application based on user input or stored in database procedures to be run on a schedule or on request by a Database Administrator DBA . The SQL is executed by a Database Management System DBMS which is a software system which allows the administration of a database and to control access to a database. Databases may be encrypted as a whole to protect from hackers who may gain access to the database.

Within a database some data tables may contain both user sensitive information as well as non sensitive information. Data protection is usually required by administration policy to prevent unauthorized access to sensitive information. Some databases are protected by a generic userid or machine identification used by all users within a company or office to access the data. A second method of data protection includes the use of a unique database userid and password for each individual user along with table definitions that include a field to allow segregation of data by the userid. This last approach requires maintenance by a Database Administrator DBA to create a new userid for each user and set permission access by table for each new userid which can be time consuming. While database files are typically encrypted as a whole this does not prevent authorized users from gaining access to the data in the table.

Another type of encryption method protects the storage of user private data during transmission onto a server connected storage device. US 2009 0147949 A1 by Microsoft Corporation describes a method wherein a set of symmetric encryption keys is generated by a server at the request of a client computer. The server application stores the set of symmetric encryption keys on the server for a user of the client computer. The keys are sent to the client computer only when needed for encryption or decryption of data on a portable storage device during transmission. The keys are deleted from the client computer when encryption or decryption is completed.

Embodiments of the present invention include a computer program product and computer system for implementing encryption of data. A computer system determines a first data field of a plurality of data fields of a web form requires encryption. The computer system tags the first data field with one or more HTML encryption tags. The computer system displays the web form to a user. The computer system receives user input wherein at least a portion of the user input is contained in the first data field of the web form. The computer system encrypts the first data field on a first computer wherein a first user specific encryption key is associated with at least the first data field. The computer system inserts the encrypted first data field into at least one record stored on a second computer.

Embodiments of the present invention allow an individual user to encrypt part or all of the data with an encryption key at the client level prior to transmission to a server application or data storage application program for storage. The encryption key or keys are stored on a local device such as a client computer and at least one user encryption key is never sent to the server with the data which protects the encrypted stored data from decryption by hackers. When user data is retrieved from the data storage location and returned to the client computer part or all of the data will be decrypted at the client level using the encryption key or keys. If the encryption key or keys of an individual are compromised only a small portion of the encrypted data in the data storage location may be accessed. This provides an added level of security to the user s private data stored on a server or a server connected storage device.

Embodiments of the present invention allow an individual user to encrypt part or all of the data with a second encryption key at the server level prior to transmission to the data storage application program for storage. The second key is stored locally and the server copies are removed after use making this a transient key.

In the preferred embodiment of the present invention the private data for an authorized user is encrypted at two stages utilizing the following elements an enhanced web browser a web application and an SQL wrapper program. An authorized user fills in a web form through the enhanced browser. The enhancement to the browser allows for usage of HTML tags for identifying certain fields within the web form to be encrypted prior to transmission to the web application. A first encryption key is created and stored locally on the computer containing the browser. The enhanced browser uses the first encryption key to encrypt the HTML tagged fields. A second encryption key is created and stored locally on the computer containing the browser. The second encryption key is sent on to the web application along with the encrypted and non encrypted data from the web form. The web application may perform operations on any non encrypted data. The web application formats all the data into an SQL statement and sends the SQL statement and the second encryption key to the SQL wrapper. The SQL wrapper encrypts select data fields within the SQL statement with the second encryption key. The SQL statement is sent to the storage application program which processes the statement. Results from the storage application program are sent back to the SQL wrapper. In the case of a SELECT statement any resultant dataset is transmitted to the SQL wrapper for decryption. The SQL wrapper uses the second encryption key to decrypt selected data fields in the resultant dataset and sends the results to the web application. The SQL wrapper and web application remove the second encryption key making the second encryption key a transient key. The web application may perform operations on any non encrypted data in the results. The web application formats the results with the HTML encryption tags to identify data fields that need to be decrypted and sends the formatted results to the enhanced browser. The enhanced browser decrypts the tagged fields with the first encryption key and displays the results to the user.

In an alternate embodiment of the present invention the private data for an authorized user is encrypted at only one stage utilizing the following elements an enhanced web browser and a web application. No SQL wrapper exists. An authorized user fills in a web form through the enhanced browser. The enhancement to the browser allows for usage of HTML tags for identifying certain fields within the web form to be encrypted prior to transmission to the web application. A first encryption key is created and stored locally on the computer containing the browser. The enhanced browser uses the first encryption key to encrypt the HTML tagged fields. The web application may perform operations on any non encrypted data. The web application formats all the data into an SQL statement and sends the SQL statement to the storage application program which processes the statement. Results from the storage application program are sent back to the web application. In the case of a SELECT statement any resultant dataset is transmitted to the web application. The web application may perform operations on any non encrypted data in the resultant dataset. The web application formats the results with HTML encryption tags to identify data fields that need to be decrypted and sends the formatted results to the enhanced browser. The enhanced browser decrypts the tagged fields with the first encryption key and displays the results to the user. Implementation of embodiments of the invention may take a variety of forms and exemplary implementation details are discussed subsequently with reference to the Figures.

In another alternate embodiment of the present invention the private data for an authorized user is encrypted at only one stage utilizing the following elements a standard web browser a web application and an SQL wrapper program. An authorized user fills in a web form through a standard browser. An encryption key is created and may be stored locally on the computer in an encrypted HTTP cookie stored on a persistent key store on a server or may be filled in for each transaction. The key is sent on to the web application along with the data from the web form. The web application may perform operations on the data. The web application formats the data into an SQL statement and sends the SQL statement and the encryption key to the SQL wrapper. The SQL wrapper encrypts select data fields within the SQL statement with the encryption key. The SQL statement is sent to the storage application program which processes the statement. Results from the storage application program are sent back to the SQL wrapper. In the case of a SELECT statement any resultant dataset is transmitted to the SQL wrapper for decryption. The SQL wrapper uses the encryption key to decrypt selected data fields in the resultant dataset and sends the results to the web application. The SQL wrapper and web application remove the encryption key. The web application may perform operations on any data. The web application formats the results and sends the formatted results to the browser for display to the user.

Implementation of embodiments of the invention may take a variety of forms and exemplary implementation details are discussed subsequently with reference to the figures. The embodiment illustrated in the figures describes the interaction of a relational database and query statements using SQL as the query language. Specific details disclosed herein are not to be interpreted as limiting but merely as a representative basis for teaching one skilled in the art to variously employ the methods and structures of the present disclosure. Embodiments of the present invention may apply to all database types including but not limited to relational hierarchical network and object oriented databases. Likewise embodiments of the present invention may apply to other query languages including but not limited to SQL QUEL OQL and SEQUEL.

The embodiment illustrated in the Figures describes the use of a web browser that displays hypertext markup language HTML based documents. As used herein the term HTML based document is used generally to refer to any document based on markup languages derived from HTML such as an Extensible Markup Language XML document.

The present invention will now be described in detail with reference to the Figures. is a functional block diagram illustrating a distributed data processing system generally designated in accordance with one embodiment of the present invention.

Distributed data processing system includes server computers and and client computer interconnected over network .

Server computers and can each respectively be a specialized server computer an application server a laptop computer a tablet computer a netbook computer a personal computer PC a desktop computer a personal digital assistant PDA a smart phone or any programmable electronic device capable of communicating with client computer and the remaining server computers via network . In certain embodiments server computers and can each respectively represent a computer system utilizing clustered computers and components that act as a single pool of seamless resources when accessed via network as is common in data centers and with cloud computing applications. In general server computers and can each respectively be representative of any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instructions and communicating with other computing devices via a network. Server computer may include internal and external hardware components as depicted and described in further detail with respect to .

Server computer includes storage application which executes locally on server computer and storage device . In the depicted system storage application functions as a standard Database Management System. Storage device functions as a database or a collection of related files. Over network storage application receives an SQL statement from a requestor processes the SQL statement and sends results back to the requestor. Server computer is connected to the requestor which may reside on server computer or server computer via network . Server computer may also be a node in a distributed database management environment.

Server computer includes web application which executes locally on server computer and has the capability to serve web applications static HTML based documents and dynamic HTML based content with encryption tags to client computer via network and has the capability to create and send SQL statements to server computers or via network . Server computer may be running an operating system including but not limited to Linux or the IBM AIX Advanced Interactive eXecutive operating system. Linux is a registered trademark of Linus Torvalds in the United States other countries or both. AIX is a trademark of International Business Machines Corporation in the United States other countries or both. Server computer which is a web application server provides the application logic for web application . In reality there would be a web server computer in between server computer and client computer but the web server function is not novel and is left out to simplify the illustrated embodiment.

Web application receives data requests for storage and retrieval and content requests for web pages from client computer via network . Web application serves both static and dynamically generated HTML web pages to client computer via network . Web application formats the web pages such as forms with HTML encryption tags for fields that will likely contain sensitive confidential data input by a user at client computer . For example if the field requests confidential medical information social security number insurance card number credit card number etc. the web application will attach an encryption tag to the field in the HTML document representing the form to alert the web browser at the client computer to encrypt the user entered data in these fields before returning the document to the web application. Web application formats user entered data into SQL statements which are transmitted to either server computer or server computer via network . Web application may for example run on a J2EE or Java Enterprise Edition JEE platform for web applications which provides an application programming interface API and runtime environment capable of server side scripting. Web application is described further in .

Server computer includes SQL wrapper which executes locally on server computer and has the capability to encrypt fields in received SQL statements using a transient key or decrypt fields in a received dataset using a transient key. SQL wrapper receives SQL statements from server computer via network sends SQL statements with encrypted fields to server computer via network and receives datasets from server computer via network . SQL wrapper decrypts fields within received datasets prior to transmitting results to server computer . SQL wrapper is described further in .

In an alternate embodiment SQL wrapper may reside on server computer with storage application to conserve resources. Notwithstanding transferring an encryption key to the same computer containing the storage application program or storage device would lessen the effectiveness of the security provided by encrypting portions of the SQL statement on another server computer.

In an alternate embodiment of the present invention SQL wrapper and server computer are not needed. Instead web application transmits SQL statements directly to storage application on server computer via network with no further encryption. Web application would receive any resultant dataset from storage application on server computer via network .

Network can be for example a local area network LAN a wide area network WAN such as the Internet or a combination of the two and can include wired wireless fiber optic or any other connection known in the art. In general network can be any combination of connections and protocols that may support communications between server computers and and client computer in accordance with a desired embodiment of the present invention.

In various embodiments of the present invention client computer can be a laptop computer a tablet computer an application server a netbook computer a personal computer PC a desktop computer a personal digital assistant PDA a smartphone or any programmable electronic device capable of communicating with server computer via network . Client computer includes browser and plug in which execute locally on client computer and can interface with the user via UI created by browser for the purpose of data entry storage and retrieval.

Browser is a web browser or software application capable of displaying content files or HTML pages received from a web application server such as server computer . Browser is capable of sending data to server computer via network . Examples of data sent to server computer include but are not limited to the following requests for web content posting of data from a web form and user login information. Browser receives input from a user and displays output to the user through a user interface such as UI .

Plug in is a software component fully or partially integrated with browser to extend the markup language of browser to identify data fields needing encryption or decryption by the use of HTML encryption tags within an HTML based document. Plug in is capable of encrypting or decrypting the tagged fields depending on the current operation using a local encryption key. Plug in has the capability to create one or more encryption keys. In the preferred embodiment each encryption key is user specific and is created through user input via UI . In an alternate embodiment plug in may generate each encryption key through internal programming. Plug in stores locally one or more encryption keys for each user. The integrated actions of browser and plug in together are described further in .

In an alternate embodiment of the present invention client computer includes only browser without plug in . In that case browser is a conventional web browser with no additional capability. Web application does not insert HTML encryption tags into the HTML based documents. Sensitive user data is received by web application formatted into SQL and sent on to SQL Wrapper for encryption at the server level.

User interface UI includes components used to receive input from a user and transmit the input to an application residing on client computer . In an exemplary embodiment UI uses a combination of technologies and devices such as device drivers to provide a platform to enable users of client computer to interact with browser and plug in . In the exemplary embodiment UI receives input such as textual input received from a physical input device such as a keyboard via a device driver that corresponds to the physical input device.

In this example prior to step browser was started on client computer by the user and web application was selected.

Browser authenticates if a user has permission to access web application step . In the preferred embodiment browser requests the input of a user login via UI to verify the user has permission to use web application . Authentication may alternatively be through software or hardware keys. If the user login has the proper permission browser proceeds to the next step. If the user login does not have the proper permission web application will return an error message to browser for display to the user via UI . In complex business environments multiple servers running applications that work together for a business solution may require multiple logins by the same user which can be time consuming. Utilizing protocols such as Lightweight Directory Access Protocol LDAP allow a single sign on where one password for a user is shared between many services within a set of company resources. A person of ordinary skill in the art may recognize that there are other ways in which user authentication may be performed.

Browser displays a web form via UI based on input received from the user via UI step . In the preferred embodiment after authentication browser receives user input regarding one or more web forms web content selected by the user via UI . In the preferred embodiment the selection of web forms include but are not limited to a form for collecting data to be stored in storage device or a form for collecting search terms to use to query storage device for retrieval of previously stored data. In an alternate embodiment the browser may be directed to a specific web form automatically. Based on the user s selection browser retrieves the web form relevant to the user selection from web application . The relevant web form is consequently displayed to the user via UI .

In the preferred embodiment after browser displays via UI an HTML web form containing HTML encryption tags around selected data fields browser receives user input via UI for one or more data fields contained in the web form which may correspond to user sensitive data user non sensitive data or any combination thereof step . For example user sensitive data may include medical information social security numbers birth dates credit card numbers or anything that may not be desirable for other users to view other data fields may be considered user non sensitive data. Once the user input is received browser turns control of data processing over to plug in before anything is transmitted to web application .

Plug in identifies data fields in the web form tagged with HTML encryption tags step . In the preferred embodiment of the present invention browser in conjunction with plug in becomes an enhanced browser with a field encryption component. The browser field encryption component identifies field encryption tags within the HTML document representing the form. The enhanced HTML code written for plug in includes special tags for encryption of select data fields namely the user sensitive data fields. User sensitive data fields are placed between the two field encryption fields and . The special tags may alternately take the form of an attribute encrypt under type within a form input line. To the user the form displayed on UI may or may not indicate which fields are to be encrypted. The encryption information is detailed within the HTML code and may not be visible to the user.

Plug in retrieves key1 or a first encryption key from a local data storage location step . In the preferred embodiment of the present invention plug in creates a first encryption key for each user of web application and stores the key locally on client computer . Plug in stores the created first encryption key as persistent data in an encrypted HTTP cookie or in some other form of local data store on client computer . The first encryption key is never transmitted to another computer so the key cannot be intercepted by a hacker during transmission. If no first encryption key currently exists for the user plug in requests the user to create a first encryption key via UI or generates a first encryption key for the user. In a preferred embodiment plug in specifies the form of the encryption key similar to a password such that rules for length type of characters etc. may be expressed in many possible ways. In an alternate embodiment the user may type in the first encryption key for each transaction via UI . A person of ordinary skill in the art may recognize that there are many ways to create or store an encryption key on a client computer.

Plug in retrieves key2 or a second encryption key from a local data storage location step . In a preferred embodiment of the present invention plug in creates a second encryption key for each user of web application and stores the key locally on client computer . In a preferred embodiment plug in stores the created second encryption key as persistent data in an encrypted HTTP cookie or some other form of local data store on client computer or data store accessible by client computer . The second encryption key is transmitted on to other applications and may in certain circumstances be intercepted by a hacker. If no second encryption key currently exists for the user plug in requests the user to create a second encryption key via UI or generates a second encryption key for the user. A person of ordinary skill in the art may recognize that there are many ways to store a second encryption key on a client computer. In an alternate embodiment of the invention where SQL wrapper does not exist plug in does not create nor retrieve key2.

In an alternate embodiment of the present invention the first and second encryption keys are transmitted to a data store on a key server computer for persistent storage and retrieved from the data store on the key server as needed. The key server computer is separate from server computers and and client computer . Each user registers with the key server computer through a key server client application and stores one or more encryption keys on the key server computer. The user may also set permissions for secondary users to access the user s encryption key or keys. The permission for secondary users may be for temporary access in the case of a technician helping the user fill out forms on browser or for permanent access in the case of a trusted professional needing constant access to the user s records or for any access in between where each type of permission is defined individually by the user. Registration of the user and creating permission settings for secondary users may be provided through an additional browser plug in on the key server client application. In the case where a secondary user does not have permission to access a primary user s data web application will send a message to the primary user requesting permission for the secondary user. The message could be through a text email a complementary smartphone application or some other form of communication. The key server client application creates a token that can be embedded in an email and forwarded to the secondary user. The token includes a link to the key server with a token identifier which allows an already logged in secondary user to use one or more decryption keys. The token may be for one time use or may have a specified duration selectable by the primary user. The secondary user may receive a message indicating the allowed duration. The key server disables tokens as they expire. The primary user may establish rules about who can access the user s data ahead of any requests such that the rules are tied to the system where the data is being used and the length of time the secondary user has access to each key. The user may grant permission to one or both encryption keys. Since encryption of the data is separated by key1 and key2 the user may give permission to only one of the two keys thereby giving permission to only certain types of data to secondary users. This would allow data mining of certain fields in the database while still protecting the most sensitive user information.

Plug in encrypts the identified data fields with key1 or the first encryption key step . Plug in uses the first encryption key to encrypt any data within the identified data fields. The data fields were previously identified by the HTML field encryption tags. Plug in may encrypt data using any key encryption algorithm available to a person of ordinary skill in the art. Examples of key encryption algorithms include but are not limited to a symmetric key algorithms like AES CASTS RC4 DES 3DES or b asymmetric key algorithms. A person of ordinary skill in the art may recognize that there are many ways to perform encryption of data.

In the preferred embodiment browser takes the output from plug in and transmits both the encrypted and non encrypted data from the web form to web application on the application web server on server computer via network step .

Plug in transmits key2 or the second encryption key to web application on server computer via network with the purpose of sending key2 on to SQL wrapper step . In an alternate embodiment of the invention where SQL wrapper does not exist plug in does not send key2.

Browser receives a result from web application wherein the result is dependent on whether browser requested to store data in or fetch data from storage device step . For example if the data were stored in storage device the result received may be a message indicating the task completed without errors. Storage application creates the message and transmits it to SQL wrapper and then on to web application . Web application transmits the message to browser and browser displays the message to the user via UI . If data was retrieved from storage device subsequent to a search query the result received may be one or more records of data transmitted to SQL wrapper . SQL wrapper may modify the result and then transmit the modified result to web application for formatting into the enhanced HTML with encryption tags. Web application formats the results into either a text message an organized table of data or a web form. Web application transmits the enhanced HTML to browser . A person of ordinary skill in the art will recognize that there are other ways in which the response may be formatted or transmitted to the user.

In the case of data retrieved from storage device browser turns over the data processing to plug in and plug in identifies data fields needing decryption in the received HTML by searching for the encryption tags step .

Plug in decrypts identified data fields with key1 or the first encryption key step . The decrypted web content is ready for display to the user by browser .

Browser displays the resulting web content to the user via UI step . The user does not see the encrypted form the encryption and decryption process is seamless to the user.

Web application authenticates with user and connects to storage application based on user input via UI step . In the preferred embodiment browser transmits user login information to web application based on user input via UI . Web application verifies whether the user credentials allow access to web application . If the user credentials do not allow access web application transmits a relevant message to browser which is displayed to the user via UI . If the user credentials allow access i.e. the user is authenticated web application transmits an initial web page containing links to one or more web forms web content to browser which is displayed to the user via UI . A list of users with allowable access is maintained by an administrator of web application . A Lightweight Directory Access Protocol LDAP may be utilized to allow a single sign on where one password for a user is shared between many services within a set of company resources. A person of ordinary skill in the art may recognize that there are other ways in which user authentication may be performed.

After authenticating the user credentials web application connects to storage application . Web application transmits a request to server computer via network to authenticate with storage application for permission to access storage device . Authentication validates a user identity and authorization determines the rights of a user to access an application or database. In the case where storage device is a database the rights of the user may include some or all of the following the ability to read update delete or retrieve data from specific database tables to execute queries to perform procedures or to make structural changes to the database. In the preferred embodiment web application transmits a userid and password associated with a machine id to storage application via network . The authentication request may generate one database connection for a single user or several database connections forming a pool that multiple users can access. In an alternate embodiment web application may transmit to storage application the user login information previously received from browser . A person of ordinary skill in the art may recognize that other methods exist to perform database authentications. Authentication of a user with storage application and web application may happen concurrently or one at a time in any order.

Web application formats a web form with encryption tags and transmits the web form to browser step . Responsive to user input regarding one or more web forms selectable by the user via UI web application formats the relevant form with HTML encryption tags to tag data fields needing encryption. After formatting web application transmits the web form to browser for display to the user via UI .

Web application receives data from browser step . Responsive to user input via UI of the web form displayed by browser web application receives at least one encrypted data field processed by plug in and at least one unencrypted data field.

Web application receives key2 from plug in step . In the preferred embodiment web application receives the second encryption key with the purpose of transmitting the second key on to SQL wrapper . Web application does not perform any encryption or decryption functions using the key. In an alternate embodiment of the invention SQL wrapper does not exist and in that case web application does not receive key2.

Web application performs operations on non encrypted data fields step . In the preferred embodiment web application performs operations on any unencrypted data fields. Many types of operations are possible including but not limited to verifying format of dates ordering lists alphabetically or numerically checking spelling searching for specific values searching for related records sending an email to a colleague scheduling an appointment or performing calculations. The user may be presented with a list of operations available via UI or the application may perform operations automatically without user input.

Web application formats the encrypted and non encrypted data into an SQL statement step . An SQL statement is a query or command designed for managing data stored in a database such as storage device . For example in the case of storing new data an INSERT command may be created. In the case of deleting data a DELETE command may be created. In the case of revising data which is already stored in storage device an UPDATE command may be created. In the case where the user wants to retrieve or fetch previously stored data a SELECT command may be created. Not all commands are listed here but it may be recognized that other commands exist to those skilled in the art. In a preferred embodiment the SQL statement may look like INSERT INTO Schema.Tablename Namefield birthdatefield socialsecuritynum VALUES Joe Smith 01 01 2000 BGJKLMQNPRIP . In the preferred embodiment some of the fields have been previously encrypted by plug in such as the value for socialsecuritynum in the above example. The SQL statement may take other forms depending on the table definitions in storage device and the intent of the query or command.

Web application transmits the SQL statement and key2 or the second encryption key to SQL wrapper step . In the preferred embodiment of the present invention web application transmits the SQL statement and key2 to SQL wrapper on server computer over network . In an alternate embodiment of the invention the SQL statement is sent to storage application without further field encryption and in that case web application does not transmit key2.

Web application receives a result from SQL wrapper wherein the result is dependent on the type of SQL statement processed such as storing data in storage device or retrieving data from storage device step . In the preferred embodiment if data was stored in storage device the result may be a message indicating the task completed without errors. Storage application creates the message and transmits it to SQL wrapper . SQL wrapper transmits the message to web application . If data was retrieved from storage device subsequent to a search query storage application transmits the result which may be one or more records of data to SQL wrapper . SQL wrapper may modify the result as needed and transmits the modified result to web application .

Web application performs operations on non encrypted data step . In the preferred embodiment web application performs operations on any retrieved data comprised of non encrypted data fields. Many types of operations are possible including but not limited to verifying format of dates ordering lists alphabetically or numerically checking spelling searching for specific values searching for related records sending an email to a colleague scheduling an appointment or performing calculations. The user may be presented with a list of operations available via UI or the application may perform operations automatically without user input. In the case where only encrypted data exists web application does not perform any operations on the data.

Web application deletes key2 or the second encryption key from memory step . The second encryption key is no longer needed and is removed by web application to prevent a hacker from retrieving the key when not in use. This step may happen any time after step .

Web application formats the received result wherein the received result is dependent on if data was stored in storage device or retrieved from storage device step . In the embodiment if data was stored in storage device the result may be a message indicating the task completed without errors. Storage application creates the message and transmits it SQL wrapper and then on to web application . Web application transmits the message to browser and browser displays the message to the user via UI . If data was retrieved from storage device subsequent to a search query the received result may be one or more records of data transmitted to SQL wrapper . SQL wrapper may modify the result and then transmit the modified result to web application for formatting into the enhanced HTML with encryption tags. Web application formats the received result into either a text message an organized table of data or a web form. Web application transmits the enhanced HTML to browser . In an alternate embodiment where plug in does not exist the data is formatted into standard HTML and sent to browser . In other embodiments web application may use formatting including but not limited to HTML XML Extensible Markup Language or JSON JavaScript Object Notation .

Web application transmits the enhanced HTML formatted result to browser step . In an alternate embodiment web application transmits standard HTML formatted results to browser .

SQL wrapper receives an SQL statement from web application over network step . In the preferred embodiment of the present invention SQL wrapper receives at least one non encrypted data field in an SQL statement from web application . In an alternate embodiment of a standard browser without a field encryption component the SQL statement received may consist of all unencrypted data.

SQL wrapper receives key2 or the second encryption key from web application over network step . SQL wrapper receives the second encryption key for the purpose of encrypting select data fields in the received SQL statement.

SQL wrapper identifies fields to be encrypted in the SQL statement received from web application step . These fields designated by the web application to be encrypted by the SQL wrapper are in addition to the fields encrypted by the client computer . The database client uses a field encryption extended data definition language feDDL to define a schema with an encryption attribute for each data field. A database administrator creates the schema for each table which includes fields to be encrypted by SQL Wrapper . The files relating to the schema are accessible by SQL Wrapper . SQL wrapper uses the schema to identify which fields need encryption within the received SQL statement.

SQL wrapper encrypts the identified fields in the SQL statement with key2 or the second encryption key step . SQL wrapper may encrypt data using any key encryption algorithm available to a person of ordinary skill in the art. Examples of key encryption algorithms include but are not limited to a symmetric key algorithms like AES CASTS RC4 DES 3DES or b asymmetric key algorithms. In the case of asymmetrical algorithms both encryption and decryption keys must be transmitted.

SQL wrapper forwards the authentication information received from web application for the connection to storage application step . Web application created the connection to storage application . SQL wrapper uses the connection to send SQL statements to storage application and to receive a result from storage application .

SQL wrapper transmits the SQL statement to storage application on server computer over network step . In the preferred embodiment the SQL statement includes SQL commands and at least one field of encrypted data. SQL wrapper transmits the SQL statement to storage application for standard processing. In the preferred embodiment if data is being stored in storage device storage application processes a standard SQL INSERT command. In the preferred embodiment if data is being retrieved from storage device storage application processes the SQL command as a search query where search values equal stored data . Storage application compares at least one encrypted search value with the encrypted fields of stored data in the table and identifies a result i.e. set of table rows meeting the requirements. Comparing encrypted search values to encrypted stored values means no operation other than is available. An example of a search clause on an encrypted field may be SELECT FROM Schema.Tablename WHERE socialsecuritynum BGJKLMQNPRIP . The field socialsecuritynum is an encrypted field and the number BGJKLMQNPRIP represents the encrypted form of the number entered by the user as a search value via UI . Multiple search values for multiple table fields may be included in the SQL statement and each search value may be compared with stored data in the same manner. In the instance of a query where no encrypted fields are being searched the SQL command may perform any type of comparison of search values to stored values . A person skilled in the art will recognize that SQL statements or queries may be more complex than shown in the illustrative examples and any combination of search terms for both encrypted and unencrypted fields may be included in the same SQL statement.

SQL wrapper receives a result from storage application over network step . Successful completion of the SQL statement by storage application acting on storage device results in an error message a confirmation message or a result being transmitted to SQL wrapper from server computer over network . In the case of an SQL SELECT statement a result may be a set of records retrieved from the table in storage device and transmitted to SQL wrapper . In the case of an SQL INSERT statement a set of records may be inserted into the table in storage device and a confirmation message may be transmitted to SQL wrapper . In the case of an SQL DELETE statement a set of records may be deleted from the table in storage device and a confirmation message may be transmitted to SQL wrapper . In the case of an SQL UPDATE statement a set of records may be updated in the table in storage device and a confirmation message may be transmitted to SQL wrapper . A person skilled in the art will recognize other SQL statements are possible and may be executed by storage application .

SQL wrapper identifies fields in the result to be decrypted step . In one embodiment if data was stored in storage device the result may be a message indicating the task completed without errors. Storage application creates the message transmits it to SQL wrapper and then SQL wrapper transmits it to web application . Web application transmits the message to browser and browser displays the message to the user via UI . If data was retrieved from storage device subsequent to a search query the result may be one or more records of data transmitted to SQL wrapper . SQL wrapper uses the schema to identify at least one data field needing to be decrypted in the one or more records of the result.

SQL wrapper decrypts the at least one identified data field needing decryption with key2 or the second encryption key step .

SQL wrapper deletes key2 or the second encryption key step . The second encryption key is no longer needed and SQL wrapper removes key2 from memory. This prevents a hacker from retrieving the key when the key is not in use.

SQL wrapper transmits the decrypted result to web application step . In the exemplary embodiment if data was stored in storage device the result may be a message indicating the task completed with or without errors. In this case SQL wrapper transmits the message to web application . In the preferred embodiment if data was retrieved from storage device SQL wrapper transmits the decrypted result to web application wherein the result may include at least one decrypted data field.

Computing processing devices server computers and and client computer include respective sets of internal components and external components illustrated in . Each of the sets of internal components includes one or more processors one or more computer readable RAMs and one or more computer readable ROMs on one or more buses one or more operating systems and one or more computer readable tangible storage devices . The one or more operating systems and program storage application in server computer program SQL wrapper in server computer program web application in server computer and programs browser and plug in in client computer are stored on one or more of the respective computer readable tangible storage devices for execution by one or more of the respective processors via one or more of the respective RAMs which typically include cache memory . In the illustrated embodiment each of the computer readable tangible storage devices is a magnetic disk storage device of an internal hard drive. Alternatively each of the computer readable tangible storage devices is a semiconductor storage device such as ROM EPROM flash memory or any other computer readable tangible storage device that can store and retain a computer program and digital information.

Each set of internal components also includes a R W drive or interface to read from and write to one or more portable computer readable tangible storage devices such as a CD ROM DVD memory stick magnetic tape magnetic disk optical disk or semiconductor storage device. The program storage application in server computer program SQL wrapper in server computer program web application in server computer and programs browser and plug in in client computer can be stored on one or more of the respective portable computer readable tangible storage devices read via the respective R W drive or interface and loaded into the respective hard drive or computer readable tangible storage device . The term computer readable storage device does not include a signal propagation media such as a copper transmission cable an optical transmission fiber or a wireless transmission media.

Each set of internal components also includes a network adapter or interface such as a TCP IP adapter card or wireless communication adapter such as a 4G wireless communication adapter using OFDMA technology . The program storage application in server computer program SQL wrapper in server computer program web application in server computer and programs browser and plug in in client computer can be downloaded to the respective computing processing devices from an external computer or external storage device via a network for example the Internet a local area network or other wide area network or wireless network and network adapter or interface . From the network adapter or interface the programs are loaded into the respective hard drive or computer readable tangible storage device . The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

Each of the sets of external components includes a display screen a keyboard or keypad and a computer mouse or touchpad . Each of the sets of internal components also includes device drivers to interface to display screen for imaging to keyboard or keypad to computer mouse or touchpad and or to display screen for pressure sensing of alphanumeric character entry and user selections. The device drivers R W drive or interface and network adapter or interface comprises hardware and software stored in computer readable tangible storage device and or ROM .

The programs can be written in various programming languages such as Java and C including low level high level object oriented or non object oriented languages. Alternatively the functions of the programs can be implemented in whole or in part by computer circuits and other hardware not shown .

Based on the foregoing a computer system and program product have been disclosed in accordance with the present invention. However numerous modifications and substitutions can be made without deviating from the scope of the present invention. Therefore the present invention has been disclosed by way of example and not limitation.

