---

title: Method and system for programming virtual robots using a template
abstract: Disclosed is a method for processing input entered by a user and providing at least one response maintained by an administrator in a system for autonomously processing requests. A template is provided to the administrator, wherein the template includes at least one field to elicit specific information from the administrator. The information is received from the administrator into the template. The information is saved for use in providing the at least one response in reply to a request from a user. An apparatus for performing this method is also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930296&OS=08930296&RS=08930296
owner: Avaya Inc.
number: 08930296
owner_city: Basking Ridge
owner_country: US
publication_date: 20130322
---
The present invention is directed to a method and system for the use of virtual robots Bots to autonomously process requests. More particularly this invention is directed to a method and system for the mass customization of Bots by administrators having no specialized knowledge or experience in the art.

For the purposes of the present invention data maintained in a database file or other source of structured and or tagged data is referred to herein as structured data . So called virtual robots or Bots are software programs that interact and or communicate with users human machine or otherwise and take actions or make responses according to input from these users. Bot refers to any program which interacts with a user in some fashion and should not be assumed to refer only to physically embodied robots. Input refers to any description of a situation the Bot may encounter although the most common inputs are textual inputs from users inputs can be actions taken by users external circumstances or even events internal to the Bot such as an internal alarm clock.

A common use of a Bot is as an interface to a web site where the administrator of that site the administrator has programmed the Bot to answer simple inquiries the input that are typically asked by visitors to the site. The Bot finds a pattern consisting of text and or code that best matches the input and then takes the action that it is programmed to take in connection with that pattern the response . The response can take the form of a text string that contains the information sought by the user which text string can be transmitted to the user in text form read by a text to speech engine played back to the user as a wave file or otherwise transmitted to the user in a comprehensible form or the response can be any other action of which a program is capable for example opening a web page turning a circuit on or off initiating or ending a program and the like.

It is desirable that the Bot be scripted to anticipate the inputs that it is likely to receive and the situations that it is likely to encounter. Because users may ask questions or otherwise create inputs in a wide variety of different ways a large variety of patterns are required to comprehensively anticipate the variety of inputs that the Bot may receive. This complexity is greatly increased by the number of different ways a user may create any particular input. For example if a user wants to know the name of the president of the Administrator s company the user may input a text string reading Who is your President What s the President s name or even Who s the top dog at AdminCo. 

Historically Bots have been scripted manually by having one or more human scripters write patterns for the Bot and tie those patterns to appropriate responses. Such human scripting although usually necessary has a number of drawbacks. First scripting is time consuming. A typical Bot may contain thousands of possible patterns and responses all of which need to be scripted. Second the list of patterns and responses is usually incomplete. It is almost impossible for the scripters to comprehensively cover all possible patterns for a large body of information and desired responses. Third there are many opportunities for misspellings or other errors. The greatest part of the time expense and difficulty of creating a Bot therefore is in the process of scripting it. Additionally as the information changes or is added to over time the time expense and difficulty of maintaining the patterns and responses that refer to the information are very substantial as well.

Scripting heretofore has been done in some form of code either complex or simple and has always required some level of aptitude and training. Furthermore it takes a great deal of experience to successfully anticipate the questions that may be asked in any situation making that task unsuited for lay people or lower pay grade workers.

Thus there is a need in the art to have a method of scripting a Bot which successfully customizes the Bot to an individual application using knowledge that can be given to the Bot by any lay person or lower level employee.

It is an object of the present invention to provide a method of creating Bots according to patterns or text strings that are written in a very high level language that closely resembles a human natural language and are intended to anticipate the inputs that may be received from users.

It is a further object of the present invention to enable administrators with no specialized background training or expertise to enter information that will be incorporated into patterns and used by the Bot thereby enabling the Bot to correctly respond to a multitude of different questions with the information the administrator provides.

The present invention meets these objectives by providing a method whereby an administrator with no special skills or knowledge can input information into a template. The information is manipulated by an editor to create a wide range of rules which are provided to an engine together with other rules of a background nature if desired . The rules enable the engine to provide responses to a wide range of inputs without any further programming or action on the part of the administrator. In addition the information will be saved and can be changed or edited later by the administrator.

The method according to the present invention includes inputting and saving the information inserting the information into rules and editing the information.

A complete understanding of the present invention will be obtained from the following description when taken in connection with the accompanying drawing figures wherein like reference characters identify like elements throughout.

The general architecture of the present invention will now be described. Referring to an operating environment of the present invention is depicted. The environment can be characterized generally into three sections a front end section a Bot processor section and an administration section .

The front end section is generally an environment in which a user interacts with a Bot connection interface possibly via a user interface that may be connected to the Bot connection interface via a network . The user interface can be anything capable of receiving human or machine language input including without limitation a computer a Personal Digital Assistant PDA a telephone or a pager. The user interface will also typically have some form of client software installed to provide a text box buttons or other method for the entry of user inputs and some method for displaying intelligible responses from the Bot. The network can be any system capable of transmitting such input over any distance including without limitation a local area network LAN the Internet a wifi wireless fidelity cellular or other wireless data connection a virtual private network VPN or simply a hard wired telephone system. The user can also simply act directly upon the Bot connection interface . In such circumstances as well as in circumstances such as telephony where the user input will not support client software client software will usually be resident in the Bot connection interface to facilitate user interaction. It will be appreciated that many other means of connection to the Bot processor section are well known to those skilled in the art and that the present invention should not be limited to any particular aspects of the general operating environment as disclosed herein.

In a common use of Bot technology the user connects to a site where the user interface includes client software . The advantage for the site developer is that the user may have a help or information request that is easily handled via a Bot using the client software . It is not uncommon to find sites having a list of FAQs Frequently Asked Questions which serve the purpose of handling very low level user concerns and questions. However where there are a substantial number of FAQ s pointing and clicking through web pages becomes an inefficient method of finding the required information as does searching with a conventional search engine. Bots provide a more efficient method of obtaining information and of handling more advanced questions or interactions with the site.

In the operating environment of this embodiment of the present invention the Bot connection interface consists of hardware an operating system and any application software necessary to support a Bot engine and enable the Bot engine to receive inputs and send responses in a chosen communications mode. Necessary application software in the Bot connection interface may include an email application an instant messaging application an internet relay chat IRC application voice recognition software or other applications as necessary to support the chosen mode or modes of communication between the Bot engine and the user . The client software along with structured data and script storage may be resident on the Bot connection interface although these may also be hosted on a remote computer and made available to the Bot engine via a network or other connection.

As the user sends inputs the Bot engine receives the inputs processes the inputs and generates responses. Typically where the user is human a two way communications dialogue occurs between the user and the Bot engine in that the user may ask questions make declarative statements and perform other normal communications patterns that typify modes of human communications. For the purposes of the present invention communications is intended to be a broad concept. Indeed suitable communications may be in the form of written or spoken language graphics URLs or the like that may be passed to and from a user and an automatic interface program such as the present invention.

In turn the Bot engine accepts the inputs generated by the user and generates responses by processing the inputs according to a script or scripts that are stored in the script storage . As will be discussed in greater detail in connection with and . the scripts contain rules and are typically created at the administration section as necessary or appropriate for the specific use to which the Bot will be put. For example if the site using the Bot engine is a site for a reseller of personal computers then the scripts should be designed to handle questions and discussions concerning personal computers and their peripherals. Thus the administration section will generate the scripts such that the scripts will guide the discussion concerning many computer related topics. The scripts are then stored for use by the Bot engine or alternatively the scripts may be compiled by a compiler and the compiled code incorporated into an engine see for example U.S. Pat. No. 6 532 401 .

The administration section consists of an administrator an administrator interface and an editor . The administrator is the human being who creates the scripts that govern the behavior of the Bot engine . Typically this human being accomplishes this task through the use of the administrator interface that has a text box or boxes or other entry points for the input of patterns as well as a response or responses associated with that input. The administrator interface may also provide various tools to facilitate the process of inputting the patterns in an organized and efficient way. The editor takes the patterns provided by the administrator and associates them with the appropriate response or responses. The administrator interface and the editor may be created as a single unit or may be designed to reside in separate computers. It will be appreciated by those skilled in the art that the scripts can be written by human administrators or by automated or partially automated script creation tools and that the present invention should not be limited to scripts written by humans or otherwise.

Although gives a general description of various operating environments in which Bots may exist it will be appreciated that many other operating environments are obvious to those skilled in the art and that the scope of the present invention should not be so limited to the exemplary descriptions as given above.

The Bot processor section will now be described. provides a detailed depiction of the processes used by the Bot engine according to the present invention. In step inputs are brought to the Bot engine via the Bot connection interface as shown . The Bot engine takes the input in step and then typically but not necessarily preprocesses the input to some degree to enable recognition and added functionality in step . Examples of some typical functions that may be contained in the preprocessing of input in step are detailed below. The input is then taken to an input recognizer component of each rule in the script where it is determined for each rule whether the input is recognized step . Step is repeated for each rule for so long as the input is not recognized. Once the input recognizer component of a rule recognizes an input in step the process continues at step to the next layer of the rule which is either a response layer or routine or a logic layer . Details of the workings of the input recognizer the logic layer and the response layer are provided below in connection with . and .

The preprocessing of input step will now be described. provides a detailed depiction of the processes used by the preprocess input step if utilized of the Bot engine according to the present invention. The functions contained in the preprocess input step can vary greatly among different Bot designs depending upon the overall strategy employed by the designer. Typically the preprocess input step is composed of processes that are intended to either i standardize the inputs in some regard in order to reduce the complexity of the input faced by the engine or ii extract some level of structure or meaning from the input and embody this as code so that the Bot engine can manipulate or manage it. Examples of the first purpose include a remove punctuation process a spell check process an expand contractions process and a standardize case process. Examples of the second purpose include a lexical analysis process a semantic analysis process and other translation processes .

In the embodiment described herein the preprocess input step begins by taking the input in step and then proceeding to remove punctuation in step . Removing the punctuation from a text string removes the ambiguity created by the fact that people punctuate their sentences differently and that some people forget to punctuate at all.

Next the input is spell checked at step so that spelling errors can be removed further minimizing text variation due to error or variant usage by the user .

By proceeding to expand contractions in step the input is further standardized so that the Bot engine can recognize contracted words for example what s as being identical to its constituent parts what is further reducing the complexity of the inputs that the Bot engine must be able to recognize.

The next step standardizes case allowing the Bot engine to recognize for example the The and THE as being identical and removing as a variable the scheme of capitalization that may have been employed by the user .

The input is then passed to lexical analysis in step where processes relating to the meaning of words are performed. As an example lexical analysis might parse or partition the input to determine those text strings that are synonymous at least for the administrator s purposes with other text strings for example I want I need and Give me Typically these text strings would be replaced with a text or code string that stands in for them in the input allowing a single rule to recognize an input phrased in any of these different ways.

Next the input goes through semantic analysis in step which is useful in identifying parts of the sentence for example the subject of the sentence the object of the verb or the referent of a pronoun. Depending upon the methodologies used this step can be useful for pattern recognition and or for maintaining context in a conversation between the user and the Bot.

Finally the input is passed through other translations in step where the other translations are any other processes whereby strings are added to or substituted for portions of the input in order to add functionality to the Bot. These processes may include language translation substitutions of machine language for natural language or other methodologies.

Those skilled in the art will readily understand that some or all of the above exemplary processes might be included at this stage in various orders and configurations and that there are other processes of similar purpose that may be undertaken in a Bot suitable for the present invention. Similarly some or all of these objectives may be achieved by incorporating the functionality into the rules used to recognize inputs.

The recognition of input step will now be described. depicts the structure of an embodiment of a script and its component parts suitable for the purposes of the present invention. The script contains one or more rules that are in turn composed of an input recognizer and one or more response layers . Some rules may also contain a logic layer enabling them to fire one or more responses of those that are available. The detailed processes of each of these components are described in more detail below. As those skilled in the art will readily understand there are many different strategies and methods by which the rules can be ordered grouped or sorted in order to enhance the speed or accuracy of the Bot engine and that the present invention should not be limited to any particular method or strategy of ordering grouping or sorting the rules .

The steps of the input recognizer are depicted in more detail in . The first step in input recognition is typically the matching of the preprocessed input to a pattern contained in a set of pattern matches of the input recognizer . A pattern is a coded text string that represents a set of strings. A string matches a pattern if the string is in the set that the pattern represents. Pattern matching may be accomplished by for example regular expressions. As those skilled in the art will also be aware there are many different languages and protocols in which such pattern matchings are commonly carried out including without limitation Perl Java PHP and others and that the present invention should not be limited by the use of any particular query language or protocol. If there is no match found in the pattern matches the input will not be recognized and the Bot engine will continue to search for a match in other rules . If a pattern match is found for most Bot engines the rule will then go into effect.

The administrator has the option of creating one or more statement input validators involving the querying of the structured data which if true will result in the successful recognition of the input in step and the effectiveness of the rule and which if false will provide for the non recognition of the input in step by the input recognizer with the result that the Bot engine will continue to seek for a matching pattern in other rules . Each of these statement validators is tested in turn in step for so long as they continue to be valid. If any statement validator is invalid the input is not recognized in step . If all are valid the input is recognized in step .

There can be any number of statement validators that work with pattern matches in the input recognizer or none at all. Upon completion of pattern matches and validation of the statement validators if any contained in the input recognizer the input is ultimately recognized or not recognized . If recognized the process continues to the next layer of the rule whether that is a response layer that generates a response to be transmitted to the user or a logic layer that chooses between the various responses to be used in the response layer .

Those skilled in the art will readily understand that the steps of the input recognizer might occur in various orders or contemporaneously with each other and configurations and that there are other processes of similar purpose that may be undertaken in a Bot suitable for the present invention.

The generation of responses will now be described. The next step in the execution of a rule following recognition of an input at step by the input recognizer is typically to go to a response layer the purpose of which is to obtain and prepare the appropriate response to the user s input. A typical data flow for a response layer simply involves getting the response in step and sending it to the connection interface in step . A response can typically consist of i text ii code to be run in the user interface and or iii code to be extracted and run locally before sending the response to the Bot connection interface . The response may consist entirely of text where this is appropriate. However more complexity and functionality can be provided by adding code to the response. The use of code allows for dynamic information to be added to the answer and is typically used for frequently changing information such as the time stock quotes weather or the like. Most typically the code is non extractable and is sent to the Bot connection interface in step to be sent to and run in the user interface bringing a web page running a java applet or taking some other action that brings the required information to the user . Where it is desirable to embed the information provided by running the code in the response the response is determined to contain extractable code in step the code is extracted in step and the code is run locally in step so that the dynamic information required is embedded in the response in step before transmission to the Bot connection interface in step .

A rule can also be designed to employ a logic layer as shown in . The purpose of the logic layer is neither input recognition nor response generation but rather the choosing of an appropriate response upon recognition of an input. This is accomplished by the use of a logical function in step . The logical function step may result in a random choice of responses choosing responses in rotation or choosing the proper response after appeal to some outside piece of information for example the time or after querying the structured data using simple queries and or any of the statement validators described herein. In this case the truth or falsity of the logical statement in step in the statement validator would result in a choice in step between two or more different results responses in step . It is important to distinguish between such a choice between results in step and the above described function of the statement validator so as to enable an input recognizer to either recognize or not recognize an input.

The present invention is principally located in the administration section of the Bot but posts information that may ultimately be held in the script storage and or in the structured data of the Bot processor.

The process of inputting information will now be described. Referring to FIGS. . . the administrator interface contains a template for the input of information in step . The template provides an opportunity for the administrator to provide information in a standardized format. This is accomplished by a page application or other user interface containing fields for example text boxes check boxes drop down boxes or the like that are labeled or otherwise intended to elicit specific pieces of information from the administrator . Many variations on the template are possible including without limitation providing a series of questions to be answered by the administrator e.g. What is your company name What is your company address providing the administrator with tables to be filled in with relevant information e.g. a corporate organization chart with names titles phone numbers email addresses or the like and interviewing the administrator via Bot or human interaction and then embodying the information in some form of template or table. The process is initiated with the specific purpose of eliciting individual pieces of standardized information from the administrator . At the end of the process the administrator has provided the administrator interface with individual pieces of information such as names addresses slogans product descriptions or the like that are specific to the administrator s company or entity.

Referring again to FIGS. . . the process of saving information will now be described. Following the input of information in step the editor saves the information in step so that it will not be lost. As those skilled in the art will know this can be done on manual command by the administrator or automatically upon the occurrence of certain events such as the passage of time or the closing of the template . There are at least three places where the information can be saved. The information can be saved i as part of the template in step ii as structured data in step or iii into the rules at step without any intermediate storage steps by directly inserting the information into the rules . For some embodiments it is desirable to store the information in more than one place depending upon the purposes for which the information will be used. For example the information stored in the structured data may be used solely to refresh the template while the information stored in the rules may be used to run the Bot engine .

The ability to save the information within the template at step depends upon the structure and programming of the template to possess such a storage capability. Storing the information as structured data in step involves saving the information within each of the fields to a separate field or location within the structured data . In order to save the information by inserting information into the rules at step a more elaborate procedure is necessary as is described in more detail immediately below.

Referring to the process of inserting information into the rules will now be described. For most embodiments of the invention it is necessary to insert the information entered by the administrator into the rules in step before the Bot engine will be able to access the information and use it to recognize and respond to inputs. However it should be noted that it is also possible to have the Bot engine access the information from the structured data or from the template depending on where the information is saved.

Referring to and first the editor obtains the rules from script storage in step . The editor may obtain all of the rules in the script storage but in the preferred embodiment may include only those rules contained in a template information script as these are the only rules that should be affected by the information. Next for each rule the editor checks to see if the input recognizer needs information in step . The need for information may be signaled either by a specific tag or instruction embedded in a text string used by the input recognizer or by the recognition by the editor of a piece of code in the input recognizer which calls for a specific piece of information or by any such tagged text string code or similar instruction that is by a signifier . If there is such a signifier the editor obtains the necessary information from a corresponding field in the template in step and inserts the information into the input recognizer in step . This continues at step for all rules until the process is done. Similarly for each rule the editor checks to see if the response layer needs information in step as signaled by a signifier described above in the response layer . If there is such a signifier the editor obtains the necessary information in step and inserts it into the response layer in step . This continues at step for all rules until the process is done. Finally for each rule the editor checks to see if the logic layer if present needs information in step as signaled by a signifier described above in the logic layer . If there is such a signifier the editor obtains the necessary information in step and inserts it into the logic layer in step . This continues at step for all rules until the process is done at step .

In a preferred embodiment each layer is checked across all rules before moving on to the next layer . Variations in method are possible such as checking all layers in each rule before moving on to the next rule .

Referring to and . . the process of editing information will now be described. Once the information has been saved in the appropriate manner and if desired inserted into the rules it is still desirable that the information be easily updatable within the template in step . In order to achieve this the editor obtains the information in step from wherever it has been stored. The processes used to obtain information depend on how the information is stored.

If the information has been stored as part of the template itself the information is automatically restored to the fields or other points of data entry as a function of the template .

If the information has been stored in the structured data the editor follows essentially the process . In this process for each field in the template the editor obtains instructions in step which indicate where the information for the field is to be found. Next the editor executes the instructions in step to obtain the information. The editor sends the information to the appropriate field in the template in step . The editor then determines if there are more fields for which to obtain information in step . If the answer is yes the editor repeats the process for each field until there are no more fields for which to obtain information. At this point all of the fields are filled with the appropriate information and the editor is finished with the get information process.

If the information has been stored by inserting the information into the rules in step the process used has some variability as set in processes . The process described above may be used to obtain information from the rules . For each field in the template the editor obtains instructions in step as to where to find the information. The editor executes the instructions to obtain the information in step from the appropriate rule and then sends the information to the field in step

Alternatively the processes of and may be used. The first step is to obtain the rules in step . Next the editor checks each rule for a signifier in step . If the rule has a signifier the editor either executes instructions to obtain the information associated with that rule in step or obtains tagged information contained in that rule in step . In either instance the information is then sent to the appropriate field in the template in step . The process is repeated until all of the rules have been checked.

Once the template has been repopulated with information by the process of obtaining information the administrator is free to use the input and save the information process as discussed above thus effectively updating the information contained in the template and anywhere else that the information has been saved.

The present invention enables a person to successfully customize a Bot for an individual application where the person uses knowledge that can be given to the Bot by any lay person or lower level employee. This results in several important advantages. Information can be inexpensively input and fully effective rules formed by administrators working at pay grades substantially below that of a skilled programmer. Cost is further reduced by the fact that little or no training is required to accomplish this task. Speed to completion is dramatically enhanced as there is no actual scripting that needs to take place it all takes place automatically upon completion. The opportunity for error is greatly reduced and consistent effectiveness of the rules at responding to inputs is greatly enhanced dramatically increasing overall quality. The invention also provides a way to easily and consistently create and manage a large number of similarly tasked Bots.

It will be understood by those skilled in the art that while the foregoing description sets forth in detail preferred ordering of steps of the various processes other ordering of the steps are contemplated by the present invention.

It will be understood by those skilled in the art that while the foregoing description sets forth in detail preferred embodiments of the present invention modifications additions and changes might be made thereto without departing from the spirit and scope of the invention.

