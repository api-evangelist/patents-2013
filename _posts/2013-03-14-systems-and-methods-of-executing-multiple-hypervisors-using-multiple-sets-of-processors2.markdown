---

title: Systems and methods of executing multiple hypervisors using multiple sets of processors
abstract: An apparatus includes a primary hypervisor that is executable on a first set of processors and a secondary hypervisor that is executable on a second set of processors. The primary hypervisor may define settings of a resource and the secondary hypervisor may use the resource based on the settings defined by the primary hypervisor. For example, the primary hypervisor may program memory address translation mappings for the secondary hypervisor. The primary hypervisor and the secondary hypervisor may include their own schedulers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606818&OS=09606818&RS=09606818
owner: Qualcomm Incorporated
number: 09606818
owner_city: San Diego
owner_country: US
publication_date: 20130314
---
The present application is related to co pending U.S. patent application Ser. No. 13 828 183 entitled SYSTEMS AND METHODS OF USING A HYPERVISOR WITH GUEST OPERATING SYSTEMS AND VIRTUAL PROCESSORS and filed Mar. 14 2013. The present application is also related to co pending U.S. patent application Ser. No. 13 777 314 entitled EXECUTING AN OPERATING SYSTEM ON PROCESSORS HAVING DIFFERENT INSTRUCTION SET ARCHITECTURES and filed Feb. 26 2013. The content of each of the above referenced applications is incorporated by reference in its entirety.

The present disclosure is generally related to virtualization of operating systems using multiple hypervisors.

Advances in technology have resulted in smaller and more powerful computing devices. For example there currently exist a variety of portable personal computing devices including wireless computing devices such as portable wireless telephones personal digital assistants PDAs tablet computers and paging devices that are small lightweight and easily carried by users. Many such computing devices include other devices that are incorporated therein. For example a wireless telephone can also include a digital still camera a digital video camera a digital recorder and an audio file player. Also such computing devices can process executable instructions including software applications such as a web browser application that can be used to access the Internet and multimedia applications that utilize a still or video camera and provide multimedia playback functionality.

Computing devices such as mobile phones may include multiple processors. For example a mobile phone may include a central processing unit CPU sometimes referred to as an application processor and a digital signal processor DSP . Each processor may be better suited than the other processor s to perform certain computation tasks. For example the CPU which may act as the primary processor and may execute the mobile phone operating system may be more efficient in executing control code. such as web browser and user interface code. On the other hand the DSP may be more efficient than the CPU when executing signal processing and other math intensive functions. The CPU and the DSP may have distinct instruction set architectures. Thus applications designed to run on the CPU may be incompatible with the DSP and vice versa.

In certain situations it may be advantageous to execute multiple operating systems at a single computing device. In computing devices that execute multiple operating systems a hypervisor also known as a virtual machine monitor may be used to provide abstractions of available hardware resources to the operating systems. Thus the hypervisor may act as an operating system for the multiple operating systems. However it may be difficult to design a hypervisor that can be concurrently executed across sets of processors that have different instruction set architectures.

Systems and methods of hypervisor execution across multiple sets of processors are disclosed. In accordance with the described techniques one of the hypervisors in the system may be a primary hypervisor and the remaining hypervisors in the system may be secondary hypervisors. The primary hypervisor may run on a different set of processors than the secondary hypervisors. For example the primary hypervisor may be compatible with a different instruction set architecture than the secondary hypervisors.

The primary hypervisor may restrict the secondary hypervisors from performing certain operations and may instead force the secondary hypervisors to rely on the primary hypervisor for the performance of the restricted operations. For example the primary hypervisor may determine physical address mappings for the secondary hypervisors for security purposes e.g. to prevent situations in which multiple secondary hypervisors attempt to create a mapping to the same physical address .

The secondary hypervisors may perform certain operations without relying on the primary hypervisor. For example the secondary hypervisors may be able to perform task scheduling without intervention by the primary hypervisor. Enabling the secondary hypervisors to perform their own task scheduling may enable the secondary hypervisors to maintain quality of service QoS guarantees e.g. latency guarantees for guest operating systems executing on the secondary hypervisors.

In a particular embodiment an apparatus includes a primary hypervisor that is executable on a first set of processors and a secondary hypervisor that is executable on a second set of processors. The primary hypervisor is configured to program memory address translation mappings and the secondary hypervisor is configured to use the memory address translation mappings.

In another particular embodiment an apparatus includes a primary hypervisor that is executable on a first set of processors and a secondary hypervisor that s executable on the second set of processors. The primary hypervisor includes a first scheduler and the secondary hypervisor includes a second scheduler that is different from the first scheduler.

In another particular embodiment an apparatus includes a primary hypervisor that is executable on a first set of processors and a secondary hypervisor that is executable on a second set of processors. The primary hypervisor is configured to define settings of a resource and a secondary hypervisor that is configured to use the resource based on the settings.

In another particular embodiment a method includes retrieving by a secondary hypervisor executing on a second set of processors one or more memory address translation mappings programmed by a primary hypervisor executing on a first set of processors. The method also includes using the retrieved one or more memory address translation mappings during a data access operation.

In another particular embodiment an apparatus includes first means for processing and second means for processing. The apparatus also includes means for programming memory address translations where the means for programming is executable on the first means for processing. The apparatus further includes means for using the memory address translations where the means for using is executable on the second means for processing.

In another particular embodiment a non transitory computer readable medium includes instructions that when executed by a computer cause the computer to retrieve by a secondary hypervisor executing on a second set of processors one or more memory address translation mappings programmed by a primary hypervisor executing on a first set of processors. The instructions when executed by the computer also cause the computer to use the retrieved one or more memory address translation mappings during a data access operation.

One particular advantage provided by at least one of the disclosed embodiments is an ability to support execution of multiple hypervisors on different sets of processors e.g. sets of processors having different instruction set architectures . Other aspects advantages and features of the present disclosure will become apparent after review of the entire application including the following sections Brief Description of the Drawings Detailed Description and the Claims.

For example the primary hypervisor may execute on one or more central processing unit CPU cores hardware threads in accordance with a first e.g. CPU specific instruction set architecture and the secondary hypervisor may execute on one or more digital signal processor DSP cores hardware threads in accordance with a second e.g. DSP specific instruction set architecture. It should be noted that the description of CPUs and DSPs herein is for example only. Other processors or sets of processors such as network processing units NPUs graphical processing units GPUs etc. may also be included in the system .

Each hypervisor may arbitrate access to the processors by one or more guest operating systems. The guest operating systems may communicate with the hypervisors using an application programming interface API a shared memory region or via some other mechanism. The primary hypervisor may include a first scheduler that is configured to perform local scheduling for guest operating system s that run on the first set of processors . Local scheduling by a hypervisor may refer to scheduling operations performed by the hypervisor for a guest operating system that executes exclusively on the set of processors corresponding to the hypervisor. For example the primary hypervisor may schedule virtual processors of a first guest operating system for execution on the first set of processors . Each of the virtual processors may correspond to a task of the first guest operating system e.g. a task created by an application executing on the first guest operating system .

The secondary hypervisor may include a second scheduler that is configured to perform local scheduling for guest operating system s that run on the second sets of processors . For example the secondary hypervisor may schedule virtual processors of a second guest operating system for execution on the second set of processors . Each of the virtual processors may correspond to a task of the second guest operating system e.g. a task created by an application executing on the second guest operating system . Thus from the perspective of the hypervisors each of the virtual processors is a schedulable entity. Conversely from the perspective of the guest operating systems and each of the virtual processors is a hardware resource abstraction.

The schedulers may use the same scheduling algorithm or may use different scheduling algorithms. For example in the first scheduler performs time slice scheduling and the second scheduler performs priority based scheduling. To illustrate the second scheduler may perform priority based scheduling based on the priorities of the virtual processors . It will be appreciated that by enabling each hypervisor to retain responsibility for local scheduling the system of may enable each hypervisor to maintain quality of service QoS guarantees. For example the second set of processors may correspond to a DSP in a mobile phone and the secondary hypervisor may execute a specific scheduling algorithm to comply with latency constraints for a guest real time operating system RTOS such as a modem operating system or an audio voice processing operating system.

Three types of memory addresses may be used in the system virtual addresses VAs intermediate physical addresses IPAs and physical addresses PAs . Each virtual address may be associated with a virtual address space and multiple virtual address spaces may be in use at the system . For example each guest operating system may use a different virtual address space. Each intermediate physical address may be associated with an intermediate physical address space and multiple intermediate physical address spaces may be in use at the system . For example each guest operating system may use a different intermediate physical address space. Physical addresses which can be used to directly access regions of memory e.g. random access memory RAM disk based memory cache memory register memory etc. and memory mapped devices e.g. input output I O devices may belong to a single physical address space.

When virtual addresses intermediate physical addresses and physical addresses are used in the system two types of address translation mappings may be defined in the system . A first type of address translation mapping may be from virtual address to intermediate physical address and a second type of address translation mapping may be from intermediate physical address to physical address. Thus a complete address translation mapping for a virtual address in the system may include a first stage translation from the virtual address to an intermediate physical address followed by a second stage translation from the intermediate physical address to a physical address. Examples of first stage and second stage translations are further described with reference to .

In a particular embodiment the tasks and the first guest operating system may refer to data stored in memory and memory mapped devices using virtual addresses that are part of a first virtual address space. The tasks and the second operating system may refer to data stored in memory and memory mapped devices using virtual addresses that are part of a second virtual space. Each of the guest operating systems may define first stage i.e. VA to IPA translations for their respective virtual address spaces. It will be appreciated that because IPAs may not directly be used to access memory or memory mapped devices allowing each guest operating system to define its own first stage translations may not pose a security risk.

The responsibility for determining physical address mappings i.e. second stage translations may be assigned solely to the primary hypervisor for security reasons. For example allowing only the primary hypervisor to determine mappings for physical addresses in memory may prevent a situation in which the secondary hypervisor attempts to define a physical address mapping that conflicts with a mapping defined by the primary hypervisor and or another secondary hypervisor. The secondary hypervisor may thus be a thin hypervisor that relies on the primary hypervisor for certain functions e.g. determining second stage translations .

To determine second stage translations the primary hypervisor may include a physical address translation mapping module . In a particular embodiment the physical address translation mapping module may program second stage translations and may determine configuration data e.g. a location of the second stage translations in memory . The physical address translation mapping module may program the second stage translations for all guest operating systems in system including guest operating systems that execute exclusively with respect to the second set of processors e.g. the guest operating system . As used herein a guest operating system may execute with respect to a particular processor or set of processors if at least one task of the guest operating system or at least one virtual processor corresponding to the task can be scheduled e.g. by a hypervisor for execution on the particular processor or set of processors. Thus the physical address translation mapping module may program second stage translations for both the first guest operating system as well as the second guest operating system .

When performing address translation for a virtual address provided by the second guest operating system the secondary hypervisor may rely on the primary hypervisor to provide the second stage translations . The secondary hypervisor may use the second stage translations provided by the primary hypervisor to perform processor virtualization. Thus the primary hypervisor may have read write RW access to the second stage translations and to the configuration data while the secondary hypervisor has read only RO access to the second stage translations and to the configuration data as shown in .

In a particular embodiment the primary hypervisor may include a startup shutdown module that is configured to startup and shutdown all guest operating systems including those guest operating systems that execute exclusively with respect to the second set of processors . Thus the startup shutdown module in the primary hypervisor may startup or shutdown the second guest operating system in response to a request from the secondary hypervisor .

In a particular embodiment the system may support concurrent execution of a single instance of a guest operating system on processors having different instruction set architectures. For example a third guest operating system may be concurrently executable on the first set of processors and the second set of processors . Virtual processors of the third guest operating system which correspond to tasks of the third guest operating system may be scheduled by either of the schedulers . The third guest operating system may define its own first stage translations but may rely on the primary hypervisor for the second stage translations .

During operation the guest startup shutdown module of the primary hypervisor may start the first guest operating system . The guest startup shutdown module may also start the second guest operating system in response to a request from the secondary hypervisor . The first guest operating system may schedule the virtual processors for execution on the first set of hardware processors and the second guest operating system may schedule the virtual processors for execution on the second set of hardware processors .

As memory is allocated in the system each of the guest operating systems may define respective first stage translations . All second stage translations may be defined by the physical address translation module of the primary hypervisor . The physical address translation module may also define resource settings e.g. the configuration data . Thus the primary hypervisor Ill may have read write access to the second stage translations and the configuration data e.g. to set up and modify page tables for all hypervisors in the system . The second stage translations and the configuration data may be accessed in read only fashion by the secondary hypervisor to perform address translation. For example the second stage translations may be loaded by the secondary hypervisor upon a context switch to one of the virtual processors . The system of thus provides a system in which the primary hypervisor defines settings of one or more resources e.g. address mappings for physical memory and the secondary hypervisor uses the settings of the resource defined by the primary hypervisor to perform various operations e.g. address translation .

In a particular embodiment each of the logical and or functional modules illustrated in e.g. the schedulers the physical address translation mapping module and the guest startup shutdown module is implemented using software instructions executable by the processors or . Alternately such functionality may be implemented using hardware devices such as a controller an application specific integrated circuit ASIC a field programmable gate array FPGA device or some other device. It should be noted however that the division of operations between various modules is for illustration only. In alternate embodiments functions described with reference to specific modules may be carried out using more or fewer modules.

The system of may thus enable concurrent execution of multiple hypervisors on different sets of processors including processors having heterogeneous instruction set architectures. Advantageously the system of may enable duplication of certain hypervisor operations while restricting duplication of other hypervisor operations. For example the system of may provide a computing environment that maintains QoS by enabling all hypervisors to perform scheduling. The system of may maintain security by enabling only a primary hypervisor to define second stage translations and startup shutdown guest operating systems.

Virtual addresses used by the virtual processors may be mapped by the first guest operating system to a first intermediate physical address space designated IPA1 as shown. Virtual addresses used by the virtual processors of the second guest operating system may be mapped by the second guest operating system to a second intermediate physical address space designated IPA2 as shown. As described with reference to intermediate addresses may be mapped to physical addresses and all such IPA to PA mappings may be defined handled by the primary hypervisor.

For example first virtual processor may use a range of virtual addresses that is mapped to a range of intermediate physical addresses . The second virtual processor may use ranges of virtual addresses that are mapped to ranges of intermediate physical addresses and . The third virtual processor may use ranges of virtual addresses that are mapped by the second guest operating system to ranges of intermediate physical addresses and . The fourth virtual processor may use a range of virtual addresses that is mapped to a range of physical addresses .

Each range of intermediate physical addresses may be mapped to corresponding ranges of physical addresses within a single physical address space designated PA as shown. In a particular embodiment address ranges from different intermediate physical address spaces may be mapped to the same physical addresses. For example illustrates that both ranges of intermediate physical addresses and are mapped to the same range of physical addresses . Such a shared mapping may indicate that both the first guest operating system and the second guest operating system have access to the data or memory mapped device corresponding to the range of physical addresses . For example the range of physical addresses may represent a virtualized device that is shared between guest operating systems and hypervisors such as a timer.

When a first hypervisor includes a memory mapped region for a virtual device but a second hypervisor does not include a memory mapped region for the virtual device the first hypervisor may provide its guest operating systems access to the virtual device but the second hypervisor may be unable to provide its guest operating systems access to the virtual device. When both hypervisors include memory mapped regions for the virtual device either hypervisor may provide its guest operating systems access to the virtual device.

The method may include retrieving by a secondary hypervisor executing on a second set of processors one or more memory address translation mappings programmed by a primary hypervisor executing on a first set of processors at . The one or more memory address translation mappings may include second stage translations e.g. IPA to PA translations . For example referring to the secondary hypervisor may retrieve the second stage translations that are programmed by the primary hypervisor .

The method may also include using the retrieved one or more memory address translation mappings during a data access operation at . The data access operation may be a read operation or a write operation. For example referring to the secondary hypervisor may use the second stage translations to during a read operation or a write operation to determine a particular physical address that is a target of the read operation or the write operation.

The method may also include scheduling by a scheduler of the secondary hypervisor a virtual processor for execution on the second set of processors at . The virtual processor corresponds to a task of a second guest operating system running on the secondary hypervisor. The scheduling is performed independent of a scheduler of the primary hypervisor. For example referring to the scheduler may schedule one of the virtual processors corresponding to one of the tasks for execution on the second set of processors . The operation of the scheduler may be independent of the operation of the scheduler of the primary hypervisor e.g. both schedulers may perform local scheduling using different scheduling algorithms independent of the other scheduler .

The method of may be implemented by a digital signal processor DSP a processing unit such as a central processing unit CPU a controller a field programmable gate array FPGA device an application specific integrated circuit ASIC another hardware device a firmware device or any combination thereof. As an example the method of can be performed by a processor that executes instructions as described with respect to .

Referring to a block diagram of an electronic device is shown. The electronic device includes a first set of processors such as central processing unit s CPU s and a second set of processors such as digital signal processor s DSP s each of which are coupled to a memory . The first set of processors and the second set of processors may have different instruction set architectures. In an illustrative embodiment the first set of processors is the first set of processors of and the second set of processors is the second set of processors of . The electronic device or components thereof may be included in a set top box a music player a video player an entertainment unit a navigation device a communications device a personal digital assistant PDA a fixed location data unit a computing device or any combination thereof.

The memory may be a tangible non transitory computer readable or processor readable storage medium that includes executable instructions . The instructions may be executed by processor s such as the sets of processors to perform various functions and methods described herein including the method of . The memory may also store instructions corresponding to a primary hypervisor e.g. the primary hypervisor of a secondary hypervisor e.g. the secondary hypervisor of and one or more guest operating systems e.g. one or more of the guest operating systems and or of .

In a particular embodiment the sets of processors the display controller the memory the CODEC and the wireless controller are included in a system in package or system on chip device . In a particular embodiment an input device and a power supply are coupled to the system on chip device . Moreover in a particular embodiment as illustrated in the display the input device the speaker the microphone the antenna and the power supply are external to the system on chip device . However each of the display the input device the speaker the microphone the antenna and the power supply can be coupled to a component of the system on chip device such as an interface or a controller.

In conjunction with the described embodiments an apparatus includes first means for processing and second means for processing. For example the first means for processing may include a hardware processor such as a processor in the first set of processors of or the first set of processors of one or more other devices or circuits to process data or any combination thereof. The second means for processing may include a hardware processor such as a processor in the second set of processors of or the second set of processors of one or more other devices or circuits to process data or any combination thereof. In a particular embodiment the first means for processing is associated with a first instruction set architecture and the second means for processing is associated with a second instruction set architecture that is different from the first instruction set architecture.

The apparatus also includes means for programming memory address translations where the means for programming is executable on the first means for processing. For example the means for programming may be the physical address translation mapping module of the primary hypervisor of one or more other devices circuits modules or instructions to program memory address translations or any combination thereof. The apparatus may further include means for using the memory address translations where the means for using is executable on the second means for processing. For example the means for using may include the secondary hypervisor of the secondary hypervisor of one or more other devices circuits modules or instructions to use memory address translations or any combination thereof.

The apparatus may include first means for scheduling virtual processors for execution on the first means for processing and second means for scheduling virtual processors for execution on the second means for processing. For example the first means for scheduling may include the first scheduler of one or more other devices circuits modules or instructions to schedule virtual processors for execution or any combination thereof. The second means for scheduling may include the second scheduler of one or more other devices circuits modules or instructions to schedule virtual processors for execution or any combination thereof.

Those of skill would further appreciate that the logical blocks configurations modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software executed by a processor or combinations of both. Various illustrative components blocks configurations modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or processor executable instructions depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present disclosure.

The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied or implemented directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in random access memory RAM flash memory read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers a hard disk a removable disk a compact disc read only memory CD ROM or any other form of non transient storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an application specific integrated circuit ASIC . The ASIC may reside in a computing device a communication device or a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a computing device a communication device or a user terminal.

The previous description of the disclosed embodiments is provided to enable a person skilled in the art to make or use the disclosed embodiments. Various modifications to these embodiments will be readily apparent to those skilled in the art and the principles defined herein may be applied to other embodiments without departing from the scope of the disclosure. Thus the present disclosure is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope possible consistent with the principles and novel features as defined by the following claims.

