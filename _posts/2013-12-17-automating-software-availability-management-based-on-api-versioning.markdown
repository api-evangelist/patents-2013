---

title: Automating software availability management based on API versioning
abstract: A method is disclosed for automating software availability management based on application program interface (API) versioning. The method includes receiving a call to a first version of an API method from a software application. The method includes retrieving software configuration information for the software application, the software configuration information including a set of supported versions of the API method. The method includes retrieving server configuration information for a server computing device, the server configuration information including a set of available versions of the API method. The method then includes determining availability of the server computing device to support the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262237&OS=09262237&RS=09262237
owner: International Business Machines Corporation
number: 09262237
owner_city: Armonk
owner_country: US
publication_date: 20131217
---
The present invention relates generally to the field of software development and more particularly to software program development tools.

An application programming interface API method specifies how some software components should interact with each other. An API method can be in the form of an API library which is essentially a basic library consisting of interfaces functions classes structures enumerations etc. for building a software application. An API library can also consist of specifications for routines data structures object classes and variables. In other cases an API method can come as just a specification of remote calls allowing an application to cause a procedure to execute in another address space. API method and libraries are usually specific to a given technology hence the API methods of a given language cannot be used in other languages unless the function calls are wrapped with specific adaptation libraries. When clients and servers interact they rely on pre determined versions of API methods on the client application side and compatible API method versions in the API library on the server side. Often the API versions in the API library are modified when changes are made on the server side. This leads to compatibility errors between client programs and server programs due to the versions required by the client not matching the versions available on the server. Compatibility errors require many changes to the client program to allow for software compatibility with the API library on the server.

Embodiments of the present invention disclose a method computer program product and computer system for automating software availability management based on application program interface API versioning. In an embodiment a computer processor receives a call to a first version of an API method from a software application. The computer processor retrieves software configuration information for the software application the software configuration information including a set of supported versions of the API method. The computer processor then retrieves server configuration information for a server computing device the server configuration information including a set of available versions of the API method. The computer processor then determines availability of the server computing device to support the software application.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system . Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code instructions embodied thereon.

Any combination of computer readable media may be utilized. Computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of a computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer a special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the present invention recognize that when client and server software programs interact with each other the programs rely on pre defined APIs. When modifications are made to a server version of the software program the API methods on the server may also be modified. These modifications lead to incompatibility between the client program and the server program because the changes to the server may not be communicated to the client program. Embodiments of the present invention recognize that being able to communicate required and available versions of API methods between client programs and server programs allows the client programs to automatically call a new version of an API method when available. Additions or changes that are made to pre existing APIs can be stored in a database on a server such as in an API library.

The present invention will now be described in detail with reference to the Figures. is a functional block diagram illustrating a distributed data processing environment generally designated in accordance with one embodiment of the present invention.

Distributed data processing environment includes client computing device and server computing device all interconnected over network . Network can be for example a local area network LAN a wide area network WAN such as the Internet or a combination of the two and can include wired wireless or fiber optic connections. In general network can be any combination of connections and protocols that will support communication between client computing device and server computing device .

Client computing device includes client program compatibility program and user interface UI . In various embodiments of the present invention client computing device can be a laptop computer a personal digital assistant PDA a smart phone or any programmable electronic device capable of communicating with server computing device via network . Client program can be any type of program on client computing device that communicates with server computing device through network . Client program can be for example a software application or a software component. UI may be for example a graphical user interface GUI or a web user interface WUI and can display text documents web browser windows user options application interfaces and instructions for operation. Client computing device may include internal and external hardware components as depicted and described in further detail with respect to .

Compatibility program determines a version of an API method required by a client program such as client program . Compatibility program checks to see if there is a version of the required API method on a server such as server computing device that can support calls from corresponding client program . Calls from client program confirm that an API library is installed and available on server computing device that supports the required version of the API method. An API library for example API library on server computing device is installed and can contain older and newer versions of various API methods required by the client program . Server program may modify or revise API methods for example by updating or changing the language for code writing for the client program . Compatibility program communicates between client program and server program and receives configuration information for the client program and the server program such configuration information including for the client program required versions of API methods and for the server program supported versions of API methods and any alternative versions.

If compatibility program determines server computing device does not have an API library that supports the required version of the API method for client program compatibility program issues an error for example an error displayed on UI to a user operating client computing device . While in compatibility program is included within client computing device one of skill in the art will appreciate that in other embodiments compatibility program may be located elsewhere within distributed data processing environment and can communicate with client computing device and server computing device via network .

Server computing device includes API library and server program . Server program can be any type of program on server computing device that communicates with client computing device through network . Server program can be for example a database or a communication program. Server program may update or modify API methods contained in API library that can be called by client program . Server program may also create new versions of API methods. API library contains versions of API methods that support client program . Server computing device can be a laptop computer a tablet computer a netbook computer a PC a desktop computer a PDA a smart phone or any programmable electronic device capable of communicating with client computing device via network and with other various components and devices within distributed data processing environment . In an embodiment of the present invention server computing device can represent a computing system utilizing clustered computers and components to act as a single pool of seamless resources when accessed through a network. This is a common implementation for data centers and for cloud computing applications.

Compatibility program receives a call for an API method step . Client program calls through compatibility program to a required version of an API method on server computing device . An API method corresponds to a client program or software application for example client program and each instance of client program may call different versions of the API method.

Compatibility program retrieves configuration information step . Compatibility program retrieves configuration information from client program API library and server program . Configuration information from client program may include for example a set of required versions or versions of API methods supported by client program . In an embodiment software configuration information from client program includes information mapping newer versions of API methods to previous alternative versions. Configuration information from API library and server program may include for example a set of available versions of API methods that support client program and updates to API methods from server program . In another embodiment of the present invention updates to API methods may also be created by a programmer. For example the API method version required by client program may be the current API version that the server still uses it may be an old version that the server still has access to or it may a version of an API method that is no longer available. Configuration information can further include a list of API versions that are supported by a given client program such as client program alternative versions for each API and all API versions associated with a server program such as server program . In an embodiment server configuration information from server program and API library includes mapped information between related versions including new and previous versions of API methods.

Compatibility program determines whether the server computing device is available to support client program for example whether API library supports the required version of the API method decision block . If API library does support the required version decision block yes branch which can be determined based on the server configuration information and the software configuration information compatibility program allows the call to the required version of the API method from client program step . If API library does not support the required version decision block no branch compatibility program determines if there is an alternative version of the API method available in API library decision block .

Compatibility program determines if there is an alternative version of the required API method decision block . To determine if there is an alternative version of the required API version available on server computing device compatibility program checks the server program configuration information to see if the server program is newer than the client program. Compatibility program can also check client program configuration information to determine whether client program is newer than the server program. In an embodiment the configuration information contains mapped information which maps a new version of the required API method to the old version. If compatibility program determines for example the client program is newer than the server program the mapped information allows compatibility program to determine if there is a compatible alternative version of the required API method available. If compatibility program determines that there is an alternative version of the required API method available decision block yes branch compatibility program redirects the call to the alternative version of the API method step . In an embodiment compatibility program requires marshalling the call by a translator to modify the received call to the required version of the API method to a call to the alternative version of the API method. If compatibility program does not find an alternative version of the required API method decision block no branch for example the set of available versions of the API method does not support the required version of the API method compatibility program issues an error for example by sending an error message to a user on a UI such as UI step .

In the exemplary embodiment depicted in client device contains client program A and configuration information . Server device contains server program A configuration information and API library . Both client program A and server program A are able to communicate via compatibility program . Compatibility program may reside on client device server device or may reside elsewhere and be accessible to both client device and server device via a network. Configuration information includes required versions of API methods for client program A and configuration information includes available versions of API methods for corresponding server program A. Compatibility program retrieves configuration information and configuration information from client program A and server program A respectively.

In an example a required version of an API method is defined within configuration information for client program A . Configuration information defines the API method including parameters and data types. Once a client program such as client program A is shipped changes to API interfaces or API behavior on the server such as server device may cause the client program to no longer work. Each new API version created and each API version revised is stored within API library on server program A . In an exemplary embodiment of the present invention the new API versions can be created by a programmer. Compatibility program can retrieve configuration information and configuration information and communicate with both client program A and server program A to determine which versions of API methods are compatible with client program A and which versions of API methods are available in API library .

Client computing device includes communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

Client program compatibility program and UI can be stored in persistent storage for execution by one or more of the respective computer processor s via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device a read only memory ROM an erasable programmable read only memory EPROM a flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices including between client computing device and server computing device . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Client program and compatibility program may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to client computing device . For example I O interface s may provide a connection to external device s such as a keyboard a keypad a touch screen and or some other suitable input device. External device s can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. client program compatibility program and UI can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display . Display provides a mechanism to display data to a user and may be for example a computer monitor or an incorporated display screen such as is used in tablet computers and smart phones.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

