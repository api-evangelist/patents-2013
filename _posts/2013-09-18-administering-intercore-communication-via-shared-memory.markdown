---

title: Administering inter-core communication via shared memory
abstract: Administering inter-core communication via shared memory may be carried out in a system in which each core is associated with a mailbox in a shared memory region. Such administration may include constructing a mailbox latency table describing latency of writing data from each core to each mailbox; constructing a locking latency table describing latency of each core in acquiring a lock for each of the mailboxes; identifying, from the tables, groups of a cores having mailbox and locking latency within a predefined range of acceptable latency values; and for each identified group of cores, establishing, for every pair of cores in the group of cores, a private channel, including pinning, for each private channel established for a pair of cores, one local memory segment per core.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223505&OS=09223505&RS=09223505
owner: GLOBALFOUNDRIES Inc.
number: 09223505
owner_city: Grand Cayman
owner_country: KY
publication_date: 20130918
---
The field of the invention is data processing or more specifically methods apparatus and products for administering inter core communication via shared memory.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In such a manner a torus network lends itself to point to point operations. In a tree network the nodes typically are connected into a binary tree each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . Although a tree network typically is inefficient in point to point communication a tree network does provide high bandwidth and low latency for certain collective operations message passing operations where all compute nodes participate simultaneously such as for example an allgather operation. In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers.

In some parallel computers each compute node may execute one or more tasks a process of execution for a parallel application. Each tasks may include a number of endpoints. Each endpoint is a data communications endpoint that supports communications among many other endpoints and tasks. In this way endpoints support collective operations in a parallel computer by supporting the underlying message passing responsibilities carried out during a collective operation. In some parallel computers each compute node may execute a single tasks including a single endpoint. For example a parallel computer that operates with the Message Passing Interface MPI described below in more detail may execute a single rank on each compute node of the parallel computer. In such implementations the terms task endpoint and rank are effectively synonymous.

Some parallel computers may include compute nodes with multiple processor nodes which utilize shared memory for inter core communications. In such embodiments each core may have a mailbox for communication amongst the cores. To utilize a core s mailbox another core takes a lock writes to the mailbox and releases the lock. Such locks however are very expensive in terms of latency. Also each core may have different physical access to another core s memory. That is a core may be physically farther away from the memory than another core. As such access is physically non uniform. Finally one way to address the locking issue is to utilize private shared memory access SMA channels between the cores. While use of such private channels eliminates the need for locks the solution is effectively unscalable. Consider for example a system with 8 cores. In such an example each core will have 8 private channels for a total of 64 channels. Consider another example with 100 cores. In such an example each core will have 100 private channels. As the number of cores grows the amount of private channels per core increases exponentially to the point that establishing maintaining and utilizing the channels is effectively impossible.

Methods apparatus and products for administering inter core communication via shared memory are disclosed in this specification. Each core may be associated with a mailbox in a shared memory region. In such embodiments administering inter core communication may be carried out by constructing a mailbox latency table describing latency of writing data from each core to each mailbox constructing a locking latency table describing latency of each core in acquiring a lock for each of the mailboxes identifying from the tables groups of a cores having mailbox and locking latency within a predefined range of acceptable latency values and for each identified group of cores establishing for every pair of cores in the group of cores a private channel including pinning for each private channel established for a pair of cores one local memory segment per core.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for administering inter core communication via shared memory in accordance with the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for administering inter core communication via shared memory according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of a data storage device an output device for the computer in the form of a printer and an input output device for the computer in the form of a computer terminal .

The parallel computer in the example of includes a plurality of compute nodes . The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations using a binary tree network topology and a point to point network which is optimized for point to point operations using a torus network topology. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a binary tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer .

The compute nodes of the parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on the parallel computer . Each operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Each compute node in the operational group is assigned a unique rank that identifies the particular compute node in the operational group . Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group . A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes . Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group . An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use in systems configured according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group . For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

A scatter operation like the broadcast operation is also a one to many collective operation. In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group . In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given datatype where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank receives the first sendcount data elements from the send buffer. Rank receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduction operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from compute node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer may be partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer . For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O node provides I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the compute nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

The parallel computer of operates generally for administering inter core communication via shared memory in accordance with embodiments of the present invention. One or more of the compute nodes in the parallel computer for example may include a plurality of processing cores also referred to from time to time in this specification as cores or processor cores . Each of the cores may be associated with a mailbox in a shared memory region. That is each of the cores may access the same memory region and within that memory region each core has a mailbox. A mailbox as the term is used in this specification refers to a specified portion of memory associated with a core through allocation pinning or the like the memory address of which is known by other cores and utilized for passing data between the cores. Writing to a mailbox is through use of a lock. A lock is a data that represents a core s current and exclusive access to another core s mailbox. Consider for example that Core  intends to write data to Core  s mailbox. Core  will first acquire a lock from Core . Such acquisition may be carried out in various ways. For example a core may be configured to acquire a lock through atomic hardware operations or through out of band non mailbox messaging. Effectively Core  in this example must request mailbox access from Core . If no other core holds the lock at the time of the request Core  grants exclusive access to Core . Core  then writes the data into the mailbox of Core  and upon completion releases the lock by informing Core  that the Core  no longer requires access. Such lock acquisition however may be time consuming.

To that end one or more compute nodes of may be improved for administering inter core communication via shared memory in accordance with embodiments of the present invention. Such administration may include constructing a mailbox latency table describing latency of writing data from each core to each mailbox constructing a locking latency table describing latency of each core in acquiring a lock for each of the mailboxes identifying from the tables groups of a cores having mailbox and locking latency within a predefined range of acceptable latency values and for each identified group of cores establishing for every pair of cores in the group of cores a private channel including pinning for each private channel established for a pair of cores one local memory segment per core.

Administering inter core communication via shared memory according to embodiments of the present invention may be generally implemented on a parallel computer that includes a plurality of compute nodes organized for collective operations through at least one data communications network. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processing cores its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an example compute node useful in a parallel computer capable of administering inter core communication via shared memory according to embodiments of the present invention. The compute node of includes a plurality of processing cores as well as RAM . The processing cores of may be configured on one or more integrated circuit dies. Processing cores are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node.

Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms. In the example of the application also includes a core administration process which may be configured for administering inter core communication via shared memory. Although the core administration process is depicted as a user level application process stored in RAM in the example of readers of skill in the art will immediately recognize that such a process may be implemented in a variety of ways such as for example an operating system level process a firmware module or a Basic Input Output Service BIOS module.

The example core administration process of is configured to administer inter core communication via shared memory where each core is associated with a mailbox in a shared memory region by constructing a mailbox latency table describing latency of writing data from each core to each mailbox. The example core administration process of may also construct a locking latency table describing latency of each core in acquiring a lock for each of the mailboxes. The example core administration process of may also identify from the tables groups of a cores having mailbox and locking latency within a predefined range of acceptable latency values and for each identified group of cores establish for every pair of cores in the group of cores a private channel .

The example core administration process may establish a private channel by pinning for each private channel established for a pair of cores one local memory segment per core. The term local refers to a memory segment s proximity to a core as defined by physical distance or latency of communications.

Pinning the local memory segment for a core may be carried out in various ways. In some embodiments for example the core administration process has knowledge of the physical proximity of memory regions to processing cores and pins the local memory segment within a predefined physical distance from the core allocating the local memory segment. Such knowledge may be provided to the core administration process by a profiling module a system administrator or other user the core s themselves and so on. In other embodiments pinning a local memory segment for a core may be carried out by calculating by each core latency of read and write transfers to all pages of shared memory and pinning the local memory segment to one or more memory pages in dependence upon the calculated read and write transfer latency. In yet other embodiments pinning a local memory segment for a core may be carried out by calculating by a core profiling application such as application via an Application Programming Interface API call to an operating system latency of read and write transfers to all pages of shared memory and pinning the local memory segment to one or more memory pages in dependence upon the calculated read and write transfer latency.

Also stored RAM is a parallel communications library a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Windows XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The example compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of include a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient alternative access point into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processing core its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processing core registers and memory in compute node for use in dynamically reassigning a connected node to a block of compute nodes useful in systems for administering inter core communication via shared memory according to embodiments of the present invention.

The data communications adapters in the example of include a Point To Point Network Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. The Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of include a Global Combining Network Adapter that couples example compute node for data communications to a global combining network that is optimal for collective message passing operations such as for example a network configured as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links for each global combining network that the Global Combining Network Adapter supports. In the example of the Global Combining Network Adapter provides data communications through three bidirectional links for global combining network two to children nodes and one to a parent node .

The example compute node includes multiple arithmetic logic units ALUs . Each processing core includes an ALU and a separate ALU is dedicated to the exclusive use of the Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations including an allreduce operation. Computer program instructions of a reduction routine in a parallel communications library may latch an instruction for an arithmetic or logical function into an instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical OR for example the collective operations adapter may execute the arithmetic or logical operation by use of the ALU in the processing core or typically much faster by use of the dedicated ALU using data provided by the nodes on the global combining network and data provided by processing cores on the compute node .

Often when performing arithmetic operations in the global combining network adapter however the global combining network adapter only serves to combine data received from the children nodes and pass the result up the network to the parent node . Similarly the global combining network adapter may only serve to transmit data received from the parent node and pass the data down the network to the children nodes . That is none of the processing cores on the compute node contribute data that alters the output of ALU which is then passed up or down the global combining network . Because the ALU typically does not output any data onto the network until the ALU receives input from one of the processing cores a processing core may inject the identity element into the dedicated ALU for the particular arithmetic operation being perform in the ALU in order to prevent alteration of the output of the ALU . Injecting the identity element into the ALU however often consumes numerous processing cycles. To further enhance performance in such cases the example compute node includes dedicated hardware for injecting identity elements into the ALU to reduce the amount of processing core resources required to prevent alteration of the ALU output. The dedicated hardware injects an identity element that corresponds to the particular arithmetic operation performed by the ALU. For example when the global combining network adapter performs a bitwise OR on the data received from the children nodes dedicated hardware may inject zeros into the ALU to improve performance throughout the global combining network .

For further explanation sets forth a block diagram of an example Point To Point Adapter useful in systems for administering inter core communication via shared memory according to embodiments of the present invention. The Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. The Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . The Point To Point Adapter of also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . The Point To Point Adapter of also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation sets forth a block diagram of an example Global Combining Network Adapter useful in systems for administering inter core communication via shared memory according to embodiments of the present invention. The Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. The Global Combining Network Adapter in the example of provides data communication to and from children nodes of a global combining network through four unidirectional data communications links and also provides data communication to and from a parent node of the global combining network through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an example data communications network optimized for point to point operations useful in systems capable of administering inter core communication via shared memory according to embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axis x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in administering inter core communication via shared memory in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes. For ease of explanation the data communications network of FIG. is illustrated with only three dimensions but readers will recognize that a data communications network optimized for point to point operations for use in administering inter core communication via shared memory in accordance with embodiments of the present invention may in facet be implemented in two dimensions four dimensions five dimensions and so on. Several supercomputers now use five dimensional mesh or torus networks including for example IBM s Blue Gene Q .

For further explanation sets forth a line drawing illustrating an example global combining network useful in systems capable of administering inter core communication via shared memory according to embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in the global combining network may be characterized as a physical root node branch nodes and leaf nodes . The physical root has two children but no parent and is so called because the physical root node is the node physically configured at the top of the binary tree. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only compute nodes but readers will recognize that a global combining network optimized for collective operations may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . The rank actually identifies a task or process that is executing a parallel operation according to embodiments of the present invention. Using the rank to identify a node assumes that only one such task is executing on each node. To the extent that more than one participating task executes on a single node the rank identifies the task as such rather than the node. A rank uniquely identifies a task s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root tasks or root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

The cores in the method of have been configured for inter core communication via the shared memory region in accordance with embodiments of the present invention. A core administration process such as firmware module or some user level application has configured the cores for inter core communication in accordance with embodiments of the present invention by constructing a mailbox latency table describing latency of writing data from each core to each mailbox.

In this example each core is configured to write data to the mailbox of every other core . To create a table describing latency of writing data from each core to each mailbox the core administration process may cause processing core to write a chunk of data of a predefined size and value to each mailbox while no other processes are accessing the memory and calculate the time between initiating the write and receiving the data in the mailbox. Then the core administration process may do the same for processing core then for processing core and so on until each core has written the same chunk of data to each mailbox. The core administration process may then create a data structure that indicates the latency amount of time between initiating a write of the data chunk to a mailbox and receiving the data chunk at the mailbox for each core relative to each mailbox. An example of such a table may include 

In this table the latency between a core to a mailbox is represented by the intersection of column of row where each mailbox is represented in the table by the core the mailbox is associated with. Latency in Table 1 above may be represented in a variety of ways such as in time number of instruction cycles clock cycles and so on.

In the example Table 1 it can be seen that writing data from core to the mailbox of processing core represents a very low latency and vice versa. This is but one example but will be used below to further explain the process of administering inter core communication.

In addition to the mailbox latency table the core administration process may also construct a locking latency table describing latency of each core in acquiring a lock for each of the mailboxes. In much the same way as the mailbox latency table the core administration process may construct the locking latency table by iteratively for each core acquiring a lock from each other core. Such a table for example may include 

In the example Table 2 it can be seen that the latency in core taking a lock from is relatively high. Taken with Table 1 it can be inferred that the latency to pass data via write operations between core and core is relatively low while an appreciable constraint is the time required to take for either core to acquire a lock from the other.

To that end the core administration process may identify from the tables groups of a cores having mailbox and locking latency within a predefined range of acceptable latency values. The predefined range of acceptable latency value may be a set of values that includes a range for both mailbox write latency and a range for lock acquisition latency. In some embodiments neighborhoods of cores may be identified from one or both tables based on latency. Such neighborhoods may have similar latencies in one table as well as similar latencies in the other table.

For each identified group of cores the core administration process may establish for every pair of cores in the group a private channel. In the example of the core administration process established a private channel for the processing core and core . The core administration process may pin for each private channel established for a pair of cores one local memory segment per core. The term local refers to the owner of core that allocated the memory segment. In some embodiments the local memory segment of a core in a private channel with another core is utilized as a repository for receiving data. Such an embodiment may be efficient in embodiment in which remote reads require overhead and time greater than a remote write.

Readers of skill in the art will immediately recognize that the example architecture of is an example only. Other architectures including a greater number of cores along with a greater number of private channels with local memory segments may be implemented and will be well within the scope of embodiments of the present invention.

The method of includes constructing a mailbox latency table describing latency of writing data from each core to each mailbox. Constructing a mailbox latency table describing latency of writing data from each core to each mailbox may be carried out in various ways including for example by writing a chunk of data of a predefined size and value to each mailbox from each core while no other processes are accessing the memory and calculating the time between initiating the write and receiving the data in the mailbox.

The method of also includes constructing a locking latency table describing latency of each core in acquiring a lock for each of the mailboxes. Constructing a locking latency table describing latency of each core in acquiring a lock for each of the mailboxes may be carried out in a manner similar to that of constructing a mailbox latency table namely by recording the time between initiating an acquisition of a lock by each core from each of the other cores. The lock here refers to a lock utilized in maintaining coherency of the mailbox. That is the lock when acquired authorizes a core to write into another core s mailbox the core from which the lock was acquired while no other core is authorized for such access.

The method of also includes identifying from the tables groups of a cores having mailbox and locking latency within a predefined range of acceptable latency values. Such an identification may be carried out in variety of ways including applying a set of rules specifying the predefine range of acceptable latency values and a maximum number of cores within each group. In some embodiments the rules and predefined range of acceptable latency values may be configured so that the groups identified are those that have low mailbox latency but high lock acquisition latency. Such groups may benefit from private channels in which no lock is required.

To that end the method of also includes for each identified group of cores establishing for every pair of cores in the group of cores a private channel. In the method of establishing for every pair of cores in the group of cores a private channel is carried out by pinning for each private channel established for a pair of cores one local memory segment per core. Pinning for each private channel established for a pair of cores one local memory segment per core may be carried out in a variety of ways some of which are described below with respect to .

The method of differs from the method of however in that pinning one local memory segment per core may be carried out by one or more processes. One such process in the method of includes pinning the local memory segment within a predefined physical distance from the core allocating the local memory segment. In such an embodiment the process carrying out the pinning possibly executed by the core for which the memory segment is being pinned has some knowledge regarding physical distance between the core and the memory segment. The smaller the physical distance in some embodiments the shorter the read or write latency.

In another embodiment depicted in the method of pinning one local memory segment per core includes calculating by each core latency of read and write transfers to all pages of shared memory and pinning the local memory segment to one or more memory pages in dependence upon the calculated read and write transfer latency. Here the core allocating and pinning the memory segment may read from and write to a plurality or all memory pages and track the latency of such reads and writes. Then the core may identify the memory segment having the lowest read and write latency and pin that memory segment.

In yet another embodiment depicted in the method of pinning one local memory segment per core may be carried out by calculating by a core profiling application via an API call to an operating system latency of read and write transfers to all pages of shared memory. Here the operating system may carry out reads and writes from each core to each page of memory at the behest of another application. The operating system may carry this type of profiling out at any time at startup upon memory allocation to an application upon request and so on. The method of also includes pinning the local memory segment to one or more memory pages in dependence upon the calculated read and write transfer latency.

The method of differs from the method of however in that in the method of constructing the mailbox latency table may be carried out by constructing the mailbox latency table dynamically upon a change in architecture or in some embodiments by constructing the mailbox latency table statically at startup.

In a similar manner constructing the locking latency table in the method of may include constructing the locking latency table dynamically upon the change in architecture or constructing the mailbox latency table further comprises and constructing the locking latency table further comprises constructing the locking latency table statically at startup.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable transmission medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable transmission medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable transmission medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

