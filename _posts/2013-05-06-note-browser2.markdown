---

title: Note browser
abstract: A notes system is presented with a content management system. The notes system manages creation and distribution of edits to notes to users sharing the notes. The notes are stored as a series of edits at the notes system. When an edit to a note is received, the edit is propagated to users subscribed to a note by a backend server responsible for managing the note. The sharing users are notified through application servers associated with each sharing user. The notes server includes various indices for searching the notes and allows notes to be searched quickly to organize viewing by a user of notes and identification of relevant material in the notes. The stored edits are used to display edits to a note to a user by replaying the accessed note to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542377&OS=09542377&RS=09542377
owner: DROPBOX, INC.
number: 09542377
owner_city: San Francisco
owner_country: US
publication_date: 20130506
---
The disclosed embodiments relate generally to sharing media files over a network. In particular the disclosed embodiments are directed to sharing notes between groups of users.

Collaborative sharing of documents is typically provided by a network based file sharing computer system that allows multiple users to access and edit the files. File sharing systems typically use complex hierarchical file directories to provide users with a way to identify content by a filename or a path in a file directory which makes identifying a desired document time consuming particularly if the desired information is within the body of a document. File sharing systems sometimes rely on the native file system retrieval mechanisms provided by the operating system this results in limitations on the ability to conduct searches for documents based on their content edits shared status or other aspects not supported at the operating system level.

A note sharing system allows users to create edit and share notes among a plurality of other users. Generally the note sharing system stores notes created by users. A user can share a note she has created or that has been shared with her by another user. A user who has access to a shared note is called a sharing user. A note is represented by its content such as text images or the like along with a list of the sharing users for the note if any . The note sharing system also maintains information regarding the edits the sharing users make on the note including the time of each edit. In one embodiment the edits made by users are stored individually with each edit represented by a type of edit such as an insertion deletion or format modification the content of the edit the sharing user who made the edit and the timestamp of when the edit was made. Users can be represented by their user name a user ID or the like.

Users communicate with the note sharing system using a client application on a client device. The client application provides an interface for the user to access notes on the note sharing system edit such notes and share notes with other users. To access notes for a user of the client application current user the client application transmits to the note sharing system a request for a list of notes that are associated with the current user. User notes associated with the current user include notes that the current user created but has not shared notes that have been created by the current user and shared with other users and notes created by other users and shared with the current user. The note sharing system identifies in the notes database all notes that are associated with the current user. In one embodiment this can be done using a note index which lists for a note the users associated with the note including both the user who created the note and the sharing users for example by user name or user ID. The note sharing system obtains the notes associated with the current user along with the edit information for each note indicating at least the time of a last edit i.e. a most recent edit to the note and the sharing user who made the last edit. The note sharing system returns the associated notes and edit information to the client application. The client application receives the notes and edit information and arranges the notes for display in a note list view in a user interface. In one embodiment the client application sorts the notes according to their edit times in reverse chronological order to place the most recently edited notes first. The client application displays one or more of most recently edited notes in the reverse chronological order in the note list view. The time of the most recent edit for each displayed note is shown.

In one embodiment the names of each the sharing users is displayed for a note. The names of the sharing users can be displayed according to the time of the last edit by each such user with the name of the sharing user who provided the most recent edit to the shared note listed first. Alternatively the names of the sharing users can be listed alphabetically in which case the name of the sharing user who most recently edited the note is shown in a distinguished manner such as by bold different font color highlighting or the like.

The client application optionally can be configured to group the notes into groups. One such type of grouping is based on time of edit corresponding to day week or month of edit. For example the notes can be grouped into groups corresponding to the current date Today the previous day Yesterday the current week This week the previous week Last week and so forth. Another grouping is based on the names of the sharing users. In this grouping the name of the sharing user is displayed along with the shared notes for that user. The names of the sharing users can be listed alphabetically or in order of the number of shared notes for each sharing user e.g. with the name of sharing user having the most shared notes with the current user listed first .

In one embodiment another such grouping of notes is by the location of where the note was created or last edited. In this embodiment each note is associated with a location at which it was created or edited as determined by the client device. This information can be transmitted to and stored by the note sharing system or by each client application. When the note sharing system provides the shared notes to the client application the creation and location information can be included as well. The client application can then group the notes according to creation location edit location or a combination thereof. The locations can be arranged alphabetically by number of notes associated with each location or by proximity to the current user s current location as determined by the client device.

In another aspect the client application displays a status icon for each note in the note list view. The status icon indicates whether the note is a new note that has been created by the user or another user or has been edited by the user or a sharing user.

In another aspect the client application displays for each note in the notes list view a portion of the text of the note called herein a snippet. The snippet can be a predetermined number of words from the note. These can be the first N words of the note e.g. first five words or a portion of the text of the most recent text insertion. For example if a new sentence has been added to the note then the first five words of the sentence can be displayed as the snippet.

The present invention has embodiments in a client device and client application a note sharing system and computer program products and computer implemented methods.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that other alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

In the environment illustrated in each of client devices accesses shared content through content management system . Thus each client device may jointly access various types of content such as a folder MyFolder containing files such as file 1 file 2 and photo. Various types of devices can function as a client device such as desktop computer A tablet computer B and mobile device C. Any device capable of accessing content management system and interacting with the content items stored on content management system may be used as a client device .

Users may create accounts at content management system and store content thereon by transmitting such content from client device to content management system . The content provided by users is associated with user accounts that may have various privileges. The privileges may include viewing the content item modifying the content item modifying user privileges related to the content item and deleting the content item.

Note sharing system provides users of client devices with the ability to create store access and share notes. Notes are documents that a user can create using a notes editor. In one embodiment the content shared by content management system includes content created by using third party applications e.g. word processors video and image editors database management systems spreadsheet applications code editors and so forth which are independent of content management system . For note sharing system note editor can be provided on client device or can be hosted by note sharing system itself as further described below.

Client devices communicate with content management system and note sharing system through network . The network may be any suitable communications network for data transmission. In one embodiment network is the Internet and uses standard communications technologies and or protocols. Thus network can include links using technologies such as Ethernet 802.11 worldwide interoperability for microwave access WiMAX 3G digital subscriber line DSL asynchronous transfer mode ATM InfiniBand PCI Express Advanced Switching etc. Similarly the networking protocols used on network can include multiprotocol label switching MPLS the transmission control protocol Internet protocol TCP IP the User Datagram Protocol UDP the hypertext transport protocol HTTP the simple mail transfer protocol SMTP the file transfer protocol FTP etc. The data exchanged over network can be represented using technologies and or formats including the hypertext markup language HTML the extensible markup language XML etc. In addition all or some of links can be encrypted using conventional encryption technologies such as the secure sockets layer SSL transport layer security TLS virtual private networks VPNs Internet Protocol security IPsec etc. In another embodiment the entities use custom and or dedicated data communications technologies instead of or in addition to the ones described above.

Client devices maintain various types of components and modules for operating the client device and accessing content management system . The software modules include operating system and one or more content editors . Content editors vary based on the client device and may include various applications for creating viewing and modifying content stored on content management system such as word processors spreadsheets database management systems code editors image and video editors and the like. Operating system on each device provides a local file management system and executes the various software modules such as content management system client application and content editor . A contact directory stores information on the user s contacts such as name telephone numbers company email addresses physical address website URLs and the like.

Client devices access content management system in a variety of ways. Client device may access content management system through a native application or software module such as content management system client application . A schematic example display from a client application is shown in on client devices B and C. Client device may also access content management system through web browser as shown on client device A. As an alternative the client application may integrate access to content management system with the local file management system provided by operating system . When access to content management system is integrated in the local file management system a file organization scheme maintained at content management system is represented as a local file structure by operating system in conjunction with client application .

Client application manages access to content management system . Client application includes user interface module that generates an interface to the content accessed by client application as variously illustrated herein and is one means for performing this function. The generated interface is provided to the user by display . Client application may store content accessed from a content storage at content management system in local content . While represented here as within client application local content may be stored with other data for client device in non volatile storage. When local content is stored this way the content is available to the user and other applications or modules such as content editor when client application is not in communication with content management system . Content access module manages updates to local content and communicates with content management system to synchronize content modified by client device with content maintained on content management system and is one means for performing this function. Client application may take various forms such as a standalone application an application plug in or a browser extension.

In certain embodiments client device includes additional components such as camera and location module . Location module determines the location of client device using for example a global positioning satellite signal cellular tower triangulation or other methods. Location module may be used by client application to obtain location data and add the location data to metadata about a content item.

User account database can also include account management information such as account type e.g. free or paid usage information for each user e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . Account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as documents text files audio files video files etc. from one or more client devices associated with the account. The content can also include folders of various types with different behaviors or other content item grouping methods. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage which is one means for performing this function. Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. In one configuration content management system stores the content items in the same organizational structure as they appear on the client device. However content management system can store the content items in its own order arrangement or hierarchy.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one configuration each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies of an identical content item content storage stores a single copy and then uses a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage stores files using a file version control mechanism that tracks changes to files different versions of files such as a diverging version tree and a change history. The change history includes a set of changes that when applied to the original file version produces the changed file version.

Content management system automatically synchronizes content from one or more client devices using synchronization module which is one means for performing this function. The synchronization is platform agnostic. That is the content is synchronized across multiple client devices of varying type capabilities operating systems etc. For example client application synchronizes via synchronization module at content management system content in client device s file system with the content in an associated user account on system . Client application synchronizes any changes to content in a designated folder and its sub folders with the synchronization module . Such changes include new deleted modified copied or moved files or folders. Synchronization module also provides any changes to content associated with client device to client application . This synchronizes the local content at client device with the content items at content management system .

Conflict management module determines whether there are any discrepancies between versions of a content item located at different client devices . For example when a content item is modified at one client device and a second client device differing versions of the content item may exist at each client device. Synchronization module determines such versioning conflicts for example by identifying the modification time of the content item modifications. Conflict management module resolves the conflict between versions by any suitable means such as by merging the versions or by notifying the client device of the later submitted version.

A user can also view or manipulate content via a web interface generated by user interface module . For example the user can navigate in web browser to a web address provided by content management system . Changes or updates to content in content storage made through the web interface such as uploading a new version of a file are synchronized back to other client devices associated with the user s account. Multiple client devices may be associated with a single account and files in the account are synchronized between each of the multiple client devices .

Content management system includes communications interface for interfacing with various client devices and with other content and or service providers via an Application Programming Interface API which is one means for performing this function. Certain software applications access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which verifies user credentials security tokens API calls specific client devices etc. to determine whether access to requested content items is authorized and is one means for performing this function. Authenticator module can generate one time use authentication tokens for a user account. Authenticator module assigns an expiration period or date to each authentication token. In addition to sending the authentication tokens to requesting client devices authenticator module can store generated authentication tokens in authentication token database . Upon receiving a request to validate an authentication token authenticator module checks authentication token database for a matching authentication token assigned to the user. Once the authenticator module identifies a matching authentication token authenticator module determines if the matching authentication token is still valid. For example authenticator module verifies that the authentication token has not expired or was not marked as used or invalid. After validating an authentication token authenticator module may invalidate the matching authentication token such as a single use token. For example authenticator module can mark the matching authentication token as used or invalid or delete the matching authentication token from authentication token database .

Content management system includes a sharing module for sharing content publicly or privately which is one means for performing this function. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The content can also be shared across varying types of user accounts.

In some embodiments content management system includes a content management module for maintaining a content directory that identifies the location of each content item in content storage and allows client applications to request access to content items in the storage and which is one means for performing this function. A content entry in the content directory can also include a content pointer that identifies the location of the content item in content storage . For example the content entry can include a content pointer designating the storage address of the content item in memory. In some embodiments the content entry includes multiple content pointers that point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry in some configurations also includes user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module adds a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module generates a custom network address such as a URL which allows any web browser to access the content in content management system without any authentication. The sharing module includes content identification data in the generated URL which can later be used by content management system to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. The content identification data included in the URL can be transmitted to content management system by a client device to access the content item. In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created.

In the embodiment of note sharing system is shown as separate from content management system and can communicate with it to obtain its services. In other embodiments note sharing system is a subsystem of the component of content management system that provides sharing and collaboration services for various types of content items. User account database and authentication token database from content management system are used for accessing note sharing system described herein.

Note sharing system includes various servers for managing access and edits to notes. Note sharing system includes proxy server notes servers and backend server . Proxy server is responsible for handling requests from client applications and passing those requests to the notes servers . Notes servers manage application level requests for client applications and selectively interact with backend servers for processing lower level processing tasks on notes and interfacing with notes database as needed. Notes database stores the notes and provides programmatic access thereto for searching and retrieving notes and is one means for performing these functions. Each note is represented in notes database as a note object. Each note object is represented by a noteID the text of the note a list of edits performed on the note and various types of metadata such as the sharing users associated with the note and a creation timestamp indicating the creation time of the note.

The edit list includes the list of edits performed on the note such as insertions deletions font changes e.g. selection of font as well as bold italic underling etc. and other changes to a note. Each edit identifies the user performing the edit a timestamp of the edit and the content of the edit. An insert edit designates the insertion position within the note e.g. character offset from beginning of note and the content to be inserted at the position of the insert edit. A delete edit designates the position from which to delete content and the number of characters to be deleted. A modify edit indicates the beginning position from which to modify an attribute of the text in a note an ending position from which to stop the modification and a modification attribute e.g. bold underline and italicize . Edits may also indicate modifications to the metadata for a note such as the addition or deletion of sharing users.

Notes database also includes a set of indices. These indices are logical in nature and may be implemented in various ways depending on the underlying database design. A user index contains a list of all users by their userID and for each userID there is a list of noteIDs. Each noteID identifies a note to which the user of the userID is subscribed. For each noteID there is a status indicator that indicates whether the note is active or inactive for the user. A note is active for the user sharing the note until the user deletes the note. In one embodiment when the user deletes the note the note persists in the note database remains associated with the user but status indicator is set to inactive allowing the user to reactivate their sharing status with the note in the future. The note remains active for and associated with any other shared users. Alternatively the note may be deleted from the note database so that none of the shared users have access to it anymore. The user index is used to identify notes associated with shared with a given user and the status of those notes with respect to the user.

Notes database can include a note index. The note index indicates for each note a list of userIDs of users subscribed to the note and an indication of whether the user is active or inactive. This index can be an inverse of the user index and may be stored together with the user index.

Notes database can also include a term index identifying the presence of terms i.e. keywords or other tokens in each note. For each term a list of noteIDs is included in the term index indicating notes that contain the term. The term may be represented in the term index by the term itself or the term may be hashed to determine a term hash value or may be given a term identifier. Certain terms may also be excluded from inclusion in the term index such as common stop words and other terms that are not suitable for searching e.g. a an the and the like . For a given note additional information may be stored indicating the frequency of the term in the note raw or weighted as well as position s in the note where the term appears. Notes database exposes a search function to notes servers . The search function takes as input the userID of the user making the search request and zero or more terms to be searched. The search function uses the user index to identify a list of all notes to which the user is a sharing user and the status is active. For each of the query terms the search function obtains the list of notes containing the term from the term index and then unions these lists to obtain a unified list of notes containing the query terms. This unified list of notes is intersected with the list of shared notes for the user thereby identifying all shared notes of the user that include one or more of the query terms. The search function may then sort rank notes using an information retrieval ranking function for example ranking each note by the number and frequency of query terms. Alternatively the search function can sort notes based on their creation timestamps and edit timestamps ordering notes in reverse chronological order from most recent edit creation to least recent. The search function then uses the noteIDs for the identified notes to retrieve notes. The retrieved notes are then transmitted to the requesting client device.

Notes database may include additional indices associated with notes. For example a location index may include a list of locations e.g. city names and places and for each location a list of noteIDs for notes that were created at the location or edited at the location. Alternatively the creation and or edit locations for each note may be stored with the note as metadata for example as part of the edit list data.

Content management system and note sharing system may be implemented using a single computer or a network of computers including cloud based computer implementations. For the purposes of this disclosure a computer is device having one or more processors memory storage devices and networking resources. The computers are preferably server class computers including one or more high performance CPUs and 1 G or more of main memory as well as 500 Gb to 2 Tb of computer readable persistent storage and running an operating system such as LINUX or variants thereof. The operations of content management system and note sharing system as described herein can be controlled through either hardware or through computer programs installed in computer storage and executed by the processors of such server to perform the functions described herein. These systems include other hardware elements necessary for the operations described here including network interfaces and protocols input devices for data entry and output devices for display printing or other presentations of data but which are not described herein. Similarly conventional elements such as firewalls load balancers notes servers failover servers network management tools and so forth are not shown so as not to obscure the features of the system. Finally the functions and operations of content management system and note sharing system are sufficiently complex as to require implementation on a computer system and cannot be performed in the human mind simply by mental steps.

Referring again to client device further includes a note sharing system client application . Note sharing system client application includes note editor that enables the user to create edit and delete notes store notes to note sharing system note browser that accesses notes from note sharing system through browsing and searching and share notes with other users. Note objects database provides local storage of notes on client device .

Referring now to there is shown home screen of notes client application . The note browser generates home screen or home page which presents a list view of notes to the user upon starting up client application or whenever the user returns to home screen following other operations e.g. searching or editing notes. The user can scroll through the available notes and select notes for further operations. Each note is shown with title text snippet sharing user time and status icon . These features are described as follows 

Text snippet a portion of the text of note provided to show recent content changes to note . The snippet can be set to any of the following 1 the most recently inserted text 2 the most recently modified text. This setting can be made by the system administrator or by the user via a setting in client application . Client application determines the text for the snippet based on the most recent edit or series of edits for note . The length of snippet can be set by the user. If set to 0 nothing is shown. A maximum length can be established e.g. 20 characters .

Sharing users a list of the user names of the sharing users for the note. Sharing user icon may also be presented to indicate that note is shared. In one embodiment the list of user names is ordered based on the order in which they last edited note with the user name of the user who provided the most recent edits to the note shown first i.e. based on reverse chronological order of edits . For example in there are three sharing users associated with the first note listed in the order Jurg Brett Gideon . This ordering indicates that Jurg made the most recent edit to the note and Gideon made the least recent edit. Alternatively the user names of the sharing users are listed in alphabetical order and the user name of the last sharing user to edit note shown in bold italics highlights or other visually distinguished manner. If note is not shared then no user names are listed. The name of the current user is not shown. The client application may include a user interface configured to receive a selection of a setting for listing the shared users names by order of most recent edit or alphabetically.

Status icon An icon placed in the context of note to indicate its status. The New status icon is shown after a note is created and remains until the first time note is edited. The Edited status icon is shown after a note is edited by a user. The status icon remains until the current user views the contents of the edited note. Once the edited note is viewed the status icon is removed.

Note browser can group and sort notes in various arrangements as selected by the user. One arrangement is by date in reverse chronological order by time of last edit or creation date with the following date range groups Today Yesterday This week Last Week Older. shows data range groups including Today Yesterday and Last Week. This arrangement is beneficial as it allows the current user to see the most recently edited notes along with information identifying which of the shared users edited the notes as explained above.

Other groupings may be provided by the note browser as selected by the user as shown in using a settings dialog as shown in as follows 

Group by Sharing user illustrates this arrangement in which note browser groups notes together based on the name of a sharing user. For each sharing user in the set of notes a user group of notes is formed that contains all of notes that are shared with that user. For example in there are user groups for users Jurg Greg and Brett. The user groups can be sorted alphabetically by user name or sorted in descending or ascending order based on the number of notes in each user group . When sorted in descending order based on number of notes in each user group as illustrated in the user with the most notes shared with the current user appears at the top of the list as the first grouping. This is beneficial because it enables the user to identify which other user they share the most notes with. The sharing users list is also displayed so that the current user can see which shared user has most recently edited the note.

Group by Location illustrates this arrangement in which the note browser groups notes together according to their location. Each location group has a location name e.g. a city name place name . illustrates location groups for San Francisco New York and 1324 Main Street Seattle. The location groups are then sorted alphabetically by location name or as shown in by number of notes associated with each location. Location groups can be sorted by the number of notes associated with each location in either descending or ascending order. When sorted in descending order the location group associated with the most notes appears at the top of the list. For example in location group San Francisco has two notes associated with it and the location groups for New York and 1324 Main Street Seattle have one note each. This is beneficial because it enables the user to identify the locations for which there are many notes. The sharing users list is also displayed so that the current user can see which shared user has most recently edited the note.

Because some users remember where they created a note or where they last edited the note rather than with whom they shared notes sorting alphabetically enables the user to find notes quickly based on location name. The location of notes may be set as the location of client device at the time the note was created or the location at the time the note was edited. The location of client device is obtained from location module . The location information for each note may be maintained by notes database . In this embodiment client application provides the location along with the note to note sharing system when the user creates or edits a note. Alternatively in one embodiment location information for notes created or edited by the user may be stored locally on the client device for example in a location index that lists for each location the noteIDs of notes created or edited at the location. In this embodiment it is assumed that a user is only interested in the locations at which she edited the note since she would not typically know the locations at which any of the sharing users edited the note.

Note browser can also arrange the location groups by distance proximity to the current location of client device making use of the location module to obtain the current location of the device at the time the home screen is displayed to the user . This arrangement is beneficial for example if the user has a large number of notes but does not recall where they edited notes since this arrangement enables the user to retrieve notes most pertinent to the user s current location. At the time the note browser groups and displays the notes in the notes list view it can query the location module of the client device by passing in the location name of each of the groups to obtain the distance of the location from the current location of the device and then order the groups based on the received distances.

In one embodiment the location either at creation time editing time by the user or display time to be associated with a note is mapped to nearest major location marker e.g. city name street address business name rather than simply using the exact latitude longitude coordinates. Location module itself or external services are available to return a location marker given a GPS or other geocode input. This mapping of actual location based on GPS or geocode to nearest major location marker is beneficial since it associates notes with geographically significant places that are recognizable to the user and thus beneficially aggregates notes to meaningful groups. Referring again to all notes made within the city of San Francisco are shown as grouped in location group San Francisco. 

Referring to there is shown an interaction diagram of how note processing is generally handled in one embodiment. Client application sends S a request relating to a note to proxy server . Generally a request indicates the userID UID of the user and the noteID NID of the note and additional contextual information as appropriate such as the text of the note. Each client device is associated with one of the notes servers which is responsible for executing the client request. In one embodiment users are associated with notes servers using a modulo N function on the userID where N is the number of notes servers in use. The association of a user or client device with a particular notes server may be performed using a load balancing fair scheduling or other algorithm. When proxy server receives the request the proxy server determines S the particular notes server associated with the requesting user or client device and forwards S the message to the identified notes server amending the context of the request as appropriate. Proxy server also returns a reference to the identified notes server to client application so the client application can directly communicate with the identified notes server for future requests. In an alternative embodiment client application initially communicates directly with the particular notes server assigned to the userID using the same assignment function as otherwise used by proxy server .

When a notes server receives a request the notes server determines S whether the request is to be executed by that notes server itself or by a backend server . When the request adds edits or otherwise modifies a note or index the request is executed by a backend server . Requests that do not modify notes are executed by the notes server . For example a request from client device to view a note or obtain a list of notes responsive to a search term does not modify notes and is processed by notes server . By separating the modification of notes from searching of notes a backend server is able to rapidly propagate changes to a note to the users subscribed to that note. When a request modifies a note notes server determines S which backend server is responsible for the note to be modified and sends S the request to that backend server . In one embodiment notes are assigned to a backend server based on their noteID for example using a modulo M function where M is the number of backend servers in use. The association of a note with a particular backend server may be performed using a load balancing fair scheduling or other algorithm. A notes server may also receive edits from a backend server to distribute to a client device associated with that notes server . These edits may be edits performed on a note by another user that are being propagated to users subscribed to the note.

The assigned backend server coordinates S and distributes note edits to subscribed users of a note. Coordination includes sequencing the edits if multiple different edit requests for a given note are received contemporaneously according to order of receipt and writing the edits to notes database . Distribution includes propagating edits to the other sharing users for the note. Specifically when the backend server receives a request to edit a note the backend server identifies S the users subscribed to the note for example by querying S. the note index using the noteID the note index returns S. a list of userIDs of the sharing user. The backend server propagates S the edit to the notes servers associated with each of the users subscribed to the note by providing a list of userIDs for the users associated with each notes server . Each such notes server then notifies each of the users to which it is associated and for whom there is an edited note that the note has been edited by sending a message S to the client applications on each such user s client device the message indicating the note that has been edited e.g. by title and the user who made edits e.g. user name . Client application can then display S a message based on this information. illustrates a message as it may appear on client application .

Referring to there is shown the user interface of client application configured for creating a new note using the note editor . In note editor new note icon enables a user to create a note. When the user clicks new note icon submenu appears. The user can select Write button which creates a new note for text entry or Photo button to activate client device s camera to create a new note including a photo. shows a new note for text entry. The user can enter text directly and apply formatting to the note using formatting icons for bold underline and italic fonts and paragraph formats e.g. list format . The user can replace the text Title with the desired title.

When the user creates a note by selecting New note icon client application instantiates a note with a new noteID and sends the noteID to proxy server following generally the process shown in . The note is sent as its text and set of edits. Proxy server routes the note to the notes server which in turn routes the note to notes database via backend server . On a periodic basis e.g. every 5 milliseconds or any other time set by the system administrator client application transmits a last set of changes to notes server . These are transmitted as edits in the format discussed above. Notes server calls the backend server to store the edits with note to the notes database .

In note editor a user can create a new note based on a photograph by selecting photo icon . The current user can insert a photo into note by selecting the photo icon or by selecting the photo button as shown in . The user is given the option to select an existing photo from storage on client device or on note sharing system to insert or take a new photo with camera of client device . Upon selecting a new photo for a note or inserting a photo into an existing note a camera view is shown in the client such as shown in . The user takes the photo by selecting camera button . The photo is inserted into a new note as shown in . The user can then enter text where the indication Type something is displayed. The selected or captured Photo represented by a storage path object identifier URL or the like is included in the text of the note. Client application transmits the new note to the notes server as described above.

Note editor is configured to close a note in response to the selection of the back icon . In response to the selection note editor sends a message to the notes server that the note is closed. Notes server notifies note database that the note is closed which serves to initiate a storage operation to save the note. Note database updates the note index to associate the new note with the current user and any sharing user. Notes database also updates the term index by identifying each term in the note excluding stop words and updating the each such term in the term index to include the noteID of the current note. This enables the new note to be identified by searches on any terms included in the note.

Note editor is configured to enable a user to share a note with other users a user can share a newly created note or an existing note. Referring again to note editor displays a sharing icon . In response to the selection of this icon client application accesses contact directory on client device and displays the directory. The user can select one or more contacts to make as sharing users. Client application sends information identifying the selected contacts e.g. user email userID if available to note sharing system along with the noteID of the current note. Note sharing system is responsible for determining whether or not the selected contacts are already account holders by querying the user account database of content management system . If not note sharing system will send an invite to such users via their provided email address. For each selected contact who is a user of the system note sharing system updates the note index for the current note using the noteID to include the userID of the selected contact thereby establishing that the current note is shared with the identified User.

Referring again to client application is configured to enable a user to directly invite others to share notes by selecting Invite icon . Client application displays an interface as shown in for receiving the email address es of the intended sharing user s along with a message and subject line. The user can then send the invitation making use of the client device s installed email client. As noted above in one embodiment each sharing user has the same access read write and delete privileges in other words there is no owner of a note. In this embodiment if a sharing user deletes a note it becomes inactive for the other sharing users as well. Alternatively note sharing system can be configured so that when a user deletes a note it becomes inactive only for that user and remains active for the remaining sharing users.

Referring now to there is shown an interaction diagram for the implementation of the note list view of home screen as shown in . Generally the note list view is obtained using a search function of note sharing system but passing only the userID of the current user without any search terms. The results are than grouped and sorted according to applicable setting e.g. as in . When the user enters the note list view initially client application transmits S a search query containing only the userID of the current user to the assigned notes server either directly or through the proxy server as described above .

Notes server calls S the search function of notes database passing in the userID. As described above the search function obtains S all notes associated with the current userID for which the user status is active. The search function than sorts S notes according to the edit creation times in reverse order and returns S to notes server a selected number N most recent note e.g. N 20 or other user specified number . Presorting in this manner is beneficial if there are a large number of notes since the application server need only return a limited number of notes to client application for display. Alternatively the notes server simply returns all notes without sorting them beforehand. In either case each note is returned with its associated edits and list of sharing users. Notes server passes S the returned results to the client application.

Client application receives notes and groups and sorts S them according to the grouping sorting setting set in the client application as illustrated in . For each note client application further determines from the edit list the timestamp of the most recent edit that is an insert and selects S some or all of that text as the snippet . Client application also determines S from the edit list the sharing user who made the last edit or if the note is newly created the user who created it . Client application then displays S note title snippet list of sharing users edit time and sharing user icon of each note in the note list view. Client application further displays Edited status icon for each note that has been edited and New status icon for each new note.

In one embodiment the user may configure the client application to show in home screen all notes associated with the user only those notes that the user created only those notes that the user has created and shared with others or only those notes that are shared with the user or any combination there. The selected sets are applied as filters by client application when processing the received notes from notes server in response to a query.

Reference in the specification to one embodiment or to an embodiment means that a particular feature structure or characteristic described in connection with the embodiments is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

In this description the term module refers to computational logic for providing the specified functionality. A module can be implemented in hardware firmware and or software. It will be understood that the named modules described herein represent one embodiment and other embodiments may include other modules. In addition other embodiments may lack modules described herein and or distribute the described functionality among the modules in a different manner. Additionally the functionalities attributed to more than one module can be incorporated into a single module. Where the modules described herein are implemented as software the module can be implemented as a standalone program but can also be implemented through other means for example as part of a larger program as a plurality of separate programs or as one or more statically or dynamically linked libraries. In any of these software implementations the modules are stored on the computer readable persistent storage devices of a system loaded into memory and executed by the one or more processors of the system s computers.

The operations herein may also be performed by an apparatus. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of media suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may also be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references below to specific languages are provided for disclosure of enablement and best mode of the present invention.

While the invention has been particularly shown and described with reference to a preferred embodiment and several alternate embodiments it will be understood by persons skilled in the relevant art that various changes in form and details can be made therein without departing from the spirit and scope of the invention.

Finally it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

