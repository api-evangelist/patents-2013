---

title: Expressing intent to control behavior of application components
abstract: Detection, identification, and control of application behavior dealing with malware, security risks, data privacy, or resource usage can be difficult in an era of complex, composite software applications composed of multiple components. Software applications are analyzed to determine their components and to identify the behaviors associated with each of the components. Components can also be analyzed with respect to similarity of previously known components. Behaviors can include use of personal identifying information or device information, or any actions that can be taken by applications on the device, including user interface displays, notifications, network communications, and file reading or writing actions. Policies to control or restrict the behavior of applications and their components may be defined and applied. In one embodiment this can include the identification of advertising networks and defining policies to permit various opt-out actions for these advertising networks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09215074&OS=09215074&RS=09215074
owner: Lookout, Inc.
number: 09215074
owner_city: San Francisco
owner_country: US
publication_date: 20130305
---
The present application is a continuation of U.S. Non Provisional application Ser. No. 13 692 806 filed Dec. 3 2012 entitled COMPONENT ANALYSIS OF SOFTWARE APPLICATIONS ON COMPUTING DEVICES by Wyatt et al. which itself claims priority to U.S. Provisional Application Ser. No. 61 655 822 filed Jun. 5 2012 entitled EXPRESSING INTENT TO CONTROL BEHAVIOR OF APPLICATION COMPONENTS by Halliday et al. the entire contents of which applications are hereby incorporated by reference as if fully set forth herein.

At least some embodiments disclosed herein relate to analysis of software components in general and more particularly but not limited to identifying software components corresponding to one or more behaviors or other characteristics exhibited by an application on a computing device. Other embodiments disclosed herein relate to control of behavior on computing devices in general and more particularly but not limited to receiving or determining a user s intent regarding control of behavior of one or more application components installed on a computing device or regarding an evaluation assessment of behavior for components yet to be installed on a computing device.

One common type of computing device is a mobile device such as an iPhone device. Mobile devices have evolved beyond simple telephone functionality and are now more complex multi functional devices. In addition to voice communications many mobile devices are capable of text messaging email communications Internet access and the ability to run full featured application software. For example mobile devices can use these capabilities to perform online transactions. Furthermore mobile devices used by an individual or a business often store information in many forms such as electronic documents text messages etc. Applications that run on the mobile device may for example be downloaded and installed from an application marketplace.

An example of an application marketplace is the Google Play service. Google Play is a service that includes an online store for music movies books and Android applications apps . The service is accessible from the web and from the Play Store Mobile App on Android. Google Play was introduced in March 2012 when Google re branded and merged its predecessor Android Market and Google Music services. Some of the applications that may be downloaded incorporate so called advertising networks.

An online advertising network or simply ad network is operated by a company that connects advertisers to web sites that want to host advertisements. A key function of an ad network is aggregation of ad space supply from publishers and matching of this supply with advertiser demand. An ad network typically uses a central ad server to deliver advertisements to consumers e.g. via their mobile devices which enables targeting tracking and reporting of advertisement impressions in ways not possible with traditional analog media alternatives.

There are an increasing number of ad networks appearing on mobile devices. Any given application installed on a mobile or other computing device may be associated with one or more ad networks and this association is not always obvious to the user. As an example of a downloaded application incorporating advertisements a user may download a free poker game or a chess game from an application marketplace. In order to provide the game free of charge the game owner incorporates the display of ads from an ad network during game play.

Ad networks collect a variety of data sometimes including personally identifying information PII and device specific information. They collect this data in order to provide targeted advertisements which are in turn more profitable.

Some ad networks go beyond the in application ad delivery experience and put advertisements into for example the notification bar of the mobile device. Sometimes it is difficult for a user to determine what is happening on his or her phone in particular when messages or other items appear on parts of the user s phone that are not specifically related to any one given application.

Systems and methods for analysis of software components e.g. components for an Android iOS Windows Phone or other platform application that is newly installed or being considered for installation on a user mobile device are described herein. Some embodiments are summarized below.

In one embodiment a method includes for an application installed on a computing device of a user determining components of the application and identifying via at least one processor at least one behavior associated with each of the components including a first behavior associated with a first component.

In one embodiment a system includes a data repository storing component data for known components the component data including data for a first known component at least one processor and memory storing instructions which when executed on a computing apparatus cause the computing apparatus to for a new component in a first application for a computing device of a user perform a comparison of the new component to the component data and based on the comparison make a determination that the new component corresponds to the first known component.

In one embodiment a method includes storing in memory component data for known components the component data including data for a first known component for a new component in a first application for a computing device of a user perform via at least one processor a comparison of the new component to the component data and based on the comparison make a determination that the new component corresponds to the first known component.

Systems and methods for control of behavior on computing devices are also described herein. Some embodiments are summarized below.

In one embodiment a method includes for an application installed on a computing device of a user determining components of the application identifying at least one behavior associated with each of the components including a first behavior associated with a first component presenting results from the identifying to the user the results to include a list of behaviors including the first behavior and receiving a selection from the user of at least one behavioral preference.

In another embodiment a method includes for an application installed on a computing device of a user determining components of the application identifying at least one behavior associated with each of the components including a first behavior associated with a first component and determining at least one behavioral preference of the user.

The disclosure includes methods and apparatuses which perform the above methods and systems including data processing systems which perform these methods and computer readable media containing instructions which when executed on data processing systems cause the systems to perform these methods.

Other features will be apparent from the accompanying drawings and from the detailed description which follows.

The following description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding. However in certain instances well known or conventional details are not described in order to avoid obscuring the description. References to one or an embodiment in the present disclosure are not necessarily references to the same embodiment and such references mean at least one.

Reference in this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover various features are described which may be exhibited by some embodiments and not by others. Similarly various requirements are described which may be requirements for some embodiments but not other embodiments.

As used herein a component means a part of an application e.g. an application that is installed by a user from an Android or other software application marketplace and then executes on a mobile device . In one example a component is provided by the application s creator or by a third party. In another example the component may be code provided by an ad network or an analytics network.

In yet another example components are linked libraries SDKs that are packaged within an application. This is code that is within the application but the code is developed by a third party and provides the ability for an application developer to integrate certain behaviors of that component into its application e.g. displaying a certain type of ads from a certain ad network such as LeadBolt .

In one embodiment a component e.g. a component associated with an ad network may have multiple behaviors associated with it e.g. notification display settings changes and or information collection . For example the behaviors of the BTController application discussed further below is the summation of the behaviors of its constituent components. In some cases components may provide the ability to selectively opt out of individual behaviors. However in other cases this is not possible and in order to opt out of any set of behaviors a user must opt out of the entire component.

As described in more detail below a user may express its intent as to how the user desires its computing device to behave. The intent may be explicitly provided by the user or may be otherwise determined e.g. by reference to a database on a remote server . In one embodiment the user s intent defines how the user wants to control receiving of certain types of messages e.g. advertisements . The type of control desired by the user in its various forms of experience on a computing device e.g. a mobile device is expressed in the user s intent. This intent may be used to determine various behaviors of the computing device. For example some undesired behaviors may be stopped by disabling various components of one or more applications that have been previously installed on the user s mobile device.

Network may be used to download and remotely install applications selected from marketplace e.g. using Google Play or the Android Market . Marketplace may include one or more web servers or other types of data communication servers to communicate with the user terminals e.g. . . . and mobile devices .

As an example an owner of an Android phone e.g. mobile device may visit a web site hosted by marketplace and select a free poker game application for remote installation on mobile device . The user may authenticate itself to marketplace by its email address e.g. Gmail address and password.

The marketplace and or messaging server are connected to respective data storage facilities to store applications messaging account data for users user preference data and other data. In messaging server is connected to communication network to deliver messages e.g. email or text to user terminals or one of a user s mobile devices .

In one embodiment a software server is coupled to communicate with application marketplace and or mobile devices by communication network . Server stores for example an application e.g. the Ad Network Detector discussed below in memory and sends the application to application marketplace for later download and installation by a user onto for example mobile device . In another embodiment software server is a developer computer or another computer used to upload an application to marketplace .

In one embodiment server communicates with the application now executing on mobile device after installation by the user . The application is configured to identify at least one behavior on mobile device as discussed herein. The at least one behavior is associated with each of a plurality of components of a plurality of other applications installed on the mobile device e.g. other applications previously downloaded by the user from the Google Play service and the at least one behavior includes a first behavior associated with a first component.

Server receives at least one behavioral preference of the user from mobile device and the at least one behavioral preference is determined by the application based on input from the user e.g. a user selection from a menu or results list . Server stores the at least one behavioral preference e.g. stores in a memory of server for later uses such as responding to queries from other computing devices regarding the intent of the user of mobile device . In one embodiment server is independently maintained by each of many ad networks. The Ad Network Detector discussed herein may manage these behavioral preferences on behalf of a user for these networks.

In an alternative embodiment identity server includes a database which stores component identities and user policies . Mobile device includes applications that have been previously installed on mobile device . Applications may be installed from application marketplace or software server .

Applications include components and . The user policy is stored locally in a memory of mobile device . During operation as discussed in more detail below user policy may be used to define the handling of components and on mobile device .

A user policy for mobile device may alternatively or in addition to user policy be stored as one of user policies on identity server . User policy may be enforced on mobile device using either a local user policy or a remote user policy or a combination thereof.

As discussed in more detail below after an application is installed on mobile device components and may be identified and behaviors exhibited on mobile device may be attributed to one or more of components and . Any given component e.g. component may be present in several different applications on mobile device and or may be common to numerous copies or versions of an application that have been installed on mobile or other computing devices for large numbers of other users. In one embodiment this commonality of component presence permits observing and collecting structural and behavioral data associated with the component e.g. how the component behaves on other mobile devices . This known component data may be stored in database and the component data may be associated with a particular component identity . Thus a data repository of prior component data can be used to compare to data more recently obtained for new components such as those identified in newly installed applications on mobile device .

More specifically as characteristics and behaviors associated with components on mobile device are identified and attributed these characteristics and behaviors may be compared with known characteristics and behaviors stored either locally on mobile device or stored remotely on identity server as data associated with component identities . The results from such comparisons may be used for making decisions regarding configuration and or disabling of one or more particular components on the mobile device or other computing device e.g. user terminal as discussed in greater detail below.

Although illustrates an exemplary system implemented in client server architecture embodiments of the disclosure can be implemented in various alternative architectures. For example the identity server or application marketplace may be implemented via a peer to peer network of user terminals in some embodiments where applications and data information from mobile devices are shared via peer to peer communication connections.

In some embodiments a combination of client server architecture and peer to peer architecture can be used in which one or more centralized server may be used to provide some of the information and or services and the peer to peer network is used to provide other information and or services. Thus embodiments of the disclosure are not limited to a particular architecture.

For example one of the applications available for download may be the application known as BTController as available on the Google Play service. Some user reviews as posted on Google Play for this application have included complaints about excessive advertisements on the user s mobile device after installation.

In one embodiment an application referred to herein as Ad Network Detector may be downloaded from the Google Play service onto a user s mobile device . The expressing of user intent and control of behavior for mobile device as described below may be incorporated into or otherwise work in conjunction with the Ad Network Detector application.

The Ad Network Detector application scans a user s phone or tablet for the presence of ad networks used in mobile apps giving the user information about what types of ads can be displayed and what information is gathered by the ad networks. With access to this information the user is able to decide whether to keep the application that has a particular ad network on the user s phone.

Mobile device e.g. smartphone or tablet usage has increased dramatically and some advertisers have begun to experiment with aggressive new techniques to display ads on mobile devices. These techniques include pushing ads to the standard Android notification bar dropping generically designed icons on the mobile desktop and modifying browser settings like bookmarks or the default homepage. Because each of these techniques can display an advertisement outside the context of a specific application it s difficult for users to know exactly which app is responsible for any given ad. The Ad Network Detector application provides a method for users to determine which ad network and application are the source for such ads.

Some ad networks also collect information that identifies a specific device or user for use in targeted marketing campaigns. Much like for browser based ads this practice allows users to see more personalized or relevant ads. It is sometimes difficult for a user to know what aspects of the user s information are collected by ad networks. The capabilities and information collection methods specific to each ad network may be determined from investigation. The Ad Network Detector application informs the user what data is being collected and by which ad network application.

In this embodiment the Ad Network Detector application provides information to the user to about practices supporting mobile advertising. The application may detect many ad networks. Some of the ad networks detected may include the following examples 

Regarding ad network capabilities and privacy in this embodiment the capabilities and information collection methods specific to each ad network may be investigated. Based on this investigation the Ad Network Detector application details what identifying information is collected by each ad network and how it is collected. This may include personal information directly linkable to an individual user such as an email address and device and network information that is specific to an individual device or network rather than to the user.

In one example a BTController application has previously been installed on the mobile device by the user among numerous other user installed applications. The BTController includes an advertisement network component having several behaviors. A first behavior is the display of advertisements in the notification bar of mobile device .

In this embodiment the components of each application e.g. BTController previously installed on mobile device are determined e.g. determined by application or another tool installed on the mobile device for that purpose . For example a scan to determine these components may be initiated by the user by her clicking on or touching a start scan button .

An example of a component to be identified is the Lead Bolt advertising network included in the BTController application. In addition at least one behavior e.g. displaying of ads in the notification bar associated with each of the components for an installed application is identified.

The identified behaviors are presented to the user e.g. in a list of scan results . At least one behavioral preference expressing the intent of the user is determined e.g. a desire of the user to opt out of a particular behavior . This intent is then implemented on the mobile device by reconfiguring the identified components of various applications on the mobile device as necessary to conform to the user s expressed intent.

In one embodiment the user s intent may be stored locally in a memory of mobile device . Alternatively this intent may be stored remotely on a different computing device such as a server e.g. software server of which may be a server operated by the software developer of the Ad Network Detector discussed above accessible via communication network . This server may also be accessible by third party application developers in order to conform behaviors to intents previously expressed by respective users. In another embodiment this server is operated by the owner of the component.

Various other embodiments are now described below. In a first embodiment a computer readable storage medium stores computer readable instructions e.g. instructions of an Ad Network Detector which when executed cause a computing apparatus e.g. a mobile device of a user to for an application installed on the mobile device of the user determine components of the application identify via at least one processor of the mobile device at least one behavior associated with each of the components including a first behavior e.g. ad display in a notification bar associated with a first component present results from the identifying to the user the results to include a list of behaviors including the first behavior and receive a selection from the user of at least one behavioral preference. Further information regarding determining the components of an application is discussed in greater detail below in the section titled Analyzing Components of an Application .

In one embodiment the at least one behavioral preference is selected from the group consisting of opting out of the first behavior opting out of one or more of the components including the first component a set of user preferences for specifically identified behaviors and a policy. In one embodiment the at least one behavioral preference is a policy and the policy is enforced on new applications installed on the mobile device. In one embodiment the first component enables the user to selectively opt out of individual behaviors of the first component.

In one embodiment the selection from the user of at least one behavioral preference is to opt out of the first behavior and the instructions further cause after the opting out running the first component to determine whether the first behavior is active. In one embodiment the determining whether the first behavior is active comprises at least one activity selected from the group consisting of running the first component in an emulated environment on a different computing device e.g. software server and monitoring behavior on the mobile device after receiving the selection from the user.

In one embodiment the selection from the user of at least one behavioral preference is to opt out of the first behavior and the instructions further cause after the opting out determining a status of the opting out using an application programming interface of the first component. In one embodiment the instructions further cause the mobile device to in response to the selection from the user reconfigure execution of the first component so that the first behavior no longer occurs on the mobile device.

In one embodiment the instructions further cause in response to the selection from the user uninstalling the application from the mobile computing device. In one embodiment the instructions further cause in response to the selection from the user disabling further execution of the first component on the mobile device. In one embodiment the first component is shared by the application and an additional application and the disabling affects both the application and the additional application.

In one embodiment the first behavior is a presentation of messages to the user. In one embodiment the messages include at least one advertisement presented in a notification area of the mobile device. In one embodiment the presentation of messages is outside of a context of the application presented to the user during normal operation of the application. In one embodiment the first component is a part of the application.

In one embodiment the instructions further cause displaying opt out options to the user wherein the opt out options are solely for applications already installed on the mobile device. In one embodiment the instructions further cause displaying opt out options to the user the opt out options comprising all possible opt out flows for the user on the mobile device as determined from a database. In one embodiment the first component is a linked library packaged with the application prior to installation of the application on the mobile device.

In one embodiment the mobile device is a tablet device. In one embodiment the first component is a portion of the executable code of the application and the executable code enables the application to interact with an advertising network or an analytics network. In one embodiment interaction with the advertising network comprises display of advertisements provided from the advertising network.

In one embodiment a non transitory computer readable storage medium stores computer readable instructions which when executed cause a computing apparatus to for an application installed on a computing device of a user determine components of the application identify via at least one processor at least one behavior associated with each of the components including a first behavior associated with a first component and determine at least one behavioral preference of the user.

In one embodiment the instructions further cause storing the at least one behavioral preference on the computing device so that the application can locally determine the at least one behavioral preference. In one embodiment the instructions further cause the first component to evaluate the at least on behavioral preference to determine how the first component is to behave on the computing device.

In one embodiment the instructions further cause storing the at least one behavioral preference on a different computing device so that an advertisement network associated with the first component can query the different computing device e.g. software server in order to determine the at least one behavioral preference of the user. In one embodiment the instructions further cause the first component to execute in conformance with results from the query of the different computing device wherein the query includes a user identifier of the user.

In one embodiment the instructions further cause in response to downloading or installing the application scanning the application to confirm compliance with the at least one behavioral preference of the user and if the application violates the at least one behavioral preference alerting the user of the violation or blocking installation of the application.

In one embodiment a system comprises a display at least one processor and memory storing instructions configured to instruct the at least one processor to determine components of an installed application identify at least one behavior associated with each of the components including a first behavior associated with a first component present on the display at least one component of the installed application for which a user can opt out and receive a selection from the user of an opt out for a first component of the at least one component.

In one embodiment the instructions are further configured to instruct the at least one processor to present an opt out status to the user for components for which the user has previously opted out.

In one embodiment a method includes for an application installed on a computing device of a user determining components of the application identifying via at least one processor of the computing device at least one behavior associated with each of the components including a first behavior associated with a first component presenting on a display of the computing device results from the identifying to the user the results to include a list of behaviors including the first behavior and receiving via a user interface of the computing device a selection from the user of at least one behavioral preference.

In one embodiment a method includes storing in a memory e.g. a memory of software server a first application e.g. the Ad Network Detector application comprising computer readable instructions which when executed cause a mobile device of a user to determine components of a second application e.g. BTController application installed on the mobile device identify at least one behavior associated with each of the components including a first behavior associated with a first component e.g. Lead Bolt component and determine at least one behavioral preference of the user and sending via at least one processor e.g. microprocessor s of software server over a communication network the first application for storage in a data processing system e.g. application marketplace for subsequent installation from the data processing system onto the mobile device.

In one embodiment the method further comprises communicating via the at least one processor with the first application after installation of the first application on the mobile device. In one embodiment the data processing system comprises an application marketplace. In one embodiment a network operator e.g. Verizon or AT T controls the data processing system and the mobile device is configured to operate with a cellular network operated by the network operator.

In one embodiment a system e.g. software server comprises at least one processor and memory storing a first application which when executed on a mobile device of a user causes the mobile device to determine components of a second application installed on the mobile device identify at least one behavior associated with each of the components including a first behavior associated with a first component and determine at least one behavioral preference of the user and the memory further storing instructions configured to instruct the at least one processor to send the first application to a data processing system e.g. application marketplace so that the first application can be later installed over a communication network on the mobile device from the data processing system.

In one embodiment the instructions are further configured to instruct the at least one processor to communicate with the first application after installation of the first application on the mobile device.

In one embodiment a method includes communicating via at least one processor e.g. a processor of software server with an application e.g. the Ad Network Detector application executing on a mobile device of a user the application identifying at least one behavior on the mobile device the at least one behavior associated with each of a plurality of components of a plurality of other applications installed on the mobile device and the at least one behavior including a first behavior associated with a first component receiving at least one behavioral preference of the user from the mobile device the at least one behavioral preference determined by the application based on input from the user and storing in a memory e.g. storing in a database distributed among multiple database servers the at least one behavioral preference.

In one embodiment the method further comprises storing the at least one behavior. In one embodiment the method further comprises receiving a query from an advertisement network associated with the first component the query requesting the at least one behavioral preference of the user. In one embodiment the method further comprises receiving from the mobile device an identification of the first component and running via the at least one processor the first component in an emulated environment to determine whether the first behavior is active.

In one embodiment the method further comprises receiving a query regarding the at least one behavioral preference in order to determine conformance of a new application with the at least one behavioral preference. In one embodiment the method further comprises providing information in response to a request received over a communication network in order to evaluate the at least one behavioral preference and determine how the first component is to behave on the mobile device.

Additional exemplary non limiting details regarding various implementations of the above embodiments are now described here below. In one example a user may opt out of specific components e.g. as determined using the approaches described herein . The user is presented a list of components that the user can opt out of. The user may perform opt out actions or these may be done automatically upon user request or selection. Then the user may see e.g. on a display of a mobile device a status indication that the user has opted out of identified components.

In one embodiment there are various types of opt out options. For example a user may opt out entirely of a component opt out of particular behaviors of a component opt in entirely to a component opt in to particular behaviors of a component purge some or all data collected by a component reset an identifier used to identify the user or device to a component or otherwise modify the component s behavior on the device or the data transferred to or from the component on the device.

In one embodiment opt out options may be displayed to a user e.g. on a display of a mobile device using various approaches. In a first approach this is done by detecting which components are present in installed applications on a mobile device and then only displaying opt out flows for the applications are installed on the mobile device. In a second approach input is received from a user as to which behaviors the user wishes to opt out of. In a third approach all possible opt out flows as determined from a database are presented to the user.

In one embodiment a status for opt out may be determined in various ways. A first way uses an API provided by the vendor or developer of the component to determine the opt out status. A second way determines whether behavior is still active by running the corresponding component e.g. in an emulated environment on a server or by monitoring behavior on the user s mobile device .

In one embodiment a user declares preferences for specific behaviors desired on the user s mobile device. The components themselves evaluate these declared preferences in order to determine how the components should behave on the user s mobile device.

For example the user may set its preferences and then these preferences are stored locally or on a remote server e.g. software server . A component queries these preferences e.g. by sending a query in order to determine how the component should behave or is required to behave by the mobile device or another computing device .

In one embodiment various types of preferences that can be set by the user relate to the following location collection for targeted ads notifications in a notification area of the user s device planting of bookmarks or icons on a device and app tracking used to deliver targeted ads e.g. related to determining what apps a user has installed .

In one embodiment various methods may be used for storing the users preferences. In a first approach local service on a device is used whereby applications can query to determine what preferences a user has set.

In a second approach a server side service permits ad networks to query a user s preferences based on a user identifier e.g. phone number IMEI Android ID Apple UDID or hashed salted hashed versions of them .

In another embodiment preferences are declared for which behaviors a user desires. Automatic scanning or alerting is performed when an application that violates these preferences is downloaded or installed.

For example upon installation the mobile device detects which components are in an application and determines the behaviors that are associated with components of the application. If any of these behaviors are disallowed or require an alert the mobile device may either block the application from installing or notify the user to uninstall the application or may alert the user that the application contains a disallowed behavior in one of its components.

Now discussing additional non limiting examples there are various mechanisms that a user can use to express his or her intent. One example is an affirmative opt in or opt out for specific behaviors. For example a user may say she does not want a specific component to track her location or she does not want Google analytics to know certain information about her. Another might be that the user sets a preference indicating the desire that the user does not want any third party components to have access to or view the user s location data.

In another example an application policy may be implemented. For any app that has a component that performs an unidentified behavior the Ad Network Detector will block the app from being installed on the user s phone or other device. These are behavior based preferences that are manifested in the blockage of installation for any applications that may contain components that express such behaviors.

In one example when an application is running on a user s phone it should ask a preference service or a preference store e.g. implemented on software server what the preference is for the user and then respect that preference during execution. Information about user preferences for many users may be made available in a single online location so that a component can query and respect the preferences.

Regarding determining the components that are present in an application the application can be identified and broken into components. After identification there are various techniques that may be used to determine the behavior of those identified components. In some cases structural comparisons of the call graphs of components in an application may be examined e.g. determining which component is talking to the operating system of the mobile device and which aspects of the operating system are involved . Other forms of static analysis may also be used that involve looking at the code inside of a component. By looking at the code it can be determined whether the component can obtain a user s location for example or perform other functions. In one example a knowledge base may be maintained that includes a list of components that are commonly distributed online and the corresponding behaviors of those components.

Also dynamic analysis may be used which is essentially running the application component in an emulated environment or on an actual device and detecting what is occurring e.g. what services the component connects to or communicates with on a user device to determine whether a component has a particular behavior. Additional details regarding determination of components and component attribution are provided in the section below titled Analyzing Components of an Application .

In one example the user may be presented with a screen that shows the applications installed on the user s device or the behaviors on the device or even the full set of all behaviors that are possible on the device even outside of the apps that the user has already installed on the device and what applications components the behaviors are attributed to.

In one example a user can opt out of specific components. The user may be shown what components are on already her phone or the user can say she does not want a certain type of behavior and the Ad Network Detector only shows the user the specific network opt outs that involve that behavior.

In another example the user has expressed her preferences regarding behavior. An online preference service stores these preferences and components are required to query the service prior to installation on a mobile device of the user. The service may be implemented on the mobile device or on a separate server.

Additional information regarding various non limiting examples of mobile devices and their usage more generally including the presenting of information regarding a mobile device to a user is described in previously published U.S. Patent Application No. 2011 0047033 A1 published Feb. 24 2011 entitled SYSTEM AND METHOD FOR MOBILE DEVICE REPLACEMENT by Mahaffey et al. the entire contents of which application is incorporated by reference as if fully set forth herein.

In the system includes an inter connect e.g. bus and system core logic which interconnects a microprocessor s and memory . The microprocessor is coupled to cache memory in the example of .

The inter connect interconnects the microprocessor s and the memory together and also interconnects them to a display controller and display device and to peripheral devices such as input output I O devices through an input output controller s . Typical I O devices include mice keyboards modems network interfaces printers scanners video cameras and other devices which are well known in the art.

The inter connect may include one or more buses connected to one another through various bridges controllers and or adapters. In one embodiment the I O controller includes a USB Universal Serial Bus adapter for controlling USB peripherals and or an IEEE 1394 bus adapter for controlling IEEE 1394 peripherals.

The memory may include ROM Read Only Memory and volatile RAM Random Access Memory and non volatile memory such as hard drive flash memory etc.

Volatile RAM is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory. Non volatile memory is typically a magnetic hard drive a magnetic optical drive or an optical drive e.g. a DVD RAM or other type of memory system which maintains data even after power is removed from the system. The non volatile memory may also be a random access memory.

The non volatile memory can be a local device coupled directly to the rest of the components in the data processing system. A non volatile memory that is remote from the system such as a network storage device coupled to the data processing system through a network interface such as a modem or Ethernet interface can also be used.

In one embodiment a data processing system as illustrated in is used to implement application marketplace messaging server and or other servers.

In another embodiment a data processing system as illustrated in is used to implement a user terminal a mobile device or another computing device on which an application is installed. A user terminal may be in the form for example of a notebook computer or a personal desktop computer.

In some embodiments one or more servers of the system can be replaced with the service of a peer to peer network of a plurality of data processing systems or a network of distributed computing systems. The peer to peer network or a distributed computing system can be collectively viewed as a server data processing system.

Embodiments of the disclosure can be implemented via the microprocessor s and or the memory . For example the functionalities described can be partially implemented via hardware logic in the microprocessor s and partially using the instructions stored in the memory . Some embodiments are implemented using the microprocessor s without additional instructions stored in the memory . Some embodiments are implemented using the instructions stored in the memory for execution by one or more general purpose microprocessor s . Thus the disclosure is not limited to a specific configuration of hardware and or software.

In the position identification unit is used to identify a geographic location. The position identification unit may include a satellite positioning system receiver such as a Global Positioning System GPS receiver to automatically identify the current position of the user device.

In the communication device is configured to communicate with a network server to provide data including location data. In one embodiment the user input device is configured to receive or generate user data or content. The user input device may include a text input device a still image camera a video camera and or a sound recorder etc.

Various additional embodiments related to component analysis and attribution e.g. identifying and determining components of an application are now set forth below. The embodiments below do not limit the generality of any embodiments in the foregoing description.

In one embodiment an application is a mobile application which contains one or more components e.g. a library ad network or analytics software development kit SDK or other set of code designed to work together . A component identity e.g. component identity is information about a component. Examples of component identities include the following a category e.g. ad network analytics and malware SDK authorship e.g. Acme Inc. John Smith name of a component e.g. AdMob a range of versions or all versions of a component e.g. AdMob 6.x AdMob zlib and a particular version of a component e.g. zlib 1.2.7 AdMob SDK 6.0.1 . The data associated with a given component may be stored in database .

In one embodiment a component s behavior is generally that behavior existing or occurring e.g. functions performed when a component is functioning on a computing device e.g. functioning in an application running on mobile device . One example of a behavior is the sending of certain types of data to a server e.g. sending browser history to a server at www1.adcompany.com or sending a location to a server at tracking.analyticscompany.net . Other examples include the following accessing data on a computing device e.g. contacts call history and performing certain functions on a device e.g. changing brightness of a screen sending a text message making a phone call pushing advertisements into a notification bar .

In one embodiment a component s structure is how a component is implemented in code. This structure may include a code package and or a code module structure. Also a component s structure may include characteristics of the executable code of the component such as for example cross references in a control flow call graph references to static data and machine instructions used.

Various further embodiments related to component analysis are now described below. In a first embodiment a non transitory computer readable storage medium stores computer readable instructions which when executed cause a computing system to for an application e.g. one of applications installed on a computing device e.g. mobile device of a user determine components e.g. components and of the application and identify via at least one processor at least one behavior e.g. sending device location to an ad server associated with each of the components including a first behavior associated with a first component. The instructions may cause the computing system to present on a user display of the computing device an identification of the components. The instructions may cause the computing system to determine at least one behavioral preference of the user.

In one embodiment the instructions cause the computing system to store a user policy e.g. user policy or one of user policies based at least in part on the at least one behavioral preference e.g. user intents expressed by the user on a mobile device and to enforce the user policy on new applications installed on the computing device.

In one embodiment the instructions cause the first component to execute in conformance with results from a query of an identity server e.g. identity server or another computing device . The instructions may cause the computing system to in response to installing the application scan the application to confirm compliance with a user policy of the user where the user policy stored on an identity server. In one embodiment the instructions may cause the computing system to enforce based on identified behaviors associated with the components a user policy for each of the components.

The instructions may cause the computing system to compare permissible behaviors in the user policy for the components with the identified behaviors. In one example the comparing of the permissible behaviors comprises determining behaviors observed for the components on other computing devices from a data repository e.g. database . The instructions may cause the computing device to in response to the determining the behaviors from the data repository configure or disable execution of one or more of the components on the computing device.

In one embodiment a system includes a data repository e.g. database storing component data for known components the component data including data for a first known component at least one processor and memory storing instructions which when executed on a computing apparatus cause the computing apparatus to for a new component in a first application for a computing device of a user perform a comparison of the new component to the component data and based on the comparison make a determination that the new component corresponds to the first known component.

In one embodiment the instructions further cause the computing apparatus to in response to the determination perform at least one of comparing a first known behavior of the first known component to a user policy of the user and comparing an observed behavior of the new component to the user policy. In one embodiment the component data includes component identities e.g. component identities each component identity corresponding to respective identifying information for a known component. In one embodiment the determination is made prior to installing the new component on the computing device.

In one embodiment the instructions further cause the computing apparatus to associate a similarity value e.g. a value within an arbitrary range of zero to one with the comparison and wherein the determination is made in response to the similarity value being greater than a threshold value. In one embodiment the comparison is based at least in part on a structure of the new component the structure selected from the group consisting of a packaging structure a module structure and an executable code structure.

In one embodiment the component data includes known structural characteristics and known behavioral characteristics. In one embodiment the performing the comparison comprises comparing the known structural characteristics and the known behavioral characteristics to identified characteristics of the new component.

In one embodiment the instructions further cause the computing apparatus to generate a notification when the identified characteristics are determined to differ from at least one of the known structural characteristics and the known behavioral characteristics. In one embodiment the generating the notification comprises sending an alert to the computing device.

In one embodiment a method includes storing in memory component data for known components the component data including data for a first known component for a new component in a first application for a computing device of a user perform via at least one processor a comparison of the new component to the component data and based on the comparison make a determination that the new component corresponds to the first known component.

In one embodiment the new component is selected from the group consisting of code from the first application and a library in the first application. In one embodiment each of a plurality of different applications includes the new component the new component corresponds to a set of behaviors when executed on a computing device and the component data comprises behavioral data including the set of behaviors.

In one embodiment the method further comprises associating the set of behaviors with the new component. In one embodiment each of a plurality of computing devices has been observed when running a respective one of the different applications and each of the plurality of computing devices exhibits the set of behaviors. In one embodiment the determination is based in part on a context of operation of the new component on the computing device.

In one embodiment the context is an accessing during execution of the first application of location information while the first application has a visible presence to a user e.g. the first application is presenting location information to the user on a user display and the set of behaviors includes determining a location of the computing device. In one embodiment the component data includes a plurality of contexts each associated with at least one acceptable behavior. In one embodiment the component data includes risk scores for known components and the method further comprises providing a risk score in response to a query regarding an application installed or to be installed on the computing device of the user.

In one embodiment a method comprises storing in memory a first application comprising computer readable instructions which when executed cause a mobile device of a user to for a new component of a second application installed on the mobile device perform a comparison of the new component to component data for known components the component data including data for a first known component and based on the comparison make a determination that the new component corresponds to the first known component and sending via at least one processor over a communication network the first application for storage in a data processing system for subsequent installation from the data processing system onto the mobile device.

In one embodiment a system includes at least one processor and memory storing a first application which when executed on a mobile device of a user causes the mobile device to for a new component of a second application installed on the mobile device perform a comparison of the new component to component data for known components the component data including data for a first known component and based on the comparison make a determination that the new component corresponds to the first known component and the memory further storing instructions configured to instruct the at least one processor to send the first application to a data processing system so that the first application can be later installed over a communication network on the mobile device from the data processing system.

Now discussing a component analysis process for one particular embodiment a new application may be decomposed into identifiable components. An identity of each component may be displayed to the user. Behavioral and or structural characteristics attributable to each component identity may be identified. The behavior for a given component may be displayed to the user.

A user policy e.g. user policy based on component behavior may be enforced on the user s computing device. For example the user policy may require that there be no applications that send location to an advertising network. In another example the user policy may require that no applications send identifiers to an advertising network.

Behavioral and or structural characteristics of a component present in the new application may be identified. This may be for example an application that has been installed on mobile device .

A comparison is made between the characteristics attributable to the component identity and the characteristics that have been identified in the new application. In one embodiment if the identified characteristics are different from the characteristics attributable to the component identity then an alert is generated to indicate that the behavior of the component has changed. The characteristics attributable to the component identity may be stored in database of identity server and may be accessed when making this comparison. For example these attributable characteristics may be stored as component data associated with respective component identities i.e. known data regarding component behavior or other characteristics of a component may be stored for each component identity .

Now further detail regarding how component analysis is performed is described below. As mentioned above an application is decomposed into identifiable components. In particular a data repository stores a set of component identities in a database.

Each component identity has identifying information for a given component that if present in an application indicates that the given component is present in the application. Examples of identifying information include the following a package name prefix for a set of one or more classes a class name or a code fingerprint of a code block method class package etc.

When used fingerprinting can be performed in a variety of ways. A first way is the creating of an abstract representation of an instruction set. Another way is to from an abstract representation create a set of n gram indices that can create a fingerprint identifier for a set of code e.g. a hash of indices or that can be compared to another set of indices to perform a fuzzy match. In yet another way asset or resource fingerprinting may be used. As a final way fingerprinting may be done by analyzing the network traffic generated by an application on a device or in a dynamic analysis system. Server communication network traffic destined to a server may be used to associate a component with a particular network service. Some examples of network traffic include traffic to server with name server1.somewhere.com traffic to server with IP 8.8.8.8 or 2001 4860 4860 8888 HTTP request with header User Agent MyHttpLibrary 1.1 HTTP request with a particular URI or URI pattern and traffic that matches a SNORT or YARA rule.

Analysis of a new application can be used to determine if identifying information for a given component identity matches the new application. If it matches then the given component is present in the new application. This analysis can be done at the client e.g. mobile device the server e.g. identity server or using a combination thereof.

In one embodiment the analysis is done at one computing device e.g. either on the client or the server . The database of identifying information is stored locally on the computing device. The new application is also present locally e.g. the new application itself has been previously sent to identity server from mobile device or from application marketplace or software server prior to installation on mobile device .

In this embodiment there are multiple options for analysis. In a first option for each item of identifying information in the database the new application is searched to determine if the identifying information matches the new application. Alternatively information can be extracted from the new application and then a check or comparison done to see if that information matches any of the identifying information stored in the database.

In another embodiment a client computing device submits information to a server to determine components that are present in an application. The database of component identifying information known component data is stored on the server. The application is present on the client. The client extracts information e.g. component identifying information from the application and then sends this extracted information to the server.

The server checks to see if the extracted information matches any of the identifying information in the database e.g. the extracted information may be received as a query from mobile device . If so the server sends back information about component identities to the client e.g. the server sends results from the query to mobile device .

In a different embodiment the client computing device submits an identifier for the new application to the server. This identifier may be for example a hash of the application binary code a package name a title of the application or another form of application identifier. The server stores data regarding previously analyzed applications. This data includes a list of components for each of the previously analyzed applications.

The server uses the identifier received from the client and compares this identifier to the data regarding previously analyzed applications. If there is a match between the identifier and a previously analyzed application then the components for that matched application obtained from the stored list of components above are determined to be in the new application and this result may be sent to the client device . This matching to the database may be done similarly as was described earlier above for the component analysis on a single device. The server sends information about these identified component identities back to the client.

After a component has been identified as being present in an application the identity of the component may be displayed to the user. For example identification and display of components present in an application may be done similarly as was described above for the Ad Network Detector. Behavioral and or structural characteristics that are attributable to a given component as stored in the database for various component identities may be sent from the server to the client device for those components that have been identified as being present in an application.

In one embodiment there are various ways to identify characteristics that are actually present in a component of an application. For example U.S. Patent Application Publication No. 2011 0047597 published on Feb. 24 2011 and titled System and Method for Security Data Collection and Analysis by Mahaffey et al. which is incorporated by reference as if fully set forth herein provides a general discussion about the gathering of information from an application on a mobile device for further processing at a server. According to this embodiment information that has been gathered as described by Mahaffey et al. in U.S. Patent Application Publication No. 2011 0047597 is then used for component analysis at identity server in order to identify characteristics of a component.

In another embodiment behavioral characteristics may be determined or collected using other approaches. For example behavior may be determined based on network traffic e.g. SMS IP data or based on the code source of a given behavior e.g. a class name or a package name responsible for geo locating or a fingerprint of a code segment responsible for sending SMS traffic .

In one embodiment component identity attributable characteristics are compared to actually present characteristics e.g. as gathered for a new application just installed on a mobile device . For example if behavior is part of the known data for a component identity and a new application s component behavior matches this known behavior then it is assumed that information about the component identity e.g. in database applies to the new application. Information about the component identity may include for example a text description risk scoring and data whether an application is malware or is not malware. For example this information may be provided as a result or response to a query from a mobile device.

If the actual behavior and the known behavior for the component identity are different this may indicate that the component in the new application is a newer version or a tampered version and that the component needs to be reviewed again in order to update the database. Also an alert may be generated based on the component information determined above. For example an email may be sent to an analyst to do further analysis of a component or an entry may be created in a work queue regarding further component analysis to be done.

In various other embodiments the results from component identification for applications on a device are presented to the user. The user may provide input in a user interface to define or update a user policy based on this component identification. For example the user may opt out of an identified component.

In another embodiment a component review process is provided for reviewing potentially undesirable code at scale where manual review is not practical . The component analysis as described above is automated so that a human is not required to do component analysis manually. Characterizing components that have been previously reviewed e.g. stored as data for a component identity with a risk score and determining when that component has changed behavior i.e. the actual behavior is different from the known behavior stored in the component identity can create an automated process where humans only need to re review component code when its behavior has changed. A behavior change may also be associated with a code fingerprint having changed slightly e.g. if doing a fuzzy match there is a threshold for which it is considered that there is no change and another threshold for which it is considered that that there is a match but that there is a sufficient change in behavior . Similarly other characteristics disclosed can be used to determine if the component in the new application exactly matches the known component or if it partially matches in a way that merits re analysis.

Yet another embodiment relates to behavioral risk analysis of applications. In this embodiment the component analysis involves separating identified components that have already been reviewed i.e. components that have known component data stored in database and that are common across numerous different applications or across copies of the same application as installed on many user devices from components that are unique e.g. an associated behavior has not been observed before to a particular new application e.g. behavior unique to a single most recent installation on mobile device . These unique behaviors are specifically audited within the context of the new application e.g. application .

As an example of context it is common for ad networks to ask for location data. This is a well accepted behavior. If a user is looking for example at a game like Angry Birds an application that asks for a location may be exhibiting acceptable behavior if this behavior is associated with an ad network that has been previously observed as being acceptable e.g. as determined from data stored database . However in other cases actual game code that is itself asking for location may be inappropriate behavior.

The amount of code that is unique to any given application is typically fairly small. Most applications e.g. for mobile devices predominantly use code that is in at least one or many other applications the majority of code in an application is typically not unique and there is a lot of commonality in code between applications .

Sometimes when a behavior is analyzed in the context of a known SDK the behavior is a repeatable behavior that has previously been determined to be acceptable or to have a low risk score . Thus for example if a library has already been reviewed then further analysis can be skipped.

In an embodiment regarding similarity of known and new applications fuzzy matching and fingerprinting may be used as was discussed above . For example a similarity score of zero to one may be used. A similarity score is returned from the server after analysis of a new application. The code in the new application is compared to code that is already in the identified component library e.g. a library in database on identity server .

Typically there is not an exact code similarity match because there are many changes that a compiler can make to a particular application installation to make it different than other installations. Similarities are defined so that if the differences are over a similarity threshold then a determination is made that a known component is present in the newly installed application. For example the new application may be include a slightly customized version of a component that was previously determined to be acceptable . In other cases the new application may include a new version of a component that has not been previously analyzed. In one embodiment unacceptable code that has been only slightly modified to defeat similarity protection mechanisms is instead detected as unacceptable based on behavioral observation and component analysis as discussed above.

In one embodiment components are analyzed with respect to similarity of previously known components. Behaviors can include use of personal identifying information or device information or any actions that can be taken by applications on the device including user interface displays notifications network communications and file reading or writing actions. Policies to control or restrict the behavior of applications and their components may be defined and applied. This can include the identification of advertising networks and defining policies to permit various opt out actions for these advertising networks.

In this description various functions and operations may be described as being performed by or caused by software code to simplify description. However those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the code by a processor such as a microprocessor. Alternatively or in combination the functions and operations can be implemented using special purpose circuitry with or without software instructions such as using an Application Specific Integrated Circuit ASIC or a Field Programmable Gate Array FPGA . Embodiments can be implemented using hardwired circuitry without software instructions or in combination with software instructions. Thus the techniques are limited neither to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system.

While some embodiments can be implemented in fully functioning computers and computer systems various embodiments are capable of being distributed as a computing product in a variety of forms and are capable of being applied regardless of the particular type of machine or computer readable media used to actually effect the distribution.

At least some aspects disclosed can be embodied at least in part in software. That is the techniques may be carried out in a computer system or other data processing system in response to its processor such as a microprocessor executing sequences of instructions contained in a memory such as ROM volatile RAM non volatile memory cache or a remote storage device.

Routines executed to implement the embodiments may be implemented as part of an operating system middleware service delivery platform SDK Software Development Kit component web services or other specific application component program object module or sequence of instructions referred to as computer programs. Invocation interfaces to these routines can be exposed to a software development community as an API Application Programming Interface . The computer programs typically comprise one or more instructions set at various times in various memory and storage devices in a computer and that when read and executed by one or more processors in a computer cause the computer to perform operations necessary to execute elements involving the various aspects.

A machine readable medium can be used to store software and data which when executed by a data processing system causes the system to perform various methods. The executable software and data may be stored in various places including for example ROM volatile RAM non volatile memory and or cache. Portions of this software and or data may be stored in any one of these storage devices. Further the data and instructions can be obtained from centralized servers or peer to peer networks. Different portions of the data and instructions can be obtained from different centralized servers and or peer to peer networks at different times and in different communication sessions or in a same communication session. The data and instructions can be obtained in entirety prior to the execution of the applications. Alternatively portions of the data and instructions can be obtained dynamically just in time when needed for execution. Thus it is not required that the data and instructions be on a machine readable medium in entirety at a particular instance of time.

Examples of computer readable media include but are not limited to recordable and non recordable type media such as volatile and non volatile memory devices read only memory ROM random access memory RAM flash memory devices floppy and other removable disks magnetic disk storage media optical storage media e.g. Compact Disk Read Only Memory CD ROMS Digital Versatile Disks DVDs etc. among others. The computer readable media may store the instructions.

The instructions may also be embodied in digital and analog communication links for electrical optical acoustical or other forms of propagated signals such as carrier waves infrared signals digital signals etc. However propagated signals such as carrier waves infrared signals digital signals etc. are not tangible machine readable medium and are not configured to store instructions.

In general a tangible machine readable medium includes any mechanism that provides e.g. stores information in a form accessible by a machine e.g. a computer network device personal digital assistant manufacturing tool any device with a set of one or more processors etc. .

In various embodiments hardwired circuitry may be used in combination with software instructions to implement the techniques. Thus the techniques are neither limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system.

Although some of the drawings illustrate a number of operations in a particular order operations which are not order dependent may be reordered and other operations may be combined or broken out. While some reordering or other groupings are specifically mentioned others will be apparent to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover it should be recognized that the stages could be implemented in hardware firmware software or any combination thereof.

In the foregoing specification the disclosure has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

