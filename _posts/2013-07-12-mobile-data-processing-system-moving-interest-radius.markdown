---

title: Mobile data processing system moving interest radius
abstract: Provided is a fully automated web service with location based services generally involved in transmission of situational location dependent information to automatically located mobile receiving data processing systems. The web service communicates with a receiving data processing system in a manner by delivering information to the device when appropriate without the device requesting it at the time of delivery. The web service maximizes anonymity of users, provides granular privacy control with a default of complete privacy, and supports user configurable privileges and features for desired web service behavior and interoperability. The web service is fully automated to eliminate human resources required to operate services. Integrated with the web service are enhanced location based services providing map solutions, alerts, sharing of novel services between users, and complete user control for managing heterogeneous device interoperability through the web service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08984059&OS=08984059&RS=08984059
owner: Apple Inc.
number: 08984059
owner_city: Cupertino
owner_country: US
publication_date: 20130712
---
This application is a continuation of application Ser. No. 11 827 065 filed Jul. 10 2007 entitled Mobile Data Processing System Moving Interest Radius which is a divisional application of application Ser. No. 11 207 080 filed Aug. 18 2005 entitled System and Method for Anonymous Location Based Services now U.S. Pat. No. 8 060 389 issued Nov. 15 2011 which is a continuation in part of application Ser. No. 10 823 386 filed Apr. 12 2004 and entitled System and Method for Proactive Content Delivery By Situational Location now U.S. Pat. No. 7 187 997 issued Mar. 6 2007 which is a divisional of application Ser. No. 10 167 532 filed Jun. 11 2002 and entitled System and Method for Proactive Content Delivery By Situational Location now U.S. Pat. No. 6 731 238 issued May 4 2004 which is a divisional of application Ser. No. 09 589 328 filed Jun. 7 2000 and entitled System and Method for Proactive Content Delivery By Situational Location now U.S. Pat. No. 6 456 234 issued Sep. 24 2002.

Included in filing this application and incorporated herein by reference are the computer program listing ASCII files listed below. The files were originated and maintained on a Microsoft Windows operating system and are compatible with Windows operating systems or any other operating system that can handle the file types described below. The files represent a small selection of source file examples of implemented parts of the present application. Files were each created at various dates and may have been edited thereafter at various dates. Created dates are derived from the source code headers assuming the file creator ensured an accurate date however there may be earlier versions of different named files which evolved into the resulting files below. The Modified dates are last modified dates automatically maintained by a Windows operating system at Central Standard Time. Contents of each ASCII file is as follows 

The present invention relates generally to location dependent delivery of information to mobile data processing systems and more particularly to a system for delivering situational location dependent content to data processing system devices traveling to locations for or in directions of that place which delivery content is designated as deliverable. Further generally related is location based services and internet accessed automated web services.

The boom of the internet has greatly provided information to mobile users through wireless web server connected devices such as laptops personal digital assistants PDAs and telephones. People with an internet enabled device can access yahoo.com yahoo is a trademark of Yahoo corporation and other internet connected resources. There are also Global Positioning System GPS devices that enable mobile users to know exactly where they are on a particular map. Users with GPS device functionality can further manually enter their known location into an internet MAP directory service e.g. yahoo.com Maps and then provide a target address they want to go to. Step by step instructions are then provided to the user for how to get to the destination from the current location. Some GPS devices provide local processing for directing and narrating to a driver. Mating automated location finding systems with internet travel direction services is an attractive blend.

Cadillac recently announced the OnStar program with sales of Cadillac automobiles Cadillac and OnStar are trademarks of General Motors corporation . A person is enabled with calling upon an OnStar Advisor 7 days a week 24 hours a day with the press of a button. An emergency call for example 911 or for a disabled Cadillac vehicle allows a driver to instantly call upon wireless connected assistance. The driver may also call upon the OnStar Advisor for directions to a destination. The Advisor has access to automatic processing for determination of the vehicle s current location in case of auto theft a disabled vehicle or assisting with directions. The Advisor can also remotely unlock the vehicle should the driver lock the keys in the car. In effect Cadillac drivers have full time wireless connected assistance around the clock for many reasons. While the location determination of the vehicle is automatic there remain manual processes performed by the Advisor. Automation of some of these processes is desirable.

Many internet services derive their revenue stream from advertising. Advertisers pay to have their content delivered to users who access website and web server interfaces. Advertisers desire to target their audience at the most appropriate time. Knowing the location of a user as being relevant to a particular advertisement is desirable. Automating the delivery of the content is desirable.

A method is needed for a low cost business model that enables the efficient configuration of deliverable content for automatic delivery to mobile users based on their situational location that is relevant to receive such content.

To make such services attractive to consumers quality deliverable content is needed an environment promoting anonymous use is desirable and additional complementary location based services will enhance the experience and entice consumers to use services. Consumers are concerned with privacy so location based services should be sensitive to privacy concerns. A model providing private and anonymous location based services without limitation of functionality is desirable.

Two companies uLocate.com and dodgeball.com have developed internet accessed websites for making use of user location information uLocate.com and dodgeball.com are respective trademarks of the website companies . The uLocate.com website lacks full automation automated registration privilege assignments different user types and does not contain the many other features disclosed below in this application. The dodgeball.com website does not leverage automatic location capability using GPS or triangulation. Text messages have to be manually entered for features and functionality of the website. A globally accessed website is needed that integrates a better mode of such classes of websites using automated features along with many new features not offered by the websites to provide an enhanced set of location based services.

Different users use different types of devices laptops tablet PCs PDAs cell phones etc. An automated website that supports location enhanced services for heterogeneous devices is needed. This should include any mobile device capable of communicating with a web service. Automated account registration automated billing and high performance support for mass numbers of users is desirable. Automated deletion of obsolete accounts and data is also desirable. Eliminating the use of or at least minimizing human resource operations is reasonable. The websites yahoo.com google.com and ebay.com have demonstrated well the ability to provide valuable services to a large dispersed geographic audience through the internet without many human resources to keep the basic operations an on going business concern ebay yahoo and google are trademarks of the respective website companies . Location enhanced services can be developed to provide a similar model.

Users should have the ability to customize their experience with a website not only in how they interact with the service user interface but how the service functionality behaves in accordance to user preferences. Users should have complete control over their devices and how they interact with a service through conveniently maintained configurations. All functionality should be provided so users are anonymous and can help themselves to the service.

Not only should deliverable content be configured for targeting mobile users but the mobile users should also be able to configure deliverable content for other mobile users with novel functionality of interaction and interoperability. Novel methods are further desirable for convenient configuration of the content as well as the convenient configuration of applicable situational locations used to deem delivery of the content. In cases where an indicator is more desirable in place of associated content users should have the ability to customize delivery indicators. Delivery indicators provide a high performance method for delivery and perhaps provide an element of privacy in cases where content is delivered over an unencrypted communications link. There should be the utmost respect for privacy. Encrypted communications sessions are desirable regardless of the content delivered. People do not want third parties knowing their situational locations or the content that is delivered based on their situational locations.

The present invention provides transmission of situational location dependent information from a server data processing system SDPS to a receiving data processing system RDPS . The server data processing system SDPS communicates with the receiving data processing system RDPS by pushing content i.e. proactive content delivery when appropriate rather than in response to a user query. A candidate delivery event associated with a current positional attribute of the receiving data processing system is recognized and a situational location of the remote data processing system is determined. The candidate delivery event may be a location and or direction change device state change or movement exceeding a movement tolerance. The situational location of the remote data processing system may be its location direction location and direction proximity to a location state change or location and or direction relative to a previous location and or direction or combinations thereof. At the SDPS a set of delivery content from a deliverable content database is retrieved according to the situational location of the RDPS and according to system delivery constraints and or configured user delivery constraints. The SDPS transmits any applicable content found to the RDPS. The delivery content is configurable by authorized administrators in a manner that enables the configured content for immediate delivery should a RDPS meet the criteria of the associated situational location and delivery constraints.

Various embodiments with respect to recognizing a candidate delivery event and determining a situational location include 

A situational location is completely determined for the RDPS upon the candidate delivery event. Content that can be delivered is fully configurable of any type and can be instantly activated for candidate delivery upon convenient administration. As well known in the art of software installation the present invention may be installed to a variety of network embodiments and underlying operating systems through installation parameters or as distinct installations for the particular platform. Preferably an internet connection is used for configuring deliverable content and for the interoperation of communications between the RDPS and SDPS.

The present invention enables a user of a RDPS to be made aware of content that is applicable for the current situational location of the user. Depending on the application of the present invention the content and configurations will take on a variety of themes.

For example in an outdoor wireless embodiment of the present invention advertisement content can be configured by paying customer advertisers through an internet web interface and then automatically delivered to people when the people are in a location or heading path to a location for reasonable delivery of the content to their automobile installed or handheld RDPS. For example as a driver or pedestrian i.e. user approaches a retail store with a mobile RDPS a configured advertisement of a special deal at the retail store can be proactively delivered i.e. pushed to the user automatically on behalf of the store. Likewise an indoor wireless embodiment of the present invention enables the driver or pedestrian now a shopper inside the store to receive configured content to a shopping cart mounted or handheld RDPS directing the shopper to specific sales items as the shopper moves about the inside of the store.

In another application a policeman may activate a mobile police automobile device i.e. RDPS in a police car for automatic delivery of a person s criminal record as the policeman drives by the location of a person s house. The police establishment configures criminal record content or pointers thereto along with the location of the residence that is believed to harbor the person with a record. As the policeman drives by locations with addresses of known offenders the RDPS displays applicable criminal data. Of course the policeman can enable or disable the functionality as needed.

In another application a traveling vehicle for example a touring bus carries tourists for a narrated drive through a geographic area. Currently there are human narrators for providing narration of sites and landmarks to people of the narrated drive. The present invention allows configuring deliverable content for locations on the touring bus path so that an automated narrator RDPS installed in the bus can be provided to people on the bus. For example an RDPS providing audio video multimedia or combination thereof communicates narration content to people on the touring bus automatically as locations are encountered or driven by.

In another application a person attending a large park e.g. Disney World Disney World is a trademark of Walt Disney corporation could simply carry a RDPS and receive content to a handheld device for what attraction lies ahead based on the current location and direction of the person. The person would not have to consult a directory or ask where to find something. Informative content would be proactively delivered rather than reactively in response to a person s manual query to a service or question to a human being.

In yet a further example a valuable use would be for emergencies such as when a child is kidnapped. Currently there is an Amber Alert mechanism in Dallas Ft. Worth Tex. where radio stations broadcast an emergency message along with a distinguishable series of tones. This enables any pertinent information known about the kidnapper and child to be broadcast immediately to everyone with the radio on. The present invention enables the emergency broadcast to be immediately configured and then communicated to everyone with a RDPS for example with a wireless internet connection. A picture of the victim and other multimedia information could be delivered along with audio immediately.

In still a further use of the present invention garage sale and estate sale advertisements could be configured on behalf of paying customers that would otherwise use a newspaper classified section. As drivers become in reasonably close proximity to the sale in the desired time window advertisement content would be proactively delivered to a wireless RDPS installed or handheld in the automobile.

Thus there are many applications for the present invention all accomplished through simply changing the way the present invention is used. Content is pushed out to receiving devices at the most appropriate times. Users do not pull the content with a query.

It is therefore an advantage of the present invention in supporting a variety of applications and uses. The way the invention is used makes it applicable to a wide range of applications. For example a deliverable content database can be configured with content that is appropriate for the particular application. Situational location parameters associated with the particular application are also variable provided the installed methodology is utilized consistently. For example world coordinates GPS coordinates regional coordinates MAPSCO references Application Address Book locations and directions a user s caller id a cell number in a cellular network and like means used to describe a location can be used. Directional information of North South East West Northeast Southeast Northwest Southwest Up Down Left Right Straight Back and like methods used to describe a direction can be used. Further still there are delivery constraints that can be set up for a system or configured by a user which provides flexibility in adapting to a variety of applications.

It is another advantage of the present invention in providing deliverable content to a person based on the situational location of the person. Content is pushed to a user s RDPS when it is most appropriate for the user to see the content.

It is another advantage of the present invention in automatically recognizing a candidate delivery event of a RDPS and automatically determining a situational location of the RDPS. A user is not burdened with providing information on a query. The present invention automatically determines when content should be delivered and then automatically and proactively delivers it. Content is pushed to the user of the RDPS . The user is not burdened with pulling content via a query.

It is a further advantage of the present invention to deliver any type variety or combination of content. The content is fully configurable by an authorized administrator who may be a paying customer for the privilege of performing configurations. Upon configuration the content is immediately and instantly activated for proactive delivery to any RDPS meeting the configured criteria. Content may be audio video graphical textual multimedia intranet internet web address es activated for transposable selection image or any combination thereof.

It is another advantage in maintaining a history of delivered content at the RDPS with information that is useful for later browsing. Contained therein is information relevant to the delivered content. Additionally provided is an invocable speed address enabling the user to transpose to a web address or perform a speed dial phone call that is associated with the delivered content.

Yet another advantage of the present invention is providing new and useful query functionality for querying the total number of known receiving data processing systems for a particular situational location querying any content configured for delivery to a particular situational location with a comprehensive variety of query parameters and querying up to a maximum threshold number of deliverable content instances for a particular location in a manner which automatically determines containing ascending locations if necessary until the specified number is met.

A further advantage is to provide a web service in the context of successful website web service offerings such as yahoo.com google.com and ebay.com. A web service is a service that is accessed via the public internet. These websites permit users from all over the globe to participate in website functionality. The anonymity flexibility functionality and availability of a web service disclosed herein falls into a similar category for offering consumers enticing services and making them easy to use while eliminating human resources required for operating the service. The web service disclosed herein is completely automated and does not require a single human being to operate it. Users of the site interoperate and use the web service functionality through completely automated services. The web service maintains itself and its data in response to how the users use the service. Users can remain anonymous while taking advantage of exciting location based services and the users have full control over how they interact with other users through the service.

Two other websites web services uLocate.com and dodgeball.com are missing a multitude of features in fully automating their features and functionality. The web service embodiment discussed herein provides a superior fully automated experience for users seeking location based services in richness of features and functionality not found elsewhere.

A further advantage includes implementing a web service as a hub between different user types for configuring deliverable content and for receiving deliverable content during mobile activity with heterogeneous communications devices. Another advantage is making the web service reasonably anonymous for protecting the privacy of users but at the same time providing enough information to support statistical inferences and reports. Regardless of the anonymity granular privacy configurations are provided for full user control over what other users can and cannot do in interoperating with each other through the web services.

A further advantage includes supporting a plurality of different user types with different incentives to use the web service. For example content providers are incented to provide quality content for reaching mobile users and for receiving statistics about market conditions based on targeted content deliveries that are actually delivered. Mobile users are incented to use the service because of richness of location based service features not found anywhere else in the world. A Site Owner is incented to deploy the service for providing a value add to mobile users in return for business provided by paying user types understanding market conditions controlling the quality of information communicated in a particular application or simply having the many features available for a specific application. Quality deliverable content is scoped by the group of associated users.

Yet another advantage herein is for promoting anonymous use and the utmost privacy. Consumer privacy is respected through granular privacy configuration as well as a reasonably anonymous specification of information for creating an account to the service. Encrypted communications sessions are used wherever possible regardless of the content delivered.

Yet another advantage is providing map based solutions user defined deliverable content through a variety of convenient specification methods a user defined mobile interest radius for targeting which mobile point on earth to deliver content a user defined hit radius for targeting which area on earth to target content deliveries to mobile users who travel there and full user customization for how content deliveries are to be made. A mobile interest radius and or hit radius can be defaulted so a user does not have to configure it.

A further advantage is in providing a global fully scalable high performance web service that automates many of the manual value add features of websites such as yahoo.com google.com ebay.com uLocate.com and dodgeball.com. Automation provided herein 

Still another advantage herein is for support of heterogeneous locatable devices. Different people like different types of devices. Laptops Tablet PCs PDAs cell phones and any other communications device is supported. Complete automation of account registration account management automated billing and web service interoperability is provided for eliminating human resource operations to operate the services. Locating functionality can be provided to a device through local automatic location detection means or by automatic location detection means remote to the device. Automatic location detection means determines the whereabouts of a device and examples include GPS Global Positioning System chips GPS accessories blue tooth connected GPS triangulated location determination cell tower triangulated location antenna triangulated location in range proximity based location detection combinations thereof or by any other automatic location detection means. The NexTel GPS enabled iSeries cell phones provide excellent examples for use as mobile devices . This includes Nextel phones i325 i58sr i710 i733 i736 i830 i860 and i88S Nextel is a trademark of Nextel corporation . Blue tooth enabled cell phones PDAs and other devices also provide excellent examples for use as mobile devices . In one embodiment the GPS functionality is adapted with a blue tooth wireless connection between the device s and the GPS receiver often up to as much as 30 feet apart with distances increasing. This disclosure supports any device with GPS functionality regardless of how the GPS functionality is provided to or for the device. Many PDAs and cell phones may be blue tooth enabled which provides the ability to adapt GPS locating means to the device. This disclosure also supports proximity location means which involves a device coming within range of a detecting means for determining a known location. Being within range of the detecting means implies locating the device by associating it to the location of the detecting means. There are various wireless detection methods and implementations well know in the art for knowing when a device comes into range of communications.

Another advantage is in providing a deep integrated set of mapping solutions convenient situational location specification interfaces and complete user control for how information is delivered whether it be by email SMS messages cell phone voice connectivity internet intranet browser contexts or any other communications method.

An advantage as disclosed herein is in providing a fully automated web service for a variety of applications. One embodiment is to provide a completely free service to consumers with only the content providers being the paying customers. Consumers are enticed to use the web service by its unprecedented quality of free features offered while the content providers are enticed to use the service because of the large base of consumers attracted in using the free services. Consumers and content providers can conveniently join the service through any web browser. Nothing prevents a person from opening managing and closing their own accounts. Further provided is automated billing and account maintenance. Internet connectivity into the web service is all that is required. A reasonable account validation is incorporated to determine that a person opening an account is indeed who he claims to be without asking for personal information perceived to be too personal.

A further feature and advantage is to incorporate an SQL Standard Query Language data model for users accounts device management content management user interface management and in every reasonable aspect of the web service. This model allows leveraging useful features such as backup restore high performance I O input output transactions heterogeneously developed source code platform and operating system independence of the implementation and a proven scalable foundation upon which to build services.

Yet a further advantage herein is security. Each user interface contains access control for enforcing who gets access to which interfaces. Further provided are encrypted communications sessions in appropriate contexts to the web services. An authenticated logon is provided and automatic transposition to web service options is performed if it is determined that a successful logon had taken place before within a reasonable timeframe from the same device thereby to prevent burdening the user with repetitively logging on with credentials. User types into the web service have different privileges.

Another advantage is full user customization wherever possible in web service interfaces delivery processing custom reports device profiles delivery indicators deliverable content and wherever it makes sense to have flexibility without adding too much complexity.

It is yet another advantage in having tremendous flexibility and automation in specifying deliverable content as well as for specifying the criteria for when and how to deliver the content. Content can be resident in a DCDB Deliverable Content Database or provided dynamically on the fly from remote sources as defined by the DCDB schema and configurations therein.

It is yet another advantage to facilitate managing a particular user s data in the web service through convenient record adds record searches record list processing record modification plural record modification record deletion plural record deletion record examination and plural record examination.

It is a further advantage in automating the user specification of DCDB situational locations for configured deliverable content with GPS coordinate retrieval map selections circular area selections rectangular area selections polygon area selections address specifications locations by subscriber identifier and any other means for identifying a physical location and or location area or location space. A situational location may include an area on earth a point on earth or a three dimensional bounds in space. A mobile user target may include an area on earth a point on earth or a three dimensional bounds in space. Content targeted for delivery may result in it being delivered to mobile devices encountering a situational location or may result in delivery of an indicator for the content. Indicators are user configurable by the receiving device for how to receive content by the Content Provider for how to send content and or by system default behavior. Indicators may also be delivered dynamically based on content size target device types target device situational location target device state criteria contained in the deliverable content of any other condition associated with the target mobile device the circumstances of the deliverable content and or the deliverable content itself.

It is a further advantage in providing automation for transforming external application data sources into the deliverable content database and subsequently maintaining the data. External application data sources are existing application data sources used by otherwise unrelated applications that can provide a convenient database of delivery information depending on the application. External application data sources provide the data for existing applications that normally may not have a relationship otherwise. External application data source examples include automatically processable data formats such as electronically represented Almanac database s Guinness Book of World Records database s Multiple Listing Service MLS real estate database s Fishing Area Knowledge Base database s Product Advertisement Shopping database s Asset Inventory database s newspaper classified ad data address to coordinate mapping data postal address to latitude and longitude mapping data or any other database data format or combinations thereof containing useful information for automatic population of the deliverable content database.

Multiple databases and information can also be merged and or processed for automatic population of the deliverable content database. For example a large eBay database of advertised goods content eBay is a trademark of eBay corporation may contain the seller s location or location of merchandise information along with the advertisement in the form of postal address information. Another vendor database may provide latitude and longitude information for known postal addresses. In one example eBay database location address information is replaced with the corresponding latitude and longitude information from the address mapping database when transforming the eBay data into the deliverable content database. This allows transforming data into the deliverable content database for appropriate situational location matching to situational locations of participating devices. In other embodiments location information associated with deliverable content e.g. addresses zip codes MAPSCO etc is replaced with an appropriate location description from another database e.g. latitude and longitude earth mapping grid reference etc during automatic population of the deliverable content database. In fact this disclosure allows transforming any data for any reason from a plurality of data sources in order to achieve an appropriately populated deliverable content database. Data can also be accessed when needed so it need not be stored local to web service .

Existing useful data sources are leveraged for automatic population of the deliverable content database in order to minimize or eliminate timely creation and maintaining of data in the deliverable content database.

Yet another advantage is to provide an automated generic transform and maintenance environment for the deliverable content database. This includes automatic transform functionality to transform a variety of data source formats into the deliverable content database using run time configurable pre transform rules for affecting transform methodologies. Further provided is an automated post transform data manipulator for automatically transforming the data once it is contained in the deliverable content database.

Data may also be transformed at delivery time on the fly from remote sources so content need not be contained in the DCDB. Pointers and information enabling the instant delivery of remotely accessed content may instead be contained within the DCDB.

It is another advantage to provide functionality for assigning granulated privileges from any particular user to any other particular user or group of users. A further feature provides an affinity relationship allowing one user to act on behalf of another user or on behalf of a groups of other users. The web service functionality out of the box guarantees full privacy and no users are aware of other users. The privileges provide means for full user control to open up additional services for collaboration interoperability of novel location based services sharing user information viewing user information and many other features discussed in detail below for users interacting with other users.

Another advantage is providing a comprehensive set of find services statistics historical routes and reports to users in accordance with privacy privileges easily configured any time through a web service interface. As soon as a convenient configuration is made the privileges and corresponding functionality instantly take affect. There is no delay or waiting period for any configuration change. Map preferences are also user configurable so each user gets the map interface to behave exactly as they want it.

Another advantage includes maintaining user configured evidence as a web service cookie frame variable system variable or data file variable with a long term expiration. Subsequent navigations to an interface using such evidence causes automatic population of the evidence into fields or other real estate of the user interface. That way the user sets preferences one time which becomes in effect for all subsequent applicable service interfaces. In general all interfaces of the web service can default user interface fields using the evidence from previous user configurations.

Another advantage is providing a user interface filtering methodology for automatically filtering out undesirable data in every web service interface without requiring the user to filter out the same data in each individual interface. A user sets filter criteria one time and all web service interfaces reflect the filters that were configured by the user. Filtering criteria is conveniently set by map selections or manually entered data.

Yet a further advantage is a fully configurable delivery manager conveniently invoked from a command line or from a user interface form. The preferred embodiment of every web service page interface herein supports either a command line invocation e.g. with URL Uniform Resource Locator arguments or form fields submittal. The delivery manager is for delivering content in response to automatic determination for a device situational location. Disclosed is a Master and Archive for facilitating the content delivery experience. Web service participating devices have a Master and an Archive. A Master contains all content deliveries to a device that have been made. Only a single copy of the content is maintained in the Master but a date time stamp is updated if content is delivered redundantly to indicate the last time the content was pushed . A user can move content items from the Master to an Archive when content items are desired to be saved for the long term. The Archive will contain any number of content items that a user has selected to save from the Master to the Archive. The Archive also does not contain duplicates. The date time stamp reflects the last time a content item was delivered or alternatively can reflect when it is last moved to the Archive. As long as a content item remains in the Master it will not alert the user of a new delivery no matter how many times that item is redundantly delivered. When it is moved to the Archive then it is eligible again to notify the user of being a new delivery should it be delivered again. The Master and Archive for each device facilitates control over alerting a user of deliveries based on historical deliveries already made. The Master provides the user with control over ensuring redundant deliveries do not produce redundant alerts only the timestamp is updated to reflect the most recent delivery of the same delivery item . The user can remove an entry from the Master for being realerted to another delivery of the same item at a different situational location. The Archive provides the user with control over saving deliveries of interest while ensuring no duplicates are in the Archive. The user can also save deliveries off line to a file for other applications. The Delivery Manager preferably enforces an authentication of every device that uses it. Preferably the authentication is not the same as a user account authentication although they could be one in the same in an embodiment. A single user account may manage a plurality of devices so it is desirable that each device have its own authentication. The delivery manager provides a thorough set of controls for each user to the web service for managing what content gets delivered how often content is proactively searched and any preferences and or configurations of the receiving device for desired web service behavior.

Yet a further advantage is for complete management of a device cache for proactive content delivery by situational location. Options are provided to users for improving the web service performance and experience through having a plurality of DCDB items delivered to the device in advance of traveling to applicable situational locations. The device cache is optimized for local delivery while still providing the experience for frequently changing dynamic data to be delivered to applicable mobile devices as soon as it is configured modified or added.

Another advantage is to share experiences e.g. content deliveries of one user with other user s . Content deliveries and or configurations can be shared between users data processing systems and in accordance with privileges granted to various users or systems. The disclosed web service enables users to automatically register membership accounts and provides location based services thereafter. An enhanced location based services experience is provided for users wanting to interact with other users through the web service. Users can grant location based services privileges to other users through the web service user interfaces. Users can perform location based service actions on other users in accordance with location based services privileges that have been granted. For example a first user grants a set of location based services privileges to a second user. The second user can then use location based services provided in the web service on the first user in accordance with the privileges granted. Privileges assure privacy confidentiality and anonymity. Detailed descriptions are presented below in how this works.

Users or a group of user s can provide privileges to other user s group s of users device s or group s of device s . Users group of user s device s or group s of device s can be provided with privileges from other user s or group s of user s device s or group s of device s . In one embodiment privileges are assigned to participating devices i.e. data processing systems . In another embodiment privileges are assigned to users independent of the device a user happens to be using at the time. Specific privileges can be assigned in the following manner 

Preferences govern the ability for users or devices to make use of each other s configurations in order to manage content delivery and or alert delivery in accordance with user actions.

A further advantage herein enables a user or device to intercept or duplicate another user s or device s content delivery specified by either the originally intended recipient of the content delivery a new recipient of the content delivery or any other user with the appropriate privilege to configure interception or duplication. It is an advantage to deliver content or deliver content by situational location 

It is an advantage to deliver alerts in desired form s or deliver alerts in desired form s by situational location 

It is an advantage herein to deliver alerts and or content in desired form s in accordance with user actions or deliver alerts and or content in desired form s in accordance with user actions at a situational location 

Whether delivery is an alert content or action associated alert or content data processing systems receiving the alert or content may be an RDPS or any other data processing system. Users can assign privileges to other users users can assign privileges to devices devices can assign privileges to users devices can assign privileges to devices users can assign preferences for interacting with other users users can assign preferences for interacting with devices devices can assign privileges for interacting with users and devices can assign preferences for interacting with other devices.

Another advantage is to share the locally cached deliverable content database between users directly between the user s data processing systems or between the user s data processing systems via a server data processing system. A user s local cache or the local cache of a particular data processing system may be unique in deliverable content configured for proactive delivery based on certain configurations and may also be the result of a situational location yielding deliverable content for proactive delivery in which case sharing makes sense between users or systems .

Further advantages include user or system configurations for maintaining a local cache of deliverable content specifying to trickle updates to a local deliverable content database as deliverable content changes or becomes available and user specification of sharing and sharing of a local cache of deliverable content with other users.

Another advantage is to enable a user to specify a target delivery mobile interest radius for receiving content. Disclosed is the ability for a user to configure his RDPS or receiving system with a target mobile interest radius. For example a user would like to know what deliverable content would be delivered to his device if the content was set up for delivery to a location within 3 miles of the user s current location at all times. So as the user travels any content deemed for delivery within 3 miles of the user i.e. within 3 miles of the device is delivered. The mobile interest radius is always relative to the current location of the receiving device no matter where it is located. The terminology interest radius device interest radius mobile interest radius moving interest radius and traveling interest radius are all one in the same and are used interchangeably. Also the user can specify his mobile interest radius in measurement terms most convenient for example feet yards miles meters kilometers etc. The mobile interest radius specification enables a user to be made aware of deliverable content that is within a reasonable distance of the user no matter where the user subsequently is at the time. The user decides what determines a reasonable distance.

Continuing with the eBay example above a user would like to be made aware of a rare antique table as soon as it becomes available in the eBay database. This disclosure and the parent applications this is a continuation in part for provide real time activation of data as soon as is entered into the deliverable content database and real time delivery of the data to eligible receiving devices with the applicable configured situational location s . The user travels frequently and has learned through experience it is important to examine merchandise offered by eBay before purchasing it. So the user decides he is willing to travel 50 miles to examine the merchandise and he configures a mobile interest radius of 50 miles along with the appropriate interest and or filter criteria. Therefore no matter where the user is located at the time delivery information for a sought antique advertisement if it exists or becomes existent in the future to the eBay deliverable content database will be delivered to his device if the associated antique location is within 50 miles of the user at any time during the user s traveling. Thus not only is the user alerted as soon as the sought item becomes available but he is alerted according to a distance relative to his current location. The user was able to set up criteria one time and all future traveling becomes candidate for content delivery of existing content items or future added items in the deliverable content database.

Further features and advantages of the invention as well as the structure and operation of various embodiments of the invention are described in detail below with reference to the accompanying drawings. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number. While those skilled in the art can assert an embodiment implementation just from examining screenshots in Drawings from the web service flowcharts and architecture drawings are also provided to facilitate a timely understanding. None of the drawings discussions or materials herein is to be interpreted as limiting to a particular embodiment. The broadest interpretation is intended. Other embodiments accomplishing same functionality are within the spirit and scope of this disclosure. It should be understood that information is presented by example and many embodiments exist without departing from the spirit and scope of this disclosure.

With reference now to detail of the drawings the present invention is described. Obvious error handling is omitted from the flowcharts in order to focus on the key aspects of the present invention. Obvious error handling includes database I O errors field validation errors errors as the result of database table data constraints or unique keys and any other error handling as known to those skilled in the art of software programming in context of this disclosure. A semicolon is used in flowchart blocks to represent and separate multiple blocks of processing within a single physical block. This allows simpler flowcharts with less blocks in the drawings by placing multiple blocks of processing description in a single physical block of the flowchart. Flowchart processing is intended to be interpreted in the broadest sense by example and not for limiting methods of accomplishing the same functionality. Preferably field validation in the flowcharts checks for SQL injection attacks syntactical appropriateness and semantics errors where appropriate. Associated user interface screenshots are also preferred embodiment examples that can be implemented in many other ways without departing from the spirit and scope of this disclosure.

Flowcharts are described in a manner to enable the reader to identify where the detailed descriptions of record formats and fields are to be accessed managed and used for applicable processing. While many fields are referenced by name in processing others are intuitively mapped to the described places of processing.

The terminology data evidence is used throughout this disclosure as meaning some data which is stored and made accessible between different processing. Those skilled in the art recognize that web services are stateless implementations and require data i.e. evidence to remain between different pages user interfaces in order to communicate data from one page to another. Data evidence may be embodied as data passed through form processing from one page to another e.g. Request.Form fieldname passed as URL variables from one page to another e.g. Request.QueryString paramname stored in a cookie to the browser device in one page and then accessed by another page e.g. Request.Cookies varname stored in a frame variable and made accessible to another frame in the frame hierarchy e.g. Javascript variable set and passed in a frames implementation stored in an SQL database in one page and then accessed from the database in another page e.g. ADODB object stored in a file system object in one page and then accessed by another page e.g. FILESYSTEM object or any other means for storing data by one process or thread of execution and then accessing it by another process or thread of execution. The term data evidence can use any one of these methods in one disclosed explanation and any other method in another disclosed explanation. Alternative user interfaces since this disclosure is not to be limiting to a web service will use similar mechanisms but may use different mechanisms without departing from the spirit and scope of this disclosure.

In another embodiment of the present invention GPS satellites such as satellite satellite and satellite provide information as is well known in the art to GPS devices on earth for triangulation locating of the GPS device. In this embodiment a RDPS has integrated GPS functionality so that the RDPS monitors its positional attribute s . When the RDPS determines a candidate delivery event it communicates parameters to the controller by way of the nearest base station. Thus positional attribute information is provided by the RDPS to the SDPS. The RDPS is again known by a unique identifier for example a caller id device identifier or like appropriate unique handle.

In yet another embodiment of the present invention a physically connected device for example telephone computer PDA telephone and fax machine may be newly connected to a network. Each is a RDPS. Physical connections include copper wire optical fiber or the like. Devices are known by a unique identifier for example a caller id device identifier physical or logical network address or like appropriate unique handle. When the RDPS is detected for being newly located the SDPS determines the candidate delivery event. The SDPS may execute at an Automatic Response Unit ARU a telephony switch for example telephony switch a web server for example connected through a gateway or a like data processing system that communicates with the RDPS. RDPS detection may be a result of the RDPS initiating a communication with the SDPS directly or indirectly. Thus a user may connect his laptop to a hotel network initiate a communication with the SDPS and the SDPS determines that the user is in a different location than the previous communication. A local area network LAN may contain a variety of connected devices each an RDPS that later becomes connected to a local area network at a different location such as a PDA a server computer a printer an internet protocol telephone a computer or the like. Hard copy presentation could be made to printer and fax . Electronic content could be delivered to any RDPS.

Current technology enables devices to communicate with each other and other systems through a variety of heterogeneous system and communication methods. Current technology allows executable processing to run on diverse devices and systems. Current technology allows communications between the devices and or systems over a plethora of methodologies at close or long distance. Many technologies also exist for automatic locating of devices. It is well known how to have an interoperating communications system that comprises a plurality of individual systems communicating with each other with one or more protocols. As is further known in the art of developing software executable processing of the present invention may be developed to run on a particular target data processing system in a particular manner or customized at install time to execute on a particular data processing system in a particular manner.

TDOA is conventionally calculated from the time it takes for a communication to occur from the RDPS back to the RDPS via the base tower or alternatively from a base tower back to that base tower via the RDPS. AOA is conventionally performed through calculations of the angle by which a signal from the RDPS encounters the base tower antenna. Simple triangle geometry is then used to calculate a location. The AOA antenna is typically of a phased array type.

The controller at block may communicate with other controllers when base stations in other cellular clusters are picking up a signal for example when the RDPS roams. In any case at block the controller s determines the strongest signal base stations needed for locating the RDPS at block . The strongest 3 or 2 or 4 as discussed above are used. Thereafter block accesses base station location information for base stations determined at block . The base station provides location anchors used to relatively determine the location of the RDPS. Then block uses the TDOA or AOA information together with known base station locations to calculate the RDPS location. Blocks through are well known to those skilled in art. Thereafter block accesses historical RDPS location information and block performs housekeeping by pruning location history data for the RDPS by time number of entries or other criteria. Block then determines a direction of the RDPS based on previous location information. Block may perform Artificial Intelligence AI to determine where the traveler may be going by consulting many or all of the location history data. Block may also consider when and or where a candidate delivery event CADE was generated for a direction change in order to cause certain flow from block . Block calculates how much e.g. distance the RDPS has moved since the previous location that caused a candidate delivery event CADE generation for the RDPS event generated Y N field in location history data . Thereafter block compares the movement since the last CADE generation and if the distance exceeds a movement tolerance then block posts generates a CADE to a present invention service handling RDPS situational location changes. The movement tolerance may be a system wide setting for all RDPS devices particular to a type of RDPS or specific for an RDPS.

If at block movement did not exceed the tolerance then block checks for a direction change as determined at block . If at block the direction did change then a CADE is generated at block . If at block the direction of the RDPS did not change then block appends an appropriate entry to the location history data see . Block also flows to block . Blocks through determine if a CADE is to be generated and if so a CADE is generated at block . Blocks through determine part or all i.e. a subset of the situational location depending on the installation. processing is continuous for every RDPS in the wireless network 7 days a week 24 hours a day.

Thereafter block accesses historical RDPS location information and block performs housekeeping by pruning the location history data for the RDPS by time number of entries or other criteria. Block then determines a direction of the RDPS based on previous location information. Block may perform Artificial Intelligence AI to determine where the traveler may be going by consulting much or all of the location history data. Block may also consider when and or where a candidate delivery event CADE was generated for a direction change in order to cause certain flow from block . Block calculates how much e.g. distance the RDPS has moved since the previous location that caused a candidate delivery event CADE generation for the RDPS event generated Y N field in location history data . Thereafter block compares the movement since the last CADE generation and if the distance exceeds a movement tolerance then block posts generates a CADE to the present invention system event manager of the RDPS. The movement tolerance may be a system or user configured setting.

If at block movement did not exceed the tolerance then block checks for a direction change as determined at block . If at block the direction did change then a CADE is generated to the system event manager at block . If at block the direction of the RDPS did not change then block appends an appropriate entry to the location history data see . Block also flows to block . Blocks through determine if a CADE is to generated and if so a CADE is generated at block . Blocks through determine part or all i.e. a subset of the situational location depending on the installation. processing is continuous for the RDPS as long as the RDPS is enabled.

The CADE in this example is a result of a simple location change. Any further situational location determination task remains for the system event manager. An alternative embodiment to block would further include processing of blocks through to determine part or all i.e. a subset of the situational location so that a CADE is generated at block only if the situation warrants it.

In this example embodiment of using the present invention a shopper with a grocery cart receives content at the RDPS as the shopping cart is navigated throughout the store. Special deal sales or other promotional content is pushed automatically by the present invention to the RDPS of the shopping cart at appropriate situational locations of the shopping cart. A store representative will manage what content to deliver through convenient configuration of the present invention. The store will provide RDPS equipped shopping carts or may provide handheld RDPS devices so that shoppers will get the most of their experience by automatically receiving content that is appropriate to the shopper s situational location in the store.

The CADE in this example is a result of a simple location change. Any further situational location determination task remains for the SDPS event handler. An alternative embodiment to block would further include processing of blocks through to determine part or all i.e. a subset of the situational location so that a CADE is generated at block only if the situation warrants it.

Authorization id field contains a handle to the user who configured the database record for example a password user identifier or the like may be encrypted . Content links field contains a YES NO flag for whether there are multiple content fields associated with the database record . A separate database entity not shown for example a database table can be maintained with 3 fields one containing a matching rec id field to associate the content to the deliverable content database record one for the content type like content type field and one for the content like content field . There may be a plurality of database records in the separate database entity that are associated with the deliverable content database record . The value in the rec id field will be used to join all content items.

Applications specific data fields are available for the SDPS being an integrated solution with some other service. Location field direction field time criteria field and delivery activation setting s field together with application specific fields form the situational location information associated with the content which establishes a delivery.

The data processing system may also include a display device interface for driving a connected display device not shown . The data processing system may further include one or more input peripheral interface s to input devices such as a keyboard telephone keypad Personal Digital Assistant PDA writing implements mouse voice interface or the like. User input user input user events and user actions used interchangeably to the data processing system are inputs accepted by the input peripheral interface s . The data processing system may still further include one or more output peripheral interface s to output devices such as a printer facsimile device or the like.

Data processing system will include a communications interface for communicating to an other data processing system via analog signal waves digital signal waves infrared proximity copper wire optical fiber or the like. Other data processing system is an RDPS when data processing system is an SDPS. Other processing system is an SDPS when data processing system is an RDPS. In any case the RDPS and SDPS are said to be interoperating when communicating. Thus the RDPS and SDPS form an interoperating communications system between which data may be communicated.

Data processing system programs also called control logic may be completely inherent in the processor being a customized semiconductor or may be stored in main memory for execution by processor as the result of a read only memory ROM load not shown or may be loaded from a secondary storage device into main memory for execution by processor . Such programs when executed enable the data processing system to perform features of the present invention as discussed herein. Accordingly such data processing system programs represent controllers of the data processing system.

In one embodiment the invention is directed to a control logic program product comprising a processor readable medium having control logic software stored therein. The control logic when executed by processor causes the processor to perform functions of the invention as described herein.

In another embodiment the invention is implemented primarily in hardware for example using a prefabricated component state machine or multiple state machines in a semiconductor element such as processor .

Those skilled in the art will appreciate various modifications to the data processing system without departing from the spirit and scope of the invention. Data processing system as discussed is representative of a RDPS of the present invention. Data processing system as discussed is representative of a SDPS of the present invention.

If block determines the RDPS was not turned off then processing continues to block . If block determines that the user selected to enable communications with the SDPS then block establishes communications with the SDPS if not already established and block consults the current delivery setting. In one embodiment block through may be processed just as the result of a wireless device being powered on. If block determines that the content delivery setting for receiving situational location dependent content is enabled then block communicates with the SDPS for inserting a registry data record into the registry data. Thereafter block sets a RDPS user interface indicator showing that communications to the SDPS is enabled and processing returns to block of by way of off page connector . If block determines the delivery setting is not enabled then processing continues to block .

If block determines that the user did not select to enable communications to the SDPS then processing continues to block . If block determines that the user selected to disable SDPS communications then block communicates with the SDPS to remove its registry data record from registry data block terminates the communications session gracefully if required depending on the RDPS embodiment block sets the communications to SDPS user interface indicator to disabled and processing continues back to block . In one embodiment block through may be processed just as the result of a wireless device being powered off.

If block determines the user did not select to disable communications to the SDPS then processing continues to block . If block determines that the user selected to modify the RDPS content delivery setting then the user modifies the setting at block the delivery setting is set accordingly at block . Preferably blocks allow a user to toggle the content delivery setting. No content will be delivered when this setting is disabled. Being registered with the SDPS constitutes being eligible for delivery. Alternative embodiments won t have such a feature. The content delivery setting is a user configured delivery constraint. Block also sets and an indicator in the user interface for displaying that setting and block communicates with the SDPS to insert or remove its registry data record should the setting be different than previous. Of course appropriate error handling is performed by block if there is no communications enabled. Thereafter processing continues to block .

If block determines that the user did not select to modify the content delivery setting then processing continues to block . If block determines that the user selected to modify the movement tolerance then the user modifies a validated movement tolerance at block the movement tolerance is set at block and processing continues back to block .

If block determines that the user did not select to modify the movement tolerance then processing continues to block . If block determines that the user selected a content delivery indicator as maintained in a transmission history data record for deliverable content from the SDPS then block communicates with the SDPS using the rec id field . In one embodiment the user peruses the transmission history data in response to receiving a content delivery indicator from the SDPS. In another embodiment correlation is maintained between individual user interface indicators to their associated transmission history data record for allowing the user to simply select the indicator in the user interface for communicating with the SDPS to deliver the associated content. Providing a visual and or audible presentation of the indicator is well known in the art and may be implemented with a variety of methods. Block makes the request for content to the SDPS with the rec id . Thereafter via a received system event blocks through handle receipt delivery and RDPS user interface presentation of the content in a manner appropriate to the content type from the SDPS. Processing continues from block back to block .

If block determines that the user did not select an indicator of deliverable content then processing continues to block by way of off page connector . If block determines that the user selected to configure interests or filters then block interfaces with the user to configure interests or filters which are saved locally at block and processing continues back to block by way of off page connector . Any configured interests and filters are communicated to the SDPS at blocks and as part of registration. Interests field and filter criteria field are set with data configured at block . The RDPS must de register and re register with new settings. In an alternative embodiment block communicates with the SDPS to update the RDPS registry data record .

If block determines that the user did not select to configure interests or filters then processing continues to block . If block determines the user selected to perform a situational location query then the user specifies validated parameters discussed with at block . Thereafter block communicates an appropriate formatted request to the SDPS. Thereafter via a received system event blocks through handle receipt delivery and RDPS user interface presentation of the content in a manner appropriate to the content type from the SDPS. Processing leaves block and returns to block .

If block determines that the user did not select to perform a situational location query then processing continues to block . If block determines that the user selected to query the number of known RDPS devices at a location s i.e. a client count request then block interfaces with the user to specify valid parameters including situational location information and time criteria and processing continues to block which was described. A content specification parameter may also be specified for retrieving the situational location content as well. Time criteria embodiments include any time window in history a current time window of request transmission of request SDPS receipt of request or processing the request or a truncated precision time. Truncated precision time allows specifying time windows e.g. 12 04 pm implies 4 minutes after 12 00 pm and additionally any number of seconds up to and not including 5 minutes after 12 00 pm .

If block determines that the user did not select to query the number of RDPS devices at a location s i.e. a client count request then processing continues to block . If block determines that the user selected to browse transmission history data then block interfaces with the user until he either exits or selects information from the speed reference information field from a transmission history data record . Preferably block permits scrolling transmission history data records with fields columnized. If at block the user selected information of field then block automatically performs the action an automatic dialing of a telephone number or automatic transposition to a web page. Speed reference information field is preferably related to content that was delivered as referenced by rec id field . Thereafter processing continues back to block . If block determines that the user exited from block then processing continues back to block .

If block determines that the user did not select to browse the transmission history data then processing stops at block . Note that some RDPS embodiments will not require blocks through because there may not be an active session required to have communications between the RDPS and SDPS.

If block determines that a CADE is to be generated to the SDPS then processing continues to block . If block determines that the content delivery setting is set to enabled then block formats and issues a CADE request to the SDPS and processing continues to block by way of off page connector .

If block determines that the content delivery setting is not enabled then processing continues to block . If block determines that a CADE is not to be generated then processing continues to block .

If block determines that the system event was not for a RDPS positional attribute change from the location management system then processing continues to block . If block determines that the system event is a transmission from the SDPS with content to deliver or a content delivery indicator to content then block performs housekeeping by pruning transmission history data records . Pruning is performed by time number of entries or some other criteria. Block flows to block where the transmission history data is checked to see if the rec id field for the content or content delivery indicator communicated with the system event is already present in a transmission history data record . If the same content was already delivered a rec id field will match the rec id field for pending presentation. The system event contains parameters including rec id field with an indicator status for allowing the user to retrieve the content at a later time. If block determines the rec id field of the event is already contained in the transmission history data then processing continues back to block with no delivery processing. If block determines it is not a redundant delivery then block communicates with the SDPS for retrieval of the location field direction field content type field short text field and speed reference info field . Any type of content is presented to the RDPS user interface in the appropriate manner. Various embodiments may limit types of content using a variety of methods located at the RDPS or SDPS. Additionally either content field and linked content via content links field is retrieved or content delivery indicator s status is retrieved. Thereafter block appends a transmission history data record to the RDPS transmission history data and processing continues to block . Blocks through handle all content or indicator delivery to the RDPS preferably asynchronously to all other RDPS processing.

If block determines that the system event was not for delivery then processing stops at block . An alternative embodiment to processing will not check history for redundant content delivery. Or a user may enable or disable the feature. Block may also include applying client located filters for filtering out content. In such an embodiment a filter criteria field may not be required. The user of the RDPS may also modify the transmission history data to allow a redundant refresh.

If block determines that the administrator selected to list his deliverable content database records then the deliverable content database is searched using the administrator s authorization id against the authorization id field . Any deliverable content database records belonging to the administrator are put into a scrollable list at block and processing continues back to block . Options are available for appropriately presenting the content keywords data record and linked content via content links field . The scrollable list preferably columnizes the displayable fields and .

If block determines the user did not select to list his deliverable content database configurations then processing continues to block . If block determines that the user selected to delete a deliverable content data record from the scrollable list then block deletes the record from the content deliverable database along with any associated keywords data record and linked content via content links field . Thereafter block updates the scrollable list data and processing continues back to block .

If block determines that the administrator did not select to delete then processing continues to block . If block determines the administrator selected to add a deliverable content database record then block interfaces with the administrator for validated entry. Thereafter block generates a unique number record identifier for rec id field block inserts into the deliverable content database block inserts any associated keyword data record to the keyword data and processing continues back to block . Keywords specification allows associating delivery content to a user s interests or filters in registration data for establishing a basis of delivery. Block provides appropriate interfaces for specifying and reviewing all types of content. Block additionally populates linked content if content links field is used. Once a deliverable content database record is inserted it is instantly activated for candidate delivery. The delivery is proactive when the RDPS situational location is automatically determined.

If block determines the user did not select to add a deliverable content database record then processing continues to block . If block determines that the user selected to modify location hierarchy data records then the user modifies the data at block and processing continues back to block . If block determines the user did not select to modify location hierarchy data then processing continues to block where other user actions are handled. Other user actions include scrolling window manipulation exiting the administration interface or other navigation not relevant for discussion. Processing then continues back to block .

Preferably the block option only presents itself to a special super user administrator who is unlikely to cause problems for all other administrated configurations. It is very important that all data be maintained with integrity by blocks and . For example a deliverable content database record deleted should not be referenced by transmission history data . The rec id field will no longer be valid. processing may include an update deliverable database record option in alternative embodiments.

If block determines that the event is an RDPS registration request then block accesses registration data to see if the RDPS unique device id is already present i.e. already registered in a device id field . Thereafter if block determines the RDPS does not already have a registration data record registered then block inserts a registration data record into registration data. Much of the information may be provided as parameters to the event or alternatively block communicates with the RDPS to gather needed field information. Then block provides an acknowledgement to the RDPS or an error if already registered. Processing continues to block by way of off page connector . If block determines that the RDPS was newly registered i.e. an error was not provided then block searches the deliverable content database for delivery activation setting s field with a deliver on RDPS registration bit enabled. Thereafter if block determines there are deliverable content database records with the bit set then block processes applicable content transmission see and processing stops at block . If block determines that there was no records then processing stops at block . If block determines that the RDPS was already registered existing entry then processing continues to block . Thus a situational location change may be an RDPS state changed to registered.

If block determines that the event was not a registration request then processing continues to block . If block determines that the event is a de registration request then block access the registration data for the device id field provided with the event parameters and if block determines one is found then it is deleted at block and then an acknowledgement is provided at block with processing continuing from there as was described except block searches for the deliver on RDPS termination bit enabled. If block determines that a registration data record was not found then an error is provided at block and processing continues as previously described. Thus a situational location change may be an RDPS state changed to terminated.

If block determines that the event was not for an RDPS de registration then processing continues to block . If block determines that the RDPS user selected to retrieve content for a content delivery indicator previously sent to the RDPS by the SDPS then block accesses the deliverable content database by the rec id field provided as parameters to the event processing continues to block where the applicable content is processed see and processing stops at block .

If block determines that the event was not an indicator selection request then processing continues to block . If block determines the event is a CADE generated by the RDPS then block parses parameters from the request for example location and direction. Thereafter block completes determination of the situational location from the parameters and converts into a form suitable for searching the deliverable content database. Block consults location hierarchy data and determines the date time to further refine the RDPS situational location. Then block retrieves deliverable content database records using RDPS parameters and any applicable location hierarchy data records to fields and . Also used is data in interests field and filter criteria of the RDPS for comparing against keywords field in keywords data associated with content deliverable database records . Delivery activation setting s field is consulted as well. In some embodiments the capabilities of the RDPS are maintained in field to ensure no content of an inappropriate type is delivered. Thus field may also be utilized. If block determines that content was found then block prunes transmission history data records by time depth of records etc. block accesses the SDPS transmission history data and block continues. If block determines that the content was not already transmitted device id field and rec id field don t match any record in transmission history then processing continues to block for processing described by . If block determines that the content was transmitted then processing stops at block . If block determines content applies then processing stops at block .

If block determines that the event was not a CADE then processing continues to block by way of off page connector . If block determines that the event is for a situational location query then block searches deliverable content database records with parameters from the RDPS positional attribute parameters from the RDPS with the location field and direction field time criteria with time criteria field and so on. All fields associated to record are searchable through parameters. Block also applies location hierarchy data depending on a zoom specification parameter. The zoom specification allows control over the block search algorithm for whether or not to use hierarchy data and whether or not to check descending locations ascending locations up to a maximum threshold parameter of content both descending and ascending respectively up to a threshold of content or neither ascending nor descending hierarchy data functionality. The maximum threshold parameter may be specified regardless and optionally limits the amount of content to deliver to the RDPS by size number of content instances or number of hierarchical data record nestings to search. Further still block may use field as described above or the user s interest and or filters as described above. Information for records found are transmitted as content to the RDPS at block see and processing stops at block .

If block determines that the event was not a situational location query then processing continues to block . If block determines that the request is a client count query request then block retrieves the known number of RDPS devices at the specified situational location e.g. location direction given specified time criteria the number of transmission history data records for unique values in rec id field that contain a date time stamp according to the user s specified time criteria. A null time criteria parameter implies use the current time of processing the request with a truncated precision for a time window. Otherwise a specified time window was entered by the user or automatically inserted as a parameter by the RDPS or SDPS. Presence of the content specification parameter implies to additionally retrieve content from the deliverable content database as described by blocks through . This allows providing information e.g. graphical to complement presentation of the total number of RDPS devices identified. Processing then continues to block for transmitting the count as content.

If block determines that the event was not a client count query request then processing continues to block where any other SDPS event request is processed as is appropriate for the particular service application and processing stops at block .

If block determines there may be too much information to unquestionably transmit then block transmits content delivery indicator s information to the RDPS and processing continues to block . Thus the total size of the transmission is a transmission delivery constraint affecting the delivery information of the content. Of course could always transmit an indicator or a transmission delivery constraint size could be configured to cause content delivery indicators delivered all or most of the time. Block may use a system size setting e.g. number of bytes or may use size information relative to RDPS capabilities maintained in communications bind information field .

The reader should make note of the nearly identical descriptions and enumerations between the figures in different embodiments. The rightmost two digits of the block numbering have been preserved to facilitate correlation. correlates and so on. and are applicable to both embodiments SDPS CADE generation and RDPS CADE generation.

If block determines the RDPS was not turned off then processing continues to block . If block determines that the user selected to enable communications with the SDPS then block establishes communications with the SDPS if not already established and block consults the current delivery setting. In one embodiment block through may be processed just as the result of a wireless device being powered on. If block determines that the content delivery setting for receiving situational location dependent content is enabled then block communicates with the SDPS for inserting a registry data record into the registry data. Thereafter block sets a RDPS user interface indicator showing that communications to the SDPS is enabled and processing returns to block of by way of off page connector . If block determines the delivery setting is not enabled then processing continues to block .

If block determines that the user did not select to enable communications to the SDPS then processing continues to block . If block determines that the user selected to disable SDPS communications then block communicates with the SDPS to remove its registry data record from registry data block terminates the communications session gracefully if required depending on the RDPS embodiment block sets the communications to SDPS user interface indicator to disabled and processing continues back to block . In one embodiment block through may be processed just as the result of a wireless device being powered off.

If block determines the user did not select to disable communications to the SDPS then processing continues to block . If block determines that the user selected to modify the RDPS content delivery setting then the user modifies the setting at block the delivery setting is set accordingly at block . Preferably blocks allow a user to toggle the content delivery setting. No content will be delivered when this setting is disabled. Being registered with the SDPS constitutes being eligible for delivery. Alternative embodiments won t have such a feature. Block also sets an indicator in the user interface for displaying that setting and block communicates with the SDPS to insert or remove its registry data record should the setting be different than previous. Of course appropriate error handling is performed by block if there is no communications enabled. Thereafter processing continues to block .

If block determines that the user did not select to modify the content delivery setting then processing continues to block . If block determines that the user selected a content delivery indicator as maintained in a transmission history data record for deliverable content from the SDPS then block communicates with the SDPS using the rec id field . In one embodiment the user peruses the transmission history data in response to receiving a content delivery indicator from the SDPS. In another embodiment correlation is maintained between individual user interface indicators to their associated transmission history data record for allowing the user to simply select the indicator in the user interface for communicating with the SDPS to deliver the associated content. Providing a visual and or audible presentation of the indicator is well known in the art and may be implemented with a variety of methods. Block makes the request for content to the SDPS with the rec id . Thereafter via a received system event blocks through handle receipt delivery and RDPS user interface presentation of the content in a manner appropriate to the content type from the SDPS. Processing continues from block back to block .

If block determines that the user did not select an indicator of deliverable content then processing continues to block by way of off page connector . If block determines that the user selected to configure interests or filters then block interfaces with the user to configure interests or filters which are saved locally at block and processing continues back to block by way of off page connector . Any configured interests and filters are communicated to the SDPS at blocks and as part of registration. Interests field and filter criteria field are set with data configured at block . The RDPS must de register and re register with new settings. In an alternative embodiment block communicates with the SDPS to update the RDPS registry data record .

If block determines that the user did not select to configure interests or filters then processing continues to block . If block determines the user selected to perform a situational location query then the user specifies validated parameters discussed with at block . Thereafter block communicates an appropriate formatted request to the SDPS and thereafter via a received system event blocks through handle receipt delivery and RDPS user interface presentation of the content in a manner appropriate to the content type from the SDPS. Processing leaves block and returns to block .

If block determines that the user did not select to perform a situational location query the processing continues to block . If block determines that the user selected to query the number of known RDPS devices at a location s i.e. a client count request then block interfaces with the user to specify valid parameters including situational location information and time criteria and processing continues to block which was described. A content specification parameter may also be specified for retrieving the situational location content as well. Time criteria embodiments include any time window in history a current time window of request transmission of request SDPS receipt of request or processing the request or a truncated precision time.

If block determines that the user did not select to query the number of RDPS devices at a location s i.e. a client count request then processing continues to block . If block determines that the user selected to browse transmission history data then block interfaces with the user until he either exits or selects information from the speed reference information field from a transmission history data record . Preferably block permits scrolling transmission history data records with fields columnized. If at block the user selected information of field then block automatically performs the action an automatic dialing of a telephone number or automatic transposition to a web page. Speed reference information field is preferably related to content that was delivered as referenced by rec id field . Thereafter processing continues back to block . If block determines that the user exited from block then processing continues back to block . If block determines that the user did not select to browse the transmission history data then processing stops at block . Note that some RDPS embodiments will not require blocks through because there may not be an active session required to have communications between the RDPS and SDPS. In one embodiment the movement tolerance is communicated to the SDPS at blocks and and then inserted to movement tolerance field .

If block determines that the system event was not for delivery then processing stops at block . An alternative embodiment to processing will not check history for redundant content delivery. Or a user may enable or disable the feature. Block may also include applying client located filters for filtering out content. In such an embodiment a filter criteria field may not be required. The user of the RDPS may also modify the transmission history data to allow a redundant refresh.

If block determines that the event is an RDPS registration request then block accesses registration data to see if the RDPS unique device id is already present i.e. already registered in a device id field . Thereafter if block determines the RDPS does not already have a registration data record registered then block inserts a registration data record into registration data. Much of the information may be provided as parameters to the event or alternatively block communicates with the RDPS to gather needed field information. Then block provides an acknowledgement to the RDPS or an error if already registered. Processing continues to block by way of off page connector . If block determines that the RDPS was newly registered i.e. an error was not provided then block searches the deliverable content database for delivery activation setting s field with a deliver on RDPS registration bit enabled. Thereafter if block determines there are deliverable content database records with the bit set then block processes applicable content transmission see and processing stops at block . If block determines that there was no records then processing stops at block . If block determines that the RDPS was already registered existing entry then processing continues to block . Thus a situational location change may be an RDPS state changed to registered.

If block determines that the event was not a registration request then processing continues to block . If block determines that the event is a de registration request then block access the registration data for the device id field provided with the event parameters and if block determines one is found then it is deleted at block and then an acknowledgement is provided at block with processing continuing from there as was described except block searches for the deliver on RDPS termination bit enabled. If block determines that a registration data record was not found then an error is provided at block and processing continues as previously described. Thus a situational location change may be an RDPS state changed to terminated.

If block determines that the event was not for an RDPS de registration then processing continues to block . If block determines that the RDPS user selected to retrieve content for a content delivery indicator previously sent to the RDPS by the SDPS then block accesses the deliverable content database by the rec id field provided as parameters to the event processing continues to block where the applicable content is processed see and processing stops at block .

If block determines that the event was not an indicator selection request then processing continues to block . If block determines the event is a CADE generated by a service of or to the SDPS see and then block parses parameters from the request for example location and direction. Thereafter block completes determination of the situational location from the parameters and converts into a form suitable for searching the deliverable content database. Block consults location hierarchy data and determines the date time to further refine the RDPS situational location. Then block retrieves deliverable content database records using RDPS parameters and any applicable location hierarchy data records to fields and . Also used is data in interests field and filter criteria of the RDPS for comparing against keywords field in keywords data associated with content deliverable database records . Delivery activation setting s field is consulted as well. In some embodiments the capabilities of the RDPS are maintained in field to ensure no content of an inappropriate type is delivered. Thus field may also be utilized. If block determines that content was found then block prunes transmission history data records by time depth of records etc. block accesses the SDPS transmission history data and block continues. If block determines that the content was not already transmitted device id field and rec id field don t match any record in transmission history then processing continues to block for processing described by . If block determines that the content was transmitted then processing stops at block . If block determines content applies then processing stops at block .

If block determines that the event was not a CADE then processing continues to block by way of off page connector . If block determines that the event is for a situational location query then block searches deliverable content database records with parameters from the RDPS positional attribute parameters from the RDPS with the location field and direction field time criteria with time criteria field and so on. All fields associated to record are searchable through parameters. Block also applies location hierarchy data depending on a zoom specification parameter. The zoom specification allows control over the block search algorithm for whether or not to use hierarchy data and whether or not to check descending locations ascending locations up to a maximum threshold parameter of content both descending and ascending respectively up to a threshold of content or neither ascending nor descending hierarchy data functionality. The maximum threshold parameter may be specified regardless and optionally limits the amount of content to deliver to the RDPS by size number of content instances or number of hierarchical data record nestings to search. Further still block may use field as described above or the user s interest and or filters as described above. Information for records found is transmitted as content to the RDPS at block see and processing stops at block .

If block determines that the event was not a situational location query then processing continues to block . If block determines that the request is a client count query request then block retrieves the known number of RDPS devices at the specified situational location e.g. location direction given specified time criteria the number of location history data records for unique values in rec id field that contain a date time stamp according to the user s specified time criteria. A null time criteria parameter implies use the current time of processing the request with a truncated precision for a time window. Otherwise a specified time window was entered by the user or automatically inserted as a parameter by the RDPS or SDPS. Presence of the content specification parameter implies to additionally retrieve content from the deliverable content database as described by blocks through . This allows providing information e.g. graphical to complement presentation of the total number of RDPS devices identified. Processing then continues to block for transmitting the count as content.

If block determines that the event was not a client count query request then processing continues to block where any other SDPS event request is processed as is appropriate for the particular service application and processing stops at block . depicts a flowchart for describing the content transmission aspects. describes processing of blocks and .

In any of the embodiments described above a performance conscious implementation of the present invention including a cache may be pursued given the RDPS has appropriate capability. Without departing from the spirit and scope of the invention deliverable content database records and joined data from them may be stored at an RDPS. The SDPS may transmit a compression of the data to the RDPS for decompression and local maintaining Transmission may be at registration and or performed asynchronously to the RDPS as necessary. Thus the deliverable content database and joined data from it will be accessed locally to the RDPS to prevent real time communication of what could be large amounts of content. processing would include updating any RDPS with a local cache when configuration was complete.

In a preferred embodiment a type page or contains encoded logic according to a URL that invokes the page. The URL will have a prescribed domain name and possibly URL parameter s for governing the encoded logic for returning an appropriately formatted page to the device. In this way the type page or i.e. ASP responds uniquely for a particular heterogeneous device type animation preference domain name server DNS prefix and the particular page context content sought. In one embodiment the web service home ASP automatically determines a device type or browser type and then sets parameter s for redirecting to another ASP of the web service with those parameter s . In another embodiment every ASP automatically determines the device type or browser type upon page load for appropriate processing. In another embodiment the invoking browser is burdened with knowing the URL and parameter s for invoking each ASP for appropriate processing. In yet another embodiment any or all of the aforementioned processing techniques are incorporated in ASP processing of the web service .

Page processing flowchart starts in block upon being invoked and continues to block . Block determines how the page was arrived to for example by www.pingps.com or www.gpsping.com for processing as described above along with any parameters that were passed e.g. br pda for browser type of pda or fl off for no Flash animation . ASP Server variables e.g. Request. ServerVariables HTTP HOST and Request objects e.g. Request.QueryString fl provide this information. This design allows a plurality of DNS entries of the World Wide Web to route to a single website home page for subsequent processing. This design also enables a single ASP to support any of a number of heterogeneous devices. Thereafter block sets a page load parameter e.g. URL param according to the requestor s URL and specified parameters so that ASP processing of the redirected page target performs properly. For example www.pinggps.com would cause a page load parameter of fl off to be added to the URL www.gpsping.com i.e. http www.gpsping.com fl off for no animation. Block continues to block to check if another page should be redirected to with parameter s . If block determines that the current ASP will process the requested page correctly then processing continues to block otherwise processing flows to block where an appropriate ASP is determined and invoked with an appropriate URL and parameter s for some page type and then processing terminates for the current ASP at block .

Block determines and builds a correctly formatted page to be returned to the requestor e.g. connected device browser and block builds any navigable selection links in the page for appending any parameter s determined at block so parameters are passed to all descending web pages from this point forward in the navigation tree of web service . Therefore once the appropriate page format is determined for the requesting device all links returned in the page already reflect proper invocation of subsequent links. The user only has to click a link in the returned page and the invoked page will be properly formatted for his device. Thereafter this ASP terminates processing at block .

Flowchart is performed for every ASP. In this way heterogeneous devices are determined at the top of every page and handled properly in either the current ASP or for redirection with parameters to another ASP. Thus flowchart discloses a preferred design for not only handling heterogeneous devices but for handling an animation preference and other reasonable preferences by the requesting browser. In a preferred web service animated pages include Macromedia Flash and or Shockwave elements Macromedia Flash and Shockwave are trademarks of the Macromedia company . CD ROM file name Default.asp provides an ASP program source code listing for a home page embodiment of flowchart exemplifying animation handling and CD ROM file name svcautom.asp provides an ASP program source code listing for one web service page for animation handling. Heterogeneous browser handling of flowchart is exemplified by CD ROM files referenced in disclosure below for .

Components access server data for novel functionality. The data is preferably maintained in an SQL database. Server data for members area includes deliverable content e.g. DCDB data PingSpot content discussed below Registry data discussed below for maintaining devices to the web service Device Delivery History data Masters and Archives discussed below User preferences and configurations discussed below Statistics discussed below PingPal configurations discussed below User data discussed below of the web service members area Tracking information for tracking the whereabouts or historical situational locations of heterogeneous devices discussed below and user interface filters discussed below for enabling a user friendly user interface to members area . Registry Management enables Administrator user types to administrate a permitted number of heterogeneous devices to the web service. There are also different types of Administrator user types each with a specified number of devices they can manage. Filters Management enables all user types to customize members area user interfaces. DCDB Management enables Content Provider user types to administrate a permitted number of deliverable content data items to the DCDB of the web service. There are also different types of Content Provider user types each with a specified number of content items they can manage. Other user types can manage content to the DCDB through My GPS for example PingSpots and Pingimeters as discussed below. Delivery Manager interacts with mobile devices of the Registry for delivery of deliverable content and other novel processing discussed in detail below. Users Management is optional to the web service and enables Site Owner user types to administrate a permitted subset of User member account records of User data . All users can manage their own member account records and any records they own or created. Components each access certain areas in server data as demonstrated by lines adjoining components to the particular data area. Any of the components can be accessed with any heterogeneous device mobile or not.

In one embodiment external data source s may be remote provides deliverable content and Geocoding Conversion data enables converting situational location data of external data source s into a more suitable format situational location data for example in converting a postal address to a latitude and longitude. Data from external data source s may be imported to deliverable content for participation in delivery perhaps after a geocoding transform but not necessarily . Data from external data source s may be accessed at delivery time when needed or transformed with geocoding data when needed in which cases minimal pointer information is maintained in deliverable content for pointing to needed data when it is needed. Geocoding data includes databases facilitating conversions such as 

If block determines that a public user type was requested e.g. by way of links and then block builds a query for querying the number of members area users already registered in Users data . Thereafter block opens a database connection issues an appropriate select count query and closes the database connection. Then block checks to see if there are too many users already registered in the web service. Web service is fully automated so must ensure current capability accommodates the number of users trying to register to the service. It is conceivable that millions of users may try to register to the web service . A site configuration file is maintained for the maximum number of users preferably for each user type the site can currently support at any particular time. If that number becomes exceeded no other users can register. An automated process or human being is notified with an alert email to scale the web service up to support more users. At that point the site configuration maximum number of users supported is also increased.

If block determines the web service members area is already at capacity of maximum number of users supported for the requested user type then block sends a site full alert email to an Administrator account block handles the error appropriately as discussed below and processing terminates at block . The Administrator account is preferably an automated program scanning email content for kicking off automated processing for submitting work order s to scale up the web service for example an increase in communications bandwidth data storage processing power or any other web service resource. Work orders may also be handled by automated processes for scaling up the web service . Once the resources are provisioned the site configuration maximums are automatically updated with new maximum values in accordance with the scaled website. In one embodiment the Administrator account can be a human being monitored account for taking care of web service scaling with subsequent manual procedures involved. The site configuration maximums are constants preferably maintained in an include file included by web service pages. The include file is updated once the web service is appropriately scaled to support more users.

If at block it is determined that the maximum number of users of the requested type will not be exceeded then processing continues to block where a Pinger membership account type is determined. If this registration membership request is for a Pinger type then block builds and presents the Pinger registration page of . Thereafter in block the user interfaces to the registration page until doing a Submit of the completed form fields. Upon submission block validates user interface fields according to the user type requested just prior to invoking the form processing page. All form validation processing in this entire disclosure just prior to invoking a form processing page is preferably implemented in Javascript for cross browser compatibility but may be implemented with any reasonable method.

Thereafter if block determines one or more fields are invalid then an error is communicated to the user at block so user input specification can continue on return to block . Blocks and preferably check for SQL injection attacks common character entry errors and typical issues that occur in data entry. One method for reporting an error is to use a popup which is read by the user then removed without submitting the user interface form fields to the form processing page. Upon return to block the user responds to the errors reports. If at block all the fields specified in the user interface are valid then block invokes the registration processing page of with the user input specified as data evidence preferably form fields and the current page terminates at block . Processing of blocks through are analogous throughout similar user interface processing blocks discussed below in other flowcharts. Other embodiments of this and other flowcharts may not include device side validation at all such as blocks through prior to page form submission such that submission from a user interfacing block such as block continues directly to a processing page block such as block for validation and processing.

If block determines a Pinger membership was not requested then processing continues to block . If block determines a Content Provider Gold membership is being requested then block builds and presents the Content Provider Gold registration page of and processing continues to block and subsequent processing as already described.

If block determines the request was not for a Content Provider Gold membership then block builds and presents an appropriate interface corresponding to the membership requested and processing continues on to block already described. If block determines that a public user type was not requested then processing continues to block . Only a certain keyword parameter known to a site administrator can invoke an interface for registering any user type. If block determines that the membership requested is for site administrator use then block builds and presents the FORADMINUSE only registration page of . Thereafter processing continues to block as already described. If block determines that the registration request is invalid then the error is handled appropriately at block by way of reporting the error to the requesting user or by redirecting the user to an error page.

If block determines that all form fields are valid then block determines the number of registration attempts thus far made by this user. For example registration attempt evidence can be cached at the user s device in a cookie or kept in the server data with identifying information in a best attempt to know that this is a repeat registration attempt. Thereafter if block determines the maximum number of attempts has been exceeded then processing continues to block for processing as heretofore described.

If block determines that a maximum number of repeated attempts has not been exceeded then block checks if the type of registration requested is a FORADMINUSE request. If block determines that this is for a FORADMINUSE request then block validates the Transaction code entered. If the transaction code entered is not valid then processing continues to block . If block determines the transaction code is valid then block builds an insert command to insert data into Users data in the form of a People table record such as opens a database connection and does the insert. The number of current registration attempts is incremented for the requestor thereafter at block and block issues a query for an automatically generated primary key PersonID field upon SQL insert. Thereafter block constructs a default unique account logon name and random password builds an insert command to insert data into Users data in the form of a Users table record such as and specifies the foreign key of PersonID field to associate the records between tables and facilitate a future SQL cascade delete. PersonID field is identical to PersonID field . Block sets fields and according to the user type discussed below . In another embodiment fields and are also exposed in the FORADMINUSE interface for individual setting of the values they are described below . Thereafter block inserts to the Users table builds an insert command to insert data into Users data in the form of a LastLog table record such as does the insert to the LastLog table and closes the database connection.

Thereafter block prepares an acknowledgement email for registration success sends it to the Email Address field specification of the form such as and additionally sends a Notify email to an Administrator email account if a site configuration indicates to do so for documentary purposes. Thereafter block presents a successful registration completion page to the user for example and processing terminates at block .

If block determines that registration is not for FORADMINUSE then block checks to see if the registration attempt is for Pinger membership. If this request is for Pinger membership then processing continues to block where a random confirmation code is generated a system date time stamp determined and an email is sent to the user s Email Address specified. The email is built to contain the random confirmation code and date time stamp for example . Thereafter block builds and presents a verification user interface for example which prompts the user to enter the randomly generated confirmation code automatically sent to his email address. Data evidence is set for subsequent processing and includes the encrypted data for at least the confirmation code and all fields entered by the user to the registration membership interface preferably as hidden form fields for later insert processing. If this user is a paying customer arrived here by way of block through additional data evidence is created for the paying customer. Thereafter in block the user interfaces to the verification page until doing a Submit of the completed form fields. Upon submission block validates user interface fields just prior to invoking the form processing page.

Thereafter if block determines that one or more fields are invalid then an error is communicated to the user at block so user input specification can continue on return to block . Block preferably checks for SQL injection attacks common character entry errors and typical issues that occur in data entry. One method for reporting an error is to use a popup which is read by the user then removed without submitting the user interface form fields to the form processing page. Upon return to block the user responds to the errors reported. If at block all the fields specified in the user interface are valid confirmation code preferably not checked yet for match then block invokes the verification processing page of with the user input specified and the current page terminates at block . Block will also preferably allow a maximum number of field specification attempts to the verification interface before handling a maximum attempt error and proceeding directly to block for appropriate error processing not shown .

Blocks through ensure no User data is created for the registrant i.e. user that is performing registration until it is proven there is confirmation of his email address specified and validating email receipt through entering of the confirmation code. This automates account creation to the automated web service in an appropriate manner using email address as a globally unique identifier.

If block determines that the requested membership is not for a Pinger then processing continues to block . If block determines that membership being requested is for a Content Provider Gold account then block checks the transaction code entered from the form. If it is invalid then processing continues to block which was heretofore described. If the transaction code is valid then block invokes a connected billing system e.g. online credit card billing system for monthly recurring charges. The user interfaces with the billing system until completion or cancellation whereupon a billing transaction code is returned at block . The billing transaction code will be uniquely generated from the interface upon successful account billing or it will be an error status indicating that billing did not complete successfully for any of a variety of reasons.

Thereafter block checks the automated billing transaction code returned. If the billing transaction code is the expected proper format and content then processing continues to block as heretofore described. If block determines the transaction code is in error or indicates an unsuccessful billing transaction then processing continues to block for appropriate error handling as already described. If block determines this is not a Content Provider Gold request then block handles the particular public user type as appropriate and analogously to the descriptions above. Thereafter processing terminates at block .

In one human managed website embodiment block sets record activated ActiveUser field to not active for requiring human reconciliation. Otherwise block is assumed to enter activated records with record activated field ActiveUser field set to active. The preferred method for creating users in the members area is through the registration interface processing just discussed. A web service installation preferably already has a Site Owner user created in the database with record activated ActiveUser field set to active and user type field set to Site Owner. The confirmation code generated at block can be encrypted in a cookie at the user s device placed in a hidden form field or stored to another suitable data evidence form. A Site Owner may have access to an SQL Query Manager to Server Data for enabling all conceivable modifications to server data .

The record Email field preferably has a unique key or constraint defined preventing duplicates in web service . This is preferably the point of verification that users are who they say they are through verification processing involving their email address.

UserType field contains a value for the particular person user type of the record. User types are explained in detail in . A user type indicates a web service privilege for certain options exposed in the web service interfaces. IPAddr field preferably contains an internet protocol ip address of the registrant s device at successful registration time. This is determined for example with ASP Server variables. The Notes field contains any notes that are made on the user record for example by Users Management interfaces. The RemHostIP field preferably contains the ip address of the actual physical server of web service that inserted the data record . The HName field preferably contains the host name of the physical server of web service that inserted the record for example because web service may be a large cluster of physical servers. Extra1 field and Extra2 field are provided as convenient reserved future use fields. DTCreated field contains the date time stamp for when the record was created in the Database and the DTLastChg field contains when the record was last modified. The RowType field is a special field for providing demo People Table data records to the People Table for the Delegate user type. It indicates a real record R or a demo record D . Delegate user types are essentially read only access Site Owners of web service . RowType field enables setting up false People Table records so that Delegates do not see real user data in the database. RowType field values of D imply a row created for Delegate user types.

If block determines that all fields specified in are valid then block accesses and un encrypts the data evidence confirmation code and block checks if the code entered matches the data evidence of the encrypted confirmation code. If block determines the user did not enter a matching confirmation code then processing continues to block . Block preferably enforces a maximum number of unsuccessful attempts before denying further processing by the user s device or browser. If block determines the user entered a matching confirmation code then block builds an insert command from data evidence passed at block to insert data into Users data in the form of a People table record such as opens a database connection and does the insert. Data evidence is further used for other inserts as discussed below. Block issues a query for an automatically generated primary key PersonID field upon SQL insert. Thereafter block constructs a default unique account logon name and random password builds an insert command to insert data into Users data in the form of a Users table record and specifies the foreign key of PersonID field to associate the records between tables and facilitate an SQL cascade delete. PersonID field is identical to PersonID field . Block sets fields and according to the user type. Thereafter block inserts to the Users table builds an insert command to insert data into Users data in the form of a LastLog table record such as does the insert to the LastLog table builds an insert command to insert data into Users data in the form of a PayingCust table record such as if this is for a paying customer and does the insert to the PayingCust Table and closes the database connection. Thereafter block prepares an acknowledgement email for registration success such as sends it to the Email Address field specification of the registration membership form passed as data evidence and additionally sends a Notify email to an Administrator email account if a site configuration indicates to do so for documentary purposes. Thereafter block presents a successful registration completion page to the user for example and processing terminates at block .

It is possible that the record is not found for being updated at blocks and since web service is fully automated and user account records may have been automatically deleted because of inactivity for a site configured length of time account expiration time . These not found errors preferably do not cause error processing in blocks and . Not found errors are preferably ignored. Data evidence may be passed in encrypted form to and or B in which case the and or B processing is responsible for unencrypting e.g. assuming not an https connection already .

Thereafter block gets the next LastLog record with the cursor and continues to block . Block determines if all records were already processed or if there were none to process to start with . If there is a next record to process block checks the LastLog record IDType field to see if it is for a User account or a device. If block determines the LastLog record is for a device then block builds a query to the Registry Table records discussed below using ID field for selecting the Registry Table record containing the matching unique RegistryID field and joining Owner field with People Table PersonID field to select the device owner s account information specifically the owner s email address. Thereafter block does the query for also selecting enough information to create a friendly warning email e.g. First name last name etc creates the warning email and sends it to the owner s email address. Processing then flows back to block .

If block determines the LastLog record is for a user account then block builds a query to the People Table records using ID field for selecting a record containing the unique PersonID field to return the user account information specifically the user s email address. Thereafter block does the query for also selecting enough information to create a friendly warning email e.g. First name last name etc creates the warning email and sends it to the owner s email address from the People Table. Processing then flows back to block .

If block determines there are no records remaining to process then block closes the DB connection and processing terminates at block . Thus obsolete devices or user accounts are automatically warned for being removed from the system to keep web service and members area fully automated without maintaining unnecessary server data . Another embodiment to is to process user accounts and devices individually and or with different site configuration expirations for each. The warning email tells the user how to keep the user account or device active for example do a members area logon or access the Delivery Manager. The email preferably also includes how much time the user has remaining to do the access.

Thereafter block gets the next LastLog record with the cursor and continues to block . Block determines if all records were already processed or if there were none to process to start with . If there is a next record to process block checks the LastLog record IDType field to see if it is for a User account or a device. If block determines the LastLog record is for a device then block builds a delete command for issue to the Registry Table discussed below records using ID field for specifying the Registry Table record containing the matching unique RegistryID field . Thereafter block does the delete command for removing the device from server data . Block will also delete any device associated records prior to deleting the Registry Table record in other tables that do not have a foreign key relationship to the Registry table e.g. on RegistryID field for automatic cascade delete. Processing then flows back to block .

If block determines the LastLog record is for a user account then block builds a delete command to the People Table records using ID field for specifying the record containing the unique PersonID field . Thereafter block does the delete for removing the user from server data . Block will also delete any user associated records prior to deleting the People Table record in other tables that do not have a foreign key relationship to the People table e.g. on PersonID field for automatic cascade delete. Processing then flows back to block .

If block determines there are no records remaining to process then block deletes all the LastLog records processed by and then closes the DB connection. Processing then terminates at block . Block preferably builds a delete command with a where clause that selected records at block . Thus obsolete devices or user accounts are automatically removed from the system to keep web service and members area fully automated without maintaining unnecessary server data . Another embodiment to is to process user accounts and devices individually and or with different site configuration expirations for each user or user type.

Access Control processing starts at block and continues to block where the parent page i.e. the including page with the VBScript example above is checked for being a members logon page. The members logon page preferably includes a constant before including the Access Control page such as 

That way processing would know that the parent page is the members logon page for unique access control processing. If block determines this access control processing has been included in a members logon page e.g. VALIDATE PG ACCESS variable set as above then processing continues to block where Remember Me data evidence is sought. A user can optionally request to keep successful logon data evidence at logon time fields and so another logon is not required in the future. The logon interface is automatically bypassed to go to presenting options as long as successful logon data evidence is found i.e. Remember Me option checked . For example a cookie with long term expiration can be maintained at the user s device logged on from.

If block determines that successful logon data evidence is found then a variable for forcing a logon is set to FALSE at block otherwise block continues to block where the variable for forcing a logon is set to TRUE. Blocks and each continue to block . If block determines the parent page is not for a member area logon page then processing continues to block . Block checks if successful logon data evidence is found since the page being accessed may not be a members area logon page. If block determines the successful logon data evidence is not found then block checks to see if the access control including page is for members area logon processing. If block determines the page access is for members area logon processing then the variable for forcing a logon is set to TRUE at block and processing continues to block . If block determines the page being accessed is not a members area logon page and there is no successful logon data evidence then block handles the error appropriately block closes any DB connection that may be open not if arrived to by way of block and processing terminates at block . Thus if there is no data evidence showing a previous successful logon and the page being accessed is not the members area logon then the page is not permitted to be accessed. Error handling may redirect to an invalid page or actually produce an error for the user to see. This way any URLs typed manually into a browser cannot access pages not permitted to be accessed. If block determines there is successful logon data evidence then processing continues to block . Block checks if this is a members area logon page access and that there was successful logon evidence found OR if this is an access to any other members area page. If either of these cases is true then processing continues to block where logon data evidence is interrogated otherwise processing continues to block .

Block unencrypts the logon data evidence and sanity checks its format to make sure this is not an attack by a website attacker. Thereafter block checks the findings. If block determines the successful logon data evidence is valid then processing continues to block where a validation query is built using data from the successful logon data evidence. Block then opens a DB connection and preferably queries the People Table records and Users Table records with a join for an active user based on the logon data evidence e.g. using the user id and password encrypted from a previous successful logon as found in the data evidence . There are many alternative embodiments for exactly what identifying data is kept in the successful logon data evidence for constructing the query to determine there is indeed such an active user. Regardless there has to be enough unique information in the successful logon data evidence for uniquely identifying a user. Thereafter if block determines the successful logon data evidence is valid for a user in the People Users Table s i.e. found the record then block builds a LastLog Table update command for this user and does the update with the current date time for LastAccess field . This ensures the LastLog Table always reflects the last time a page was accessed in the members area by the user. Block also checks the ACCESS LIST e.g. VBScript array example above for user types permitted to access the page with the UserType field in the record returned from the query. Thereafter if block determines the logon data evidence contains a user type authorized to access the page then processing continues to block . If block determines the user type is not permitted to access the page then block permanently removes all logon data evidence and Remember Me data evidence so it cannot be used again by the user for page accesses because the user is trying to access a page not permitted to be accessed. Block continues to block where again it is determined if the including page is for a members area logon page. If block determines it is then block sets the forced logon variable to TRUE and processing continues to block . If block determines it is any other members area page then processing continues to block for error processing already described.

If block determines the successful logon data evidence is not valid no corresponding active user data records found in Users data People Users Table s then processing continues to block already described. If block determines the successful logon data evidence from a previous logon is invalid then processing also continues to block .

Block again checks to see if a members area logon page is being accessed since there are paths to get to block which require the check. If block determines it is not a members area logon page being accessed then block checks for Remember Me checkmark data evidence. If it is found at block then block resets the expiration time of all logon data evidence for a long term in the future e.g. 30 days from current date time . One embodiment is setting cookie data evidence with an expiration in the future. Thereafter processing continues to block . If block determines there is no Remember Me evidence then block resets the expiration time of all logon data evidence for a short term in the future e.g. 30 minutes from current date time . Preferably a session cookie is used so the user s session to web service only times out after 30 minute of inactivity. Thereafter processing continues to block .

If block determines this access control processing is for a members area logon page then block checks if the variable to force a members area logon has been set to TRUE. If block determines the variable REQUIRE LOGON to force a members logon page is set to true then processing continues to block otherwise processing continues to block already described. The Access Control also makes user account variables associated with a successful page access validation available to the parent including page subsequent processing such as PersonID field UserType field MaxDevs field and MaxDCDB field etc. Any field from account applicable records or can be made accessible to code of the parent including page after the point of including access control processing in the parent including page. The field data can be available from either the previous successful logon evidence validated or from querying the People Users Table s at block . The variable to force a members area logon is also passed back to the parent including page with either a TRUE or FALSE setting.

When submit is invoked block validates fields provided for example to make sure they are non null and a password of proper length. Thereafter block checks if fields entered were valid. If block determines the logon name and password are valid then processing continues to block where logon processing of is invoked and current page processing terminates at block . If block determines not all fields were valid for processing then an error is provided at block so user entry can continue back at block . Form fields do not have to be validated at the client device at a block through in some embodiments. Submission of credentials can go directly to block for validation and processing.

The REQUIRE LOGON variable passed from processing for forcing a logon was determined based on successful logon data evidence found for preventing the user from redundantly re entering logon name and password into a logon interface every time he accesses the members area . If block determines a members area logon is not required then block sends an email for documentary purposes of the user logging on with bypass method if a flag to send such an alert is enabled. Thereafter blocks through determine the device or browser type for presenting the correct members area options interface format. If block determines the device type or browser type is a WAP device then block redirects the WAP device to the WAP options page for example . If block determines the device or browser is not a WAP device then block checks for a PDA browser. If block determines the device type or browser type is a PDA browser device then block redirects the PDA device to the PDA options page for example . If block determines the device or browser is not a PDA device then block checks for a full browser. If block determines the device type or browser type is a full browser device then block redirects the full browser device to the full browser options page for example . If block determines the device or browser is not a full browser device then block checks for a special browser. If block determines the device type or browser type is a special device then block redirects the special device to the appropriate special options page. If block determines the device or browser is not a special device then block continues to block to handle an error for the unknown device type and processing terminates at block . Blocks and also continue to block where processing terminates. processing handles options pages. CD ROM file name xmcd.asp provides an ASP program source code listing for a members area logon embodiment of . Various embodiments of blocks and can check for browser type and or device type to determine appropriately presented and formatted options.

If block determines the WAP device does not support cookies then block builds a key to be passed as a URL variable for subsequent interfaces block sets the options page link variable for the WAP options page with no cookie support and the key parameter and processing continues to block . If block determines the device is not a WAP device then block sets the options page link variable according to the device or browser type detected at block and processing continues to block where an appropriate success page is presented to the user depending on his device for example any of B or C. Block also waits for the options link to be invoked by the user and then invokes the options page according to the link. Thereafter current page processing terminates at block .

A preferred embodiment of block provides the options link to navigate to whenever the device is determined to be a full browser device. is presented as a page for first time logons into the members area to highlight features and usefulness of web service . Once successful logon data evidence is saved to the user s device subsequent accesses to the members area options page causes immediate automatic navigation to an options page e.g. by way of processing such as resulting from block . Therefore is bypassed for users that have already logged on successfully before and have placed a checkmark in Remember Me option .

If block determines the Remember Me option was not checked then block sets successful logon data evidence to short term expiration e.g. 30 minutes and processing continues to block . If block determines the credentials entered for logon are not valid then block sends an email for documentary purposes to an Administrator account if a Notify flag is enabled and processing continues to block .

Thus the option link always provides a convenient navigable link to the correctly formatted options page as clicked from the correctly formatted success page depending on the device and or browser type. Success page examples include any of depending on the device. Options page examples include any of D E and F. The user is always presented with an appropriate set of options in an appropriate format based on browser type and or device type as well as user and or user type.

Execution of block prevents processing further by any page that includes processing. This prevents unauthorized access to members area pages. In one validation logic flows to block when the user type is unauthorized to access the parent page page including the access control for example blocks to . Page access authorization depends on user type of the logged on user. Options presented to the user are also presented by the user type. In another validation data evidence must exist for a successful logon when the page being accessed requires a previous valid logon has already been performed. Logon applicable pages for entering validating credentials do not require successful logon data evidence for members area pages.

In another embodiment each user specifically may be authorized to access specific pages. For example the ACCESS LIST can include a list of user identifiers or reference s to them or credentials which are preferably maintained in an SQL database queried by credentials for determining which pages a user can access although a file string or any other means to store the relationships between users and accessible pages can be used . Each user in the database would have a list of pages they are allowed to access or a wildcard pattern describing pages they can access. So each members area page loaded would determine if a user has access to it through applicable access control and if the user does then the user type would be used to present options based on user type.

In yet another embodiment once a user is validated for access to a page the specific user can be presented options of the page depending on the user. For example each user credentials would be associated with exposable options in each interface depending on user specific assigned options permitted. While the user type would initially provide a set of presented options further options would be assignable by an administrator or configured by the system in response to actions by the user in certain options.

So all user interfaces of this disclosure are presented to users by user type user credentials specific user permitted options browser type and or device type and then additionally any user preferences that have been configured upon access to at least one page accessed by the user preferences discussed below . Any blocks in subsequent flowcharts that do access control also behave as just described.

If the user is permitted access to the page then block continues to block as described and onto block to check device or browser type. If block determines the page is being accessed by a WAP device e.g. cell phone then block displays the user type variable text e.g. field of and displays members area options appropriate for the WAP device and user type for example as depicted in . results from a user paginating from . Processing then terminates at block .

If block determines that the device or browser type is not a WAP device then block continues to block . If block determines the device or browser type is a Personal Digital Assistant PDA for example a device that runs a Microsoft Pocket Internet Explorer or Palm browser or the like then processing continues to block . In some embodiments a Microsoft Pocket Internet Explorer device will be processed by a unique execution path from a Palm PDA browser which will be processed by a unique execution path from yet a different PDA. Therefore it is understood that there may be many decisions made like blocks through for distinctly handling the nuances and specific requirements for a particular type of device or browser . Block builds the options page through the user type display field referenced in these PDA discussions from the user type display variable builds the Users options category header and builds the Users My Preferences option and Users Find option . Thereafter block checks the user type. If block determines the user is not an Administrator or Content Provider then block builds the PingPals options category header PingPals Manage option PingSpots options category header PingSpots Manage option and PingSpots Add option . Thereafter block builds the Delivery options category header Delivery Start option Delivery User Specified Location Start option Delivery Configurator option and Logout option . Thereafter block checks to see if this user is supportable. If block determines the user is an Administrator or Content Provider then processing continues directly to block thereby providing no PingPals or PingSpots options to the user.

If block determines the user is supportable then block builds support option and processing continues to block . If block determines the user is not supportable then block continues to block . A supportable user type is preferably one that did not enroll automatically through the public website. Web Service is fully automated and contracted user types that were enrolled in the system by a human being are supportable. Web service supports many different user types. In another embodiment being supportable is accomplished on a user by user basis with the user account e.g. field in records . In another embodiment automatically registered users are also supportable for example through the contact interface a pop up with a support phone number and or navigable web link or the like where help is provided.

If block determines the user is a Site Owner then block builds Debug Variables option the page is completed for serving back to the user s device at block and processing terminates at block . If block determines the user is not a Site Owner then block completes the page to service back to the user s device and processing terminates at block . Note that the PDA interface was presented to the user by device type or browser type and user or user type .

If block determines that the device or browser type is not a PDA device then block continues to block . If block determines the device or browser type is a full browser capable device for example a device that runs a Microsoft Internet Explorer or like full browser then processing continues to block . Block builds the options page through the user type display field referenced in these full browser discussions from the user type display variable builds the Users options category header and builds the Users My Preferences option and Users Find option . Thereafter block checks the user type. If block determines the user is a Site Owner or Delegate then block builds the Users Manage option and User Options Privileges option otherwise block continues to block . Block also continues to block . If block determines the user is not an Administrator or Content Provider then block builds the PingPals options category header PingPals Manage option PingPals Groups option PingPals Add Group option PingSpots options category header PingSpots Manage option PingSpots Add option Pingimeters options category header Pingimeters Manage option and Pingimeters Add option . Thereafter block continues to block . If block determines the user is an Administrator or Content Provider then processing continues directly to block thereby providing no PingPals PingSpots Pingimeters options to the user. Note that the full browser interface of contains extra PingPals options and a set of Pingimeters options that were not presented to the PDA interface of for the same user type. A performance conscious web service presents options that make sense for a device. The presented embodiment chose not to present the more user interface intensive options to the PDA however it did present the options that made sense for still capturing functionality that makes most sense for the mobile user with a PDA. Other embodiments will make all options available regardless of device or may implement the interfaces differently to enhance the performance. Any subset of options can be made available to any type of device or browser .

Block builds Filters options category header Filters Maps option and Filters Specify option . Thereafter if block determines the user is an Administrator Pinger Site Owner or Delegate then block builds the Registry option category header Registry Manage option and Registry Add option . Processing then continues to block . If block determines the user is a Site Owner or Delegate then block builds Registry Import Export option and processing continues to block . If block determines the user is not a Site Owner or Delegate then block continues to block . If block determines the user is not an Administrator Pinger Site Owner or Delegate then processing continues to block . Block builds the Delivery Content Database DCDB options category header . Thereafter block checks the user.

If block determines the user is a Content Provider Site Owner or Delegate then block builds the DCDB Manage option and DCDB Add option . Thereafter block checks the user. If block determines the user is not a Content Provider Site Owner or Delegate then block continues to block . If block determines the user is a Site Owner or Delegate then block builds the DCDB Import Export option and then block builds the DCDB Indicators option the Delivery options category header Delivery Start option Delivery User Specified Location Start option Delivery Configurator option and Logout option . Thereafter block checks to see if this user is supportable. If block determines the user is not a Site Owner or Delegate then processing continues directly to block thereby providing no Import Export option to the user.

If block determines the user is supportable then block builds support option and processing continues to block . If block determines the user is not supportable then block continues to block . If block determines the user is a Site Owner then block builds Debug Variables option the page is completed for serving back to the user s device at block and processing terminates at block . If block determines the user is not a Site Owner then block completes the page to service back to the user s device and processing terminates at block . Note that the full browser interface was presented to the user by device type or browser type and user or user type . shows that the Filters Maps option has been presented to the options initial page as though the user already clicked that option. Other embodiments will default any other option to the device.

If block determines the device or browse type is not a full browser then block checks for a special type. If block determines the page is being accessed by a special device then block displays the user type variable text and displays members area options back to the user that are appropriate for the special device and user type. Processing then terminates at block . If block determines the page is not being accessed by a special device then block displays the user type variable text and displays members area options back to the user that are appropriate for the particular device and user type. Processing then terminates at block .

So options in the members area of web service are presented by device type or browser type and user or user type . Other embodiments will present options depending on specific users. Any subset of options can be made available to any type of device or browser as well as to any particular user or user type . CD ROM file names xoptions.asp and woptions.asp provides ASP program source code listings for presenting members area options to heterogeneous devices of different users e.g. .

The dark grey highlighting of cells in the table from indicate options preferably presented to a WAP device. The light grey highlighting indicates options added to the WAP device options for preferably presenting to a PDA device. The cells not highlighted indicate options added to the PDA device options for preferably presenting to any full browser device. Registry Add row with a YES value indicates the user type can add devices under his account up to a maximum as determined by MaxDevs field . DCDB Add row with a YES value indicates the user type can add DCDB content items under his account up to a maximum as determined by MaxDCDB field . Different embodiments will populate fields and based on different requirements user types etc.

Processing starts at block and continues to block where the ACCESS LIST as discussed above is set for authorized users. Thereafter block performs access control processing and continues to block where record id evidence is accessed for reading the user s information. Record id data evidence is preferably passed as an argument in the form when selecting buttons or . Record id data evidence is placed as a parameter in the form processing for the button when the page I is built and access control processing makes it available to the page as the PersonID of the user accessing the page. Block then builds a table join query to read from the People Table and Users Table using the record id data evidence opens a DB connection does the query and closes the DB connection. Thereafter if block determines no record was found unlikely since page access was just validated for this user then block reports the error appropriately to the user interface and processing terminates at block . If block determines the query found the information then block builds and presents the top portion of the page e.g. top portion and initializes a read only field switch to null i.e. modify ok . Thereafter block determines if was invoked for view or modify. If block determines that the information is for view then the read only field switch is set at block to make all fields disabled or readonly otherwise the field switch remains set to null i.e. for modify ok . For example an html field definition embedded in VBScript such as 

references the VBScript variable dfld disable field which elaborates to either a null value i.e. do not disable the field or the string of disabled disabled field is disabled . In this way every html form construct that includes within its context can be disabled or available for edit. If block determines the information is for modify then processing continues to block where the record interface is presented for modify . Block also continues to block where the record user interface is presented disabled . Block also presents a modify button if the fields are editable i.e. information for modify as the result of selecting button . Block also inserts a hidden field into the form of so processing has record id data evidence PersonID field of what gets modified. Thereafter the user interfaces to block until the Modify button is invoked. If is displayed for viewing then block never exits to block . The user has to use the browser back key select a different selectable option through close the window or perform another user interface action that may be available for the particular heterogeneous device. If is displayed for modifying then block continues to block when the Modify button is invoked upon interfacing to . Block validates form fields according to requirements of the record types and . Thereafter block determines if all fields are valid for processing and if they are then block provides a warning pop up to ensure user information should be modified for example as depicted in . Thereafter if block determines the information should be modified acted on by user with confirm then block invokes modify record processing processing and block terminates processing for the current page. If block determines information should not be modified user cancels then processing continues back to block . If block determines that not all fields are valid for processing then block provides an error in such a way that user interface specification can continue back at block . Fields of are easily associated to record fields and .

If the user modifies his email address a re verification should be performed to ensure the email address is valid for the user. Email address data evidence is preferably placed as a hidden field in the form of to compare with any user update of the email entry field in the form after submission. Block will detect the difference before continuing to block . Assuming all form fields are valid then block will continue to a block for checking for and responding to a difference. If there is a difference then block sends a randomly generated confirmation code to the new email address presents and waits for a user response to verification processing was described above . If the user fails to enter the correct confirmation code at block user interface processing within a reasonable number of attempts then user account modification processing continues to block for handling the error. If the user enters the correct confirmation code at block user interface processing then processing continues to block for doing the updates. A uniqueness key or constraint on the Email field prevents more than one user from using the same Email address. Obvious error processing not shown in flowcharts would report the error as a unique key error email address already in use and the user could then try another Email address an unlikely error . Another embodiment will simply make the email address disabled read only for user account modifications in which case an account would have to be deleted and re created through registration with a new email address.

Button invokes processing for a single record id data evidence PersonID field of user to be deleted preferably after the user responds affirmatively to a prompt e.g. produced by client side processing for . can enforce attack prevention at block to ensure nobody except a Site Owner deletes other user records e.g. using UserType field and PersonID field from access control with RecordID passed for deletion . See discussions below.

A Site Owner user type can manage user information of other users of the members area through Users Management component . Users management component comprises the selectable Users Management option under Users options category header . In another preferred embodiment there is no option for a human to manage user account records. The fully automated web service does not need such an option. Users Management option is provided for enabling a human to change information in other person records for example UserType field fields or any other fields of any record in the People and Users tables records and . An SQL administrator could use a query manager e.g. SQL Server Enterprise manager to directly manage any records in the SQL database but that may be inconvenient. So a convenient scalable web interface is provided to web service for managing user records from anywhere in the world over the internet by way of https over an encrypted Secure Sockets Layer SSL connection. An SSL connection is the preferred method for accessing members area .

Block sets a variable ROWSPERPG to rows per page data evidence as configured by records per page field of . A defaulted number is used if the data evidence is not found. Then block checks to see how this page processing was arrived to for example by pagination or directly from the search criteria interface. If block determines the processing page was arrived to directly as the result of invoking the search button then block accesses page filter data evidence for appending to a SQL Select WHERE clause. Thereafter block builds any SQL ORDER BY clause if order by specifications were made appends SQL WHERE clause criteria based on search criteria interface field specifications appends any Filters management data evidence found to the SQL WHERE clause and constructs a SQL query string suffix comprised of a completed WHERE clause and ORDER BY clause. If the user accessing the page as determined by access control is a Delegate then the WHERE clause is also clarified with RowType D to make sure no real users are seen by Delegates. Delegates can only view demo user data for privacy reasons. WHERE clause conditions will use LIKE or depending on the field type being searched. Thereafter block completes building the SQL SELECT statement with the SQL query string suffix appended for all records joined to on PersonID. List output variable ROWSTART is initialized to 1 and list output variable ROWLAST is set to ROWSPERPG. These variables enable proper pagination between pages of results and are maintained as list pagination data evidence. Thereafter block opens a DB connection opens an active cursor using the SQL SELECT statement and determines the number of resulting rows produced by the query which is kept in a variable TOTALROWS. Thereafter if block determines there are no resulting rows then block reports the condition of no results to the user interface closes an open DB connection and processing terminates at block .

If block determines there is at least one row in the results i.e. TOTALROWS 1 then block saves the SQL SELECT query as query data evidence rows are fetched up to the variable ROWSTART the list output header is built e.g. an ORDER BY column is added to the results if not already presented in the standard list output and a variable ROWSOUT is set to 0. Name information is already put out in the standard result list form so only the zip code column had to be added to the results assuming the search criteria example of . Thereafter if block determines ROWSOUT ROWSPERPG then no additional rows are iterated out from query results in which case block builds management controls through . and pagination information is output. Thereafter if block determines TOTALROWS ROWSOUT then processing continues to block otherwise processing continues to block where a DB connection is closed and onto block of by way off page connector .

If block determines ROWSTART 1 then processing continues to block otherwise block builds the user interface page with pagination control for first page pagination control and previous page pagination control . Thereafter processing continues to block . If block determines that ROWLAST TOTALROWS then processing continues to block by way of off page connector otherwise block builds the user interface page with pagination control for last page pagination control and next page pagination control . Thereafter processing continues to block .

If block determines ROWSOUT were not greater than or equal to ROWSPERPG then block checks if all rows have been fetched for output processing. If block determines all rows have been fetched processed then processing continues to block already described. If block determines all rows have not been fetched processed then block manufactures a checkbox e.g. checkbox for a row associates record id data evidence i.e. PersonID for example in a hidden field associated with the checkbox builds the row output e.g. a row for presenting all fields of the list header increments the ROWSOUT variable by 1 then fetches the next row using the open cursor. Thereafter processing continues back to block . Blocks through comprise a loop for output of rows satisfying search criteria. Processing continuing to block by way of off page connector also preferably builds and presents a Back to Top link at the page bottom in case the user has to scroll lots of information as dictated by ROWSPERPG.

If block determines the search processing page was arrived to by pagination e.g. controls through then block accesses the query data evidence accesses the list pagination data evidence ROWSTART and ROWLAST then continues to block for issuing the query and performing subsequent processing.

The user interfaces with search results at block until an action is selected. are examples of the search results interface upon the start of block . When an action is selected block checks if it was pagination to go to the first results page for example clicking control . If block determines pagination to go to first page was selected e.g. by way of control then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for first page results at block and current page processing terminates at block . If block determines the action was not for go to first page then processing continues to block . If block determines pagination to go to the previous page was selected e.g. by way of control then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for previous page results at block and current page processing terminates at block . If block determines the action was not for go to previous page then processing continues to block . If block determines pagination to go to the next page was selected e.g. by way of control then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for next page results at block and current page processing terminates at block . If block determines the action was not for go to next page then processing continues to block . If block determines pagination to go to the last page was selected e.g. by way of control then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for last page results at block and current page processing terminates at block . If block determines the action was not for go to last page then processing continues to block . If block determines a delete view or change action was invoked then processing continues to block otherwise block handles the action appropriately and processing continues back to block . Block handles actions associated with the interface depending on the device type that are not necessarily relevant for understanding this disclosure.

Block determines how many rows are marked with a checkmark by the user and block validates it. If block determines no checkmarks are present then block provides an error for report to the user so user specification can continue back at block . If block determines at least one row has been checked then block checks the action type. If block determines that delete was invoked by the user e.g. delete management control selected then block provides a confirmation message and block determines the user s answer to the Are you sure confirmation e.g. pop up of . If block determines the user confirmed the delete then the confirmation is cleared at block list management data evidence is set for delete at block block invokes list processing of and current page processing terminates at block . If block determines the user cancelled the delete then the confirmation is cleared at block and the user continues to interact with the search results at block . If block determines that delete was not selected then list management data evidence is set for view i.e. view management control selected or modify i.e. change management control selected per user action block invokes list processing of and current page processing terminates at block . Thus provide search result list processing of registrant records for being conveniently viewed modified or viewed.

Block iterates through the form checkboxes from B to build an array of record ids i.e. PersonIDs from record id data evidence associated with rows that are check marked for action. Additionally built is a WHERE clause string of the same check marked record id evidence i.e. PersonIDs so an action can be done in a single SQL query to multiple records e.g. records and joined on PersonID . Thereafter block checks if at least one check marked checkbox e.g. was found. If none were check marked then block reports an appropriate error to the user block closes any DB connection that is open none open yet and current page processing terminates at block . If block determines at least one checkmark is found then block checks list management data evidence. If block determines list management data evidence indicates a delete action then an SQL Delete command is built at block for the People Table with the WHERE clause of record ids built at block . The corresponding User Table record s will cascade delete. Block also opens a DB connection does the People Table delete closes the DB connection sends an email to an Administrator account if a Notify flag indicates to document this type of transaction and a success interface is returned to the user. Processing then continues to block for closing any DB connection that is still open and current page processing terminates at block . Block will also delete any records and data of server data that has been created by the user account s being deleted by block which are not set up for cascade delete. Such records should be deleted prior to finally deleting the record which cascade deletes other records.

If block determines the list management data evidence does not indicate a delete action then block accesses pending query data evidence concatenates WHERE clause information of record ids PersonIDs built at block so only the check marked rows are fetched opens a DB connection does the query and fetches the first row. Thereafter block checks if even a first row was fetched. If block determines no first row was fetched no rows result from query then block handles reporting the error to the user and processing continues from there as described above. If block determines a first row was fetched then block builds the top portion of the page to return to the user. Thereafter if block determines the list management data evidence is for view then block sets the disabled read only switch dfld variable as discussed above for read only and processing continues to block . If block determines the list management data evidence is not for view then processing continues to block where the dfld variable is null for modify capability .

If block determines there is only 1 row returned from the query at block then block builds and presents a record interface presenting a Modify button only if the list management data evidence indicate a modify action e.g. control . Block also associates record id data evidence PersonID of the information presented preferably as a hidden form field. Block presents and scrolled forward if the list management data evidence was for view of a single row check marked such as with a checkmark at checkbox . Block presents and scrolled forward if the list management data evidence was for modify of a single row check marked such as with a checkmark at checkbox . Thereafter the user interfaces to any of at block until a Modify action is invoked for example clicking button . If a view interface is presented B then no Modify button can be pressed. The user can use the Back key click the first page link to return to the first page of records close the window or do whatever makes sense at the device. If the Modify button is pressed then block validates form fields according the record type i.e. records and and processing continues to block . If block determines at least one field is invalid then block reports the error to the user so field specification can continue back at block e.g. pop up . If block determines all fields are valid then block invokes modify record processing of block closes any open DB connection and current page processing terminates at block .

If block determines there is more than 1 row returned by the query at block then block checks the list management data evidence for the action requested. shows the user has selected i.e. check marked multiple rows prior to invoking a control through . If block determines the list management data evidence is not modify then processing continues to block . If block determines the list management data evidence is not for view then block processing continues to block since list management data evidence is invalid. If block determines the list management data evidence is for view then block builds the output page topmost portion and block builds a record output from the last record fetched. Thereafter if block determines the last row was fetched for output then block completes page output and processing continues to block . If block determines there is another row to output then block fetches the next row and processing loops back to block . Blocks through include a processing loop for presenting a view of multiple records such as . are actual view outputs from processing upon invoking view management control on .

If block determines the list management data evidence is for modify then block builds a Modify List user interface iterates through fetches of query results from block and establishes record id array data evidence e.g. PersonIDs for records returned preferably as hidden form fields in . actually result from invoking modify management control from . Data from the first record in the query results is conveniently defaulted in fields e.g. record . A preferred embodiment will save which row was check marked first from list output e.g. as first check data evidence so that the first checkmark determines which data is used to default the modify list interface e.g. . Note checkmark column is included for the user selecting which fields with checkmarks to update in the plurality of records resulting from the query at block . Thereafter the user interfaces to at block until Modify button is invoked. When modify is invoked processing continues to block where fields are validated from and block checks validation results. If block determines all fields are valid i.e. syntax at least one checkmark checkmark corresponds to non null field etc then block invokes Modify List processing of and processing continues to block . If not all fields are valid as determined at block then an error is reported at block to the user so field specification can continue back at block e.g. pop up .

An Administrator and Site Owner user type can manage and add devices to members area through the Registry Management component . Registry Management component comprises the selectable Registry Manage option and Registry Add option under Registry options category header . Registry Management component also provides a Registry Import Export option to a Site Owner user type read only access for Delegate for scripting management of devices. Scripts maintained can insert large numbers of devices update large numbers of devices delete large numbers of devices or do any management to devices as discussed herein except automated with scripting. It may be inconvenient requiring a user to use a Graphical User Interface GUI to maintain large numbers of devices therefore full scripting capability is provided for managing records in the Registry Table. No administrator or user except a Site Owner can see or manage another administrator s devices unless an Affinity Delegate privilege discussed below has been granted to that user. A Pinger is also an administrator but on a smaller scale. Each Pinger user type can add up to a small maximum number 1 or 3 of devices and then manage them.

In one embodiment the device Master and Archive is an html file created as a unique web service file path constructed with RegistryID. In another embodiment the device Master and Archive is an html file created as a row in an SQL database for easy query. The device Master and Archive are discussed in detail with Delivery Manager component descriptions below.

Other embodiments will provide a dummy proof user interface for adding a record to web service for the device registration. A wizard or minimal user interaction interface can be used. In one preferred embodiment a record is created at the time of creating records and for the user account thereby eliminating user hassle in creating a separate device record. In another embodiment record fields are provided as part of the user account record s and or for associating a device with the account at the time of creating the account. There are various embodiments which can facilitate registration of devices in web service without departing from the essence of functionality provided by the record fields.

Any many or all fields can be defaulted with values or disabled based on desired search criteria support or associated numbers of records in the web service. The Rcv indicators Only dropdown Rcv Compressed Only dropdown etc provide the user with a selection for Any Yes or No for searching records . Associated user dropdown provides being able to search those records which have associated users as defined by the Affinity Delegate privilege discussed below. Dropdowns and will reveal identical logon names with associated PersonIDs upon selection but are maintained separately so that granulated Affinity Delegate privileges can be implemented. In one embodiment there is a Registry Affinity Delegate privilege for searching records dropdown and field a DCDB Affinity Delegate privilege for searching records and a specific Affinity Delegate privilege for searching certain types of other records. There can also be a specific User to User Affinity Delegate privilege for generally acting on behalf of another user dropdown . All search results can be sorted according to the Order By dropdown specifications which preferably include every column of record .

Block sets a variable ROWSPERPG to rows per page data evidence as configured by records per page field of . A defaulted number is used if the data evidence is not found. Then block checks to see how this page processing was arrived to for example by pagination or directly from the search criteria interface. If block determines the processing page was arrived to directly as the result of invoking the search button then block accesses page filter data evidence for appending to a SQL Select WHERE clause. Thereafter block builds any SQL ORDER BY clause if order by specifications were made appends SQL WHERE clause criteria based on search criteria interface field specifications appends any Filters management data evidence found to the SQL WHERE clause and constructs a SQL query string suffix comprised of a completed WHERE clause and ORDER BY clause. The WHERE clause is also amended with the PersonID of the logged on user of if the user type is not a Site Owner and no specification was made at field . If a specification was made at field then the WHERE clause is amended with the associated PersonID which is preferably determined in block by querying the Users Table for the PersonID with the logon name and ensuring one that granted the Affinity Delegate privilege was returned at block Site Owner does not require an Affinity Delegate privilege . WHERE clause conditions will use LIKE or depending on the field type being searched. Thereafter block completes building the SQL SELECT statement with the SQL query string suffix appended for all records . List output variable ROWSTART is initialized to 1 and list output variable ROWLAST is set to ROWSPERPG. These variables enable proper pagination between pages of results and are maintained as list pagination data evidence. Thereafter block opens a DB connection opens an active cursor using the SQL SELECT statement and determines the number of resulting rows produced by the query which is kept in a variable TOTALROWS. Thereafter if block determines there are no resulting rows then block reports the condition of no results to the user interface closes an open DB connection and processing terminates at block .

If block determines there is at least one row in the results i.e. TOTALROWS 1 then block saves the SQL SELECT query as query data evidence rows are fetched up to the variable ROWSTART the list output header is built e.g. no ORDER BY columns are added to the standard list output since none was selected and a variable ROWSOUT is set to 0. Columns shown in are already put out in the standard result list form. Thereafter if block determines ROWSOUT ROWSPERPG then no additional rows are iterated out from query results in which case block builds management controls through and pagination information is output. Thereafter if block determines TOTALROWS ROWSOUT then processing continues to block otherwise processing continues to block where a DB connection is closed and onto block of by way off page connector .

If block determines ROWSTART 1 then processing continues to block otherwise block builds the user interface page with pagination control for first page pagination control and previous page pagination control. Thereafter processing continues to block . If block determines that ROWLAST TOTALROWS then processing continues to block by way of off page connector otherwise block builds the user interface page with pagination control for last page pagination control and next page pagination control. Thereafter processing continues to block .

If block determines ROWSOUT were not greater than or equal to ROWSPERPG then block checks if all rows have been fetched for output processing. If block determines all rows have been fetched processed then processing continues to block already described. If block determines all rows have not been fetched processed then block manufactures a checkbox e.g. checkbox for a row associates record id data evidence i.e. RegistryID for example in a hidden field associated with the checkbox builds the row output e.g. a row for presenting all fields of the list header increments the ROWSOUT variable by 1 then fetches the next row using the open cursor. Thereafter processing continues back to block . Blocks through comprise a loop for output of rows satisfying search criteria. Processing continuing to block by way of off page connector also preferably builds and presents a Back to Top link at the page bottom in case the user has to scroll lots of information as dictated by ROWSPERPG.

If block determines the search processing page was arrived to by pagination e.g. pagination controls analogously displayed such as those of controls through then block accesses the query data evidence accesses the list pagination data evidence ROWSTART and ROWLAST then continues to block for issuing the query and performing subsequent processing.

The user interfaces with search results at block until an action is selected. is an example of the search results interface upon the start of block . When an action is selected block checks if it was pagination to go to the first results page for example clicking a pagination control controls not shown since only 4 records . If block determines pagination to go to first page was selected then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for first page results at block and current page processing terminates at block . If block determines the action was not for go to first page then processing continues to block . If block determines pagination to go to the previous page was selected controls not shown since only 4 records then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for previous page results at block and current page processing terminates at block . If block determines the action was not for go to previous page then processing continues to block . If block determines pagination to go to the next page was selected controls not shown since only 4 records then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for next page results at block and current page processing terminates at block . If block determines the action was not for go to next page then processing continues to block . If block determines pagination to go to the last page was selected controls not shown since only 4 records then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for last page results at block and current page processing terminates at block . If block determines the action was not for go to last page then processing continues to block . If block determines a delete view or change action was invoked then processing continues to block otherwise block handles the action appropriately and processing continues back to block . Block handles actions associated with the interface depending on the device type that are not necessarily relevant for understanding this disclosure.

Block determines how many rows are marked with a checkmark by the user and block validates it. If block determines no checkmarks are present then block provides an error for report to the user so user specification can continue back at block . If block determines at least one row has been checked then block checks the action type. If block determines that delete was invoked by the user e.g. delete management control selected then block provides a confirmation message and block determines the user s answer to the Are you sure confirmation e.g. pop up of . If block determines the user confirmed the delete then the confirmation is cleared at block list management data evidence is set for delete at block block invokes list processing of and current page processing terminates at block . If block determines the user cancelled the delete then the confirmation is cleared at block and the user continues to interact with the search results at block . If block determines that delete was not selected then list management data evidence is set for view i.e. view management control selected or modify i.e. change management control selected at block per user action block invokes list processing of and current page processing terminates at block . Thus provide search result list processing of device records of the Registry Table for being conveniently viewed modified or viewed.

Block iterates through the form checkboxes from to build an array of record ids i.e. RegistryIDs from record id data evidence associated with rows that are check marked for action. Additionally built is a WHERE clause string of the same check marked record id evidence i.e. RegistryIDs so an action can be done in a single SQL query to multiple records e.g. records . Thereafter block checks if at least one check marked checkbox e.g. was found. If none were check marked then block reports an appropriate error to the user block closes any DB connection that is open none open yet and current page processing terminates at block . If block determines at least one checkmark is found then block checks list management data evidence. If block determines list management data evidence indicates a delete action then an SQL Delete command is built at block for the Registry Table with the WHERE clause of record ids built at block . Any foreign key relationship tables will cascade delete using RegistryID . Block also opens a DB connection does the Registry Table delete closes the DB connection sends an email to an Administrator account if a Notify flag indicates to document this type of transaction and a success interface is returned to the user. Processing then continues to block for closing any DB connection that is still open and current page processing terminates at block . Block will also delete any records and data of server data that has been associated to the device record s being deleted by block which are not set up for cascade delete. Such records should be deleted prior to finally deleting the record which cascade deletes other records.

If block determines the list management data evidence does not indicate a delete action then block accesses pending query data evidence concatenates WHERE clause information of record ids built at block so only the check marked rows are fetched opens a DB connection does the query and fetches the first row. Thereafter block checks if even a first row was fetched. If block determines no first row was fetched no rows result from query then block handles reporting the error to the user and processing continues from there as described above. If block determines a first row was fetched then block builds the top portion of the page to return to the user. Thereafter if block determines the list management data evidence is for view then block sets the disabled readonly switch dfld variable as discussed above for read only and processing continues to block . If block determines the list management data evidence is not for view then processing continues to block .

If block determines there is only 1 row returned from the query at block then block builds and presents a record interface presenting a Modify button only if the list management data evidence indicate a modify action e.g. control . Block also associates record id data evidence RegistryID of the information presented preferably as a hidden form field. Block presents if the list management data evidence was for view of a single row check marked for example in checkbox . Block presents if the list management data evidence was for modify of a single row check marked e.g. checkbox . Thereafter the user interfaces to any of at block until a Modify action is invoked for example clicking button . If a view interface is presented then no Modify button can be pressed. The user can use the Back key click the first page link to return to the first page of records close the window or do whatever makes sense at the device. If the Modify button is pressed then block validates form fields according the record type i.e. record and processing continues to block . If block determines at least one field is invalid then block reports the error to the user so field specification can continue back at block e.g. pop up . If block determines all fields are valid then block invokes modify record processing of re described for Registry Table context below block closes any open DB connection and current page processing terminates at block .

If block determines there is more than 1 row returned by the query at block then block checks the list management data evidence for the action requested. shows the user has selected i.e. check marked multiple rows prior to invoking a control through . If block determines the list management data evidence is not modify then processing continues to block . If block determines the list management data evidence is not for view then block processing continues to block since list management data evidence is invalid. If block determines the list management data evidence is for view then block builds the output page topmost portion and block builds a record output from the last record fetched. Otherwise block continues to block for error handling of unexpected list management data evidence. After block if block determines the last row was fetched for output then block completes page output and processing continues to block . If block determines there is another row to output then block fetches the next row and processing loops back to block . Blocks through include a processing loop for presenting a view of multiple records such as . is an actual view output from processing upon invoking view management control on .

If block determines the list management data evidence is for modify then block builds a Modify List user interface iterates through fetches of query results from block and establishes record id array data evidence e.g. RegistryIDs for records returned preferably as hidden form fields in . actually results from invoking modify management control from . Data from the first record in the query results is conveniently defaulted in fields. A preferred embodiment will save which row was check marked first from list output e.g. as first check data evidence so that the first checkmark determines which data is used to default the modify list interface e.g. . Note the checkmark included for the user selecting which fields with checkmarks to update in the plurality of records resulting from the query at block . Thereafter the user interfaces to at block until Modify button is invoked. When modify is invoked processing continues to block where fields are validated from and block checks validation results. If block determines all fields are valid i.e. syntax at least one checkmark checkmark corresponds to non null field etc then block invokes Modify List processing of and processing continues to block . If not all fields are valid as determined at block then an error is reported at block to the user so field specification can continue back at block e.g. pop up .

For this discussion is discussed in context of modification processing of the device record information invoked at block in context for a record . Processing starts at block and continues to block where the ACCESS LIST as discussed above is set for authorized users. Thereafter block performs access control processing and continues to block where the form fields for the record information are validated according to record type i.e. device record Registry Table record record and then results are checked at block . If any field is found invalid for processing at block then block reports the error appropriately to the user interface and processing terminates at block . If all fields are found to be valid at block then block builds an update command for the Registry Table using fields from the form where the RegistryID equals the record id data evidence passed for processing. Thereafter block opens a DB connection block does the update and block closes the DB connection. Thereafter block sends an alert email to an Administrator account if a Notify flag is enabled for this type of database update block builds and serves back a success interface to the user and processing terminates at block .

Another embodiment to maintains three dimensional space tracking information for the whereabouts of devices. This enables locating finding routes for showing travel reports for and tracking devices in three dimensional space. For example the LatDD field and LonDD field information along with Elevation field can be used or an x y z Cartesian coordinate or Polar coordinate system can be used with appropriate fields for an origin and for maintaining the location in three dimensional space. In another embodiment a new Planet field e.g. Earth Mars etc may describe the planet that other record fields are in reference of. Yet another embodiment inserts records containing additional fields for all situational location information about the device. This provides additional means for reporting and searching information about devices.

A preferred embodiment requires verification to be performed to ensure EmailAddr field and SMSAddr field are valid whenever a record is added or modified unless added or modified by a Site Owner . Verification processing is analogous to descriptions above for registration and user account modification processing. For the EmailAddr field an interface similar to can be presented to the user with identical confirmation code processing requiring the user to enter the confirmation code sent to his desired email address being added or modified. Only a valid entry of the confirmation code will permit setting the EmailAddr field . For the SMSAddr field an interface similar to can be presented to the user with identical confirmation code processing requiring the user to enter the confirmation code sent as a message to his desired SMS address being added or modified. Only a valid entry of the confirmation code will permit setting the SMSAddr field .

A preferred embodiment for streamlining the registration process and device management process for users e.g. Pingers combines device creation in the Registry record with user account creation records . For example link invoked registration will enforce a MaxDevs field to a value of 1 for the account created. Neighboring text to link will document that the user account and device are one in the same. Blocks and will additionally insert a record with Deviceid field set to the user LogonName field and PW field set to PW field for the successfully registered user using appropriately defaulted fields. The record Email field can be defaulted to EmailAddr field without a Yes in field . Different processing will present options without a Registry options category header Registry Manage option and Registry Add option . The user will use the Users my preferences option to manage the device at at fields and . Preferably fields and are already defaulted for the user so he never has to do data entry there. In a similar embodiment records and are combined to a single record for user accounts. In yet another similar embodiment options and continue to show but the user can only manage a single record which has already been defaulted for him from registration. There are various embodiments for giving the user the perception or realization that the user account credentials and device credentials are indistinguishable while making it convenient to automatically create account information to alleviate the user from web service complexities.

A Content Provider user type e.g. Content Provider Content Provider Gold Content Provider Platinum can manage and add deliverable content to members area through the DCDB Management component . DCDB Management component comprises the selectable DCDB Manage option and DCDB Add option under DCDB options category header . DCDB Management component also provides a DCDB Import Export option to a Site Owner user type read only access for Delegate for scripting management of devices. Scripts maintained can insert large numbers of content items update large numbers of content items delete large numbers of content items or do any management to content items as discussed herein except automated with scripting. It may be inconvenient requiring a user to use a Graphical User Interface GUI to maintain large numbers of content items therefore full scripting capability is provided for managing records in the DCDB Table records . No content provider or user except a Site Owner can see or manage another content provider s content items unless an Affinity Delegate privilege has been granted to that user. A Pinger is not a content provider but does have the ability to configure PingSpots and Pingimeters as discussed below.

Other embodiments of managing records will provide a dummy proof user interface to web service . A wizard or minimal user interaction interface can be used. In one preferred embodiment a record is automatically created by a device with sensing means thereby eliminating user hassle in manually creating a record. There are various embodiments which can facilitate creation and management of deliverable content in web service without departing from the essence of functionality provided by the record fields.

CType field describes the type of content maintained at CPath field . Content types supported as provided by a dropdown include 

A content type can be anything represented by at least a bit and up to a datastream that can be communicated to a mobile device. Content may be visual audible executable interpretable by any of the human senses or combinations thereof. Conversions may take place upon delivery at a SDPS RDPS or both depending on the device type device state delivery flags time criteria or any other variable designating a situational location. A situational location is as described above including any application specific data fields along with any data that can be related to the user of the mobile device or the mobile device itself. A situational location includes system delivery constraints and or user configured delivery constraints. CPath field or any file referenced by CPath can contain substitution variables for any purpose of completing a data fill in at delivery time. In general a referenced file name s extension helps describe the type of file being referenced and how to deal with it. CPath field is preferably validated to dynamically accessed remote data sources to ensure they are valid before web service tries to access for deliveries by processing. processing will handle any errors regardless.

Speed elevation and other situational location fields can be specified in a record . A single situational location can be defined for multiple deliverable content items and a single content item or multiple content items can have an associated plurality of situational locations. A plurality of applicable situational locations could be specified for a record by preferably joining to another table with situational location fields for designating deliverable content to a plurality of unique situational locations.

Deliverable content may also have urgency levels that can be configured with it e.g. high importance normal etc . These urgency levels can be embodied as a new field in record with unique values for appropriate handling and unique notification to the receiving devices.

A Site Owner sees all records in the web service. Other users only see records they created by default. Owner field allows a Site Owner will be disabled when a Site Owner encounters the interface of B if no Affinity Delegate privilege is explicitly defined Site Owner needs no Affinity Delegate privilege since can see all anyway to specify the logon name of the user for seeing records as though he was logged in as that user. A Site Owner enters the logon name to match to LogonName field for returning the PersonID field which will then override all processing for page display as though processing from Access Control made that PersonID available to the including page and subsequent pages. In another embodiment the specified owner field simply narrows the search results to records owned by that user by comparing the PersonID field of the same record Logon Name field entered to the field with the AuthID field of searched records . The DCDB affinity dropdown will contain a list of all logon names that have provided an Affinity Delegate privilege discussed below to the user who encounters a Site Owner can enter anything he wants to field . Therefore any user that has been granted the Affinity Delegate privilege from any other user can also enter the logon name in the dropdown to field for seeing records as though he was logged on as that user or for narrowing the search to that user s records depends on embodiment . A user may also select click from the dropdown to automatically populate field . shows what displays in dropdown when the user has no Affinity Delegate privileges granted by any other user.

Any many or all fields can be defaulted with values or disabled based on desired search criteria support or associated numbers of records in the web service. An Associated user dropdown can be provided to for defining those other users that are free to manage and search for records which have associated users as defined by the Affinity Delegate privilege discussed below or the other embodiment Affinity Delegate privileges discussed above. All search results can be sorted according to the Order By dropdown specifications which preferably include every column of record .

Block sets a variable ROWSPERPG to rows per page data evidence as configured by records per page field of . A defaulted number is used if the data evidence is not found. Then block checks to see how this page processing was arrived to for example by pagination or directly from the search criteria interface. If block determines the processing page was arrived to directly as the result of invoking the search button then block accesses page filter data evidence for appending to a SQL Select WHERE clause. Thereafter block builds any SQL ORDER BY clause if order by specifications were made appends SQL WHERE clause criteria based on search criteria interface field specifications appends any Filters management data evidence found to the SQL WHERE clause and constructs a SQL query string suffix comprised of a completed WHERE clause and ORDER BY clause. If a specification was made at field the WHERE clause is amended with the associated PersonID which is preferably determined in block by querying the Users Table for the PersonID with the logon name and ensuring one that granted the Affinity Delegate privilege was returned at block Site Owner does not require an Affinity Delegate privilege . WHERE clause conditions will use LIKE or depending on the field type being searched. Thereafter block completes building the SQL SELECT statement with the SQL query string suffix appended for all records . List output variable ROWSTART is initialized to 1 and list output variable ROWLAST is set to ROWSPERPG. These variables enable proper pagination between pages of results and are maintained as list pagination data evidence. Thereafter block opens a DB connection opens an active cursor using the SQL SELECT statement and determines the number of resulting rows produced by the query which is kept in a variable TOTALROWS. Thereafter if block determines there are no resulting rows then block reports the condition of no results to the user interface closes an open DB connection and processing terminates at block .

If block determines there is at least one row in the results i.e. TOTALROWS 1 then block saves the SQL SELECT query as query data evidence rows are fetched up to the variable ROWSTART the list output header is built e.g. 7177 no ORDER BY columns are added to the standard list output since none was selected and a variable ROWSOUT is set to 0. Columns shown in are already put out in the standard result list form. Thereafter if block determines ROWSOUT ROWSPERPG then no additional rows are iterated out from query results in which case block builds management controls and and pagination information is output. Thereafter if block determines TOTALROWS ROWSOUT then processing continues to block otherwise processing continues to block where a DB connection is closed and onto block of by way off page connector .

If block determines ROWSTART 1 then processing continues to block otherwise block builds the user interface page with pagination control for first page pagination control and previous page pagination control . Thereafter processing continues to block . If block determines that ROWLAST TOTALROWS then processing continues to block by way of off page connector otherwise block builds the user interface page with pagination control for last page pagination control and next page pagination control. Thereafter processing continues to block .

If block determines ROWSOUT were not greater than or equal to ROWSPERPG then block checks if all rows have been fetched for output processing. If block determines all rows have been fetched processed then processing continues to block already described. If block determines all rows have not been fetched processed then block manufactures a checkbox e.g. checkbox for a row associates record id data evidence i.e. DCDBID for example in a hidden field associated with the checkbox builds the row output e.g. a row for presenting all fields of the list header increments the ROWSOUT variable by 1 then fetches the next row using the open cursor. Thereafter processing continues back to block . Blocks through comprise a loop for output of rows satisfying search criteria. Processing continuing to block by way of off page connector also preferably builds and presents a Back to Top link at the page bottom in case the user has to scroll lots of information as dictated by ROWSPERPG.

If block determines the search processing page was arrived to by pagination e.g. pagination controls and or as analogously displayed such as those of controls and then block accesses the query data evidence accesses the list pagination data evidence ROWSTART and ROWLAST then continues to block for issuing the query and performing subsequent processing.

The user interfaces with search results at block until an action is selected. is an example of the search results interface upon the start of block . When an action is selected block checks if it was pagination to go to the first results page for example clicking a pagination control . If block determines pagination to go to first page was selected then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for first page results at block and current page processing terminates at block . If block determines the action was not for go to first page then processing continues to block . If block determines pagination to go to the previous page was selected control then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for previous page results at block and current page processing terminates at block . If block determines the action was not for go to previous page then processing continues to block . If block determines pagination to go to the next page was selected control not shown since list has been paginated forward to last page already then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for next page results at block and current page processing terminates at block . If block determines the action was not for go to next page then processing continues to block . If block determines pagination to go to the last page was selected control not shown since list has been paginated forward to last page then processing is invoked after properly setting ROWSTART and ROWLAST data evidence for last page results at block and current page processing terminates at block . If block determines the action was not for go to last page then processing continues to block . If block determines a delete view or change action was invoked then processing continues to block otherwise block handles the action appropriately and processing continues back to block . Block handles actions associated with the interface depending on the device type that are not necessarily relevant for understanding this disclosure.

Block determines how many rows are marked with a check by the user and block validates it. If block determines no checkmarks are present then block provides an error for report to the user so user specification can continue back at block . If block determines at least one row has been checked then block checks the action type. If block determines that delete was invoked by the user e.g. delete management control selected then block provides a confirmation message and block determines the user s answer to the Are you sure confirmation e.g. pop up of . If block determines the user confirmed the delete then the confirmation is cleared at block list management data evidence is set for delete at block block invokes list processing of and current page processing terminates at block . If block determines the user cancelled the delete then the confirmation is cleared at block and the user continues to interact with the search results at block . If block determines that delete was not selected then list management data evidence is set for view i.e. view management control selected or modify i.e. change management control selected per user action block invokes list processing of and current page processing terminates at block . Thus provide search result list processing of DCDB records for being conveniently viewed modified or viewed.

The standard set of fields output for any records of web service are preferably configurable for the web service so conceivably any fields can provide the standard set. Then the appropriate Order By dropdown selections can be made to not only sort records in the list returned but to display other fields to complement the standard output fields. In another embodiment every user of web service has the ability to customize which fields are his standard set of output fields for a particular record type. For example each user can have the ability to configure standard output fields for Registry Table records DCDB Table records or any other Table records that may be managed by the user. The Order By dropdowns could then be selected with respect to what are the user s preferred standard output fields for a record type.

Block iterates through the form checkboxes from to build an array of record ids i.e. DCDBIDs from record id data evidence associated with rows that are check marked for action. Additionally built is a WHERE clause string of the same check marked record id evidence i.e. DCDBIDs so an action can be done in a single SQL query to multiple records e.g. records . Thereafter block checks if at least one check marked checkbox e.g. checkbox was found. If none were check marked then block reports an appropriate error to the user block closes any DB connection that is open none open yet and current page processing terminates at block . If block determines at least one checkmark is found then block checks list management data evidence. If block determines list management data evidence indicates a delete action then an SQL Delete command is built at block for the DCDB Table with the WHERE clause of record ids built at block . Any foreign key relationship tables will cascade delete using DCDBID . Block also opens a DB connection does the DCDB Table delete closes the DB connection sends an email to an Administrator account if a Notify flag indicates to document this type of transaction and a success interface is returned to the user. Processing then continues to block for closing any DB connection that is still open and current page processing terminates at block . Block will also delete any records and data of server data that has been associated to the DCDB record s being deleted by block which are not set up for cascade delete. Such records should be deleted prior to finally deleting the record which cascade deletes other records.

If block determines the list management data evidence does not indicate a delete action then block accesses pending query data evidence concatenates WHERE clause information of record ids built at block so only the check marked rows are fetched opens a DB connection does the query and fetches the first row. Thereafter block checks if even a first row was fetched. If block determines no first row was fetched no rows result from query then block handles reporting the error to the user and processing continues from there as described above. If block determines a first row was fetched then block builds the top portion of the page to return to the user. Thereafter if block determines the list management data evidence is for view then block sets the disabled readonly switch dfld variable as discussed above to read only and processing continues to block . If block determines the list management data evidence is not for view then processing continues to block .

If block determines there is only 1 row returned from the query at block then block builds and presents a record interface presenting a Modify button only if the list management data evidence indicate a modify action e.g. control . Block also associates record id data evidence DCDBID of the information presented preferably as a hidden form field. Block presents if the list management data evidence was for view of a single row check marked for example in checkbox . Block presents if the list management data evidence was for modify of a single row check marked. Thereafter the user interfaces to any of at block until a Modify action is invoked for example clicking button . If a view interface is presented then no Modify button can be pressed. The user can use the Back key click the first page link to return to the first page of records close the window or do whatever makes sense at the device. If the Modify button is pressed then block validates form fields according the record type i.e. record and processing continues to block . If block determines at least one field is invalid then block reports the error to the user so field specification can continue back at block e.g. pop up . If block determines all fields are valid then block invokes modify record processing of re described for DCDB Table context below block closes any open DB connection and current page processing terminates at block .

If block determines there is more than 1 row returned by the query at block then block checks the list management data evidence for the action requested. shows the user has selected i.e. check marked multiple rows prior to invoking a pagination control. If block determines the list management data evidence is not modify then processing continues to block . If block determines the list management data evidence is not for view then block processing continues to block since list management data evidence is invalid. If block determines the list management data evidence is for view then block builds the output page topmost portion and block builds a record output from the last record fetched. Thereafter if block determines the last row was fetched for output then block completes page output and processing continues to block . If block determines there is another row to output then block fetches the next row and processing loops back to block . Blocks through include a processing loop for presenting a view of multiple records such as . is an actual view output from processing upon invoking view management control on .

If block determines the list management data evidence is for modify then block builds a Modify List user interface iterates through fetches of query results from block and establishes record id array data evidence e.g. DCDBIDs for records returned preferably as hidden form fields in . actually result from invoking modify management control from . Data from the first record in the query results is conveniently defaulted in fields e.g. record . A preferred embodiment will save which row was check marked first from list output e.g. as first check data evidence so that the first checkmark determines which data is used to default the modify list interface e.g. . Note the checkmark column included for the user selecting which fields with checkmarks to update in the plurality of records resulting from the query at block . Thereafter the user interfaces to at block until Modify button is invoked. When modify is invoked processing continues to block where fields are validated from and block checks validation results. If block determines all fields are valid i.e. syntax at least one checkmark checkmark corresponds to non null field etc then block invokes Modify List processing of and processing continues to block . If not all fields are valid as determined at block then an error is reported at block to the user so field specification can continue back at block e.g. pop up .

For this discussion is discussed in context of modification processing of the DCDB record information. Processing starts at block and continues to block where the ACCESS LIST as discussed above is set for authorized users. Thereafter block performs access control processing and continues to block where the form fields for the record information are validated according to record type i.e. DCDB record DCDB Table record record and then results are checked at block . If any field is found invalid for processing at block then block reports the error appropriately to the user interface and processing terminates at block . If all fields are found to be valid at block then block builds an update command for the DCDB Table using fields from the form where the DCDBID equals the record id data evidence DCDBID passed for processing. Thereafter block opens a DB connection block does the update and block closes the DB connection. Thereafter block sends an alert email to an Administrator account if a Notify flag is enabled for this type of database update block builds and serves back a success interface to the user and processing terminates at block .

The map graphics are preferably small enough in area yet large enough in display to avoid too much skewing of latitude and longitude calculations based on points a user selects in the map relative to the four well known corners. Latitude and longitude considers earth curvature wherein one embodiment of map selection may not. However other embodiments will use curvature factors relative to where map points are selected.

Thereafter block presents the selected map to the user and the user interfaces to the displayed map at block until an action is invoked. Thereafter if block determines the user selected to display a descending geographical map map that drills down into a territory on the current map or ascending map map that covers more territory including the current map then processing continues back to block for the desired map initialization. Convenient map hierarchy traversal is provided for zooming in or out. Panning may also be provided at block which will access other maps for display before returning to block for subsequent processing as determined by action subsequent to block . depicts a map of the United States and based on descending maps currently configured in web service a selectable territory is highlighted for drilldown for example a Texas map as displayed in . The Texas map in turn enables drill down to specific counties that do have maps in the web service . Likewise the user can traverse the map hierarchy in any direction for situational location specification.

If block determines the user did want a descending or ascending map then processing continues to block . If block determines the user completed situational location specifications for example a point circle rectangle or polygon then processing continues to block . Block is intended for the user to specify a point circle point with radius rectangle or polygon on a map for convenient automated location information specification. Examples of how the user would select with a cursor a point circle rectangle or polygon are exampled in A B and C respectively. Block scales the specified points point center of circle with radius 4 rectangle corners polygon sequence of points according to pixel locations for deriving the corresponding latitude s and longitude s as determined relative to the map well known 4 corners and any curvature skewing information. Thereafter block saves the user specifications ultimately to be saved to record . If the specification is a point then record fields for maintaining latitude and longitude will be used. If the specification is a circle then record fields for maintaining latitude and longitude will be used for the circle center and HitRadius field is used for the radius. If the specification is a rectangle or polygon then PMRID field is used to join record to the Pingimeter Table records on PMRID field for maintaining a plurality of records in the Pingimeter Table for individual latitudes and longitudes comprising the rectangle or polygon points.

Thereafter processing continues for communicating selections to the user interface that was invoked from. If it is determined at block that a radius was specified at block then block redirects the page back to the invoking page for automatically populating the latitude and longitude fields for the circle center and any radius field that is there. If no radius field HitRadius is present e.g. B E F I and J then the radius is displayed out in the right margin of the page. Block continues to block where processing terminates. If block determines a circle was not selected then processing continues to block . If it is determined at block that a polygon including rectangle was specified at block then block redirects the page back to the invoking page for automatically populating the latitude and longitude fields with a LIST indication. If no scrollable list fields are present to be populated e.g. B E F I and J then a list invocable page link is displayed out in the right margin of the page. The user can select the list link for a pop up or page showing an ordered set of latitude and longitude specifications or another embodiment will produce the underlying map where selections were made showing the selections on the map used or another embodiment will provide an option to see either format. Block continues to block where processing terminates. If block determines a polygon including rectangle was not selected then processing continues to block where the selected point latitude and longitude are automatically populated to the invoking page fields for latitude and longitude and processing terminates at block . If block determines the user selected another action then processing continues back to block for integrating the action with user interface processing at block . So automatically populates the invoking user interface for subsequently populating fields in a record . Some embodiments will always allow displaying the map and selections made thereon from the invoking page after processing. One embodiment will provide a show on map button for being able to display the user s configurations for record . Yet another embodiment will provide a See Current option in dropdown which then shows the current record configuration s on the map upon selection of button when the dropdown item See Current is selected.

Alternate embodiments to will enable selection of multiple points circles rectangles polygons regions etc for multiple situational locations defined to a record . Various mathematical models can be used to achieve high accuracy on deriving user selected pixels on maps to precise location coordinates.

When the user selects the Device radio button the last known whereabouts of the mobile device of web service identified with deviceid field that is specified in the corresponding entry field is searched for from the Trail Table records to get the latitude and longitude. Only the devices which have provided the View Whereabouts privilege to the user e.g. of B E F and I are enabled for search from the Trail Table. A user cannot simply request the whereabouts of any device of the web service . A PingPal privilege enables the right to do that and any user or device can assign the right to any other user or device. The user can also enter a group name record by qualifying it with a G prefix. That way the user can have a group set up of devices which have provided the View Whereabouts privilege for then selecting from a group of devices and or users to use the location s . The user can also use wildcard device specification s but all devices found in server data records must have provided the View Whereabouts privilege otherwise none will be found because a single query is preferably used with a LIKE condition. Other embodiments will find the valid devices that have granted the View Whereabouts privilege.

When the user selects the Phone radio button a telephone phone number can be entered to the entry field for dynamically finding the location of the equipment with that phone number. A public address book is accessed which contains a directory of all participating fixed phone numbers and or any participating mobile phone numbers. The address book will contain those numbers that people do not object to having published in such an address book along with address information or latitude and longitude information to prevent an extra translation step. Mobile phone numbers can continually update the public address book as the mobile devices roam on a reasonable periodic basis. This functionality is preferably outside the web service but could in fact be integrated with tracking records maintained in the Trail Table records for heartbeats received from or on behalf of mobile devices . For the purposes of this discussion the public address book simply correlates phone numbers with the last known location of the device or home address phone number associated with that phone number. The user can also use wildcard phone number specification s for returning multiple phone numbers to choose from.

If block determines the user did not select the address radio button in the menu then processing continues to block . If block determines the Device radio button was selected then block builds query s including to the Trail table upon successful determination PingPal Privilege Assignment Table records queried and joined records therefrom that the user causing processing does indeed have the right to view the whereabouts of the device s by Deviceid group name or wildcard specified determining privileges discussed below . The query returns the most recently inserted record s in the Trail Table records for the device s with the Deviceid field s specified by the user and having associated RegistryID field s that matches RegistryID field s . Block opens a DB connection does the appropriate query s and closes the DB connection. The user will interface to results at block if there is a plurality of results to choose from. Thereafter if block determines an entry was not found in the Trail Table or an error occurred or the user cancelled out of selections then processing continues to block for appropriately handling the error. If block determines an entry was found in the Trail Table and or selected by the user then block continues processing as already described. If block determines the user did not select the device radio button then block determines if the phone number radio button was selected. If the phone number radio button was selected as determined by block then block builds query s to the address book for example as described above and queries location information for the phone number. Block can interface to multiple databases for example to use the output from one query to build a next query in turn until after a sequence of crafted queries the latitude and longitude information for the user specification is retrieved. Preferably a point is returned for the sought phone number. If a plurality of selections result e.g. wildcarding the user interfaces at block to make selection s . Thereafter if block determines the number was found in the address book and or selected by the user processing continues to block by way of block for communicating the latitude and longitude point information back to the invoking user interface. If block determines the phone number was not found or an error occurred or the user cancelled out of making selections then processing continues to block for handling the error. If block determines the phone number radio button was also not specified then block handles an unusual error for no radio button specified as might be the case for stand alone modular unit code testing of . Some embodiments will allow displaying a map and translated selections thereon from the invoking page after processing. So automatically populates the invoking user interface for subsequently populating fields in a record .

If block determines the request for information was satisfied then the Round checkmark is interrogated at block . If block determines the Round checkmark was checked then latitude and longitude seconds are rounded to a system configured number of decimal places e.g. 2 at block and processing continues to block . If block determines that Round was not checked then processing continues directly to block .

Block converts the retrieved latitude and longitude into readable format for automatically populating the invoking user interface then block populates the latitude and longitude fields in the invoking user interface and processing terminates at block . CD ROM file name gpstools.asp provides a Javascript interface of an actual GPSPing.com implementation of for interfacing a fully scalable and internet accessible ASP program to connected GPS gathering means.

With reference back to shown is a flowchart for a preferred embodiment of carrying out processing for presenting a web service user interface form in the members area and then processing user specifications to the interface prior to submitting to the service for further processing. For this discussion in context for indicators is invoked for adding a record to an Indicator Table records upon invoking DCDB Indicators link . Processing starts at block and continues to block where the ACCESS LIST is set for authorized users. Thereafter block performs access control processing and continues to block . Block builds and presents for adding an Indicator record and then a user interfaces with at block until the Add button action is invoked. When an add action is invoked by the user block validates user field specifications to and block checks the results. If block determines the fields are valid and can be submitted for processing then block invokes processing for adding the record and current page processing terminates at block . If block determines that not all fields specified are valid then block provides an error to the user so that specification can continue back at block e.g. pop up .

So clicking the link takes the user directly to the list interface similarly described above for other record types . Another embodiment could provide a similar search interface in context for records . It should be readily understood now from previous descriptions that A and B A and B and are easily described in context for records and applicable processing and for obvious screenshots subsequent to actions from . So for brevity the redundant descriptions and figures are not included here except to say Indicator Table records can be viewed deleted and modified individually or as a list in a similar manner to records records and records .

Another embodiment to the DCDB Indicator Assignment Table records is to have multiple tables for each type maintained in type field so joins can be done without a condition to get associated DCDB record s or Registry record s . For example one table would always have a RecID field containing DBDBID field values another table would always have a RecID field containing Owner field values another table would always have a RecID field containing RegistryID field values and another table would always have a RecID field containing an AuthID field values. Thus the DCDB Indicator Assignment Table provides means for assigning indicator s to a individual deliverable content item s b individual device s c all of a user s deliverable content item s and d all of a user s device s .

A website defined maximum is preferably enforced at blocks and . In another embodiment record will contain a maximum e.g. new field for each user much like MaxDevs field is defined and used. A new max Personalized indicators field would be passed to pages including Access Control processing in a similar manner. depicts a preferred embodiment screenshot for managing personal Indicators for assignment to devices through Assign button . Assign button provides each user with the ability to assign indicators to all their devices insert record with type field for assign Registry Table record to indicator or insert record with type field for assign all the user s Registry Table records to indicator .

Thus a Content Provider can control which content can have which indicators delivered instead of the content itself. Likewise an Administrator and Pinger can control which devices can have which indicators delivered instead of the content itself. All users can assign criteria for when to deliver an indicator. System default indicators are provided in cases of IndicOnly field is set to Yes and an applicable user has not configured any indicators or IndicOnly field is set to Yes and an applicable user has not configured any indicators. So indicators are conveniently administered with the content for the receiving device or both. Criteria field may also contain size deliverable content limit information time criteria or any other criteria which will conditionally affect delivering the indicator instead of the deliverable content. So attributes beyond those stored in either record or may also be used for determining a criteria condition.

Pre transform rules provide run time configurations to the transform process for how to parse interpret and transform data source s and for how to load the deliverable content database . Depending on an embodiment pre transform rules and create schema rules may be dynamically configurable without restart of the transform process or may require the transform process to initialize with configurations upon startup at block of . Once the data for example delivery content i.e. pre transform rules may be configured to populate any data in any table s has been automatically populated into the deliverable content database it may be in a form ready for proactive content delivery by situational location or may undergo further tailoring to be in a more suitable form. A post transform data manipulator process is further provided for transforming deliverable content database data can be used to transform content data in any table s should transforming be desirable or necessary after content data is contained in the deliverable content database or after population by the transform process . Post transform rules provide run time configurations to the post transform data manipulator process for how to parse interpret and transform the content or data and for how to update that content or data. Depending on the embodiment post transform rules may be dynamically configurable without restart of the post transform data manipulator process or may require the post transform data manipulator process to initialize with configurations upon startup at block of .

The transform process and or the post transform data manipulator process may be a single executable process multiple executable processes one or multiple executable threads or any other execution entity capable of carrying out processing as described by the figures similarly to data processing system programs described above with .

A Graphical User Interface GUI may also be used to perform post transform data modifications. The GUI may be an SQL Standard Query Language Query generation user interface for issuing SQL commands to tailor data a specific application user GUI developed for modifying data in the deliverable content database or any other graphical user interface gui providing an administrator with the ability to change deliverable content database data. One example of GUI is an embodiment as described by B and A through and associated processing.

A Database Management interface for example an Oracle SQLNet interface SQL Server Enterprise Manager or SQL user interface tool Oracle is a trademark of Oracle Corp. SQL Server and Enterprise Manager are trademarks of Microsoft Corp. may also be used to modify the deliverable content database through issuing SQL commands queries.

Data source s preferably include external application data sources such as a World Almanac Encyclopedia World Fishing Record database Guinness book of World Records classified ads newspaper subscribers phone book yellow pages restaurant catalogues database of historical events database of captured field data or any other collection of data useful for carrying out a particular application of the present invention. Data source s may also include location translation data to facilitate translating location data of deliverable content into a new suitable location format. For example addresses associated with advertised merchandise can be translated to latitude and longitude using location translation data. Transform process may process a single source of data or multiple sources of data to accomplish appropriate automatic deliverable content database population. Data source s preferably reside in an SQL database in an electronic or magnetic representation on disk diskette tape or the like or on Compact Disk i.e. CD mechanically recorded record punched cards or paper written media capable of being interpreted automatically e.g. OCR bar codes etc or any other media capable of being automatically processed. Data source s may be processed visually through pattern recognition audibly through sound or voice recognition or sensed through technological means as is appropriate for data being sensed and processed. Pre transform rules contain appropriate rules depending on the embodiment. Although transform process can hard code all transformation logic within itself it is preferred to have run time configuration outside of transform process processing for example some or all of pre transform rules for flexibility preventing modification of executable code of transform process while supporting many varieties of data source s and even varieties of formats of target deliverable content databases.

Pre transform rules consist of a set of rules that include a rule type and rule information. The number of members in the set may be equivalent to the number of data sources to be automatically transformed in a start to finish execution of the transform process . Rule information preferably contains a connectivity descriptor input descriptor parse descriptor and a data transform descriptor. In alternative embodiments an optional join descriptor may be included for providing information on intersecting merging integrating or processing together more than one data source to a particular target transform result for example to translate location infrastructure to a more suitable form. Otherwise multiple data sources are processed on their own merit in accordance with their own member in the set of rules and their own entries in the pre transform rules .

A rule type describes how to interpret the associated rule. It includes SQL database table data DSQL Textual data of fixed length records TFLR textual data of varying length records with a delimiter or length descriptor TVLR binary file of fixed length records BFLR binary non executable data of varying length records with a delimiter or length descriptor BVLR comma delimited field data e.g. Excel .csv file TCSV Spreadsheet e.g. MS Excel data SXLS text data with a start key and end key TKEY textual data with a start key and end offset TKEO binary non executable data with start key and end key BKEY binary non executable data with start key and end offset BKEO executable textual data html xml programming language executable binary data program object code compiled linked program etc and other source formats depending on the application. While handling the types mentioned enables handling the majority of preferable data source s it is understood that other types are easily incorporated without departing from the spirit and scope of the present disclosure so as to handle interpretation and transform of a particular media format and or data type.

Rule information depends on the rule type. The rule type describes to the transform process how to interpret the rule syntax and or semantics. The connectivity descriptor preferably provides a reference to an executable script program or executable interface that has all the necessary processing capability for initializing to the data source to the point of being able to receive or retrieve the data preferably in an electronic form as described above. Data source specific setup is preferably isolated to the referenced script program or executable interface. Other embodiments will move command logic setup commands and or connectivity logic directly into the connectivity descriptor or transform process .

The input descriptor indicates to the transform process whether or not the data source s input stream is finite F or an infinite on going feed I and exactly how to access the data source. A delimiter character or byte sequence is provided for rule types describing varying length delimited records and length description information is provided for rule types of varying length records. A record length is provided for fixed length records. Alternative embodiments will move some or all of input descriptor logic or encoding directly into processing of transform process .

The parse descriptor indicates to the transform process where fields in a record of the input stream are located in the record their data type and their length. Regardless of the media of the data source it is preferable to have the data eventually in an electronic interface e.g. memory record database or file as a result of the particular media connectivity directed by the connectivity descriptor and the data feed directed by the input descriptor. Alternative embodiments will move some or all of parse descriptor logic or encoding directly into processing of transform process .

The data transform descriptor describes to the transform process how to treat each field to be parsed in the source data and where to populate it. This preferably includes ignoring the field using the field as is converting the field into a different data type and or length or combining the field with other field s before population of the deliverable content database. In the preferred embodiment of an SQL database deliverable content database the data transform descriptor contains information for a target SQL table and column names for inserting the data. The transform process can simply build an appropriate SQL INSERT query for a target table defined. The present invention handles multiple target tables through configurations resulting in multiple SQL INSERT queries being built for certain target tables. Further provided to the data transform descriptor are transform means for carrying out the data conversion aspects of the present invention. These transform means include converting data type format and length as well as translating data merging data from multiple columns and replacing data from one source with data from another source. Interfaces may also be provided for converting from an address to a MAPSCO grid location from an address to latitude and longitude location from a text stream to an audible annunciation and any other conversion for converting one data form to another. Interfaces may be provided within the transform process executable code itself through invocable Application Programming Interfaces APIs object oriented class library interfaces referenced scripts or other executable means. Automated transform requirements from particular data sources s to the deliverable content database will drive requirements in pre transform rules and any associated interfaces needed.

While those skilled in the art will determine what is appropriate for pre transform rules to flexibly enable the transform process as described above for a particular data source and deliverable content database an example is described below to facilitate understanding.

Consider a newspaper classified ad database table containing rows for active estate and garage sales. The present application would be to proactively notify travelers having cell phones PDAs or laptops of appropriate estate and garage sales based on their situational location and configured interests. For the purposes of straightforward explanation assume that being in a location deems it being a situational location. Existing external application data source table schema of interest may look like the following 

In one preferred embodiment pre transform rules are contained as data populated into SQL table columns and accessed by the transform process as run time input configurations. In another embodiment pre transform rules are maintained in a flat text file as run time input configurations to the transform process .

Consider an example using a flat text file embodiment of pre transform rules to facilitate the reader s understanding. The flat text file preferably contains section headings to indicate a rule definition in the set of rules with an identifier handle delimited in brackets e.g. Rule 1 . Text occurring up to the next bracketed identifier handle or an end of file represents rule information for the preceding bracketed entry. A token followed by an equal sign with punctuation and keywords can be used to describe rule information descriptors for parsing. Continuing with the above example and in light of a record to facilitate understanding 

The transform process does not need pre transform rules and or post transform data manipulator process does not need post transform rules . As mentioned above logic can be directly encoded in the processes themselves. For example the transform process may encode static or dynamic SQL within its processing for interfacing directly to the data source SQL tables above and converting rows from the table s on the fly into the deliverable content database. There are many methods for accomplishing automatic transformation of data source s into the deliverable content database without departing from the spirit and scope. Obvious error handling is omitted from the flowcharts in order to focus on the key aspects of the present invention.

If in block there were no create schema rules to process then processing continues to block . In the example above the DCDB.DELIV TABLE CREATE YES YES line indicates to create a table and to create indexes for the table as described by preceding configuration lines TABLE DCDB.DELIV TABLE . . . .

DCDB.DELIV TABLE COLUMNS . . . and DCDB.DELIV TABLE INDEXES . . . . The TABLE DCDB.DELIV TABLE line indicates to scan for configurations for a table named DCDB.DELIV TABLE on the left hand side of a definition . The first YES is in the create table position and the second YES is in the create index position. So it is possible to create the table and no indexes or create the indexes and not the table i.e. already created or create both the table and indexes or create nothing with the absence of a DCDB.DELIV TABLE CREATE line or through specification of NO NO. In this example there is still a requirement to have the table schema defined so that the rule knows how to be interpreted. Obvious error handling at block validates that rules reference defined table schema.

Block initializes to the data source s according to the internalized configurations for particular data source type connectivity descriptor and input descriptor. In the example TYPE TCSV indicates the data source is a textual comma delimited file with a record per line. An end of line indicates the end of a record and fields in the record are separated by commas. This provides the recipe for the parse descriptor and the format of the input descriptor information. The CONNECT usr Joe sqlget indicates that connectivity to the data source is accomplished through running the script executable sqlget in the usr Joe subdirectory. Assume the sqlget script simply creates a temporary result table then SQL SELECTS columns CUSTOMER ID START DATE END DATE AD PHONE NO AD CUST ADDR CUST CITY CUST STATE CUST ZIP with a join on CUSTOMER ID from the classified ad SQL tables above and inserts resulting rows into the temporary table. Also assume sqlget queries so that it handles multiple ads per customer. Then sqlget exports the temporary result table to a comma delimited file. The resulting comma delimited file is named ad data out.csv placed in the j usr Joe subdirectory. The input descriptor indicates the data source is finite from a file i.e. process up to end of file at the path j usr Joe ad data out.csv . So upon interpreting internalized configurations block runs the script and opens the file at j usr Joe ad data out.csv for reading comma delimited fields.

Thereafter block reads the first line record first encounter to block or the next line record from the comma delimited file and block checks to see if the last record was already processed by a previous iteration of block i.e. time to terminate or if the transform process was told to terminate by an external process for example through a service management interface. If block determines that the transform process is not to terminate then block parses the record read at block using the parse descriptor for example using the parse descriptor above PARSE long char char char char char char char char . In the example all fields are varying length character strings except the first field and columns respect the order of data columns fields expected in the comma delimited file. Note the parse descriptor maps to the SELECTed columns by sqlget above in the same order i.e. CUSTOMER ID START DATE END DATE AD PHONE NO AD CUST ADDR CUST CITY CUST STATE CUST ZIP respectively .

Block continues to block where the parsed data is transformed using the transform descriptor for example our XFORM configurations above.

Upon completion of block the INSERT command information is formatted and processing continues to block where the INSERT command is finalized prepared and executed against the deliverable content database DCDB.DELIV TABLE table. Processing then continues back to block for retrieving the next record from the input stream.

In a high performance embodiment Blocks and may each be in their own executable threads or separate processes that communicate through queues. While block reads a data record and block parses it block may also deposit a parsed record onto a raw data queue. Block can be an executable thread feeding from the raw data queue and then transforming it into a formatted data record. Block may in turn deposit the formatted data record onto a formatted data record queue. Block may also be a separate executable database population thread that feeds from the formatted data queue and finalizes formatting a SQL INSERT command or may wait until enough records are gathered off the formatted data queue to build a bulk load of information into the database table. In such a high performance embodiment asynchronous threads operate independently through queue interfaces. There may be multiple instances of the same thread which feeds the raw data queue multiple instances of the same thread which feeds the formatted data queue and multiple instances of the database population thread. Blocks and may be in the same thread instance. Block and may be in the same thread instance. All blocks may be in a common thread.

Also note that processing may be for multiple data source s and in conjunction with processing a join descriptor. In one embodiment each block could process each of the multiple data source s as described above before continuing to the next block. In a multithreaded embodiment described a queue element may include a type for distinguishing between queue entries for in turn distinguishing between multiple different data sources or there may be distinct queues between executable threads for distinguishing between multiple different data sources.

If at block it is determined that the transform process should terminate then block performs any housekeeping such as freeing up dynamically allocated memory closing files generating reports etc. Thereafter block provides a discernible completion status for how the automated transform process succeeded or failed as the result of an error path to it and block terminates processing.

The point of the example above is to show an example embodiment for implementing pre transform rules. Those skilled in the art will choose a design method and or syntax that makes sense to accomplish automated transform of data using pre transform rules.

Consider another automated transform process that utilizes an SQL embodiment of pre transform rules for automatically transforming existing external application SQL data sources into the deliverable content database. Continuing with data source s in SQL form for example the CLASSIFIED AD ENTRY and CUSTOMER INFO tables above the pre transform rules and create table schema may look like the following 

Alternate embodiments may expand information kept in the CONNECT DBS table. In one embodiment the TYPE column contains values that map to for example a transform matrix for accomplish required conversions. The transform process looks up the source TYPE for example the column heading and target TYPE for example the row heading in the matrix to determine how to convert it for example the cell at corresponding column and row internally through a referenced plug in or other processing means.

The XFORM MAP table can use the Procedure Order column and OPERATOR column to translate location data for example. Multiple rows with address information populated with unique SOURCE COLUMN ID values can be operated on together by having the same value in PRECEDENCE ORDER and in OPERATOR that joins to another source table for a column to select so the target column id can be populated with location translation information. There are varieties of methods by using the above scheme modifying it or adding to it to accomplish requirements without departing from the spirit and scope.

The CREATE SCHEMA table contains a row for each dynamic SQL CREATE . . . command that should be issued. Therefore blocks through would check for presence of rows and if there are some enabled for issuing ENABLED ON then the rows with ENABLED ON would be issued to the target database. The ENABLED column allows keeping a history of CREATEs without removing them from the table. Note that the connectivity descriptor is embodied in the CONNECT DBS table for the DB name and password for connecting to the database. The input descriptor is embodied by the SOURCE TABLES table and it is finite by the number of rows in the table. The parse descriptor is also embodied by the SOURCE TABLES table. The data transform descriptor is embodied by the XFORM MAP table and is facilitated by the TARGET TABLE table and SOURCE TABLES table. The optional join descriptor is supported through having multiple rows in the XFORM MAP table for the same TARGET TABLE column TARGET COLUMN ID value thereby permitting multiple source values to contribute to a single target value. References in the flowchart description to use of the different descriptors is comparable hereof. Block would read rows from SOURCE TABLES block would parse according to SOURCE TABLES information block would transform according to XFORM MAP joined to SOURCE TABLES and TARGET TABLE for parse transform and join descriptor information and block would use TARGET TABLE for populating the deliverable content database table. Block could internalize everything by querying the example 2 schema to have it ready for subsequent processing. An alternative embodiment to any or all tables is to keep a DATE TIMESTAMP and or information about the administrator who configured the table s .

Ignoring the CLASSIFIED AD ENTRY and CUSTOMER INFO table above another preferred embodiment of pre transform rules would define data in SQL for converting fixed length or varying length records from an on going input stream. Here is what such a schema may look like 

In example 3 the SOURCE RECORDS FIXED table can be used for the same length records received form the input stream. The SOURCE RECORD TYPES and SOURCE RECORDS BY RECTYPE tables can be used for varying record types and lengths received from the input stream. The SOURCE RECORD FIELDS BY TOKEN table can be used for Token Length and Value encodings similar to X.409 encodings where the transform process has processing for parsing the input stream for recognizing tokens. In example 3 the table CREATE SCHEMA TARGET TABLE CONNECT DBS and XFORM MAP are equivalent to example 2. Same named columns between examples are analogous.

Pre transform rules of example 3 configures automatic transform of input streams of fixed length records varying record types of fixed length records and varying length records with varying length fields as defined by the input stream. Table with the SOURCE prefix in their names represent parse descriptor information and similarly to the explanation above when used in conjunction with the TARGET TABLE and XFORM MAP tables defines the transform descriptor information. The RULE INIT table communicates the rule type to the transform process so that the correct source schema is accessed. The CONNECT STREAM table in this example provides input descriptor information for receiving the input stream. Alternative embodiments may keep other communications information may handle other communications protocols sessions etc. Schema above can be used or adaptations are easily made for facilitating processing multiple data source s and processing searches and or conversions between them to result in desired target data.

The automated post transform data manipulator PXDM process starts at block and continues to block where the PXDM process initializes with any post transform rules and appropriately internalizes the information in accordance with the rule type. The rule type may be inherent in PDXM process logic or may be configured in post transform rules similarly to examples above. Block ensures any descriptor information is appropriately validated and internalized to facilitate use and will error out as appropriate not shown . It is assumed that any errors detected by will result in appropriate housekeeping as described above error handling and termination. Block also initializes to the Deliverable Content database using appropriate database commands for example a START USING DATABASE command. Hereinafter the processing descriptions will describe processing in terms of end results whether post transform rules are configured or not and regardless of threaded design. In view of discussions above analogous explanations apply and those skilled in the art will recognize how to configure post transform rules if they are used.

Thereafter block determines a view of the source table data to operate on and block creates a post transform result target table. Processing continues to block where a cursor is opened into the view using one of a set of optionally specified filter criteria i.e. WHERE clause information . Then block fetches a row using the cursor opened at block and block checks to see if the last row has already been fetched.

If a first row or next row was fetched from the source deliverable content database table then block parses the row data block modifies the row data and block inserts the transformed row into the created target table. Note the similarity between block through and blocks through for analogous discussion. Block continues back to block for processing as described.

If at block it is determined that the last row was fetched then block performs housekeeping such as freeing any dynamically allocated memory closing an open cursor generating reports etc and block checks for another filter configured to process this execution of the PXDM process . If there is another filter then processing continues back to block for processing as described.

If it is determined at block that the last filter was processed then processing continues to block . If block determines that a user accept mode was configured then block prompts the PXDM process user for acceptance with an implicit wait for action and block determines the response. When prompted by block the user can inspect the results of the PXDM process thus far to ensure the results are acceptable. If block determines that the results are acceptable to the user then processing continues to block which drops deletes the source deliverable content database table and then to block where the target table name is changed to the original name of the dropped table. If there is no convenient method to change the target table name then block may have to create another table with the dropped name and having the same schema as the target table copy over rows to the correctly named table and then drop the original target table. Thereafter block creates configured indexes according to post transform rules block provides appropriate completion status in an appropriate manner and the process terminates at block . Blocks through handle their own housekeeping in on embodiment.

If at block it is determined that the user did not accept the results then the target table is dropped at block and processing continues to block . If at block it is determined that processing is not set for user accept mode then processing continues to block .

Deliverable content can also be accessed by remote data source at time of delivery for example through configuration of a MCD Mobile Content Delivery file with .mcd file name extension. Rules in the MCD file determine how to access the remote data sources when needed. So the Delivery Manager will access remote data sources and possibly transform associated location data with geo translation databases for appropriate real time delivery to mobile devices .

With reference back to shown is a flowchart for a preferred embodiment of carrying out processing for presenting a web service user interface form in the members area and then processing user specifications to the interface prior to submitting to the service for further processing. For this discussion is invoked for adding a record to the Groups Table records upon invoking PingPals Add Group option . Processing starts at block and continues to block where the ACCESS LIST is set for authorized users. Thereafter block performs access control processing and continues to block . Block builds and presents for adding a Group record and then a user interfaces with at block until the Add button action is invoked. When an add action is invoked by the user block validates user field specifications to and block checks the results. If block determines the fields are valid and can be submitted for processing then block invokes processing for adding the record and current page processing terminates at block . If block determines that not all fields specified are valid then block provides an error to the user so that specification can continue back at block e.g. pop up .

In one preferred embodiment there is a record created at web service installation time which is a system created record that contains a bit set on for every bit in the PrivMask field e.g. 0xFFFFFFFFFFFFFFFF thereby enabling every privilege in the system for the group. This group can be referenced for enabling privileges from any user to himself and from any device to its owner. This prevents requiring a user to assign privileges between his own devices while preventing writing special privilege handling code in the web service .

So clicking the option takes the user directly to the list interface similarly described above for other record types . Another embodiment could provide a similar search interface in context for records . It should be readily understood now from previous descriptions that A B A B and are easily described in context for records and applicable processing and for obvious screenshots subsequent to actions from . So for brevity the redundant descriptions and figures are not included here except to say Groups Table records can be viewed deleted and modified individually or as a list in a similar manner to records records and records .

The user can specify the privilege assignor as all his devices PersonID or any of his individual devices he created RegistryID with the dropdown . This allows assigning the privileges defined in the group selected at dropdown to some other user s device s or all of some other user s devices. Upon detecting an action at block to block checks if the privileged users button was selected. If block determines the button was selected then block invokes Assignee Processing of with assignor data evidence the assignor type all devices or specific device and associated id selected in dropdown along with the group id selected for the group from dropdown . Thereafter current page processing terminates at block . If block determines the button was not selected then processing continues to block . If block determines the privileged device button was selected then block invokes Assignee Processing with assignor data evidence the assignor type and associated id selected in dropdown along with the group id selected for the group from dropdown . Thereafter current page processing terminates at block . If block determines the button was not selected then processing continues back to block . Thus with a user can assign privileges from one of his devices to another user i.e. to all of the other user s devices or from one of his devices to another user s device s or from all of his devices to another user i.e. to all of the other user s devices or from all of his devices to another user s device s .

Another embodiment to the PingPal Privilege Assignment Table records is to have four separate tables thereby no longer requiring a type field . There could be a separate table for providing privileges for 

The term PingPals refers to mobile users to web service who interact with other mobile users of web service for functionality governed by privacy and privilege controls managed by the mobile users . Of course the users do not have to be mobile to be PingPals. If there is a web service relationship as defined by a record privilege configuration between two mobile users two mobile devices a user and a device or a device and a user then they are referred to as PingPals. So PingPals are a plurality of users who have assigned at least one privilege between them i.e. between their devices . all describe functionality for managing relationships between PingPals. The user of can also assign privileges to himself or to any of his own devices so desired functionality of web service is achieved.

In one preferred embodiment there is a record created at web service installation time which is a system created record that contains a bit set on for every bit in the PrivMask field e.g. 0xFFFFFFFFFFFFFFFF thereby enabling every privilege in the system for the group. This group can be automatically referenced by records that are automatically created upon creation of user accounts records and or device registry accounts records . This prevents requiring a user to assign privileges between his own devices and prevents writing special privilege handling code in the web service . Automatic deletion of the user accounts and or device registry accounts will also preferably delete the associated records .

In various embodiments a user can act on behalf of any other user through the Affinity Delegate privilege. If a first user has been granted the Affinity Delegate privilege by a second user then the second user s device s can show up as an Assignor at dropdown . Preferably a qualifier is displayed in the dropdown selection such as JB345 johnsPDA where JB345 is the second user s logon name and johnsPDA is the second user s device name Deviceid . This reminds the first user he has been granted the privilege to assign on behalf of the particular second user s . This allows the first user to assign privileges to other users or devices as though the second user was doing the assignment. The user to user device to user device to device and user to device privilege of Affinity Delegate would be treated properly for what shows up and what is preferably enforced as valid Assignor s . In one embodiment a special Assignor of JB345 ALL DEVICES can show up if the user was granted the Affinity Delegate privilege as a user to user assignment. There is preferably a unique index defined on Type field OwnerID field GroupID field FromID field ToID field to prevent redundant records . Insertion of a redundant privilege record should cause an appropriately handled error.

While records and can be used to define groups of users and or devices with a group name while at the same time assigning privileges to members of the group i.e. groups have dual purpose other embodiments may separate the same functionality without departing from the spirit and scope if this disclosure. Groups could be defined to solely collect together users and or devices. Privileges could be assigned as needed. Key functionality herein includes being able to assign location based services privileges from a user to a device from a device to a device from a device to a user and from a user to a user. Key functionality also includes being able to define groups in a location based service which contain users devices or both users and devices.

PMRID field is a join field to PMRID fields and . Preferably the database system is used to generate a unique value for use in the fields. OwnerID field preferably contains the PersonID field value of the user that created the records and however another embodiment will have it contain a RegistryID field and optionally with presence of an OwnerType field as discussed above . Descript field contains a user defined character string describing the Trigger record . AlertType field defines the type of Pingimeter and what method to use to alert the owning user when a PingPal causes an alert based on the associated Pingimeter defined. In some embodiments AlertType will be multiple fields to prevent parsing individual data elements from the contents. In one embodiment AlertType has a syntax defining the type of Pingimeter in the first character I for inclusive E for exclusive B for both and how to send the alert according to the third character after a separating semicolon . For example the third character indicates the methods of 

Alerts are mostly predefined messages containing textual strings formed by the user device name that triggered the Pingimeter with date time stamp information Pingimeter Descript field information and the situational location information of the device at the time of triggering the Pingimeter. However the DO ACTION A option provides means to perform a particular action automatically when the user device triggers the Pingimeter. The DO ACTION A is a great method for turning something on or off e.g. lights as someone enters or leaves a Pingimeter. Any action can be performed as enabled by the target device for receiving an authenticated command to do something. Complex scripts programs batch files or specific commands can be executed at remote systems or devices as the result of triggering a Pingimeter. Various embodiments to records will include another field for defining the message to send upon alert thereby overriding a system defined alert message format. The new message field will be a varying length character string up to a reasonable maximum length to interoperate with the target device for the alert. Substitution variables are preferably supported in the string as discussed above.

Active field is for enabling or disabling a record and associated records and so that a query will treat the record as though it did not exist in the table however the owner of the record can still manage it. TimeFrame field provides means for specifying a time specification e.g. range when the Pingimeter is enabled for causing alerts. DTCreated field contains a date time stamp of when the record was created in added to the Trigger Table. DTLastChg field contains a date time stamp of when any field in the associated record was last modified. CIP field preferably contains an internet protocol ip address of the user s device that created the applicable data record . The CHIP field preferably contains the ip address of the actual physical server of web service that created applicable data record . CHName field preferably contains the host name of the physical server of web service that created applicable data record for example because web service may be a large cluster of physical servers. ChgrIP field preferably contains an internet protocol ip address of the user s device that last modified the applicable data record s . The ChgrHIP field preferably contains the ip address of the actual physical server of web service that last modified applicable data record s . ChgrHName field preferably contains the host name of the physical server of web service that last modified applicable data record s for example because web service may be a large cluster of physical servers.

Records and define how Pingimeters are used by web service . The Delivery Manager uses defined Pingimeters and privileges to drive alerts. While the user can send alerts to himself with Pingimeters and can perform actions relevant to himself common use is for delivering alerts to users based on mobile travels of other users. Pingimeters are a form of situational locations. They define a point area region or boundary that users can arrive to or depart from along with at least time criteria. Some embodiments will extend the Pingimeter record unit of data with additional criteria for clarifying when an alert gets delivered. This can include any fields from records or other record fields of web service . Pingimeter alerts are a form of deliverable content whether it be system generated messages or user configured messages or content.

With reference back to shown is a flowchart for a preferred embodiment of carrying out processing for presenting a web service user interface form in the members area and then processing user specifications to the interface prior to submitting to the service for further processing. For this discussion is invoked for adding a Pingimeter record and record s upon invoking Pingimeters Add option . Processing starts at block and continues to block where the ACCESS LIST is set for authorized users. Thereafter block performs access control processing and continues to block . Block builds and presents an appropriate user interface for adding a Pingimeter and then a user interfaces with that interface at block until an Add button action is invoked. The DCDB add interface teachings above for buttons and and associated processing of are used similarly for adding at block the records and as a single unit of data that can be joined together in an SQL outer join for capturing any multiple records . The top map and C and D are examples of the user selecting Pingimeters on a map as the result of selecting a button analogous to button already described. Button is the preferred method for defining a Pingimeter in web service . The user may also select buttons analogous to and for automatically populating Tables and as the result of vertices selection by the user to make up the Pingimeter area associated with a user selection or a combination of teachings from buttons and for defining an enclosure for a Pingimeter. When an add action is invoked by the user block validates user field specifications to the Pingimeter add interface and block checks the results. If block determines the fields are valid and can be submitted for processing then block invokes processing for adding the Pingimeter and current page processing terminates at block . If block determines that not all fields specified are valid then block provides an error to the user so that specification can continue back at block e.g. pop up .

There is preferably no search interface to Pingimeters since there is preferably a reasonably limited enforced maximum. The preferred user interface for managing them is analogous to A G B and B however a search interface may be provided to support all conceivable embodiments where many Pingimeters will be managed. A reasonable standard set of fields are output for the list interface rows preferably each row including at least Descript field Active field AlertType field TimeFrame field and a URL link to an appropriately zoomed map to display the Pingimeter defined by records . A website defined maximum is preferably enforced at blocks and . In another embodiment record will contain a maximum e.g. new field for each user much like MaxDevs field is defined and used. A new max Pingimeters field would be passed to pages including Access Control processing in a similar manner.

Clicking the Pingimeters Manage option preferably takes the user directly to a list interface similarly described above for other record types . Another embodiment could provide a similar search interface in context for the Pingimeter information. It should be readily understood now from previous descriptions that A B A B and are easily described in context for Pingimeters records and associated record s and applicable Pingimeter processing and for obvious screenshots subsequent to actions from Pingimeter list processing. So for brevity the redundant descriptions and figures are not included here except to say Pingimeter data units a unit of data across PAXT record Pingimeter Table record s and Triggers Table record can be viewed deleted and modified individually or as a list in a similar manner to records records and records .

An alternative embodiment will use the DCDB interfaces described above to add and manage Pingimeters as a DCDB record for adding viewing modifying and deleting DCDB records . A Pingimeter defined with record requires the EntryType field set to R for denoting a Pingimeter. All of DCDB add and management discussions above can apply for a Pingimeter. PMRID field will be used to join to Triggers Table PMRID field and Pingimeters Table PMRID field for the Pingimeter defined. The user would then be enabled to define content to deliver upon triggering of the Pingimeter with all the deliverable content options provided in a record . Further available for the user would be additional record fields for further defining a situational location for Pingimeter alerting. Any duplication between record fields and record fields could be eliminated in a new record or the record fields could be optional for overriding duplicated record fields.

PingSpots are similar in nature to Pingimeters and can overlap in some functionality. PingSpots are identically configured as a record has been discussed. PingSpots are situational locations configured by users of web service for delivering content to their PingPals who happen to travel to those situational locations. A website defined maximum is preferably enforced. In another embodiment record will contain a maximum e.g. new field for each user much like MaxDevs field is defined and used. A new max PingSpots field could be passed to pages including Access Control processing in a similar manner.

In one example a Pinger travels to a large flee market finds an item of interest to a PingPal and sets a PingSpot where the item is located with a radius for covering an area certainly traveled by someone nearby. The Pinger then sets a deliverable content message like Check out the antique chair over by the large oak tree along with situational location criteria for the PingSpot. When the PingPal travels to the situational location sometime in the future the message about the antique chair is automatically delivered to the PingPal according to his device preferences. Of course the PingPal would have to have granted the Set PingSpots privilege to the Pinger or his device so the PingSpot was relevant for the PingPal. So PingSpots enable a first user or device to set up content for a second user or device which is configured by the first user device and is delivered to the second user device according to the situational location of the second user device. Set PingSpots is preferably assigned from a user i.e. all his devices or device to a user. Another embodiment will also allow assigning from a user or device to a device wherein the device id is known when configuring PingSpots and is saved with the record in the AuthID field . Yet another embodiment will maintain an AuthType field for determining whether or not the PingSpot is configured on behalf of a user or on behalf of a device. In one embodiment the device id field and device password can be used to authenticate to an interface of web service just as LogonName field and password field are used. In another embodiment the device id and device password are automatically determined for example by a most recent interaction with the Delivery Manager . In another embodiment device data evidence fields and is used.

PingSpots are identically configured as though a Content Provider were configuring deliverable content with options e.g. subordinate to the DCDB option header . Adding and managing PingSpots will use the DCDB interfaces described above to add and manage PingSpots as a DCDB record for adding viewing modifying and deleting DCDB records . A PingSpot defined with record requires the EntryType field set to S for denoting a PingSpot. All of DCDB add and management discussions above apply for a PingSpot. The only difference is the records added and managed have EntryType field set to S for PingSpots.

PingSpots Add option produces an interface analogous to with proper PingSpot identifying interface indicators e.g. top page locator identification bar set to GPSPing.com Add PingSpot although some embodiments will do an appropriate subset of for cell phone convenience. PingSpots Manage option produces an interface analogous to with proper PingSpot identifying interface indicators e.g. top page locator identification bar set to GPSPing.com PingSpot Manage List for some reasonable system limited number of PingSpots creatable per user. A website defined maximum is preferably enforced as discussed above. Another embodiment would provide a search interface so that selecting PingSpots Manage option would produce an interface analogous to the search interface with proper PingSpot identifying interface indicators e.g. top page locator identification bar set to GPSPing.com PingSpot Specify Search Criteria for a larger number of permitted PingSpots. DCDB record processing is identical for PingSpots as it is for deliverable content configured by a Content Provider with respect to B C and associated processing. The bottom map shows a PingSpot selected with button in context for a PingSpot. Note that the PingSpot is preferably semi transparent opaque rather than an empty region as used for Pingimeters. This shows that the mobile device is a live target anywhere within the PingSpot while a Pingimeter is more of a boundary for an alert setting. PingSpots are preferably viewed deleted and modified individually or as a list in an identical manner to records .

A universal embodiment enables Pingimeters and situational locations for PingSpots and DCDB content and Pingimeters using a record to be specified in terms of a three dimensional solid area called a three dimensional solid region in space which may be traveled through. This allows specifications in space not just on a planet s surface and or at some elevation. Triangular elevations from known locatable points triangular distances from origins in the universe etc. can denote where exactly a point of the three dimensional solid in space is located. That same point can provide a mathematical reference to other points of the solid region in space and or together with descriptions for angles pitches rotations etc. from some reference point s . That way any mobile vehicle or traveler traveling through the solid region defined in space will have traveled through the situational location. Therefore situational locations are not just two dimensional. Three dimensional location parameters of a situational location in the universe can be specified with a solid region in space for example by a conical shape cubical shape spherical shape pyramidal shape irregular shapes or any other shape either manipulated with a three dimensional graphic interface or with mathematical descriptions. Locations of situational locations are regions that some traveler can pass through regardless of being two dimensional optionally with an elevation or three dimensional.

In yet another embodiment Pingimeters and situational locations for PingSpots and DCDB content and Pingimeters using a record can be specified in multiple dimensional terms 2 3 or more as is appropriate for the application. For example time adds a fourth dimension e.g. TimeCriteria field and other criteria adds additional dimensions. N dimensions are supported as needed for applicable embodiments. In yet another embodiment a smaller scale is incorporated for example at the microscopic level. Pingimeters and situational locations for PingSpots and DCDB content and Pingimeters using a record can be specified in terms of microscopic measurements for example for enabling a micro motor device to travel through a situational location or Pingimeter defined in a human body to perform micro surgery. When the micro motor travels to or through the body to a configured record of web service then the same functionality disclosed can be applied. Content could be intercepted for sending to the examining system or doctor device s . Pingimeter actions could in fact be sent to the micro motor device upon arrival to a target area for then performing prescribed actions within the human body. Magnetic Resonance Imaging MRI is a key component to use for identifying situational locations relative to body landmarks. Travels of the micro motor device through configured areas or regions could cause the micro motor device to receive content to facilitate navigating itself around internal body landmarks. Communications would be by way of a wireless connection. Records could define executables and directional content for governing the micro motor device actions through the human body. The web service in such a medical application would be a small scale private service used in close quarters. The point in all this is that location specifications area specifications region in space specifications and situational location specifications can take on measurements and descriptors as is relevant in the application used from a microscopic application to a universal application between galaxies. Scale size and application of use is not a limiting feature of this disclosure.

A preferred embodiment for locating mobile users incorporates a leading paid for internet accessed mapping service such as Microsoft MapPoint or MapQuest MapPoint is a trademark of Microsoft Corp. and MapQuest is a trademark of the MapQuest company . Those skilled in the art will recognize that location service features described herein apply regardless of map solution used. Descriptions herein are to be interpreted in their broadest sense and in view of any map solution that may be used. CD ROM file name tigermap.pdf provides a printed description available from the free U.S. Census online mapping service http tigencensus.gov which has been incorporated for use in an embodiment.

Thereafter block checks if one or more View Whereabouts privileges are assigned from each comma delimited device name i.e. id field specified in entry field to the user of or from the owner of devices specified to entry field to the user of . If block determines a device id specified in entry field has not granted the View Whereabouts privilege to the user of then block reports the error to the user of and current page processing terminates at block . Another embodiment can also report the failed search to the device id s or owner s of the device id s for indicating someone without privileges is attempting to do a search on their location search on their device. Yet another embodiment could include a new field in record checked for at block for reporting such location search attempts made by an unauthorized user or made from an unauthorized device.

If block determines all sought devices have granted privileges to the user of then block builds query s to the Trail Table records for the most recent record up until the optional date time of entry field most recent of all records if no field specified for each device in the comma delimited list or single device specified a connection is opened to the database the query s are performed and the database connection is closed. Thereafter if block determines at least one device tracking record has been found then block accesses current map settings data evidence e.g. set by builds the map interface command and redirects to a page with upper and lower frames pages for map display. Block ensures a WAP device gets single page with no frames. Thereafter block terminates current page processing. An example of a map interface command URL for http tiger.census.gov is 

The http tiger.census.gov map interface is preferably interfaced to with two frames a map display frame and a navigational action frame for devices that support frames . For example shows a navigational frame and a map display frame . This allows user navigation actions in frame which displays new maps in frame . Frames of could be displayed within frame of a full browser or just as is in a PDA browser. A cell phone implementation should not have frames so a single page would be returned that comprises all content items from frames and . Every time a navigational link is selected from the cell phone or any other WAP device the entire map and navigational links are refreshed as a single unit. The advantage of using frames and allows only refreshing the map display frame for links selected in the navigational frame .

With reference now to Zoom in link is provided for zooming into the current map for a zoomed in map display zoom out link is provided for zooming out from the current map for a zoomed out map display and panning control contains nine panning links for panning the current map Northwest NW North N Northeast NE West W Center C East E Southwest SW South S and Southeast SE . Center pans the map so all originally displayed objects are seen again within a single map displayed and will zoom if necessary to original display . Links and as well as control are preferably maintained in the navigational frame for devices that support frames. Otherwise all of is a single page presented to the device.

If block determines no records were found then block reports a not found error to the user and current page processing terminates at block . An alternative embodiment to block is to process the subset of devices which are determined to have granted the privileges rather than allowing one invalid device to cause an error flow from block to block . If block determines button was not selected then processing continues to block . If block determines button was invoked from action data evidence passed from the form then block determines the View Whereabouts privileges Groups Table PingPal Privilege Assignment Table Registry Table Users Table assigned to the user of as passed by access control processing . The View Whereabouts privileges are determined with joins including group name s entered to field or by a user i.e. all user s devices of OwnerID field s of device s of group name s entered to field . Thereafter block checks if one or more View Whereabouts privileges are assigned from each device of the comma delimited group names i.e. group name field specified in entry field to the user of or from the owner of devices of groups specified to entry field to the user of . If block determines a device id of group s specified in entry field has not granted the View Whereabouts privilege to the user of then block reports the error to the user of and current page processing terminates at block . Another embodiment can also report the failed search to the device id s or owner s of the device id s for indicating someone without privileges is attempting to do a search on their location search on their device. Yet another embodiment could include a new field in record checked for at block for reporting such location search attempts made by an unauthorized user or made from an unauthorized device.

If block determines all sought devices have granted privileges to the user of then block builds query s to the Trail Table records for the most recent record up until the optional date time of entry field most recent of all records if no field specified for each device in the comma delimited group list or single group specified a connection is opened to the database the query s are performed and the database connection is closed. Thereafter if block determines at least one device tracking record has been found then block accesses current map settings data evidence e.g. set by builds the map interface command and redirects to a page with upper and lower frames pages for map display WAP device gets single page . Thereafter block terminates current page processing. If block determines button was not selected then processing continues to block . If block determines button was invoked from action data evidence passed from the form then block builds a query to the Trail Table joined to Registry Table with the Deviceid field from entry field the device password field from entry field and an optional date time stamp from entry field . Block opens a DB connection does the query for the most recent record for the device up to the optional date time stamp of field and the database connection is closed. Thereafter if block determines a device tracking record has been found then block accesses current map settings data evidence e.g. set by builds the map interface command and redirects to a page with upper and lower frames pages for map display WAP device gets single page . Thereafter block terminates current page processing.

If block determines button was not selected then processing continues to block where action data evidence in error is reported to the user and processing terminates at block . So the user can locate on a map a device a list of devices a group of devices or a list of groups of devices provided the View Whereabouts privilege has been granted by the sought device s or user s of the sought device s . A device can also be located on a map if both the device id and device password is known by the seeking user. Map F provides an example when a single device is located from . Map G provides an example when a list of devices a group of devices or a list of groups of devices are located through .

Save settings button saves the map settings in entry fields of to map settings data evidence for use in map functionality of web service . Area width determines how much horizontal width to display in a map e.g. longitudinal degrees . Area Height determines how much vertical height to display in a map e.g. latitudinal degrees . Zoom factor determines how much to zoom in or out on a map when selecting links or e.g. percentage . Pan factor determines how much to pan a map when using control e.g. in decimal degrees . Image Width determines how wide the image is to present the map in. Image Height determines how high the image is to present the map in. Markers is an ordered list of preferred markers to use for devices located on a map. If only one marker is provided then that is used for all devices located. If a comma delimited list of markers is provided then each marker from left to right is used until either devices to locate are completed or markers to use in the list are exhausted. If markers run out first then the list of markers is started with the first marker for the next device located and so on. Thus the marker list is round robinned as needed to represent devices on a map. If devices to locate run out first then there are plenty of markers to represent the located devices. From X Center and From Y Center determines how to automatically pan the map after its initial display e.g. as percentage . Max Devices determines the maximum number of devices to display on a map. After this maximum is reached no more devices are displayed. Best practices are to have a number of markers Markers ordered list that match the Max Devices value. Map Layers are predefined constants for what layers to display on maps. Map Level are predefined constants for what should be labeled on the presented maps. Route Colors is an ordered comma delimited list of colors to draw route lines for devices. If only one color is provided then that is used for all device routes plotted. If a comma delimited list of colors is provided then each color from left to right is used until either devices to route are completed or colors to use in the list are exhausted. If colors run out first then the list of colors is started with the first color for the next device plotted and so on. Thus the color list is round robinned as needed to represent device routes on a map. If devices to plot run out first then there are plenty of colors to represent the plotted devices. Route Weight determines the thickness of route lines to draw when plotting device routes on a map.

In another embodiment map settings can be automatically set based on the device that is displaying the map and the user may still be able to override them. There may be other embodiments of map settings wherein a user can control how maps are displayed. These embodiments should allow the user to select a named set of defaults for convenient population to configurable fields.

Thereafter block checks if one or more View Historical Route Information privileges are assigned from each comma delimited device name i.e. id field specified in entry field to the user of or from the owner of devices specified to entry field to the user of . If block determines a device id specified in entry field has not granted the View Historical Route Information privilege to the user of then block reports the error to the user of and current page processing terminates at block . Another embodiment can also report the failed search to the device id s or owner s of the device id s for indicating someone without privileges is attempting to do a search on their location search on their device. Yet another embodiment could include a new field in record checked for at block for reporting such location search attempts made by an unauthorized user or made from an unauthorized device.

If block determines all sought devices have granted privileges to the user of then block builds query s to the Trail Table records for all record s found in range of the Start date time stamp and End date time stamp for each device in the comma delimited list or single device specified a connection is opened to the database the query s are performed and the database connection is closed. Thereafter if block determines at least one device tracking record has been found then block accesses current map settings data evidence e.g. set by builds the map interface command and redirects to a page with upper and lower frames pages for map display. Blocks ensure a WAP device gets single page with no frames. Thereafter block draws an overlay of route lines for the map display background and refreshes the frame or page . Another embodiment will have the map interface command specify how to draw the route lines so the map is returned with route lines on it. Thereafter block terminates current page processing.

If block determines no records were found then block reports a not found error to the user and current page processing terminates at block . An alternative embodiment to block is to process the subset of devices which are determined to have granted the privileges rather than allowing one invalid device to cause an error flow from block to block .

If block determines button was not selected then processing continues to block . If block determines button was invoked from action data evidence passed from the form then block determines the View Historical Route Information privileges Groups Table PingPal Privilege Assignment Table Registry Table Users Table assigned to the user of as passed by access control processing . The View Historical Route Information privileges are determined with joins including device name s of group s entered to field or by a user i.e. all user s devices of OwnerID field s of device name s of group s entered to field . Thereafter block checks if one or more View Historical Route Information privileges are assigned from each device of the comma delimited group names i.e. group name field specified in entry field to the user of or from the owner of devices of groups specified to entry field to the user of . If block determines a device id of group s specified in entry field has not granted the View Historical Route Information privilege to the user of then block reports the error to the user of and current page processing terminates at block . Another embodiment can also report the failed search to the device id s or owner s of the device id s for indicating someone without privileges is attempting to do a search on their location search on their device. Yet another embodiment could include a new field in record checked for at block for reporting such location search attempts made by an unauthorized user or made from an unauthorized device.

If block determines all sought devices have granted privileges to the user of then block builds query s to the Trail Table records for for all record s found in range of the Start date time stamp and End date time stamp for each device for each device in the comma delimited group list or single group specified a connection is opened to the database the query s are performed and the database connection is closed. Thereafter if block determines at least one device tracking record has been found then block accesses current map settings data evidence e.g. set by builds the map interface command and redirects to a page with upper and lower frames pages for map display WAP device gets single page . Otherwise block continues to block for error processing. Block continues to block for drawing an overlay of route lines for the map display background and refreshing the frame or page . Another embodiment will have the map interface command specify how to draw the route lines so the map is returned with route lines on it. Thereafter block terminates current page processing.

If block determines button was not selected then processing continues to block . If block determines button was invoked from action data evidence passed from the form then block builds a query to the Trail Table joined to Registry Table with the Deviceid field from entry field the device password field from entry field and for all record s found in range of the Start date time stamp and End date time stamp for the device. Block opens a DB connection does the query for the record s and the database connection is closed. Thereafter if block determines a device tracking record has been found then block accesses current map settings data evidence e.g. set by builds the map interface command and redirects to a page with upper and lower frames pages for map display WAP device gets single page . Thereafter block draws an overlay of route line for the map display background and refreshes the frame or page . Another embodiment will have the map interface command specify how to draw the route line so the map is returned with the route line on it. Thereafter block terminates current page processing.

If block determines button was not selected then processing continues to block where action data evidence in error is reported to the user and processing terminates at block . So the user can produce a map with the historical route s of a device a list of devices a group of devices or a list of groups of devices provided the View Historical Route Information privilege has been granted by the sought device s or user s of the sought device s . A device can also have its route plotted on a map if both the device id and device password is known by the seeking user. Map H provides an example when a single device route is plotted through from . Map I provides an example when a list of devices a group of devices or a list of groups of devices have their routes plotted through use of . Map I uses the Route Colors setting for plotting routes in different colors cannot see differentiation well on black and white drawing . Because of the potentially large number of records involved in the above processing another embodiment may completely process one query results before performing the next query in the list of queries to perform.

Thereafter if all fields are not valid e.g. checks syntax for single string or comma delimited strings address information translation information returned date time strings and SQL injection attacks then block appropriately reports the error to the user and current page processing terminates at block . If block determines all fields were valid then processing continues to block . If block determines button was invoked from action data evidence passed from the form then block determines the View Reports privileges Groups Table PingPal Privilege Assignment Table Registry Table Users Table assigned to the user of as passed by access control processing . The View Reports privileges are determined with joins including device name s entered to field or by a user i.e. all user s devices of OwnerID field s of device name s entered to field . View Reports is preferably assigned from a user i.e. all his devices or device to a user. Another embodiment will also allow assigning from a user or device to a device wherein the device id is known for the device with the interface doing the reporting action from . In one embodiment the device id field and device password can be used to authenticate to an interface of web service just as LogonName field and password field are used. In another embodiment the device id and device password are automatically determined for example by a most recent interaction with the Delivery Manager . In another embodiment device data evidence fields and is used.

Thereafter block checks if one or more View Reports privileges are assigned from each comma delimited device name i.e. id field specified in entry field to the user of or from the owner of devices specified to entry field to the user of . If block determines a device id specified in entry field has not granted the View Reports privilege to the user of then block reports the error to the user of and current page processing terminates at block . Another embodiment can also report the failed search to the device id s or owner s of the device id s for indicating someone without privileges is attempting to do a search on their location search on their device. Yet another embodiment could include a new field in record checked for at block for reporting such location search attempts made by an unauthorized user or made from an unauthorized device.

If block determines all sought devices have granted privileges to the user of then block builds query s to the Trail Table records for all record s found in range of the Start date time stamp and End date time stamp for each device in the comma delimited list or single device specified with the specified translated location information a connection is opened to the database the query s are performed report s list is are built and the database connection is closed. Thereafter if block determines at least one device tracking record has been found then block builds report output categorized by device and then by location s within a device category and block terminates current page processing.

If block determines no records were found then block reports a not found error to the user and current page processing terminates at block . An alternative embodiment to block is to process the subset of devices which are determined to have granted the privileges rather than allowing one invalid device to cause an error flow from block to block . If block determines button was not selected then processing continues to block . If block determines button was invoked from action data evidence passed from the form then block determines the View Reports privileges Groups Table PingPal Privilege Assignment Table Registry Table Users Table assigned to the user of as passed by access control processing . The View Reports privileges are determined with joins including device name s of group s entered to field or by a user i.e. all user s devices of OwnerID field s of device name s of group s entered to field . Thereafter block checks if one or more View Report privileges are assigned from each device of the comma delimited group names i.e. group name field specified in entry field to the user of or from the owner of devices of groups specified to entry field to the user of . If block determines a device id of group s specified in entry field has not granted the View Report privilege to the user of then block reports the error to the user of and current page processing terminates at block . Another embodiment can also report the failed search to the device id s or owner s of the device id s for indicating someone without privileges is attempting to do a search on their location search on their device. Yet another embodiment could include a new field in record checked for at block for reporting such location search attempts made by an unauthorized user or made from an unauthorized device.

If block determines all sought devices have granted privileges to the user of then block builds query s to the Trail Table records for for all record s found in range of the Start date time stamp and End date time stamp for each device for each device in the comma delimited group list or single group specified along with the translated geocoding information a connection is opened to the database the query s are performed and the database connection is closed. Thereafter if block determines at least one device tracking record has been found then block builds report output categorized by group then by device then by location s and block terminates current page processing.

If block determines button was not selected then processing continues to block where action data evidence in error is reported to the user and processing terminates at block . So a historical report can be produced on a device a list of devices a group of devices or a list of groups of devices provided the View Report privilege has been granted by the sought device s or user s of the sought device s . Because of the potentially large number of records involved in the above processing another embodiment may completely process one query results before performing the next query in the list of queries to perform. The report generated at block is a single page suitable for all devices however reductions in size are preferably made for reporting to WAP devices without eliminating desirable report information. Reported information includes records field data collected within the time range for the sought location s . Preferably there is an organized breakdown by device location s and time. The report information is textual preferably in tabular form. Another embodiment could provide the reports as spreadsheets graphs bar charts or any reasonable reporting method.

Field is preferably a client side monitored data entry field for expanding the number of address areas of the form for processing by button . Field determines how many additional address areas to add to the form. This enables the user to process a plurality of locations for reporting on the device s in the time range. Block will validate multiple address areas and block will geo translate for multiple locations regardless of how specified. Field may require a function key to accept the value typed at field as recognized by client side Javascript for example or may activate as soon as field loses cursor focus. Other embodiments to address area may also be multiplied using the field .

Field is preferably a client side monitored data entry field for expanding the number of address areas of the form for processing by button . Field determines how many additional address areas to add to the form. This enables the user to process a plurality of locations for reporting on the group s of device s in the time range. Block will validate multiple address areas and block will geo translate for multiple locations regardless of how specified. Field may require a function key to accept the value typed at field as recognized by client side Javascript for example or may activate as soon as field loses cursor focus. Other embodiments to address area may also be multiplied using the field .

Block builds query s to the Server Data e.g. PingPal Privilege Assignment Table Groups Table Registry Table Users Table and joins therefrom to determine all privileges assigned to this user of by his PersonID field or any one of the user s devices as determined by Owner field opens a DB connection does the query s closes the DB connection and iterates through rows returned i.e. lists to build an output page. Preferably the output page is built in an organized manner to show the users who have assigned which privileges as well as the devices which have assigned which privileges to this user of or any of this user s devices. Preferably only the LogonName s and device name s of the assignors are shown to this user. Other embodiments may additionally display any fields of records or . Another embodiment may require new privilege s assignable between users and or devices for how much information to share in the output built at block . The new privileges would also be maintained in PrivMask field with processing and user interfaces as heretofore described. Thereafter if block determines no privileges were found to be assigned to this user of then block presents a none found page and processing terminates at block . If block determines one or more privileges were found then block presents the output page built at block containing who and which devices have assigned which privileges to this user or this user s devices and processing terminates at block .

In another embodiment block may have queried interest radiuses of the PingPal devices so blocks and can check to see if the interest radiuses intersect relative to the device locations being compared. Depending on the embodiment processing finds PingPal devices which are nearby the querying device at the time of processing by see 

In an optional embodiment for how to determine being nearby the user interface of a block can interact with the user of for specifying whether to use only the interest radius of the querying device or only the interest radius of the PingPal device or both interest radiuses for an intersection. While B and C depict devices not nearby each other they do demonstrate the different embodiments for what is used to determine them being nearby. In the example if PingPal location was within interest radius then being nearby would be true. In the example if PingPal interest radius intersected with interest radius then being nearby would be true. In the example if querying device location was within interest radius then being nearby would be true.

In another embodiment elevation field can be factored in for determining a nearby result. In a three dimensional embodiment nearby would be determined in terms of three dimensional information maintained in the Trail Table for three dimensional information of records . That way nearness is based on proximity of nearness in space. The interest radiuses and could be spheres in the three dimensional embodiment so the radius was in terms of three dimensional space. An interest radius of a device regardless of embodiment is referred to as a moving interest radius a mobile interest radius or a traveling interest radius. These references are used interchangeably because the devices are mobile and the interest radius is always relative to the current device location situational location at all times.

In a user friendly embodiment to each of the find interfaces described above the PingPal devices which have assigned the necessary privileges could be determined when building the user interfaces discussed in context of so a dropdown would be provided for selecting the eligible devices replacing entry fields and . This would prevent a user from manually entering a device or group that is then processed for producing an error. Link could also be replaced with a user interface for a multiple selection dropdown to select which PingPals already determined as eligible are wanted to be checked for being nearby. In yet another embodiment wildcard specifications can be specified to fields and for specifying a plurality with a single entry e.g. Dept Jo d d or any wildcard specification and method e.g. similar to wildcard characters and used in a DOS dir command .

With reference back to other actions are now described. Profile dropdown shows all profiles the user has defined up to the point of display of . Dropdown is built when the page is constructed for presentation to the user. There is always a Default profile defined which contains parameters for customizing device s through a simple association of the profile to the device s . The View button adjacent to Device Profile s and dropdown allows display of the profile selected in dropdown in an analogous manner to button displaying user account information. The neighboring Manage button is used in an analogous manner to a record manage option e.g. via button heretofore described except the add interface is a copy interface launched from within the Manage user interface invoked from selecting the Manage button. The selection in the dropdown is managed and a new profile can be created by copying an existing profile as a starter for then doing subsequent editing managing of it. The default profile is a read only record for all devices in web service . A user must copy that profile to a new name and then make desired edits. User interfaces for managing data records in web service are similar to the user interfaces launched from actions to .

Device dropdown is automatically populated when building the user interface of for all of the user s devices defined at the time of display. When the user has not yet created a device record the dropdown is disabled as shown . When dropdown is enabled with the user s device s thus far created record s show button and assign button are also enabled. The user of can select a device from the dropdown Deviceid field displayed there and select the show button to show the profile information currently assigned to the device if any by querying records and for the RegistryID associated to the dropdown selection. The user may also delete an assignment from within that assignment interface. Another embodiment will allow assigning multiple profiles to a device for a superset applying of values to record where any conflicts are reconciled by the latest DTLastChg field value which takes precedence when the same field 65xx is referenced more than once by multiple profiles for setting fields in a record . Upon selection of a device in the dropdown assign button when enabled allows a user to assign one of his profile records to the device by inserting a record . So records are created interface launched from button or deleted interface launched from button . In the preferred embodiment assigning a record assignment creates a record instantly updates all referenced physical fields 65xx values in the associated record .

The user of can also select a device from the dropdown Deviceid field displayed there and select the show button to show the indicators currently assigned to the device if any by querying records and for the Type field for device and RecID field equal to the RegistryID associated to the dropdown selection IndicID field joined to IndicID field . The user may also delete an assignment from within that assignment interface. A user can assign multiple indicators to a device for a priority order as described above. Upon selection of a device in the dropdown assign button when enabled allows a user to assign one of his indicator records to the device by inserting a record . So records are also created interface launched from button or deleted interface launched from button .

Device records can be assigned profiles and delivery indicators through use of buttons and . In one embodiment profiles are accessed when data values are needed for record in Delivery Manager processing described below as through the data values were physically in the record. In another embodiment assigning a profile instantly modifies the associated record appropriately so the record always reflects profile s which are assigned. Record descriptions below assume any one of these embodiments when described in terms of accessing fields from record . Delivery indicators can be assigned to a user s device s for preferences of how to deliver an indicator when a delivery indicator is to be delivered in place of deliverable content. If a delivery indicator is set for a DCDB record and the device which is to receive deliverable content also has one or more delivery indicators assigned then the device indicators take precedence. Delivery indicators contain a Criteria field which provide the user with the ability to specify criteria for matching to deliverable content records for delivering an indicator based on that match. The user can also control priority of indicator record matches with Ordr field . Another embodiment may have the DCDB record indicator or PingSpot record indicator take precedence.

Device id entry field and device password entry field are provided by the user and match a Deviceid field and corresponding device password field . Once that is entered invoking the adjacent View button displays the device record like . Invoking the adjacent Modify button displays the device record for modification processing like and associated processing. Once either of the buttons is invoked for valid user specifications to fields and the device credentials Deviceid field and device password are converted to device data evidence and are defaulted automatically from device data evidence when building the page user interface of at subsequent times. The device data evidence is also useful for associating all subsequent user interfaces with a RegistryID field a device when the user uses the user interfaces of web service . This may be used for automatically determining the device in addition to the user of web service interfaces for the purpose of privilege determination as described herein e.g. find processing . The device data evidence is preferably a long term expiration for automatically defaulting to between logons to the members area . Buttons and are described below with descriptions for . Link was already described above. Link is identical in function to link of which is discussed below.

Upon selection of the Submit button adjacent to fields through user preference data evidence processing begins at block and continues to block where the ACCESS LIST is set for authorized users. Thereafter block performs access control processing and continues to block . Block validates the user entries if any to fields through and then block checks if they were valid. If block determines the user specified values are valid then block sets user preference data evidence each are individually named data evidence as described above for use with a long term expiration for each non null value of fields through and then processing terminates at block . If block determines a field is not valid then block appropriately reports the error to the user and processing terminates at block . Blocks preferably enforce a minimum and maximum value to field and fields and may be validated by attempting to connect to the specified port.

Filters Management component comprises the selectable Filters Maps option and Filters Specify option under Filters options category header . Filters Management component is provided to users of full browsers for convenient filtering of records through all members area interfaces. Another embodiment will support filtering web server data to user interfaces of any device.

So the user interfaces with the map at block until an action such as a geographic area hotspot link is selected. Upon selection for example Texas of block redirects the user to the corresponding map such as and current page processing terminates at block . The map selected at block causing processing to block is presented to the user and processing begins again at block for the selected map. processing occurs whether a map is selected from the dropdown or from another map such as etc. So a user can automatically set page filter data evidence by simply making mouse selections for maps or on maps.

A single data entry field is provided with a submit button upon selecting Filters Specify option . The user may know exactly what server data filter to set so can manually type a character string for manually setting page filter data evidence. Obvious syntactical and format errors are validated in the form and if valid the form is submitted for processing to . This provides the user with a method for typing the string Texas United States Denton County etc for setting page filter data evidence to any territory desired without having to navigate maps. The user can also enter NONE for clearing page filter data evidence as though no filter criteria were ever set or a clear filters button can be provided . depicts a flowchart for a preferred embodiment of processing a request for the Filters Specify option. Processing begins at block and continues to block where the ACCESS LIST is set for authorized users. Thereafter block performs access control processing and continues to block . Block validates the string entered in the single entry field and preferably ensures it corresponds to current permitted filters then block checks validity. If block determines the entry is valid block saves the user specification to page filter data evidence and block terminates current page processing. If block determines the filter data entry was not valid then block appropriately reports the error to the user and processing terminates at block .

There may be other embodiments for setting page filter data evidence for filtering out server data before it is presented to a user interface of web service . Page filter criteria set in the page filter data evidence is preferably displayed in a filter display field e.g. field at the top of a relevant page of web service so the user knows what is currently set. Page filter data evidence is used when building the particular page. For example A and G at top of content frame indicates that current page filter data evidence is set to United States i.e. Active Filter s US . also shows page filter data evidence set for United States. B C D C and B indicate no page filter data evidence which means the search interfaces do not have the filter criteria automatically amended to the search criteria. A A A B C are also informative uses of the page filter data evidence. Page filter data evidence automatically becomes part of search interface criteria and can be used to automatically set location information of records in web service data .

Debug Variables option is preferably presented to only a Site Owner for display of all data evidence of web service which is persistent between all pages of web service . Variables for debug output of web service which provide web service vital signs are output upon selection of option . Support and Download option provides support and download options to users provided they are paying customers. Support may involve a Contact interface described above email address and phone number for human help. Human help is not required in web service because it is fully automated and does not require a human being to operate it. Support is preferably offered to paying customers for customer satisfaction. Download options may also be presented preferably to the paying customers in the form of web service documentation directional information and software executables and drivers for distribution.

Delivery Manager component comprises the selectable Delivery Start option Delivery User Specified Location Start option and Delivery Configurator option under Delivery options category header . Delivery Manager options are available to users through a user interface or from a command line e.g. URL . Every user interface to the Delivery Manager component can be bypassed in favor of using a URL command line string to the associated processing instead. One embodiment of web service allows replacing any members area user interface with some URL command line string. For example can be replaced with the following string to the same processing 

https www.gpsping.com MCD zdeliv.asp i billj p billj123 x 4 y 4800 mw 60000 gr 5000 sr 1000 1 500 h 0

The i parameter is a DeviceID field . The p parameter is a device password field . The x parameter is the GPS port for example as set at field . The y parameter is the GPS port baud rate for example as set at field . The mw parameter is the maximum wait timeout for interfacing to the GPS port in milliseconds. The gr parameter is the GPS interface retry time period in milliseconds if an attempts failed to get coordinated from the GPS port. The sr is the server retry period in milliseconds for example as set at field . The 1 parameter is the search method to use for this device with 500 meaning an interest radius of 500 feet for example as set at field . The h parameter is the hide console checkmark for example as set at checkbox . Also any data field of record can be overridden with a command line parameter for example to override interests filters checkmark settings SMS messaging and email address https www.gpsping.com MCD zdeliv.asp i billj p billj123 x 4 y 4800 mw 60000 gr 5000 sr 1000 1 5 h 0 q basketball soccer baseball football tennis swimming f ballet volleyball golf e NYNNN m billj iswtechnologies.com billj iswtechnologies.com The maximum wait timeout and GPS retry time period are preferably system wide settings of web service but can be customized in some embodiments by a user for a particular GPS interface. There are varieties of methods for providing URL parameters to processing just as a form would communicate parameters for its processing. One VBScript ASP embodiment for supporting user interfaces and or URL command line strings in all processing is to do the following for each parameter needed 

Each device of web service record has its own credentials for authentication to the members area so that a user account can manage many devices without requiring the user of a device to have a user account. The Deviceid field is specified to device id validation entry field . The device password field is specified to device password validation entry field . Device data evidence if available is defaulted to fields and . Device GPS interface communications port data evidence is used to default GPS port entry field otherwise the user enters it manually. Device GPS interface baud rate data evidence is used to default the GPS port baud rate entry field otherwise the user enters it manually. Hide console checkbox is used to set the Delivery Manager console for full view or partial view. The user can set his device mobile interest radius in the form for override of IntRadius field if desired. Interest radius units dropdown provides a selection of units the number of which is entered to interest radius entry field . shall be discussed in context for discussing a mobile interest radius and hit radius of deliverable content items. Deliverable content and PingSpots defined as records can be configured as a situational location and the device is a mobile device situational location with a relative moving interest radius also called interest radius mobile interest radius or traveling interest radius . When the mobile device travels to a situational location where situational location is within radius distance to situational location the deliverable content item triggers for delivery to the device at situational location . In another embodiment deliverable content and PingSpots defined as records can be configured as a situational location with a hit radius and the device is a mobile device situational location with a relative moving interest radius . When the mobile device travels to a situational location where hit radius intersects with moving interest radius deliverable content item triggers for delivery to the device at situational location . In another embodiment deliverable content and PingSpots defined as records can be configured as a situational location with a hit radius and the device is a mobile device situational location . When the mobile device travels to a situational location where situational location is within radius distance to situational location the deliverable content item triggers for delivery to the device at situational location .

The user can set how often the web service is to check for deliverable content on his behalf a device heartbeat in time frequency. Server check frequency units dropdown provides a selection of units the number of which is entered to server check frequency entry field . In one embodiment device heartbeats are sent from the device to the web service periodically according to the server check frequency. In another embodiment device heartbeats are handled completely at the web service on behalf of the device and periodically according to the server check frequency. In another embodiment device heartbeats are sent from a location service to the web service periodically on behalf of the device according to the server check frequency. Each heartbeat contains situational location information of the device at that instant in time. Fields specified to can become data evidence for automatic default to the same fields at a future invocation for . Once the Start button is selected block performs Device Interface processing of Delivery Manager start .

Every device of web service can be associated with a history of deliverable content records which were selected for save to an archive by the user. Link preferably contains data evidence such as a URL variable for specifying Archive A as well as the RegistryID of the record built in link as URL parameters as result of building page . processing will invoke upon selecting link for the user to manage the device Archive.

Block builds a query for records joined to records for the particular device of processing RegistryID field passed as URL variable from link for match to field that are ENTRY VIEW type records field set to A for Archive or M for Master opens a DB connection and does the query. Block also reads a user customizable Master or Archive page see or B for a ready made HTML page which gets edited and presented back to the user as a page from into a template variable according to ENTRY VIEW and sets html styles of the template while in the template variable according to the device or browser type. An alternate embodiment will not modify styles but will leave whatever the user edited into the Master or Archive page. Thereafter block checks if any rows were returned by the query at block . If block determines no rows were returned then a page is built for the user for 0 delivery history records status at block and processing continues to block . Block closes any open DB connection completes building the user interface page and presents it to the user and current page processing terminates thereafter at block . If block determines there were one or more joined rows returned from block then block strips off page termination information from the page in the template variable i.e. strips off the sound element i.e. from the template variable if was invoked for Archive or Master management processing e.g. as the result of links and builds the top of the page to return to the user using the post edited contents of the template variable builds the Select Delivery Range time criteria section see and builds the table header columns . Block keeps the sound element for output to the content delivery section for user alerting to new content. Thereafter block checks if the invoker of processing is for manage the device s Archive e.g. links or manage the device s Master e.g. link processing. If so then block iterates through rows returned from the query at block to build a page row such as row along with a checkmark box with associated hidden DCDBID field in the Select for Action column and then block checks the ENTRY VIEW variable. If the ENTRY VIEW variable is set to Master then block builds Archive button and Delete button and then continues to block for processing already described. If block determines the ENTRY VIEW variable is set to Archive then block builds the Save offline button and Delete button and processing continues to block . Blocks and will make the buttons read only actions for a Delegate user type to processing e.g. no operation or an error pop up that it is read only .

If block determines the invoker of is not for managing a device s Master or Archive links and then block iterates out rows records with no checkboxes and processing continues to block . Block executes for Delivery Manager invoked Archive view link or browser deliveries section . Link results in for example as shown in . Link preferably provides a read only access to the device Archive since device credentials are used for the Delivery Manager. The preferred embodiment requires a logon to web service with user account credentials to save archived deliveries offline or delete from archive link . Block also iterates out rows records when displaying content deliveries as shown in content delivery section of and A.

With reference now to A and B a user can edit a Master or Archive page for any of his devices to contain any HTML he wants. Editing a device Master is performed upon selection of personalize Master button . Selecting button launches a web service configurable and device dependent text editor on the Master page for the device data evidence set at fields and . If no device data evidence yet exists then an error is reported to the user of button . Once the device Master is brought up in an appropriate text editor for the device the user can edit it any way he wants it. Likewise editing a device Archive is performed upon selection of personalize Archive button . Selecting button launches a web service configurable and device dependent text editor on the Archive page for the device data evidence set at fields and . If no device data evidence yet exists then an error is reported to the user of button . Once the device Archive is brought up in an appropriate text editor for the device the user can edit it any way he wants it.

Another embodiment will provide an appropriate user interface upon selecting buttons or for selecting a device to personalize and or similarly customizing a device Master and Archive or any separately maintained page for user preference presentation when maintained in an SQL database. There are many conceivable embodiments for user customization of how to present content deliveries a history of content deliveries and an archive of content deliveries.

Button provides a user with customization of how to present deliverable content to his device and how to manage or view the Master. Buttons and provide a user with customization of how to present history information of deliverable content that was delivered to his device. Visual and or audible customization can be performed. shows what happens when the user has selected button from a full browser for current device data evidence with a RegistryID of 2. The Windows Notepad editor is launched for edit of the device s Master page template. shows what happens when the user has selected button from a full browser for current device data evidence with a RegistryID of 2. The Windows Notepad editor is launched for edit of the device s Archive page template.

If block determines a Delete button was not invoked then block checks to see if the user selected an Archive button button for moving delivery history records from the device s Master to the device s Archive. If block determines an Archive button was selected then block iterates through check marked rows with the hidden associated DCDBID to build an update command and do the update for each row in the Device History Table. Records Type field is updated from M Master to A for Archive for each row check marked and any update failure is noted by putting the failed row DCDBID into a list. A failure may have occurred if the same content item DCDBID is already in the Archive marked with A . Thereafter block checks to see if even a single row was check marked. If block determines no rows were check marked then processing continues to block . If block determines that row s were check marked then block builds an update command on the LastHit field of records which had a failed update at block and does the update with a current date time stamp for denoting the last time the same records were archived. Thereafter block uses the list of DCDBIDs built at block to build a delete command and deletes records which failed update at block and have just been reflected as being moved again into the archive with the update command at block . Thereafter processing continues to block .

If block determines an Archive button was not invoked then block checks to see if the user selected a Save Offline button button for saving delivery history records to a file for example out of the server data . If block determines a Save Offline button was selected then block interfaces with the user for a valid file name specification and the check marked entries are saved to that file. Thereafter processing continues to block . If block determines a Save Offline button was not invoked then processing continues to block .

If block determines the device or browser type is a PDA then processing continues to block . If block determines a Hide Console check mark was present e.g. checkbox of then block builds a short header frame and processing continues to block otherwise block builds a tall header frame and processing continues to block . Block completes the frameset for presentation of a header frame with all parameters and initializes the remaining two frames with an initialization page for a PDA if arrived to from blocks or . Block starts page processing within each of the three frames header frame presentation processing of initialization page processing of . Thereafter current page processing terminates at block . If block determines the device or browser type is not a PDA then processing continues to block . If block determines the device or browser type is for special handling then block completes building of the frameset for the particular special device or browser type and then to block as already described. For a WAP device blocks and preferably build a single WML page for the special device type. If block determines the device type is not for special handling then a full browser device is assumed and processing continues to block . If block determines a Hide Console check mark was present e.g. checkbox of then block builds a short header frame and processing continues to block otherwise block builds a tall header frame and processing continues to block . Block completes the frameset for presentation of header frame with all parameters for a full browser device if arrived to from blocks or .

When is complete the user sees for example the page of at a full browser device for automatic GPS data collection a pre start button selection version of at a PDA browser device for automatic GPS data collection a pre start button selection version of at a full browser device for automatic GPS data collection hide console check marked pre start button selection version of at a PDA browser device for automatic GPS data collection hide console check marked and pre start button selection version of at a full browser device for a user specified location. One embodiment as described by for each of B and A consists of three adjacent horizontal frames a top frame containing a header page and associated processing a middle frame containing no visual display for device heartbeat processing and a bottom frame for displaying deliverable content from the device Master in real time as content is delivered. Upon completion of each frame contains a processing page which executes independently from processing in the other two frames. In one common usage only the device heartbeat processing page needs to be invoked from a device or from a location service on behalf of a device or from an executable thread executing at web service on behalf of a device for automating delivery of deliverable content to the receiving device. B and A are relevant when BrowseRcpt is set to Yes otherwise deliveries can be made by SMS message fields and or email fields which does not need a browser. Other embodiments will deliver deliverable content using other means from the web service to the receiving device i.e. RDPS . Deliverable content can be of any type which includes audio video graphical textual multimedia intranet internet web address es activated for transposable selection image executable or any combination thereof etc. CD ROM file name zdeliv.asp provides an ASP program source code listing for an embodiment of without URL override parameters for overriding record fields . The user invoking processing with a URL command line can specify override parameters for overriding any fields of record of the record fields found in header processing.

Block determines data evidence for maximum wait timeout and GPS interface retry time period discussed above server retry e.g. from field search method s e.g. field and the hide console checkbox e.g. checkbox . Server retry is the period of time between device heartbeats. Search method s are all the methods to be used for searching for deliverable content for example from records . While shows an interest radius search method in use a URL invocation of a Delivery Manager processing can specify any of the search methods discussed above for a record field . Thereafter block determines any command line override values for overriding any fields in record validates them and processing continues to block . If block determines any command line override is invalid then block appropriately reports the error to the user and current page processing terminates at block . If block determines any command line overrides found are all valid then block builds a query to records for the Deviceid and password in passed data evidence opens a DB connection does the query and closes the DB connection. Thereafter if block determines no record was found for the specified device credentials Deviceid field and device password field then processing continues to block for appropriate error handling and termination. If block determines a device record was found then block sets header display fields according to record data and any overrides to apply. Block also sets a variable PGLOADED to false and LOADRETRIES to none. Then the page display is presented in the header frame for user interaction for example header frame pages or . The user then interfaces to the header page at block until a processing action is detected to the header frame page in which case block does the user selected processing action and processing continues back to block for any further user action selections. The user interfaces with the header frame page which is the user control portion of the browser version of the Delivery Manager.

Block processing is described below with . Block processing is described below with . Block was already described in processing and results in a window such as C D D and C with associated processing. Block was already described in processing and results in a window such as and D with associated processing. Block results in a window such as B and E. Block results in a window such as with associated processing. CD ROM file name mcddchdr.asp provides an ASP program source code listing for an embodiment of as well as automated GPS data gathering processing.

Block sets a PGLOADED Boolean variable to False prepares a command for invocation of the device heartbeat processing page invokes the device heartbeat processing page with the command for processing in the middle frame that has no visuals e.g. between header page frame section and lower frame section or between header page frame section and lower frame section and gets the current date time stamp. Thereafter block updates the header page visuals in the header frame for this thread execution processing ending date time stamp GPS information etc sets the PGLOADRETRIES variable to 0 and spawns a do again processing executable thread for the next device heartbeat to execute in the next server retry period of time e.g. from field . current thread processing then terminates at block . Block invokes the device heartbeat processing page with device record fields and the GPS information gathered. The next invocation of device heartbeat processing can not occur i.e. will not execute again for the particular device until the previous heartbeat processing is complete as indicated when PGLOADED gets set to True by another executable thread discussed below .

In one use of processing a device sends its situational location information and needed record fields with each heartbeat. The heartbeat is a periodic communication to e.g. URL invocation of a page of web service . That heartbeat is used to search for applicable deliverable content PingSpots Pingimeter Alerts etc according to configurations made on behalf of the device the content the web service and criteria of the heartbeat s situational location. A browser driven Delivery Manager is not required. heartbeat processing can be invoked from any device as a URL according to configurations made at the device. The burden is put on the originator for invoking processing with proper heartbeat parameters including an accurate situational location at the time the heartbeat is sent to web service . have completed all the work necessary to drive a proper heartbeat for a device and are therefore provided for convenient web browser invocation. Any software developer aware of the URL to invoke processing can easily develop to specifications. For example assuming an originator e.g. device web service or location service can determine the applicable device s situational location s in a timely manner the originator need only know how to invoke processing. The following URL is an example of invoking heartbeat processing 

https www.gpsping.com MCD g.asp ad 33 am 1 as 12.78 ap N od 97 om 4 os 58.9 o h W sp 0 d 0 1 500 r 2 r 1 q basketball soccer baseball football tennis swimming f ballet volleyball golf in N c Y e NYNNN m billj iswtechnologies.com billj iswtechnologies.com The parameters for latitude and longitude are ad Lat degrees am Lat minutes as Lat seconds ap latitude pole od Long degrees om Long minutes os Long seconds and oh Long hemisphere . The d parameter is the direction as determined from heading 0 is any or unknown . The sp parameter is the speed 0 is not moving . Elevation hasn t been passed in this example but can be. The r parameter is a valid handle returned to the device e.g. RegistryID field for the device doing the heartbeat. An alternate invocation of processing is with the following URL https www.gpsping.com MCD g.asp a 33.3458 o 97.34111 sp 39 d 1 1 5 r 2 t 1 q basketball soccer baseball football tennis swimming f ballet volleyball golf in N c Y e NYNNN m billj iswtechnologies.com billj iswtechnologies.com The parameters for latitude and longitude are in signed decimal degrees a latitude in decimal degrees 33.3458 o longitude in decimal degrees 97.34111 . The speeds sp is 39 MPH. Note the search parameter 1 specifies to use the search method of PRECISE FULLSECOND as described above and the direction d parameter specified a direction the device is moving is North.

Another embodiment may not use a URL invocation method although using a URL method simplifies supporting heterogeneous devices to web service . A binary packet protocol interface can be implemented between originators of heartbeats and processing to prevent exposing performance to string parameter processing and to prevent easily discernable interfaces for attackers. In another embodiment of URL invocation the Deviceid field and device password field are provided instead of the RegistryID parameter r for authentication at each heartbeat otherwise someone could send anyone else s RegistryID which may cause integrity issues in server data of web service .

Processing starts at block and continues to block where the ACCESS LIST is set for authorized users. Thereafter block performs access control processing successful device credential data evidence preferably checked for instead and continues to block . Block determines and validates data evidence passed from the device heartbeat containing the situational location and device record information or enough information to query the record in another embodiment block checks validation results. Preferably does little validation if any at all to ensure maximum performance of its processing. If block determines a value in data evidence e.g. from URL string is invalid then block appropriately reports the error and current heartbeat processing terminates at block . If block determines all data evidence is valid then block performs Delivery Share processing . Thereafter processing continues to block which determines the current date time builds a query to DCDB records i.e. EntryType field set to D for Deliverable Content Entry matching the device heartbeat situational location information opens a DB connection and opens a cursor for fetching any records found PingSpots are preferably not handled here since privileges are required but can be. See block for PingSpot processing . Block matches all records which are configured with a matching situational location to the device situational location passed in the heartbeat to processing. thread execution occurs for each heartbeat of potentially millions of mobile devices . thread execution processing is asynchronous and simultaneous for all devices that need it. Another embodiment may integrate multiple heartbeat invocations of in a single execution to minimize the number of outstanding threads required to satisfy all mobile devices that communicate with web service at substantially the same time. The query built at block preferably seeks records with EntryType field set to D and preferably uses at least fields through to match to the situational location of the device and the device s mobile interest radius configured for the device as described for . Fields and may be used exclusive or fields through since it is the same information in a different form. Another embodiment of records may include one set of fields through exclusive or fields through . Block preferably also uses fields and along with any other record fields for the search. Another embodiment will also use field for matching the situational location of the device to the deliverable content as described for . Only active records are searched i.e. field set to active . At least the device record fields and unless overridden are used in the search the type of which is defined by field unless overridden . Fields and may be checked after records are returned satisfying the situational location match first. Any fields of the device record may be used in matching to records .

Block continues to block . If block determines there were no records matching the situational location of the device then processing continues to block described below. If block determines there are one or more records to process with the open cursor then block builds arrays for strings of the interests field and filters field of the device invoking heartbeat processing. Thereafter block gets the next or first record and processing continues to block . If block determines all records of the open cursor have been processed then processing continues to block . If block determines all records have not been processed then block initializes a KEEPHIT variable to True and block checks interests field . If block determines interests field for the device is null then processing continues to block . If block determines interests field is not null then block iterates through interests configured for the device and matches to the current record being processed. Preferably block matches interests to field and or depending on content type but any fields of a record can be used. Thereafter if block determines the record does not match the device interests then processing continues to block . If block determines the device interests do match the record then block checks the device filters field . If block determines the filters field for the device is null then processing continues to block . If block determines the filters field is not null then block iterates through all filters set and matches to the same field s matched for the interests field . Thereafter if block determines a filter matches record then processing continues to block . Block sets the KEEPHIT variable to False and processing continues to block . Block adds the DCDBID field of the record of the open cursor to a HITLIST array only if the KEEPHIT variable is set to True from previous processing. The HITLIST array keeps track of all records determined for delivery to the device. Block continues to block where a next record of the cursor is accessed. If block determines the record does not match a filter then processing continues to block . Filters field takes precedence over interests field such that a record set for delivery from interests processing can be discarded from filters processing.

When all records have been processed in the loop of blocks and subsequent blocks already described for processing continues to block . Block invokes PingSpot processing then block invokes Pingimeter processing then block invokes Nearby processing then block invokes Build Master Processing then block closes any open DB connection and processing terminates at block . Different embodiments of may not include block and or block and or block and or block .

At some point in the execution of an insertion of a LastLog record is needed for recording a first access by the particular device to processing. For a subsequent access by the same device the presence of a record for the device simply requires a date time stamp update to reflect the most recent Delivery Manager access for that particular device. Other embodiments may use a different flowchart of Delivery Manager processing so as to not affect critical performance of the heartbeat processing.

Block continues to block . If block determines all DCDBIDs from the HITLIST array are not yet processed then block inserts a record into the Device History Table with field set to Master and field set to the current date time stamp field is set to DCDBID from HITLIST and field is set to the RegistryID field of the device causing heartbeat processing . Thereafter if block determines the insert succeeded then block adds the DCDBID to a NEWHITLIST array and processing continues back to block for the next HITLIST DCDBID. If block determines the insert failed because of a duplicate record then block adds the DCDBID to the update command started at block . A duplicate error occurs when the record has already been delivered to the device as represented by the device Master so only the LastHit field needs to be updated to reflect the last time it was delivered to the device. Processing then continues from block back to block .

If block determines all DCDBIDs from the HITLIST array have been processed then block checks to see if there is an update to do for records already in the Master which caused duplicate errors at block . If block determines there is an update to do then block does the update of LastHit field for the current date time to indicate the last time the record s DCDBIDs added to the Where clause at block were delivered. Processing then continues to block . If block determines there is no update to do then processing continues to block . Block builds the top of a browser delivery page e.g. for section only if the device field is set to Yes. Thereafter block checks if there are any DCDBID entries in NEWHITLIST. NEWHITLIST is an array containing record references that are not known to have been delivered previously to the device as represented in the device Master. If block determines there were no new hits NEWHITLIST is empty then block sets PGLOADED True if applicable from Delivery Manager user interface processing so the next device heartbeat can be processed then processing terminates at block . If block determines there were new hits NEWHITLIST is not empty then block invokes Master Page processing with the NEWHITLIST for highlight in case field is set to Yes. Processing then terminates at block . When Master Page processing is invoked it is invoked to execute within the lower frame e.g. frame section or . The user can manage the device Master to control what is determined a new deliverable content item for the device. There may have been an empty HITLIST as passed from processing and checked at blocks and in which case processing continues to block for no updating then to block and then to block where the NEWHITLIST would also be empty. Block does nothing if processing was invoked with a device heartbeat without processing.

In the preferred embodiment block gathers joined records including records from privilege assignments Groups Table PingPal Privilege Assignment Table Registry Table DCDB Table to determine which users and or device s in other embodiment have been granted the Set PingSpots privilege by the particular device of processing then which users and or device s in other embodiment have been granted the Set PingSpots privilege by the Owner owner field of the device of heartbeat processing. All PersonIDs are put into a PRIVILEGEDLIST array which contains eligible users who can configure PingSpots for this device. Another embodiment of PRIVILEGEDLIST would be a two dimensional array with each member having two fields a type field user or device and a record identifier field PersonID or RegistryID .

Thereafter block builds a query to records for PingSpots configured i.e. EntryType field set to S for PingSpot with a matching situational location of this particular device of heartbeat processing and that are owned by a privileged account e.g. AuthID field contains a value in the PRIVILEGEDLIST array . Block then opens a cursor for any resulting PingSpot records found. Note that block does exactly what block does except PingSpots are being queried for the device situational location rather than DCDB records and only PingSpot records which are maintained by privileged users are candidate for delivery. Processing continues to block . If block determines no PingSpot records were found then processing terminates at block . If block determines one or more records were found matching the device situational location then block gets the next or first record of the open cursor. Thereafter if block determines the last record of the cursor was processed then processing terminates at block otherwise block adds the particular record DCDBID field to the HITLIST array and processing continues back to block for the next PingSpot record .

In the preferred embodiment block gathers joined records including records from privilege assignments Groups Table PingPal Privilege Assignment Table Registry Table DCDB Table to determine which users and or device s in other embodiment have been granted the Set Pingimeter Arrival Alert or Set Pingimeter Departure Alert privileges by the particular device of heartbeat processing then which user s and or device s in other embodiment have been granted the Set Pingimeter Arrival Alert or Set Pingimeter Departure Alert privileges by the Owner owner field of the device of heartbeat processing. All PersonIDs and or RegistryIDs are put into a PRIVILEGEDLIST array which contains eligible candidates that can receive automated status alerts for the device of heartbeat processing. Another embodiment of PRIVILEGEDLIST would be a two dimensional array with each member having two fields a type field user or device and a record identifier field PersonID or RegistryID .

Thereafter block builds a query to records and for Pingimeters configured with a matching location or situational location of this particular device of heartbeat processing and that the current date time is valid for in Timeframe field and that are owned by a privileged account e.g. OwnerID field contains a value in the PRIVILEGEDLIST array . There can be an OwnerID type field for determining whether the owner of the Pingimeter is a device or a user. Records are preferably outer joined to records to retrieve all Pingimeter record s associated to a record . Block then opens a cursor in context for a record being a single unit of data including record and all its associated records . Processing continues to block . If block determines no Pingimeter records outer joined to were found then processing terminates at block . If block determines one or more records were found matching the device situational location then block gets the next or first record of the open cursor record and all associated records treated as a single record for processing in flowchart . Thereafter if block determines the last record of the cursor was processed then processing terminates at block otherwise processing continues to block .

Block queries the most recent records from the Trail Table for the device of heartbeat processing. The query includes specifying records with a DTCreated field value up to the current date time and no older than a trailing period as specified by a website configuration TIMLENGTH value. The TIMELENGTH value for example 20 minutes governs preventing of redundant alerts to the same Pingimeter owner for the same device while at the same time providing a time window to determine whether the device is arriving or departing the Pingimeter. Blocks and prevent repeated redundant alerts according to the TIMELENGTH window of records returned at block . Another embodiment could maintain a history of alerts sent at block so redundant alerts would not be sent. For example the history would record all data about the alert to uniquely identify the alert and to assign the historical record of the alert an expiration according to TIMELENGTH so that when the history information expired only then would block send the same alert again in the absence of a duplicate historical alert record i.e. all governed by TIMELENGTH .

Block continues to block where the current Pingimeter record from block is examined with respect to a most recent record from block not record from current heartbeat processing after determining a middle of the Pingimeter. In one embodiment extents are used of the outermost vertices or radius with arithmetic of dividing by two for a reasonable middle point or for a member of a determined set to average for a reasonable middle point. Once a reasonable Pingimeter middle is determined the most recent record not record from current heartbeat processing is compared to see if the device is traveling toward or away from the middle. Thereafter if block determines the device is traveling toward the Pingimeter middle i.e. arriving then block checks all records returned from block to see if all are contained in the Pingimeter over TIMELENGTH . Thereafter if block determines all records are from within the Pingimeter processing continues back to block for the next Pingimeter to process. Block decides that if the device has been in the Pingimeter for all of TIMELENGTH then an alert was already sent. If block determines at least one record was not in the Pingimeter then processing continues to block . If block determines the Pingimeter AlertType field I E B is for arrival or both arrival departure alerting then processing continues to block which is described below. If block determines the Pingimeter AlertType field I E B is not for arrival or both alerting then processing continues back to block .

If block determines the device is not moving toward the Pingimeter middle then processing continues to block . If block determines the device is moving away from the Pingimeter middle then processing continues to block . Block checks all records returned from block to see if all are contained in the Pingimeter over TIMELENGTH . Thereafter if block determines all records are from within the Pingimeter then processing continues back to block for the next Pingimeter to process. Block decides that if the device has been in the Pingimeter for all of TIMELENGTH then a departure alert is not relevant. If block determines all records are contained in the Pingimeter except only the one most recent one is outside the Pingimeter then processing continues to block . If block determines the Pingimeter AlertType field I E B is for departure or both arrival departure alerting then processing continues to block which is described below. If block determines the Pingimeter AlertType field I E B is not for departure or both alerting then processing continues back to block .

Block determines the alert method from field and gathers related data if needed. Thereafter block builds and sends an alert message with enough information to distinguish one alert from another and to provide an informative message. Block then continues back to block . If block determines the device is not departing then processing continues to block . A performance conscious embodiment of block may query the records one time for all loop iterations on Pingimeters that start at block . A performance conscious embodiment will analyze those records one time for all loop iterations on Pingimeters that start at block e.g. processing at blocks . Block will use record fields as described in the record description for appropriate alerting.

In the preferred embodiment block gathers joined records including records from privilege assignments Groups Table PingPal Privilege Assignment Table Registry Table DCDB Table to determine which devices and or users have granted each other the Set Nearby Arrival Alert or Set Nearby Departure Alert privileges including the particular device of heartbeat processing as one side of the privilege assignment then which devices and or user s have granted each other the Set Nearby Arrival Alert or Set Nearby Departure Alert privileges including the Owner owner field of the device of heartbeat processing as one side of the privilege assignment. All RegistryIDs are put into a PRIVILEGEDLIST array which contains eligible devices that can receive automated nearby status alerts for the device of heartbeat processing. Another embodiment of PRIVILEGEDLIST would be a two dimensional array with each member having two fields a type field user or device and a record identifier field PersonID or RegistryID . Block assembles privilege results into the PRIVILEGEDLIST array as records for subsequent processing and initializes a pointer to the first record. Processing continues to block . If block determines no complementary same to each other privileges were found then processing terminates at block . If block determines one or more records were found with complementary Set Nearby Arrival Alert or Set Nearby Departure Alert privileges assigned to the device of heartbeat processing and from the device of heartbeat processing to the device in the record s found at block then block gets the next or first complementary device record and processing continues to block . If block determines all complementary privileged device records have been processed then processing terminates at block otherwise processing continues to block .

Block queries records for the device at the record accessed at block and for the device of heartbeat processing and retrieves all records over a website configured time of TIMEPERIOD for example 20 minutes. This TIMEPERIOD constant may or may not be the same as discussed above for Pingimeter processing. Thereafter block analyzes the records returned at block and compares situational locations of records of the complementary privileged device with the situational locations of records of the device of heartbeat processing and the situational location of the device heartbeat situational location causing execution of . Then if block determines the two devices were already nearby each other during the trailing TIMEPERIOD as found in records then processing continues back to block for the next privileged device. If block determines the devices were not nearby each other during the trailing TIMEPERIOD then block determines an alert method based on the privileges assigned to each other the analysis of block and the preferences of records for both nearby devices as configured in fields through . Then block sends a nearby alert to both devices and processing continues back to block .

The TIMEPERIOD value governs preventing of redundant alerts while at the same time providing a time window to determine whether the devices are arriving or departing nearness. Blocks and prevent repeated redundant alerts according to the TIMEPERIOD window of records returned at block . Another embodiment could maintain a history of alerts sent at block so redundant alerts would not be sent. For example the history would record all data about the alert to uniquely identify the alert and to assign the historical record of the alert an expiration according to TIMEPERIOD so that when the history information expired only then would block send the same alert again in the absence of a duplicate historical alert record i.e. all governed by TIMEPERIOD . Artificial intelligence is preferably implemented at block for proper analyzing of a nearby status for newly becoming near or just departing from being near. A critical component for designating the meaning of nearness is the IntRadius field for one of or both of the devices. Block uses mobile interest radius information. The moving interest radius can be used out of the record s or overridden by use of the Delivery Manager by one or both devices. With reference now to shall be discussed in context for nearby status embodiments as implemented at block . A first device situational location is not nearby a second device situational location until first device situational location is within the moving interest radius of the second device situational location . In another embodiment a first device situational location is not nearby a second device situational location until the moving interest radius of the second device situational location intersects with moving interest radius of the first device situational location. In another embodiment a first device situational location is not nearby a second device situational location until second device situational location is within the moving interest radius of the first device situational location .

If block determines all Master records are processed then processing continues to block discussed below. If block determines there is another record to process then processing continues to block where a Boolean variable GOTNEWHIT is set to False and the NEWHITLIST array is iterated through to check for the presence of DCDBID field joined to DCDBID field . NEWHITLIST contains the DCDBIDs which were not already contained in the device Master i.e. new deliveries . Thereafter if block determines the DCDBID was found in NEWHITLIST then block sets the variable GOTNEWHIT to True and then determines applicable delivery indicators. Block determines applicable delivery indicators by 

1 Querying a record joined to associated record on IndicID fields and wherein Type field is for DCDBID and RecID field equals the DCDBID of the joined record from block being currently processed. If no record is found then the DCDBID content item has no associated Delivery Indicator and the default indicator is set to NONE i.e. null . If a record is found then the default indicator is set to a pointer to the record data found. 2 Querying all records joined to associated record on IndicID fields and wherein Type field is for RegistryID and RecID field equals the RegistryID from the record for the device of heartbeat processing. The query is to order records according to Ordr field . If no record is found then the device of heartbeat processing has no associated Delivery Indicators defined and a prioritized device indicator list is set to NONE i.e. null . If one or more record s is found then the prioritized device indicator list is set to a pointer to the highest prioritized indicator record in the list. 3 If steps 1 and 2 find no indicators then block sets the best match delivery indicator to NONE. If step 2 finds no indicators then block sets the best match delivery indicator to the record found at step 1. If step 2 finds one or more indicators then each is processed in the priority order using Criteria field just as interests field is used to match to a record . Another embodiment of criteria field permits filters and or interests like filters field and interests field for matching to the record or another embodiment maintains a separate configurable filters field for comparison. If Criteria field is null then that indicator is used. If an indicator is found for being applicable to the record then the best match delivery indicator is set to that delivery indicator record. If no best match is found from the device indicators and an indicator exists from step 1 the step 1 indicator becomes the best match delivery indicator.

When block continues to block the best match delivery indicator is either set to NONE or is set to the best matching delivery indicator record . The best match delivery indicator record fields and preferably override the analogous fields and respectively of the record of the device of heartbeat processing. Another embodiment of records could also include fields analogous to fields and for overriding the addresses to deliver to. Block ensures any overriding of record with best match delivery indicator fields is performed before continuing to block .

If block determines the BrowseRcpt field of record or overridden is set to Yes then block builds a row of output of record from block for browser delivery according to the device and or browser type and according to the Verbose field . Some subset of row fields is highlighted if GOTNEWHIT is set to True to indicate a new item in the Master. Preferably the Pushed date time stamp is highlighted for the user to see that field. The SpeedRef field is to be handled in accordance with the device receiving that field. For example a web page browser link should be invocable with a surrounding anchor tag e.g. . . . to be a user invocable link in a new window target  blank an auto dial phone number should be encoded for auto dialing from the cell phone or PDA device etc. The SpeedRef field is treated in context for the device type as well as the intended use of automatically transposing the user to another data processing system or automatically communicating with another data processing system upon user invocation selection . Block then continues to block . If block determines the BrowserRcpt flag is not set to yes then processing continues to block .

If block determines GOTNEWHIT is not set to True then processing continues back to block for the next joined record to process. If block determines GOTNEWHIT is set to True then processing continues to block . If block determines the EmailRcpt field is not set to Yes then processing continues to block . If block determines the EMailRcpt field is set to Yes then block builds or adds to an email body construction in progress and continues to block . Only records which are not existing in the Master at the time of delivery processing are preferably communicated by email to prevent redundant deliveries. If block determines the SMSRcpt field is not set to Yes then processing continues to block . If block determines the SMSRcpt field is set to Yes then block builds or adds to a small SMS message body construction in progress and continues to block . Only records which are not existing in the Master at the time of delivery processing are preferably communicated by SMS message to prevent redundant deliveries. If block determines another device dependent delivery mechanism is not set to Yes then processing continues to block . If block determines the device dependent delivery mechanism is set to Yes then block builds or adds to the appropriate encoding and continues back to block for the next joined Master record.

Block preferably overrides any delivery bodies built at blocks and with a best match delivery indicator from a record that may have been found at block assuming an indicator is applicable for example when field is set to Yes . If no best match delivery indicator was found then block continues directly to block . If block determines the EmailRcpt field is not set to Yes then processing continues to block otherwise block completes the email body constructed at block sends it to the EMailAddr field and processing continues to block . If block determines the SMSRcpt field is not set to Yes then processing continues to block otherwise block completes the SMS message body constructed at block sends it to the SMSAddr field and continues to block . Block handles sending a distribution appropriately if another delivery mechanism was set to Yes as built at block . Block also completes building of the browser page to return to the device if BrowseRct is set to Yes. Block completes building the page according to the device or browser type and sends it back to the user before continuing to block where processing terminates. The PGLOADED variable is also set to true at block if the invoker of processing was processing of and associated user interfaces.

Fields and are appropriately dealt with according to CType field and the device type and or browser type of processing for appropriate presentation and delivery to a device. Compress field is preferably used at any of blocks and to ensure the content is compressed before sending it to the device. The compression algorithm type can be of a variety available for use according to receiving device type and or deliverable content type. The IndicOnly field or IndicOnly field is used to force delivery of a delivery indicator in which case a system default indicator will be used in the absence of one determined at block . The BrowseRcpt SMSRcpt and EMailRcpt fields used at blocks and are from the record field of the device of heartbeat processing or as overridden at block . A performance conscious embodiment of block will process the device indicators one time and make them available for all subsequent accesses at block to prevent unnecessary I O at block . The Verbose field is used at block and is preferably never used at block . SMS messages should be small in size. Blocks and or can enforce a website configuration maximum size and may summarize the deliveries to accomplish that. Blocks and can enforce a maximum size also and may send a replacement distribution in place of a delivery deemed to be too large for a particular device. A best match delivery indicator can be implemented for delivery to a device browser and or email address and or SMS address and or other delivery mechanism as is seen fit for the type of indicator its content lengths and a particular embodiment of . The BrowseRcpt field will variably define whether or not a device browser is to receive back delivery information. Various embodiments of may ignore a field for detection of certain device types may always obey a field even if a browser is detected at the device or may variably process a field depending on content to return the device type the browser type settings in other fields of record settings in fields of record settings in fields of record or in accordance with any server data .

Record fields not specifically described in the furthest detail of processing for records AND fields of other records joined to records or AND fields of web service records related to records or ARE to be understood as described in their detailed descriptions of the record fields and are appropriately integrated into the processing described for and related associated processing.

Absence of parameters preferably indicates a null or No setting for fields of record . This device has interests of sale and wants deliveries to be made to only an email address of williamjj yahoo.com. The r parameter is preferably a handle for subsequent processing. Now that validated the device credentials and provided its record configs the device or service can send heartbeats after adding remaining parameters for processing for example situational location parameters such as latitude longitude speed heading elevation etc. processing is invoked from a GUI as described starting at or with the command line started as returned from processing after adding situational location parameters for each heartbeat invocation of . Frames and separate pages are not relevant in command line invocations. can be reviewed in terms of its functionality without regard for a GUI frames pages browser settings browser checks or any other description associated with the device GUI or browser. A single processing thread up through single process return is assumed. An ASP source code listing embodiment of processing which exemplifies use for subsequent command line heartbeat processing by command line invocation is included as CD ROM file name gsec.asp . CD ROM file name gseclog.asp provides an ASP program source code listing for an embodiment of .

The moving interest radius and other configurations and processing are the same. This allows users to set up proactive searches that stay running until applicable active content record s are available and meet situational location criteria. Current search engines provided by google.com yahoo.com icerocket.com etc search for information only at the moment the user conducts the search google.com yahoo.com and icerocket.com are trademarks of the respective companies . The present disclosure enables a user to conduct a search that keeps on searching into the future until sought information become available called a proactive search . The user is not burdened with repeated entering of the same search criteria over a period of time until sought information is found remembering search criteria needed to find information that has not yet been found nor manually searching for information that isn t available yet until sometime in the future. The user can specify situational location information one time and have it used in automatic periodic searches into the future for as long as he wants.

In one example the user wishes to find a rare antique which is not yet available for example from an auction site such as ebay.com. With the user specified location interface the user specifies location information and an interest radius along with interests for the rare antique description information. From that point on the search periodically takes place into the future according the server check frequency. Deliverable Content data whether it be locally maintained to web service or remotely accessed as needed can be accessed and delivered to the user when available. Web service preferably accesses the eBay database yahoo databases google search source databases and many other databases for deliverable content over the internet. Web service is vendor neutral in supporting many and any databases or data sources hopefully for maximizing the user s chance in finding the rare antique at some time in the future.

User specified situational location information section provides the user with many options that are analogous to those which were discussed above for DCDB management. A radio button is specified by the user for Location By processing. Button is analogous to button . Dropdown is analogous to dropdown . Processing upon selecting button is identical to button except user specifications returned from processing are used to set Latitude and Longitude read only information at area at the bottom of section with possible right margin information also displayed there. So even though the radio button is not selected for area of section information for the Select on Map button processing is displayed to area for informative purposes as is information from selection of button . Pre translation criteria is analogous to pre translation criteria menu . The only difference is there is no button required. Selecting button will validate specifications and then perform identical processing as if a button was selected. The resulting geo translated data is then communicated to subsequent processing. Button is analogous to button . Button causes processing as already described. The user specified decimal degrees are converted and area is used to show the resulting values in a different form. The Device radio button and Phone radio button are also analogous to as described above. The resulting location information is passed to subsequent processing upon invoking button .

A description field enables the user to specify a description for the user specified situational location search for naming the search for easy identification since many user specified situational location searches can be made active simultaneously for even a single user and many proactive searches are maintainable for a user of web service . Proactive search method dropdown can be selected by the user for where the search thread is executed for conducting the proactive search local to the device Driven By Client or at the server Driven By Server . Various embodiments may enforce one or the other option. When driven by the client the Delivery Manager heartbeat functionality is driven from the device for example by a browser interface as already described or an interface which invokes processing minus blocks directly as was already described. The device interfaces to web service by way of an internet connection or other suitable communications method. When driven by the server a thread is spawned at web service or at a system in communications with web service for periodically sending heartbeats on behalf of the device with the user specified location information to processing minus blocks . Server search expiration entry field allows the user to specify a date time stamp e.g. Jul. 17 2005 in the future for when the search thread or Delivery Manager is to stop sending heartbeats to processing minus blocks . No specification to entry field indicates no expiration thereby forcing the user to terminate processing manually at some time in the future. Expiration processing is preferably checked for at a new block after block where an expiration detected causes processing to continue to a new block where variables are set to indicate processing is terminated and then on to block as already described. The user specified expiration at entry field is passed to subsequent processing as data evidence. Check box field indicates whether to add this user specified situational location search to the user s list of outstanding proactive searches when check marked . The user can manage all outstanding proactive searches at link .

Records are created added with when the check mark is placed at check box . When the check mark is present upon selection of button then the search is preferably performed asynchronously without display of a Delivery Manager user interface and processing takes the user to the same interface of link . If a check mark is not present then a Delivery Manager user interface is presented to the user as though no other proactive searches are active which may be and block does not add the proactive search requested to the proactive search list managed through link . Link takes the user to a list interface similarly discussed for other record types above wherein the list of pending proactive searches for the user if any are presented to the user can be paginated and check marked for action. Preferably there is a website enforced maximum number of pending proactive searches per user and or per device so no search criteria interface needs to be provided however a search interface prior to listing entries may be provided . So users can list their current proactive searches with a standard display of fields including at least the Descript field and ActiveEntry field . Users can delete view or modify a record or delete view or modify a plurality of records as discussed above for other record types e.g. 2900 6500 7000 etc . When a proactive search record is modified an associated executable search thread may be terminated and a new one started for example if ActiveEntry field is set to Yes and Expire field has not already expired. Modifying field provides the user with control for starting or terminating proactive search threads. In one embodiment modifying other record fields causes an associated executable proactive search thread to be terminated and restarted automatically with new values. In another embodiment the user must manually terminate the thread by modifying field to No and then back to Yes for restarting with new values. In any case records can be maintained by a user regardless of whether there are associated active executable threads issuing heartbeats to processing minus Share Pingimeters and Nearby processing as discussed above . This way the user can manage activating or deactivating any in his list as desired while changing any record fields to configure a particular search. Various embodiment will support drill down from any field of record .

When ProSrchMeth is set to S Driven by server communications is managed to the data processing system server which is executing a proactive search thread when ActiveEntry field is set to yes for starting or terminating the thread at the service. In a UNIX embodiment an INETD.CONFIG configuration allows communicating to an ip port for spawning a proactive search thread or terminating the thread at the service or at a server in communications with the service . In a Microsoft Windows environment a service program may already be started for responding to ip requests for starting or terminating a proactive search thread at the data processing running the Windows service. In another Windows embodiment Remote Procedure Call RPC functionality is employed for enabling or disabling remote proactive search threads. There are potentially millions of proactive search threads executing on behalf of users or devices so preferably the threads are compiled and linked executable code to keep code size small and efficient. One embodiment will utilize U.S. Pat. No. 5 938 722 entitled Method of Executing Programs in a Network by Johnson for deploying mass numbers of threads to a network rather than to specific machines. This takes complexities out of managing the proactive search threads across a plurality of data processing systems on behalf of large masses of users. So web service will execute a plurality of proactive search threads on behalf of users to web service or devices communicating to web services wherein each proactive search thread is configured to search for data into the future until the user terminates it or its execution expires in accordance with a user configuration. Any data can be searched any database or external data source is supported as described above and searches are in context for many different applications.

When ProSrchMeth is set to C Driven by client communications is managed to the local data processing system e.g. device which is executing a proactive search thread when ActiveEntry field is set to yes for starting or terminating the thread at the device. In one browser embodiment pages are served back to the device and Active X is used to interface to the operating system for managing local proactive search threads. In another embodiment Javascript and or Java applets are used to interface to the local device operating system.

In one embodiment a user selects a route on a map much like the plotting of routes on a map by . The user can specify a sequence of ordered points to define the route or draw a line on a map which is used to generate a sequence of data points for a route. An elevation speed and any other situational location information can be specified. In another embodiment the user enters time points for applicable points of simulate travel in the proactive search capability. Regardless of embodiment the user is provided with means for specifying one or more situational locations together with useful search criteria such as interests filters etc for conducting content or information searches into the future without further user interaction. Once sought data is found in the future the user or device is appropriately notified of the content or information found.

A device can use processing and a GUI less driven version of processing for heartbeats thereby preventing any use of GUI objects at all. The browser versions of the Delivery Manager can of course be executed in a window simultaneously while other applications are running. The window embodiment can be minimized so the user does not need to know its running. The non GUI thread versions of the Delivery Manager regardless of how driven can also be executed simultaneously to other applications.

PingSpots situational locations of DCDB records and Pingimeters can be three dimensional regions. The three dimensional regions are three dimensional areas in space which deems a delivery for mobile devices that travel through or near e.g. in accordance with their interest radius the three dimensional area in space. A three dimensional region will require at least one point in three dimensional space for example as an origin. That point can be specified as a point in a x y z plane a point in polar coordinates or the like perhaps the center of a planet e.g. earth or the Sun some origin in the Universe or any other origin for distinctly locating three dimensional regions in space. The situational location of the device or of the content can be just the point in three dimensional space. A three dimensional situational location larger than a point such as a three dimensional region in space will need at least a three dimensional point as described and perhaps a radius from a center point for representing a sphere. is easily discussed in terms of situational location points and interest radius spheres when considering a three dimensional embodiment. A three dimensional embodiment may include a rectangular region in space where all rectangle vertices are represented by x y z coordinates with a three dimensional point for an origin of reference. A rectangular region can be represented by one or more mathematical curves or some other means for defining the region in space. Elevation e.g. for earth or some other planet use may be useful to the three dimensional point of origin and or for the three dimensional region in space. An unusual region in space can also be specified with connecting x y z coordinates together to bound the three dimensional region in space. There are many methods for representing a three dimensional region in space without departing from the spirit and scope of this disclosure. Users with their devices can travel by plane through three dimensional regions situational locations in space for deeming a delivery in context with descriptions above. Users with their devices can travel under the sea through three dimensional regions situational locations in space for deeming a delivery in context with descriptions above. Users with their devices can travel around earth through space or to other planets through three dimensional regions situational locations in space for deeming a delivery in context with descriptions above. Users with their devices can travel anywhere in the universe through three dimensional regions situational locations in space for deeming a delivery in context with descriptions above.

Application specific data fields are available for the SDPS being an integrated solution with some other service. Location information regardless of a two dimensional point or area embodiment or three dimensional point or region embodiment direction information time criteria information and delivery activation setting s information together with application specific data fields any fields of any records of web service any configuration information criteria or attributes of devices content or environments form the situational location information associated with the content which establishes a delivery.

When the user authenticates to the Delivery Configurator he is setting the Delivery Configurator Assignor s for preferences discussed below. When the user authenticates at block with an account logon name and password user account credentials he accesses the Delivery Configurator for configuration on behalf of that user account i.e. all devices as well as any other user accounts or devices the account has an Affinity Delegate privilege granted assigned from as a User to User assignment Device to Device assignment User to Device assignment or Device to User assignment. When the user authenticates at block with device credentials device s id password he accesses the Delivery Configurator for configuration on behalf of that particular device as well as any other devices he has an Affinity Delegate privilege granted assigned from as a User to User assignment Device to Device assignment User to Device assignment or Device to User assignment. In one embodiment hosting device data evidence or successful logon data evidence is compared with privileges assigned to enable an automated Delivery Configurator authentication and or to prevent logging on directly with someone else s credentials. When the user authenticates with group credentials he accesses the Delivery Configurator for configuration on behalf of all users and devices contained in the group. Recall that a privilege e.g. Affinity Delegate can be assigned granted from a user to a user from a user to a device from a device to a device and from a device to a user. The context brings relevance to the privilege assignment depending on the privilege.

Block determines the authentication type requested i.e. by user logon name by device Deviceid or by group group name and validates the entered credentials before continuing to block . The Users Table record Registry Table record or Groups Table record will be interrogated depending on the Delivery Configurator authentication type. Block never continues to block until user entered credentials are validated as successful. In a preferred embodiment block will enforce a maximum number of authentication attempts. After a maximum number of unsuccessful attempts the user s successful logon data evidence can automatically be expired as if logout option was performed. In the device embodiment the device data evidence can be automatically expired. The user s applicable record or can also be deactivated as though it does not exist ActiveUser field set to no ActiveDev field set to No . An email may also be sent to an administrator account and or the user to notify that his account or device has been disabled. Preferably automated processes support reactivating the user account at a later time. Upon successfully entered credentials if block determines a group authentication was requested then block sets the Configurator Assignor s as all users and their devices which are members of the group accesses Groups Table Users Table Registry Table PingPal Privilege Assignment Table otherwise block sets the Configurator Assignor s to the user account all the user s devices or device account used to authenticate to the Configurator. Block will additionally determine which users and devices have assigned the Affinity Delegate privilege to the user or any of his devices when authenticating with user account credentials queries Groups Table Users Table PingPal Privilege Assignment Table for additional candidate Configurator Assignor s . Block will additionally determine which users and devices have assigned the Affinity Delegate privilege to the device when authenticating with device credentials queries Groups Table Users Table PingPal Privilege Assignment Table for additional candidate Configurator Assignor s .

Thereafter block initializes in process configurations variable s to Assignor s set at block or user group or device . If a device was specified at block then the Assignor s can be plural and includes that device as well as any devices and users which have granted the device the Affinity Delegate privilege. If a user was specified at block then the Assignor s can be plural and includes the user equivalent to all user s devices and each of the user s devices as well as any devices and users which have granted the user or any of his devices the Affinity Delegate privilege. If a group was specified at block then the Assignor s can be plural and includes the group name equivalent to all user member devices each user of the group equivalent to all the particular user s devices and each of the group member user s devices. The Assignor s in any case includes the group name string entered at block and the id PersonID RegistryID or GroupID of the associated record in server data along with each user LogonName and or device name string as described above associated with its record id. In an alternate embodiment block can use the Affinity Delegate privilege in a similar manner to block for discovering additional Configurator Assignor s which have granted the Affinity Delegate privilege to members of the group. The Assignor s are used to automatically populate dropdowns and of A and B. Assignor s determined through having granted the Affinity Delegate privilege are preferably distinguishable such as in the form discussed with above i.e. JB345 johnsPDA and JB345 ALL DEVICES .

Block then initializes last saved configuration s variable s by querying all users and or devices which have granted the Share Delivery Experiences and Intercept Delivery Experiences privileges to the Assignor s as described above for assigning these privileges from user to user device to device device to user and user to device as is appropriate for Assignor s specified at block and determined further at block and at block in the alternate embodiment of setting Assignor s to all users and devices with Affinity Delegate privileges granted to members of the group . The Groups Table Users Registry Table and Privileges Assignment Table are queried appropriately. The users and or devices which have granted either of the two privileges to the Assignor s are used to automatically populate dropdowns and of A and B and are referred to as Configurator Assignee s . Block then uses the Assignor s and Assignee s to query the Configurator Assignments Table for applicable records . Records found are used to automatically populate configurator preference assignment lists of A and B. The Assignor s Assignee s and records are populated to the appropriate user interface by block when tabbed to by the user. Block additionally sets in process configurations variable s to last saved configurations variable s so current Delivery Configurator interfaces are reflective of what is in process.

Thereafter block sets a user interface for a Delivery Configurator user interface such as preferably spawned as a new user interface i.e. target  blank block determines if a software upgrade exists for the user s device invoking the Delivery Configurator and sets the upgrade button as enabled or disabled accordingly before continuing to block .

Block preferably checks the client software version of the device whereon the user selected option for processing with the latest available software from web service . Client software is used to maintain a local cache of deliverable content. Client software can also be resident on the device for example as used by a WAP device cell phone which does not use a browser to invoke heartbeat processing with situational location heartbeats. The heartbeat driving software can be downloaded to the device so the user is appropriately informed if a later version exists. An executable date time stamp version information maintained in persistent memory means e.g. file or any reasonable method for determining an application version can be used to determine the version of software installed at the device. After block checks the device software version the web service is queried to see what the latest version is for the particular device or the web service latest version can already be made available in the user interface for use when served back to the client from web service . A server side date time stamp version information maintained in a separate file an SQL query to server data or any reasonable method for determining an application version can be used to determine the version of software most recent for download from the server. Based on a comparison of the software version at the user s client device and software available from the web service button is appropriately enabled or disabled for the particular device. Different software versions can be maintained at web service for different devices and or different operating systems on the devices. For devices which use a completely browser based Delivery Manager button is enabled or disabled based on version information of applicable local cache management software if any installed. Various cache management embodiments may use a browser based user interface with File System Object interfaces e.g. VBScript FileSystemObject to the operating system Active X interfaces to local device resources or any reasonable browser based interfaces to resources of the local device for maintaining local cache information.

Thereafter block presents or refreshes the applicable Delivery Configurator user interface context A or B in accordance with the most recent settings of the in process configurations variable s made by the user to the Delivery Configurator user interfaces or as initialized at block . The in process configurations variable s always contain most recent configurations made by the user to any interfaces of and A through B and represent user action results to the user interfaces. The user interfaces of and A through B display in correlation to user configured in process configurations variable s . Thereafter block monitors for user actions also called user events and waits until one is detected to the currently displayed Delivery Configurator user interface A or B . When a user action is detected processing continues from block to block where User Action Trigger processing is invoked and returned from before continuing to block . Block checks for which action was performed by the user. If block determines the user selected to Save his configurations selection of buttons then block performs Save Configurations processing and processing continues back to block . If block determines a save action was not selected by the user then block checks for a cancel action. If block determines the user selected to Cancel Configurations selection of buttons then block discards values of in process configurations variable s to the initialized state of block and resets in process configurations variable s to last saved configurations variable s . Saving Configurations makes user configurations persistent throughout subsequent processing. Canceling effectively does an UNDO back to the last save. Delivery Configurator configuration can be complicated and it is therefore desirable to be able to go back to a known set of good configuration information. Other embodiments will not permit a cancel undo action and other embodiments will allow an undo action for each individual configuration made over a history of interfacing to the Delivery Configurator user interface. Block continues to block for providing a status preferably a pop up user interface for letting the user know he just cancelled all configurations performed up until the last save. The user must acknowledge the status preferably clear the pop up before block continues back to block . If block determines a cancel action was not selected by the user then block checks for a close or exit action. If block determines the user selected to close or exit the current user interface then block terminates the active user interface context user interface A or B and Delivery Configurator processing terminates at block . Exit or close processing can be selected from the File pulldown or from the rightmost topmost close option of a window. The user must have saved configurations otherwise any in process configurations variable s will have been lost. Other embodiments can automatically save upon close or exit rather than doing an effective quit with or without a prompt to save. If block determines a close or exit action was not selected by the user then block checks if the user selected to maintain options e.g. from the Options pulldown . If block determines the user selected to maintain options then block performs options processing and continues to block . Options processing includes setting variables related to Delivery Configurator configurations for governing associated processing e.g. define alert methods or define situational location criteria used in deliveries . If block determines an options configuration was not selected then block checks if the user selected a tab e.g. any of tabs through . If block determines the user selected a tab then processing continues to block where the corresponding interface is displayed with in process configurations in effect. Selection of tab from any of the Delivery Configurator user interfaces results in a display such as . Selection of tab from any of the Delivery Configurator user interfaces results in a display such as . Selection of tab from any of the Delivery Configurator user interfaces results in a display such as . Selection of tab from any of the Delivery Configurator user interfaces results in a display such as . If block determines a tab was not selected then block checks the active tab to perform action processing in context for a tab.

If block determines the cache tab is active then block performs cache management processing to handle specific actions associated to and then processing continues to block . If block determines the cache tab is not active then block continues to block . If block determines the content tab is active then block performs content delivery management processing discussed in context for content delivery management processing to handle specific actions associated to and then processing continues to block . If block determines the content tab is not active then block continues to block . If block determines the alerts tab is active then block performs alert management processing discussed in context for alert management processing to handle specific actions associated to and then processing continues to block . If block determines the alerts tab is not active then block continues to block . If block determines the actions tab is active then block performs actions management processing discussed in context for content actions management processing to handle specific actions associated to and then processing continues to block . If block determines the actions tab is not active then block continues back to block .

If block determines upgrade system button was selected then processing continues to block where a warning prompt is presented to the user that any in process configurations which have not been explicitly saved shall be discarded. The user must select continue or cancel from the prompt. Thereafter if block determines the user selected to cancel then processing continues to block where the warning prompt is removed and then to block . If block determines the user confirmed to continue then processing continues to block where device software is downloaded and installed to the device based on device and or device type along with instructions if necessary . A device reboot or power on off cycle may be required to activate the upgraded software. In one embodiment GPS interface software is upgraded automatically with this mechanism for downloading to the device to prevent the user from manually requesting a subset of needed upgraded software to the device. If block determines upgrade system button was not selected then processing continues to block . If block determines refresh cache button was selected then block communicates with web service for checking the device CacheUpdate field to see if the device has pending DCDB data to deliver to the device local cache based on mobile travels. A record with a RegistryID field that matches RegistryID field for the device is used. The device is determined by a last access to the Delivery Manager device data evidence authentication to the Delivery Configurator or automatically by the Delivery Configurator. Thereafter if block determines the CacheUpdate field is set to Yes then block updates the device local cache with the DCDB not yet delivered to the device updates the CacheUpdate field flag for the device to No and processing continues to block . CacheUpdate field is set by web service Delivery Manager processing for content destined for a device which is held back from delivery until such time the device local cache is updated. In one embodiment processing checks record for a device and maintains a pending list of content references DCDBIDs for later delivery when the device local cache is to be updated. If block determines the device CacheUpdate field is set to No i.e. no pending DCDB data to refresh cache with then processing continues to block . Block provides a status preferably a pop up to the user that his DCDB local cache has been updated. The status requires the user to acknowledge it. Once acknowledged by the user block continues to block . If block determines refresh cache button was not selected then processing continues to block . If block determines retrieve DCDB button was selected then processing continues to block where the user is prompted for a source device to retrieve its locally cached DCDB data. Thereafter the user specifies a source device of web service at block and block interfaces to web service for a record for the specified device. The source device is preferably specified by device name Deviceid field so block causes a query for applicable records and with a join on RegistryID fields and using the device name to match to record . Thereafter if block determines the source device specified is shared check if ShareDCDB field set to Yes and there was no error finding the specified device at block then block updates the local DCDB cache of device of Delivery Configurator processing with any differences found in the local DCDB cache of the specified source device and block provides a completion status to the user before terminating processing at block . If block determines the source device specified is not shared or there was an error finding the source device at block then block provides an appropriate error to the user and processing continues to block . If block determines retrieve DCDB button was not selected then processing continues to block where other user actions for this tabbed user interface are processed e.g. window resizing pulldown dropdown click etc and then on to block where processing terminates for return back to processing .

Block may use direct device to device communications for updating DCDB information from one device to the other or may update through the web service . Preferably the list of DCDBIDs at each device is compared to determine a difference before doing the update. Devices can share DCDB data between each other as long as the source device is set for sharing. While the share flag is an all or none in the example i.e. share to all other devices or no other devices another embodiment will provide a new privilege value to maintain in a Groups Table record for sharing DCDB data between devices i.e. Share DCDB . The new Group privilege allows assigning the privilege to specific users or devices through assignment from a user to a user user to device device to device and device to user. The new Share DCDB privilege is maintained in PrivMask field like any other privilege and managed in Groups management interfaces e.g. etc as discussed above. The privilege would then be queried at block Registry Users Groups Privileges Assignment Tables for the devices to validate the privilege has been granted. So cached deliverable content can be shared between devices without restriction or can be restricted using the privileges methodology described above with .

Regardless of how the Share DCDB privilege is managed it allows sharing DCDB data between devices so that content delivered to one device based on its travels can be shared and communicated to another device. Various embodiments will permit examination of the locally cached DCDB data through an appropriate user interface. DCDB data communicated from another device can also be examined and used as applicable for some application on the device which accesses the locally cached DCDB data. In the all or none embodiment described Share DCDB checkbox is kept in field in a corresponding record of web server data . Various embodiments of block will add to the requesting device s DCDB replace the requesting device s DCDB or provide the user with an option for either.

The trickle updates checkbox enables or disables automatically updating the locally cached DCDB data as the device is mobile. In one embodiment DCDB data is delivered based on geographical regions. For example a device travels to one of a plurality of major cities for then receiving an entire Deliverable Content database for maintaining in local cache so deliveries by situational location can occur from local cache thereafter. In another embodiment cell tower range s is used to deliver a locally cached DCDB for content delivery to the device by situational location thereafter while the device is mobile. In one preferred embodiment the device comes within range of a high speed communications link i.e. a hot spot which is an opportune moment to deliver a DCDB for maintaining to device local cache. The DCDB is updated at the device while within range to the high speed communications link. Subsequently content of the locally cached DCDB is delivered to the device by situational location of the traveling mobile device or traveling mobile user . Trickle update checkbox is kept in field in a corresponding record in web server data . Trickle updates checkbox checked preferably puts the device in the mode of looking for high speed hot spots that happen to come within range of the device for downloading DCDB data at the opportune moments. A hot spot is a point of presence for high speed internet connectivity. The maintain locally checkbox determines whether or not to maintain a DCDB local to the device in a cache for subsequent delivery of content contained at the device by the device situational location. Maintain locally checkbox is kept in field in a corresponding record in web server data .

Maintain locally option enables the user to toggle specifying maintaining of the DCDB local to the device or to access it dynamically as needed from the web service . The delivery of DCDB data may perform better being local and may become a personalized copy based on situational locations the device has experienced over time. A trickle updates checkbox enables the user to toggle trickling updates from the web service at real time when DCDB changes are made versus requiring the user to perform a manual refresh. A share DCDB checkbox enables the user to toggle permission to share locally maintained DCDB with other requesting users. This functionality is particularly useful when a locally cached DCDB becomes personalized for the particular device RDPS . An upgrade system button enables upgrading the data processing system programs or control logic of the device for carrying out disclosed functionality. A refresh cache button enables manually refreshing the locally cached DCDB. Refreshing is preferably a modification rather than a completely new download to the device. A date time stamp may be maintained with the cache for facilitating the latest date time stamp of a record in cache to prevent scanning cache every time a refresh is requested.

A retrieve DCDB button enables the user to retrieve the locally maintained DCDB from another device provided the source device has enabled the share DCDB checkbox or required privilege . Data transfer between the requesting device and source device may occur in a variety of methods including over a peer to peer session a datagram session less connection by way of a common SDPS or any other method to accomplish the transmission.

The user interface includes a save button to save any configurations made by the user to the Delivery Configurator application and a Cancel button to cancel any configurations made by the user to the Delivery Configurator application. The save and cancel options are available to all tab contexts. Preferably options provided are forced to enabled or disabled e.g. grayed out when a prerequisite mode is not established. For example maintain locally checkbox disabled causes a graying out disablement of and . When enabled the refresh cache button refreshes differences between DCDB data meant for the device at web service and the current state of locally maintained DCDB data. As situational locations are determined the locally maintained DCDB data is modified automatically to be reflective of what should be maintained there for example by region of locale e.g. physical location state city county Mapsco reference etc vicinity location within cell tower range within hot spot vicinity etc . Trickling updates involves more than just adding. DCDB data is automatically removed added to or modified as needed. Trickling updates preferably occurs as soon as a reasonable communication bandwidth and speed is available such as coming within range of a hotspot or high transmission cell tower cell. As soon as the device comes within range the device establishes authenticated communications with web service for subsequently maintaining the locally cached DCDB data in accordance with the device situational location.

When enabled the retrieve DCDB button may blindly refresh the entire DCDB data meant for the device from web service . The locally cached DCDB data is purged and an associated date time stamp may be established for indicating the latest date time stamp of a record in the locally cached DCDB for an easier comparison for future updates or for trickling updates. cache may be overwritten rather than purged first .

Configurator Assignee s which have granted Assignor s with either the Share Delivery Experiences or Intercept Delivery Experiences privilege are populated to the monitor dropdown according to the current highlighted Assignor s at dropdown . Privileges configuration of are preferably used to grant these two privileges. User logon names and or device names will be populated to the sorted dropdown list according to privileges assigned to the dropdown entry user or device shown. The list can be positioned to by the user entering a prefix string or entire string to monitor entry field . The closest matching prefix or string in dropdown is automatically scrolled to the corresponding sorted entry. The user can also select the down arrow to see scroll and select any entry from the dropdown list. A user can highlight or unhighlight any entry s in the list so as to affect configurations of one or many at the same time. For example holding the key down while clicking with a cursor can highlight multiple entries If an Intercept Delivery Experiences privilege has been assigned then the corresponding user or device of dropdown list is preferably shown in italics to differentiate which users and or devices have assigned which of the two privileges Share Delivery Experiences normal type and Intercept Delivery Experiences italic type . While the Configurator Assignee s have assigned the Share Delivery Experiences or Intercept Delivery Experiences privileges to the Configurator Assignor s that are currently highlighted at dropdown they become assignees to delivery share preferences as described below. A user logon name specified in dropdown list or implies specifying all devices of that user without knowing or caring specifically what devices there are. A qualified user logon name JB345 ALL DEVICES implies a user other than the user using the Delivery Configurator.

The user of the user interface is able to either receive duplicate content deliveries to target device s of dropdown which are sent to the device s selected at dropdown or intercept content deliveries to target device s of dropdown which would have been sent to the device s selected at dropdown . This depends on which of the two privileges were granted. Monitor preference list and target preferences list contains delivery share configurations that can be assigned for criteria used in delivery. The Current Interests delivery share configuration enables disables via checkmark the preference of using the associated device s configured Interests field in order to perform content delivery. Other embodiments will use interests that are user specified group specified or automatically specified based on activities of a device user or group of devices or users. The Current Filters delivery share configuration enables disables via checkmark the preference of using the associated device s Filter field in order to perform content delivery. Alternative embodiments will use filters that are user specified group specified or automatically specified based on activities of a device user or group of devices or users. The Historical Interests delivery share configuration enables disables via checkmark the preference of using the associated device s historical interests in order to perform content delivery. One embodiment of historical interests used includes maintaining a history of Interests field that was used to match to records in order to cause a historical delivery of content. Other embodiments will use historical interests associated with previous content deliveries that are maintained for a user specified group specified or automatically specified based on activities of a device user or group of devices or users. Further still there can be time criteria to scope the range of applicable historical interests. The Historical Filters delivery share configuration enables disables via checkmark the preference of using the associated device s historical content filters in order to perform content delivery. One embodiment of historical filters used includes maintaining a history of filter constraints field that was used to match to records in order to prevent a historical delivery of content. Other embodiments will use historical filters associated with preventing previous content deliveries the filters that are maintained for a user specified group specified or automatically specified based on activities of a device user or group of devices or users. Further still there can be time criteria to scope the range of applicable historical filters. The Keyword History delivery share configuration not shown but can be scrolled to in lists and enables disables via checkmark the preference of using the associated device s historical keyword matches in order to perform content delivery. One embodiment of keyword history used includes maintaining a history of keywords successfully matched perhaps in a system configured trailing time window which were used to cause a historical delivery of content. Alternative embodiments will use a history of keywords associated with previous content deliveries the keywords that are maintained for a user specified group or automatically specified based on activities of a device user or group of devices or users. Further still there can be time criteria to scope the range of applicable historical keywords. The Situational Location delivery share configuration not shown but can be scrolled to in lists and enables disables via checkmark the preference of using the associated device s situational location in order to perform content delivery. This allows content to be delivered to one device for a situational location of another device. It isolates specifying whose situational location s to use for content delivery independently of whose filters interests or applicable keywords are used in determining a content delivery.

When a user interface such as is presented to the user the user typically first selects highlights an Assignor s at dropdown for example device 2144044071 . The user then selects highlights an Assignee s at dropdown for example device 2144034071 . Available Assignee s are those that have granted one or both of the privileges Share Delivery Experiences or Intercept Delivery Experiences . A plurality of Assignor s and or Assignee s can be highlighted and un highlighted for identical preferences configurations. The user can then select preferences on how to share the delivery experience. shows the user has selected Current Interests and Current Filters for both the monitored device 2144034071 and the target delivery device 2144043071 . The monitored device 2144034071 is not in italics so therefore has granted a Share Delivery Experience privilege to 2144044071 . Examining the configurations of indicates that the interests field and filters field of device 2144034071 is used as a superset with interests field and filters field of device 2144044071 to deliver content that would normally be delivered by situational location to device 2144044071 . Selecting a list entry from either list or toggles a checkmark on or off. A checkmark at any entry in the list says to use that entry criteria of the dropdown selection e.g. 2144034071 . A checkmark at any entry in the list says to use that entry criteria of the dropdown selection e.g. 2144044071 . If the Situational Location delivery share configuration is check marked in list then the situational location of the device 2144034071 is used to determine content deliveries to device . This allows using the situational locations of other mobile devices to cause delivery of content to another device. Mobile travels of device 2144034071 causes duplicate content deliveries to device 2144044071. If 2144034071 was italic then the privilege was Intercept Delivery Experiences in which case mobile travels of 2144033071 would cause only delivery of content to device 2144044071 based on situational locations of device 2144034071. Device 2144034071 would not receive content that was ordinarily delivered to it whenever it is deemed deliverable to device 2144044071 according to Delivery Configurator configurations. If the Situational Location delivery share configuration is check marked in list then the situational location of the device 2144044071 is used to determine content deliveries to device 2144044071 which is default behavior of web service for devices using web service . However the user can enable or disable this with list . So the user can use the Delivery Configurator to have content delivered to his target device s by the situational locations of other devices as well as configurations of those other devices and or his own target devices of dropdown . A first presentation of preferably defaults checkmarks in lists and to reflect web service default behavior assuming there are no preference configurations from records found. Default web service behavior assuming no Delivery Configurator configurations made yet equates to no checkmarks in list . Default web service behavior equates to having checkmarks for Current Interests Current Filters and Situational Location in list for a device or user of dropdown . In another embodiment defaults can be used so the Delivery Configurator is not required for use after being assigned the Share Delivery Experience or Intercept Delivery Experience privileges. Any defaults can be implemented.

If a user logon name was specified at dropdown then all that user s devices are handled with a single configuration at dropdown as though each device were configured individually with the same configurations as those set for the user. If a user logon name was specified at dropdown then all that user s devices are handled with a single configuration at dropdown as though each device were configured individually with the same configurations as those set for the user. The Delivery Configurator configures functionality between devices. Configuring functionality between users or between a user and a device is a convenience for specifying a plurality of devices in the configuration.

Checkbox is selected for a checkmark for particular highlighted entries at dropdown and dropdown for whether or not to queue up the delivery for example in case the user thinks an instant delivery is not reasonable or is undesirable to the target device. A checkmark at checkbox indicates to queue up the content and save it for a later delivery. By web service default there is no checkmark at checkbox for any set of entries selected at dropdowns and . A delivery attempt is always made according to device configurations. When a checkmark at checkbox is selected no delivery attempt is made. The device Master can be viewed at a later time to see what deliveries took place. While dropdowns display the name strings they are associated with the record id when selected e.g. PersonID for user RegistryID for device GroupID for group .

In another embodiment preferences of A and B are assigned as privileges through and associated processing wherein the preferences become assigned there. In this case no preference assignments are needed in A and B. Regardless of embodiment users can assign privileges to other users users can assign privileges to devices devices can assign privileges to users devices can assign privileges to devices users can assign preferences for interacting with other users users can assign preferences for interacting with devices devices can assign privileges for interacting with users and devices can assign preferences for interacting with other devices. Using groups also permits organizing a group of users and or devices at either end of a privilege or preference assignment.

If block determines the device of heartbeat processing is being monitored for content delivery then block sets the DCCC array variable to target device record s from block specifically for content management as configured by and processing continues to block . If block determines the device of heartbeat processing is not being monitored for content delivery then processing continues to block . If block determines the device of heartbeat processing is being monitored for alerts then block sets the DCAC array variable to target device record s from block specifically for alerts as configured by and processing continues to block . If block determines the device of heartbeat processing is not being monitored for alerts then processing continues to block . If block determines the device of heartbeat processing is being monitored for PingSpot alerts then block sets the DCPC array variable to target device record s from block specifically for PingSpots as configured by and processing continues to block . If block determines the device of heartbeat processing is not being monitored for PingSpots then processing continues to block where processing terminates and returns to processing.

So as to not obfuscate heartbeat processing Delivery Share configurations are discussed as integrated to heartbeat processing. The array variable DCCC is preferably used at block depending on whose interests and or filters to use and for the other historical information used to filter or include records . Block further includes maintaining DCDBID hitlist data evidence for target devices that are to receive deliveries. Block will access Trail Table records of devices who want to use their own situational location at the time of delivery to the device of processing. processing will be altered by the array variable DCCC for duplicating deliveries or intercepting deliveries to the device of processing by inserting into the target device Masters that were determined as receivers at blocks and or . Prevention of insertion to the master of the device of processing will occur when all receiving target devices are configured for interception Intercept Delivery Experience . If at least one duplicating target device exists Share Delivery Experience then the device of processing will receive the record to its Master. The Queue for later configuration for receiving target devices of DCCC will determine whether or not the DCCC array is passed at block for Master processing. The DCCC array is not passed when all receiving DCCC target devices are marked queue for later since each device can check its Master the queue later and no delivery processing is required. The DCCC array is passed at block to processing for each DCCC target device to accomplish delivery. The devices with queue for later will have their Masters populated. In cases where the device of heartbeat processing has all of its deliveries intercepted no Master changes are made for the device of heartbeat processing and no processing occurs for the device of heartbeat processing however may be performed for devices of the DCCC array as configured without queue for later processing.

The array variable DCAC is preferably used at blocks and to ensure alerts are delivered to the DCAC target devices . The alerts may not be delivered to the device of processing at all if all receiving DCAC target devices are marked for intercepting the alert. Otherwise the alerts are duplicated to the DCAC target devices. The ALERT COMMUNICATIONS FIELD can be used to override normal record alert method processing as discussed below.

The array variable DCPC is preferably used at blocks depending on whose interests and or filters to use and for the other historical information used to filter or include records . Block will access Trail Table records of any devices who want to use their own situational location at the time of delivery to the device of heartbeat processing. processing will be altered by the array variable DCPC for duplicating deliveries or intercepting deliveries to the device of processing by inserting into the target device Masters that were determined as receivers at block . Prevention of insertion to the master of the device of processing will occur when all receiving target devices are configured for interception Intercept Delivery Experience . If at least one duplicating target device exists Share Delivery Experience then the device of processing will receive the record to its Master. The Queue for later configuration for receiving target devices of DCPC will determine whether or not the DCPC array is passed at block for Master processing. The DCPC array is passed at block to processing for each DCPC target device to accomplish delivery. The devices with queue for later will have their Masters populated. In cases where the device of heartbeat processing has all of its deliveries intercepted no Master changes are made for the device of heartbeat processing and no processing occurs for the device of heartbeat processing however may be performed for devices of the DCPC array as configured without queue for later processing.

Records are read at block for initialization into last saved configurations variable s and any that do not show to have the associated Share Delivery Experiences and Intercept Delivery Experiences processing are deleted. Records are added removed or modified at block from last saved configurations variable s . Record data is prepared for being added removed or modified at blocks and into in process configurations variable s . Delivery Share processing makes use of the records for affecting delivery processing of .

Configurator Assignee s which have granted Assignor s with either the Share Delivery Experiences or Intercept Delivery Experiences privilege are populated to the monitor dropdown according to the highlighted Assignor s at dropdown . Privileges configuration of are preferably used to grant these two privileges. User logon names and or device names will be populated to the sorted dropdown list according to privileges assigned to the dropdown entry user or device shown. The list can be positioned to by the user entering a prefix string or entire string to monitor entry field . The closest matching prefix or string in dropdown is automatically scrolled to the corresponding sorted entry. The user can also select the down arrow to see scroll and select any entry from the dropdown list. A user can highlight or unhighlight any entry s in the list so as to affect configurations of one or many at the same time. For example holding the key down while clicking with a cursor can highlight multiple entries. If an Intercept Delivery Experiences privilege has been assigned then the corresponding user or device of dropdown list is preferably shown in italics to differentiate which users and or devices have assigned which of the two privileges Share Delivery Experiences normal type and Intercept Delivery Experiences italic type . While the Configurator Assignee s have assigned the Share Delivery Experiences or Intercept Delivery Experiences privileges to the Configurator Assignor s they become assignees to delivery share preferences as described below. A user highlighted in dropdown list or implies specifying all devices of that user without knowing or caring specifically what devices there are.

The user of the user interface is able to either receive duplicate alerts or PingSpot deliveries to target device s of dropdown which are sent to the device s selected at dropdown or intercept alerts to target device s of dropdown which would have been sent to the device s selected at dropdown . This depends on which of the two privileges were granted. Monitor preference list and target preferences list contains delivery share configurations that can be assigned for criteria used in alert delivery. There are two alert embodiments for configuring preferences via one for Pingimeter Alerts and one for PingSpots a form of content delivery alert from PingPals . A new tab may be provided to the Delivery Configurator for doing both of these or the Options pulldown which is shown is used to toggle between the two alert configuration modes of to display a unique tabbed interface of . Delivery share preferences configured at and depend on the embodiment. Block can present the PingSpots or Pingimeter alerts user interface based on the mode specified by the user in the Options pulldown.

Assuming the alert configuration mode or tabbed user interface in one embodiment for alerts is used to configure sharing Pingimeter alerts then no Areas or are shown. The user simply selects which entries to monitor by highlighting them in dropdown . These will cause duplicate or intercepted delivery as described above based on the privilege assigned to be delivered to the associated entry in dropdown . Pingimeter alerts are based on geographical boundaries without regard to interests filters etc. shall be discussed in context for Pingimeter Alert Management processing of block . Processing starts at block and continues to block for processing and actions to a user interface such as . If block determines a checkmark was placed or removed at checkbox which will never happen at for Alerts then block invokes participant list manage processing with the user checkmark action and processing terminates at block . If block determines checkbox was not checked or unchecked then processing continues to block . If block determines a monitor configuration action was made by the user to monitor configuration area then block invokes participant list manage processing with the user action to the area and processing terminates at block . If block determines a monitor configuration action was not made by the user then processing continues to block . If block determines a deliver to configuration action was made by the user to deliver to configuration area then block invokes participant list manage processing with user action to the area and processing terminates at block . If block determines a monitor configuration action was not made by the user then processing continues to block . Block handles other actions to the user interface of which do not add or remove a preference configuration for example selecting down arrows or to expose a significant amount of list entries resizing the window of or any other action that is not handled by processing. Thereafter processing terminates at block . Areas and have no preference configurations and therefore do not cause any configuration processing.

Continuing with the discussion above in context for Pingimeter alert processing of block processing starts at block and continues to block for processing specific actions to a user interface such as . If block determines a character was typed to deleted from or changed at a data entry field of a configuration area of a tabbed user interface of the Delivery Configurator e.g. fields or then processing continues to block . If block determines the associated dropdown list is empty e.g. dropdown list is associated with entry field dropdown list is associated with entry field then processing continues to block for handling the action as editing text in the data entry field and then to block . A list could be empty if it s a monitor configuration area dropdown list where neither the Share Delivery Experiences nor Intercept Delivery Experiences privileges have been assigned to the selected Assignor highlighted at dropdown . Block terminates processing. If block determines the associated dropdown list is not empty then block matches the closest first occurrence entry in the associated dropdown list which is in sorted order scrolls the dropdown list and makes it the selected entry of the associated dropdown list. Thereafter block sets in process configurations variable s according to settings of the configuration areas. Processing continues to block where processing terminates. If block determines a character was not acted upon at a data entry field then processing continues to block . If block determines an entry was selected user or device in a dropdown list of a configuration area of a tabbed user interface of the Delivery Configurator e.g. dropdowns or then processing continues to block for toggling highlighting of the selected entry and setting or removing the corresponding intended configuration in in process configurations variable s . Processing continues to block where processing terminates. If block determines an entry was not selected in a dropdown list then processing continues to block . For so far discussed block will always determine a preferences list entry was not selected and block will always determine there is no action for queue for later processing will never happen for Pingimeters alert processing therefore processing continues directly to block from block where other actions of the tabbed user interface of the Delivery Configurator are handled appropriately. Thereafter processing terminates at block . Alerts are not stored in a device Master and there is preferably no queuing methodology. Another embodiment will queue up undeliverable alerts for later retries. in context for Pingimeter Alerts maintain records and joined records . Note that records contain fields and . The user can access the Options pulldown to configure one or more manually entered situational locations and then toggle an enable or disable flag for using fields or . By default field is set to No and field is empty. When the user has enabled situational location information field is set to yes and that information is added to the records field or joined from field for only duplicating or intercepting alerts when the monitored device s meet the situational location criteria while at the same time cause an alert to be generated. This allows clarifying alerts that the target user or devices are interested in based on any situational location information criteria.

In one embodiment field which is set with the Options pulldown can override the alert methods configured in normal Pingimeter processing as discussed with records . ALERTS COMMUNICATIONS INFO field is preferably configured analogously to configuring AlertType field as described with record descriptions. Record data is to be made available at the appropriate points of subsequent heartbeat processing.

Assuming the alert configuration mode or tabbed user interface in one embodiment for alerts is used to configure sharing PingSpots then Areas and will include an identical list of preferences discussed for . User interfacing to is analogous to interfacing to except the content to be duplicated on delivery or shared are specifically PingSpots. shall be discussed in context for PingSpot Alert Management processing of block . Processing starts at block and continues to block for processing and actions to a user interface such as . If block determines a checkmark was placed or removed at checkbox checkbox is not shown but will be displayed and placed analogously to checkbox of then block invokes participant list manage processing with the user checkmark action and processing terminates at block . If block determines checkbox was not checked or unchecked then processing continues to block . If block determines a monitor configuration action was made by the user to monitor configuration area then block invokes participant list manage processing with the user action to the area and processing terminates at block . If block determines a monitor configuration action was not made by the user then processing continues to block . If block determines a deliver to configuration action was made by the user to deliver to configuration area then block invokes participant list manage processing with user action to the area and processing terminates at block . If block determines a monitor configuration action was not made by the user then processing continues to block . Block handles other actions to the user interface of which do not add or remove a preference configuration for example selecting down arrows or to expose a significant amount of list entries scrolling lists or resizing the window of or any other action that is not handled by processing. Thereafter processing terminates at block . Areas and have preference configurations identical to for sharing PingSpots.

Continuing with the discussion above in context for Pingimeter alert processing of block for sharing PingSpots processing starts at block and continues to block for processing specific actions to a user interface such as . If block determines a character was typed to deleted from or changed at a data entry field of a configuration area of a tabbed user interface of the Delivery Configurator e.g. fields or then processing continues to block . If block determines the associated dropdown list is empty e.g. dropdown list is associated with entry field dropdown list is associated with entry field then processing continues to block for handling the action as editing text in the data entry field and then to block . A list could be empty if it s a monitor configuration area dropdown list where neither the Share Delivery Experiences nor Intercept Delivery Experiences privileges have been assigned to the highlighted Assignor s at the other dropdown. Block terminates processing. If block determines the associated dropdown list is not empty then block matches the closest first occurrence entry in the associated dropdown list which is in sorted order scrolls the dropdown list and makes it the selected entry of the associated dropdown list. Thereafter block sets in process configurations variable s according to settings of the configuration areas. Processing continues to block where processing terminates. If block determines a character was not acted upon at a data entry field then processing continues to block . If block determines an entry was selected user or device in a dropdown list of a configuration area of a tabbed user interface of the Delivery Configurator e.g. dropdowns or then processing continues to block for toggling highlighting of the selected entry and setting in process configurations variable s accordingly. Processing continues to block where processing terminates. If block determines an entry was not selected in a dropdown list then processing continues to block . If block determines a preferences list entry was selected e.g. preferences lists or then processing continues to block for toggling a checkmark on or off for display depending on the previous state and block sets in process configurations variable s according to the selected preference of the configuration area of a tabbed user interface of the Delivery Configurator. Thereafter processing terminates at block . If block determines a preferences list entry was not selected then processing continues to block . If block determines a queue for later checkbox was selected e.g. checkbox is not shown but will be displayed and placed analogously to checkbox of then processing continues to block for toggling a checkmark on or off for display depending on the previous state and block sets in process configurations variable s according to the selection of the checkbox area of a tabbed user interface of the Delivery Configurator. Thereafter processing terminates at block . If block determines a queue for later checkbox was not selected then processing continues to block where other actions of the tabbed user interface of the Delivery Configurator are handled appropriately. Thereafter processing terminates at block . PingSpots are stored in a device Master for later viewing so delivery can be prevented so they are viewed later. in context for PingSpots Alerts maintain records and joined records .

Field can be used to override situational location information used for the PingSpots involved if field is set to Yes. Field can be used to override PingSpot content delivery processing with an alert instead of the configured deliverable content. Record data is to be made available at the appropriate points of subsequent heartbeat processing for alerting instead of updating the Master s .

Configurator Assignee s which have granted Assignor s with either the Share Delivery Experiences or Intercept Delivery Experiences privilege are populated to the monitor dropdown according to the current displayed Assignor s at dropdown . Privileges configuration of are preferably used to grant these two privileges. User logon names and or device names will be populated to the sorted dropdown list according to the two privileges assigned to the dropdown entry user or device highlighted. The list can be positioned to by the user entering a prefix string or entire string to monitor entry field . The closest matching prefix or string in dropdown is automatically scrolled to the corresponding sorted entry. The user can also select the down arrow to see scroll and select any entry from the dropdown list. A user can highlight or unhighlight any entry s in the list so as to affect configurations of one or many at the same time. For example holding the key down while clicking with a cursor can highlight multiple entries. If an Intercept Delivery Experiences privilege has been assigned then the corresponding user or device of dropdown list is preferably shown in italics to differentiate which users and or devices have assigned which of the two privileges Share Delivery Experiences normal type and Intercept Delivery Experiences italic type . While the Configurator Assignee s have assigned the Share Delivery Experiences or Intercept Delivery Experiences privileges to the Configurator Assignor s they become assignees to delivery share preferences as described below. A user specified in dropdown list or implies specifying all devices of that user without knowing or caring specifically what devices there are.

There is no difference between Share Delivery Experiences or Intercept Delivery Experiences privileges for action configuration because actions at a device cannot be intercepted. Either of the two renders identical functionality for actions configuration. The user device of the user interface is notified with the monitored actions of other user s device s . The user device can receive action alerts to target device s of dropdown which occur at device s selected at dropdown . Monitor preference list and target preferences list contains delivery share configurations that can be assigned for criteria used in action alert notification.

Preference lists and will include a list of preferences similarly discussed and acted upon by the user for except they have different names and are different in the functionality provided. They are discussed in detail below. shall be discussed in context for Action Management processing of block . Processing starts at block and continues to block for processing and actions to a user interface such as . If block determines a checkmark was placed or removed at checkbox then block invokes participant list manage processing with the user checkmark action and processing terminates at block . If block determines checkbox was not checked or unchecked then processing continues to block . If block determines a monitor configuration action was made by the user to monitor configuration area then block invokes participant list manage processing with the user action to the area and processing terminates at block . If block determines a monitor configuration action was not made by the user then processing continues to block . If block determines a deliver to configuration action was made by the user to deliver to configuration area then block invokes participant list manage processing with user action to the area and processing terminates at block . If block determines a monitor configuration action was not made by the user then processing continues to block . Block handles other actions to the user interface of which do not add or remove a preference configuration for example selecting down arrows or to expose a significant amount of list entries scrolling lists or resizing the window of or any other action that is not handled by processing. Thereafter processing terminates at block .

Continuing with the discussion above in context for actions management processing of block processing starts at block and continues to block for processing specific actions to a user interface such as . If block determines a character was typed to deleted from or changed at a data entry field of a configuration area of a tabbed user interface of the Delivery Configurator e.g. fields or then processing continues to block . If block determines the associated dropdown list is empty e.g. dropdown list is associated with entry field dropdown list is associated with entry field then processing continues to block for handling the action as editing text in the data entry field and then to block . A list could be empty if it s a monitor configuration area dropdown list where neither the Share Delivery Experiences nor Intercept Delivery Experiences privileges have been assigned to the highlighted Assignor s at dropdown . Block terminates processing. If block determines the associated dropdown list is not empty then block matches the closest first occurrence entry in the associated dropdown list which is in sorted order scrolls the dropdown list and makes it the selected entry of the associated dropdown list. Thereafter block sets in process configurations variable s according to settings of the configuration areas. Processing continues to block where processing terminates. If block determines a character was not acted upon at a data entry field then processing continues to block . If block determines an entry was selected user or device in a dropdown list of a configuration area of a tabbed user interface of the Delivery Configurator e.g. dropdowns or then processing continues to block for toggling highlighting of the selected entry and setting or removing the corresponding intended configuration in in process configurations variable s . Processing continues to block where processing terminates. If block determines an entry was not selected in a dropdown list then processing continues to block . If block determines a preferences list entry was selected e.g. preferences lists or then processing continues to block for toggling a checkmark on or off for display depending on the previous state and block sets in process configurations variable s according to the selected preference of the configuration area of a tabbed user interface of the Delivery Configurator. Thereafter processing terminates at block . If block determines a preferences list entry was not selected then processing continues to block . If block determines a queue for later checkbox was selected e.g. checkbox then processing continues to block for toggling a checkmark on or off for display depending on the previous state and block sets in process configurations variable s according to the selection of the checkbox area of a tabbed user interface of the Delivery Configurator. Thereafter processing terminates at block . If block determines a queue for later checkbox was not selected then processing continues to block where other actions of the tabbed user interface of the Delivery Configurator are handled appropriately. Thereafter processing terminates at block . The user interface is acted upon analogously to in assigning preferences.

Records and are created in accordance with action configurations. The Options pulldown configurations can be used to populate an alert method in field as well as situational location information to fields and . Other embodiments of alert management and action management will use the target device record fields for determining the suitable delivery method s .

Monitor preference list and target preferences list contains delivery share configurations that can be assigned for criteria used in action notification. Each list contains different criteria for enabling or disabling. Records are preferably used to automatically populate list since these are all actions that can be performed on the monitored device. The monitor preference list contains preferences such as 

If block determines the mode set last at block is for prompt then block provides a prompt to the user indicating a registered action has been detected and is configured for notification to other device s otherwise block continues directly to block . One embodiment of block will list which devices are being notified. Preferably the user must act on the prompt to acknowledge it with cancel or continue. This permits the user to override sending a notification to other devices or users. Thereafter if block determines the user selected to cancel then processing terminates at block and normal device processing of the action occurs. If block determines the user selected to continue then block determines the device situational location and block sends any applicable action notifications to configured devices as determined by valid records accessed at block along with applicable records and which are accessed at block . A performance conscious implementation may cache record information for quick access at block and then update cache at reasonable opportune moments. The device situational location is determined at block in case the action alert has been clarified with the device having to perform the action at a situational location of field s for field s set to yes. Sending can be directly from device to device or through web service with an appropriate means. Thereafter block terminates processing. Block will use ALERT COMMUNICATIONS INFO field if available otherwise the record for each target device must be accessed for how to deliver the notification. The notification is preferably a textual message containing informative information about the action. Block will use SITUATIONAL LOCATION field when USE SITUATIONAL LOC field is set to Yes. This clarifies to block when comparing the device situational location from block that the action is not to notify any device unless the situational location determined at block matches at least one that is configured in field . Also block can use any data found at ACTION CONTEXT INFO field to further clarify the action is registered. Record information can be accessed as needed from web service cached at opportune moments for being readily available for access or periodically communicated to devices or systems that need it.

The Send Broadcast Messages privilege is provided to devices for sending broadcast messages to PingPals willing to accept them. Using the many teachings above the device can access privileges for who granted the Send Broadcast Messages privilege to it or to the user of the device for then looping on each grantor to send a prepared message for communicating to more than one device or user at the same time with the same message. For example a user wants to let his PingPals know where he ll be that evening without having to call or send a message to each individually. The user prepares the message invokes a broadcast request and the message is automatically sent to all PingPals who have granted the Send Broadcast Messages privilege to the device sending the message or to the user of the device . Sending a message SMS message or email is well known in the art. The feature discussed here is leveraging web service groups privileges and SMTP service to provide privileged broadcast functionality to a plurality of other users and devices of web service . Continuing with the flowchart methods discussed above a new broadcast option e.g. is selected by the user. A suitable data entry broadcast specification page form is presented from web service to the user for specifying a group name field of a user s group record containing user s and or device s that also happen to have granted the user with the Send Broadcast Messages privilege along with a data entry field for the broadcast message. Preferably a plurality of the user s groups can be specified and additional users devices can be added explicitly for receiving the broadcast message. Upon submittal form validation is performed to assure the group s and any additional users or devices do indeed contain at least one appropriately privileged device to receive the broadcast and data sent may also be validated. Successful validation as determined by an invoked broadcast processing page from web service then accesses all members of the group record s specified along with the explicitly specified recipient users and or devices. It is then determined which users and or devices provided the sending user invoker of new option with the Send Broadcast Messages privilege for elaborating to all privilege granting target devices and uses the data entry field to construct an SMTP message SMS or email to send to all target devices of the group using their record fields for preferred delivery e.g. fields .

Another embodiment will only permit users rather than devices to be recipients of the broadcast message. In this case the broadcast specification form validates that the user enters group name s of record s along with any additional users only which has granted privileges to the user. All user s who have granted the user sending the broadcast message with the Send Broadcast Messages from the user specified group s or explicitly added users will receive the broadcast. Upon constructing the broadcast message the user account record fields e.g. Email field is used for receiving the broadcast.

In one use of web service a dating service is provided. Members interact through web service with PingPal configurations and can set PingSpots traveled by other users which meet situational location parameters and associated configurations for delivering the content of the PingSpot. Pingimeter Alerts can also be fun in configuring between PingPals. Web service becomes fun to use and provides reason to interact for developing relationships.

In another use advertisers target user types device types situational locations and other criteria for deeming a content delivery for the purpose of reaching an audience. A hit radius can be configured for deliverable content records . A hit radius can be configured for PingSpots of records . Pingimeters can also be configured with a radius for causing an alert which is also a type of hit radius . A hit radius is preferably a fixed area or fixed region in space that mobile device travel to or through. The user who configured the hit radius can modify it and specify a different area or fixed region in space. In any case features and functionality of web service occur when mobile device encounter the hit radius. In one embodiment a hit radius can also be mobile. The user configures additional fields in records containing a hit radius so that the hit radius can take on a plurality of positions and or size over time. In one embodiment the user configures a plurality of hit radius sizes and or locations for a plurality of different scheduled times e.g. distinct times of a day week or month with a single configuration. In another embodiment a user uses a mathematical formula to plot the path of a hit radius with a speed to travel over the path e.g. Cartesian coordinate system algebraic formula with a slope function optionally with a start time and end time. Wherever a fixed location radius or hit radius has been used various embodiments will provide additional fields for defining many hit radius configurations over time to prevent burdening a user with changing a configuration for the sole purpose of modifying a radius or hit radius. In another embodiment any field of records joined records thereto or therefrom or any other related data record or web service can be used as part of a configuration to dynamically change a hit radius over time. The hit radius and associated middle can be configured to be dynamic over time using any reasonable variables to affect changes.

Likewise a device mobile interest radius may have additional configuration for being modified over time without burdening the user from constantly changing his interest radius. The user can configured his interest radius for unique sizes based on scheduled times dates. In another embodiment the user can have his device mobile interest radius dynamically change its size based on a current situational location. For example the user can configure his mobile interest radius to be 500 feet when within certain major cities but then set to 5 miles when well beyond city limits. This could be territory configurations or proximity to a location configurations etc. This allows users to configure one time all useful interest radiuses based on future device situational locations. In other embodiments the user can configure any criteria about his situational location for affecting the size of his interest radius while mobile. In another example the user may configure that a threshold number of content deliveries based on his interests and or filters automatically decrease or increase the interest radius e.g. decrease to prevent receiving too much content for farther away situational locations or increase to attempt to receive more content . In another embodiment any field of records joined records thereto or therefrom or any other related data record or web service can be used as part of a configuration to dynamically change a mobile interest radius over time. The interest radius can be configured to be dynamic over time using any reasonable variables to affect changes.

In one embodiment of web service a subset of record fields are maintained at a user account level i.e. records for affecting configuration of devices. This allows a user with a plurality of devices to modify data e.g. interests filters etc in one place for all his devices. Any reasonable record fields are movable to a record .

The Affinity Delegate privilege can be used wherever logon is requested for example at web service logon processing or at device accesses to the Delivery Manager . A user with the Affinity Delegate privilege may logon to the members area of web service to find not only his own data configured though web service but also data of users who provided the Affinity Delegate privilege to him. Preferably after a successful logon all users who have assigned the Affinity Delegate privilege to him appear in a dropdown made available to the My GPS interface e.g. in the top left hand corner. The user selects a user from the dropdown which then makes all members area interfaces adapt as though that selected user were logged on to the members area. The logon data evidence would be modified upon selection of a different user from the dropdown to ensure access control processing uses the information for the selected user who granted the Affinity Delegate privilege. This way all members area pages treat the user as though he was in fact the one logged on. The users actual logon name also appears in the dropdown for being able to go back to his own logon data evidence for interfacing to members area pages. Preferably the dropdown with the selected user logon name appears with all members area pages to always remind the user who he is currently acting on behalf of. The Affinity Delegate privilege allows users to manage records in web service on behalf of other users.

The Affinity Delegate privilege can be also be used for accesses by a device to the Delivery Manager with device name Deviceid field and device password PW field . A device with the Affinity Delegate privilege may access the Delivery Manager to find a dropdown presented to an interface for example the browser version of the Delivery Manager containing all devices which provided the Affinity Delegate privilege to his device user to user user to device device to device and device to user assignments are used to elaborate all devices which have ultimately granted the privilege to the device . Preferably after a successful Delivery Manager access all devices which have assigned the Affinity Delegate privilege to the accessing device see a dropdown made available. The user selects a device from the dropdown which then makes all Delivery Manager interfaces adapt as though that selected device were used to access the Delivery Manager. The device data evidence would be modified upon selection of a different device from the dropdown. This way subsequent Delivery Manager interactions treat the device as though it was in fact the one accessing the Delivery Manager. The actual device name also appears in the dropdown for being able to go back to it. Preferably the dropdown with the selected device name appears with all applicable Delivery Manager interfaces to always remind the user which device he is currently using to web service .

While Pingimeters have associated actions caused upon an arrival or departure of a mobile device PingSpots and deliverable content records may also have associated actions. When a mobile device travels to a targeted area or region in space for a PingSpot or deliverable content record actions can be defined in a similar manner. Depending on the command configured or the embodiment of a command itself any action or plurality of actions can be performed as the result of a mobile device encountering a PingSpot or deliverable content record targeted situational location. Features of web service that are currently unique to one form of a triggered or automated delivery are easily incorporated to the other forms of triggered or automated deliveries and are therefore assumed for incorporation. Any time a content delivery is determined for a device an action or plurality of actions configured with the content can also take place. In one embodiment the content delivered includes a script or executable which contains configurable actions. In another embodiment a field such as field is provided to a record . DCDB records PingSpot records Pingimeter records and registered action records can each have one or more situational locations configured for it to determine delivery. DCDB records PingSpot records Pingimeter records and registered action records can each have one or more alert types configured for it with or without associated delivered content and alerts can be delivered to users or devices involved in web service configuration that causes the alert s or any other user or device capable of receiving a distribution email SMS message or the like . Situational location criteria for DCDB records PingSpot records Pingimeter records and registered action records can have situational locations further clarified with additional fields from or in records other record fields of web service or any other criteria to specifically define the situation of the situational location for triggering criteria of a content delivery or alert.

Content deliveries by situational location may also be authenticated. When a delivery by situational location is made to a device the recipient may be forced to identify himself as a valid recipient. This can be done with credentials sought that are passed with content or as a well known process for specifying anticipated credentials upon delivering content. The delivery will not occur unless the recipient shows authenticity of who he is that is receiving the content. DelivFlags field functionality is to be incorporated at appropriate blocks of processing per descriptions above.

Billing the recipient for each delivery or some bulk number of deliveries made according to web service configurations this requires gathering additional information about recipients e.g. Pingers 

Billing the content providers for each delivery or some bulk number of deliveries made according to successful content deliveries made by web service or

Subscriptions to use web service functionality by any subset of user types discussed. The preferred embodiment makes web service free to all users except content providers in a publicly accessed advertising related application and enforces user based subscriptions in certain special applications.

Server check frequency may be configured beyond just a simple fixed period. For example server check frequency determines the time intervals by which to send a device heartbeat to processing. The server check frequency may have additional configuration for being modified over time without burdening the user from constantly changing it. The user can configured a server check frequency for unique heartbeat intervals based on scheduled times dates.

In another embodiment the user can have a server check frequency dynamically change its frequency of occurrence based on a current situational location. For example the user can configure a server check frequency to be every 2 seconds when within certain major cities but then set to every 10 seconds when well beyond city limits. This could be territory configurations or proximity to a location configurations etc. This allows users to configure one time all useful server check frequencies on future device situational locations. In other embodiments the user can configure any criteria about his situational location s for affecting the server check frequency while mobile. In one embodiment all mobile devices are set with a server check frequency which is not configurable at all by the user. In another embodiment any field of records joined records thereto or therefrom or any other related data record or web service can be used as part of a configuration to dynamically change a server check frequency over time. The server check frequency can be configured to be dynamic over time using any reasonable variables to affect changes.

The movement tolerance can also affect when device heartbeats are sent to web service . A heart beat will not be sent to web service unless the mobile device has moved at least as much as the movement tolerance. In the preferred embodiment the movement tolerance involves comparing a previous location of mobile device with a subsequent location of mobile device . In another embodiment a movement tolerance can be an amount of movement such as an elapsed time of any movement. In yet another embodiment a movement tolerance can be configured to dynamically change based on user configurations for scheduling preferences territory etc in a similar manner to heartbeat and server check frequencies described above. In another embodiment any field of records joined records thereto or therefrom or any other related data record or web service can be used as part of a configuration to dynamically change a movement tolerance over time. The movement tolerance can be configured to be dynamic over time using any reasonable variables to affect changes.

In a further embodiment a movement tolerance configuration heartbeat configuration and or server check frequency configuration can be configured together as part of the same unit of dynamic control for dynamic behavior of all three configurations together.

Heartbeats may be intermittently sent to web service in response to devices sensed at locations as they come in proximity to sensing means e.g. U.S. Pat. Nos. 6 389 010 and 5 726 984 Kubler et al . Heartbeats are generic in that web service does not anticipate when a heartbeat will arrive. Web service processes device heartbeats when they are received regardless of how timely they are and regardless of the system originators of them. The heartbeat will contain enough information for how to deliver the content to the particular device either by order of protocol data contained in the heartbeat or both. Heartbeats are not caused by a user through a user entering location information to a user interface. They are automatically system generated by some automatic location detection means typically without the user being concerned or aware of in many cases when they are being generated and sent to web service . Automatic location detection means causes the sending of device heartbeats to web service .

Currently there are GPS systems in computers Tablet PCs PDAs and wireless phones. Sometimes content will be delivered by situational location to a mobile device that is significantly far from a destination that the delivered content is associated with. It would be nice to provide the mobile user with a pushpin graphic on a local map of a destination associated with the content and then provide automated narrated directions to the pushpin from the user s current location using current GPS technology. The delivered content may be configured with a situational location that covers a broad geographic area. If an advertisement is sent to the mobile device by its situational location that is intended to entice the user to travel to a destination then directions to the destination from the mobile device location is desirable. While this information could also be delivered over a wireless connection as part of the content it is better performance to simply send a pushpin location for processing by the local GPS system for directions. Therefore a record can deliver a pushpin location as part of the content delivered by situational location to the mobile device. The pushpin location can be a latitude longitude combination physical address MAPSCO address or any other description for uniquely identifying a location on a map. When content is delivered by situational location its a better performing solution to minimize information transmitted over a wireless internet connection. By transmitting a pushpin location to the mobile device for narrative direction processing by the mobile device itself less narrative direction content is sent over the wireless connection.

So content is sent to mobile devices depending on their situational locations. Pushpin locations can be sent as part or all of the content. The pushpin conveniently provides a graphic to display on the local GPS map and is preferably integrated with landmark point processing of the GPS application or service. The user can then use a conventional GPS system for guided directions for traveling to the pushpin location. Alternatively the user simply selects the pushpin and guided narratives directions are provided in forms well know in the art for guiding the mobile user to the pushpin location from his current location. The preferred embodiment will prevent user interaction for guidance to the pushpin location from the current user s location.

Some wireless phones may not have a microbrowser or may have a user that does not want to use a microbrowser or have a user that does not have an internet plan with their cell phone. Wireless connections may also be slow. Minimizing delivered content is preferable. Methods are needed for a good experience using such devices with web service . Messages can be delivered directly to the person s phone mail providing a unique ringing e.g. by caller id and or playing an automated message to the person who answers the cell phone that has traveled to a situational location. The user can interface completely with voice commands to a web service for configuring content delivery method s interests or filters and other record fields and then participate in receiving content by his situational location. For delivery to the user s phone mail text can be processed to voice for leaving a voice recording or alternatively a voice recorded message already configured as content is delivered. The cell phone s normal notification of a newly delivered message then notifies the user. Depending on the user s configurations a unique cell phone ring is provided for content delivered by situational location. In one embodiment the wireless provider provides the unique cell phone ring with the service. In another embodiment the cell phone recognizes a programmed caller id to provide the unique phone ring. Depending on the user s configuration the user s cell phone can be automatically called with automated message content. Textual content can be converted to voice or the content may already be a recording for play.

Content configured for situational locations may be expensive by subscribed plan or by performance measurements in transmission. A method may be needed to minimize transmission and to minimize costs associated with doing a content transmission. Content can be delivered to the device in a minimal form for further delivery processing by the receiving device. The receiving device maintains a cache which can be refreshed by a LAN Local Area Network connection a high speed hot spot 802.11 connection or any communications connection that provides better performance than the connection by which content is delivered to the wireless device by situational location. For example a real estate multiple listing service database provides real estate listings as mobile users travel to situational locations that are configured with deliverable content. It may be expensive to deliver graphics and large amounts of text to the devices. In one embodiment a unique listing entry identifier is delivered to the mobile device upon traveling to a configured situational location and subsequent processing by the mobile device itself retrieves the MLS Multiple Listing Service data using the entry identifier or by way of a higher speed connection or local access. The mobile device refreshes locally maintained data when it is opportune to do so at hotspots other fast connections or the like. Database entries have unique identifiers. This methodology is not limited to MLS. The only requirement is to have a deliverable content database with unique handles for uniquely identifying the entries accessed by the local receiving device. So entry ids are delivered as the content or part thereof and the device is then responsible for delivering the details of the content. In cases where the entry identifier is known receiving device processing is straightforward. In cases where the entry identifier is unknown for example because of a newly configured deliverable content database entry at the remote service or because the device had not been refreshed recently the content can be delivered over the usual wireless connection or an indicator is delivered for indicating to do a refresh. Preferably the user can control what happens as disclosed above for local cache management. The device local cache can be updated by a hot spot which variably determines whether the information can be processed in detail by the mobile device. Alternatively new content is wirelessly communicated trickle updates as appropriate or indicator s can be sent to the user to inform the user to do a refresh. So in the MLS example above listings are presented to the user s device as it is mobile. Web service is delivering a minimal amount of information such as a unique MLS identifier which is then used locally by the device to access the MLS database to present details.

There are many other applications and or embodiments where a minimal amount of information can be delivered to the device for more detailed processing by the device to ultimately present the information to the user at the device.

Currently WAP devices have XML defined WML encoding to solve user interfaces for such small displays. It would be nice to provide a large display to any cell phone so full web browsing is possible to web service . Cell phone mobile devices preferably include an RGB Red Green Blue projector. The cell phone provides internalized integration of RGB projection of a displayable image that would otherwise or additionally be displayed in the LCD Liquid Crystal Display of the phone. The cell phone user points the directed output light for the displayable image which is scaled and projected to a targeted surface. The strength of the light source will dictate how far the target surface can be from the projecting phone. Preferably the resulting image will provide an area large enough for full web browsing to web service or at least the size of PDA web browsing for example as used by Pocket Internet Explorer devices. In alternate embodiments camera snapshots video footage or anything that could be displayed on the phone will also display in the image.

In one embodiment of web service users do not have to configure anything to participate in the content delivery by situational location. An entire telecommunications company mobile phone directory is easily imported to server data records with appropriate defaulted fields. Software can be already installed on mobile phones or downloaded by a user after purchasing the mobile phone for transmitting timely heartbeats containing whereabouts to web service . Based on a phone service plan of the mobile phone subscriber content can be delivered to the phone as he is mobile. There are always options for providing a subset of the interfaces described above for further personalizing the experience to web service .

When a user toggles an option to enable or disable content delivery by situational location the preferred embodiment simply starts or terminates Delivery Manager processing or he starts or terminates the processing which sends heartbeats to processing. An appropriate device user interface is provided. In another embodiment the ActiveDev field is set to No for disabled or Yes for enabled.

In a preferred embodiment for enhancing mobile device locations well known cell tower locations complement GPS coordinates received when locating devices. Cell tower or antenna triangulation or cell tower communications information can further refine the whereabouts of mobile devices . An environment which couples multiple location technologies together can provide better accuracy for device locations.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

