---

title: Safe auto-login links in notification emails
abstract: A web application user is authenticated directly upon selecting a link in a notification email. In this approach, the user's web browser stores a first data string provided by the web application (e.g., in a cookie) during a prior session. The first data string encodes first data about the user that can be verified by the application. Later, the user receives the notification email that includes the link. The link encodes a second data string from which second data about the user can be verified by the application. When the end user selects the link, an authentication request is transmitted to the application. The authentication request includes both the first and second data strings. If both the first data and the second data (as obtained from their respective data strings) can be verified, the user is authenticated without having to perform any additional steps (e.g., manual entry of credentials).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298896&OS=09298896&RS=09298896
owner: International Business Machines Corporation
number: 09298896
owner_city: Armonk
owner_country: US
publication_date: 20130102
---
This disclosure relates generally to web application security and in particular to enabling a user to access the application using a link in a notification message but without requiring the user to re enter login credentials.

Many web applications send their users various notification messages typically emails from which the users can access the application by selecting a URL in the message. When a user receives the notification email having the embedded URL he or she selects the embedded link which opens the user s browser to a login page. At the page the user is challenged to enter credentials to authenticate to the application. This approach which requires the user to enter information manually results in a poor user experience also it trains users to enter their credentials in response to links included in emails an opportunity that is often exploited extensively in phishing attacks.

One solution to the problem of requiring users to manually login to the web application when they follow a notification email link is for the user to instruct the browser to remember some user credential in this way the credential does not have to be re entered on each occasion when login is required. Another solution is for the application to offer a remember me option so that the user stays logged into the application or is logged in automatically . These solutions provide some benefits but only when the user accesses the application from the same web browser which limits their usefulness. Yet another solution is to include URLs in notification emails that contain all of the data e.g. a secret or signed parameter that is required to authenticate the user. This approach however suffers from a serious security flaw because anyone who happens to have access to the notification email e.g. because the user has forwarded it while being unaware of the consequences may access the application on the user s behalf.

HTTP cookies see IETF RFC6265 provide a way of managing sessions and state between web browsers and web servers using the HTTP protocol. In a typical browser server interaction a Web application sets a cookie and the cookie is returned to the browser to present with subsequent requests until the cookie is expired by the web application. Web applications leverage cookies for security purposes such as authentication and session control.

According to this disclosure a web application user is authenticated directly upon selecting a link in a notification email. This approach works generally as follows. Initially the user s web browser stores a first data string provided by the web application e.g. in an HTTP cookie during a prior authenticated session. The first data string encodes first data about the user that can be verified by the application. Later the user receives the notification email that includes the link. The link encodes a second data string from which second data about the user can be verified by the application. When the end user selects the link an authentication request is transmitted to the application. The authentication request includes both the first and second data strings. If both the first data and the second data as obtained from their respective data strings can be verified the user is authenticated without having to perform any additional steps e.g. manual entry of credentials .

One or both of the first data and the second data may be encoded in their respective data strings or otherwise secured through a cryptographic means such as a digital signature. The first data and second data also may have a predetermined relationship such as being shares of a secret according to a secret sharing scheme enforced by the web application which itself may have a share of the secret . As noted above both factors the first data and the second data must be verified in order for the automated authentication from the notification link to proceed successfully. Thus when the end user selects the URL in the email message an authentication request is transmitted to and received at the web application or some proxy . As noted above preferably the authentication request includes both the first data string and the second data string. A determination is then made typically by the web application regarding whether the first data and the second data derived from their respective data strings can be obtained and verified. If both the first data and the second data can be verified the user is authenticated without having to perform any additional steps such as manual entry of user credentials . If however either one or both of the first data and second data cannot be verified a login page is presented to facilitate the authentication. In this way the user may be authenticated from the notification email directly in a single click operation but in a safe and secure manner.

The foregoing has outlined some of the more pertinent features of the invention. These features should be construed to be merely illustrative. Many other beneficial results are attained by applying the disclosed invention in a different manner or by modifying the invention as will be described.

With reference now to the drawings and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the drawings depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the disclosed subject matter and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer such as client in in which computer usable code or instructions implementing the processes for illustrative embodiments of the disclosure may be located.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C C Objective C or the like and conventional procedural programming languages or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the disclosed subject matter.

As will be seen the techniques described herein may operate in conjunction within the standard client server paradigm such as illustrated in in which client machines communicate with an Internet accessible Web based portal executing on a set of one or more machines. End users operate Internet connectable devices e.g. desktop computers notebook computers Internet enabled mobile devices or the like that are capable of accessing and interacting with the portal. Typically each client or server machine is a data processing system such as illustrated in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. A data processing system typically includes one or more processors an operating system one or more applications and one or more utilities. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these standards is presumed.

By way of additional background authentication is the process of validating a set of credentials that are provided by a user or on behalf of a user. Authentication is accomplished by verifying something that a user knows something that a user has or something that the user is i.e. some physical characteristic about the user. Something that a user knows may include a shared secret such as a user s password or by verifying something that is known only to a particular user such as a user s cryptographic key. Something that a user has may include a smartcard or hardware token. Some physical characteristic about the user might include a biometric input such as a fingerprint or a retinal map. It should be noted that a user is typically but not necessarily a natural person a user could be a machine computing device or other type of data processing system that uses a computational resource. It should also be noted that a user typically but not necessarily possesses a single unique identifier in some scenarios multiple unique identifiers may be associated with a single user.

An authentication credential is a set of challenge response information that is used in various authentication protocols. For example a username and password combination is the most familiar form of authentication credentials. Other forms of authentication credential may include various forms of challenge response information Public Key Infrastructure PKI certificates smartcards biometrics and so forth. An authentication credential is differentiated from an authentication assertion an authentication credential is presented by a user as part of an authentication protocol sequence with an authentication server or service and an authentication assertion is a statement about the successful presentation and validation of a user s authentication credentials subsequently transferred between entities when necessary.

HTTP cookies see IETF RFC6265 provide a way of managing sessions and state between web browsers and web servers using the HTTP protocol. In a typical browser server interaction a Web application sets a cookie and the cookie is returned to the browser to present with subsequent requests until the cookie is expired by the web application. Web applications leverage cookies for security purposes such as authentication and session control. An HTTP cookie typically comprises a set of name value pairs. It may be persistent in the sense that it is received and stored in a browser cache for an indefinite time period.

As will also be described the technique that is the subject of this disclosure also may be implemented in a system that includes a session management component. Session management typically is provided in association with an access manager which is a component that prevents unauthorized use of resources including the prevention of use of a given resource in an unauthorized manner. A representative access manager is the Tivoli Access Manager for e business TAMeb product which is available commercially from IBM and is represented in . Of course the identification of this commercial product is not meant to be taken to limit the present invention. More broadly any system device program or process that provides a policy access service decision may be used for this purpose. A representative but non limiting implementation is a point of contact PoC that acts as an intermediary between a client browser and one or more back end applications. The point of contact is a reverse proxy a Web server plug in or the like that is executed in at least one processor. As described above this component is responsible for the session management of users.

TAM is just one example of a generic authentication framework. Generalizing a typical framework of this type provides a reverse proxy web plug in or the like that provides session management functionality and that includes authorization functionality as part of this session management. The framework collects a user s authentication credentials evaluates them and establishes a session including some form of session management functionality such as a session cookie . To provide a user with the advantages of this consolidated environment the framework then provides a single sign on solution for the user by asserting authentication credentials such as username password to the back end applications. This allows the back end application to be added to the portal environment without modification.

According to this disclosure a web application user is authenticated directly upon selecting a link in a notification email. This approach works generally as follows. Initially the user s web browser stores a first data string provided by the web application e.g. in an HTTP cookie during a prior session. The first data string encodes first data about the user that can be verified by the application. Later the user receives the notification email that includes the link. The link encodes a second data string from which second data about the user can be verified by the application. When the end user selects the link an authentication request is transmitted to the application. The authentication request includes both the first and second data strings. If both the first data and the second data as obtained from their respective data strings can be verified the user is authenticated without having to perform any additional steps e.g. manual entry of credentials .

Thus for example the technique may be a rich client a rich client is a client of a client server application that supports its own interface as opposed to merely exporting the web interface from the web application itself . A rich client typically is not browser based and it is sometimes referred to as a thick as compared to a browser based or thin client. Client server interactions also need not be HTTP based. At step the web application provides the client a cookie that encodes first data about the user and that can be verified by the web application. Typically step occurs in association with a first user transaction or session and that transaction session may take place at any time. The cookie is received and stored in the web browser typically in a cookie cache in the usual manner. The cookie may be a persistent cookie or it may have time expiry in which case the cookie expires after that time period . The cookie may be a one time cookie in which case it may be only used returned to the web application for validation on one and only one occasion.

Although not meant to be limited the first data about the user is encoded in the cookie in the form of a first data string. The first data may be quite varied but typically includes data e.g. user name user identifier other personally identifiable information PII or the like that the application is able to verify but that is not necessarily known or knowable to a third party. The nature of the encoding may also be quite varied and may include for example a digital signature of the first data. In a representative embodiment the first data string comprises the first data and its digital signature perhaps encrypted e.g. with a key of a public key cryptosystem . Any type of encoding may be applied to the first data.

As also illustrated in at some point in time the client receives a notification message . This is step . The notification message may or may not originate from the web application. In the notification message originates from a source other than the web application. In this example the notification message is an email and the email includes an embedded URL. Alternatively the notification message may be a text message SMS or in some other format that includes a link. According to this disclosure the link encodes second data about the user that like the first data is known to and can be verified by the web application. Preferably the second data differs from the first data but this is not a requirement. The second data is encoded in the link in the form of a second data string. Like the first data string the second data string may be formed of the second data and its digital signature.

Steps and typically occur at different times. Typically step receipt of the cookie occurs before step receipt of the notification message but this is not a requirement. Step may precede step . Moreover steps and may occur at or near the same point in time. As also noted above the cookie and e mail typically originate from different sources although the cookie will originate from the web application or its proxy .

At step it is assumed that the user has selected the link in the notification message. According to this disclosure it is desired that if possible and safe to do so the user is then authenticated to the web application automatically upon such selection. The user is automatically authenticated if he or she does not then have perform an additional operation e.g. enter user id and password present some biometric for screening etc. upon clicking the link in the notification message. This auto login operation is achieved as follows. At step and following the user s selection of the link the client application e.g. the browser the e mail client or the like from which the link was activated sends an authentication request to the web application. The authentication request comprises both the first data string which was received in the cookie at step and the second data string which was received in the notification message at step .

At step the web application determines without additional user input whether the first data and the second data can be verified. The verification step typically involves obtaining the first data from the first data string and obtaining the second data from the second data string and then determining whether those data strings can be verified. Depending on the nature of the encoding involved the verification step also may involve one or more other operations such as decryption signature verification secret generation and verification time expiry verification and the like or combinations thereof . If the first and second data are verified the user is logged into the web application automatically. If however either the first and second data cannot be verified by the web application the web application serves the client a login page to request login. This completes the process.

Generalizing the first data is a first factor and the second data is a second factor. Thus the approach as described above implements auto login from a notification email with two 2 factor authentication.

The first data and the second data may be related to each other. Thus for example the first data and the second data may each be pieces of a single secret according to a secret sharing scheme. Secret sharing is a known method for distributed a secret among a group of participants each of whom receives a share of the secret. The secret is reconstructed only when a sufficient number of shares are combined together. The individual shares typically are of no use on their own in reconstructing the secret. In this context the secret may comprise the first data and the second data each being individual shares or the secret may comprise yet another share which would be held by the web application itself. In the latter case all three shares would need to be combined to re generate the secret.

The first data or the second data may be other than actual user information indeed neither the first data nor the second data needs to contain any information about the user or even items specific to the user or the user s environment as server side association or mapping to the user identity can be performed as needed. Thus the first data or the second data may constitute non user specific information about the client computing entity itself such as without limitation IP address MAC address operating system browser instance or the like. Other types of information may be used as well. Such information however must still be known to and capable of being verified by the web application but not easily produced by a third party that might be seeking to obtain authentication.

One or both of the first data string the first factor and the second data string the second factor may have an expiry time associated therewith. When the data strings are generated using digital signature schemes the expiry time may be simply concatenated with the user information and signed together. The expiry times for each factor may be the same or different. In one embodiment the expiry time for the cookie the first factor may be updated on each user login.

In one embodiment which is highly secure the first data string is formed as follows. In particular the first data and second data are each shares of a secret sharing scheme wherein the web application holds third data the first second and third data collectively comprise a secret. In this scheme the first data from the cookie also has an associated time expiry in the form of a timestamp and the first data and the time expiry are signed with the result being further secured by a public key of a public secret key pair. The secret key is known only to the web application. When the web application receives the authentication request comprising the first data string and the second data string it first applies the private key to remove the encryption layer. The web application then verifies the digital signature to obtain the first data and the timestamp. The web application then checks the timestamp to determine whether the first data should even be evaluated. If the timestamp indicates that the first data is not stale the web application re generates the secret by combining the shares and checks to see whether the resulting secret is valid for this user. If so then the user is considered to be authenticated and access to the web application permitted automatically . Of course the above example should not be taken to limit the verification step but rather is only described as one approach that may be implemented. As noted the nature of the verification will depend on the types of encoding used to generate the first data string and the second data string as well as the degree of security desired to be imposed.

The described technique provides significant advantages. It enables auto login from a notification message securely. The technique provides a useful compromise approach between a remember me type of option and automatic login links sent in the notifications. It allows quick access to the web application but does not have the drawbacks of both solutions. In particular it allows for the sending of auto login URLs safely and securely and without the attendant risks of known approaches.

The functionality described above may be implemented as a standalone approach e.g. a software based function executed by a processor or portions of it may be available as a managed service including as a web service via a SOAP XML interface . The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.

More generally computing devices within the context of the disclosed invention are each a data processing system such as shown in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including without limitation support for HTTP FTP SMTP SOAP XML JSON REST WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP FTP SMTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these known standards and protocols is presumed.

As noted above the scheme described herein may be implemented in or in conjunction with various server side architectures including simple n tier architectures web portals federated systems and the like. The proxy may be located in a domain that differs from the domain of one or more back end applications and thus the techniques herein may be practiced in a loosely coupled server including a cloud based environment. The proxy itself may be hosted in the cloud in which case it can provide single sign on to applications running in a third party environment as well as the single sign off functionality described herein.

Still more generally the subject matter described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the function is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore as noted above the auto login from a notification message can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The computer readable medium is a tangible item.

The computer program product may be a product having program instructions or program code to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.

In a representative embodiment the cookie generating storing and authentication request processing components are implemented in a special purpose computer preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors and the software may be implemented as one or more computer programs. Collectively this special purpose hardware and software comprises a dynamic web session clean up framework that provides single sign off in a client or proxy as has been described above.

The function may be implemented as an adjunct or extension to an existing access manager or policy management solution.

The approach is not limited on the server side to a web application. Any server application may be used.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

As used herein the client side application should be broadly construed to refer to an application a page associated with that application or some other resource or function invoked by a client side request to the application. A browser as used herein is not intended to refer to any specific browser e.g. Internet Explorer Safari FireFox or the like but should be broadly construed to refer to any client side rendering engine that can access and display Internet accessible resources. Further while typically the client server interactions occur using HTTP this is not a limitation either. The client server interaction may be formatted to conform to the Simple Object Access Protocol SOAP or JavaScript Object Notation JSON and travel over HTTP over the public Internet FTP or any other reliable transport mechanism such as IBM MQSeries technologies and CORBA for transport over an enterprise intranet may be used. Also the term web site or service provider should be broadly construed to cover a web site a set of linked web pages a domain at a given web site or server a trust domain associated with a server or set of servers or the like. A service provider domain may include a web site or a portion of a web site. Any application or functionality described herein may be implemented as native code by providing hooks into another application by facilitating use of the mechanism as a plug in by linking to the mechanism and the like.

The techniques disclosed herein are not limited to a Web based portal having a point of contact that provides authentication session management and authorization but this will be a typical implementation. As noted the above described function may be used in any system device portal site or the like wherein server set session management data might be re used either by an original user in a different session or by another user through the same client browser. More generally the described technique is designed for use in any operating environment wherein given information including without limitation session management data is not intended to persist across applications or sessions but ends up doing so because of patterns of client re use and or application level granularity of session information.

The term cookie should be broadly construed to refer to an HTTP cookie RFC 2109 or more generally any data structure that includes session specific data associated with the server side instance that returns that data structure.

In the client side embodiment the functionality may be implemented using AJAX or other client side technologies.

