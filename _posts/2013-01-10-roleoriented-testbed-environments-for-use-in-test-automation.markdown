---

title: Role-oriented testbed environments for use in test automation
abstract: In managing testing on a testbed environment a test automator executes an operation specified in a test script to be performed on a testbed environment, wherein the operation refers to a particular role identifier identifying one of a plurality of roles hosted within the testbed environment by at least one host in the testbed environment, wherein the operation does not refer to any of the at least one host. The test automator performs the operation on a particular host of the at least one host of the testbed environment using at least one value from a host description file for calling the particular host assigned to the particular role identifier in a configuration file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164879&OS=09164879&RS=09164879
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09164879
owner_city: Armonk
owner_country: US
publication_date: 20130110
---
This application is a continuation of commonly assigned U.S. patent application Ser. No. 13 710 418 filed Dec. 10 2012 which is hereby incorporated herein by reference.

The embodiment of the invention relates generally to test automation and particularly to managing testbed environments as role oriented testbed environments for use in test automation.

Test automation refers to the use of test software or a test script separate from the software being tested to control the execution of the test on the software being tested. The software being tested and the platform upon which the tested software runs is referred to as a testbed environment. In a distributed software environment of multiple autonomous software components running on one or more systems that communicate with one another the testbed environment for a distributed software environment is a complex environment where the more complex the testbed environment the greater the time overhead associated with coding test software to test the test bed environment.

Test automation software that is parameter based uses single variables in the code for the test software to control logic flow of the test software on a particular configuration of host platforms in a particular testbed environment. Coding a parameter based test automation to run on a particular configuration of host platforms of a distributed software environment using single variables to control logic flow for the test software referring to specific host platforms requires a significant number of parameters and complex procedural scripting and results in test software that is inflexible for testing the software components distributed across different host platforms and test software that is difficult to maintain in response to changes within the testbed environment.

In view of the foregoing there is a need for a method system and computer program product for defining test bed environments as role oriented testbed environments for use in test automation to allow test scripts to call roles rather than single variables specifying host platforms when testing a distributed software environment to provide flexible maintainable test software.

In one embodiment a method for managing testing on a testbed environment is directed to executing by a test automator an operation specified in a test script to be performed on a testbed environment wherein in the test script the operation refers to a particular role identifier only identifying one of a plurality of roles hosted within the testbed environment by at least one host in the testbed environment from among a plurality of hosts. The method is directed to performing by the test automator the operation on a particular host of the plurality of hosts of the testbed environment using at least one value from a host description file for calling a particular host identifier for the particular host that is assigned to the particular role identifier in a configuration file each of the configuration file the host description file and the test script specified in separate files.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In addition in the following description for purposes of explanation numerous systems are described. It is important to note and it will be apparent to one skilled in the art that the present invention may execute in a variety of systems including a variety of computer systems and electronic devices operating any number of different types of operating systems.

In the example each of host computer system host computer system and host computer system while running software that may be under test by automation executor do not have any component of test script or any other testing software used by test automator running on the host computer systems. For each of host computer system host computer system and host computer system the interactions between test automator and each of the host systems is performed by automation executor with the API appropriate to drive the software under test and not by automation executor calling any separate testing software on any of the host computer systems. In the example automation executor interacts with one or more APIs of the software implemented on each host computer system such as API API and API to run operations of test script on the software implemented on each host computer system.

In the example a distributed application may include software that when operating on a computer system enables the computer system to perform or one more roles such as server roles of a content server a database server and a presentation server . In other embodiments distributed application may enable additional or alternate types of roles under server roles . Server roles may also represent domains or middleware software layers that run in a layer above an operating system platform and support one or more transactional application programs. In one example the server role of presentation server may be implemented through a distributed WebSphere Application Server WAS the server role of content server may be implemented through an application service provider including but not limited to a Websphere MQ messaging server and the server role of database server may implement a backend to a database such as DB2 running on a Z OS backend.

In the example in one topology example illustrated at reference numeral when implemented server roles of distributed application may be distributed across a single host computer system such as host computer system HOST 1 wherein software represents multiple autonomous software components that when operating on host computer system enable host computer system to operate server roles of content server database server and presentation server . In another topology example illustrated at reference numeral distributed application may be distributed across multiple host computer systems such as host computer system HOST 1 host computer system HOST 2 and host computer system HOST 3 wherein software represents software components that when operating on host computer system enable host computer system to operate in the server role of content server wherein software represents software components that when operating on host computer system enable host computer system to operate in the server role of database server and wherein software represents software components that when operating on host computer system enable host computer system to operate in the server role of presentation server . In other embodiments server roles of distributed application may be hosted by one or more host computer systems in additional or alternate topologies.

In the example test automator includes a configuration manager for managing access to one or more role oriented configuration files . In the example role oriented configuration files identify and define one or more testbeds from the perspective of the one or more server roles for one or more distributed applications present in the one or more testbeds. In the example role oriented configuration files include one or more of a role identification file for identifying and defining each of the server roles of a distributed application under test a testbed description file for identifying the host computer systems currently assigned to each server role for a particular testbed and host description files for describing each host computer system. In additional or alternate examples role oriented configuration files may include additional or alternate types of files.

Role identification file identifies and defines a role variable for each type of server role of a distributed application included in a testbed independent of any host system on which the distributed application is running. In the example role identification file reflects server role of distributed application and an assignment of ROLE 1 to the server role of content server an assignment of ROLE 2 to the server role of database server and an assignment of ROLE 3 to the server role of presentation server .

Testbed description file identifies and defines for a testbed the one or more host computer systems currently hosting each server role for the testbed. The assignments illustrated at reference numerals and illustrates examples of different server role assignments that may be assigned to reflect the current topology of a testbed. The example illustrated at reference numeral reflects the server role assignments for distributed application when distributed in the topology illustrated at reference numeral wherein ROLE 1 ROLE 2 and ROLE 3 are assigned to HOST 1. The example illustrated at reference numeral reflects the server role assignments for distributed application when distributed in the topology illustrated at reference numeral wherein ROLE 1 is assigned to HOST 1 ROLE 2 is assigned to HOST 2 and ROLE 3 is assigned to HOST 3.

Host description files define for each host referred to in testbed description file a description of the host computer system with the data required to interact with the server roles hosted by the host computer system through values and concrete descriptors. In the example for topology host description files may include a HOST 1 description file that contains the data required to interact with a content server a database server and a presentation server. In the example for topology host description files may include a HOST 1 description file that contains the data required to interact with a content server a HOST 2 description file that contains the data required to interact with a database server and a HOST 3 description file that contains the data required to interact with a presentation server.

In the example a configuration manager manages defining role oriented testbed is role oriented configuration files . In one example a user specifies the values in one or more of testbed description file and host description files for a testbed by specifying the text in each of the files. In another example configuration manager may access values in one or more of testbed description file and host description files through user selections entered through a graphical user interface managed by a UI controller . In another example configuration manager may access a current topology mapping of a testbed from an external management service for an environment supporting distributed application such as the IBM Tivoli Composite Application Manager ITCAM which identifies a topology of a distributed application environment by server roles and host systems or that identifies host system values within a distributed application environment and configuration manager may automatically define a testbed by server role in testbed description file from the values supplied by the external management service or automatically generate host description files from the host system values supplied by the external management service.

In the example configuration manager manages on execution of test script by automation executor the abstraction between the server roles referred to in test script and the host computer systems currently hosting the server roles for a testbed. In one example configuration manager on load of test script reads the testbed description file for the particular testbed under execution to identify the server roles and to identify the one or more host computer systems currently assigned to the server roles reads the one or more host description files for the particular testbed and instantiates entities as defined in test script for each server role using the particular host description file from host description files for the host assigned to each server role. When test script requests performance of an operation on a server role entity automation executor manages the logical layer between test script and the particular testbed using the instantiated entity for the server role to properly access the host description data for the host assigned to the server role to send calls to one or more APIs at an identified host computer system assigned to the server role of the particular testbed.

In the example test script may include instructions that reference one or more of the server roles defined within role oriented configuration files for a testbed. By using instructions within test script that reference one or more of the server roles defined within role oriented configuration files for a testbed a same test script may be written for automation executor to run on any distributed application with the particular set of server roles defined in role oriented configuration files regardless of the topology of the host computer systems on which the distributed application runs. By test script referring to server roles of a distributed application under test rather than using parameters that reference specific host computer systems across which a distributed application runs test script is flexible and can be run by automation executor to test distributed applications with a same set of server roles running on many different host computer systems and on many different host computer system topologies where only role oriented configuration files need to be updated reflect the roles assigned to different host computer systems and the descriptions of different host computer systems. By test script referring to server roles of a distributed application under test if changes are made to the one or more of the underlying host computer systems hosting the distributed application only role oriented configuration files need to be updated to reflect the changes to the underlying host computer systems not test script .

In contrast if test script includes parameters referencing one or more host computer systems hosting the software under test rather than referencing one or more server roles defined in role oriented configuration files while test script would be executable by automation executor without management by configuration manager test script is only executable by automation executor on the selection of one or more host computer systems defined and described in test script a separate version of test script must be coded for each separate testbed of one or more selected host computer systems on which a distributed application under test is configured to run and each separate version of test script generated for each separate testbed would have to be updated to reflect any changes to underlying host systems. In addition if test script includes parameters referencing one or more host computer systems rather than referencing one or more server roles defined in role oriented configuration files test script also includes scripts and other code specific to a particular host computer system that increases the size and complexity of test script which also has to be separate coded for each separate testbed of one or more selected host computer systems on which a distributed application under test is configured to run.

In the example role oriented configuration files is illustrated within test automator however role oriented configurations files may be logically or physically located in one or more locations accessible to test automator and may be accessed by multiple test automators. In one example role oriented configuration files are located in a predefined centralized storage location accessible to one or more test automators and role oriented configuration files may include files for one or more testbeds. In addition test automator may access different selections of the files within role oriented configuration files from different storage locations.

In the example test automator may also include user interface UI controller . UI controller manages a testbed environment defined by role oriented configuration files by providing one or more types of views of the testbed including but not limited to a logical view of the testbed and values assigned to individual hosts in the testbed. In addition UI controller may manage one or more interfaces through which a user may select one or more values within role oriented configurations files and through which a user may view and interact with results generated by test automator .

In the example test automator accesses role oriented configuration files which include but are not limited to a testbed description file and host description files .

In the example testbed description file defines a testbed named RT RH564 . As illustrated at reference numeral the TB62 testbed server roles include MQSERVERHOST1 MQSERVERHOST2 TTASHOST1 and TTASHOST2 . In one example server roles MQSERVERHOST1 and MQSERVERHOST2 each represent server roles of application service providers providing message oriented middleware such as through a Websphere MQ messaging server and server roles TTASHOST1 and TTASHOST2 each represent server roles of transaction collectors such as through a Transaction Tracking API server TTAS . As illustrated at reference numeral a host HP80TEST is assigned to the server role MQSERVERHOST1 a host IBMX3250TEST01 is assigned to the server role MQSERVERHOST2 a host IBMX3250TEST09 is assigned to the server role TTASHOST1 and a host IBMC3250TEST09 is assigned to the server role TTASHOST2 . As illustrated in testbed description file the testbed roles and entity assignments to the testbeds are reflected by the entries of TB64.MQSERVERHOST1 HP80TEST . TB64.MQSERVERHOST2 IBMX3250TEST01 TB64.TTASHOST1 IBMX3250TEST09 and TB64.TTASHOST2 IBMX3250TEST09 .

In the example host description files includes a description file for host HP80TEST named HP80TEST.PROPS a description file for host IBMX3250TEST01 named IBMX3250TEST01.PROPS and a description file for host IBMX3250TEST09 named IBMX3250TEST09.PROPS .

In the example automation executor executes test script and sends API calls to instances of the distributed application across one or more hosts by server role with configuration manager managing the abstraction between server roles referred to in test script and hosts assigned to server roles based on testbed role oriented configuration files . In the example test script refers to testbed RT RH564 therefore configuration manager reads testbed description file and instantiates instances of each server role as entities defined in test script based on host description files for the current execution of test scrip . For example as illustrated at reference numeral configuration manager may instantiate an entity for server role TTASHOST1 named mTtasSvr1 using the command mTtasSvr1 this.getConfig getHost TTASHOST1 triggering configuration manager to create an instance of mTtasSvr1 referring to the server role TTASHOST1 which is hosted by host IBMX3250TEST09 using the host description file of IBMX3250TEST09.PROPS for host IBMX3250TEST09 based on testbed role oriented configuration files . In another example illustrated at reference numeral configuration manager may instantiate an entity for server role TTASHOST2 named mTtasSvr2 using the command mTtasSvr2 this.getConfig getHost TTASHOST2 triggering configuration manager to create an instance of mTtasSvr2 referring to the server role TTASHOST2 which is also hosted by host IBMX3250TEST09 using the host description file of IBMX3250TEST09.PROPS for host IBMX3250TEST09 based on testbed role oriented configuration files . In another example illustrated at reference numeral configuration manager may instantiate an entity for the server role MQSERVERHOST1 named mMQSvrHost using the command mMQSvrHost this.getConfig getHost MQSERVERHOST1 triggering configuration manager to create an instance of mMQSvrHost referring to the server role MQSERVERHOST1 which is hosted by host HP80TEST using the host description file of HP80TEST.PROPS for host HP80TEST based on testbed role oriented configuration files . By instantiating entities for server roles on load of a testbed the entities are available for use for managing the abstraction between server roles and hosts for the current execution of test script on the testbed.

In the example after instantiating entities for each of the server roles automation executor may run tests from test script on the testbed by acting on these server role entities as illustrated at reference numeral . For example for a command of try ttas1MaxidT0 eventStaf.getMaxId mTtasSvr1 mMQSvrHost catch Exception e ttas1MaxidT0 0 configuration manager manages the abstraction between the server role entity mTtasSvr1 for server role TTASHOST1 using the values in host description file IBMX3250TEST09 and manages the abstraction between the server role entity mMQSvrHost for server role mQServerHost1 using the values in host description file HP80TEST . By test script referring to server roles through server role entities and automation executor enabled to act on server role entities through management of the server roles and associated hosts by configuration manager the code in test script is simplified to refer to server roles independent of any topology hosts of the software performing the server roles. If the topology of hosts assigned to the server roles for a testbed changes or the values in the definition of a particular host changes only testbed role oriented configuration file needs to be changed to reflect the changes not test script making test script flexible for use across testbeds with a same set of server roles distributed across host systems configured in different topologies.

In the example as illustrated at reference numeral since all the values of a testbed configuration are defined in testbed role oriented configuration files rather than within test script all the values of a testbed configuration can be encapsulated using simple commands such as Config config new Config String value config.getValue MYPARAM or String hostValue config.getHostValue MYPARAM ROLE NAME and if the product function changes it is easier to refactor the code to accommodate the changes. In the example the value MYPARAM may represent whatever value is required such as tmpDir where the simple commands used would read String value config.getValue tmpDir and String hostValue config.getHostValue tmpDir TTASHOST1 . In contrast if test script were parameter based and used single variables referring to hosts the values of a testbed configuration would not be encapsulated leading to verbose procedural scripts for each host included within test script which would make test script inflexible and difficult to maintain.

In the example a view includes a logical view of a testbed defined in role oriented configuration files. In the example the testbed named RT RH564 is illustrated by a folder . Folder is opened and as illustrated at reference numeral a separate folder is illustrated for each of the server roles assigned to the testbed in testbed description file and of the host assigned to each server role. As illustrated at reference numeral a separate folder identifies each of the server role and host assignments in testbed description file illustrated as a folder named MQSERVERHOST1 HP80TEST a folder named MQSERVERHOST2 IBMX3250TEST01 a folder named TTASHOST1 IBMX3250TEST09 and a folder named TTASHOST2 IBMX3250TEST09 .

In the example a view includes a view of the values assigned to each host assigned to each server role from the one or more host description files. In the example folder identifying server host HP80TEST is opened and as illustrated at reference numeral a separate file is illustrated for one or more of the values assigned to the host in host description file in the form of name value pairs which are represented by name value As illustrated at reference numeral a separate file identifies a selection of examples of the values assigned to the host including a variable named logPath which has a value of targetMachine logs a variable named ITMName which has a value of hp80test a variable named tmpDir which as a value of tmp a variable named Name which has a value of HP80TEST a variable named Address which has a value of XXX.XX.X.X a variable named TEMS which has a value of TEMS a variable named kitDir which has a value of tmps kit a variable named OS which has a value of unix and a variable named TTcomponents which has a value of th . While in the example each file in the form of a name value pair is represented by a graphical file illustrated in a graphical user interface in other embodiments in additional or alternate embodiments the name value pairs may be output in other formats within a graphical user interface or within other types of interfaces.

In the example a user may select to adjust the folders under folder using one or more commands or graphical user interface tools for example by adding a new server role and host assignment to the testbed by selecting to add a new folder under folder and naming the folder with the new server role and host identifiers by adjusting a server role or host assignment to the testbed by adjusting the names assigned to a folder under folder or by removing a server role and host assignment of the testbed by deleting a folder under folder . In the example a user may select to adjust the files under folder for example by adding a new value to a host by selecting to add a new file under folder and naming the file with the new value by adjusting a host value by adjusting the name assigned to a file under folder or by removing a host value by deleting a file under folder . In one example UI controller directs configuration manager to adjust the contents of role oriented configuration files based on user changes to the folders displayed under view and based on user changes to the files displayed under view .

As illustrated at reference numeral a user may specify the name of a testbed. In one example a user may select to open testbed description file interface for an existing testbed definition or a user may select to start a new testbed definition.

Computer system includes a bus or other communication device for communicating information within computer system and at least one hardware processing device such as processor coupled to bus for processing information. Bus preferably includes low latency and higher latency paths that are connected by bridges and adapters and controlled within computer system by multiple bus controllers. When implemented as a server or node computer system may include multiple processors designed to improve network servicing power. Where multiple processors share bus additional controllers not depicted for managing bus access and locks may be implemented.

Processor may be at least one general purpose processor such as IBM PowerPC processor that during normal operation processes data under the control of software which may include at least one of application software an operating system middleware and other code and computer executable programs accessible from a dynamic storage device such as random access memory RAM a static storage device such as Read Only Memory ROM a data storage device such as mass storage device or other data storage medium. Software may include but is not limited to code applications protocols interfaces and processes for controlling one or more systems within a network including but not limited to an adapter a switch a server a cluster system and a grid environment.

In one embodiment the operations performed by processor may control the operations of flowchart of and other operations described herein. Operations performed by processor may be requested by software or other code or the steps of one embodiment of the invention might be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Those of ordinary skill in the art will appreciate that aspects of one embodiment of the invention may be embodied as a system method or computer program product. Accordingly aspects of one embodiment of the invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment containing software and hardware aspects that may all generally be referred to herein as circuit module or system. Furthermore aspects of one embodiment of the invention may take the form of a computer program product embodied in one or more tangible computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk such as mass storage device a random access memory RAM such as RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction executing system apparatus or device.

A computer readable signal medium may include a propagated data signal with the computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction executable system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations of on embodiment of the invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer such as computer system partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server such as server . In the latter scenario the remote computer may be connected to the user s computer through any type of network such as network through a communication interface such as network interface over a network link that may be connected for example to network .

In the example network interface includes an adapter for connecting computer system to network through a link and for communicatively connecting computer system to server or other computing systems via network . Although not depicted network interface may include additional software such as device drivers additional hardware and other controllers that enable communication. When implemented as a server computer system may include multiple communication interfaces accessible via multiple peripheral component interconnect PCI bus bridges connected to an input output controller for example. In this manner computer system allows connections to multiple clients via multiple separate ports and each port may also support multiple connections to multiple clients.

One embodiment of the invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. Those of ordinary skill in the art will appreciate that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer such as computer system or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer such as computer system or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Network interface the network link to network and network may use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network the network link to network and network interface which carry the digital data to and from computer system may be forms of carrier waves transporting the information.

In addition computer system may include multiple peripheral components that facilitate input and output. These peripheral components are connected to multiple controllers adapters and expansion slots such as input output I O interface coupled to one of the multiple levels of bus . For example input device may include for example a microphone a video capture device an image scanning system a keyboard a mouse or other input peripheral device communicatively enabled on bus via I O interface controlling inputs. In addition for example output device communicatively enabled on bus via I O interface for controlling outputs may include for example one or more graphical display devices audio speakers and tactile detectable output interfaces but may also include other output interfaces. In alternate embodiments of the present invention additional or alternate input and output peripheral components may be added.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. Furthermore those of ordinary skill in the art will appreciate that the depicted example is not meant to imply architectural limitations with respect to the present invention.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact occur substantially concurrently or the blocks may sometimes occur in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the one or more embodiments of the invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

While the invention has been particularly shown and described with reference to one or more embodiments it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

