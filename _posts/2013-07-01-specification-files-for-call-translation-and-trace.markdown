---

title: Specification files for call translation and trace
abstract: A method and apparatus for storing a function specification file is described. In an exemplary method, the function specification field is capable for providing other software to facilitate execution of an application in a second operating system with the presence of a first operating system and the application is compiled for the first operating system. In another exemplary method, a preprocessor receives the function specification file comprising function definition data for a library function. The preprocessor processes the function definition data to generate header information and function code for the function. In another exemplary method, the preprocessor generates an automatic logging framework for the interposing library based on the function definition data. Further, a function in an interposing library logs calls to a corresponding library function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058131&OS=09058131&RS=09058131
owner: Apple Inc.
number: 09058131
owner_city: Cupertino
owner_country: US
publication_date: 20130701
---
This application is a continuation of co pending U.S. application Ser. No. 12 174 444 filed on Jul. 16 2008.

This invention relates generally to application execution and more particularly to function call translation and trace and in some embodiments to the automatic generation of libraries.

When an operating system executes an application the application will make function calls to functions that are provided by a function library. An application is a computer program that is compiled and linked to execute under a particular operating system OS . The OS is software that starts up a computer or other data processing system and manages the functions and or resources of the computer or other data processing system. A function library is a collection of functions that provides services to the application. Libraries can be statically linked or dynamically linked at runtime. A statically linked library is linked at compile time and is part of the application. A dynamically linked library is loaded into or used by the application when the application is executing. Examples of dynamically linked libraries are runtime libraries Dynamic Link Libraries DLL and operating system OS services. Runtime libraries DLL and OS services are collectively referred to herein as systems libraries. In one embodiment a runtime library is a computer program library used by a compiler to implement functions built into a programming language during execution of an application. A DLL is a function library that is loaded into the application at runtime. DLL functions can be operating system specific application specific etc. In one embodiment OS services are services used by an application during runtime and are specific to a particular OS. OS services can be services to manage system resources such as memory filesystem resources power states graphical user interfaces other resources perform inter application communications etc.

Alternatively OS2 service environment provides a set of application programming interfaces APIs for application without the need for a version of OS2 executing in the OS2 service environment. In this embodiment OS2 service environment loads and executes an OS2 based application using OS2 library in the OS1 environment. The phrase OS2 based application means that this application is compiled for and intended to execute under the OS2 operating system. In addition OS2 service environment can also use OS2 libraries such as OS2 services DLLs and or runtime libraries. An example of this embodiment known in the art is WINE see for example http www.winehq.org .

A method and apparatus for using a function specification file according to at least certain embodiments is described. In an exemplary method a function specification file is capable of providing other software to facilitate execution of an application in a second operating system without the presence of a first operating system in this method the application is compiled for the first operating system. In another exemplary method a preprocessor receives the function specification file comprising function definition data for a library function. The preprocessor processes the function definition data to generate header information and function code for the library function. In another exemplary method the preprocessor generates an automatic logging framework for the interposing library based on the function definition data. Further a function in an interposing library logs calls to a corresponding library function.

In the following detailed description of embodiments of the invention reference is made to the accompanying drawings in which like references indicate similar elements and in which is shown by way of illustration specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical mechanical electrical functional and other changes may be made without departing from the scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

Methods and apparatus to define and generate library functions from a function specification are described herein. illustrates an embodiment of a method to generate libraries from a function specification file. At least in certain embodiments these libraries may be referred to as interposing libraries that are used to support the operation execution of an application designed for a first OS on a system co executing a second OS without requiring an executing copy of the first OS. Furthermore the method generates header information and function code from the function specification file. further illustrates one embodiment of a method to generate header information and function code in which the method preprocesses the function specification file. illustrates one embodiment of a method to log calls to function libraries using interposing libraries generated from the function specification file. illustrates one embodiment of a method to generate and compare logs from an application executing on two different operating systems. illustrate one embodiment of application and execution system that implement and or .

In one embodiment interposing library translates calls to functions for OS2 services to corresponding functions that support those OS2 services in OS1 services library . In one embodiment there is one interposing library that translates the functions calls to OS1 service library . Alternatively there are several libraries that each translates one or more functions calls to one or more OS1 service libraries .

In one embodiment DLL interposing library translates calls to functions contained in DLLs to corresponding functions that support the corresponding function in DLL for application . A DLL can be a DLL compiled for OS1 OS2 or some other operating system. In one embodiment DLL interposing library exports the symbols of the functions in DLL . In one embodiment there is one DLL interposing library that translates the functions calls to corresponding functions in DLL library . Alternatively there are DLL interposing libraries that each translate one or more functions calls to one or more DLL libraries .

In at block method creates the function specification file. In one embodiment the function specification file comprises function definition data that indicates to method to generate software to perform a function call translation for a library function associated with operating system OS2. In one embodiment the function definition data comprises data for each function that defines the function call to be translated. For each function the function definition data can comprise one or more of a function prototype a keyword a library name optional parameters and other information used to support interposing library generation. In one embodiment the function prototype is a programming language prototype known in the art that defines the function name the function parameter list and the return value type. Examples of programming language prototypes supported are C C JAVA PASCAL etc. The keyword is a word or phrase in the function definition data that is used by method to modify the function headers and code generated by method . In one embodiment a keyword can be used to indicate to method to add stack checking code symbol export code etc. Method uses stack checking code to enforce a particular stack variable management scheme used by OS1 or OS2. This code is useful for generating libraries used in one operating system for applications based on or written for another operating system. Different operating systems can have different conventions for when to put function parameters onto the call stack and when to take these parameters off the stack. Using stack checking specifies a common action to be taken for call stack manipulation. Method uses a symbol export keyword to generate a function code to support exporting of the function name and other function symbols in order to make these symbols available to the calling application. Function definitions are further described with reference to at blocks and below.

In addition the function definition data can include optional parameters. In one embodiment these parameters can include parameters to modify function template generation. Method can use some of these parameters to assist in generating many functions from one function definition. For example method can generate multiple string functions from a single function definition to handle different type of strings parameters and return values e.g. ASCII Unicode etc. . Function call template generation is further described in at block below.

At block method stores the function specification file. Method can stores this file on a hard disk in memory in flash storage etc. on a computer other storage device or other data processing system that is local or remote to the processor executing method .

At block method preprocesses the function specification file to generate function code and header information based on the function definition data in the function specification file. Preprocessing is the action of processing input data to produce an output that is used by another program. In one embodiment method generates the header information using the function definition data. As in known in the art header information is a forward declaration of a function a variable and or other identifiers. This information can be stored in a file in memory etc. Compilers use header information to compile function code to produce libraries executables applications etc.

In addition method generates function code using the function definition data. In one embodiment the function code is a complete implementation of that function which includes the function call definition parameter definition logging framework debugging framework and other function software that allows a developer to compile and use the function code without further editing. In one embodiment this generated function code supports call translation. Function call translation is translating a call to a function from an application to a call to function in a library that is part of the operating system executing that application. For example a function in a system library with the same name and parameter list as in the function definition data can be generated in this embodiment. Alternatively method can generate function code that is a partial implementation of the function. In this embodiment the developer edits the generated function code to fully implement the function. In another embodiment method generates code that instantiates objects described in the function definition at runtime.

At block method compiles the function code and header information into libraries. For example method can generate interposing runtime libraries OS1 services and or DLLs as described with reference to . As is known in the art method uses a compiler to generate the library. Method uses these interposing libraries to execute an application at block . In one embodiment method executes an application with an interposing library in the same operation system used to compile the application. In this embodiment the interposing library can be used to generate a detailed trace of the system library use by the executing application. Alternatively method executes an application with the interposing library in a different operating system than the operating system used to compile the application. The different operating system can be the same type but a different version of the operating system used to generate the interposing library. For example the operating system executing the application can be the MAC OS X 10.5.1 operating system provided by APPLE INCORPORATED whereas the application is compiled for MAC OS X 10.5.0. Alternatively the different operating system can be a different type of operating system from the same or different vendor. For example the operating system executing the application can be the MACINTOSH OS 10.5.1 and the application is compiled for WINDOWS XP operating system provided by MICROSOFT CORPORATION. Examples of different OS are but not limited to MAC OS 9 MAC OS X 10.x WINDOWS 95 WINDOWS 98 WINDOWS XP WINDOWS VISTA the many different types of LINUX and UNIX known in the art etc.

In method uses the function specification file to generate interposing libraries that can be used by one or more applications such as application in to make and log calls to corresponding functions in OS Service runtime and or DLL libraries. In this Figure at block method preprocessed the function specification to generate header information and function code to support generation of the interposing libraries. This preprocessing function is typically one of a set of developer tools. is a flow diagram of one embodiment of a method to generate function code and header information from a function specification file. Method can be used to generate header information and function code to support execution of applications that are compiled for the same or different operation system that method runs under. In the discussion of and other Figures herein examples are given with reference to the C programming language. This invention is not limited to this programming language because as one of skill in the art would recognize this invention can be used with other programming languages known in the art such as C JAVA PASCAL etc.

In at block method receives the function specification file definitions. In one embodiment method receives the function specification file definitions by retrieving the definitions from the function specification file stored in disk memory etc. as described in block . Method can receive one or more function definitions.

Method executes a processing loop at blocks to to generate the function code and header information for each function definition received. At block method parses the function definition using one of the parsing schemes known in the art. By parsing method determines the function prototype the keyword the library name optional parameters and or other information associated with each function definition.

At block method determines if the function definition is a runtime library function call definition. In one embodiment method determines if the function prototype of the function definition is the same prototype as a function in the named library. If it is method generates the function code and header information for the runtime definition at block . For example method receives the function definition 

As described above at block method generates the header information and function code for the runtime library function call definition determined at block . In one embodiment and using the example function definition from above method generates header information for function2 as 

In addition method generates the function information for the interposing runtime library function defined in the function definition. In one embodiment and using the example function definition from above method generates the function code with the structure comprising 

If the function definition is not a runtime library function call definition method determines if the function definition is a DLL function call definition at block . In one embodiment method determines if the function definition is a function call to a DLL function by the presence of the keyword reexport . This keyword indicates to export the symbol of the function call used in the DLL to calling application. If the function definition is such a function call method generates the function code and header information at block . For example method receives the function definition 

As described above at block method generates the header information and function code for the DLL function call definition determined at block . In one embodiment and using the DLL function definition above method generates header information 

In addition method generates the function code for the DLL function call definition. In one embodiment and using the example function definition from above method generates the function code with the structure comprising 

In addition method generates DLL Load Code and DLL Function Call Code that sets up the call to the DLL function and calls that DLL function. DLL Load Code is a set of code that loads the appropriate DLL. DLL can be a DLL of the operating system used by method or can be a DLL compiled for another operating system different versions types etc. . DLL Function Call Code is a set of code that calls the function in the loaded DLL.

If the function definition is not a DLL function call definition method determines if the function definition is a function call template definition at block . A function definition indicates a function call template definition by certain types of parameters and or function names. In one embodiment a function call template definition is indicated by presence of string variables in the function definition parameter list function name and or combination thereof. For example the following function definitions can be function call template definitions 

At block method generates the header information and function code information for the function calls defined in the function call template. In one embodiment and using the function7 function call template definition from above method generates the following header information 

In one embodiment method uses the optional parameters genaw nocf and callthrough to control which functions are generated. In this embodiment genaw indicates to generate a single function named impl functionnameCF and uses strings of type CFMutableStringRef. Conversely nocf indicates to generate two functions named impl functionnameA and impl functionnameW with strings of type LPSTR and LPWSTR respectively. Callthrough indicates to generate a single function that takes an extra parameter indicating which entry point A W or CF was actually called.

In addition method generates the function information for each of the functions defined in the function call template definition. In one embodiment and using one of the example functions generated from a function call template definition method generates function code with the structure comprising 

If the function definition is not a function call template definition to OS Services method determines if the function definition is a basic function call definition to an OS service at block . In one embodiment a basic function definition to an OS service is a function definition for a call translation to that OS service. The OS service can be for the same or different OS that method executes under. In one embodiment a basic function call definition indicates a function call translation using function name and prototype along with optional parameters and inline code. In alternate embodiments other function definition types can use inline code. For example the following function definitions can be basic function definitions 

At block method generates the header information and function code information for the function calls defined in the basic function definition. In one embodiment and using the function3 function definition above method generates the following header information 

In addition method generates the function information for the basic function call definition. In one embodiment and using the example function definition from above method generates function code with the structure comprising 

If the function definition is not a basic call to an OS service method determines if the function definition is an object definition. In one embodiment the object definition defines an object that is used by the same or different operating system that is executing method . For example and by way of illustration an object can be MICROSOFT WINDOWS based Component Object Model COM object as is known in the art. For example the following object definition is a COM declaration for the new object class ExampleObject1 

At block method generates the header information and object function code for the class defined in the object definition. In one embodiment and using the ExampleObject1 definition from above method generates header information for class ExampleObject1 and any inherited interface and class definitions of that class. For example method generates the following header information 

In one embodiment and using the example object definition from above method generates function code for class ExampleObject1 with the structure comprising 

If the function definition is not an object definition method signals an unsupported definition error at block . In one embodiment method signals an unsupported definition by signaling an error printing an error stopping execution etc.

At block method optionally receives manual changes to the generated function code. In one embodiment method receives changes to function call code logging code debugging code etc. In addition method integrates the changes into the generated function code. Method stores the generated header information and function code along with optional function code changes at block . The processing loop ends at block .

The automatically generated interposing libraries with the logging framework generated in can be used in many situation such as but not limited to logging calls to OS services DLLs and or runtime libraries assisting in the enabling of executing applications under a different operating system and comparing the logs of a single OS based application executing on many different operating systems.

In one embodiment the automatically generated interposing libraries support the automatic logging of OS services DLLs and or runtime libraries. This logging can be used for an application compiled with the same or different operating system from the one that controls the execution of the application. Furthermore this logging can be used to log calls to OS services DLLs and or runtime libraries by applications that are compiled with or without debug information. is a block diagram of interposing library interposing calls from application to system library in OS1 environment . In application is compiled for OS1 environment and application makes calls to OS1 based services DLLs and or runtime libraries. System library can be one or more OS1 Service DLL and or runtime libraries as described reference to and libraries and . System library further comprises function A. In one embodiment function A can implement an OS1 service or a function found in a DLL and or runtime library. Interposing library can be one or more interposing libraries for OS1 services DLLs and or runtime libraries as described with reference to and libraries and . Interposing library further comprises function B. Function B is an interposing function that corresponds to function A. In one embodiment function B is generated based on a function specification file as described in .

In application makes a call A to function A. In the absence of interposing libraries function A returns to application including any returned parameters via B. With interposing library interposing for system library OS1 environment redirects the function A calls by application to corresponding function B in interposing library via A. Function B logs this call to logging repository via B. In one embodiment function B logs the time the call was made the library function name and or the name and value of the parameters being passed to the library function B. Logging repository can be a file memory a database etc. that is used in the art to store function call logging. Function B calls function A via C.

Function B returns to function A in interposing library via A. In one embodiment function A returns parameters to function B. Function B logs any additional logging such as function A return value timestamp returned parameters etc. to logging repository via B.

In application was complied for the same operating system that executed this application. In addition in another embodiment the application can be executed using interposing libraries where the application is compiled for a different operating system than is executing it. is a block diagram of an interposing library of one operating system interposing library calls of an application that is compiled for another operating system. In application is compiled for OS2 but is loaded and executed in the OS1 environment . In one embodiment application is application . Furthermore application uses system library to implement library functions that would otherwise be provided by OS2. System library can be can be one or more OS1 Service DLL and or runtime libraries as described reference to and libraries and . System library further comprises function A. Function A can implement an OS1 service or a function found in a DLL and or runtime library. Interposing library can be one or more interposing libraries for OS1 services DLLs and or runtime libraries as described with reference to and libraries and . In one embodiment interposing library is generated using the same function definition data as interposing library described in . In this embodiment interposing library is generated for OS1 environment whereas interposing library is generated for a different OS environment. Interposing library further comprises function B. Function B is an interposing function that corresponds to function A. In one embodiment function B is generated based on a function specification file as described in .

In application makes a call A to function A. In the absence of interposing libraries function A returns to application including any returned parameters via B. With interposing library interposing for system library OS1 environment redirects the function A calls by application to corresponding function B in interposing library via A. Function B logs this call to logging repository via B. In one embodiment function B logs the time the call was made the library function name and or the name and value of the parameters being passed to the library function B. Logging repository can be a file memory database etc. that is used in the art to store function call logging. Function B calls function A via C.

Function B returns to function A in interposing library via A. In one embodiment function A returns parameters to function B. Function B logs any additional logging such as function A return value timestamp returned parameters etc. to logging repository via B.

At block method logs the call to the library function. In one embodiment method logs the call with function B B of interposing library to logging repository as described in reference to . In another embodiment method logs one some or all of the library function calls. Control of which library function calls are logged is controlled at runtime and does not require a recompile of the interposing library or the non debug application. Furthermore control of the logging function calls can be at the individual function level API level and or the library level. Method makes the call to the library function using the interposing library at block . In one embodiment method calls library function A A using interposing library function B B as described with reference to . At block method receives the return values from the called library function. In addition method receives any modified parameters that were passed to the called library function.

At block method logs the return values and the exit of the interposing library function. In one embodiment method logs passed parameters timestamp of the interposing library exit and other information relating to the interposing library function call as described in reference to . Method passes the return value and any modified parameters back to the non debug application at block .

In OS2 based application uses libraries and when executing in OS1 environment . In this Figure application passes parameters to these libraries and receives a return value and any modified parameters in return. One of the possible embodiments is that system library creates objects and passes these objects back to application via interposing library . This embodiment can be useful when application is using OS2 based services to create OS2 provided objects to application when executing in OS1 environment . For example a non MICROSOFT WINDOWS operating system can create MICROSOFT WINDOWS based COM objects using system library .

In application makes an object request A to system library . Object request can be for any type of object known the art COM Common Object Request Broker Architecture CORBA JAVA BEANS etc. Function B receives object request A and logs the object request B to logging repository . In one embodiment function B logs the object requests with time function B was called function A name and or the name and value of the parameters being passed to function A. Function B passes the object request C to function A in system library . In response to object request C function A creates the requested object. In one embodiment function A creates an object that is typically created and used in another operating system than the one that is executing application . For example and by way of illustration function A creates a COM object while executing in a non MICROSOFT WINDOWS environment. Function A returns the created object to the calling function B via A. Function B logs the created object and other information to logging repository via B. In one embodiment function B logs a string or other suitable representation of the created object to logging repository . In another embodiment function B logs the return value timestamp modified parameters etc. to logging repository . Function B returns the created object to application via C.

At block method executes OS2 based application in the OS1 environment using the interposing libraries. In one embodiment method executes OS2 based application in the OS1 environment using interposing libraries as described with reference to . In one embodiment method executes the OS2 based application in the same sequence of steps as in block in order to potentially generate the similar set of logs as in block . At block method logs function calls to OS2 services DLLs and or runtime libraries using these interposing libraries. In one embodiment method logs these function calls using interposing libraries to logging repository as described with reference to .

At block method compares the OS1 and OS2 based logs generated by interposing libraries at block and . In one embodiment method compares the two logs to determine if and where the logs diverge. This can be a debugging tool to visualize the path the application has taken across two operating systems and determine whether an error has occurred by observing the divergence of the two logs. In one embodiment the comparison process is automated with a log analyzer.

In practice the methods described herein may constitute one or more programs made up of machine executable instructions. Describing the method with reference to the flowchart in and enables one skilled in the art to develop such programs including such instructions to carry out the operations acts represented by logical blocks on suitably configured machines the processor of the machine executing the instructions from machine readable media such as RAM e.g. DRAM ROM nonvolatile storage media e.g. hard drive or CD ROM etc. . The machine executable instructions may be written in a computer programming language or may be embodied in firmware logic or in hardware circuitry. If written in a programming language conforming to a recognized standard such instructions can be executed on a variety of hardware platforms and for interface to a variety of operating systems. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application module logic . . . as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a machine causes the processor of the machine to perform an action or produce a result. It will be further appreciated that more or fewer processes may be incorporated into the methods illustrated in the flow diagrams without departing from the scope of the invention and that no particular order is implied by the arrangement of blocks shown and described herein.

The web server is typically at least one computer system which operates as a server computer system and is configured to operate with the protocols of the World Wide Web and is coupled to the Internet. Optionally the web server can be part of an ISP which provides access to the Internet for client systems. The web server is shown coupled to the server computer system which itself is coupled to web content which can be considered a form of a media database. It will be appreciated that while two computer systems and are shown in the web server system and the server computer system can be one computer system having different software components providing the web server functionality and the server functionality provided by the server computer system which will be described further below.

Client computer systems and can each with the appropriate web browsing software view HTML pages provided by the web server . The ISP provides Internet connectivity to the client computer system through the modem interface which can be considered part of the client computer system . The client computer system can be a personal computer system a network computer a Web TV system a handheld device or other such computer system. Similarly the ISP provides Internet connectivity for client systems and although as shown in the connections are not the same for these three computer systems. Client computer system is coupled through a modem interface while client computer systems and are part of a LAN. While shows the interfaces and as generically as a modem it will be appreciated that each of these interfaces can be an analog modem ISDN modem cable modem satellite transmission interface or other interfaces for coupling a computer system to other computer systems. Client computer systems and are coupled to a LAN through network interfaces and which can be Ethernet network or other network interfaces. The LAN is also coupled to a gateway computer system which can provide firewall and other Internet related services for the local area network. This gateway computer system is coupled to the ISP to provide Internet connectivity to the client computer systems and . The gateway computer system can be a conventional server computer system. Also the web server system can be a conventional server computer system.

Alternatively as well known a server computer system can be directly coupled to the LAN through a network interface to provide files and other services to the clients without the need to connect to the Internet through the gateway system . Furthermore any combination of client systems may be connected together in a peer to peer network using LAN Internet or a combination as a communications medium. Generally a peer to peer network distributes data across a network of multiple machines for storage and retrieval without the use of a central server or servers. Thus each peer network node may incorporate the functions of both the client and the server described above.

The following description of is intended to provide an overview of computer hardware and other operating components suitable for performing the methods of the invention described above but is not intended to limit the applicable environments. One of skill in the art will immediately appreciate that the embodiments of the invention can be practiced with other computer system configurations including set top boxes hand held devices consumer electronic devices multiprocessor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The embodiments of the invention can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network such as peer to peer network infrastructure.

Network computers are another type of computer system that can be used with the embodiments of the present invention. Network computers do not usually include a hard disk or other mass storage and the executable programs are loaded from a network connection into the memory for execution by the processor . A Web TV system which is known in the art is also considered to be a computer system according to the embodiments of the present invention but it may lack some of the features shown in such as certain input or output devices. A typical computer system will usually include at least a processor memory and a bus coupling the memory to the processor.

It will be appreciated that the computer system is one example of many possible computer systems which have different architectures. For example personal computers based on an Intel microprocessor often have multiple buses one of which can be an input output I O bus for the peripherals and one that directly connects the processor and the memory often referred to as a memory bus . The buses are connected together through bridge components that perform any necessary translation due to differing bus protocols.

It will also be appreciated that the computer system is controlled by operating system software which includes a file management system such as a disk operating system which is part of the operating system software. One example of an operating system software with its associated file management system software is the family of operating systems known as MAC OS X from Apple Corporation in Cupertino Calif. and their associated file management systems. The file management system is typically stored in the non volatile storage and causes the processor to execute the various acts required by the operating system to input and output data and to store data in memory including storing files on the non volatile storage .

It will be appreciated that computer system could be a camera video camera scanner or any other type image acquisition system. In one embodiment image acquisition system comprises a lens image sensor or other hardware typically associated with a camera video camera or other type if image acquisition system.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

