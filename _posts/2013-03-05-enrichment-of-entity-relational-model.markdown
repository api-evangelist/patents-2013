---

title: Enrichment of entity relational model
abstract: The present disclosure describes methods, systems, and computer program products for enriching an entity relational model. One computer-implemented method includes accessing entity relationship settings (ERS), entity relationship data (ERD), and software code with an entity relationship monitor (ERM), monitoring software code by a computer for changes related to software entities associated with the software code, interfacing with a software development tool to monitor for activity in the software development tool related to the software entities, determining that a change or activity related to the software entities has occurred, determining that a relatedness value associated with the software entities associated with the change or activity is within a relatedness threshold specified by the ERS, and performing a function associated with the determined change or activity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021432&OS=09021432&RS=09021432
owner: SAP SE
number: 09021432
owner_city: Walldorf
owner_country: DE
publication_date: 20130305
---
During software development an entity relational model is frequently used to design for example relationships associations interactions messaging and the like for software entities. Software entities may include database tables functions objects threads and other suitable entities. While current software development systems allow relationships between software entities to be defined the software development systems fail to provide proactive recommendations of required and or useful software entity relationships based upon prior defined software entity relationships. As a result required and or useful software entity relationships may be missed during software development and result in increased software development and maintenance costs decreased software development efficiency and duplicate software development efforts.

The present disclosure relates to computer implemented methods computer readable media and computer systems for enriching an entity relational model. One computer implemented method includes accessing entity relationship settings ERS entity relationship data ERD and software code with an entity relationship monitor ERM monitoring software code by a computer for changes related to software entities associated with the software code interfacing with a software development tool to monitor for activity in the software development tool related to the software entities determining that a change or activity related to the software entities has occurred determining that a relatedness value associated with the software entities associated with the change or activity is within a relatedness threshold specified by the ERS and performing a function associated with the determined change or activity.

Other implementations of this aspect include corresponding computer systems apparatuses and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes or causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other implementations can each optionally include one or more of the following features alone or in combination 

A first aspect combinable with the general implementation wherein the determining of the relatedness value associated with the software entities associated with the change or activity also includes determining that a ranking value associated with the software entities associated with the change or activity is within a ranking threshold specified by the ERS.

A second aspect combinable with any of the previous aspects wherein for detected changes to monitored software code associated with the software entities the function includes the ERM updating the ERD to reflect the detected changes to the monitored software code.

A third aspect combinable with any of the previous aspects wherein for detected activity in the software development tool associated with at least one software entity the function includes the ERM providing recommendations pertaining to a related software entity indicated in the ERD as related to the at least one software entity.

A fourth aspect combinable with any of the previous aspects further comprising accessing the ERS and the software code with an executing entity relationship engine ERE performing a baseline analysis of the software code for the presence software entities determining that a relatedness value associated with found related software entities in the baseline analysis of the software code is within a relatedness threshold specified by the ERS and generating a baseline ERD and adding the found related software entities to the generated baseline ERD.

A fifth aspect combinable with any of the previous aspects wherein the determining of a relatedness value also includes determining that a ranking value associated with the found related software entities is within a ranking threshold specified by the ERS.

A sixth aspect combinable with any of the previous aspects further comprising determining that the baseline analysis of the software code is completed.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages. First software entity relationships can be determined for existing software code to use as a baseline for proactive relational software entity recommendations. Second a software entity relationship monitor can monitor analyze changes made to system software code and dynamically and continuously update software entity relationship data for use by software developers and or other stakeholders associated with software code. Third proactive recommendations for software entities can be provided to software developers during software code development for example while developing software system models and as part of associated functions of searching for software entities and referring to software entities while defining properties and or methods. Other advantages will be apparent to those skilled in the art.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

This disclosure generally describes computer implemented methods computer program products and systems for enriching an entity relational model.

During software development an entity relationship model ERM is frequently used to design for example relationships associations interactions messaging and the like for software entities. Software entities may include database tables functions objects threads and other suitable entities. While current software development systems allow relationships between software entities to be defined the software development systems fail to provide proactive recommendations of required and or useful software entity relationships based upon prior defined software entity relationships. If for example software entity A is frequently used with software entity B relationship indicates at least an indirect relationship between the two software entities. For a software application e.g. a content provider manager under development useful information to provide to a software developer would include a proactive recommendation that if software entity A is selected to be used by the software application that the software developer may wish to also consider using software entity B. Also provided may be an indication of the strength of the relationship between software entity A and software entity B for example whether the use of software entity B is required with the use of software entity A. Other useful information could also include a ranking of the use of software entity A and software entity B in different software code.

At a high level the server is an electronic computing device operable to receive transmit process store or manage data and information associated with the example distributed computing system . Generally the server allows users to navigate to view compose modify delete and deploy documents as well as interface with various applications such as software development tools. Specifically the described computer implemented methods software and systems provide functionality for enriching an ERM. In some implementations the functionality to enrich an ERM can be provided through one or more graphical and or non graphical user interfaces GUIs .

The server is responsible for receiving requests such as requests associated with software development tools and or for specified content from one or more client applications described below associated with the client of the example distributed computing system and responding to the received requests by processing said requests and sending an appropriate response content back to the requesting client application . In addition to requests from the client requests may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers. According to one implementation server may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other suitable server.

The server includes at least a content provider manager entity relationship engine described below entity relationship monitor described below and or software development tool described below where at least a portion of the content provider manager the entity relationship engine the entity relationship monitor and or software development tool is operated using requests responses sent from to a client within and communicably coupled to the illustrated example distributed computing system using the network . In some implementations requests responses can be sent directly to server from a user accessing server directly. In some implementations the server may store a plurality of content provider managers entity relationship engines entity relationship monitors and or software development tools . In some implementations where the server includes a web server one or more of the components of the server represent web based applications accessed and executed by the client using the network or directly at the server to perform the programmed tasks or operations of the various components of server .

In some implementations any and or all of components of the server both hardware and or software may interface with each other and or the interface using an application programming interface API and or a service layer . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the example distributed computing system . The functionality of the server may be accessible for all service consumers using this service layer. Software services such as those provided by the service layer provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C or other suitable language providing data in extensible markup language XML format or other suitable format.

While illustrated as an integrated component of the server in the example distributed computing system alternative implementations may illustrate the API and or the service layer as stand alone components in relation to other components of the example distributed computing system . Moreover any or all parts of the API and or the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The server includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the example distributed computing system . The interface is used by the server for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

The server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . Generally the processor executes instructions and manipulates data to perform the operations of the server . Specifically the processor executes the functionality required to enrich an ERM.

The server also includes a memory that holds data for the server . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the example distributed computing system . While memory is illustrated as an integral component of the server in alternative implementations memory can be external to the server and or the example distributed computing system . In some implementations the memory i.e. the content repository that holds the description and or data for all objects in the ERP includes one or more instances of entity relationship settings entity relationship data and or software code .

The entity relationship settings ERS may represent any suitable conditions parameters variables algorithms instructions constraints references data flags and any other appropriate information used to define software entities determine whether software entities are indicated by an entity relationship engine ERE and or an entity relationship monitor ERM as related and how relationships are ranked against each other sensitivity how the determined relatedness is to be described and or what data is recorded in the entity relationship data . For example if a software entity A is physically referred to in a line of software code that is directly adjacent to line of software code referring to software entity B the sensitivity settings of the ERS may indicate to the ERE and or ERM that software entity A and software entity B within a particular function Func1 associated with an application App1 further associated with a module Accounting should be indicated in the ERD as highly related and with an associated high value relatedness ranking. On the contrary if in the same module Client the software entity A is referred to in a line of software code in function Func1 and application App1 and the software entity B is referred to in a line of software code in function Func4 and application App2 the sensitivity settings in the ERS may indicate to the ERE and or ERM that software entity A and software entity B should be indicated in the ERD with a low relatedness or with no relatedness and with a corresponding associated low value relatedness ranking. In some implementations the ERS can be accessed created updated and or deleted by the content provider manager ERE ERM and or a software development tool . In some implementations the client can access create update and or delete the ERS using one or more components of the example distributed computing system . While illustrated as integral to memory or server in some implementations the ERS can stand apart from memory and or the server as long as it is accessible to one or more components of the example distributed computing system using network or other suitable access method. In some implementations the ERS can be stored in a database table flat file text file binary file and or any other suitable type file and in any specific data structure.

The entity relationship data ERD is any type of data in any form used to represent relatedness of software entities. For example continuing with the example provided above if software entity A and software entity B are determined to be highly related the ERD can contain both how and to what degree the software entities A and B are related. How the software entities are related may include for example the names of the software entities A and B their associated function e.g. Func1 application e.g. App1 and module e.g. Accounting . To what degree the software entities are related may include for example a relatedness value e.g. physical proximity within same module low medium high etc. and a relatedness ranking value e.g. 0.9 as well as other suitable values. In some implementations the ERD can also contain contextual data as to when software entities may or may not be considered related for example due to security constraints access by specific users particular time constraints etc. In some implementations the ERD can be accessed created updated and or deleted by the content provider manager ERE ERM and or a software development tool . In some implementations the client can access create update and or delete the ERD using one or more components of the example distributed computing system . While illustrated as integral to memory or server in some implementations the ERD can stand apart from memory and or the server as long as it is accessible to one or more components of the example distributed computing system using network or other suitable access method. In some implementations the ERD can be stored in a database table flat file text file binary file and or any other suitable type file and in any specific data structure. In some implementations the ERD can be stored in an index database table and represent a matrix type format. In other implementations the ERD may be stored in a non database type memory and in any suitable structure format. In some implementations one or more ERDs can represent relatedness of one or more software entities.

The software code may represent any collection of computer instructions written using some human and or computer readable characters language for example alphanumeric text. The software code specifies through the computer instructions actions to be performed by a computer and refers to software entities and other software code elements including database tables models objects structures values conditions parameters flags variables algorithms functions methods constraints references and any other suitable information used and or modified by the specified actions. Software code may include source code and executable code as well as various intermediate forms of code as translated between source code and executable code such as by a compiler. For example software code may describe a model of a software system containing one or more software entities such as references to database tables objects etc. In some implementations the software code can be accessed created updated and or deleted by the software development tool as well as the ERE and or ERM . In some implementations the client can also access create update and or delete the software code using one or more components of the example distributed computing system for example by using the software development tool . While illustrated as integral to memory of server in some implementations the software code can stand apart from memory and or the server as long as it is accessible to one or more components of the example distributed computing system using network or other suitable access method. In some implementations the software code can be stored in a database table flat file text file binary file and or any other suitable type file and in any specific data structure.

The content provider manager is any application of any type that enables the client to request and view on the client content associated with the server after obtaining content from various components of the server and or a content provider not illustrated in response to a received request from the client . A content provider may be for example applications and data on the server and or external services business applications business application servers databases RSS feeds document servers web servers streaming servers caching servers or other suitable content sources. In some implementations the content provider manager can act as a gateway to client requested content and applications associated with the server until specific conditions such as security verification processing completion authorization from an application and or other suitable conditions are met. For example a request received from the client to execute the software development tool many not return content to the client until the software development tool indicates that is has fully started and is ready to receive and or process development requests from the client . In another example the content provider manager may intermittently send content to the client as predefined sized data chunks and or as continuously streaming data. In some implementations the content provider manager also allows connections to various other content providers queries the various content providers with regard to available provided content and enables a user to view add edit and or delete content associated with the server .

In some implementations the content provider manager can individually or in conjunction with the ERE and or ERM determine that a recommendation for a software entity in software code should be made to a software developer based on the ERS and or the ERD . In some implementations the content provider manager can interface with the ERE and or the ERM to send and or receive instructions for enriching an ERM.

In some implementations the content provider manager can use content provider manager data not illustrated or other suitable data stored in content provider manager for example data from the memory to perform tasks associated with the server or other components of the example distributed computing system . Content provider manager data may include any type of data associated with and or used by the content provider manager including content provider locations addresses storage specifications content lists access requirements or other suitable data. For example for a database content provider the content provider manager data may include a server Internet Protocol IP address URL access permission requirements data download speed specifications and or other suitable data.

Once a particular content provider manager is launched a client may interactively process a task event or other information associated with the server . The content provider manager can be any application program module process or other software that may determine execute change delete generate or otherwise manage information associated with a particular client . A particular content provider manager may operate in response to and in connection with at least one request received from other content provider managers EREs ERMs and or software development tools including those associated with another server .

In some implementations the content provider manager can be and or include a web browser. In some implementations each content provider manager can represent a network based application accessed and executed using the network e.g. through the Internet or using at least one cloud based service associated with the content provider manager . For example a portion of a particular content provider manager may be a web service associated with the content provider manager that is remotely called while another portion of the content provider manager may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular content provider manager may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular content provider manager may be executed or accessed by a user working directly at the server as well as remotely at a corresponding client . In some implementations the server can execute the content provider manager .

The entity relationship engine ERE can be any application program module process or other software used to analyze existing software code and to generate update the ERD . For example the ERE may be executed by a software developer or administrator of a software development system using a client . The ERE accesses the ERS and while analyzing the software code generates updates the ERD for related database table software entities discovered in the analyzed software code based upon settings specified in the ERS used to determine relatedness. In some implementations the ERE can also update the ERS based upon analyzed software code . For example if a desired software entity is repeatedly not found in analyzed software code a priority value may be set to a low value for that particular type of software entity. In contrast a second particular type of software entity may be repeatedly found although not indicated in the ERS as of interest but the ERE may indicate to the software developer or administrator that it should be considered for inclusion in the ERS or can just update the ERS to include the second particular type of software entity with associated default values. As will be appreciated by those of skill in the art these representative examples illustrate possible functions of the ERE and are not meant to be limiting in any way.

In some implementations the ERE can work individually and or in conjunction with the content provider manager ERM and or software development tool . Additionally a particular ERE associated with a particular server may operate in response to and in connection with at least one request received from other content provider managers EREs ERMs and or software development tools including those associated with another server . In some implementations the ERE is a run once application that updates the ERS and or the ERD . In other implementations the ERE can be run manually intermittently or on the command of some other component of the example distributed computing system .

The entity relationship monitor ERM can be any application program module process service and or other software used to dynamically analyze using the ERS software code and software development tool activities. In some implementations activities can include those for additions updates and or deletions associated with software entities input using the software development tool . The ERM can also generate update the ERD based upon the dynamic analysis and to make proactive recommendations for software entities based upon the dynamic analysis. Typically the ERM runs as a service. For example the ERM may be executed on the start of an instance of the software development tool by a software developer or administrator of a software development system using a client following completion of the execution of the ERE .

If changes associated with software entities are detected in either the software code and or the software development tool the ERM can generate update the ERD for software entities based upon settings specified in the ERS . Note that in some implementations the ERM can be configured to only monitor existing software entities identified in the ERD while in other implementations the ERM can monitor all or a subset of software entity types whether identified in the ERD . In some implementations the ERM can also update the ERS based upon the analyzed software code detected activities in the software development tool and or updates made to the ERD . For example if data related to a software entity is repeatedly updated in the software code using the software development tool an overall priority ranking value for that particular software entity may be increased in the ERS and or ERD . In contrast if a software entity is not updated within a threshold time frame an overall priority ranking value for that particular software entity may be decreased in the ERS and or ERD .

Another example includes the software developer renaming a software entity with the software development tool. For example an object Personnel is renamed to HRPersonnel. In this case the ERM can update the ERS and or the ERD depending upon necessity to reflect the change. In some implementations the ERM can also recommend to the software developer to update all instances of the software entities within the source code and identify all necessary locations using the software development tool.

Another example includes the addition and or deletion of a software entity that affects a relationship with another software entity. For example if a line of software code is added to the software code including the database table software entity UDetails in a manner that the ERS indicates UDetails should be marked as in a relationship with database table USER the ERM can update the ERD accordingly. Similarly if an already indicated relationship exists between database table UDetails and database table USER and a UDetails database table is reference is deleted from the software code the ERM can update the ERD accordingly to reflect this change.

The ERM can also make proactive recommendations for software entities based upon the ERS and the ERD and detected software development tool activities. For example if a software developer searches for drags an object of or enters a database table software entity of USER a related database table UDetails can be recommended to the software developer due to an existing relationship between the two database table software entities reflected in the ERS and or ERD .

In some implementations the ERM can work individually and or in conjunction with the content provider manager ERE and or software development tool . Additionally a particular ERM associated with a particular server may operate in response to and in connection with at least one request received from other content provider managers EREs ERMs and or software development tools including those associated with another server . In some implementations the ERM can also be run manually or on the command of some other component of the example distributed computing system . As will be appreciated by those of skill in the art these representative examples illustrate possible example functions of the ERM in particular example circumstances and are not meant to exclude other functions consistent with this disclosure.

The software development tool can include any can be any application program module process or other software used by a software developer manager or other stakeholder to design write execute transmit and or store software applications. For example the software development tool can be used to design write execute transmit and or store software code . In some implementations there may be a many different software development tools on the server each capable of interfacing with and working with each other. The software development tool can include a GUI screen builder an editor a compiler a linker and or other facilities. In some implementations some operations associated with the software development tool may be performed by the client and its GUI processor memory and or other components of the example distributed computing system whether illustrated or not.

The client may be any computing device operable to connect to or communicate with at least the server using the network . In general the client comprises an electronic computing device operable to receive transmit process and store any appropriate data associated with the example distributed computing system . The client includes a processor a client application a memory and or an interface .

The client application is any type of application that allows the client to navigate to from request view edit delete and or manipulate content on the client . In some implementations the client application can be and or include a web browser. In some implementations the client application can use parameters metadata and other information received at launch to access a particular set of data from the server . Once a particular client application is launched a user may interactively process a task event or other information associated with the server . Further although illustrated as a single client application the client application may be implemented as multiple client applications in the client . In some implementations the client application may act as a GUI interface for components of the server and or other illustrated not illustrated components of the example distributed computing environment .

The interface is used by the client for communicating with other computing systems in a distributed computing system environment including within the example distributed computing system using network . For example the client uses the interface to communicate with the server as well as other systems not illustrated that are communicably coupled to the network . The interface may be consistent with the above described interface of the server or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the server or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client including the functionality required to send requests to the server and to receive and process responses from the server . The memory may be consistent with the above described memory of the server or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client possibly including cached data container documents GUI elements entity relationship settings entity relationship data and or software code similar to that stored in memory of server . In some implementations the memory may be used by the server and or other component of the example distributed computing system to store objects and or data associated with the purposes of the server and or the other component of the example distributed computing system .

Further the illustrated client includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser software development tools or the like. The GUI may be used to view and navigate various web pages and or interface with a software development tool located both internally and externally to the server as well as perform other suitable operations related to an EP. In particular the GUI may be used to perform functions consistent with this disclosure for enriching an ERM.

There may be any number of clients associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client communicably coupled to the server using network alternative implementations of the example distributed computing system may include any number of clients suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional clients external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port not shown tablet computing device smart phone personal data assistant PDA one or more processors within these devices or any other suitable processing device. For example the client may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the server or the client itself including digital data visual and or audio information or a GUI as shown with respect to the client .

As a second example database table USER is referred to at software code line and database table UDetails is referred to at software code line both in function Func2. For these two database table software entities given that the two software code lines are nearly adjacent but separated by at least one software code line illustrated by the intervening ellipsis . . . and that they are in the same function Func2 application App1 and module Accounting the ERE and or the ERM could consider both the USER and UDetails database tables to have a direct relationship with a slightly lower value than the software entity references in Func1 at software code lines 

As a third example database table USER is referred to at software code line in function Func3 and database table UDetails is referred to at software code line in a different function Func4. For these two database table software entities given that the two software code lines are separated by at least one other function again illustrated by an ellipsis between Func3 and Func4 but in the same application App2 and module Accounting the ERE and or the ERM could consider both the USER and UDetails database tables to have a more indirect relationship with a lower relatedness value than the software entity references in Func1 at software code lines and those in Func2 at software code lines 

Referring to as a fourth example database table USER is referred to at software code line in function Func3 and database table UDetails is referred to at software code line in a different function Func4. For these two database table software entities given that the two software code lines are separated by at least one other function again illustrated by an ellipsis between Func3 and Func4 but in the same application App2 and module Accounting the ERE and or the ERM could consider both the USER and UDetails database tables to have an indirect relationship or possibly no relationship. As a result any relatedness value recorded in the ERD would have a lower value than the software entity references in Func1 at software code lines those in Func2 at software code lines and those in Func3 and Func4 at software code lines in the examples discussed with .

As shown block is the intersection of the USER and UDetails database tables. Within this block data is shown indicating a relatedness value as well as a ranking. For example Accounting App1 Func1 pertains to the first example above described with respect to and software code lines and Accounting App1 Func2 pertains to the second example above described with respect to and software code lines . The inclusion of the name of the module application and function indicates a depth of relatedness here down to the function level Func1 or Func2. Accounting App2 pertains to the third example above described with respect to and software code lines . The fact that only the module and application are listed as a data value indicates that the relatedness between the USER and UDetails database table software entities in application App2 is only to the level of the application. Finally Client pertains to the fourth example above described with respect to and software code lines . Here the relatedness of the USER and UDetails database table software entities are only to the module level here module Client. From top to bottom block each data value indicates a decreasing degree of relatedness for the USER and UDetails database table software entities where both are described. Also block from top to bottom indicates a relative ranking of relatedness. For example Accounting App1 Func2 is ranked higher than Client for relatedness ranking. In this example Accounting App1 Func1 could be ranked with a value of 0.95 while Client could be ranked with a value of 0.1. Any suitable ranking algorithm is envisioned to be within the scope of this disclosure. In some implementations ranking values can also be used in a manner similar to relatedness to determine whether data is written into the ERD . For example Client could be ranked as described above with a value of 0.1 but a required ranking threshold in the ERS could require at least a ranking of 0.2 to be added to the ERD .

In some implementations different types of software entities could have different additional ranking values that affect overall ranking values as described above. For example an object could have an additional ranking value of 0.45 that is always added to a ranking calculation including the object while a variable may only have a 0.05 additional ranking value. In some implementations different instances of the same software entity may be ranked higher than others. For example a larger database table may first be ranked against smaller database tables and then ranked according to other relatedness values including proximity etc.

Block indicates that the USER and UDetails database table software entities appear together in at least four places in analyzed monitored software code at least to the sensitivity specified by the ERS . It is possible that the database table software entities appear together but separated between different modules for example the USER database table is in the Accounting module and the UDetails database table is referred to in the Client module but the ERS indicates that this determined relatedness is outside of an acceptable threshold so no data entry is put into block to indicate a relatedness exists. In some implementations out of threshold relatedness values that are within a specific threshold may be stored in ERD and can be retrieved if desired and or if ERS values are later changed. This could help avoid the necessity to perform additional processing if software development requirements change.

Block indicates that the intersection of database table software entities Table4 and Table7 appear once in module Module 3 application App1 and function Funct1 not illustrated in . Similarly Blocks and indicate that the intersection of database table software entities Table2 Table3 and USER appear once in module Client not illustrated in . Other blocks for example block indicate that there is no relatedness recorded between Table1 and Table2. Note that block does not necessarily indicate that there is not a relationship between the associated tables.

Although the various described data in blocks and are limited to levels application module and function in other implementations there could be more or less level categories indicated. For example the ERS may specify which levels are to be recorded within the ERD .

Referring to GUI is illustrated providing a suggestion for an additional database table software entity ERP UDetails when the ERP USER database table software entity is specified for example by a software developer after selecting Remote Entity e.g. in a dialog box menu etc. and the resulting ERP USER is then dragged as a Remote Entity into the Poll Context design area of the BeatPoll.proj project . The software developer then has an option to accept or to reject the suggested addition of the ERP UDetails database table software entity. If the suggested entity is accepted the suggested software entity is added to the design area . If the suggested entity is rejected the suggested software entity is removed from the design area . In some implementations more than one suggestions may be made for example all the values as displayed in the suggestion box described in relation to . In some implementations resultant acceptance s rejection s is are stored in either the ERS and or the ERD for historical and other suitable uses consistent with this disclosure.

Referring to GUI is illustrated providing a suggestion dialog for an additional database table software entity ERP UDetails when a reference to the ERP USER database table software entity is typed in a line of software code. The suggestion dialog recommends ERP UDetails because this database table has been determined to be a related software entity with the highest relatedness value and or ranking value as illustrated in at . In some implementations the suggestion dialog can show multiple values corresponding to related ranked software entities. The software developer has an option to accept or to reject the suggested addition of each suggested software entity. If a suggested entity is accepted the suggested software entity can be added to the software code as an additional software code line not illustrated . If a suggested entity is rejected the suggested software entity is not added to the software code. In some implementations more than one suggestion may be selected by the software developer to insert for example multiple software code lines. In some implementations resultant acceptance s rejection s is are stored either the ERS and or the ERD for historical and other suitable uses consistent with this disclosure.

At an entity relationship engine ERE is executed to create baseline entity relationship data ERD for software code. The ERE locates and prepares to access the ERS and software code. From method proceeds to .

At the ERE accesses entity relationship settings ERS and software code. The ERS is analyzed and the ERE configured accordingly. The software code is loaded and prepared to be analyzed. From method proceeds to .

At a determination is made whether related software entities are found in the software code. If related software entities are found in the software code method proceeds to . Otherwise method proceeds to .

At a relatedness ranking value is determined for related software entities. A determination is made whether the relatedness ranking of determined related software entities are within ERS thresholds for inclusion within the ERD. If the relatedness ranking is determined to be within ERS thresholds method proceeds to . Otherwise method proceeds to .

At a determination is made whether the baseline analysis of the software code has been completed by the ERE. If it is determined that the baseline analysis of the software code is complete method proceeds to . Otherwise method proceeds to .

At a baseline ERD is generated in memory for access by components of the example distributed computing system. From method proceeds to .

At an entity relationship monitor ERM is executed to monitor the software code and or software development tool for changes related to software entities. Typically the ERM is a service that monitors the software code for changes and or the software development tool for activities related to software entities. From method proceeds to .

At the ERM locates and accesses the ERS ERD and or software code and interfaces with the software development tool. From method proceeds to .

At the ERM begins to monitor the software code for changes and software development tool for activities related to software entities. From method proceeds to .

At a determination is made whether changes activity has been detected with respect to the software code software development tool respectively. If it is determined that changes activity have been detected method proceeds to . Otherwise method proceeds to .

At a relatedness ranking value is determined for changes activity to related software entities. A determination is made whether the relatedness ranking of the related software entities related to the detected changes activity are within ERS thresholds for inclusion within the ERD. If the relatedness ranking is determined to be within ERS thresholds method proceeds to . Otherwise method proceeds to .

At an appropriate function is performed related to the detected change activity. For example if a software entity is added to the software code the ERM updates the ERD to reflect the addition while if a software entity is deleted from the software code the ERM updates the ERD to reflect the deletion. In another example if a first software entity is identified in the software development tool the ERM can proactively recommend a second software entity to also use with the first based on the accessed ERD. Additional example functions are described above with respect to the ERM and others consistent with this disclosure should be apparent to those of skill in the art.

While the disclosure discusses enriching an ERM with respect to software entities the scope of the disclosure is not limited to software entities. As will be appreciated by those of skill in the art and consistent with the scope of this disclosure other entities for example hardware entities can be added updated and or deleted from an ERM and proactively recommended based upon entity relationship data.

While illustrate and describe various example GUIs and are meant only as representative examples of many possible implementations and are not meant to limit in any way enriching an ERM. Those of skill in the art will appreciate the multitude of possible implementations that may be used to accomplish the described functionality.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example LINUX UNIX WINDOWS MAC OS ANDROID IOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a CPU a FPGA or an ASIC.

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of CPU. Generally a CPU will receive instructions and data from a read only memory ROM or a random access memory RAM or both. The essential elements of a computer are a CPU for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a global positioning system GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM DVD R DVD RAM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball or trackpad by which the user can provide input to the computer. Input may also be provided to the computer using a touchscreen such as a tablet computer surface with pressure sensitivity a multi touch screen using capacitive or electric sensing or other type of touchscreen. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of wireline and or wireless digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a radio access network RAN a metropolitan area network MAN a wide area network WAN Worldwide Interoperability for Microwave Access WIMAX a wireless local area network WLAN using for example 802.11 a b g n and or 802.20 all or a portion of the Internet and or any other communication system or systems at one or more locations. The network may communicate with for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and or other suitable information between network addresses.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

In some implementations any or all of the components of the computing system both hardware and or software may interface with each other and or the interface using an application programming interface API and or a service layer. The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the computing system. The functionality of the various components of the computing system may be accessible for all service consumers via this service layer. Software services provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C or other suitable language providing data in extensible markup language XML format or other suitable format. The API and or service layer may be an integral and or a stand alone component in relation to other components of the computing system. Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation and or integration of various system modules and components in the implementations described above should not be understood as requiring such separation and or integration in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

