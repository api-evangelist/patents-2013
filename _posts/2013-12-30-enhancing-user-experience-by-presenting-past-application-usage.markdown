---

title: Enhancing user experience by presenting past application usage
abstract: Past usage of an application is presented in order to enhance the experience of a user with an application. An application is executed in a hosted environment in one or more computing devices. Input commands may be obtained from a client and provided to the application. A real-time state of the application may be recorded as the application is executed in the hosted environment. The real-time state of the application that has been recorded may be replayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09409090&OS=09409090&RS=09409090
owner: Amazon Technologies, Inc.
number: 09409090
owner_city: Seattle
owner_country: US
publication_date: 20131230
---
This application is a continuation of and claims priority to co pending U.S. patent application entitled ENHANCING USER EXPERIENCE BY PRESENTING PAST APPLICATION USAGE filed on Dec. 9 2010 and assigned application Ser. No. 12 964 225 which is incorporated herein by reference in its entirety.

Video games and other computer based games are often designed to be challenging. As an example the execution of a complex move may be needed by a player to make it past a certain checkpoint in a game. Such a move may involve a rapid succession of input commands. The player may benefit from continued practice in order to execute the move. However even with continued practice the player may not be able to continue past the checkpoint.

The present disclosure relates to enhancing the experience of a user with an application by presenting past usage of the application. The application may comprise for example a game application or some other type of application. In the case of a challenging video game a user may get frustrated by not being able to complete an objective or to move on to the next level of the game. Although the user may talk with other players consult references or repeatedly practice gaming techniques it may be most helpful to the user to see another player complete the objective or advance to the next level.

Various embodiments of the present disclosure are configured to present multimedia showing past usage of an application in conjunction with the current usage of the application. Such multimedia may include for example videos of past usage voiceovers by experienced users textual annotations and so on. The video and or other media streams generated by an application executed in a hosted environment may be captured and stored for future reference by other users. Such stored application sessions may be indexed annotated and made available to users when appropriate. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes one or more computing devices in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a server application a plurality of wrappers . . . N a plurality of applications . . . N a plurality of video encoders . . . N and other applications services processes systems engines or functionality not discussed in detail herein. The server application may correspond to a game server application or another type of application session server. The server application is executed to launch applications which are executed within the wrappers . The server application is also executed to obtain input data from the clients and provide the input data to the respective wrapper .

The server application is also executed to send output data that is captured from the application to the clients . The server application may communicate with the client over various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP representational state transfer REST real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network . The server application is configured to maintain application state information associated with the executing applications .

The application may correspond for example to a game or other types of applications. As non limiting examples the application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games. The application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The applications may also correspond to mobile phone applications computer aided design CAD applications computer aided manufacturing CAM applications photo manipulation applications video editing applications office productivity applications operating systems and associated applications emulators for operating systems architectures and capabilities not present on a consumer device and other applications and combinations of applications. Where game applications are mentioned in the following text it is understood that game applications are merely examples of the many different types of applications .

The application may expect to access one or more resources of the device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources.

The wrapper corresponds to an application that provides a hosted controlled and or virtualized environment for execution of the application . In particular the wrapper may be configured to virtualize one or more of the resources that the application expects to access. Such resources may include a keyboard a mouse a joystick a video device a sound device etc. In this way the wrapper is able to provide input commands to the application as if the wrapper emulates a keyboard a mouse or another type of input device.

Further the wrapper is able to obtain a video signal generated by the application as if the wrapper emulates a display device an audio device or another type of output device. The wrapper is able to encode the video signal by way of a video encoder into a media stream. The media stream may include an audio signal generated by the application as well. To this end the wrapper may include various types of video encoders such as for example Moving Pictures Experts Group MPEG encoders H.264 encoders Flash video encoders etc. Such video encoders may be selected according to factors such as for example data reduction encoding quality latency etc. In some embodiments the wrappers may communicate directly with the clients to obtain the input data and to serve up the output data .

Different types of wrappers may be provided for different applications or classes of applications . As non limiting examples different wrappers may be provided for applications using different application programming interfaces APIs such as OpenGL DirectX the Graphics Device Interface GDI and so on. Where the application is configured for execution in a specialized video game device or another type of computing device the wrapper may include an emulation application that emulates the device or the software of the device.

The application state information that is maintained by the server application includes various data relating to application sessions that are currently active. For example the application state information may track the users that are currently participating in the application session status information associated with the users security permissions associated with the application session e.g. who can or cannot join and so on. In some embodiments some or all of the application state information may be discarded when an application session ends.

The data stored in the data store includes for example applications video encoders wrappers saved state data user data recorded media streams annotations ratings and potentially other data. The applications correspond to a library of different applications that are available to be launched as applications . The applications may correspond to executable code within the computing device . Alternatively the applications may correspond to code that is executable within another type of device but is not executable within the computing device . Such applications may be referred to as binaries read only memory images ROMs and other terms. A particular application may be executed as multiple instances of the applications for multiple application sessions.

The video encoders correspond to the various types of video encoders that may be employed in the computing device . Some video encoders may correspond to specific formats such as for example H.264 MPEG 4 MPEG 2 and or other formats. The wrappers correspond to the executable code that implements the various types of wrappers . The wrappers are executable in the computing device and may be executed as multiple instances of the wrappers for multiple game sessions.

The saved state data corresponds to game states that have been saved by the applications . Because the applications are executed in a virtualized environment the applications may write state information to a virtual location which is then mapped for storage in the data store as the saved state data . The saved state data may correspond to data saved normally by the application or may correspond to a memory image of the application that may be resumed at any time. The user data includes various data related to the users of the applications such as for example input command history for applications security credentials application preferences billing information a listing of other users that are permitted to join application sessions started by the user and so on.

The recorded media streams correspond to a library of past media streams that have been recorded and stored in the data store . In one embodiment the recorded media streams correspond to the data associated with portions of the media streams that are sent to clients . In other embodiments the recorded media streams may be encoded using additional data reduction techniques such as for example reducing the resolution of a video stream encoding the parts of the media stream using a more aggressive data compression approach and so on. In some embodiments fingerprints that characterize the recorded media streams may be stored along with the recorded media streams for easy location and retrieval of relevant recorded media streams .

The annotations correspond to annotations for the recorded media streams . In one embodiment the annotations may include voiceovers by users to explain what is occurring in the recorded media streams . In another embodiment the annotations may include textual descriptions to explain what is occurring in the recorded media streams . In some embodiments the annotations may be provided in association with a media stream for a currently executing application to provide helpful hints tips explanations etc. to assist users in proceeding with the application . Although annotations may be provided by the user whose application usage generated the recorded media stream annotations may also be provided by other users as well.

The ratings include ratings and or other feedback data regarding the recorded media streams by users. There may be numerous recorded media streams that depict a certain usage of an application . Some of these recorded media streams may depict better usage than others. For instance where the application is a game one recorded media stream may show poor game play of a level while another recorded media stream may show superior game play of the level. Although both recorded media streams may depict completion of the same level the one showing superior game play is likely to be preferred by users. To help distinguish among numerous recorded media streams ratings from users may be collected that indicate user opinions regarding particular recorded media streams . Accordingly the recorded media streams may be filtered according to the highest rating ratings above a certain threshold etc.

The client is representative of a plurality of client devices that may be coupled to the network . The clients may be geographically diverse. The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client may include one or more input devices . The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks push buttons optical sensors microphones webcams and or any other devices that can provide user input. Additionally various input devices may incorporate haptic technologies in order to provide feedback to the user.

The client may be configured to execute various applications such as a client application and or other applications. The client application is executed to allow a user to launch join play or otherwise interact with an application executed in the computing device . To this end the client application is configured to capture input commands provided by the user through one or more of the input devices and send this input over the network to the computing device as input data .

The client application is also configured to obtain output data over the network from the computing device and render a screen on the display . To this end the client application may include one or more video and audio players to play out a media stream generated by an application . In one embodiment the client application comprises a plug in within a browser application. The client may be configured to execute applications beyond the client application such as for example browser applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a user at a client sends a request to launch an application to the server application . The server application obtains the corresponding application video encoder and wrapper from the data store . The server application then launches the application in the corresponding wrapper . The server application tracks the status of the application within the application state information .

The wrapper provides a virtualized environment for the application that virtualizes one or more resources of the computing device . Such resources may include exclusive resources i.e. resources for which the application requests exclusive access. For example the application may request full screen access from a video device which is an exclusive resource because normally only one application can have full screen access. Furthermore the wrapper may virtualize input devices such as for example keyboards mice etc. which may not actually be present in the computing device . In various embodiments the wrapper may correspond to a virtual machine and or the wrapper may be executed within a virtual machine.

The user at the client enters input commands for the application by use of the input devices of the client . As a non limiting example the user may depress a left mouse button. Accordingly the client application functions to encode the input command into a format that may be transmitted over the network within the input data . The server application receives the input command and ultimately passes it to the wrapper . The wrapper then provides a left mouse button depression to the application by way of a virtualized mouse.

In some embodiments different input commands may be presented to the application from those that were generated by a client . As a non limiting example if a user sends a mouse down command and the client application loses focus the wrapper may be configured to send a mouse down command followed by a mouse up command. In various embodiments the input commands may be relayed to the wrapper as soon as possible or the input commands may be queued by the wrapper in an input queue and relayed to the application sequentially from the queue according to another approach.

Meanwhile the graphical output of the application is captured by the wrapper and encoded into a media stream. Additionally the audio output of the application may be captured and multiplexed into the media stream. The media stream is transmitted by the server application to the client over the network as the output data . The client application obtains the output data and renders a screen on the display .

Subsequently other users may join the application and participate like the first user. A user may start an application at one client and continue the application at another client . Furthermore multiple users at diverse locations may participate in an application . As a non limiting example an application may have been developed to be executed in one device with multiple game controllers. Accordingly the wrapper may be configured to map input commands from one client to a first virtual game controller and input commands from another client to a second virtual game controller. As another non limiting example an application may have been developed to be executed in one device where one side of the keyboard controls the first player and the other side of the keyboard controls the second player. Accordingly the wrapper may be configured to map input commands from one client to keys on one side of a virtual keyboard and input commands from another client to keys on another side of the virtual keyboard.

Various embodiments enable input generated through one type of input device in a client to be transformed by the wrapper into input commands provided to the application through an entirely different type of virtual input device. As a non limiting example input generated by an accelerometer in the client may be translated by the wrapper into input provided through a virtual mouse. Thus completely different kinds of input devices may be used in the application that may not have been contemplated when the application was implemented.

Where the input devices incorporate haptic technologies and devices force feedback may be provided to the input devices within the output data . As a non limiting example a simulated automobile steering wheel may be programmed by force feedback to give the user a feel of the road. As a user makes a turn or accelerates the steering wheel may resist the turn or slip out of control. As another non limiting example the temperature of the input device may be configured to change according to force feedback. In one embodiment force feedback generated from the input data of one client may be included in the output data sent to another client .

Because the client is decoupled from the hardware requirements of the application the application may be used remotely through a diverse variety of clients that are capable of streaming video with acceptable bandwidth and latency over a network . For example a game application may be played on a client that is a smartphone. Thus the client need not include expensive graphics hardware to perform the complex three dimensional rendering that may be necessary to execute the application . By contrast the hardware of the computing device may be upgraded as needed to meet the hardware requirements of the latest and most computationally intensive applications . In various embodiments the video signal in the media stream sent by the server application may be scaled according to the bitrate and or other characteristics of the connection between the computing device and the client over the network .

When a user is interacting with the application the user may become frustrated with completing specific tasks or meeting certain objectives of the application . To this end the user may enter an input command for help. In various embodiments such a command may pause the execution of the application and or launch another user interface alongside the user interface of the application as rendered in the client . Alternatively the user may enter a command that bookmarks the current application status for future reference in a help interface.

In some cases the user might not explicitly enter a command for help but the server application may automatically identify that the user is having difficulty. In one embodiment the server application examines the input command history for the user to determine if the user is stuck in the application . As a non limiting example a user experiencing difficulty in a game may be repeatedly executing the same input commands to attempt to kill a boss in the game but be unsuccessful. As another non limiting example the user may be spending an excessive amount of time performing a task of the application .

Help may be provided to the user based on the experiences of other users when they have previously used the application . Such help may be provided in the form of annotations and or walkthroughs in the application . In various embodiments a user interface may be provided for the user to select recorded content from a library that shows another user using the application at or near the same point in the application . The recorded content may include an input command history to show the user how to perform the moves tasks etc. depicted in the recorded content. In one embodiment the user may be able to automatically provide input commands to the application based on such an input command history in order to perform the moves tasks etc. As a non limiting example the recorded input commands may take control over the current game of a player in order to help the player get past a difficult checkpoint.

In some cases the recorded content may be identified from the recorded media streams based on the graphical output of the application by a fingerprinting technique that for example examines colors contrast etc. associated with the current video signal of the application and compares them with the colors contrast etc. of portions of the recorded media streams as represented in fingerprints stored with the recorded media streams . In other words with a positive fingerprint match the backgrounds may be similar the combinations of colors may be similar and or other quantifiable aspects of the recorded media streams may be similar to the current video signal of the application .

Fingerprinting comparisons may also be done based on the audio signal generated by the application and encoded audio signals in the recorded media streams . For instance a particular audio or music cue might uniquely identify a state in the application that can be cross referenced with the recorded media streams . Fingerprinting comparisons may also be performed based upon the order of input commands currently provided to the application and the input command histories associated with the recorded media streams .

In addition to automated fingerprint identification of recorded media streams manual tagging may be employed. To illustrate a user may be able to tag a current position in the media stream being generated by the application . Such a tag may be used in indexing the portion of the media stream within the recorded media streams . Other users may subsequently perform a search on the tags that describe the recorded media streams in order to find recorded media streams that are relevant.

As a non limiting example the application may correspond to a game such as Teenage Mutant Ninja Turtles TMNT which was originally released by Konami Corporation as a coin operated arcade game. For example suppose that a user is playing the TMNT game at a client has selected the Donatello character and is currently battling Bebop the boss of stage 2. The user may be getting repeatedly beaten up by Bebop and or may be entering the same commands over and over. The server application may then identify the user as having difficulty and then offer suggestions for help. Alternatively the user may enter a hotkey to request help.

In conjunction with the current game output which may or may not be paused a recorded video of another user as Donatello battling Bebop may be shown. The recorded video may be selected based on user specified criteria popularity and or appropriateness to the current position of the user in the TMNT game. The command sequences of the other user may also be shown. Accordingly the user may watch the game play in the recorded video and learn the strategy for beating Bebop. In addition a voiceover by the other user and or textual help may be provided to describe what is going on in the recorded video.

Various user interfaces e.g. as shown in may be contemplated for selecting recorded media streams and presenting them as recorded content in association with the real time content generated from the application . In the example of a game a user may want to see a recorded media stream based on achievements earned. An achievement corresponds to the completion of an objective that is not critical to completing the game such as earning points entering a hidden area collecting gold coins carrying a garden gnome from beginning to end in a game etc.

The assistance from other users may be provided also in the form of annotations to the application . Such annotations may include voiceover explanations written explanations image explanations etc. In various embodiments the annotations may be presented in connection with the recorded media stream of the user who created the annotations . In other embodiments the annotations may be presented while a user is using the application at identifiable checkpoints. Various user interfaces may be contemplated for selecting and enabling the annotations .

In addition to providing help to users based on recorded media streams and annotations the server application may be configured to allow users to save their own recorded media streams and create annotations . To this end the server application may continuously record the real time content media stream generated from the application and allow users to select portions to be saved in the recorded media streams . If space allows the server application may save all media streams automatically and later discard those that are not useful for other users. Alternatively a user may issue start and stop commands to control when a media stream is being recorded and saved.

Once a recorded media stream is created the server application may allow the user to add metadata describing it. The server application may also determine information regarding the recorded media stream through an application programming interface API of the application if available. Such information may include achievements earned objectives completed checkpoints passed and so on. The user may also create and submit annotations to be associated with the recorded media stream . The user may specify certain checkpoints or times associated with the recorded media stream at which certain annotations are to be displayed. Further the user may specify that visual annotations be displayed in certain areas of the screen .

Turning now to shown is one example of a user interface rendered in the client in the networked environment . Specifically the user interface shows a screen associated with an application that is a game. Although the example of a game is used in it is understood that other types of applications may be employed in embodiments of the present disclosure. The layout of the various elements of the user interface as shown in is provided merely as an example and is not intended to be limiting.

The top portion of the screen shows a video stream that is currently being generated from the application by a video encoder . In the video stream the user at the client is playing the game by moving a character around the world and sending other input commands to the application . Rendered in association with the video stream is an auxiliary video stream that corresponds to a recorded media stream . The auxiliary video stream shows past usage of the application and in particular past game play of the game. The playback of the auxiliary video stream may be controlled by way of a set of media controls . It is noted that an auxiliary audio stream may also be played back in conjunction with the auxiliary video stream .

Descriptive text may be provided to describe the auxiliary video stream . In this example the descriptive text states Currently Viewing Completion of Level 3 by SpyMaster331. Thus the descriptive text may identify what is occurring in the auxiliary video stream and the user who is controlling the application as shown in the auxiliary video stream . In other examples the descriptive text may provide textual help tips suggested command sequences etc. to the user to complete objectives in the application .

Various options may be provided to the user for controlling the auxiliary video stream . Option permits the user to view or browse other recorded sessions. To this end another user interface may be loaded when option is selected. Thumbnails and or descriptions of various other recorded sessions may be shown to the user to facilitate a selection. Option allows the user to maximize the current viewer. For example selecting option may permit the auxiliary video stream to be resized larger to consume perhaps the entire screen or the entire display . Option allows the user to exit the recorded session viewer. When option is selected the video stream may be maximized and the user may return to playing the game instead of watching the auxiliary video stream . It is understood that other types of options may be provided for example to provide a rating for the auxiliary video stream to enable or disable audio to enable or disable textual help and so on.

Moving on to shown is an example of a user interface rendered in the client in the networked environment . Specifically the user interface shows a screen associated with an application that is in this example a game. Although the example of a game is used in it is understood that other types of applications may be employed in embodiments of the present disclosure. The layout of the various elements of the user interface as shown in is provided merely as an example and is not intended to be limiting.

A title of the user interface describes the user interface as a Recorded Session Viewer for Spy Agent. The user interface provides an interface for selecting various auxiliary media streams for presentation to the client . In particular the auxiliary media streams are related to the game Spy Agent. A search tool is provided for a user to enter keywords for searching the various recorded media streams . The keywords may be matched against annotations ratings and or other metadata that may be associated with recorded media streams .

Several thumbnails are shown with representative images from the respective recorded media streams . Descriptions of the recorded media streams are also provided in conjunction with the thumbnails . The recorded media streams that are initially highlighted in the user interface may correspond to recorded media streams that are superlative in various categories. For instance the description relates to a recorded media stream that shows the Most Achievements for the game. The description relates to a recorded media stream that shows the Fastest Completion Time for the game. The description relates to a recorded media stream that shows the Highest Rated recorded media stream for the game according to user ratings for the game.

Each of the descriptions may include user interface components for launching the playback of the associated recorded media stream for example as shown in . As a non limiting example a link is provided that is labeled View Recorded Session. Further a link may be provided See All for a user to see other recorded media streams in the particular category e.g. most achievements fastest completion time highest rated etc.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the server application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the server application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the server application obtains a request to launch an application from a client . In box the server application configures the video signal generated by the application to be encoded by a video encoder and to be sent to the client as a media stream in the output data . In various embodiments the media stream may include encoded audio signals generated by the application images and or other multimedia data. In box the server application configures the application to receive input commands from the client . To this end the input commands embodied in the input data are configured to be provided to the application .

In box the application is executed in the appropriate wrapper . The wrapper provides a virtualized environment for execution of the application . As such the wrapper virtualizes one or more input devices and provides the input commands obtained from the client to the application by way of the virtualized input devices .

In box the server application prepares a list of recorded sessions i.e. recorded media streams that are relevant to the current application and sends the list to the client . For example where the application is a game the list may include the recorded media streams that show game play for the current level of the game. The current level checkpoint etc. may be determined with reference to the application state information . In one embodiment frames from the video signal generated by the application may be analyzed and compared with fingerprints of the recorded media streams to determine the recorded media streams that appear to show a similar usage for the application .

In box the server application obtains a user selection of a recorded media stream from the client . Alternatively the server application may automatically determine a recorded media stream that is most relevant to the current usage of the application . For instance the recorded media stream from the list with the highest user rating may be selected. In box the selected recorded media stream is sent to the client for display in association with the current media stream of the application . In one embodiment the recorded media stream is embedded within the current media stream of the application . In another embodiment the recorded media stream is sent separately from the current media stream of the application . As a non limiting example the recorded media stream may be configured to be rendered in place of adjacent to overlaying or otherwise in association with the current media stream of the application . In another non limiting example the recorded media stream is configured to be shown as a picture within a picture on the display .

In box the server application determines whether the user at the client is to provide a rating for the recorded media stream . If the user is to provide a rating the server application proceeds to box and obtains a rating of the recorded media stream from the client . The server application then associates the rating with the particular recorded media stream . As a non limiting example the user may click on a graphical icon showing a desired number of stars that are to be assigned to the recorded media stream as a rating . Further the user may provide comments and or other feedback as a rating . The server application then continues to box . If the server application determines in box that no rating is to be obtained the server application also proceeds to box .

Next in box the server application determines whether the current session i.e. the media stream being generated from the application and sent to the client is to be saved. If the current session is not to be saved the portion of the server application ends. Otherwise if the current session is to be saved the server application in box stores a portion of the media stream of the current session in the library of recorded media streams . In one embodiment the server application may continuously store the media stream and then discard portions that are not later saved. A user interface may be provided for the user to select portions of the media stream to be saved. In another embodiment the server application may begin storing and saving the media stream only upon the command of a user.

In box the server application determines whether the session is to be annotated. If the session is not to be annotated the portion of the server application ends. Otherwise if the session is to be annotated the server application proceeds to box and obtains an annotation from the client . The annotation is stored in the data store and associated with the recorded media stream generated from the session. It is understood that the annotation may take many different forms such as for example an audio voiceover helpful text and so on. In some embodiments annotations may also be presented to users in conjunction with a current media stream and not a recorded media stream . Thereafter the portion of the server application ends.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor a memory and one or more graphics devices all of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. The graphics devices may correspond to high performance graphics hardware including one or more graphics processors . The graphics devices are configured to render graphics corresponding to the applications executed in the computing device .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the server application the wrappers the applications the video encoders and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the server application the wrappers the applications the video encoders the client application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowchart of shows the functionality and operation of an implementation of portions of the server application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowchart of shows a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the server application the wrappers the applications the video encoders and the client application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

