---

title: Rootkit detection by using HW resources to detect inconsistencies in network traffic
abstract: A technique allows detection of covert malware that attempts to hide network traffic. By monitoring network traffic both in a secure trusted environment and in an operating system environment, then comparing the monitor data, attempts to hide network traffic can be detected, allowing the possibility of performing rehabilitative actions on the computer system to locate and remove the malware hiding the network traffic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09197654&OS=09197654&RS=09197654
owner: 
number: 09197654
owner_city: 
owner_country: 
publication_date: 20130628
---
Embodiments described herein generally relate to malware detection and in particular to detection of malware that attempts to hide network traffic from anti malware software.

Rootkits are a stealthy type of malicious software malware designed to hide the existence of certain processes or programs from normal methods of detection. Rootkits typically enable continued privileged access to the compromised system. Rootkit installation may be either automated or activated when an attacker obtains root or Administrator access. Obtaining this access is either a result of direct attack on a system exploiting a known vulnerability or by getting access to a password by cracking privilege escalation or social engineering . Once installed a rootkit typically attempts to hide the intrusion as well as to maintain privileged access for itself or other processes .

Rootkit detection is difficult because a rootkit may be able to subvert the software that is intended to find it. Detection methods include using an alternative trusted operating system behavioral based methods signature scanning difference scanning and memory dump analysis. Removal can be complicated or practically impossible especially in cases where the rootkit resides in the kernel. Reinstallation of the operating system may be the only available solution to the problem. When dealing with firmware rootkits removal may require hardware replacement or specialized equipment.

Modern rootkits do not necessarily elevate access but are often used to make another software payload undetectable by adding stealth capabilities. Most rootkits are classified as malware because the payloads they are bundled with are malicious. For example a payload might covertly steal user passwords credit card information computing resources or conduct other unauthorized activities. A small number of rootkits may be considered utility applications by their users for example a rootkit might cloak a CD ROM emulation driver allowing video game users to defeat anti piracy measures that require insertion of the original installation media into a physical optical drive to verify that the software was legitimately purchased.

Rootkits can run at different privilege levels or modes of a computer environment. User mode rootkits run at the same mode as most other user applications rather than low level system processes. They have a number of possible installation vectors to intercept and modify the standard behavior of application programming interfaces APIs . Some inject a dynamically linked library such as a .DLL file .dylib file a .so file or a .shlib file into other processes and are thereby able to execute inside any target process to spoof it. Others with sufficient privileges simply overwrite the memory of a target application.

Kernel mode rootkits ring 0 and or rootkits residing in virtualization layer sometimes referred to as ring 1 run with the highest operating system privileges by adding code or replacing portions of the core operating system including both the kernel and associated device drivers. Most operating systems support kernel mode device drivers which execute with the same privileges as the operating system itself. As such many kernel mode rootkits are developed as device drivers or loadable modules such as loadable kernel modules or device drivers. This class of rootkit has unrestricted security access. Kernel rootkits can be especially difficult to detect and remove because they operate at the same security level as the operating system itself and are thus able to intercept or subvert the most trusted operating system operations and thereby hide themselves in a stealth like manner. Rootkits and other malware that hide their existence on a system are difficult to detect and clean from within the scope of the infected operating environment.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without these specific details. In other instances structure and devices are shown in block diagram form in order to avoid obscuring the invention. References to numbers without subscripts or suffixes are understood to reference all instance of subscripts and suffixes corresponding to the referenced number. Moreover the language used in this disclosure has been selected principally for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter resort to the claims being necessary to determine such inventive subject matter. Reference in the specification to one embodiment or to an embodiment means that a particular feature structure or characteristic described in connection with the embodiments is included in at least one embodiment of the invention and multiple references to one embodiment or an embodiment should not be understood as necessarily all referring to the same embodiment.

The embodiments described herein are examples and for illustrative purposes. Persons of ordinary skill in the art will recognize that alternative techniques for implementing the disclosed subject matter may be used. Elements of example embodiments may be arranged in different arrangements or combined with elements of different example embodiments. For example the order of execution of blocks and flow charts may be changed. Some of the blocks of those flowcharts may be changed eliminated or combined and other blocks may be added as desired.

As used herein the term a computer system can refer to a single computer or a plurality of computers working together to perform the function described as being performed on or by a computer system.

Increasingly cyber attacks on businesses government agencies and others are covert and persistent. As a result the ability to detect covert communications becomes increasingly more important to being able to deal with threats to intellectual property and personal information theft.

A main element in covering one s tracks involves hiding from software resident in the operating system. A common method of avoiding detection is using malware that is able to hide activities from software such as anti virus and host based intrusion detection. Contemporary threats pay more attention to hiding inside the operating system rootkits and bootkits but covert network transmissions are a natural next step thus detecting malware communications is becoming increasingly relevant and valuable. Bootkits rootkits that activate before operating system initiation during the boot process can control the operating system s interaction with the network hardware. They can also manipulate the networking stack typically an Internet Protocol IP stack. This would render the operating system and software operating under the operating system including intrusion detection or other security software incapable of seeing the malicious network traffic. Rootkit code may also activate from firmware which would make it harder to detect and significantly harder to remove.

There are multiple rootkit detection programs in the market employing different methods. The methods of comparing trusted and potentially tainted information are well known and have been used in many anti rootkit tools such as the use of Difference based detection by Russinovich s RootkitRevealer which enabled detection of the Sony DRM rootkit. Other examples are F Secure s Blacklight and McAfee s RootkitDetective all of which use differential viewing as one of the main detection methods. However the existing anti rootkit solutions do not consider network traffic and rootkit or bootkit tools to hide network traffic would be difficult if not impossible to detect using purely software based difference based detection.

Recognition of the value of detecting hidden network traffic and the problem of detecting such traffic led to solutions that are disclosed below. The following are a few examples showing the importance of this invention in a world of covert persistent threats.

Consider a malware loaded via whatever method for example a drive by in a web site . The malware is designed to collect information and to exfiltrate the collected information periodically to an external entity. Because intrusion detection systems which may be host based or network based might flag that activity as suspicious malware designers try to prevent the intrusion detection agents from detecting the exfiltration. To avoid network based logging and intrusion detection systems the malware may be designed to send information only when no proxy is used or when connected to a known private IP address e.g. 192.168.X.X . Even if the external entity is currently unknown and not blacklisted as malicious by intrusion detection systems the external entity may become known later. To stay covert malware designers may attempt to keep the network traffic for the communication with the external entity undetected by host based intrusion detection systems using rootkits or bootkits. This creates an inconsistency of network records between what is actually sent and received and what operating system environment software may record as being sent and received thus restricting what host based intrusion detection systems may detect. That hole provides an opportunity for a solution to the problem of hidden network traffic.

In another example a dormant agent hits on a command and control C C system every so often. That system may become a known C C system and detecting communication with the C C system can give away the existence of the malware. The reasonable thing for the malware to do is to keep this contact with the C C system hidden. But that produces an inconsistency between the actual network traffic and what network traffic monitors in the operating system environment can detect and offer another opportunity for a solution.

Solutions described herein aim to catch the network traffic that tries to stay hidden. These are normally the things that are the most important to try to detect because things that hide generally have a reason to hide. By using a trusted environment typically built into the hardware of the computer system to monitor network traffic in addition to using software in an operating system environment and comparing the network traffic records hidden network traffic can be detected without the need to use external network monitors. The network traffic records produced in the trusted environment are compared to the network records produced in the operating system environment with differences generally indicating the presence of hidden network traffic.

Components of the solutions may include operating system based software such as a host based intrusion detection system hardware monitors and a comparison facility. In addition once detection has occurred the system may be able to act on alerts generated by the comparison facility to try to take remedial action. These components are described in more detail below.

No existing anti rootkit solution performs differential viewing of network traffic and no existing detection technique uses secure environment authored data.

Turning to two charts and illustrate the difference between what a secure environment would see as network traffic for computer and what a host based intrusion detection system would see. The contents of charts and are illustrative and by way of example only. In chart rows indicate network traffic between computer identified by its example IP address of 10.1.2.4 and computer identified by its example IP address of 10.234.23.14 . Similarly rows indicate network traffic between computer and computer identified by its example IP address of 10.4.23.12 and between computer and computer identified by its example IP address of 10.9.65.3 .

As illustrated in rows of the chart of computer has sent 3 packets to computer from port 23452 on computer to port 911 on computer . The packets were sent using protocol 17 User Datagram Protocol UDP and carried 623 bytes of data. Computer has sent 8 UDP packets to computer from port 911 on computer to port 23452 carrying 7238 bytes of data.

As illustrated in rows of the chart of computer has sent 1 Interior Gateway Protocol IGP protocol 9 packet carrying 79 bytes of data from port 23 453 of computer to port 8723 of computer . Similarly computer has sent 1 IGP packet carrying 187 bytes of data from port 23 453 of computer to port 8823 of computer .

Because this network traffic is monitored and recorded by a secure environment the network traffic illustrated in rows is not hidden from the secure environment. However as shown in chart the traffic is hidden to the host based intrusion detection system that also monitors and records network traffic.

As illustrated in chart rows are identical to rows of chart however there is no counterpart to rows of chart because malware in computer hid that network traffic from the host based intrusion detection system that captured the data of chart .

That difference is exploitable to allow detection of the malware. If there were no malware hiding network traffic for whatever reason the malware deemed such hiding to be advisable charts and should be identical. Therefore the existence of a difference indicates that malware exists on computer . Although the difference does not indicate the nature of the malware other than that it hides certain network traffic the knowledge of the existence of malware that hides network traffic is a first step in solving the problem and removing the malware.

The format and data contained in charts and are illustrative and by way of example only as is the network traffic illustrated by those charts. Any desired technique can be used for monitoring and recording network traffic. Although the examples used in this disclosure are based on IP protocol network traffic the techniques described herein can be used for any type of network traffic regardless of protocol.

One widely used technique for collecting and reporting IP traffic information is the NetFlow protocol developed originally by Cisco Systems with the most recent version published as RFC 3954 and standardized by the Internet Engineering Task Force as the IP Flow Information Flow Export IPFIX protocol. IPFIX is described in detail in RFCs 5101 5102 and 5103. Basically a flow or netflow is any number of packets observed during an observation period that share a number of properties for example the same source the same destination and the same IP protocol. These packets can be aggregated into a flow record or message by a metering process then an exporter process sends the aggregate information to a collector. The collector may be on a different computer than the metering process and exporter. The sample data in is illustrated in a simplified format that only shows particular key information fields useful for the malware detection technique. Actual implementations of the techniques described herein may use any desired format and storage technique for recording flow information and may include other information for example timestamps or any other fields defined in either the NetFlow or IPFIX protocols or any other combination of fields that may be desired by the implementer.

Various components of the system unit may include one or more processor typically each a single processor chip mounted in a mounting socket not shown in to provide electrical connectivity between the processors and other components of the computer . Although a single processor is illustrated in any desired number of processors can be used each of which may be a multi core processor. Multiple processor chips are available on the market currently and any desired processor chip or chipset may be used. The system unit may be programmed to perform methods in accordance with this disclosure examples of which are illustrated in .

The processor is connected to memory for use by the processor typically using a link for signal transport that may be a bus or any other type of interconnect including point to point interconnects. Memory may include one or more memory modules and comprise random access memory RAM read only memory ROM programmable read only memory PROM programmable read write memory and solid state memory. The processor may also include internal memory such as cache memory. An operating system running on the processor generally controls the operation of the computer system providing an operating system environment for services applications and other software to execute on the computer .

As illustrated in processor is also connected to a I O subsystem that provides I O timer and other useful capabilities for the computer system . For example the I O subsystem may provide I O ports for connecting an optional display and an optional input device such as a keyboard mouse touch screen to the system unit . The ports may be either one or more of special purpose ports for components like the display or multipurpose ports such as Universal Serial Bus USB ports for connecting a keyboard or mouse . The I O subsystem may also an interface for communicating with storage devices such as storage device connect to audio devices through an audio interface and connect to the network via network interface . The storage device represents any form of non volatile storage including but not limited to all forms of optical and magnetic including solid state storage elements including removable media and may be included within system unit or be external to system unit . Storage device may be a program storage device used for storage of software to control computer data for use by the computer including network flow data or both. Although only a single storage device is illustrated in for clarity any number of storage devices may be provided as desired depending on interface availability in the PCT. The I O subsystem may be implemented as one or more chips within the system unit . In some embodiments the memory may be connected to the I O subsystem instead of to the processor .

In addition some embodiments may connect the I O subsystem to a Trusted Platform Module that provides a cryptoprocessor for storing cryptographic keys to protect information. Embodiments may implement the functionality of the I O subsystem as one or more separate chips in the system unit .

As illustrated in the I O subsystem provides hardware resources for the secure trusted environment TE . The TE provides a secure environment not controlled by the operating system that controls the computer . In other embodiments the TE may be outboard of the I O subsystem as a separate chipset or may be incorporated in the processor such as a separate core restricted to TE functionality. The TE contains secure processing functionality that allows performing the secure environment side of the network traffic monitoring techniques described herein in a trusted environment that cannot be interfered with by malware even malware that may run as a bootkit or rootkit on processor . Typically vendors providing the TE use proprietary or cryptographic techniques to ensure control over what functionality may execute in the TE preventing execution of any but carefully vetted trusted programs to run in the TE . Special interfaces may be provided to allow software running on the processor to request the TE to perform desired functionality such as initiating hardware protected network traffic monitoring or providing data from the TE to the processor for analysis. The TE may either use its own internal memory or use a portion of the memory for data and firmware storage. Alternatively instructions in the form of firmware for execution in the TE may be loaded from a non volatile memory device such as a flash memory upon powering up of the computer and then loaded into a portion of the memory for execution by the TE . In some embodiments the TE may be disabled and enabled as desired. These instructions may cause the TE to perform network monitoring and other functionality not described herein. The network monitoring firmware may be provided by the secure environment vendor or may be provided by an intrusion detection system vendor and stored as firmware by permission of the secure environment vendor in conjunction with the provision of operating system environment intrusion detection software. An example of a trusted environment that may be used for these techniques is the Manageability Engine in certain chipsets provided by Intel Corp. Although described herein generally in terms of a hardware based TE secure environments can be implemented in hardware firmware or software or any combination thereof as desired.

The computer system may be any time of computing device such as for example a smart phone smart tablet personal digital assistant PDA mobile Internet device MID convertible tablet notebook computer desktop computer server or smart television. The display if present may be any time of device for presenting an interface to the user such as for example a touch screen or a liquid crystal display. The elements illustrated in are illustrative and by way of example only and elements shown in may be combined or divided into multiple elements as desired. Other elements such as geopositioning logic such as a Global Positioning System transceiver as well as logic for handling mobile communications using standards such as for example IEEE 802.11 IEEE 802.16 WiMax etc. may also be provided as desired.

In block an operating system environment intrusion detection system or other software for monitoring network traffic may collect similar network traffic data. The software typically uses the same format and protocols as that used by the TE for ease of comparison of the two data sets but may use collection and storage techniques that differ from those used in the TE if desired. As with the TE traffic collection one of skill in the art would not need additional description of network monitoring techniques to implement operating system environment network traffic monitoring and data collection which techniques are widely known in the art. Although malware may hide data from the operating system environment monitoring that hiding can be detected in block where the monitored data from both the trusted and operating system environment is compared.

Both the intrusion detection system and the TE may monitor the network traffic continuously or during designated periods. If not monitoring continuously the network traffic may be monitored for predetermined time periods on a periodic or other basis upon a request to do so or until a predetermined amount of network traffic has been recorded. Similarly the comparison may be performed in various ways such as periodically upon request or upon filling whatever space is allocated for storing the monitored network traffic information.

Differential comparison of data is well known to the art and need not be further described herein to the person of ordinary skill in the art. In the present situation the comparison is looking for network traffic data that is present in the trusted environment data but missing from the operating system environment data. In some situations instead of simply hiding or filtering out network traffic that is associated with a malware site the malware may alter the network traffic to make it less suspicious. The malware may modify the source or destination information as appropriate replacing the correct source or destination address with other innocuous information. The malware may also modify port numbers or protocol type information. In such a scenario the corresponding data from the trusted environment monitoring will be missing or will differ from the operating system environment monitored data and the operating system environment monitored data will be missing or will differ from the trusted environment data. If the monitored data contains timestamps the comparison may be able to detect the alteration of the data in the operating system environment. In one embodiment a simple comparison of the two data sets may be sufficient to indicate the presence of malware and the detailed comparison may be left for later analysis. In any event the comparison may not only detect the presence of malware but the identity of the site that is communicating with the computer with hidden communications in the example of computer .

Implementation of the comparison may provide for the intrusion detection system to request the TE to send the monitor data collected in the secure environment to the intrusion detection system running in the operating system environment. Alternately the TE may send the second monitor data to the intrusion detection system in the operating system environment without receiving such a request for example the TE may periodically send the second monitor data for the comparison.

In block if the trusted environment data is not the same as the operating system environment data that difference may indicate the presence of malware. An alert may be generated in block . The alert may be generated either in the trusted environment or in the operating system environment and may take any desired form such as a message displayed on the computer an alert message sent to an external facility e.g. via a network or an alert transmitted to the host based intrusion detection system from the trusted environment. Although referred to here as a message the content and delivery technique may be any convenient or desired technique. In some embodiments for example where the comparison of block simply detects a difference in the monitored data without further analysis the alert may be accompanied with a transmission of the two data sets to an analysis facility which may be on the computer or elsewhere. If on the computer the analysis facility may be in the TE or the operating system environment. The latter risks possible further manipulation by malware but may be easier to implement than in the TE . The analysis facility may then undertake further analysis of the differences and possible recognition of malware sites indicated in the trusted environment data.

The analysis facility may receive and compare the two monitor datasets either synchronously real time or near real time or asynchronously for example on a schedule or periodic basis or any mixture of the two.

In some embodiments in block the alert may trigger a response causing action to be taken responsive to detecting the presence of the malware. The rehabilitative response may take any desired form including attempting to identify the nature of the malware using other techniques attempting to rehabilitate the computer by removing the malware quarantining the computer or attempting to take an action against the external site identified in the hidden traffic such as computer . The nature of those rehabilitative techniques is not described here except that actions may be taken on the computer on an external system or both. In embodiments in which a response is taken to the alert the analysis facility may both do the analysis and take the action or the analysis facility may only perform the analysis and leave the responsive action to be taken by another facility which may be in a different location than the analysis facility. The action taken responsive to the alert may also involve communication with and actions by the TE .

Although designated as a list herein the format of the exclude list is not material and any desired technique for excluding network traffic from the comparison or the results of the comparison may be used. For example the exclude list may include rules for excluding network traffic.

In the variant of the alert resulting from the comparison of the trusted data and the untrusted operating system environment data may be generated by the firmware of the TE . In other variants as explained above the alert may be generated by the operating system environment or an external facility.

By the simple expedient of comparing a trusted record of network traffic created by a secure environment with a potentially malware corrupted record of network traffic created in an operating system environment valuable information may be obtained to allow detection of malware such as bootkits or rootkits that may hide malware related network traffic from intrusion detection systems running in an operating system environment. The comparison may be synchronous or asynchronous and may involve sending data to external facilities for analysis. While no security technique is likely to prevent or even detect all security problems this technique is a valuable tool for dealing with covert persistent malware that would not be feasible with software only tools running in an operating system environment.

Example 1 is a non transitory computer readable medium with instructions stored thereon the instructions comprising instructions that when executed cause a computer system to monitor network traffic of the computer system in an environment controlled by an operating system of the computer system producing a first monitor data monitor network traffic of the computer system in a secure environment not controlled by the operating system producing a second monitor data compare the first monitor data with the second monitor data and indicate whether the first monitor data is the same as the second monitor data.

Example 2 includes the subject matter of example 1 wherein the instructions that when executed cause the computer system to compare the first monitor data with the second monitor data comprise instructions that when executed cause the computer system to send the first monitor data from the environment controlled by the operating system to the secure environment and compare the first monitor data with the second monitor data in the secure environment.

Example 3 includes the subject matter of example 1 wherein the instructions that when executed cause the computer system to compare the first monitor data with the second monitor data comprise instructions that when executed cause the computer system to send the second monitor data from the secure environment to the environment controlled by the operating system and compare the first monitor data with the second monitor data in the environment controlled by the operating system.

Example 4 includes the subject matter of example 1 wherein the instructions that when executed cause the computer system to compare the first monitor data with the second monitor data comprise instructions that when executed cause the computer system to send the first monitor data and the second monitor data to an external facility and compare the first monitor data with the second monitor data in the external facility.

Example 5 includes the subject matter of examples 1 4 wherein the instructions stored thereon further comprise instructions that when executed cause the computer system to 

Example 6 includes the subject matter of examples 1 4 wherein the instructions that when executed cause the computer system to compare the first monitor data with the second monitor data comprise instructions that when executed cause the computer system to 

Example 7 includes the subject matter of example 1 wherein the instructions stored thereon further comprise instructions that when executed cause the computer system to generate a malware alert in the operating system environment or the secure environment.

Example 8 includes the subject matter of example 7 wherein the instructions that when executed cause the computer system to generate a malware alert in the operating system environment or the secure environment comprise instructions for sending the malware alert via a network.

Example 9 includes the subject matter of example 1 wherein the instructions stored thereon further comprise instructions that when executed cause the computer system to quarantine the computer system.

Example 10 is a method of detecting malware comprising monitoring network traffic of a computer system in an environment controlled by an operating system for the computer system producing a first monitor data monitoring network traffic of the computer system in an secure environment not controlled by the operating system producing a second monitor data comparing the first monitor data with the second monitor data and indicating the presence of malware if the first monitor data does not match the second monitor data.

Example 11 includes the subject matter of example 10 wherein monitoring network traffic of a computer system in an environment controlled by an operating system for the computer system comprises 

monitoring network traffic in an intrusion detection system executing under control by the operating system.

Example 12 includes the subject matter of example 10 further comprising loading firmware for execution in the secure environment at powerup of the computer system. Example 13 includes the subject matter of any of examples 10 12 wherein comparing the first monitor data with the second monitor data comprises sending the first monitor data to the secure environment and comparing the first monitor data with the second monitor data in the secure environment.

Example 14 includes the subject matter of any of examples 10 12 further comprising quarantining the computer system responsive to the indication of the presence of malware.

Example 15 includes the subject matter of example 10 12 wherein comparing the first monitor data with the second monitor data comprises sending the second monitor data to the intrusion detection system executing under control by the operating system and comparing the first monitor data with the second monitor data by the intrusion detection system.

Example 16 includes the subject matter of example 10 12 wherein comparing the first monitor data with the second monitor data comprises sending the first monitor data from the secure environment to an external facility for comparison with the second monitor data and sending the second monitor data from the intrusion detection system to the external facility for comparison with the first monitor data.

Example 17 includes the subject matter of example 16 wherein indicating the presence of malware comprises receiving an alert generated by the external facility.

Example 18 includes the subject matter of example 10 wherein indicating the presence of malware comprises displaying an alert indicating the presence of malware.

Example 19 includes the subject matter of example 10 wherein the first monitor data and the second monitor data comprise network flow data.

Example 20 is a computer system comprising a processor an operating system comprising instructions that when executed by the processor control the processor and provide an operating system environment for other software to execute on the processor an intrusion detection software comprising instructions that when executed by the processor in the operating system environment cause the processor to record network traffic of the computer system as a first monitor data and a secure hardware trusted environment configured to record network traffic of the computer system as a second monitor data wherein the secure hardware trusted environment is outside of the operating system environment wherein the computer system is configured to compare the first monitor data with the second monitor data and generate an alert if the first monitor data is not the same as the second monitor data.

Example 21 includes the subject matter of example 20 wherein the first monitor data and the second monitor data comprise network flow data.

Example 22 includes the subject matter of example 20 wherein intrusion detection system further comprises instructions that when executed by the processor in the operating system environment cause the processor to request the second monitor data from the secure environment and compare the first monitor data with the second monitor data by the intrusion detection system in the operating system environment.

Example 23 includes the subject matter of example 20 wherein the intrusion detection software is configured to cause the process to record network traffic continuously.

Example 24 includes the subject matter of example 20 wherein the computer system is configured to compare the first monitor data and the second monitor data periodically.

Example 25 is a computer system comprising means for performing the method of any one of examples 10 19.

Example 26 is a computer system comprising a processor an operating system comprising instructions that when executed by the processor control the processor and provide an operating system environment for other software to execute on the processor a secure trusted environment a memory coupled to the processor and the secure trusted environment on which are stored instructions that when executed cause the computer system to monitor network traffic of the computer system in an environment controlled by an operating system of the computer system producing a first monitor data monitor network traffic of the computer system in a secure environment not controlled by the operating system producing a second monitor data compare the first monitor data with the second monitor data and

Example 27 includes the subject matter of example 26 wherein the instructions that when executed cause the computer system to compare the first monitor data with the second monitor data comprise instructions that when executed cause the computer system to send the first monitor data from the environment controlled by the operating system to the secure environment and compare the first monitor data with the second monitor data in the secure environment.

Example 28 includes the subject matter of example 26 wherein the instructions that when executed cause the computer system to compare the first monitor data with the second monitor data comprise instructions that when executed cause the computer system to send the second monitor data from the secure environment to the environment controlled by the operating system compare the first monitor data with the second monitor data in the environment controlled by the operating system.

Example 29 includes the subject matter of example 26 wherein the instructions that when executed cause the computer system to compare the first monitor data with the second monitor data comprise instructions that when executed cause the computer system to send the first monitor data and the second monitor data to an external facility and compare the first monitor data with the second monitor data in the external facility.

Example 30 includes the subject matter of any of examples 26 29 wherein the instructions further comprise instructions that when executed cause the computer system to generate an alert indicating the presence of malware on the computer system.

Example 31 includes the subject matter of examples 26 29 wherein the instructions that when executed cause the computer system to compare the first monitor data with the second monitor data comprise instructions that when executed cause the computer system to limit the comparison by an exclude list.

Example 32 includes the subject matter of example 26 wherein the instructions further comprise instructions that when executed cause the computer system to generate a malware alert in the operating system environment or the secure environment.

Example 33 includes the subject matter of example 32 wherein the instructions that when executed cause the computer system to generate a malware alert in the operating system environment or the secure environment comprise instructions for sending the malware alert via a network.

Example 34 includes the subject matter of example 26 wherein the instructions further comprise instructions that when executed cause the computer system to quarantine the computer system.

The above description is intended to be illustrative and not restrictive. For example the above described embodiments may be used in combination with each other. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the invention therefore should be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

