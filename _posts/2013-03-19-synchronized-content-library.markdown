---

title: Synchronized content library
abstract: The disclosed technology addresses the need in the art for synchronizing a content library between a content management system and client devices. Each content item in a user's content library is stored on the content management system and a record of each change to the content library is recorded in a content journal. A client device transmits a synchronization request that a portion of the content journal representing unsynchronized changes be processed to update the content library on the client device. The synchronization request includes a content library identifier and a content journal number identifying the content entry in the content journal last processed by the client device. Synchronization commands are sent based on the content entries not processed by the client device. Updated synchronization data representing the processed content entries is sent to the client device after synchronization is completed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09398090&OS=09398090&RS=09398090
owner: Dropbox, Inc.
number: 09398090
owner_city: San Francisco
owner_country: US
publication_date: 20130319
---
This application claims the benefit of priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 749 754 filed on Jan. 7 2013 which is incorporated herein by reference in its entirety.

The present technology pertains to a content library and more specifically pertains to synchronizing a content library across a content management system and client devices.

Online content management systems enable users to store content items online so that the content items can be accessed from a variety of client devices. These online content management systems enable a user to upload content items to the online content storage and access the stored content items from the online storage. While these systems do allow the content item to be accessed from multiple client devices a network connection is required to access the stored content items. To access the content items when a network connection is unavailable a user must maintain a copy of the content library locally on a client device.

Ensuring that the content library is synchronized between the content storage system and client devices is often left to the user and can result in inconsistent content libraries and lost changes. For example to maintain a synchronized content library across the content storage system and two client devices changes made to a content item on a first client device must be uploaded to replace the content item on the content management system and then downloaded to the second client device to replace the content item stored on the second client device. If the user makes revisions to the content item stored on the second client device without first downloading the revised content item the changes made to the content item on the first client device will not be reflected in the version of the content item stored on the second client device and vice versa.

Further content management systems that do manage synchronization of the content libraries are inefficient and time consuming often replacing the entire content library to synchronize between two devices. Accordingly a need exists for an improved method of synchronizing a content library across a content management server and client devices.

Features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out hereinafter. These and other features of the disclosure will become more fully apparent from the following description and accompanying drawings or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for synchronizing a content library between a content management system and client devices. A content library can consist of any number of individual content items. A content item can be any type of file such as a document text file audio file video file etc. Further a content item can be a folder or other mechanism of grouping content items together.

The disclosed technology enables a user to store content items in a content library that can be accessed and modified from multiple client devices. Changes made to the content library when accessed from a first client device including adding deleting or modifying content items can be synchronized across other client devices. Synchronizing can include transmitting changes made to the content library stored on a first client device to the content management system and other client devices having the content library. A user can thus modify their content library from a first client device and any changes made to the content library from the first user device can be synchronized such that the content library reflects the changes when accessed from a second client device.

To accomplish this the disclosed technology can be configured to store each content item in a user s content library in a content storage of the content management system. As the content items are added deleted or modified the content management system can record each change to the content library as a separate content entry in a content journal associated with the content library. Each time the content library is accessed from a client device the client device can send a synchronization request to the content management system requesting that any new content entries recorded since the last time the content library was accessed by the client device be processed to update the content library on the client device. Thus the content library can be synchronized to indicate any changes made to the content library from a different client device.

To insure that only new content entries are processed when the content library is accessed by a client device the content management system can be configured to store synchronization data on the client device including a content library identifier identifying the content library to be synchronized and a content journal number identifying the content entry in the content journal last processed by the client device. The stored synchronization data can be transmitted to the content management system along with the synchronization request. In some embodiments the synchronization request stored on the client device can be encoded so that the client device cannot access the content library identifier and content journal number. For example the synchronization data can be an opaque data type such as an opaque string.

The content management system can use the received synchronization data to identify a portion of the content journal representing the state of the content journal known to the client device as well as any content entries representing changes that are unknown to the client device. The content management system can be configured to analyze the content entries representing changes that are unknown to the client device to transmit any necessary synchronization commands to the client device. A synchronization command can include data from the content entry that can be used by the client device to make the change to the content library on the client device represented by the content entry.

In some embodiments the content management system can exclude the change represented by a content entry from being sent to the client device as a synchronization command. For example content entries that are determined to not be the latest content entry associated with a specific content item can be excluded because the change represented by the content entry is outdated and irrelevant. Further content entries indicating that a content item has been deleted from the content library can be excluded when the synchronization request is the first synchronization request received from the client device because the content item to be deleted was never added to the content library on the client device.

Upon synchronizing the content library on a client device with the content library on the content management system the content management system can be configured to transmit updated synchronization data to the client device. In some embodiments the updated synchronization data can be encoded prior to being transmitted to the client device.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the art will recognize that other components and configurations may be used without departing from the spirit and scope of the disclosure.

The disclosed technology addresses the need in the art for synchronizing a content library between a content management system and client devices. A content library can consist of any number of individual content items. A content item can be any type of file such as a document text file audio file video file etc. Further a content item can be a folder or other mechanism of grouping content items together.

The disclosed technology can enable a user to store content items in a content library that can be access and modified from multiple client devices. Changes made to the content library when accessed from a first client device including adding deleting or modifying content items can be synchronized across other client devices used to access the content library. Synchronizing can include changing the content library stored on a client device such that the content library is the same when accessed on each client device. A user can thus manage their content library from a first client device and any changes made to the content library from the first user device can be synchronized such that the content library reflects the changes when accessed from a second client device.

To accomplish this the disclosed technology can be configured to store each content item in a user s content library in a content storage of the content management system. As the content items are added deleted or modified the content management system can record each change to the content library as a separate content entry in a content journal associated with the content library. Each time the content library is accessed from a client device the client device can request that any new content entries recorded since the last time the content library was accessed by the client device be processed to update the content library on the client device. Thus the content library is synchronized to indicate any changes made to the content library from a different client device.

To insure that only new content entries are processed when the content library is accessed by a client device the content management system can be configured to store synchronization data on the client device including a content library identifier identifying the content library to be synchronized and a content journal number identifying the content entry in the content journal last processed by the client device. Thus any content entries created after the content entry identified by the content journal number can be processed to synchronize the content library on the client device with the content library on the content management system.

An exemplary system configuration is shown in wherein electronic devices communicate via a network for purposes of managing a synchronized content library across multiple client devices. The system can be configured for use on a wide area network such as that shown in . However the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices. For example each of the components of system in can be implemented in a localized or distributed fashion in a network.

In system a user can interact with content management system through client devices . . . collectively connected to network by direct and or indirect communication. Content management system can support connections from a variety of different client devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Client devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple client devices .

A user can interact with content management system via a client side application installed on client device . In some embodiments the client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system via a third party application such as a web browser that resides on client device and is configured to communicate with content management system . In either case the client side application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system via a client side application integrated with the file system or via a webpage displayed using a web browser application.

Content management system can make it possible for a user to synchronize a content library between the content management system and client devices . Further the content management system can make it possible for the user to perform a variety of content management tasks such as retrieve modify browse and or share the content items. For example client device can upload content items to content management system via network . The content items can later be retrieved or modified from content management system using the same client device or some other client device .

To access the various content management services content management system can be configured to enable a user to create a user account with the content management system . For example content management system can include an account management module configured to prompt a user to enter account information to create a new user account. Account information can include any variety of information about the user including a user s name address phone number age etc. In some embodiments the only account information necessary to create a user account can be a user name and password.

The account management module can be configured to create a new user account using received account information. This can include communicating with a user account database configured to store user account profiles for registered users. The account management module can be configured to create a new user account profile in the user account database using the received account information.

Further the account management module can be configured to generate a unique content library identifier associated with the newly created account and store the content library identifier in the user account profile. The content library identifier can be used to identify content items as part of the user s content library. This concept is described in further detail below.

A user account profile can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc.

The user account enables a user to store content items such as documents text files audio files video files etc. from one or more client devices authorized on the user account. The content can also include folders of various types with different behaviors or other mechanisms of grouping content items together. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system can hide the complexity and details from client devices so that client devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on client device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of inexpensive disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT NTFS EXT EXT EXT ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more client devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example client device can include client software which synchronizes via a synchronization module at content management system content in client device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes client device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content items via a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other client devices associated with the user s account. For example multiple client devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple client devices .

Content management system can include communications interface for interfacing with various client devices and can interact with other content and or service providers . . . collectively via an Application Programming Interface API . Certain software applications can access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific client devices and so forth to ensure only authorized clients and users can access files. Further content management system can include analytics module module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . For example the sharing module can generate a custom network address such as a uniform resource locator URL which allows any web browser to access shared content in the content management module without any authentication. Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple client devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

The content management system can include a content management module configured to create and update a content journal used to manage a content library and synchronize the content library between the content management system and client devices . A content journal can be a list of content entries each associated with a content item in the content library. Each content entry can include information used to identify the content item and describe the current state of the content item including the location of the content item the name and file hierarchy of the content item and the content library to which the content item belongs.

The content management module can be configured to add a new content entry to the content journal for each content item added to the content library. For example the content management module can be configured to receive input indicating that a new content item has been added to the content library and in response to the input create a new content entry associated with the new content item added to the content library.

In some embodiments the content management module can be configured to modify an existing content entry associated with a content item upon a user making a change to the content item such as changing the content items name location content etc. For example the content management module can be configured to access the content entry associated with the content item and modify the content entry to reflect the change made to the content item.

In some embodiments the content management module can be configured to create a new content entry for every change that occurs in regards to the content library. Each content entry therefore can represent an addition deletion or modification of a content item. Therefore multiple content entries can be associated with a single content item however only one content entry can indicate the latest state of the content item in the content library.

Thus if a content item in the content library is changed to give the content item a new name the content management module can create a new content entry associated with the same content item that indicates the modified current state of the content item i.e. the new name. The changed content item can thus be associated with two content entries the old content entry indicating the original name of the content item and the new content entry indicating the new name of the content item.

In some embodiments the content management module can be configured to delete the old content entry upon creating a new content entry associated with the content item. In some embodiments however the content management module can be configured to keep the old content entry and the new content entry associated with the content item. This allows a history of the content library to be maintained for recording purposes.

In embodiments where old content entries are not deleted the content management module can be configured to mark the new content entry as being the latest content entry associated with the content item and mark the old content entry as no longer being the latest content entry associated with the content item. For example each content entry can include a latest flag indicating whether the content entry is the latest content entry associated with a content item and the content management module can be configured to modify the latest flag associated with a content entry accordingly.

The content pointer can be used to identify the location of the content item in the content storage . For example the content pointer can include the exact storage address of the content item in the content storage . In some embodiments the content pointer can point to multiple locations in the content storage each of which contains a portion of the content item.

As shown the content pointer of the first content entry has a value of 0001 indicating that the content item associated with the content entry is located at memory location . The content pointer for the second content entry has a null value. This can be because the content item associated with the second content entry is a directory and thus is not associated with a file stored in the content storage. The content pointer of the third content entry has a value of 1002 indication that the content pointer associated with the third content entry is located at memory location .

The content library identifier can identify the content library to which the content item is associated. The content library identifier can also be used to manage access to the content item. For example only user accounts associated with the content library identifier can be allowed access to the content item. As shown each of the three content entries is associated with the same content library identifier 178 indicating that the three content entries are all part of the same content library.

In some embodiments the content journal can include content entries associated with various content library identifiers such that the content entries in the content journal are not all associated with the same content library. In some embodiments a unique content journal can be maintained for each content library such that each entry in the content journal is associated with the same content library identifier and thus the same content library.

The content journal number can be a unique number identifying each content entry in the content journal. In some embodiments the content journal number can also indicate an order in which the content entries are added to the content journal. For example the content journal number assigned to the first content entry added to the content journal can be one and the content journal number can be incremented for each new content entry added to the content journal. In some embodiments new content entries can be added to the bottom of the content journal. An example of this is shown in where the content journal number for the first content entry is one the content journal number of the second content entry is two and the content journal number of the third content entry is three.

The content path can identify the name of the content item as well as a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. As shown in the content path of the first content entry is ReadMe.txt. This indicates that the content item is named ReadMe.txt and the content item is located in the root folder.

The content path of the third content entry is Photos Face.jpeg. This can indicate that the content item is named Face.jpeg and the content item located in the Photos folder which is located in the root folder.

The content path can be used by a client device to present the content items in the content library in the appropriate folder hierarchy.

The latest flag can indicate whether the content entry is the latest content entry associated with the content item. For example the latest flag can be a Boolean value set to true or 1 to indicate that the content entry is the latest content entry associated with the content item. The latest flag can be set to false or 0 to indicate that the content entry is not the latest content entry associated with the content item.

This can be useful in embodiments where the content management system is configured to keep the old content entry associated with a content item upon creating a new content entry associated with the content item. For example the content management module can be configured to set the latest flag to true or 1 when creating a new content entry. The content management system can be further configured to change the latest flag of the old content entry associated with the content item to false or 0 to indicate that the old content entry is not the latest content entry associated with the content item.

The directory flag can indicate whether the content item is a directory or folder. For example the directory flag can be a Boolean value that can be set to true or 1 to indicate that the content item is a directory. Alternatively the directory flag can be set to false or zero to indicate that the content item is not a directory. As shown in the first and second content entries have a directory flag value of false indicating that the content items associated with the first and third content entries respectively are not directories. The second content entry has a directory flag set to true indicating that the content item associated with the second content entry is a directory.

The content size can indicate the size of the content item associated with the content entry. For example the size can indicate the size of the content item in kilobytes. As shown the first content entry has a content size of 85 indicating that the content item associated with the first content item has a size of 85 kilobytes. The second content entry has a content size of 0. This is because the second content entry is a directory as indicated by the directory flag and thus has no size.

In some embodiments the content size can be used to indicate that a content item has been deleted from a content library. For example the content management module can be configured to set the content size to a negative value to indicate that the content item has been deleted.

As shown the content size of the fourth content entry is 1 which indicates that the content item Face.jpg has been deleted. Further the latest flag state associated with the third content entry has been changed to false to indicate that the third content entry is no longer the latest content entry for the content item Face.jpg. As shown the content pointer of the fourth content entry has not been changed even though the content item has been deleted from the content library. This is because in some embodiments the content item can remain in the content storage when the content item is deleted from the content library. This can allow the content item to be recovered if necessary for example if the content item was deleted by accident.

In some embodiments the content item can be deleted from the content storage when the content item is deleted from the content library and the content pointer can be set to null in the content entry indicating the deletion of the content item. Thus in this type of embodiment the content pointer of the fourth content entry would be set to null rather than retain the value of a location in the content storage.

In some embodiments the content item can be maintained in the content storage for a limited time after deletion and then be removed from the content storage. This allows a limited time for the content item to be recovered after being deleted from the content library.

Upon receiving the change input the method continues to block where a new content entry recording the change to the content library is added to the content journal. In some embodiments the content journal can be associated with a single content library such that all entries in the content library are recording changes made to the same content library. In some embodiments the content journal can record changes to multiple content libraries.

The new content entry can include information describing the content item associated with the change input. For example the new content entry can include a content library identifier that identifies the content library to which the content item belongs the name and file hierarchy of the content item in the content library a location of the content item in memory etc. The new content entry can also include a content journal number indicating the sequential position in which the new content entry was added to the content journal. For example if the content journal included 5 content entries prior to the new content entry being added to the content journal the new content entry can have a content journal number of to indicate that it is the content entry added to the content journal.

In embodiments in which the content journal is not exclusive to a single content library the content journal number can indicate the sequential position in which the new content entry was added to the content journal in regards to the content library to which the content item belongs. For example a content entry that is the content entry added to the content journal but only the content entry added to the content journal in regards to a specific content library can be given a content journal number of to indicate that it is the third content entry in the content journal added in relation to the specific content library.

Further the new content entry can also include a latest flag that is set to indicate that the new content entry is the latest content entry associated with the content item i.e. no other content entry associated with the content item been created after the new content entry. In some embodiments the latest flag can be a Boolean variable set to true to indicate that the new content entry is the latest content entry associated with the content item.

Upon creating the new content entry the method continues to block where it is determined if there is an old content entry in the content journal that is associated with the content item associated with the new content entry. An old content entry can be any content entry in the content journal other than the new content entry that is associated with the same content item as the new content entry.

If an old content entry associated with the content item does exist the method continues to block where the latest flag of the old content entry is set to indicate that the old content entry is not the latest content entry in the content journal associated with the content item. For example the latest flag can be a Boolean value set to false to indicate that the old content entry is not the latest content entry associated with the content item. The method then ends. Likewise if at block it is determined that there is no old content entry associated with the content item the method ends.

Returning to the discussion of content management system can be configured to use the content journal to synchronize the content library between content management system and client devices . For example client device can be configured to transmit a synchronization request to the content management system requesting that the content library on client device be synchronized with the content library stored on content management system . The synchronization request can include synchronization data including a content library identifier and a content journal number used by content management system to identify content journal entries representing changes to the content library that are unknown to client device and have thus not been made to the content library on client device . Further content management system can send synchronization commands to client device instructing client device to make the appropriate changes to the content library on client device . Content management system can further transmit updated synchronization data to client device that reflects the completed synchronization.

Using the content journal to synchronize the content library on client device with the content library on content management system is discussed in further detail in which are discussed in view of .

In some embodiments the synchronization request can include synchronization data identifying the content library and a position in the content journal. For example content management system can maintain a content journal that records changes made to the content library. Changes to the content library can include adding content items to the content library deleting content items from the content library and modifying content items in the content library. A new content entry can be added to the content journal for each change made to the content library. For example content entries can be added to the content journal as described in .

The synchronization data included in the synchronization request can thus include a content library identifier and a content journal number as described in . The content library identifier can identify a content library to be synchronized on client device and the content journal number can be a sequential position in the content journal associated with the content library that represents the latest state of the content library known to client device and to which client device has been previously synchronized. For example the content entry identified by the content journal number can indicate the most recent change to the content library that the content library on client device has been updated to reflect.

Thus the content journal number received in the synchronization request indicates a portion of the content journal that represents a state of the content library that is already known to client device and that the content library on client device has been synchronized to reflect. The content journal number received in the synchronization request can also be used to identify a portion of the content journal that represents changes to the content library unknown to client device and that the content library on client device has not been synchronized to reflect. For example the content entry identified by the content journal number can represent the content entry last processed by client device as a result of the previous synchronization request made by client device . Thus all content entries added to the content journal prior to the content entry identified by the content journal number represent changes known to client device and that have already been synchronized on client device . Further all content entries added to the content journal after the content entry identified by the content journal number represent changes that occurred after the previous synchronization request made by client device .

In some embodiments the synchronization data can be received in an encoded format. For example it may be beneficial to provide limited information to client device about how the content library is maintained by content management system . In view of this goal the synchronization data stored on client device can be in an encoded format such that the content library identifier and the content journal number included in the synchronization data cannot be accessed by client device . For example in some embodiments the synchronization data can be received as an opaque data type such as an opaque data string.

Upon receiving the synchronization request the method continues to block where content management system can determine the content library identifier and content journal position included in the synchronization request. For example content management system can decode the received synchronization data to determine the content library identifier and the content journal position.

The method then continues to block where content management system can determine if there is a next content entry in the content journal in sequential order after the content entry identified by the content journal number. For example if the content journal number is content management system can determine if there is a content journal entry with a content journal number of .

If content management system determines that there is a content journal entry after the content entry identified by the content journal number the method continues to block where content management system can process the next content journal entry. This is described in further detail in .

Upon content management system processing the next content entry the method continues to block where content management system can increment the content journal number to indicate that the previously unprocessed content journal entry has been processed. For example the content journal number can be incremented to identify the content journal entry that was processed in step . Thus the incremented content journal number indicates the updated portion of the content journal entry synchronized with the client device.

The method then returns to block where content management system can determine whether there is a next content entry that has not been synchronized based on the incremented content journal number.

If at block content management system determines that there is no next content entry and thus all the content entries associated with the content library in the content journal have been synchronized with client device the method continues to block where content management system can transmit updated synchronization data to client device . For example the content library identifier and an updated content journal number indicating the final content entry synchronized with client device can be transmitted to client device . In some embodiments content management system can encode the synchronization data prior to transmitting the synchronization data to client device so that client device cannot access the content library identifier and the content journal number.

In some embodiments the synchronization request received at block can include multiple content library identifiers and a content journal position associated with each content library identifier. For example a user can include multiple content libraries associated with their user account such as a personal content library and a shared content library. The different content libraries can each be associated with a unique content library identifier and the synchronization data can include a content library identifier and a content journal number for each content library.

In this type of embodiment method steps through can be repeated by content management system for each content library identified by a content library identifier included in the synchronization request. Further in some embodiments the synchronization data transmitted to client device in step can include the content library identifier and the associated updated content journal number for each content library identified by a content library identifier included in the synchronization request received at step .

At block content management system determines whether the content entry represents a deletion to a content item in the content library. In some embodiments a content size variable representing the size of the content item associated with the content entry can be set to a negative number to indicate that the content item has been deleted from the content library. Alternatively in some embodiments the content entry can include a delete flag indicating whether the content entry represents a deletion of a content item. For example the delete flag can be a Boolean variable that can be set to true to indicate that the content entry is a deletion of a content item or the Boolean variable can be set to false to indicate that the content entry is not a deletion.

If at block content management system determines that the content entry is a deletion the method continues to block where content management system determines whether the synchronization request received from client device is the first synchronization request received from client device . In some embodiments the content journal number received with the synchronization request can be used to determine if the synchronization request is the first synchronization request received from client device . For example if the content journal number identifies the first content entry added to the content journal it can be determined that the synchronization request is the first synchronization request received from client device . Alternatively in some embodiments a record of the synchronization requests received from client device can be kept by content management system and the record can be checked to determine if the synchronization request is the first synchronization request received from client device .

If content management system determines that the synchronization request is not the first synchronization request received from client device the method continues to block wherein content management system transmits a synchronization command to client device based on the content entry. A synchronization command can include data included in the content entry that can be used by client device to make the change to the content library on client device represented by the content entry. The method then ends.

If at block content management system determines that the synchronization request is the first synchronization request received from client device the method ends without sending the synchronization command to client device . This is because based on the fact that a synchronization request has not been received from client device it is known that the content item deleted by the content entry has not been previously added to the content library on client device . Thus transmitting a synchronization command to delete the content item would be an unnecessary step.

If at block content management system determines that the content entry does not represent a deletion the method continues to block where content management system transmits a synchronization command is to client device based on the content entry. The method then ends.

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

