---

title: Multi-domain applications with authorization and authentication in cloud environment
abstract: A multi-domain application requiring SSO and SLO operations in cloud environment is presented. The computing system of the multi-domain application includes a multi-domain service (MDS) to redirect the calls for the multi-domain application to an identity provider to authenticate the user or to invoke the single logout services (SLOs) on the domains of the multi-domain application and to invalidate the user sessions on the domains. A cookie that includes the multi-domain application URL is generated to reach the assertion consumer service (ACS) and the single logout service (SLO) that receive an identity assertion response from the identity provider. Domain specific SLOs are provided. A trust between these domain specific SLOs and the SLO is provided based on service provider keys. The SAML mechanism for a logout scenario is reused for communication between the SLO and the domain specific SLOs, where the SLO plays a role of a local IDP.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09386007&OS=09386007&RS=09386007
owner: SAP SE
number: 09386007
owner_city: Walldorf
owner_country: DE
publication_date: 20131227
---
In cloud environment software products such as cloud based applications can be provided as services. One system may be used to host and run multiple applications or multiple instances of an application for one or more customers. A cloud platform enables a large number of computers to be connected through a real time network such as the Internet. In this way hosted application services that run on the cloud platform can be provisioned to run client server software on a remote location. End users may access the cloud based applications through a Web browser a thin client a mobile application etc. while the enterprise software and the users data are stored on server nodes at a remote location. Cloud providers may install and operate application software in the cloud and cloud users access the software from cloud clients. Cloud users may not manage the cloud infrastructure and platform where the application runs. This would eliminate the need to install and run the application on the cloud users own computers which simplifies maintenance and support.

Authorization and authentication between a Web browser and a Web application of a cloud provider may be performed via Security Assertion Markup Language SAML . SAML is an XML based Extensible Markup Language open standard data format for exchanging authorization and authentication data between an identity provider and a service provider. An identity provider is responsible for issuing identification information for all providers looking to interact with a system such as a system on the cloud platform . This is achieved via an authentication module which verifies a security token as an alternative to explicitly authenticating a user within a security realm. One of the features that SAML addresses is Web browser single sign on SSO .

Embodiments of techniques for methods and systems including a multi domain application with authentication and authorization in cloud environment are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Generally the SAML specification defines three roles the user the identity provider IDP and the service provider SP . The user requests a service from the service provider then the service provider requests and obtains an identity assertion from the identity provider. On the basis of this assertion the service provider can make an access control decision this means it can decide whether to perform some service for the connected user. Before delivering the identity assertion to the SP the IDP may request some information from the user to authenticate the user such as a user name and a password. The SAML specifies the assertions between the three parties the messages that assert identity that are passed from the IDP to the SP. In SAML one identity provider may provide SAML assertions to many service providers. Conversely one SP may rely on and trust assertions from many independent IDPs.

Computing system includes one or more Web clients such as Web browser connected to a cloud platform . Users can access cloud platform and its resources e.g. enterprise applications by sending requests via the Web browser . SSO options for Web based access enable users to securely access information and back end system resources located in the intranet or on the Internet. The communication for Web based authentication and respectively access authentication uses mechanisms that are supported by the HTTP protocol for Internet communication.

Cloud platform may include one or more virtual machines of a customer system. The Web browser is also connected to an identity provider IDP . The identity provider can be described as a service provider for storing identity profiles. It should be noted however that IDPs can also provide services beyond those related to the storage of identity profiles. In various embodiments the IDP is an identity assertion provider a specific form of an authentication provider that allows users or system processes to assert their identity using tokens. Identity assertion providers enable perimeter authentication and support single sign on. The identity assertion provider can generate a token from a digital certificate and that token can be passed around the system so that users are not asked to sign on more than once. IDP is a separate module against which the user authenticates. IDP may support various user authentication mechanisms certificate user name password etc. 

The virtual machine includes an SAML login module . A login module may handle a variety of authentication mechanisms including user name password combinations smart cards biometric devices and so on. The login module may provide single sign on SSO via a particular SSO protocol framework e.g. SAML OpenID and SPNEGO can check for the presence of hardware security tokens e.g. a USB token and so on. Login modules contain the actual code for authentication. A login module can use various mechanisms to authenticate user credentials. The code could retrieve a password from a database and compare it to the password supplied to the module. The SAML login module checks the request sent from the Web browser requesting authentication access to enterprise application . The SAML login module is part of the service provider of cloud platform . The SAML login module is a Java Authentication and Authorization Service JAAS login module that can request authentication and logout functions from an identity provider. In addition the SAML login module validates SAML assertions issued by the identity provider to authenticate a given user.

The SAML login module represents a service provider that authenticates the user request before passing the request to the application . The service provider represented by the SAML login module contacts a separate online identity provider to authenticate users who are trying to access secure content. The service provider requests and obtains an identity assertion from the identity provider based on the authentication parameters provided with the request. The identity provider includes a list of endpoint URLs for which the IDP can issue identity assertions. The IDP is connected to a user database that stores user data for the identity assertions. There is a pre defined trust relationship between the service provider and the identity provider . The service provider trust the assertions issued by the identity provider and the identity provider issues assertions on the results of the authentication and authorization of users who are willing to access services at the SAML login module .

Cloud platform also includes a set of services such as Assertion Consumer Service ACS and Single Logout Service SLO . ACS and SLO are implemented according to the SAML standard. In various embodiments they may be implemented as servlets accessed via endpoint URLs. The SLO service is a service provided by the service provider. The SLO processes logout requests and logout responses sent by the identity provider. The URL location of the SLO service is listed in the identity provider. The ACS receives and processes assertions from the IDP . For service provider initiated single sign on if the Assertion Consumer Service ACS endpoint is specified in the authentication request then this ACS endpoint should match to one of the entries in the configured list of ACS URLs on the identity provider side.

In a single sign on SSO scenario at step S the Web browser sends a request to cloud platform to access enterprise application . Enterprise application is protected with the SAML standard in a declarative way. The request is processed by the virtual machine . It is checked if the user of the request is authenticated to access the enterprise application . The SAML login module is invoked. The SAML login module is responsible to authenticate the user of the request. The SAML login module acts as a service provider and generates an SAML authentication request. The SAML authentication request is encoded and embedded into the URL for the IDP s SSO service.

At step S the SAML login module sends a redirect to the user s browser . The redirect URL includes the encoded SAML authentication request that should be submitted to the IDP s SSO service. In various embodiments the SAML login module sends an authentication request as an URL parameter or as HTTP Post parameter through browser . Further the SAML login module issues an OUC cookie original URL cookie that comprises the requested application URL.

Then at step S the browser sends the authentication request to the IDP . The IDP decodes the SAML authentication request and extracts the URL for the ACS endpoint. The IDP then authenticates the user. Identity providers could authenticate users by either asking for valid login credentials or by checking for valid session cookies. Then the IDP generates an assertion response that includes an assertion parameter with the authenticated user s username. In accordance with the SAML specification this response may be digitally signed with the IDP s public and private keys.

Further at step S the IDP encodes the assertion response and the OUC cookie name and returns that information to the user s browser . The IDP provides a mechanism so that the browser can forward that information to ACS at S. The ACS verifies the SAML assertion response using the predefined trust with the IDP . At S if the response is successfully verified the ACS redirects the response to the browser . Since the enterprise application URL is not part of the assertion parameter the ACS retrieves the enterprise application URL from the OUC cookie.

Then at S the browser sends a request to the enterprise application using the retrieved enterprise application URL from the OUC cookie and the assertion parameter. The request is received at the SAML login module . The SAML login module receives the assertion parameter from the IDP and based on it logs the user into the application . During the login a session cookie and a tenant session cookie if a tenant session cookie was not already issued are issued. Then the Web browser is redirected to the original application URL. The OUC cookie is deleted.

While single sign on means creating a new session based on a session at the IDP single logout specifies a method to remove all sessions both at the IDP and all of the SPs at once. In a single logout SLO scenario users can cleanly close all their sessions in a SAML landscape. At step S the Web browser sends a single logout request to the enterprise application . The SAML login module is invoked. The SAML login module checks if the user is authenticated and invalidates the user session. Then the SAML login module redirects the browser to the IDP to invalidate the global session.

At step S the SAML login module sends a redirect to the user s browser . The redirect URL includes the SAML logout request that should be submitted to the IDP s SLO service. In addition the SAML login module adds an SAML assertion parameter that the IDP is going to process. Further the SAML login module generates an OUC cookie original URL cookie that comprises the original application URL.

Then at step S the browser sends the logout request to the IDP . The IDP receives the SAML logout request and the OUC cookie name. The IDP then invalidates the current user session on the IDP. In addition the IDP enumerates other service providers if any and invokes their SLO service endpoints to invalidate their local sessions as well.

Further at step S the IDP encodes the assertion parameter and the OUC cookie name and returns that information to the user s browser . The IDP provides a mechanism so that the browser can forward that information to SLO at S. The SLO verifies the SAML assertion response using the predefined trust with the IDP . At S the SLO redirects the response to the browser . Since the enterprise application URL is not part of the assertion parameter the SLO retrieves the enterprise application URL from the OUC cookie.

Then at S the browser sends a request to the enterprise application using the retrieved enterprise application URL from the OUC cookie and the assertion parameter. The request is received at the SAML login module . The SAML login module receives the assertion parameter from the IDP and based on it logs the user out of the application and invalidates the user session. During the logout a session cookie and a tenant session cookie if a tenant session cookie was sent from the Web browser are invalidated. Then the Web browser is redirected to the original application URL. The OUC cookie is deleted.

During logout the IDP invalidates different SP sessions by enumerating the SPs SLO endpoints and invoking them. This means that when a call for session invalidation comes to the SLO endpoint the respective session has to be invalidated. Additionally on every request both sessions the standard session and the tenant session are checked and if the tenant session is missing or is invalid then that means the standard Web server session is not valid anymore.

The presented SSO and SLO scenarios may not handle multiple URL domains for accessing an enterprise application. This is because the SLO endpoint configuration and the ACS endpoint configuration on the IDP site are per a service provider. This means that the domain of the SLO ACS endpoints should be the same or at least have the same root domain such as .ondemand.com as the enterprise application that is requested. Both endpoints may consume the OUC cookie that is issued when the enterprise application is requested. For example if there are two domains example.eu domain and example.de domain the ACS endpoint and the SLO endpoint may be set to be on authn.example.eu domain and define this configuration in the IDP that means the SAML login logout for example.de may not work. A workaround may be creating a second service provider for the example.de domain. Although this is a working solution it means additional overhead for the user.

In various embodiments a computing system is presented that supports multiple domains within one service provider for authentication and authorization scenarios such as SAML SSO and SLO scenarios. Computing system includes similar elements as computing system . Further to the elements of computing system system includes a multi domain service MDS as part of services . The MDS endpoint is invoked to redirect the calls coming from the enterprise application to the IDP and to issue the OUC cookie with the correct domain name. In multiple domain scenarios the OUC cookie has to reach the ACS and SLO endpoints. The OUC cookie can reach the ACS and SLO endpoints if the OUC cookie is issued from the domain where the services endpoints reside. That is why the MDS is presented and invoked to generate the OUC cookie with the correct domain name.

Further computing system enables when a logout request is received at the SLO the service provider to log out the user from domains used. In various embodiments the domains that the user had logged in are enumerated. Then the local SLO endpoint is invoked on an enumerated domain to log out the user from this domain. The local SLO is a service running on an application domain. This may be the SLO endpoint that resides in the enterprise application virtual machine and that is visible on the domains where the enterprise application is visible.

In a single sign on SSO scenario at step S the Web browser sends a request to cloud platform to access enterprise application . For example the user tries to access via the Web browser a domain with the following URL http example.eu . . . Enterprise application is protected with the SAML standard in a declarative way. The request is processed by the virtual machine . It is checked if the user of the request is authenticated to access the enterprise application . The SAML login module is invoked. The SAML login module is responsible to authenticate the user of the request. The SAML login module acts as a service provider and generates an SAML authentication request.

The SAML login module determines that the enterprise application is a multi domain application. This means an application that can be requested and can run on multiple domains in parallel. For example http example.eu . . . http example.com . . . http example.net . . . and so on. Therefore the SAML login module redirects the browser to the MDS endpoint URL at S. The MDS endpoint URL points to a domain on which the services endpoints can be invoked. For example mds.ondemand.com acs.ondemand.com slo.ondemand.com . In addition the SAML login module adds one or more signed request parameters for the MDS to issue an assertion which the IDP has to process.

At S. the browser requests the MDS endpoint URL. For example the browser requests mds.ondemand.com . The MDS validates that the request is sent from the SAML login module by the signed request parameters. The MDS issues an OUC cookie that includes the original application URL this is http example.eu . . . Then the MDS creates a login request assertion and redirects the browser to the IDP at S..

Then at step S the browser sends the authentication request to the IDP . The IDP decodes the SAML authentication. The IDP then authenticates the user. Then the IDP generates an assertion response that includes an assertion parameter with the authenticated user s username. In accordance with the SAML specification this response may be digitally signed with the IDP s public and private keys. Also a session cookie is issued for the user for the IDP .

Further at step S the IDP encodes the assertion response and the OUC cookie name and returns that information to the user s browser . The IDP includes the ACS endpoint URL as predefined configuration per a service provider so that the browser can forward the assertion response to ACS at S. The ACS verifies the SAML assertion response using the predefined trust with the IDP .

At S if the response is successfully verified the ACS redirects the response to the browser . Since the enterprise application URL is not part of the assertion parameter the ACS retrieves the enterprise application URL from the OUC cookie. Additionally for multi domain service providers the ACS issues a separate cookie an application domain cookie or extends its current value if the cookie is present with the name of the domain of the requested application e.g. http example.eu . . . The OUC cookie is deleted. In this way the browser is redirected to the original application URL e.g. http example.eu . . . and the IDP assertion is passed to the enterprise application .

Then at S the browser requests the enterprise application using the retrieved enterprise application URL from the OUC cookie and the assertion parameter. The request is received at the SAML login module . The SAML login module receives the assertion parameter from the IDP and based on it logs the user into the application . During the login a session cookie and a tenant session cookie if a tenant session cookie was not already issued are issued. Then the Web browser is redirected to the original application URL.

While single sign on means creating a new session based on a session at the IDP single logout specifies a method to remove the sessions at the IDP at the SPs at once on the multiple domains the user is logged in. In a single logout SLO scenario users can cleanly close their sessions in a SAML landscape. At step S the Web browser sends a single logout request to the enterprise application . The SAML login module is invoked. The SAML login module checks that the user is authenticated and invalidates the user session.

The SAML login module determines that the enterprise application is a multi domain application. Therefore the SAML login module redirects the browser to the MDS endpoint URL at S. The MDS endpoint URL points to a domain on which the services endpoints can be invoked. For example mds.ondemand.com acs.ondemand.com slo.ondemand.com . In addition the SAML login module adds one or more signed request parameters for the MDS to issue an assertion which the IDP has to process.

At S. the browser requests the MDS endpoint URL. For example the browser requests mds.ondemand.com . The MDS validates that the request is sent from the SAML login module by the signed request parameters. The MDS issues an OUC cookie that includes the original application URL e.g. http example.eu . . . Then the MDS creates a logout assertion request and redirects the browser to the IDP at S..

Then at step S the browser sends the logout request to the IDP . The IDP receives the SAML logout request. The IDP then invalidates the current user session on the IDP. In addition the IDP enumerates other available service providers if any and invokes their SLO service endpoints to invalidate their local sessions as well. The user is logged out from the IDP .

Further at step S the IDP encodes the assertion parameter and the OUC cookie name and returns that information to the user s browser . The IDP includes the SLO endpoint URL e.g. slo.ondemand.com as a predefined configuration so that the browser can forward that information to SLO at S. The main task of the SLO is to redirect the browser back to the application URL and to invalidate the user session if still not invalidated for that service provider . The SLO verifies the SAML assertion response using the IDP s keys from the local IDP . Since the enterprise application URL is not part of the assertion parameter the SLO retrieves the enterprise application URL from the OUC cookie. Since the SAML login module supports multiple domains the logout request has to be redirected to the domain specific SLOs of the multiple domains of the service provider where the user is logged in.

In various embodiments the Web browser is redirected to a specific application domain SLO. The main goal of the domain specific SLO is to invalidate the user session if still not invalidated for that domain of the service provider the SAML login module . Then the browser is redirected back to the initial SLO endpoint. In addition an SLO domain cookie is generated to preserve any information from the IDP . In other embodiments the browser is redirected to the enterprise application URL at step S.

In various embodiments the SLO iterates through the multiple domains supported by the service provider where the user is logged in. The names of the multiple domains are stored in the application domain cookie. For a domain from the multiple domains the initial SLO service sends a logout request to the domain specific SLO service of the domain. The domain specific SLO service logs the user out of the domain and sends back a logout response to the initial SLO service. When the domain specific SLO services log the user out of the multiple domains the browser is redirected to the enterprise application URL. The communication between the initial SLO and the domain specific SLOs local SLOs the initial SLO plays a role of a local IDP reusing the service provider keys and for this communication and for the trust between this local IDP and the service provider. Domain specific SLOs are working with the service provider keys and may verify based on the trust that requests are coming from the initial SLO .

At S the initial SLO redirects the response back to the browser . Then at S the browser sends a request to the enterprise application using the retrieved enterprise application URL from the OUC cookie and the assertion parameter. The request is received at the SAML login module . The SAML login module receives the assertion parameter from the IDP and based on it logs the user out of the application and invalidates the user session. During the logout a session cookie and a tenant session cookie if a tenant session cookie was sent from the Web browser are invalidated. The SLO domain cookie is also invalidated. Then the Web browser is redirected to the original application URL. The enterprise application checks that user is already logged out and returns some specific logout page.

In various embodiments the communication between the SLO and the specific application domain SLO could be performed following the SAML IDP initiated logout protocol. The SLO plays the role of a local IDP and in this case it is possible to have no changes in the application domain SLO endpoints. The application domain cookies could store just the mapping index of the logged application domain not the full domain name. Additionally a list with domains indexed should be provided as multi domain configuration.

Process defines a procedure to perform single sign on SSO authentication for a multi domain enterprise application in cloud environment. In various embodiments the SSO is based on the SAML protocol.

At a request is received from a Web browser to access an enterprise application running in cloud environment. The Web container of the server running the enterprise application checks if the user sending the request is authenticated with the enterprise application. If not the service provider is invoked to handle the authentication of the user. The request is received at a service provider of a virtual machine. In various embodiments the service provider is realized as SAML login module . At it is determined that the enterprise application is a multi domain application that can be accessed from multiple domains per a service provider.

At the browser is redirected to request the MDS endpoint by providing the MDS endpoint URL. For example mds.ondemand.com . In addition the service provider adds one or more request parameters signed by the service provider. The request parameters may be used by the MDS to create a login request assertion that will be processed by the IDP. Further an MDS cookie is generated that includes the enterprise application URL at . Thus the MDS is requested by the browser on the MDS domain with at least one or more request parameters signed by the service provider and an MDS cookie with the enterprise application URL. The request is received at the MDS. The MDS verifies that the request is redirected from the service provider by the signed request parameters included in the request.

At an OUC cookie is generated by the MDS. The OUC cookie includes the enterprise application URL. Based on the verified request parameters signed by the service provider a login request assertion is created as a parameter and included in the authentication request. Then the browser is redirected to request the IDP at . The request includes the IDP URL and the login request assertion parameter. The IDP authenticates the user and issues an assertion response. Also the IDP issues a session cookie for the user to the IDP which can be used by the user within the current session. The browser is then redirected to the ACS of the computing system. The ACS URL is listed in the IDP as a predefined configuration.

At the assertion response created by the IDP is received at the ACS. The assertion response is included in the browser request to the ACS together with the OUC cookie name. In various embodiments the ACS has to redirect the browser back to the enterprise application URL. As the enterprise application URL is not part of the assertion response the enterprise application URL is retrieved from the OUC cookie. An application domain cookie is generated that includes the name of the domain of the requested enterprise application. As a result at the browser is redirected to request the enterprise application URL with the assertion response. The OUC cookie is deleted.

At the user is logged in the enterprise application based on the assertion response. During the login a session cookie and a tenant session cookie if the tenant session cookie was not already issued are issued. Then the browser is redirected to the enterprise application URL. As a result a user session is created. Finally the enterprise application is invoked with the authenticated user and application data is returned to the user.

Process defines a procedure to perform single logout SLO mechanism for a multi domain enterprise application in cloud environment. In various embodiments the SLO is based on the SAML protocol.

At a request is received from a Web browser to log out a user from an enterprise application running in cloud environment. The Web container of the server running the enterprise application checks if the user sending the request is authenticated with the enterprise application. If not the service provider is invoked to handle the authentication of the user. The request is received at a service provider of a virtual machine. In various embodiments the service provider is realized as SAML login module . At it is determined that the enterprise application is a multi domain application that can be accessed from multiple domains.

At the browser is redirected to request the MDS endpoint by providing the MDS endpoint URL. For example mds.ondemand.com . In addition the service provider adds one or more request parameters signed by the service provider. The request parameters are may be used by the MDS to create a logout request that will be processed by the IDP. At a user session cookie and a tenant session cookie are invalidated. The request is received at the MDS. The MDS verifies that the request is redirected from the service provider by the signed request parameters included in the request.

At an OUC cookie is generated by the MDS. The OUC cookie includes the enterprise application URL. Based on the verified request parameters signed by the service provider a logout request is created as a parameter and included in the authentication request. Then the browser is redirected to request the IDP at . The request includes the IDP URL and the logout request parameter. The IDP authenticates the user and issues an assertion response. Also the IDP invalidates a session cookie for the user to the IDP. The user is logged out from the IDP. The browser is then redirected to the SLO of the computing system. The SLO URL is listed in the IDP as a predefined configuration.

At the assertion response created by the IDP is received at the SLO service of one or more domains. The assertion response is included in the browser request to the SLO service of one or more domains together with the OUC cookie name. In various embodiments the SLO iterates through the one or more domains supported by the service provider where the user is logged in. The names of the multiple domains are stored in the application domain cookie. For a domain from the multiple domains the initial SLO service sends a logout request to the domain specific SLO service of the domain. The domain specific SLO service logs the user out of the domain and sends back a logout response to the initial SLO service. When the domain specific SLO services log the user out of the multiple domains the browser is redirected to the enterprise application URL.

In various embodiments the SLO has to redirect the browser back to the enterprise application URL. As the enterprise application URL is not part of the assertion response the enterprise application URL is retrieved from the OUC cookie. An SLO domain cookie is generated that includes information from the IDP. As a result at the user sessions for the one or more domains of the service provider are invalidated.

At the browser is redirected to request the enterprise application URL with the assertion response. The OUC cookie the SLO domain cookie and the tenant session cookie are invalidated. At the user is logged out of the enterprise application. Finally the enterprise application determines that the user has logged out and a logout page is returned to the user.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. A computer readable storage medium may be a non transitory computer readable storage medium. Examples of a non transitory computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiment examples are described herein for illustrative purposes various equivalent modifications are possible as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

