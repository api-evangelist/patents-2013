---

title: Native code instruction selection
abstract: Methods, systems, and apparatus, including computer programs encoded on computer storage media, for selecting native code instructions. One of the methods includes receiving an initial machine language instruction for execution by a processor in a first execution mode; determining that a portion of the initial machine language instruction, when executed by the processor in a second execution mode, satisfies one or more risk criteria; generating one or more alternative machine language instructions to replace the initial machine language instruction for execution by the processor in the first execution mode, wherein the one or more alternative machine language instructions, when executed by the processor in the second execution mode, mitigate the one or more risk criteria; and providing the one or more alternative machine language instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563424&OS=09563424&RS=09563424
owner: Google Inc.
number: 09563424
owner_city: Mountain View
owner_country: US
publication_date: 20130131
---
A user of a computing device e.g. a personal computer a mobile phone or a personal digital assistant may install and execute an application downloaded from a web site or received from a friend as an email attachment. However installing and executing such applications on a given computing device typically involves a level of trust that is granted on an all or nothing basis by the operating system of the computing device. Furthermore bugs in the operating system may inadvertently allow applications to access resources As a result some applications e.g. native applications may have full access to the operating system and or resources of the computing device while other applications e.g. web applications may have little to no direct access to the operating system and or resources of the computing device.

Such coarse application of trust may negatively impact the execution of all applications on the computing device. For example native applications may produce unwanted side effects by modifying files on the computing device and or engaging in computation or communication outside of the tasks or features requested by the user. On the other hand web applications may execute one to two orders of magnitude slower than native applications and may provide limited functionality to the user.

Some computer processors can operate in multiple execution modes where each mode corresponds to a different instruction set architecture. An execution environment for running native code modules may be vulnerable to a mode switching attack if a malicious thread jumps into the native code module while also switching the execution mode of the processor. This kind of mode switch can expose the execution environment to further harm by having a processor execute instructions in a second execution mode when the instructions were initially selected and validated for a first execution mode. These instructions might be harmful when executed in the second execution mode and may be disguised as instructions for the first execution mode.

Thus according to one aspect of the subject matter described in this specification a system can mitigate the potential harm resulting from mode switching attacks by selecting machine language instructions for a native code module to make it likely that the machine language instructions if executed by the processor in a second execution mode will not perform unsafe or unauthorized operations.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving an initial machine language instruction for execution by a processor in a first execution mode determining that a portion of the initial machine language instruction when executed by the processor in a second execution mode satisfies one or more risk criteria generating one or more alternative machine language instructions to replace the initial machine language instruction for execution by the processor in the first execution mode wherein the one or more alternative machine language instructions when executed by the processor in the second execution mode mitigate the one or more risk criteria and providing the one or more alternative machine language instructions. Other embodiments of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other embodiments can each optionally include one or more of the following features alone or in combination. The actions include receiving an intermediate language instruction wherein generating the one or more alternative machine language instructions comprises selecting the one or more alternative machine language instructions to correspond to the intermediate language instruction. Determining that the portion of the initial machine language instruction satisfies the one or more risk criteria comprises determining that the portion of the machine language instruction when executed by the processor in the second execution mode comprises a branch instruction. The initial machine language instruction in the first execution mode is a NOP instruction and wherein generating the one or more alternative instructions comprises altering the NOP instruction in the first execution mode. The initial machine language instruction in the first execution mode is a NOP instruction and wherein generating the one or more alternative machine language instructions comprises generating a sequence of instructions that are equivalent to a NOP instruction in first execution mode. The sequence of instructions comprises one or more AND instructions. Generating the one or more alternative machine language instructions comprises selecting an instruction that halts execution in the second execution mode. Selecting an instruction that halts execution in the second execution mode comprises selecting a breakpoint instruction in the second execution mode. Selecting an instruction that halts execution in the second execution mode comprises selecting an instruction that writes to an address in non writeable memory or an instruction that reads from an address in non readable memory. Generating the one or more alternative machine language instructions comprises altering a destination address of a branch instruction in second execution mode. Altering the destination address of a branching instruction in the second execution mode comprises masking the least significant bits of the destination address.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Carefully selecting machine language instructions can mitigate the potential harm resulting from mode switching attacks and can make native code execution environments safer and less prone to malicious code.

The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

Computing system is an electronic device that provides one or more services or functions to a user. For example computing system may operate as a mobile phone personal computer PC global positioning system GPS receiver portable media player personal digital assistant PDA and or graphing calculator. In addition computing system may include an operating system that coordinates the use of hardware and software resources on computing system as well as one or more applications e.g. a web browser or a web application that perform specialized tasks for the user. For example computing system may include applications such as an email client address book document editor web browser and or media player. To perform tasks for the user applications may obtain the use of hardware resources e.g. ARM 32 bit processor memory I O components network interface card graphics processing unit GPU and so on on computing system from the operating system as well as interact with the user through a hardware and or software framework provided by the operating system as described below.

In some cases computing system includes functionality to obtain and or execute applications using a network connection. In particular computing system may obtain web application from one or more servers e.g. server 1 or server x using a network connection with the server s and load web application in web browser . For example web application may be downloaded from an application server over the Internet by web browser .

Once loaded web application may provide features and user interactivity comparable to that of native applications on computing system . For example web application may function as an email client document editor media player computer aided design CAD system and or computer game. Web application may also include dynamic user interface elements such as menus buttons windows sub windows icons animations and or other graphical objects that emulate analogous user interface elements in native applications. In other words web application may correspond to a rich Internet application RIA .

Furthermore web application may execute on computing system regardless of the operating system drivers or hardware associated with computing system . Though platform independent applications such as web application may be more portable and secure than native applications such cross platform applications may lack certain performance capabilities of native applications.

More specifically non native applications such as web application may be written using scripting languages that are interpreted rather than compiled such as JavaScript JavaScript is a registered trademark of Oracle Corporation . The interpreted nature of web application and or other non native applications may result in significantly slower execution times for the non native applications than those of compiled native applications. Non native applications may also be unable to utilize low level libraries and or application programming interfaces API that are available for use by native applications. Consequently non native applications may provide limited functionality in certain tasks.

To enable native performance for web applications computing system may execute a the native code module within plugin . Like web application the native code module may be obtained from one or more servers e.g. server 1 or server x by web browser . For example web application may provide a hyperlink to the native code module on the Internet. Web browser may then download the native code module from the Uniform Resource Locator URL specified in the hyperlink. Alternatively the native code module may be specified by the user or by an external source such as another web application and or a native application. Furthermore the native code module may be obtained from local storage e.g. a browser cache on computing system instead of from a server.

Alternatively code in an intermediate language e.g. LLVM bitcode can be obtained from one or more servers e.g. server 1 or server x which can then be compiled by a compiler on computing system into native code e.g. the native code module suitable for direct execution on a processor of computing system .

More specifically the native code module is a software module containing native code that runs directly on the ARM 32 bit processor . As a result the native code module may be used to perform tasks that require substantial access to CPU resources on computing system . For example the native code module may be used by web application to provide computationally intensive features associated with physics simulation signal processing artificial intelligence modeling flexible high throughput cryptography and or multimedia editing and analysis.

Plugin includes a variety of mechanisms to protect the system against various kinds of unsafe execution of the native code module . In particular instructions to be included in the native code module are selected by instruction selector . The instruction selector selects which machine language instructions to include in the native code module . The instruction selector can receive instructions from a compiler in an intermediate language and can select a corresponding set of native code machine language instructions to be included in the native code module . The instruction selector can also be implemented as part of a compiler or a binary translator. Alternatively the instruction selector can receive fully compiled machine language instructions and then modify the machine language instructions in certain ways to increase the likelihood of safe execution of the native code module as will be described in further detail below.

The selected instructions are then validated by a validator prior to execution. Native code module validation is described in U.S. patent application Ser. No. 12 117 634 now U.S. Pat. No. 9 058 483 filed 8 May 2008 which is incorporated herein by reference. Before the native code module is validated the native code module is loaded into a secure runtime environment provided by plugin . Optionally some or all of the validation may be performed before the native code module is loaded into secure runtime environment . Native code execution in a secure runtime environment is described in U.S. patent application Ser. No. 12 117 650 now U.S. Pat. No. 8 424 082 filed 8 May 2008 which is incorporated herein by reference. Secure runtime environment may also be provided by a web browser extension to web browser or secure runtime environment may be built into web browser . The secure runtime environment can also be provided as a standalone application program installed on the computing system .

Once the native code module is validated the native code module is executed in secure runtime environment . As described in the above referenced patent applications secure runtime environment may load and launch the native code module from memory provide an execution environment that includes communications threads memory management and debugging support for the native code module moderate access to system resources according to an access policy for the native code module and or support the isolated execution of multiple native code modules on computing system . Consequently secure runtime environment may provide additional mechanisms for ensuring the secure execution of the native code module on computing system . In particular secure runtime environment may restrict access from the native code module to registers memory and or other resources associated with the ARM 32 bit ISA.

Because the native code module includes code that runs directly on hardware the native code module may be platform independent with respect to the operating system web browser and or other software components on computing system . As described in the above referenced patents plugin and or the native code module may also include mechanisms for executing on a variety of instruction set architectures including the use of fat binaries and binary translators.

In some cases the system of includes functionality to safely execute the native code module within an ARM 32 bit instruction set architecture ISA . In other words plugin and web browser may correspond to software modules that execute directly on ARM 32 bit processor using the ARM 32 bit ISA. Moreover the native code module may correspond to a set of ARM 32 bit instructions and data that is loaded into the address space of ARM processor and used to facilitate the execution of web application .

Plugin also includes a variety of mechanisms to mitigate harm from potential mode switching attacks that could compromise the safe execution of code in the native code module . Some modern processors can operate in multiple execution modes with each execution mode corresponding to a distinct instruction set. For example an ARM 32 bit processor can execute code in a first execution mode in which executable instructions are treated as 32 bit instructions of a 32 bit ARM ISA. The same processor can also execute code in a second execution mode in which executable instructions are treated as 16 bit or 32 bit instructions of a 16 bit Thumb ISA or a 32 bit Thumb ISA. Such a second execution mode that operates on smaller instructions can be useful for reducing the memory requirements for a particular code module.

However a potential system vulnerability exists if a processor executes instructions intended for a first execution mode while operating in a second execution mode intended for a different instruction set within the same architecture. This could occur for example by an execution thread exploiting a first system vulnerability a so called stepping stone to jump to an arbitrary code location within validated native code while also switching the execution mode of the processor to an unintended execution mode. For example an ARM processor implements a branch and exchange instruction in which execution jumps to a specified address which may also change the execution mode from a first execution mode for ARM to a second execution mode for Thumb . As another example a stepping stone vulnerability may be used to switch the endianness mode of a processor. In other words switching the endianness e.g. from big endian to little endian of a processor will cause a processor to fetch instruction bits in a different order which will result in the instructions performing a different operation when executed.

A malicious thread may find and exploit a stepping stone vulnerability to jump to an arbitrary location within the native code module with a branch and exchange instruction while also setting a bit that will switch the execution mode of the processor. Because the code in the native code module has been validated only for the intended instruction set of the first execution mode the processor could then begin executing unvalidated Thumb code while in the second execution mode which could further amplify the scope of the attack. For example an attacker could disguise malicious Thumb code as ARM code in the native code module .

The first stepping stone vulnerability may be located within code of another thread or another application on the computing system . For example the vulnerability may be located within code of web browser executing on the computing system . An attacker may for example determine a way to compromise the address of a branch instruction which can transform the branch instruction into a branch and exchange instruction. The altered branch and exchange instruction may then be used to jump to and execute unvalidated Thumb code which had been disguised as validated ARM code located in the native code module .

Such mode switching attacks can be detected by analyzing crash reports that show program crashes when executing in an unexpected execution mode. Similarly crash reports may show that a program halted on an ARM instruction that is not a halting instruction but that is a halt instruction in Thumb.

Additionally the instruction selector can take various active steps to mitigate the possibility that the selected and validated instructions of the native code module will be used to do something harmful as part of a mode switching attack.

To further mitigate the possibility of harm during a mode switching attack the validator can also validate code in the native code module for each of multiple instruction sets. For example the validator could mitigate the risk of a mode switching attack by validating the code for both ARM and Thumb instruction sets. However in some cases doing so may be too restrictive or may be impossible.

For example instruction illustrates an ARM breakpoint instruction MUT which takes an optional immediate value. If the immediate value is zero this instruction would be interpreted in Thumb as a left shift instruction and as a branch instruction . This code sequence is potentially exploitable with a mode switching attack as the branch instruction could be used to jump to an arbitrary code section.

To mitigate the risk of this type of mode switching attack the system can select an alternative ARM breakpoint instruction . The system has altered the initial instruction to change the optional immediate value to 0 BE0 rather than 0. In doing so the alternative instruction when interpreted as two Thumb instructions and results in two instructions that have a mitigated risk of exploitation. By altering the value of the immediate Thumb instruction is now interpreted as a Thumb breakpoint which halts execution of a malicious thread executing in an unintended execution mode.

Thus the system has cheaply mitigated the risk of a mode switching attack by choosing an equivalent ARM breakpoint instruction whose interpretation as two Thumb instructions would be less likely to be harmful.

The system receives an initial machine language instruction . The initial machine language instruction is intended to be executed in a first execution mode of a particular processor. As described above the system can receive the initial machine language instruction from a compiler or from an instruction selector.

The system determines that the initial machine language instruction satisfies one or more risk criteria . The risk criteria can be used to identify potentially unsafe instructions in the event of a mode switching attack. In particular the system can evaluate the initial machine language instruction to determine what operation the instruction performs when executed in a second processor execution mode.

The system can evaluate the initial machine language instruction to determine if it includes branch instructions in the second execution mode. For example as set forth above with reference to the system can identify an ARM breakpoint instruction that includes a Thumb branch instruction when in the Thumb execution mode. As another example the system can identify an unconditional ARM NOP instruction that includes a Thumb branch with link and exchange instruction blx that could potentially be used to jump to an arbitrary code location.

The system can also evaluate the initial machine language instruction to determine if it includes an unsafe load or store instruction. Unsafe load and store instructions are instructions that could potentially read from or write to unauthorized storage locations i.e. ones to which a native code module should not have access.

The system can also evaluate a frequency of the initial machine language instruction. The system can evaluate a number of the most frequently emitted machine language instructions which are more likely to be encountered by a malicious thread jumping into a given portion of native code. For example in some implementations the system can pay particular attention to NOP and breakpoint instructions. Other types of risk criteria can also be used depending on the features of the specific ISA implementation.

The system generates one or more alternative machine language instructions . The system can generate or alter the initial machine language instruction to an alternative machine language instruction that mitigates the risks of a mode switching attack. Ideally the system will replace unsafe branch load or store instructions in the second execution mode with instructions that halt execution in the second execution mode e.g. a Thumb breakpoint instruction. The system can also ensure that the one or more alternative machine language instructions are computationally equivalent to the initial machine language instruction. That is the change to the alternative machine language instruction will be transparent to a user or an application of the executing thread.

The system can include a lookup table that maps potentially problematic instructions for the first execution mode e.g. ARM instructions to alternative instructions in the first execution mode that have more preferable characteristics if they happen to be encountered by the processor in the second execution mode e.g. as Thumb instructions.

The system can for example include data enumerating a set of equivalent instructions for a first machine language instruction and select a subset to be stored in the lookup table. For example enumerating the possibilities for an ARM NOP instruction can result in the following candidate Thumb instructions 

The first two AND instructions will generally be preferable to the last branch instruction because the AND instructions are less likely to allow an attacker to execute or jump to arbitrary code. Therefore the system can select the equivalent ARM instructions that resulted in the first two AND instructions and store them in a lookup table to be used in place of the initial ARM NOP instruction.

As another example for an initial instruction that halts execution e.g. an ARM breakpoint instruction the system can select an alternative instruction that when executed as one or more Thumb instructions in the second execution mode would halt execution. For example the system can select an alternative instruction that results in a Thumb instruction that is a Thumb breakpoint instruction an undefined Thumb instruction which when executed would trap to the operating system for handling an instruction that attempts to write to an address in non writeable memory an instruction that attempts to read from an address in non readable memory an instruction that calls a specially selected function during runtime or a set of instructions that causes the program to enter an infinite loop. Other instructions that halt execution can also be selected.

The system can emit multiple alternative instructions for a single initial instruction a single alternative instruction for multiple initial instructions or multiple alternative instructions for multiple initial instructions. For example instead of selecting a single multiply and add instruction that has a problematic Thumb interpretation the system could instead select a separate multiply instruction followed by a separate add instruction. The system can also alter the processor registers of a particular ARM instruction e.g. selecting R1 instead of R2 to emit an equivalent instruction that may have a safer interpretation if ever executed as a Thumb instruction.

In addition to or instead of choosing different Thumb instructions for the second execution mode the system can also evaluate and alter the destination addresses of Thumb branch instructions. For example the system can determine that an instruction when interpreted as a Thumb branch instruction has an unsafe destination address. The system can accordingly select an alternative instruction so that the Thumb branch instruction jumps to a different address. The different address can be a specific address that the system knows to be safe for example a known Thumb breakpoint instruction. The system can alter the destination address depending on the current address of the initial instruction to restrict possible branch destinations. The system can also mask off the least significant bits of Thumb destination addresses for example to 16 byte word boundaries to further restrict the possible locations to which an unintended Thumb branch instruction could jump.

Selecting such alternative machine language instructions to prevent harm from an unintended execution mode can also be used in other contexts besides generating native code modules and besides mitigating mode switching attacks. For example a compiler or binary translator can use the above techniques when generating machine language instructions generally which may mitigate other kinds of attacks e.g. return oriented programming ROP attacks.

The system provides the one or more alternative machine language instructions . For example an instruction selector or compiler could provide the alternative machine language instructions as a native code module for execution by a processor or for further evaluation and validation by a validator e.g. validator .

Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of central processing unit. Generally a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or of what may be claimed but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

