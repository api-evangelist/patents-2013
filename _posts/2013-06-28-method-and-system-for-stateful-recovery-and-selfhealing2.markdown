---

title: Method and system for stateful recovery and self-healing
abstract: The ability to perform non-destructive editing of files and models requires the generation and persistence of input deltas that capture changes that are made to a base starting point. Reconstitution of saved state may be achieved through the application of deltas. This capability is useful for failover remediation in client/server environments since the client has access to the deltas, such that in the event that a stateful service becomes unresponsive (and therefore, no longer available), the service may be taken offline and a new resource may be assigned as a replacement. In such an event, the service is directed to load the baseline data and any changes may be reapplied, restoring the service state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569480&OS=09569480&RS=09569480
owner: Aspen Technology, Inc.
number: 09569480
owner_city: Bedford
owner_country: US
publication_date: 20130628
---
This application is a continuation in part of U.S. application Ser. No. 13 875 680 filed on May 2 2013. The entire teachings of the above application are incorporated herein by reference.

Computer systems including but not limited to both single user and multiple user client server systems that include hardware and software components have demanding change request requirements and failover requirements. Such computer systems apply to a variety of industries including the process industry which is a demanding industry that goes through rigorous planning designing construction and operating procedures. The process industry has extensive simulation and computing needs. In the process industry plant conditions fluctuate all the time and the plant also has multiple modes of operation e.g. summer mode winter mode normal throughput reduced or increased throughput also different grades of product or a different feedstock require the plant to operate in a different mode. In the process industry many process and plant model and file changes are required to support the demands of the process industry and fluctuating plant conditions. In such a dynamic environment that requires frequent changes to models and files a method and system is needed that addresses failover situations gracefully so that changes are not lost.

The proposed approach applies non destructive editing in software models and files. One advantage of the proposed approach is that non destructive editing means that multiple users may make changes to the same file without having one user s changes overwrite another user s changes. This is accomplished by coding the plant processing software or simulator such as aspenONE Trademark of Assignee to remember the changes that a given user makes to a model and stores those changes in a given user s account of the invention system where the changes do not affect the other users and all users have their own private set or sets of changes. In the preferred embodiment of the proposed approach changes are private and the baseline model itself is preferably not changed. In one embodiment a single user may merge or share his sets of changes to a model. In an alternative embodiment users may merge or share changes to a model instead of employing a private change approach. A given user receives a copy of the other user s changes. In a given scenario loading the original model file and reapplying the changes restores the user s state and lets the user pick up where the user left off. Recovery from a critical failure in a simulator is preferably similar to starting over where opening a saved simulation triggers the process software or simulator to pull the user s modifications from the user s account and applies the user s modifications to the baseline model thereby restoring the state. In addition additional unsaved changes not saved in the user s account held in computer memory working memory generally may be retrieved for the user and these unsaved changes are also included as part of the saved modification set.

Another advantage of the proposed approach includes an advanced concept of autonomous self healing where the system components detect simulator failure conditions and take pro active steps behind the scenes by assigning a new simulator. The system loads the data and reapplies the changes that were in effect when the failure occurred. In one embodiment of the proposed approach this autonomous self healing is performed before a user is aware of a problem with the simulator.

Another advantage of the proposed approach is an improved change management strategy compared to existing change management strategies. Existing change management strategies apply source control such as Clearcase and CVS to change files through multiple users and the file changes result in different versions of a baseline that are stored in a repository. In existing systems the latest baseline version of the file is comparable to a single source of truth. By contrast the proposed approach provides multiple sources of truth where every user has an independent source of truth. In the proposed approach individual user preferences and individual user changes are stored in user preference storage or content storage and each user may have his own source of truth. Rather than just saving a new baseline for each version the proposed approach saves the changes relative to an initial original user baseline which is more convenient to the user.

Another advantage of the proposed approach is that it includes a user centric focus. By contrast in existing source control environments the focus is repository centric. The proposed approach includes a focus on the individual preferences and needs of the system developers. In the proposed approach user deltas and user preferences are saved.

The proposed approach includes a computer implemented method of managing data for a user group of at least one user comprising forming a set of change groups made through a user interface by a given user of the user group wherein a given change group of a set of change groups is associated with the given user of the user group wherein the given user of the user group makes changes to a model starting from a baseline that is retrieved from a storage group. The approach further includes storing the baseline in a shared file storage included in the storage group. The proposed approach further comprises storing upon a save operation a first set of changes from the given change group to a user authenticated content storage included in the storage group. The approach further comprises continuously tracking changes made after the save operation and storing both a remaining set of changes from the given change group including the changes made after the save operation and the first set of changes from the given change group to a local memory included in the storage group.

The computer implemented method may include the model being associated with an application instance and further comprising the following computer implemented step detecting a switchover event through a resource manager that identifies the application instance as an application instance identified for removal through the resource manager communicating with an adapter associated with the application instance. The computer implemented method may include the following computer implemented steps removing the association between the model and the application instance through the resource manager terminating the application instance identified for removal as a result of a command sequence initiated by the resource manager in parallel with the following steps replacing the application instance identified for removal with a new application instance based upon a replacement initiation from the resource manager associating the model with the new application instance through the resource manager and restoring to the new application instance the given change group and the baseline from the storage group through a model restoration procedure initiated by the resource manager and implemented by the adapter.

The computer implemented method may have the model including at least one file a simulation model or an application model. The computer implemented method may include the adapter associated with the application instance intercommunicating with both the application instance and the resource manager and the adapter may terminate restart or repair the application instance. The computer implemented method may include a monitor that monitors both the adapter and the application instance and the monitor detects an additional switchover event and terminates the application instance. The computer implemented method may include the adapter monitoring both the adapter and the application instance and the adapter detects an additional switchover event and terminates the application instance.

The computer implemented method may include the switchover event including a failover event detected by a loss of one or more periodic heartbeat messages sent from the application instance to the resource manager. The computer implemented method may include the switchover event resulting from an interrogation command sent from the resource manager to the application instance that fails to receive an expected acknowledgement. The computer implemented method may include the switchover event including regular maintenance as administered by an administration dashboard.

The computer implemented method may include the model being associated with a new application instance in addition to being associated with the application instance and subsequently after detecting the switchover event the application instance is no longer associated with the model thereby replacing the application instance identified for removal with the new application instance in a seamless manner such that a live user service session is not interrupted or modified wherein a redundant mirrored application instance is applied as the new application instance.

The computer implemented method may include the given change group of the set of change groups being private such that it does not interfere with a set of remaining change groups from the set of change groups. The computer implemented method may include the given change group of the set of change groups being merged with at least one change group of a set of remaining change groups from the set of change groups. The computer implemented method may include the given change group of the set of change groups being shared with at least one change group of a set of remaining change groups from the set of change groups.

The proposed approach may include a computer system of managing data for a user group of at least one user comprising the following computer implemented elements. A user interface that through interaction with a given user of the user group forms a change group of a set of change groups wherein the given user of the user group makes changes to a model starting from a baseline that is retrieved from a storage group wherein the model is associated with an application instance. A shared file storage that stores the baseline included in the storage group a user authenticated content storage that stores upon a save operation a first set of changes from the given change group and is included in the storage group. A local memory that is included in the storage group and continuously tracks changes made after the save operation and stores a remaining set of changes from the given change group including the changes made after the save operation and the first set of changes from the given change group. A resource manager that detects a switchover event and identifies the application instance as an application instance identified for removal through the resource manager communicating with an adapter associated with the application instance and removes the association between the model and the application instance. The resource manager initiates a command sequence that results in termination of the application instance identified for removal in parallel with the steps below a new application instance replaces the application instance identified for removal based upon on a replacement initiation from the resource manager and the resource manager associates the model with the new application instance and initiates a model restoration procedure implemented by the adapter that restores the given change group and the baseline to the new application instance.

The model of the computer system may include at least one file a simulation model or an application model. The computer system may include the adapter associated with the application instance intercommunicates with both the application instance and the resource manager and the adapter may terminate restart or repair the application instance. A monitor may monitor both the adapter and the application instance and the monitor detects an additional switchover event and terminates the application instance and the adapter monitors both the adapter and the application instance and the adapter detects the additional switchover event and terminates the application instance.

The computer system may include the switchover event including a failover event detected by a loss of one or more periodic heartbeat messages sent from the application instance to the resource manager the switchover event results from an interrogation command sent from the resource manager to the application instance that fails to receive an expected acknowledgement or the switchover event includes regular maintenance as administered by an administration dashboard. The computer system may include the model being associated with a new application instance in addition to being associated with the application instance and subsequently after detecting the switchover event the application instance is no longer associated with the model thereby replacing the application instance identified for removal with the new application instance in a seamless manner such that a live user service session is not interrupted or modified wherein a redundant mirrored application instance is applied as the new application instance.

The computer system may include the given change group of the set of change groups is private such that it does not interfere with a set of remaining change groups from the set of change groups or the given change group of the set of change groups may be merged with or shared with at least one change group of a set of remaining change groups from the set of change groups.

The computer program product may include one or more non transitory computer readable storage media having computer executable components for use in managing information for a user group of at least one user said computer executable components comprising the following. A user interface that through interaction with a given user of the user group forms a change group of a set of change groups wherein the given user of the user group makes changes to a model starting from a baseline that is retrieved from a storage group wherein the model is associated with an application instance. A shared file storage that stores the baseline included in the storage group a user authenticated content storage that stores upon a save operation a first set of changes from the given change group and is included in the storage group a local memory that is included in the storage group and continuously tracks changes made after the save operation and stores a remaining set of changes from the given change group including the changes made after the save operation and the first set of changes from the given change group. A resource manager that detects a switchover event and identifies the application instance as an application instance identified for removal through the resource manager communicating with an adapter associated with the application instance and removes the association between the model and the application instance. The resource manager initiates a command sequence that results in termination of the application instance identified for removal in parallel with the steps below a new application instance replaces the application instance identified for removal based upon on a replacement initiation from the resource manager and the resource manager associates the model with the new application instance and initiates a model restoration procedure implemented by the adapter that restores the given change group and the baseline to the new application instance.

One of the strengths of Service Oriented Architectures is the ability to share application resources across many clients that flexibility comes in part from stateless service behavior. However sometimes stateful service patterns are employed as part of a migration of single user stateful software to a distributed paradigm or for other reasons. Non destructive editing normally involves a baseline from which a user works and the system maintains a list of changes to that baseline where a list of changes is preferably referred to as a delta. One disadvantage of existing methods is that loss of state is always possible as services may exhibit failure behavior including the following stalling slowing to a crawl or simply failing outright. The proposed approach detects at least this failure behavior and adopts proactive steps by its intelligent self healing systems. As the delta evolves changes to the delta are written to persistent store.

Some example situations where restoration is performed include but are not limited to the following. For example restoration is performed if the application instance becomes defunct and needs to be replaced by a replacement application instance . In another example the application instance is brought down and restored later with due to regular system maintenance. In yet another example a user is working on a desktop at work and then also wants to work later in the evening at home through a smart phone so the user performs the save operation prior to or by closing out of the desktop application and the user subsequently performs the restore operation by re opening the application through the smart phone later in the evening.

As described earlier in the Summary another advantage of the proposed approach is how it improves over the existing source control mechanisms. is a representation of prior art source control systems. Normally with source control systems developers work locally to directly destructively modify a copy of the baseline code that comes from a Source Control Repository . The result is a set of one or more files that differ from what is stored in the repository. In this scenario the repository constitutes the single source of truth for the code base. The changes that a developer makes are not persisted anywhere beyond the modifications to the files that exist locally if the file gets deleted it is considered acceptable as it is not perceived as having any significant value. This is a destructive edit scenario where a system maintains a record of which destructive edits were made so that the states of the edited document may be reconstituted at any time. In such a system any changes that are not stored in source control are deemed irrelevant.

In the prior art system of a key discriminator is that only one version of truth is allowed to exist at one time and each version of that file requires an explicit checkin. At the time of checkin the current version of the file is replaced by the new version of the file. Whether internally it stores complete copies of the file or some subset of deltas is irrelevant since they represent a history only and none of those potential versions are allowed to exist at the same time along with the original baseline.

The storage locations for each of the three model data types discussed above are shown in . The baseline model data is stored in a Shared Store the change data on each save operation is stored in content storage and locally in memory preferably on the web server but not limited to that location associated with the simulation web application which is associated with the client and the change data made since each save operation is stored locally in memory associated with the simulation web application which is associated with the client .

Heartbeat messages include regular messages that are emitted from a source to a system to enable the system to identify if the source is no longer available. One example application of heartbeat messages is in Enterprise Systems. The resource manager of monitors heartbeat messages sent from each of the application instances where includes at least and through an associated adapter where includes at least and through an Enterprise Service Bus ESB . These heartbeat messages are preferably sent every minute although they may be sent more or less frequently such as every five minutes or faster than one minute. Typically heartbeat messages are sent every minute or faster.

In the event that one or more heartbeat messages is lost or in the event of routine maintenance initiated by an administrator the resource manager detects the failure and takes proactive steps by initiating a corresponding service recovery event and takes the application service for example offline proactively and allocates another replacement for example from a pool of available services . The client adapter is notified that it needs to send the cached set of data deltas to be applied to the baseline service after it has loaded the proper data and is ready to accept changes to its state. Applying the deltas and baseline effectively reconstitutes the state of the failed service. Referring to the client adapter is requested to resend the changes in batch form the user is aware that a failure and subsequent recovery has occurred. This capability of the proposed approach also allows a user to log into a system reconstitute a stateful service and resume work that was previously stored in a non destructive manner.

A subject application for example aspenONE Trademark of Assignee makes use of existing Aspen Plus Trademark of Assignee and HYSYS Trademark of Assignee application instances by running them as Stateful Services an instance of the application loads which in turn loads a specified model. In addition other application instances may be used as stateful services such as but not limited to PIMS Trademark of Assignee other application instances simulation instances data storage instances data processing instances data analysis instances or other instance types. Applying user specific deltas and the baseline to the application instance effectively reconstitutes the state. Since these existing software products are not originally written to function as stateful services an advantage of the proposed approach is that it makes up for this deficiency and accounts for failure events. Through the proposed approach the subject application like aspenONE Trademark of Assignee detects and ameliorates the impact of failure events in support of the user.

Some additional implementation details that support the proposed approach as shown in a preferred implementation in are as follows. One of ordinary skill of the art understands that alternative methods for implementing the proposed approach may also be used. After discussion of these implementation details a summary discussion is provided in reference to .

As shown in the preferred Content Storage implementation is Microsoft Sharepoint however embodiments of the proposed approach may also use other user preference storage content storage implementations in place of Microsoft Sharepoint. The user preference storage is preferably used to store user profile information authentication information and membership information and models files or other data however one skilled in the art realizes that other types of storage may be used to store this information. User preference storage is communicated to the user through a Web Service Data to a computer display for the user where the Web Service may optionally be included in a Web Server . However in an alternative embodiment the Web Service Data may be replaced by the Client Adapter which communicates with the ESB

The computer displays where at least also includes and shown in include but are not limited to a computer monitor personal computer laptop desktop phone smart phone mobile phone projection device or other computer digital processing or computing device. The user is provided with Web Applications that include User Interfaces UI that allow the user to modify a model or file and include at least Workspaces Plant Data Search Simulation and Administration where the UIs may optionally be included in a Web Server . The UI is implemented in Hypertext Markup Language HTML but alternative implementations may be used. Workspaces have a unified user interface that allows the user to store search results store file changes model changes store snapshots of data store merged views of files and models modify files and models and include files and models such as but not limited to simulation models and application models.

A Search UI allows the user to search through a Search Service for models and files. The Search Service software extracts metadata from files and models and indexes that data into the search.

Optionally sensors perform plant data measurements from plant assets and report the plant data measurements through plant data servers through for non limiting example an Aspen InfoPlus.21 IP.21 of Assignee data service . The plant data indicated as Live Data in includes live real time data historical data and other types of plant data. This plant data is provided to the Client Adapter Web Sockets where the Client Adapter may optionally be included in a Web Server . As illustrated in plant data from the IP.21 Data Service and simulation data from the Enterprise Service Bus ESB are simultaneously input to the Client Adapter .

The simulation model application model or one or more files that has both a baseline and deltas are received by the Client Adapter . The application model may include but is not limited to a model file or one or more files as consumed by HYSYS Trademark of Assignee Aspen Plus Trademark of Assignee PIMS Trademark of Assignee or other application types. The simulation model may include but is not limited to a combination of a baseline and a user s delta values along with session meta information about zoom and pan levels which stream tables are open and the filter settings and optionally other settings. The Client Adapter on behalf of the user requests an available application instance from the Resource Manager . This request is the result of applying an Application Service to a model that the user is viewing in the Simulation Application . If the Resource Manager grants the request based upon compatibility and availability then access to an application instance in Application Services is provided and a further request is performed through the Enterprise Service Bus ESB Network Element which forwards to the Application Services . . . generally to obtain a application instance. Within one or more instances of Application Services the application instance may include one or more instances of for non limiting example Aspen Plus Aspen HYSYS Hydro Carbon Simulation System Process Information Management System PIMS or other types of applications or simulators. Multiple application instances may have the same UI or separate UIs. In addition a Resource Agent Service starts and stops Adapters where at least includes and . The adapters adapt application specific settings and instructions between software languages. The adapters are also used to provide a connectivity mechanism to the ESB for a given instance of a simulator . When the application instance and the corresponding adapter are activated then data such as models files or other data from the shared store may be transferred through the ESB to the Client Adapter . Once an application instance is established the Client Adapter has exclusive access to the application. Note multiple applications may be used such as HYSYS Trademark by Assignee and Aspen Plus Trademark by Assignee but this fact is transparent to the user. Based on request parameters and or other input from Resource Manager and Client Adapter the system knows which type of application is required and automatically interacts with the correct one. Note if a deployment does not have any HYSYS applications installed the Application Service is preferably not seen in the dynamic service bar. The Aspen Service sends replies and other messages to the Client Adapter that the application publishes for the client to read.

Note that data from the shared store may include any user driven data meant for sharing including but not limited to files or models. Note that both the Application Services and the data from the shared store are not limited to simulation and other types of applications using other types of Application Services data from the shared store may be used such as but not limited to files models application models process control planning scheduling manufacturing accounting manufacturing supply chain MSC products supply chain logistics anything that requires automation in a plant or process anything that performs processing of crude oil or other types. In addition as shown in multiple service platform instances modules may be used and multiple application instances may be used. Aspen Plus and Aspen HYSYS each provide a comprehensive process modeling system and PIMS provides a planning and optimization solution.

Note also that the application instance may also include both the Adapter and the corresponding Application Instance and may optionally include a Monitor as shown in . The monitor is connected to each adapter application instance pair and the monitor monitors both the application instance and the adapter. The monitor may detect failures from either or both the adapter and application instance thereby serving as an additional self healing mechanism. The monitor triggers a switchover event in the case of a failure being detected in either the adapter or the application instance .

Referring back to the application instance has access to the Shared Store of simulation model information so the Client Adapter may retrieve simulation data. The Resource Agent runs locally on an Application Service server supports . The Resource Agent starts and stops Adapters where at least includes and based on configurations and commands which may be changed at least at runtime. At startup the Resource Agent reads its configuration and starts the appropriate number of Adapters which may be implemented as HYSYS Adapters PIMS Adapters Aspen Plus Adapters and or other types of Adapters. The Adapters initialize and register with the Resource Manager . The Resource Agent has a responsibility to kill terminate stop any application service process if tasked by the administrator to keep the machine clear of hanging slowing or otherwise misbehaving service threads or for other reasons. In one embodiment the Application Service Lifecycle is designed to mimic the Desktop Lifecycle although one skilled in the art may realize that other computer lifecycles may be used. As such the Resource Adapter is a proxy for the desktop user and starts and stops the respective application instance to help ensure stability and to guard against side effects.

The following is a further explanation of Resource Management from the Client View generally at . To a system client there is a mechanism for sharing a limited set of resources across a group of people where access is exclusive for the period of time that it is in use. This process works a lot like bowling. In order to bowl a user needs shoes. Shoes are limited resources that require exclusive access while the user is bowling no one else may use shows that he is using. A representative assigns a pair of shoes in exchange for something a user wants back like a driver s license or system tokens in the present invention . When the user finishes the user returns the shoes to a trusted third party and after some housekeeping the shoes a resource become available again and someone else may check them out. The system Web Application the trusted third party is the Resource Manager and the Resource Manager oversees a system that is a bit more complex. Like a taxi cab dispatcher the Resource Manager knows how many cabs are available how many have riders and how many are out of service. Such systems are dynamic and may easily adjust if there are problems.

As shown in the Resource Manager manages a pool of resources that includes three classes of resource pools a Ready Pool a Bound Pool and a Dead Pool . The Ready Pool includes application resources that are available but not yet in use the Bound Pool includes application resources that are in use and the Dead Pool includes application resources that are considered removed or otherwise defunct. Each resource pool class may be also considered as a state. Preferably a resource may transition from a ready state to a bound state from a bound state to a ready state and from either a bound state or ready state to a dead state. However in alternative embodiments other state transitions are allowed.

Referring back to the Resource Adapter is a smart proxy and handles all system interaction on behalf of the respective Application Instance on initialization it registers the Service with the Resource Manager . The Resource Manager preferably does not require apriori knowledge of the Adapter . This high level of decoupling makes the proposed approach very dynamic and scalable.

The Resource Adapter preferably services user requests after it has been assigned to a specific client the assignment process is called binding and includes a binding ID that drives dynamic routing. The binding ID is held by both the client and the Adapter . A bound Resource Adapter begins to receive user requests for processing and spins up an instance of the application which checks out tokens. As with any other System Service the Adapter publishes responses System Events and Notifications via messaging.

The Resource Adapter functions as a proxy for the Service and when not actively servicing requests the Service instance preferably does not exist. When the Application Instance is brought into being by Adapter communication occurs via a Case Execution Service CXS . This pattern allows the Resource Adapter to continue to participate in Automation System Management and Administrative functions. The Adapter is a stand alone system component and like all components it preferably provides regular status reports even if there is no application currently running Once connected to the backbone the Resource Adapter provides Service Access by receiving requests publishing events responses and notifications on behalf of itself and the application instance. Adapter Application Instance communication occurs via CXS which includes but is not limited to an application programming interface API . The Adapter includes control logic and sends commands through the CXS to the Application Instance to load run query or otherwise handle the model.

Now that context of architectural elements and related terminology is described for a summary of a preferred embodiment of the proposed approach is provided in . is used for an illustration of the primary steps of a preferred embodiment system of the proposed approach.

In step of the model simulation model application model or one or more files is setup for a given user. Initially a baseline model is added to the shared store or the baseline model is pre existing in the shared store . The client adapter requests a resource from the resource manager the request is granted an associated application adapter is added to the bound pool a binding ID is assigned from the resource manager and held by the client adapter and the adapter . An associated application instance is established by a command from the adapter . Each application instance is paired with an adapter that controls the application instance and handles communication between the application instance and the client adapter the resource manager and the corresponding resource agent as shown in . The adapter is between the application instance and the client adapter resource manager and the resource agent as shown in . A bi directional traffic communication path from the client adapter to the application instance is established through the ESB connected to an adapter that is coupled with the application instance as shown in . The resource manager allows this bi directional traffic communication path thereby allowing an association between the application instance and the model at the client adapter . In a preferred embodiment bi directional traffic between the client adapter and the application instance passes through the resource manager and the resource manager acts as a gate for the bi directional traffic thereby allowing an association between the model at the client adapter and the application instance . The application instance retrieves the baseline model from the shared store and delivers this model for viewing to a given client adapter through a given user interface .

In step one or more users each on different client adapters each make different changes to the same baseline model through either the same or different user interfaces . One or more users may make changes through a given user interface and a given client adapter multiple user interfaces with a single client adapter or multiple user interfaces with multiple client adapters . One or more users may have access to the same baseline model either through the same application instance or different application instances and for example .

In step changes are saved. In an alternative embodiment the baseline may be modified directly and saved to the shared store with changes. However in a preferred embodiment the baseline is preferably not modified in the shared store . For a given user the first set of changes to the baseline model is saved upon a save operation to a user authenticated user preference storage also known as content storage and locally within the simulation web application on the web server and preferably to hardware memory on the web server . For a given user a second set of changes is saved locally to the simulation web application including any changes made since the last save operation. Multiple changes may be saved for either individual users or multiple users using the same or different user preference storage and the same or different client adapter and the same or different user interfaces . In the preferred embodiment of the invention changes are private and a given user may not overwrite the changes of another given user. In another embodiment a single user or multiple users may merge changes share changes and share copies of changes where changes include single changes multiple changes single sets of changes or multiple sets of changes including both changes saved through one or more save operations and changes since the one or more save operations. At a given user interface a given user may view another set of the given user s changes or view another user s changes both changes and and choose to merge zero or more of these changes. In an alternative embodiment a user may also store changes to a baseline model directly to the shared store although saving changes to shared store is not the preferred approach.

In step the resource manager listens for and detects a loss a periodic heartbeat message from an application instance triggering a switchover event which may include a failover event that identifies the application instance as a suspect or failed application instance for removal. Reasons for a switchover event include but are not limited to failover loss or delay of one or more heartbeat messages proactive failure detection regular routine or non routine maintenance through an administration dashboard either manually through a user or through an automatic process or through a combination of automatic process and manual intervention. A switchover event may also result through other means or other suspicious behavior detected by the resource manager as reported to the resource manager in the form of software messages or hardware control signals across the ESB . A switchover event may also result from an optional interrogation command sent from the resource manager to the application instance and then the resource manager fails to receive a corresponding expected acknowledgement from the application instance .

Additionally in step the resource manager may detect one or more switchover events either simultaneously or at different times. The resource manager uses the associated binding ID s and identifies any potentially suspect or failed application instance s for subsequent repair or removal. In one embodiment a monitor is connected to each adapter application instance pair and the monitor monitors both the application instance and the adapter and the monitor may detect failures from either or both the adapter and application instance thereby serving as an additional self healing mechanism. The monitor triggers a switchover event in the case of a failure being detected. The monitor may be implemented as a transient thread object created by the adapter to watch the adapter and the instance that it created or alternatively the monitor may be created by other means. The monitor may exit after completing its monitoring task. In another embodiment detection is achieved and a corresponding switchover event is achieved through an adapter which determines suspect behavior within itself or within an associated application instance for example if a the associated application instance is unable to start up successfully and the adapter communicates the failure to the resource manager and either takes itself offline or attempts to restart the application instance. In the event that the adapter takes itself offline the resource agent recognizes the adapter going offline and restarts a new adapter because the resource agent ensures that the number of running adapters matches a configuration.

In step for each given failed application instance the system removes the association between the model and the application instance for example . As mentioned earlier the resource manager acts as a gate allowing an association between the model at the client adapter and the application instance . In step the association between the model at the client adapter and the identified failed or suspect application instance for example is removed through the resource manager . Furthermore when a switchover event is detected the resource manager sends commands to the respective corresponding resource agent that it is taking a given adapter application instance pair out of the resource pool. In a preferred embodiment in a following parallel step the resource agent attempts to repair kill or kill and restart the failed application instance.

In step the system selects a replacement application for example with associated adapter to replace the identified failed application instance for example with associated adapter this is one method of self healing. The resource manager preferably uses the same binding ID for the new application instance for example as was used for the failed application instance for example and the client is unaware of the restoration process. In alternative embodiments a different binding ID is used. In a preferred embodiment the original application instance is killed and restarted for future use self healing in step and in parallel in step the resource manager switches the client over to a new adapter application instance pair from the ready pool to avoid delays impacting the user for restarting the application instance

Additionally in step in one embodiment the resource manager initiates a seamless migration sequence whereby the model is restored to a new replacement application for example and an associated adapter for example without any disruption interruption modification or negative effect to the given user s live service session. The seamless migration sequence involves replacement to the client with a new application instance for example and removal of a suspect application instance for example . The seamless migration sequence includes but is not limited to session replication mirroring redundancy or redundant mirroring for application instances including but not limited to a plurality of adapter application pairs. The step process results in a new application instance for example available which replaces the failed application instance for example . In an alternative embodiment an application instance repair or a kill and restart is performed as part of step for example if no additional adapter application instance pairs are available.

In step now that the given replacement application for example is setup the given model is restored into the new given application instance for example and the new given application instance with the given model allows access to the user client . The client which is disassociated with the original failed application instance for example due to step is now associated with the new replacement application instance for example as allowed by the resource manager which acts as a gate as described above . Furthermore for a given user the model or file is restored by retrieving the baseline from a shared store retrieving the changes or set of changes due to the save operation s from the user preference storage or storage for the web server simulation web application and retrieving the changes or set of changes since the save operation s that are stored on the client and locally in the web simulation application on the web server . If the client has shut down and restarted for example in a scenario where a user logs off at one physical location and logs on at another physical location at a later time then the changes are restored from the user preference storage the baseline is restored from the shared store and the baseline and changes are restored both to the new application instance for example and to the client . If the local client is still running then the changes are restored from the simulation web application and the baseline is restored from the shared store and the baseline and changes are restored to the new application instance for example and the baseline is restored to the client . The restoration occurs through a restoration procedure initiated by the resource manager .

Next in step the resource agent chooses to repair kill terminate preferably restart or kill terminate and restart the failed application instance while the resource manager selects a new application instance. When the resource agent decides then it notifies the adapter to perform the repair termination preferable restart or kill terminate and restart. If the adapter is unavailable or unresponsive the resource agent may notify the monitor to terminate the application instance . In step when the adapter application instance pair is successfully repaired or restarted then it re enters the resource manager s ready pool and this repair and restart is done in parallel with asynchronously from the resource manager obtaining the new application instance for example in step . In a preferred embodiment repair is not attempted and replacement is performed. In an alternative embodiment the original application instance for example is killed and restarted so the new application instance is associated with the same adapter as the original application instance and has the same adapter application instance pair as the original application instance.

Client computer s devices and server computer s provide processing storage and input output devices executing application programs and the like. Client computer s devices may also be linked through communications network to other computing devices including other client devices processes and server computer s . Communications network may be part of a remote access network a global or local network e.g. the Internet a worldwide collection of computers Local area or Wide area networks and gateways that currently use respective protocols TCP IP Bluetooth etc. to communicate with one another. Other electronic device computer network architectures are suitable.

In one embodiment the processor routines and data are a computer program product generally referenced including a computer readable medium e.g. a removable storage medium such as one or more DVD ROM s CD ROM s diskettes tapes etc. that provides at least a portion of the software instructions for the invention system. Computer program product may be installed by any suitable software installation procedure as is well known in the art. In another embodiment at least a portion of the software instructions may also be downloaded over a cable communication and or wireless connection. In other embodiments the invention programs are a computer program propagated signal product embodied on a propagated signal on a propagation medium e.g. a radio wave an infrared wave a laser wave a sound wave or an electrical wave propagated over a global network such as the Internet or other network s . Such carrier medium or signals provide at least a portion of the software instructions for the proposed approach routines program .

In alternate embodiments the propagated signal is an analog carrier wave or digital signal carried on the propagated medium. For example the propagated signal may be a digitized signal propagated over a global network e.g. the Internet a telecommunications network or other network. In one embodiment the propagated signal is a signal that is transmitted over the propagation medium over a period of time such as the instructions for a software application sent in packets over a network over a period of milliseconds seconds minutes or longer. In another embodiment the computer readable medium of computer program product is a propagation medium that the computer system may receive and read such as by receiving the propagation medium and identifying a propagated signal embodied in the propagation medium as described above for computer program propagated signal product.

Generally speaking the term carrier medium or transient carrier encompasses the foregoing transient signals propagated signals propagated medium storage medium and the like.

While this invention has been particularly shown and described with references to example embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.

