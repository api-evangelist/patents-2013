---

title: Data purge distribution and coherency
abstract: Systems, methods, and software for operating a content delivery system are provided herein. In one example, a method includes, in a first content delivery node, receiving a purge instruction to purge first content stored in the first content delivery node and responsively purging the first content. Responsive to purging the first content, the method includes transferring a content request for delivery to a second content delivery node, where the content request comprises a request for second content to replace the first content and a revision indicator of the first content. Responsive to the content request, the method includes receiving the second content for storage in the first content delivery node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635095&OS=09635095&RS=09635095
owner: Fastly Inc.
number: 09635095
owner_city: San Francisco
owner_country: US
publication_date: 20130909
---
This application claims the benefit of U.S. Provisional Application Ser. No. 61 700 275 filed on Sep. 12 2012 and entitled DATA PURGE DISTRIBUTION AND COHERENCY which is hereby incorporated by reference in its entirety.

Aspects of the disclosure are related to the field of data storage systems and in particular handling of purge or change instructions for content in content delivery nodes of a content delivery system.

Network provided content such as Internet web pages or media content such as video pictures music and the like are typically served to end users via networked computer systems. End user requests for the network content are processed and the content is responsively provided over various network links. These networked computer systems can include origin hosting servers which originally host network content of content creators or originators such as web servers for hosting a news website. However these computer systems of individual content creators can become overloaded and slow due to frequent requests of content by end users.

Content delivery systems have been developed which add a layer of caching between the origin servers of the content providers and the end users. The content delivery systems typically have one or more content delivery nodes distributed across a large geographic region to provide faster and lower latency access to the content for the end users. When end users request content such as a web page which is handled through a content delivery node the content delivery node is configured to respond to the end user requests instead of the origin servers. In this manner a content delivery node can act as a proxy for the origin servers.

Content of the origin servers can be cached into the content delivery nodes and can be requested via the content delivery nodes from the origin servers of the content originators when the content has not yet been cached. Content delivery nodes usually cache only a portion of the original source content rather than caching all content or data associated with an original content source. The content delivery nodes can thus maintain only recently accessed and most popular content as cached from the original content sources. Thus content delivery nodes exchange data with the original content sources when new or un cached information is requested by the end users or if something has changed in the original content source data.

However maintaining synchronized content across many content delivery nodes can be difficult. For example adding new content or purging old content can become out of sync due to network latencies network failures node failures or other events. Thus end user devices can not receive proper or current content responsive to content requests when content delivery nodes contain content which is not properly synchronized or coherent.

Systems methods and software for operating a content delivery system are provided herein. In one example a method includes in a first content delivery node receiving a purge instruction to purge first content stored in the first content delivery node and responsively purging the first content. Responsive to purging the first content the method includes transferring a content request for delivery to a second content delivery node where the content request comprises a request for second content to replace the first content and a revision indicator of the first content. Responsive to the content request the method includes receiving the second content for storage in the first content delivery node.

In another example one or more non transitory computer readable media having stored thereon program instructions executable by one or more content delivery nodes is provided. When executed by the one or more content delivery nodes the program instructions direct the one or more content delivery nodes to in a first content delivery node receive a purge instruction to purge first content stored in the first content delivery node and responsively purge the first content. Responsive to purging the first content the program instructions direct the one or more content delivery nodes to in the first content delivery node transfer a content request for delivery to a second content delivery node where the content request comprises a request for second content to replace the first content and a revision indicator of the first content. Responsive to the content request the program instructions direct the one or more content delivery nodes to in the first content delivery node receive the second content for storage in the first content delivery node.

In another example a content delivery system is provided. The content delivery system includes a first content delivery node configured to receive a purge instruction to purge first content stored in the first content delivery node and responsively purge the first content. Responsive to purging the first content the first content delivery node is configured to transfer a content request for delivery to a second content delivery node where the content request comprises a request for second content to replace the first content and a revision indicator of the first content. Responsive to the content request the first content delivery node is configured to receive the second content for storage in the first content delivery node.

Network content such as web page content typically includes content such as text hypertext markup language HTML pages pictures video audio code scripts or other content viewable by an end user in a browser or other application. This various network content can be stored and served by origin servers and equipment. The network content includes example website content referenced in such as www.gamma.gov www.alpha.com and www.beta.net among others. In some examples origin servers can serve the content to end user devices. However when a content delivery system is employed the content delivery system can act as a proxy to cache content delivery between origin servers and the end user devices.

Content delivery systems can add a layer of caching between origin servers of the content providers and the end users. The content delivery systems typically have one or more content delivery nodes distributed across a large geographic region to provide faster and lower latency local access to the content for the end users. When end users request content such as a web page a locally proximate content delivery node will respond to the content request instead of the associated origin server. Various techniques can be employed to ensure the content delivery node responds to content requests instead of the origin servers such as associating web content of the origin servers with network addresses of the content delivery nodes instead of network addresses of the origin servers using domain name system DNS registration and lookup procedures.

Content management systems end users or other entities or systems can desire to delete purge or change content stored in content delivery nodes. These changes and purges are desired to be propagated quickly and coherently throughout a content delivery system which includes many content delivery nodes. Since each content delivery node can include a separate copy of the content these purges or other changes can not be properly propagated under certain conditions and content delivery nodes can inadvertently include mismatched revisions of the content. In the examples discussed herein various system methods and software illustrate examples of proper coherency and propagation of the various content changes and purges in a content delivery system.

As a first example employing a content delivery system is presented. is a system diagram illustrating communication system . Communication system includes content delivery system end user devices origin servers and management system . Content delivery system includes one or more content delivery nodes CDN . Each of CDN can include one or more data storage systems such as that illustrated for CDN as data storage system . End user devices are representative of a plurality of end user devices which can request and receive network content and any number of end user devices can be associated with each of content delivery nodes . CDN and ones of end users communicate over associated network links . Content delivery system and origin servers communicate over associated network links . Content delivery system and management system communicate over link . Although not shown in for clarity each of CDN can also communicate with each other over network links.

To further illustrate a brief description of the operation of communication system is included. In operation end user devices request network content such as content associated with origin servers . Instead of these requests being handled by the individual origin servers individual content delivery nodes of content delivery system receive the content requests over ones of links and processes the content requests for delivery of the content to the associated end user devices . Requested network content that is already stored in ones of CDN can be provided quickly to the end user devices while network content that is not already stored in ones of CDN can be responsively requested by an associated one of CDN from an appropriate origin server for delivery by the CDN and possible caching by the CDN. In this manner each of CDN can act as intermediary proxy nodes to provide local and fast access for end user devices to network content of origin servers without burdening origin servers . shows cached content included in data storage system of CDN as comprised of content and thus content is currently shown as cached by CDN . Other configurations are possible including subsets of content being cached in individual ones of CDN .

Although shows content of origin servers being cached by data storage system other content can be handled by CDN . For example dynamic content generated by activities of end user devices need not originally reside on origin servers and can be generated due to scripting or code included in web page content delivered by CDN . This dynamic content can also be cached by ones of CDN and can be specific to a particular end user device during a communication session.

Management system handles configuration changes and status information collection and delivery for system operators and for the origin server operators or managers. For example operator device can transfer configuration for delivery to management system where configuration can alter the handling of network content requests by CDN among other operations. Also management system can monitor status information for the operation of CDN such as operational statistics and provide this status information as to operator device .

Furthermore operator device can transfer content for delivery to origin servers to include in content . Operator device or other devices can also transfer content change instructions or content purge instructions to management system to change or purge content stored in CDN . Although one operator device is shown in it should be understood that this is merely representative and communication system can include many operator devices for receiving status information providing configuration information or transferring content to origin servers.

In a first content delivery node receives a purge instruction to purge first content stored in the first content delivery node and responsively purges the first content. In this example the first content delivery node is CDN although any CDN can be employed. The purge instruction can be received from any of operator device end user devices management system origin servers or any other device which can issue purge instructions for content. The first content can comprise a web page URL or an entire web site among other data portions including any content associated therewith such as pictures video audio dynamic code static code text or other content.

Responsive to purging the first content content delivery node transfers a content request for delivery to another or second content delivery node where the content request comprises a request for second content to replace the first content and a revision indicator of the first content. The content request can identify the second content via an indicator associated with the first content such as a URL website indicator data address filename or other data identifier. In some examples the revision indicator is a numerical indicator of content revision or version such as a timestamp serially incrementing number or indicator hashed indicator date or other revision indicator.

Responsive to the content request content delivery node receives the second content for storage in the first content delivery node. Second content is to replace first content such as when second content is a later revision and desired to replace first content which is an earlier revision. Content delivery node stores the second data in a data storage system such as data storage system .

In some examples the other content delivery node can include CDN or among other CDNs or can include origin servers . When the other or second content delivery node discussed in is one of CDN then these CDNs can be referred to as shield nodes or watcher nodes. These shield nodes act as a layer of caching or storage between CDN and origin servers .

In further examples the second content delivery node such as CDN receive the content request transferred by CDN . When the revision indicator of the first content indicates an earlier revision than third content stored in the second content delivery node then the second content delivery node transfers the third content as the second content for delivery to CDN . When the revision indicator of the first content indicates a same revision or a later revision as the third content stored in the second content delivery node then the second content delivery node requests fourth data from a data node and transfers fourth data as the second data for delivery to the first content delivery node. The data node can include origin servers or can include another CDN including combinations thereof.

To further describe the operation of individual ones of CDN of is provided which illustrates content delivery node CDN . It should be understood that CDN can each use other configurations and CDN is merely one example. CDN includes communication interface processing system random access memory RAM and storage . Example contents of RAM are further detailed in RAM space and example contents of storage are further detailed in solid state storage system .

In operation processing system is operatively linked to communication interface RAM and storage . Processing system is capable of executing software stored in RAM or storage . When executing the software processing system drives CDN to operate as described herein. CDN can also include other elements such as user interfaces computer systems databases distributed storage and processing elements and the like.

Processing system can be implemented within a single processing device but can also be distributed across multiple processing devices or sub systems that cooperate in executing program instructions. Examples of processing system include general purpose central processing units microprocessors application specific processors and logic devices as well as any other type of processing device.

Communication interface includes one or more network interfaces for communicating over communication networks such as packet networks the Internet and the like. The network interfaces can include one or more local or wide area network communication interfaces which can communicate over Ethernet or Internet protocol IP links. Examples of communication interface include network interface card equipment transceivers modems and other communication circuitry.

RAM and storage together can comprise a data storage system such as that illustrated in data storage system in although variations are possible. RAM and storage can each comprise any storage media readable by processing system and capable of storing software. RAM can include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Storage can include non volatile storage media such as solid state storage media flash memory or as illustrated by solid state storage system in this example. RAM and storage can each be implemented as a single storage device but can also be implemented across multiple storage devices or sub systems. RAM and storage can each comprise additional elements such as controllers capable of communicating with processing system . In some implementations the storage media can be a non transitory storage media. In some implementations at least a portion of the storage media can be transitory. It should be understood that in no case are the storage media propagated signals.

Software stored on or in RAM or storage can comprise computer program instructions firmware or some other form of machine readable processing instructions having processes that when executed by processing system direct CDN to operate as described herein. For example software drives CDN to process an erase operation for a storage space to identify first content to be erased from the storage space identify the first content as being associated with first data contained in a first storage segment process at least the first storage segment to identify at least second data associated with second content contained in the first storage segment and erase the first storage segment by erasing at least the first data and the second data among other operations. The software can also include user software applications. The software can be implemented as a single application or as multiple applications. In general the software can when loaded into processing system and executed transform processing system from a general purpose device into a special purpose device customized as described herein.

RAM space illustrates a detailed view of an example configuration of RAM . It should be understood that different configurations are possible. RAM space includes applications operating system OS and content RAM cache . Content RAM cache includes RAM space for temporary storage of content received over content interface such as dynamic random access memory DRAM .

Applications include content interface configuration interface statistics interface and content caching application . Content caching application handles caching of content and management of storage spaces such as content RAM cache and storage space as well as exchanges content data and instructions via content interface configuration interface and statistics interface . Content caching application can comprise a custom application Varnish caching software hypertext transfer protocol HTTP accelerator software or other content caching and storage applications including variation modifications and improvements thereof. Applications and OS can reside in RAM space during execution and operation of CDN and can reside in system software storage space on solid state storage system during a powered off state among other locations and states. Applications and OS can be loaded into RAM space during a startup or boot procedure as described for computer operating systems and applications.

Content interface configuration interface and statistics interface each allow a user to interact with and exchange data with content caching application . In some examples each of content interface configuration interface and statistics interface comprise an application programming interface API . Content interface allows for exchanging content for caching in CDN by content caching application and can also receive instructions to purge or erase data from CDN . Configuration interface allows for altering the configuration of various operational features of content caching application . In some examples configuration interface comprises a scripting language interface such as Varnish Configuration Language VCL Perl PHP Javascript or other scripting or interpreted language based interfaces. Statistics interface allows for exchange of statistical information related to the operation of CDN such as cache hits misses cache fullness information cache performance statistics timing statistics history metrics among other statistical information. Content interface configuration interface and statistics interface each can communicate with external systems via communication interface over any associated network links.

Solid state storage system illustrates a detailed view of an example configuration of storage and in some examples storage space comprises the storage space as described in or storage space in . Solid state storage system can comprise flash memory such as NAND flash or NOR flash memory among other solid state storage technologies. As shown in solid state storage system includes system software as well as content stored in storage space . As described above system software can be a non volatile storage space for applications and OS during a powered down state of CDN among other operating software. Content includes cached content such as the web content examples in which can include text data pictures video audio web pages scripting code dynamic content or other network content.

It should be understood that content delivery node is generally intended to represent a computing system with which at least software and are deployed and executed in order to render or otherwise implement the operations described herein. However content delivery node can also represent any computing system on which at least software and can be staged and from where software and can be distributed transported downloaded or otherwise provided to yet another computing system for deployment and execution or yet additional distribution.

When many content delivery nodes are employed in a content delivery system ones of the content delivery nodes can be configured to act as watcher nodes to watch or monitor the purging operations of other ones of the content delivery nodes. Watcher nodes can be watched nodes and vice versa in many examples. These watcher nodes can periodically poll the watched nodes to determine which purge instructions have been received. Alternatively the watcher nodes can periodically distribute any purge instructions that have been received within a certain time period or since the last purge instruction distribution time to the watched nodes. When watched nodes receive purge instructions from a watcher node the purge instructions received from a watcher node into a watched node can be compared against already received purge instructions to determine if the purge instruction must be executed or can be ignored as already executed. Each purge instruction can include an identifier such as a purge identifier timestamp hashed number serial number or other identifier used to discriminate among purge instructions.

In further examples a watcher node can periodically poll a watched node to ensure the watched node is still operational and has not halted or crashed operation. If the watched node is responsive to the poll then the watcher node can assume that all purge instructions have been received and executed by the operational watched node. However if the watched node does not respond to the poll by the watcher node then the watcher node can wait until the watched node is operational and transfer any purge instructions to the watched node which were received by the watcher node since the last successful poll of the watched node. This way ensures that a watched node receives all purge instructions and if the watched node cases operation such as during an unintentional power outage or crash then the missed purge instructions can be distributed by the watcher node.

In a content delivery system receives an instruction to purge content from content delivery nodes. The purge instruction can be received from any of operator device end user devices management system origin servers or any other device which can issue purge instructions for content. The purge instruction can be received by any content delivery node such as by CDN or CDN .

After the purge instruction is received a content delivery node such as a watcher node can determine if a particular watched content delivery node received the purge instruction. This can be accomplished by polling the watched node for recently received messages requesting recently received purge requests from the watched node requesting recent content or any other method of determining is the watched node had received the purge request such as discussed above. This operation can also be accomplished if the watched node was inoperative or otherwise not responsive.

If it is determined that the watched node has indeed received the request then operation is returned to await another purge instruction. If it is determined that the watched node had not received the purge instruction the watcher node determines an update message to be sent to the watched node. This update message to be sent can be determined from the information received when determining if the watched node had received the request. This can include resending purge instructions received at the watcher node that can or can not have been received by the watched node. The update message to be sent can also include newer content than received from the watched node when requested to determine if the watched node had received the message among many other data to be included in the message to be sent. The update message can include content retrieved from the watcher node responsive to a purge instruction or purge message such as content to replace the data purged responsive to the purge instruction. Once the update message to be sent is determined the update message is transferred from the watcher node to the watched node.

In another example there can be more than one watcher node. The watcher node s can poll the more than one watcher nodes to determine if the watcher nodes had received the most recent purge instructions s . This determination can include checking a time stamp or other identifier of the purge instructions for the more than one watched nodes taking the most common requests from the watched nodes or any other method of determining if the watched node has received the correct requests.

The watched nodes can be configured to request content data purge requests and the like from the watcher or shield nodes before requesting the content and the like from an associated origin server such as origin servers . These various methods can increase data integrity and availability of the content delivery system.

Each watcher or shield node can keep a list or record of watched nodes. If any of the watched nodes are unresponsive the watcher node can keep the most recent purge instructions and periodically determine if the watched node s are back on line. Once the watched node is responsive and running the most recent purge requests are sent to the watched node.

In an example operation a watcher content delivery node A receives a purge instruction then transfers it to watched content delivery nodes B C and D. Content delivery node D is unresponsive during the transfer and thus misses the purge instruction but node D comes back online later. After coming back online node D receives an update message from node A comprising the missed purge instruction.

When a purge instruction is received which indicates a content key then any content associated with the content key can be purged such as by erasure or deletion from a particular content delivery node. The content key can include any mark tag indicator and the like. In some examples the content key is included in a HTML code header or HTML tag such as which can indicate content associated with a front page of a particular website. Other purging identifiers can be employed other than the keyed identification. For example content can be identified by URL filename or all content associated with a particular website can be purged. However the keyed purging allows selective purging of content elements that are previously associated with the content key and thus can purge portions of content or web pages which vary in size and quantity.

Content management device can comprise operator device end user devices management system origin servers or any other device which can issue purge instructions for content. CDN can comprise CDNs or CDN among other content delivery nodes or systems. Webpage is an example and any collection of objects or data associated with content which can be keyed as discussed herein for purging.

Referring back to CDN origin servers and management system can each include communication interfaces network interfaces processing systems computer systems microprocessors storage systems storage media or some other processing devices or software systems and can be distributed among multiple devices. Examples of CDN origin servers and management system can each include software such as an operating system logs databases utilities drivers caching software networking software and other software stored on a computer readable medium. Content delivery system in addition to including CDN can include equipment and links to route communications between CDN and any of end user devices origin servers and management system among other operations.

End user devices can each be a user device subscriber equipment customer equipment access terminal smartphone personal digital assistant PDA computer tablet computing device e book Internet appliance media player game console or some other user communication apparatus including combinations thereof.

Communication links each use metal glass optical air space or some other material as the transport media. Communication links can each use various communication protocols such as Time Division Multiplex TDM asynchronous transfer mode ATM Internet Protocol IP Ethernet synchronous optical networking SONET hybrid fiber coax HFC circuit switched communication signaling wireless communications or some other communication format including combinations improvements or variations thereof. Communication links can each be a direct link or can include intermediate networks systems or devices and can include a logical network link transported over multiple physical links. Although one main link for each of links is shown in it should be understood that links are merely illustrative to show communication modes or access pathways. In other examples further links can be shown with portions of the further links shared and used for different communication sessions or different content types among other configurations. Communication links can each include many different signals sharing the same associated link as represented by the associated lines in comprising resource blocks access channels paging channels notification channels forward links reverse links user communications communication sessions overhead communications carrier frequencies other channels timeslots spreading codes transportation ports logical transportation links network sockets packets or communication directions.

The included descriptions and figures depict specific embodiments to teach those skilled in the art how to make and use the best mode. For the purpose of teaching inventive principles some conventional aspects have been simplified or omitted. Those skilled in the art will appreciate variations from these embodiments that fall within the scope of the invention. Those skilled in the art will also appreciate that the features described above can be combined in various ways to form multiple embodiments. As a result the invention is not limited to the specific embodiments described above but only by the claims and their equivalents.

