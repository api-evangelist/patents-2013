---

title: Providing cloud-based, generic OData mashup services using an on-demand service
abstract: The present disclosure describes methods, systems, and computer program products for providing cloud-based, generic OData mashup services. One computer-implemented method includes parsing a received a request for service-related data to determine a subject mashup service associated with the request, retrieving a subject mashup service definition from a service repository, retrieving subservice definitions associated with the subject mashup service definition, instantiating subservices with a computer using the subservice definitions, and transmitting a request to retrieve the service-related data from the instantiated subservices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09418168&OS=09418168&RS=09418168
owner: SAP SE
number: 09418168
owner_city: Walldorf
owner_country: DE
publication_date: 20131029
---
In mobile device web development a mashup is an application for example a client or a cloud based hosted application that combines and uses source data presentation and or functionality resources from two or more sources to create new services offering enriched resources. The main characteristics of a mashup are combination visualization and aggregation and imply easy fast integration frequently using open application programming interface API s and or data sources to produce the enriched resources even if not necessarily the original reason for producing the source resources. While making existing data more useful mashup implementations are typically non generic that is they are specifically designed for an intended purpose and require particularly implemented interfaces support and maintenance due to their design. Non generic mashups provide little in the way of reuse and increase a total cost of ownership when using mashups.

The present disclosure relates to computer implemented methods computer readable media and computer systems for providing cloud based generic Open Data Protocol OData mashup services. One computer implemented method includes parsing a received a request for service related data to determine a subject mashup service associated with the request retrieving a subject mashup service definition from a service repository retrieving subservice definitions associated with the subject mashup service definition instantiating subservices with a computer using the subservice definitions and transmitting a request to retrieve the service related data from the instantiated subservices.

Other implementations of this aspect include corresponding computer systems apparatuses and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes or causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other implementations can each optionally include one or more of the following features alone or in combination 

A first aspect combinable with the general implementation wherein the subject mashup service is instantiated by a generic entity data model EDM provider.

A second aspect combinable with any of the previous aspects further comprising the generic EDM provider transmitting a request to a mashup service repository for a service definition of the subject mashup service.

A third aspect combinable with any of the previous aspects further comprising formatting a service document responsive to the request for service related data the service document formatted from entity types returned in response to the request to retrieve the service related data from the instantiated subservices.

A fourth aspect combinable with any of the previous aspects further comprising instantiating a mashup processor following the instantiation of the subservices associated with the subject mashup service.

A fifth aspect combinable with any of the previous aspects further comprising transmitting a request to the mashup processor for a read feed using a received entity type returned in response to the request to retrieve the service related data from the instantiated subservices.

A sixth aspect combinable with any of the previous aspects further comprising creating a read feed response responsive to the request for service related data.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages 

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

This disclosure generally describes computer implemented methods computer program products and systems for providing cloud based generic OData mashup services. The following description is presented to enable any person skilled in the art to make and use the invention and is provided in the context of one or more particular implementations. Various modifications to the disclosed implementations will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other implementations and applications without departing from scope of the disclosure. Thus the present disclosure is not intended to be limited to the described and or illustrated implementations but is to be accorded the widest scope consistent with the principles and features disclosed herein.

Open Data Protocol OData is a web protocol for querying and updating data over networks and allows for a user to request data from a data source over the Hypertext Transfer Protocol and receive results back from the data source in formats such as Atom Publishing Protocol Atom JAVASCRIPT Object Notation JSON and Extensible Markup Language XML etc. The OData protocol is increasingly used by mobile computing and other computing platforms such as smartphones and tablet computers as an important method of access to information over networks.

Mobile computing platforms i.e. clients may access cloud based or other hosted applications for example customer on premises business applications services through a gateway server. The gateway server provides a gateway service with a defined application programming interface API or other interface and acts as a gateway type hub between a client and applications. The provided gateway service allows easier provisioning and consumption of business logic and content of application service backend systems as well as other data sources. In other words the gateway server provides user centric application access support for client applications running on various devices and UI technologies e.g. smartphones tablet computers HTML5 clients etc. to access customer applications services.

In some implementations the gateway server can communicate with clients and or applications services using OData through hypertext transfer protocol HTTP or hypertext transfer protocol secure HTTPS requests and receive XML JSON formatted documents. In some implementations the gateway server can use a remote function call RFC interface to communicate with applications services. As will be appreciated by those skilled in the art the use of OData HTTP S RFC XML JSON and the like can be substituted for other protocols computer languages etc. The exemplary use of a protocol computer language etc. in this disclosure is not meant to be limiting in any way. Other appropriately formatted requests in any protocol and or computer language are also considered to be within this scope of this disclosure.

In some implementations a gateway server and or associated components can be stand alone and or incorporated into any component of a distributed computing system. In some implementations the gateway server and or associated components may be one or more hardware servers software servers and or virtual servers. In some implementations the gateway server and or associated components can be part of a web server a streaming server an RSS server or other suitable server.

The following disclosure describes a sub system of an implementation of a mashup enabled gateway service MGS running in a cloud based computing environment and providing generic mashup services although the sub system can in some implementations run in a non cloud based computing environment. This sub system provides functionality to expose enterprise ready mashup services where the MGS can be connected to on premise customer systems and external cloud services. The mashup services are defined by configuration and providing reusable sub service providers based on an open mashup application programming interface API . Customers and external cloud service providers have complete control and auditability of what is technically exposed to the on demand world.

Connections of an application can be configured using connectivity destinations specific to a customer s environment allowing to definition of connections to either on premise systems in the customer system landscape or to public cloud services e.g. GOOGLE geo locations FACEBOOK DROPBOX etc. by using mechanisms of a cloud based computing platform. In this case a symbolic alias is maintained for a particular connectivity or several connectivity used by the services of a customer. In addition to the symbolic names authorization mechanisms for utilizing a particular connectivity can also be maintained e.g. using Basic Authentication Single Sign On etc. . The services use the symbolic names defined during connectivity configuration as a destination tag in the service definition e.g. stored in referred to by a service repository . The destination correlates to connectivity destination. Connectivity to external web cloud based services can also be configured.

The mashup infrastructure of the MGS allows mashing up of multiple services. Therefore services and model implementations for services e.g. an OData service in an on premise system implementing a data model can be reused for other use cases. Two or more services can be composed by configuration to form a completely new service without having to change the existing services. During runtime the mashup infrastructure delegates sub service requests to corresponding sub service providers and aggregates results to return to a requestor. Model composition is also provided for complex scenarios. During model compositions several previously defined services and the corresponding data models can be combined to a more complex model service by using the existing services in the context of a new service without the need to add additional coding configuration only .

The mashup provider supplies core functionality for providing cloud based generic OData mashup services and is made up of several components each of which allow the definition of mashup services in a dedicated mashup service repository for example the MGS service repository . The mashup provider includes a runtime mashup processor and a metadata EDM provider providing data and data structure respectively responsive to a received mashup service request.

A mashup service is identified by the MGS core runtime in a manner identical to identification of general gateway services. A mashup service is identified by two request path segments namespace and service name and a matrix parameter which specifies a version. This is the same as for general gateway services. This information e.g. namespace service name and version are the lookup key for the corresponding service entry in the service repository . The MGS core runtime looks up the corresponding service repository entry based on the parsed lookup key e.g. namespace service name and version . For a mashup service a generic mashup service provider is registered in the service repository entry. The generic service repository provider is called by the MGS instance with the lookup key information. The generic mashup service provider uses the lookup key to do a lookup in the mashup service repository providing mashup services. Note that the illustrated XML file is an example for a persistence type of a repository. Any appropriate repository for example a database data structure etc. in any format is considered to be within the scope of this disclosure. As a result of this lookup the generic mashup service provider can identify the correct mashup subservice factory e.g. entity in needed for the instantiation and initialization of the actual mashup service provider EDM Provider entity in and processor entity in . This mashup service provider entity in for a particular mashup service e.g. FLIGHTMASHUP is responsible for the actual request processing such as retrieval of service metadata and runtime data. The mashup service provider label delegates requests to the correct sub service providers e.g. entity in for generating the overall metadata and service document as well as for the runtime data of a particular feed collection exposed by this sub service. Note that the mashup service interacts with several subservices depending on the configuration of the currently instantiated mashup service declared in the mashup service repository . There is a difference between the generic mashup service provider and the actual mashup service provider which is implemented for a particular mashup service. The generic mashup service provider hides all mashup details from the MGS instance . Until the control is handed over to the generic mashup service provider the processing is handled from the framework s perspective in a manner similar to a non MGS.

The FLIGHT MASHUP service also includes a version and latest version definition. The version definition provides the version of the particular FLIGHT MASHUP service while the latest version informs that a later version of the FLIGHT MASHUP service is available version 0002 that may provide different functionality. In some implementations requests to the FLIGHT MASHUP service without specifying a version will result in use of the later version e.g. 0002 . This default behavior can be overridden by specifying a version parameter in any request URL that is received.

The FLIGHT MASHUP service also includes a specification for a model provider MashupEdmProvider and a data provider MashupProcessor that form part of a mashup service provider instance. The model provider provides a metadata document for example in XML describing the structure of data returned by the FLIGHT MASHUP service and associated subservices. The metadata document is a combination of metadata documents returned by all subservices refer to associated with the FLIGHT MASHUP service. The model provider looks up all the associated subservices to the FLIGHT MASHUP service and combines all the metadata documents into a FLIGHT MASHUP service metadata document. The data provider is responsible for delivering data corresponding to the structure specified by the model provider . The data provider maps the data based on the metadata model description. In this way a user can parse received data from the data provider using the data structure provided by the model provider . In some implementations the metadata model description returned by the model provider can be requested and processed for every data request. In other implementations the metadata model description can be requested and unless the underlying data structure changes the metadata document structure can be reused to parse the data returned by the data provider . For example the metadata document can be requested and used and the version latest version definitions can be monitored for changes. If a change is noticed in versions either a specific version can be requested or a new metadata document can be requested for comparison and adjustment of data parsing methods.

Returning to the mashup service definition is stored in the MGS service repository and is accessible through the MGS core runtime . In some implementations an additional service repository is used to store subservice definitions for a mashup service. Once a request for a mashup service is identified by the service factory service repository provider the MGS core runtime or associated component accesses the mashup service repository to get additional information e.g. subservices etc. associated with the requested mashup service.

Identified FLIGHT MASHUP subservices are illustrated as . For example the FLIGHT subservice has a particular subservice namespace similar to the flight mashup service definition and version latest version . The subservice definition also has a service factory specification. Additionally the model id is a unique identifier of the model of a OData service implemented in an on premise gateway infrastructure. In general this is a unique identifier for an existing service that can be reused in a mashup service. The combination of destination e.g. system as described above and model id uniquely identifies one service. The service factory specification details which service factory is to be instantiated for the FLIGHT subservice. The defined service factory specification instantiates its own EDM provider and processor data provider by retrieving a definition of the BEPSubServiceFactory from the cloud core services as illustrated in . The processor EDM provider are instantiated for each subservice service factory specification . It is important to note that each subservice can be local and or distributed services from common and or different systems. For example subservice could be an on premises service while subservice could be hosted by a third party search engine provider or a social media provider. In some implementations the mashup provider requests information from subservices running in a distributed system landscape. Note that all subservices are also defined in the MGS core service repository and can be accessed individually outside of a mashup service.

Returning to in some implementations the mashup service subservice definition is stored in the MGS service repository and is accessible through a mashup service repository provider as part of a mashup service repository . In other implementations as illustrated in the mashup service repository provider can request the mashup service subservice definition from a separate storage location here an XML file .

In some implementations at runtime a subservice factory instantiates a mashup subservice by instantiating a processor and EDM provider based on information in the MGS service repository . In some implementations an OData service is based on a processor e.g. handling incoming requests and a EDM provider e.g. providing the data model of a service s . In some cases e.g. custom services which differ from standard gateway type OData services the initialization of the processor and EDM provider need an additional input parameter or initialization steps. These initialization steps can be hidden in the subservice factories e.g. and specified in for every custom service a subservice factory has to be provided for standard generic gateway type services there is also a generic subservice factory . The corresponding subservice factories are registered in the MGS service repository and or the mashup service repository . The mashup framework uses these factories for service instantiation in a standard way there is no need for the framework to know anything about instantiation of a custom service because the details are encapsulated in the corresponding subservice factory. The processor and EDM provider delegate requests to the corresponding counterpart of the identified subservices of the requested mashup service and perform combination actions to combine data returned from the subservices e.g. if a service document request or a metadata request is made .

The mashup service repository provider is instantiated during context initialization of a MGS instance at deploy time. Additionally at deploy time a gateway listener not illustrated instantiates the specified implementations of the mashup service repository provider and registers the provider at a mashup services factory not illustrated during context initialization of a MGS instance. In typical implementations the gateway listener is implemented in JAVA as a servlet.

The implementation is specified for example as a context parameter in an XML document as illustrated in . illustrates an example parameter in an XML document used to instantiate a mashup service repository provider according to an implementation. The mashup service repository provider is always initialized during context initialization e.g. an application deployment on a cloud platform. From that point in time the mashup service repository provider is up and running until the cloud based application is terminated . After the context initialization the mashup service repository provider is instantiated and registered with the mashup services factory . An incoming service request is always passed to the gateway listener first.

The gateway listener or request preprocessing handler identifies if the service request is related to a mashup service by utilizing the registered mashup service repository provider which performs the mashup service repository lookup. If the request is related to a mashup service the mashup services factory is called which in turn instantiates the corresponding mashup processor and mashup EDM provider by utilizing the correct mashup service factory defined in the mashup service repository for this particular service. The mashup service factory is part of the framework and instantiates the generic mashup provider which is also part of the framework. The mashup provider uses the registered subservice specific service factories to instantiate the corresponding subservices needed to fulfill the incoming request. During request processing the mashup provider utilizes the mashup services factory to identify the subservices of the requested mashup service.

The following are examples of client requests to the example FLIGHT MASHUP mashup service of and returned data request result in OData format. The provided examples are only illustrating a particular implementation and are not meant to be limiting in any way.

For example a client could request the metadata document from the FLIGHT MASHUP service using the URL 

A client could likewise request data e.g. a flight collection flight feed from the FLIGHT MASHUP service using the URL 

In some implementations users can also provide format strings to request data be returned in particular formats. For example adding format XML or format JSON to a query string will return the appropriately requested format XML or JSON to the requestor if available.

The available feeds which are exposed by the FLIGHT MASHUP service for a particular client here with an identifier of 745 can also be retrieved with a URL similar to 

The computer can serve as a client for example client and or a server for example executing virtual MGS instances in a cloud based computing environment. The computer can also serve as a computer for a database or other persistency e.g. the MGS service repository customer system an external cloud service and or any other component of the EDCS . The illustrated computer is communicably coupled with a network . In some implementations one or more components of the computer may be configured to operate within a cloud computing based environment.

At a high level the computer is an electronic computing device operable to receive transmit process store or manage data and information associated with the EDCS . According to some implementations the computer may also include or be communicably coupled with an application server e mail server web server caching server streaming data server business intelligence BI server and or other server.

The computer can receive requests over network from a client application e.g. executing on another computer and responding to the received requests by processing the said requests in an appropriate software application. In addition requests may also be sent to the computer from internal users e.g. from a command console or by other appropriate access method external or third parties other automated applications as well as any other appropriate entities individuals systems or computers.

Each of the components of the computer can communicate using a system bus . In some implementations any and or all the components of the computer both hardware and or software may interface with each other and or the interface over the system bus using an application programming interface API and or a service layer . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the computer and or the EDCS . The functionality of the computer may be accessible for all service consumers using this service layer. Software services such as those provided by the service layer provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C or other suitable language providing data in extensible markup language XML format or other suitable format. While illustrated as an integrated component of the computer alternative implementations may illustrate the API and or the service layer as stand alone components in relation to other components of the computer and or EDCS . Moreover any or all parts of the API and or the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The computer includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the computer and or EDCS . The interface is used by the computer for communicating with other systems in a distributed environment including within the EDCS connected to the network whether illustrated or not . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated EDCS .

The computer includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the computer and or the EDCS . Generally the processor executes instructions and manipulates data to perform the operations of the computer . Specifically the processor executes the functionality required to provide cloud based generic OData mashup services.

The computer also includes a memory that holds data for the computer and or other components of the EDCS . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the computer and or the EDCS . While memory is illustrated as an integral component of the computer in alternative implementations memory can be external to the computer and or the EDCS .

The application is an algorithmic software engine providing functionality according to particular needs desires or particular implementations of the computer and or the EDCS particularly with respect to functionality required to provide cloud based generic OData mashup services. For example application can serve as the MGS core runtime a mashup service repository provider a mashup provider runtime and or other application associated with the computer and or the EDCS . Further although illustrated as a single application the application may be implemented as multiple applications on the computer . In addition although illustrated as integral to the computer in alternative implementations the application can be external to the computer and or the EDCS .

There may be any number of computers associated with or external to the EDCS and communicating over network . Further the term client user and other appropriate terminology may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover this disclosure contemplates that many users may use one computer or that one user may use multiple computers .

At a request is received by the OData library from a consumer to get a service document. The OData library is utilized by the MGS framework to do OData related processing e.g. in some implementations URL parsing and serialization of the request results to either XML or JSON. From method proceeds to .

At the OData library transmits a request to the service factory to create an OData service to provide a service document associated with the mashup service that is the subject of the service document request. From method proceeds to .

At the service factory transmits a request to the service repository to retrieve the mashup service that is the subject of the service document request. From method proceeds to .

At the service repository transmits a request to the generic mashup EDM provider of the framework to instantiate the corresponding mashup service. From method proceeds to .

At the mashup EDM provider transmits a request to the mashup service repository for a mashup service definition. From method proceeds to .

At the mashup service definition is then returned to the mashup EDM provider. From method proceeds to .

At the mashup EDM provider transmits a request to the subservice factory to retrieve subservice definitions for subservices associated with the mashup service. From method proceeds to .

At the subservice factory runs in a loop to instantiate all subservices associated with the mashup service. From method proceeds to .

At a list of instantiated subservices is transmitted to the mashup EDM provider. From method proceeds to .

At the instantiated instance of the mashup service including subservices is transmitted to the service repository. From method proceeds to .

At the service repository transmits a request to the mashup processor to instantiate. From method proceeds to .

At the instantiated instance of the mashup processor is transmitted to the service repository. From method proceeds to .

At the service factory returns a created OData service to the OData library. From method proceeds to .

At the OData library transmits an OData request to the mashup processor for the service document. For example the service document can be requested by an HTTP call 

The OData library would utilize the mashup EDM provider to retrieve information about the collections feeds provided by the particular service and then render an XML document which lists the exposed collections of the service. Note that in the sequence diagrams of both and one collection or feed corresponds to an entity type. The entity type specifies the data structure of the entries of one collection the data model of the entities . From method proceeds to .

At the mashup processor request data structure entity types from the mashup EDM provider for the complete mashup service and subservices . From method proceeds to .

At the mashup EDM provider runs in a loop to retrieve entity types from the mashup sub service. From method proceeds to .

At the mashup EDM provider returns the entity types retrieved from the mashup sub service. From method proceeds to .

From the mashup processor formats the service document for the mashup service using the returned entity types and transmits it to the OData library. From method proceeds to .

From the OData library transmits the requested service document for the mashup service to the consumer. From method stops.

A read feed is a request for a feed or collection of data. For example a list of products a list of orders a list of flights etc. The service document of an OData service specifies the collections feeds which can be exposed by an OData service. The request for a particular collection feed would be similar to 

At a request is received by the OData library from a consumer to get a feed collection exposed by a mashup service. Note that methods and are identical apart from and from onward. Other steps in should be assumed to identical to as described in .

At the OData library transmits an OData request to the mashup EDM provider for entity types returned as entries in a metadata document . For example one entity type can describe the data model of a feed entry collection entry such as an entity type specifying a data model of one entity in a flight collection feed requested from the FLIGHTMASHUP service described above.

At the mashup EDM provider transmits the entity types retrieved from the mashup subservices by utilizing the registered mashup sub providers. From method proceeds to .

At the OData library forwards a request to the mashup processor to retrieve a particular feed. From method proceeds to .

At the mashup processor delegates the feed request to the corresponding mashup sub service to get the feed. From method proceeds to .

At the mashup processor returns the feed information collection to the OData library. From method proceeds to .

From the OData library creates the corresponding read feed response e.g. XML JSON etc. based on the runtime data and the service data model metadata retrieved during the first portion of the request processing in for the requested feed for the mashup service to the consumer. From method stops.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example LINUX UNIX WINDOWS MAC OS ANDROID IOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a CPU a FPGA or an ASIC.

Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors both or any other kind of CPU. Generally a CPU will receive instructions and data from a read only memory ROM or a random access memory RAM or both. The essential elements of a computer are a CPU for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a global positioning system GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM DVD R DVD RAM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display LED Light Emitting Diode or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball or trackpad by which the user can provide input to the computer. Input may also be provided to the computer using a touchscreen such as a tablet computer surface with pressure sensitivity a multi touch screen using capacitive or electric sensing or other type of touchscreen. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of wireline and or wireless digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a radio access network RAN a metropolitan area network MAN a wide area network WAN Worldwide Interoperability for Microwave Access WIMAX a wireless local area network WLAN using for example 802.11 a b g n and or 802.20 all or a portion of the Internet and or any other communication system or systems at one or more locations. The network may communicate with for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and or other suitable information between network addresses.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

In some implementations any or all of the components of the computing system both hardware and or software may interface with each other and or the interface using an application programming interface API and or a service layer. The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the computing system. The functionality of the various components of the computing system may be accessible for all service consumers via this service layer. Software services provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C or other suitable language providing data in extensible markup language XML format or other suitable format. The API and or service layer may be an integral and or a stand alone component in relation to other components of the computing system. Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation and or integration of various system modules and components in the implementations described above should not be understood as requiring such separation and or integration in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

