---

title: Performance based recommendations
abstract: Systems and associated processes are disclosed for generating recommendations for users based on the computing device likely to be utilized by the user to execute an application, among other things. These systems and processes are described in the context of an interactive computing system that enables users to download applications for mobile devices or for other computing devices. The performance of applications running on the user's computing device can be monitored with the performance data being collected and provided to the interactive computing system. The interactive computing system can include a recommendation system or service that processes the performance data and using the performance data, among possibly other data, the recommendation system can recommend alternative applications to the user for download. Further, in some cases, the interactive computing system can recommend modifications to the user's computing device to improve the performance of the application running on the user's computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09111219&OS=09111219&RS=09111219
owner: Amazon Technologies, Inc.
number: 09111219
owner_city: Seattle
owner_country: US
publication_date: 20130213
---
A variety of methods are known for detecting behavior based associations associations based on user behaviors between items stored or represented in a database. For example the purchase histories or item viewing histories of users can be analyzed to detect behavior based associations between particular items represented in an electronic catalog e.g. items A and B are related because a relatively large number of those who purchased A also purchased B . As another example the web browsing histories of users can be analyzed to identify behavior based associations between particular web sites and or web pages.

The detected behavior based associations are typically used to assist users in locating items of interest. For example in the context of an electronic catalog when a user accesses a network resource such as a web page that is associated with an item the resource may be supplemented with a list of related items. This list may for example be preceded with a descriptive message such as people who bought this item also bought the following or people who viewed this item also viewed the following. The detected associations may also be used to generate personalized recommendations that are based on the target user s purchase history item viewing history and or other item selections.

Personalized recommendations are often generated for users based on a user s interactions in an electronic catalog which can include user purchases and item selections e.g. page requests . Typically the recommendations do not take into account where or how the user will actually use the item as in many cases where or how an item is used has minimal effect on the user s satisfaction. For example when a user selects a book to purchase typically the decision of which book to select is based on the book s content and not where the user reads the book. As a second example when a user is selecting a barbeque grill the user typically makes a decision based on a number of factors inherent to the barbeque grill itself and in most cases not where the user will use the grill.

However for applications or apps the device that executes the application can be as important as the features of the application itself. Currently available recommendation systems typically do not factor the environment or device characteristics for the device that the user will use to execute the application when making recommendations.

This disclosure describes systems and associated processes for generating recommendations for users based on the computing device likely to be utilized by the user to execute an application among other things. These systems and processes are described in the context of an interactive computing system that enables users to download applications for mobile devices such as phones or for other computing devices. The performance of applications running on the user s computing device can be monitored with the performance data being collected and provided to the interactive computing system. The interactive computing system can include a recommendation system or service that processes the performance data and using the performance data among possibly other data the recommendation system can recommend alternative applications to the user for download. Further in some cases the interactive computing system can recommend modifications to the user s computing device to improve the performance of the application running on the user s computing device. Many other embodiments are also possible and are described in greater detail below.

For purposes of illustration the processes disclosed herein are described primarily in the context of an interactive computing system that provides applications for download. As will be apparent however the disclosed processes can also be used in other types of systems and can be used to recommend other types of items such as but not limited to products and services electronic books ebooks web sites news articles blogs podcasts discussion boards photos and other images online videos and other types of data that may be consumed on a computing device. In addition the disclosed processes need not be implemented as part of or in conjunction with a web site.

As used herein the term application in addition to having its ordinary meaning can mean among other things executable code or instructions interpreted code or instructions such as Java bytecode or the like scripted code source code object code assembly code any of the above together with associated data and the like. Further the term application can include data that can be accessed by an application. For example as indicated above embodiments described herein can be used to recommend ebooks e.g based on the file format or a video file e.g. based on a particular compression standard .

The user computing systems and the developer computing systems that access the interactive computing system can include computing devices such as desktop computers laptop computers tablets personal digital assistants PDAs mobile phones including smart phones electronic book readers other wireless devices set top or other television boxes media players game platforms and kiosks among others. In some embodiments at least some of the user computing systems may also be developer computing systems and vice versa. Embodiments of the user computing systems are described in more detail below with respect to .

The user computing systems and developer computing systems access the interactive computing system over a network which can include any type of network. For example the network can be a local area network a wide area network a cellular network combinations of the same and the like. In some embodiments the network can include the Internet.

The interactive computing system can be implemented with one or more physical servers or computing machines. Thus each of the components depicted in the interactive computing system can include hardware and or software for performing various features. In one embodiment the interactive computing system is a web site or a collection of web sites. The interactive computing system can provide access to applications developed by an entity associated with or an operator of the interactive computing system . Further in some cases the interactive computing system may provide access to applications developed by developers and or entities that are different from the entity of operator of the interactive computing system . For instance developers can provide applications to the interactive computing system via for example the developer computing systems .

The interactive computing system includes an application distribution service . The application distribution service can be an application store or the like that makes applications available for download or streaming to the user computing systems for free or upon payment. The application distribution service can include components for browsing and or searching a catalog of applications which may be stored in an item data repository . The application distribution service can but need not rely on the functionality of a separate catalog service described below for this browse and or search functionality.

The interactive computing system also includes personalization services which can include services for providing personalized information to users. Examples of personalization services include a recommendation service provided for example by a recommendation engine a personalized search service an application monitoring service that can be performed by an application performance monitor and other services such as a tag based service. The recommendation engine is described in detail below. The search services can recommend personalized search results to users based on an analysis of previous search behavior. Tag based services can provide functionality for users to apply textual tags to items in the catalog to thereby categorize the items. Other personalization services can include list services for allowing users to create lists of items blogging services personalized social networking services and the like.

Advantageously in certain embodiments the recommendation engine can generate performance based recommendations. The recommendation engine can generate these recommendations using performance data collected from the user computing systems . As an example the recommendation engine can collect data regarding the impact of an application on battery life of a user computing system memory usage of an application processor utilization of an application use of storage space on the user computing system by the application and the like. Further in some cases the recommendation engine can also collect usage information relating to the application on the user computing device . For example the recommendation engine can collect usage times and frequency related to the application as well as usage information related to other applications such as whether and what other applications are running while the user is executing the application. With the performance data and in some cases the usage data the recommendation engine can identify alternative applications that may satisfy the user s need while providing the user with better performance such as reduced processor or memory usage or increased stability on the user computing system .

The recommendation engine can use the application performance monitor to collect the performance data and or usage data of applications on user computing systems . Alternatively or in addition the recommendation engine can obtain the performance and or usage data from a system included with the user computing system as is described further below with respect to . In some cases the performance data and or usage data may be stored at the user data repository which can be accessed by the recommendation engine . Further performance data for alternative applications may be stored at the item data repository . In some cases the item data repository may also include performance data for the application generally as opposed to performance data of a user s specific instance of the application on the user s user computing system .

The recommendation engine can use any of a variety of algorithms for generating the recommendations. For example the recommendation engine can use item to item or user to user similarity recommendations to identity alternative applications including for example any of the algorithms described in U.S. Pub. No. 2002 0010625 filed Mar. 29 2001 titled Content Personalization Based on Actions Performed During a Current Browsing Session the disclosure of which is hereby incorporated by reference in its entirety. The recommendation engine can then use a priori or in some cases real time analysis of the alternative applications to determine whether the alternative applications are expected to provide better performance e.g. lower memory usage improved responsiveness to user input compared to the user s existing application. Alternatively or in addition the recommendation engine can recommend changes to the user computing system to improve performance of the application on the device or system. Moreover in some cases the recommendation engine can recommend application modifications to the developer of the application and or additional devices the developer should consider supporting.

The interactive computing system also includes a catalog service and associated search engine not shown . Users can browse an electronic catalog provided by the catalog service or query the search engine to obtain information about electronic catalog content stored in an item data repository . In one embodiment these items can include items other than or in addition to applications such as media books audio video etc. clothes electronics and appliances to name a few. The electronic catalog content can include detailed information about these products as well as services. In one embodiment this content is arranged in a hierarchical structure having items associated with one or more categories or browse nodes in a hierarchy. The catalog service can provide functionality for users to browse the item hierarchy in addition to searching the catalog. This functionality may be provided for example by the search service . Users can select an item represented in the hierarchy or in a list of search results to see more details about an item. In response to a user item selection the server can provide to a user computing system a catalog page sometimes called an item detail page that includes details about the selected item. In one embodiment the applications available for download from the application distribution service are also described in this catalog.

The processing of the various components of the interactive computing system can be distributed across multiple machines networks and other computing resources. The various components of the interactive computing system can also be implemented in one or more virtual machines rather than in dedicated servers. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

The system monitoring module can include any system that can monitor the state of the user computing system . Monitoring the state of the user computing system can include monitoring resource utilization. For example the system monitoring module can monitor the utilization of a processor or memory during execution of an application. In some cases the system monitoring module may be part of the operating system . The operating system can include any type of operating for operating the user computing system . For example the operating system may include a Microsoft Windows operating system an Apple operating system an Android operating system a Unix based operating system etc.

Applications may be executed on the user computing system via an application execution module . In some embodiments the application execution module can provide a sandbox environment that can facilitate with monitoring the performance of an application. In other embodiments the application execution module may be included as part of the system monitoring module or may be optional.

The application marketplace interface can interact with the interactive computing system . In some cases the application marketplace interface may provide performance data and or usage data related to the execution of an application to one or more systems of the interactive computing system such as the application performance monitor . The application marketplace interface may provide the data in response to a user request and or automatically. Alternatively or in addition the application performance monitor may request the data from the application marketplace interface . In some embodiments the application marketplace interface may receive from the recommendation engine recommendations of alternative applications or modifications to an application s settings or settings of the user computing system to improve performance of the application. The application marketplace interface can then present the recommendations to the user. In some embodiments the application marketplace interface may be an application and or may include a browser such as a web browser.

In some embodiments the systems of the interactive computing system and the processes described herein can function with any user computing system and do not require any modifications to systems or processes of the user computing system. As such in some cases the system monitoring module the application execution module and the application marketplace interface may each be optional and or included as part of the operating system s native functionality. For example the application performance monitor can query the operating system of the user computing system to obtain performance data using utilities processes Application Programming Interfaces APIs libraries e.g. Dynamic Link Libraries DLLs or any other interfaces or tools native to the operating system for obtaining information relating to the operating system and applications interacting with the operating system .

To simplify discussion embodiments of this disclosure including process will be described with respect to applications owned by a user. However this disclosure is not limited as such. This disclosure including the process can be applied to applications rented licensed borrowed or otherwise accessible by a user whether or not the user owns the application.

The process begins at block where for example the recommendation engine identifies an application owned by a user. As indicated above the block may identify any application the user can access including non owned applications such as licensed applications. The recommendation engine may identify the application by accessing an entry at the user data repository that is associated with the user. Alternatively or in addition the recommendation engine may identify the application by accessing the user s user computing system via for example the application marketplace interface a DLL made available by the operating system the system monitoring module or the application execution module . Further the application may be identified at the point or time of the application being downloaded or obtained from for example the interactive computing system . Alternatively as described above the application may be identified by accessing stored information relating to downloaded applications. In some cases entitlements to applications may be stored on the network such as at the user data repository . Thus the application entitlements may be accessed to identify the application.

At block the recommendation engine identifies a user computing system used by the user to execute the application identified at the block . Identifying the use computing system can include identifying one or more pieces of metadata associated with the user computing system . This metadata can include any information about the user computing system including the type of device the operating system installed on the device utilization of resources on the device etc. As with the application the user computing system may be identified by accessing an entry at the user data repository that is associated with the user. Further the user computing system may be identified by accessing the user computing system itself.

At block the application performance monitor obtains measurements or performance data for a set of performance characteristics for the application executing on the user computing system . These performance characteristics can include any type of characteristics related to how the application performs on the user computing system or the impact of the application on the user computing system . For example the performance characteristics can relate to battery life utilization of memory processor or storage resources on the user computing system display resolution network usage e.g. the amount of data sent over a cellular data network and speed or rate of responsiveness to user input. In some embodiments the performance characteristics may include features available on the application.

Further the measurements obtained at the block may be instantaneous measurements or measurements that give a value for a performance characteristic at a particular point in time. Alternatively or in addition the measurements may be some aggregation of measurements for a performance characteristics over time. For example processor utilization may be measured over an entire usage period of an application over a plurality of usage periods of the application over a number of days etc. Further these measurements over time may be continuous measurements or intermittent measurements. The application performance monitor may average the measurements over the period of time sum the measurements identify a peak measurement calculate the median measurement calculate the mode measurement or perform any other process for aggregating and or analyzing the measurements collected over the measurement time period. In certain embodiments the measurements may include a combination of instantaneous measurements and measurements obtained over time

The recommendation engine at block identifies one or more alternative applications that are substantially similar to or include at least some of the features of the application identified at the block . These alternative applications can be identified using any system or process for identifying applications that share features. For example the alternative applications may be applications that share a browse node with the application identified at the block . As a second example the alternative applications may be identified using an item to item mapping algorithm to identify applications related to the application identified at the block . Further the alternative applications may be identified based on application type application features or any other characteristics that can be used to compare applications. In some cases the alternative applications are associated with the same product or application category as the application at the electronic catalog provided by the catalog service . The alternative applications in certain embodiments may share the same primary function as the application. For example each of the applications may be email applications. Although the applications may share the primary function of sending and receiving email the applications may include various additional functions that may or may not be shared by some or all of the other applications such as a calendar function or the ability to highlight priority email.

In some embodiments the recommendation engine identifies alternative applications that include all of a set of particular features or at least a subset of particular features. These particular features may be specified by a user or identified by analyzing other applications purchased by the user or the features of the application that the user utilizes.

At block for each alternative application identified at the block the application performance monitor determines expected performance data for the set of performance characteristics measured at the block . The expected performance data can be based on a number of factors. These factors can include information reported by the developer of the application tests e.g. benchmarks performed by an entity associated with the interactive computing system measurements or performance data collected from users who use the alternative applications etc. Further the tests may be performed on or the measurements may be collected from user computing systems that are the same type or model as the user computing system identified at the block . Moreover the user computing systems tested or from which the performance data is collected may have the same configuration or resource load e.g. running similar applications as the user computing system identified at the block . In some embodiments the expected performance data includes a range of values for the set of performance characteristics for each alternative application. Alternatively or in addition the expected performance data can include a probability value representing an estimated probability that a performance characteristic will have a certain value if the alternative application is utilized instead of the application identified at the block . In an embodiment the probability value may be based on a scale other than 0 1 .

At block the recommendation engine compares the expected performance data of each alternative application with the measurements of the application obtained at the block . Comparing the expected performance data and the measurements can include weighting particular performance characteristics so that the weighted performance characteristics have more impact in the result of the comparison. Further comparing the expected performance data and the measurements can include comparing an expected value for each performance characteristic with the measurement for the performance characteristic to determine whether the expected value is higher or lower if appropriate for the performance characteristic than the measured value.

In some cases the expected value is compared against a threshold value that is based on the measured value. Advantageously in some cases by using a threshold value instead of the measured value as the comparison point the recommendation engine can avoid recommending applications that are marginally or insignificantly better than the application identified at the block . For example the recommendation engine would not recommend an application solely on the basis that it uses 1 kb less memory if a memory utilization threshold is set such that an alternative application should use 128 kb less memory to be identified as better compared to the application identified at the block . The thresholds may vary based on the performance characteristic including in some cases the weight applied to the performance characteristic. For example if memory utilization is weighted higher than other performance characteristics the threshold of the previous example may be set to 64 kb instead of 128 kb. On the other hand if memory utilization is weighted lower than other performance characteristics the threshold may be set to 256 kb.

In some embodiments comparing the expected performance data of each alternative application may include comparing the expected performance of the alternative applications on other user computing devices used by the user to the performance of the application identified at the block on the other user computing devices . If measurement values are not available for the other user computing devices the recommendation engine may use expected values for the application identified at the block running on the other user computing devices . The decision of whether to include comparisons of applications running on the other user computing devices may be based on user input and or an analysis of usage data for the other user computing devices with respect to the application or in general. Advantageously in certain embodiments by including an analysis of the alternative applications running on other user computing devices as part of the block the recommendation engine can avoid recommending an alternative application that although potentially better than the application identified at the block the user is unlikely to purchase due to the alternative application s performance or ability to be executed on the user s other user computing devices .

At decision block the recommendation engine determines whether any of the alternative applications are expected to perform better than the application identified at the block on the user computing system . The decision block may include determining whether any of the alternative applications are expected to perform a threshold amount better than the application. Determining whether any of the alternative applications are expected to perform better than the application may include determining the probability that an alternative application is expected to perform better than the application.

In some embodiments the decision block may take into account additional features that may be available on an alternative application. For example an alternative application that is not better or not a threshold amount better than the application based on the comparison of performance characteristics may be included in the set of better applications based on additional features available on the alternative application.

If the recommendation engine does not identify any alternative applications that are better than the application based on the compared performance characteristics the process ends. Alternatively the process may be repeated for other applications. On the other hand if the recommendation engine determines that alternative applications exist that are better or have an above threshold probability of being better than the application based on the compared performance characteristics the recommendation engine recommends one or more of the alternative applications expected to perform better to the user at the block . The recommendation engine may select randomly the alternative application to recommend from the one or more alternative applications. Alternatively the recommendation engine may use one or more selection factors to select the alternative application. These selection factors can include any factor for selecting an alternative application from a set of alternative applications. For example the selection factor may be based on the relative performance comparisons of the alternative applications e.g. the alternative application that performed the best compared to the application the brand of the alternative applications the number or type of additional features available popularity or ratings for the alternative applications etc. In some embodiments the alternative application may be an application that the user already owns or is authorized to access but which the user has not downloaded to the user computing system . For example the alternative application may be an application purchased for a different user computing system of the user. In such cases the recommendation engine may indicate to the user that the recommended alternative application is an application owned or accessible by the user but which the user has not downloaded or configured for the user computing system identified at the block .

The recommendation of the application may be presented to the user in response to a user request or may be presented to the user without any input or trigger from the user. Further the recommendation may be presented to the user in an email on a web page e.g. an item detail page associated with an application or a related application on a special recommendations are or in a page area reserved for recommendations as a text message as part of a recommendation application in a voice message or in any other way that a recommendation may be presented to a user. It should be understood that the presentation of recommendations is not equivalent to the presentation of search results. For example search results are generally generated in response to a query involving search terms. Process may be used to recommend alternative applications to a user without the user initiating a search.

The process begins at block where for example the recommendation engine identifies a set of applications to recommend to a user based at least in part on metadata associated with the user. The set of applications may be identified based on any recommendation process. For example the set of applications may be identified based on applications purchased by users who view the item details page of the same application the user viewed. The metadata associated with the user can include any information about the user the user s actions with respect to the electronic catalog or the user s usage of the user computing system . For example the metadata can include the user s age or gender the applications viewed or purchased by the user the frequency with which the user plays game applications on the user computing system etc.

At block the recommendation engine identifies one or more devices e.g. user computing systems associated with the user. These devices may be identified by accessing an entry associated with the user at the user data repository . Alternatively or in addition the devices may be identified based on information provided by the user. For each of the one or more devices the recommendation engine identifies metadata associated with the device at the block . This device metadata can include any information related to the device. For example the device metadata may include model information device type information specifications for the device configuration of the device operating system used or installed on the device applications installed and or running on the device etc.

Using the metadata for each device the recommendation engine using for example the application performance monitor determines an expected performance score for each application on the device at block . The expected performance score may be based on one or more of the previously described performance characteristics. In some cases the performance score constitutes a combination of values for the one or more performance characteristics. In other cases the performance score may be a set of scores. For instance each performance characteristic may be analyzed separately rather than combined into a single performance score. Alternatively some performance characteristics may be combined while others are treated independently. As with the block the expected performance scores may be based on benchmarks or on executing the identified applications on test devices. Further the expected performance scores may be based on information gathered from other users devices that run the identified applications. In some cases the block can include some or all of the embodiments described above with respect to the block .

For each application the recommendation engine aggregates at block the expected performances scores for each device identified at the block . The recommendation engine can use any aggregation process such as averaging or summation to aggregate the performance scores. In some embodiments the block may be optional. For example each device identified at the block may be evaluated separately and an application may be recommended if any device supports the application regardless of whether some or most of the devices do not support the application or do not provide a threshold level of performance for the application. In other embodiments the recommendation engine may only recommend applications that run on all of the devices on a threshold percentage of devices or on a particular subset of devices associated with the user. In some embodiments the devices may be weighted based on the user s usage of the devices. For example if a user relatively infrequently uses a device to run applications compared to other devices of the user the device and or its performance scores may be weighted to reduce the device s impact on recommending an application. As a second example if the user typically uses a particular device for running game applications and another device for running work applications the devices may be weighted differently based on the application under consideration.

At block the recommendation engine filters the set of applications based on the performance scores or aggregated performance scores to obtain a filtered set of applications. For example the recommendation engine may filter the applications to exclude applications below a threshold performance score. Further the recommendation engine may filter applications based on the number of devices of the user that can run the application or whether particular devices can run the application. In some embodiments the block may rank the applications instead of or in addition to filtering the applications.

The recommendation engine can recommend one or more of the applications from the filtered set of applications to the user at block . In some embodiments the block can include some or all of the embodiments described above with respect to the block .

The process may be repeated with additional applications. For example if the block reduced the number of applications to recommend to zero the recommendation engine may select a new set of applications at the block and repeat the process .

Although described with respect to recommendations in some cases the process can be used with search results. For example the set of applications identified at the block can be identified based on a search initiated by a user. The applications presented to the user at the block can then include search results that were not filtered out at the block .

The process begins at block where for example the recommendation engine identifies an application to recommend to a user based on metadata associated with the user. In certain embodiments the block can include one or more of the embodiments described above with respect to the block . At block the recommendation engine identifies a plurality of devices e.g. user computing systems associated with the user. In certain embodiments the block can include one or more of the embodiments described above with respect to the block .

Using for example the application performance monitor the recommendation engine determines whether each of the plurality of devices is capable of executing the application at the block . This determination may be made based on specifications for the devices information provided by the developer for the application benchmarks of the application running on instances of the devices tests of the application and or instances of the devices performed by an entity associated with the interactive computing system or any other process for determining whether each of the plurality of devices is capable of executing the application. In certain embodiments the block includes determining whether each of the plurality of devices is capable of executing the application with a threshold level of performance. The level of performance of an application running on a device may be measured by the utilization of resources by the application running on the device or any other measure for determining a level of performance e.g. benchmarks . In some embodiments the block may include one or more of the embodiments described above with respect to the block and or the block .

At decision block the recommendation engine determines whether at least two of the devices identified at the block are capable of executing the application. In some cases the recommendation engine determines whether at least two of the devices are capable of executing the application with at least a threshold level of performance. In some embodiments the decision block may determine whether at least a threshold number of the devices identified at the block are capable of executing the application or are capable of executing the application with a threshold level of performance. The threshold level of devices may be set by the user the entity or a representative thereof associated with the interactive computing system or any other user or system that can set the threshold level of devices. Further in some cases the threshold level of devices may include all of the devices identified at the block .

If the recommendation engine determines at the decision block that there are not at least two devices capable of executing the application the process ends. Alternatively the process may be repeated with another application. If the recommendation engine determines at the decision block that there are at least two devices capable of executing the application the recommendation engine using for example the application performance monitor determines at decision block whether the application is capable of synchronizing data across the devices capable of executing the application. If not the process ends or may be repeated with another application. If the recommendation engine determines at the decision block that the application is capable of synchronizing data across the devices capable of executing the application the recommendation engine recommends the application to the user at the block . In some embodiments the application will be recommended if at least two devices capable of executing the application can synchronize the data of the application. In some embodiments the block may include one or more embodiments described above with respect to the blocks and .

In some embodiments the previously mentioned threshold level of devices may be a single device. In such cases the process may be used to identify applications capable of running on the device and synchronizing data on another device. However in some cases this other device may not be a device that is identified at the block .

The process can be used for any type of application or synchronization process. Further in some cases determining whether data can be synchronized between devices for the application includes determining the method of synchronization. For instance the process may be used to recommend applications that run on user computing systems but are synchronized via the cloud or a network computing system e.g. a computing systems hosted by the interactive computing system or a developer computing system . As another example the process may be used to recommend applications that run at least in part if not completely on a computing device in the interactive computing system or some other non user computing system but which is capable of synchronizing user data to multiple user computing systems .

The process begins at block where for example the recommendation engine identifies an application owned by a user. In certain embodiments the block can include one or more of the embodiments described above with respect to the block . At block the recommendation engine identifies a user computing system used by the user to execute the application identified at the block . In certain embodiments the block can include one or more of the embodiments described above with respect to the block .

At block the application performance monitor obtains performance data for the application executing on the user computing system . Obtaining the performance data can include obtaining measurements for one or more performance characteristics as described above with respect to the block . In some embodiments the block can include one or more of the embodiments described above with respect to the block .

At block the application performance monitor identifies one or more adjustments to the user computing system to improve the performance of the application on the user computing system . These adjustments may include any type of adjustment that a user can make to the user computing system running the application. As different user computing systems generally have different capabilities often at least some of the adjustments identified will be dependent on the model or type of user computing system . Some non limiting examples of the adjustments can include modifying battery settings e.g. recharge timing modifying display settings e.g. display brightness modifying memory allocation modifying processor settings modifying network settings and the like.

Further in some embodiments the adjustments can include modifying the application s execution. For example the adjustments can include downloading one or more application components or application data a priori or at some time instance relative to execution of the application e.g. at application start or at specific execution points of the application instead of streaming the components or data from for example a server during use of the application. Moreover the adjustments can include modifications to other applications running on the user computing system . For example the adjustments may include ceasing execution of another application pausing execution of another application adjusting the capabilities of another application while the application identified at the block is executing etc.

Adjustments to the user computing system the application or other applications may be determined based at least in part on data collected from any source that can provide data facilitating the determination of the adjustments. For example the adjustments may be based on information provided by the application developer data obtained from other systems that execute the application data obtained by an entity e.g. the entity associated with the interactive computing system or a third party entity testing the application etc.

At block the recommendation engine recommends one or more adjustments to the application and or to the user computing system to the user. The adjustments can include any changes to the application and or the user computing system that can improve the performance of the application and or user computing system while executing the application. For example the adjustments can include changing display settings network settings applications executing on the user computing system settings within the application e.g. synchronization rate autosave settings etc. battery settings etc. Further improving performance can relate to adjusting any performance characteristic such as increasing battery life decreasing network usage decreasing memory usage decreasing processor utilization decreasing response time to user commands or adjusting any type of performance characteristic identified by a user or developer of an application. The recommendations may be presented to the user via any method for presenting a recommendation. For example the recommendation may be presented via email text message a system status box on the user computing system a web page etc. In some embodiments some adjustments identified at the block may be filtered from the identified adjustments and the recommendation engine may not present the filtered adjustments to the user. The filter may be based on usage information application feature or functionality or any other basis for filtering an application. For example an adjustment to cease operation of another application may be filtered from the set of adjustments to be recommended if the other application is a system status monitoring application or a battery monitoring application. As a second example an adjustment to cease operation of another application may be filtered from the set of adjustments to be recommend if usage information associated with the application indicates that the user frequently e.g. more than a threshold accesses the application even in some cases while the application identified at the block is executing.

Alternatively or in addition to the block the application performance monitor may automatically implement the suggested adjustments. In some cases the adjustments are automatically implemented in response to a setting activated by the user or in response to a user indicating approval for the interactive computing system to automatically adjust settings to the application or user computing systems . In some embodiments the recommendation engine may present the suggested adjustments to the user and upon the user indicating a desire to implement the suggestions the application performance monitor or a system on the user computing system e.g. the system monitoring module or the application execution module may automatically make the suggested adjustments.

In some embodiments one or more adjustments to the user computing system or the application identified at the block may be presented to a developer of the application instead of or in addition to the user. By providing adjustments to the developer in some cases the developer can make improvements to a release of the application provide support for additional devices or reduce support for certain devices e.g. devices that cannot run the application with a threshold level of performance .

As illustrated in the alternative applications can include a list of reasons that the applications were recommended. For example application is recommended to the user because it uses less battery and less network data than the user s current email application. In addition the application is recommended because it includes an additional feature the ability to setup programmable alerts. Further in some cases the display screen may present recommendations of changes to the configuration of the mobile device to improve the application or the performance of the application on the mobile device .

The user can select one or more of the recommended alternative applications to download the application s . The recommendations user interface displayed on the display screen is merely one example of many formats that can be used to display recommendations other examples of which are described in U.S. Publication No. 2002 0198882 filed Jan. 14 2002 titled Content Personalization Based on Actions Performed During a Current Browsing Session the disclosure of which is hereby incorporated by reference in its entirety.

Additional embodiments of the present disclosure include a method for providing performance based recommendations that can be implemented by the recommendation engine . The method can include identifying an application accessible by a user on a computing device and identifying an alternative application that is similar to the application. Further the method may include calculating a score based at least in part on an estimated probability that the alternative application will provide better performance on the computing device than the application. Moreover the method may include determining whether the score satisfies a threshold. In response to determining that the score satisfies the threshold the method may include recommending the alternative application to a user of the computing device. In some embodiments the score is based at least in part on the first performance value and the second performance value. Moreover the score may comprise the estimated probability that the alternative application will provide better performance on the computing device than the application.

In some embodiments the method may include identifying a performance characteristic of the application and measuring the performance characteristic of the application running on the computing device to obtain a first performance value. Further the method may include obtaining a second performance value corresponding to the alternative application. The second performance value may be determined probabilistically based on collected performance data for the alternative application executing on a set of computing devices.

Further the method may include identifying the user s satisfaction level with the application and setting the threshold based on the user s satisfaction level. Moreover the method may include identifying the alternative application based at least in part on a set of application features associated with the alternative application and the application.

A number of computing systems have been described throughout this disclosure. The descriptions of these systems are not intended to limit the teachings or applicability of this disclosure. For example the user systems described herein can generally include any computing device s such as desktops laptops video game platforms television set top boxes televisions e.g. internet TVs computerized appliances and wireless mobile devices e.g. smart phones PDAs tablets or the like to name a few. Further it is possible for the user systems described herein to be different types of devices to include different applications or to otherwise be configured differently. In addition the user systems described herein can include any type of operating system OS . For example the mobile computing systems described herein can implement an Android OS a Windows OS a Mac OS a Linux or Unix based OS or the like.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. For example the various systems illustrated as part of the personalization services can be distributed across multiple computing systems or combined into a single computing system. Further various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Depending on the embodiment certain acts events or functions of any of the algorithms methods or processes described herein can be performed in a different sequence can be added merged or left out all together e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Each of the various illustrated systems may be implemented as a computing system that is programmed or configured to perform the various functions described herein. The computing system may include multiple distinct computers or computing devices e.g. physical servers workstations storage arrays etc. that communicate and interoperate over a network to perform the described functions. Each such computing device typically includes a processor or multiple processors that executes program instructions or modules stored in a memory or other non transitory computer readable storage medium. The various functions disclosed herein may be embodied in such program instructions although some or all of the disclosed functions may alternatively be implemented in application specific circuitry e.g. ASICs or FPGAs of the computer system. Where the computing system includes multiple computing devices these devices may but need not be co located. The results of the disclosed methods and tasks may be persistently stored by transforming physical storage devices such as solid state memory chips and or magnetic disks into a different state. Each process described may be implemented by one or more computing devices such as one or more physical servers programmed with associated server code.

Conditional language used herein such as among others can might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or states. Thus such conditional language is not generally intended to imply that features elements and or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or states are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list. In addition the articles a and an are to be construed to mean one or more or at least one unless specified otherwise.

Conjunctive language such as the phrase at least one of X Y and Z unless specifically stated otherwise is otherwise understood with the context as used in general to convey that an item term etc. may be either X Y or Z. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of X at least one of Y and at least one of Z to each be present.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it will be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. As will be recognized the processes described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others. The scope of protection is defined by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

