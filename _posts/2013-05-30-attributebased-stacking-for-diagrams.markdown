---

title: Attribute-based stacking for diagrams
abstract: A system and method for facilitating adjusting a displayed representation of a visualization. An example method includes displaying a first visualization that includes plural nodes; providing a first user option to specify a first node attribute; and stacking nodes of the first visualization based on the first node attribute, resulting in display of one or more stacks of nodes. In a more specific embodiment, one or more links connect one or more of the plural nodes to one or more other nodes of the plural nodes. The method further includes adjusting the first visualization to illustrate the one or more stacks of nodes, while preserving any links, resulting in display of a second visualization in response thereto. The step of adjusting further includes animating a transition between display of the first visualization and display of the second visualization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09466138&OS=09466138&RS=09466138
owner: Oracle International Corporation
number: 09466138
owner_city: Redwood Shores
owner_country: US
publication_date: 20130530
---
This application is related to the following applications U.S. patent application Ser. No. 13 688 010 entitled COMPRESSING TREE DIAGRAMS filed on Nov. 28 2012 which is hereby incorporated by reference as if set forth in full in this specification.

The present application relates to software and more specifically to user interface designs and methods for manipulating information visualizations such as network diagrams.

Visualizations are employed in various demanding applications including enterprise resource planning scientific research financial data analysis computer network topology design social network analysis and so on. Such applications often involve large datasets of which a portion or all of the data may be incorporated into a visualization. The data may include patterns and other characteristics that may be illustrated via a visualization. Such applications often demand particularly illustrative visualizations that can reveal patterns and information in the data and that may be manipulated to enable users to quickly ascertain desired information.

Illustrative visualizations are particularly important in social network analysis computer network topology design and enterprise data applications where multiple attributes patterns and complex phenomena may exist in granular data to be illustrated via a visualization. Complex underlying data may yield large unwieldy visualizations with potentially hundreds or thousands of nodes and links which may not fit within a single display area especially when mobile devices such as tablets and smartphones are used to display the visualizations on relatively small displays. Connections and relationships between different types of nodes may be unclear and important data patterns may be hidden among diagram complexity.

Conventionally complex visualizations and accompanying user interfaces may provide certain features such as panning zooming summarizing and filtering features for manipulating the visualizations. However such features typically provide incomplete perspectives or views of the underlying data where important relationships between nodes are hidden or obscured and overall context is lost.

To reduce diagram complexity container nodes may be employed. A container node may represent a summary node that includes several components. For example a node in a computer network diagram representing a server cluster may represent a container node that includes individual server components. However use of container nodes to reduce diagram complexity may limit operations that can be performed on container node components as container node components typically must remain with the container node. Furthermore important data patterns may remain hidden.

Hence conventional visualizations and accompanying techniques and user interfaces may lack effective mechanisms for selectively reducing complexity of potentially overwhelmingly complex visualizations while preserving and illustrating important data patterns and relationships.

An example method for facilitating adjusting a visualization includes displaying a first visualization that includes plural nodes providing a first user option to specify a first node attribute and stacking nodes of the first visualization based on the first node attribute resulting in display of one or more stacks of nodes.

In a more specific embodiment one or more links connect one or more of the plural nodes to one or more other nodes of the plural nodes. The method further includes adjusting the first visualization to illustrate the one or more stacks of nodes while preserving the one or more links resulting in display of a second visualization in response thereto. The step of adjusting further includes animating a transition between display of the first visualization and display of the second visualization.

In an illustrative embodiment the method further includes providing a second user option to specify a second node attribute grouping nodes of the first visualization in accordance with the first node attribute and the second node attribute and displaying a third visualization which represents the first visualization after nodes have been stacked in accordance with the first attribute and the second attribute.

The method may further include displaying an indication of a number of nodes included in a stack of the second and or third visualization. The indication may include a label and or varying stack height which is varied based on a number of nodes included in the stack. Another indication such as a link label may indicate a number of links connecting one or more stacks and or nodes of the third visualization.

The method may further include providing a user option to trigger a software action pertaining to one or more nodes of a stack. The software action may include for example generating a fourth visualization based on information associated with the one or more nodes of the stack. The fourth visualization may include for example a bar chart depicting performance salary or other metric s of individual persons associated with individual nodes of the stack. Additional actions include sorting expanding or flipping through nodes of the stack.

The method may further include providing a user option to overlay one or more stacks of a second third or fourth visualization on the first visualization while depicting one or more links indicating where one or more of nodes of the stack were originally positioned in the first visualization. The first node attribute and the second node attribute may be visually encoded e.g. by color shape size etc. in one or more nodes of the first visualization. The visual encoding for each visually encoded node may be preserved between the different visualizations.

The various visualizations may include network diagrams maps N box visualizations and so on. For example the first visualization may include a map with one or more nodes wherein the first node attribute includes geographical information such as state or other region and or a metric associated with one or more persons represented by one or more nodes displayed on the map.

Hence by enabling stacking of nodes in a visualization based on a user specified attribute certain embodiments discussed herein enable substantial reductions in visualization complexity while enabling flexible and efficient viewing of particular relationships that may exist between individual nodes and node stacks.

By enabling user control over visualization complexity users can dramatically simplify complex confusing diagrams while maintaining knowledge of interrelationships between nodes and without necessitating underlying data model changes. User options for selectively creating stacks based on various attributes user options for manipulating stacks e.g. unstacking exploding tiling cascading and so on and user options for performing stack operations e.g. flipping shuffling sorting and so on provide synergistic functionality for extracting sought information from data underlying a visualization.

A further understanding of the nature and the advantages of particular embodiments disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.

For the purposes of the present discussion information visualization may be any process involving graphically representing data according to a method or scheme. A graphical representation of data resulting from an information visualization technique is called a visualization. Example visualizations include pie charts treemaps bar charts line graphs N boxes maps with data layers and so on.

An object such as a data object may be any grouping of or encapsulation of data and or functionality. Examples of objects include classes or structures implemented via object oriented programming languages tables rows columns fields or records of a database and so on. An object may include a single item or instance of data such as a number or other descriptor or attribute or the object may include plural instances of data and or functionality e.g. software methods such as functions or function calls and may further include sub objects.

A representation of an object i.e. a displayed object may be displayed via a graphical depiction such as a node of a visualization a menu item dialog box personnel icon and so on. The graphical depiction of an object may also be called an object a displayed object or a node.

Generally a node may be any graphical representation of an object in a visualization. Note that certain nodes may include sub nodes just as an object may include or represent additional objects i.e. sub objects.

For the purposes of the present discussion a data attribute also simply called attribute herein may be any value or property characterizing data. Accordingly an attribute of a visualization node or associated data may refer to any characteristic of data used to generate a visualization or any characteristic of a visualization representing a characteristic of the data. The data characteristic and or visualization characteristic may be employed to group or otherwise organize or visually distinguish the data by adjusting features or characteristics of the visualization. Examples of attributes include data dimensions or layers such as specified by row or column headers of tables used to store the data used for a visualization.

Hence a node attribute may be any characteristic of a node or any information associated with the node. A node attribute may include a characteristic of underlying data and or may include a visual attribute.

A visual attribute may be associated with or mapped to an underlying node attribute. For example a node representing a female employee may include a particular shape visual attribute that is associated with the underlying data e.g. data attribute indicating that node represents a female.

For the purposes of the present discussion an enterprise may be any organization of persons such as a business university government military and so on. The terms organization and enterprise are employed interchangeably herein. Personnel of an organization i.e. enterprise personnel may include any persons associated with the organization such as employees contractors board members customer contacts and so on.

Enterprise software such as Enterprise Resource Planning ERP software may be any set of computer code that is used by an enterprise or organization. Examples of enterprise software classifications include HCM Human Capital Management software CRM Customer Relationship Management software BI Business Intelligence software and so on. Examples of ERP software applications include Financials Assets Procurement Projects Supply Chain and so on. The terms ERP software and ERP application may be employed interchangeably herein.

Enterprise software applications such as Customer Relationship Management CRM Business Intelligence BI and project management software often include databases with various database objects also called data objects or entities. For the purposes of the present discussion a database object may be any computing object maintained by a database. A computing object may be any collection of data and or functionality. Examples of computing objects include an employee record a product record and so on. Examples of data that may be included in an object include employee name and address information job role performance ratings project or task information appointment records and so on. An example of functionality that may be associated with or included in an object includes software functions or processes for issuing a reminder for an appointment.

In various embodiments discussed herein to facilitate conveying information visual properties of a node can be varied in accordance with a data attribute also simply called attribute herein characterizing the underlying object i.e. data thereby visually encoding the attribute.

For clarity certain well known components such as hard drives processors operating systems power supplies routers Internet Service Providers ISPs and so on have been omitted from the figures. However those skilled in the art with access to the present teachings will know which components to implement and how to implement them to meet the needs of a given implementation.

For the purposes of the present discussion a node stack may be any group of overlapping nodes. A first node is said to overlap a second node when a boundary of the first node appears to encroach on a boundary of the second node. Hence conceptually stacks may represent a group of nodes that are stacked on top of one another. Stacks can be rendered by displaying a single constituent node with some adornment to indicate that the node represents a stack rather than a single node e.g. including the number of nodes that make up the stack . When nodes are stacked the links connecting to the constituent nodes are rendered as connecting to the stack.

The example system includes a mobile computing device such as a smartphone tablet or other device in communication with an ERP server system via a network such as the Internet. The ERP system includes various databases which store database objects .

Note that while the present embodiment is discussed as employing a mobile computing device as a client device that communicates with an ERP server embodiments are not limited thereto. For example functionality need not be distributed across a network and or need not employ an ERP server. Certain embodiments may be implemented as a single software application running on a single computing device without departing from the scope of the present teachings.

In the present example embodiment server side software such as web services Application Programming Interfaces APIs and so on may communicate with database objects maintained by the ERP databases to selectively employ data thereby such as to facilitate implementation of various software applications which may include server side and client side software applications. Generally server side implementations involve running applications on the ERP server in response to a request from a client such as the mobile computing device . Server side applications may then send data and or instructions back to the client device . In client side implementations software may be downloaded to the mobile computing device and executed locally on the device .

The example ERP server system includes an administrator user interface which may include hardware and software functionality for enabling an administrator to make changes to various components of the ERP server system such a settings installed software and so on.

The mobile computing device represents an example client device that communicates with the server side visualization software . Note that client devices other than mobile computing devices such as desktop client devices may be employed without departing from the scope of the present teachings.

The mobile computing device employs a relatively small touch screen also simply called a display herein in communication with Graphical User Interface GUI software which is adapted to facilitate displaying one or more visualizations via the touch screen . The GUI software may be any software application or component such as a spread sheet program graphing software and so on that is adapted to facilitate displaying graphical user interface features and or data such as graphs menu items dialog boxes and so on.

The example GUI software includes a controller in communication with a visualization generator a visualization actions module and a visualization operations module . The controller includes computer code for coordinating inputs and outputs to and from the modules and interfacing the GUI software and accompanying modules with the server side visualization software .

In operation a user may employ the mobile computing device to browse to a website hosted by the ERP server system which provides access to the server side visualization software and accompanying database objects . The controller may facilitate downloading database objects from the ERP server system and server side visualization software for use in constructing a visualization to be displayed via the touch screen . Alternatively the data remains in the databases and information needed to render corresponding visualizations is provided by the server side visualization software .

In the present example embodiment the GUI software is adapted to selectively download database objects from the ERP server system . The visualization generator then employs client side visualization generating software to construct one or more visualizations in accordance with instructions included in the controller and input from the touch screen .

Initial or default methods and algorithms for organizing nodes into stacks of a visualization based on a stacking criteria or attribute for sorting nodes within a stack for encoding any data attributes e.g. attributes of the database objects via node characteristics e.g. node size color shape and so on may be initially determined by the GUI software .

The controller may facilitate implementing GUI components and user interface controls to provide user options to adjust attribute encoding as discussed more fully below. Alternatively or in addition attributes i.e. attributes of data used to generate a visualization are automatically encoded such as in accordance with space constraints inherent in a display numbers of nodes to be illustrated and so on. For example in certain implementations nodes of a visualization are initially automatically stacked to reduce visualization size as the size and or resolution of the display used to illustrate the visualization decreases.

Key functionality for adjusting displayed characteristics of a visualization may be included in various functions e.g. a SetAttributes function and a StackNodes function of the server side visualization software API . The example functions may be called remotely via the visualization generator and controller as needed in response to certain user input or automatically in accordance with instructions included in the controller . Alternatively the functions may be downloaded to the mobile computing device and run client side.

Note that the server side visualization software may include additional functionality other than that represented by the example functions . For example functions for facilitating sorting nodes in a node stack flipping or repositioning a node of a node stack expanding a stack such as by tiling exploding or spreading reorienting into a filmstrip visualization and so on animating node stacking operations and so on may be implemented via the server side visualization software or may be implemented client side via the GUI software .

Those skilled in the art with access to the present teachings may readily develop software to implement functionality discussed herein to meet the needs of a given implementation without undue experimentation.

Page 11 For the purposes of the present discussion software functionality may be any function capability or feature e.g. stored or arranged data that is provided via computer code i.e. software. Generally software functionality may be accessible via use of a user interface and accompanying user interface controls and features. Software functionality may include actions such as retrieving data pertaining to a business object performing an enterprise related task such as promoting hiring and firing enterprise personnel placing orders calculating analytics launching certain dialog boxes performing searches and so on.

The example SetAttributes function of the server side software may include computer code for adjusting visual attributes of nodes of a visualization and for associating the visual attributes with data attributes in response to user input as discussed more fully below. The SetAttributes function may include additional computer code for facilitating attribute mapping whereby for example user specified node stacking attributes are mapped to or associated with visual attributes which are in turn associated with underlying data attributes. For example if visual attributes such as size shape or color are associated with different underlying data attributes the node stacking attributes may represent subsets or sub attributes also called attribute values herein associated with each underlying data attribute.

In certain embodiments visual attributes such as shape color etc. of different nodes may be predetermined e.g. initially set to default visual attributes by the visualization generator of the GUI software or by the server side SetAttributes function . For example certain groupings or underlying data characterized by a given data attribute may be represented by predetermined shapes and or colors in an initial visualization. In such embodiments additional user options may be provided via one or more user interface controls presented via the display to enable users to specify or set node stacking attributes to enable stacking or grouping of nodes based on underlying data attributes and or associated visual attributes of a diagram or other visualization as discussed more fully below. The user interface controls may be generated via the GUI software .

For the purposes of the present discussion a user interface control may be any displayed element or component of a user interface display screen which is adapted to enable a user to provide input view data and or otherwise interact with a user interface. Additional examples of user interface controls include buttons drop down menus menu items tap and hold functionality and so on. Similarly a user interface control signal may be any signal that is provided as input for software wherein the input affects a user interface display screen and or accompanying software application associated with the software.

Touch input may be any input such as input via a gesture provided to a computing device via a touch sensitive display. A gesture may be any movement that involves motion to trigger a signal to control or otherwise affect a user interface display screen.

The example StackNodes function may include computer code for receiving indications of user specified node stacking attributes also called stacking criteria herein and calling the server side visualization software to retrieve instructions for stacking nodes of the visualization and or for redrawing the visualization to show stacked nodes in accordance with the specified attributes. Such instructions may then be used by the visualization generator to generate a diagram based on the received instructions. Note that such functionality as well as other functionality discussed herein may alternatively be implemented entirely client side.

In general various modules shown in may be combined into fewer modules or separated into additional modules which may be implemented on a single device or more devices than shown without departing from the scope of the present teachings.

In general the server side visualization software includes computer code adapted to selectively retrieve data from the databases in response to a request message from the GUI software for use in constructing visualizations such as the visualization . The data may be forwarded to the client side GUI software for representation on the display as needed in response to client side user input.

In certain implementations underlying data of a visualization is maintained primarily in the databases until needed to adjust a visualization e.g. to stack nodes thereof to facilitate drill down operations and so on. In other implementations a local copy of underlying data represented by a visualization is retrieved from the databases and stored locally on the client device i.e. mobile computing device .

Note that while the example GUI software is shown included in the mobile computing device implementations are not limited thereto. For example the GUI software may be incorporated into the server side visualization software and run on the server as a server side application. The server side application may be run server side and viewed client side via browser software running on the mobile computing device .

In the present example embodiment various GUI modules include computer code for implementing functionality for adjusting how a visualization is displayed via the touch screen . Example operations which may be implemented in part via the visualization operations module include animating a transition of the visualization from a first state to a second state where the second state includes stacked nodes filtering or removing stacks from a visualization based on a user specified criteria or action flipping through nodes of a stack or repositioning nodes in a stack expanding a stack such as by spreading to tiling nodes of a stack merging two or more stacks into a single stack displaying a stack as a filmstrip visualization element sorting nodes of a stack based on a given criterion or criteria adjusting node appearance based on a given node appearance criterion or criteria scaling the size of a stack or of the entire visualization repositioning stacks and or nodes of the visualization and so on.

Example visualization actions i.e. software actions which may be implemented in part via the visualization actions module include generating a report or graphic based on one or more selected node stacks of the visualization drilling down into a stack to display additional details of data underlying a node or stack of the visualization updating or editing data in a database changing types of or characteristics of displayed visualizations launching another ERP software application and so on.

For the purposes of the present discussion a software action also simply called action herein may be any process or collection of processes implemented via software. Example processes implemented via the visualization actions module include triggering display of additional details of a data object represented via a node of the visualization i.e. implementing drill down operations in response to certain user input such as a tap gesture applied to a displayed ring or node drilling down to cause display of additional detail associated with a section of a visualization zooming in on a particular portion of a visualization triggering generation and display of a cross tabular report illustrating data underlying a particular section of a visualization updating or editing data in a database changing types of or characteristics of displayed visualizations launching another ERP software application and so on.

Underlying data may be any data used to generate a visualization where nodes or components of the visualization may represent one or more objects features or other data characteristics. Hence underlying data may include information or functionality represented by or corresponding to a node including link information. For example a node representing a person in an enterprise organizational chart may be associated with additional underlying data that includes for example employee job title phone number address and so on.

A user interface display screen may be any software generated depiction presented on a display. Examples of depictions include windows dialog boxes displayed tables and any other graphical user interface features such as user interface controls presented to a user via software such as a browser. A user interface display screen contained within a single border is called a view or window. Views or windows may include sections such as sub views or sub windows dialog boxes graphs tables and so on. In certain cases a user interface display screen may refer to all application windows presently displayed on a display.

In various embodiments discussed herein to facilitate conveying information visual properties of a node can be varied in accordance with a data attribute also simply called attribute herein characterizing the underlying object i.e. data thereby visually encoding the attribute. For example if each node of a visualization is characterized by a performance value then the shape color brightness etc. of each node may be varied as a function of the performance value associated with the node.

The user interface display screen illustrates an example visualization representing a network diagram. The network diagram includes nodes with various shapes corresponding to different visual attributes including shape and color. Different links connect one or more nodes to one or more other nodes of the visualization .

Note that in certain embodiments node links may also be visually encoded. For the purposes of the present discussion visual encoding also simply called encoding or coding herein of a data attribute may be any process involving representing the data attribute graphically. For example if a hierarchical position of a node in an enterprise organizational chart is used to adjust a size shape color or position etc. of the node or associated link s in a visualization the hierarchical position is said to be visually encoded via the node or link size shape color or position respectively.

For the purposes of the present discussion a link between a first node and a second node may be any association between nodes either graphical and or inherent in the data. For example different nodes positioned on a map in a given region may be considered to be linked by the region despite whether physical connecting lines representing links are shown. Furthermore different nodes shown in different sections in are said to be linked by row and column combination corresponding to different sections of the visualization thereof.

Shape visual attributes are mapped by underlying software to particular values or sub attributes of a first attribute Attribute shown in a legend . Color visual attributes are mapped by underlying software to particular values of a second attribute Attribute . A legend expansion control represents a user option to expand or collapse the legend to hide or reveal contents thereof respectively.

The legend includes a first checkbox adjacent to the name of the first attribute Attribute and a second check box adjacent to the name of the second attribute Attribute . The check boxes represent user options for stacking nodes of the network diagram by the first attribute and or second attribute respectively as discussed more fully below. For example if a user checks the first check box the diagram is transformed in to a so called stacked diagram whereby nodes are stacked by shape and whereby any links connecting the nodes are preserved as discussed more fully below with reference to . Connecting links may be represented via link stacks. In a preferred embodiment the transformation from the initial visualization to another visualization is animated to show how the diagram is being rearranged thereby helping to maintain visual context for the user.

The first attribute may represent for example employee job role where each different node shape represents a different job role. The second attribute may represent for example gender where different colors or shading distinguish between male and female employees. Note that other types and numbers of attributes and sub attributes i.e. attribute values may be employed in a visualization without departing from the scope of the present teachings. Furthermore different types of visualizations other than network diagrams may have their nodes stacked in accordance with user specified node stacking attributes i.e. criteria as discussed more fully below.

For illustrative purposes a zoom slider bar is provided for enabling user control over the scale of the displayed visualization thereby enabling zooming in or zooming out on the visualization . Note that different and or additional user interface controls may be provided such as menus buttons and so on for facilitating implementing various software actions and other functionality without departing from the scope of the present teachings.

The node stacks include a triangle stack which includes all four triangular shaped nodes of the first visualization of as indicated by a first stack label . The numbers of nodes in a stack may be indicated by labels and or by the visual appearance of the height of the stack or via other mechanisms e.g. via a hover layer properties dialog box etc. .

The various values of the first attribute and second attribute are said to represent stacking attributes. For the purposes of the present discussion a stacking attribute may be any characteristic metric or other value or category used to create associations between nodes for grouping nodes into a stack. For example in a network diagram that includes several blue nodes and several red nodes node color may be used as a stacking attribute whereby for example all blue nodes are combined into one stack and all red nodes are combined into another stack. When a user selects a stacking attribute or attributes the user is said to select node stacking criterion or criteria respectively. For example the network diagram is stacked by the stacking attributes associated with the first attribute as indicated by the checked first checkbox .

Hence a diamond stack includes all three diamond shaped nodes of the visualization of . Similarly a square stack includes all five square shaped nodes and a circle stack includes all circular shaped nodes.

Various links connecting the stacks illustrate connections between one or more nodes contained within each stack to one or more nodes contained in another stack such that links are preserved also called promoted during the stacking operation. Each of the links may represent collections of one or more sub links. The number of sub links contained in or represented by a link may also be indicated by a label as discussed more fully below with reference to .

The example second user interface display screen further shows an example drop down menu which may be activated for example by right clicking on a node or node stack or a collection of selected nodes or node stacks such as the circle stack . The drop down menu includes various example user options for facilitating manipulating the visualization triggering software actions and so on. Example user options include a user option to filter the visualization to overlay or overlap different stacks to sort shuffle and merge stacks to display or hide stack labels to flip or reposition a top node of a stack to show additional stack details to drill down to display underlying stack and or node data to change visualization type to display link labels to generate a report based on one or more selected nodes or selected stacks to create a container node from stack nodes i.e. nodes of a stack to revert to a previously displayed visualization to display a graphic representative of data underlying one or more selected stacks and so on.

Selection of one or more of the various user options provided in the example drop down menu may trigger display of additional dialog box es as needed to enable a user to specify additional information. For example selection of a Display Graphic user option may trigger an additional dialog box with user interface controls and fields for enabling a user to specify what type of graphic to display and what information to use in the graphic. An example graphic includes a bar chart as discussed more fully below with reference to .

Similarly user selection of an Expand Stack s user option from the drop down menu may trigger display of an additional dialog box with features for enabling a user to select how a stack should be expanded e.g. whether it should be tiled converted into a filmstrip and so on.

Alternatively such user options shown in the drop down menu may be built into other user interface mechanisms. For example in one implementation a user may employ a computer mouse to click on a stack or may use a touch gesture to press on a stack and then drag or swipe a mouse cursor or finger across the surface of a stack to cause spreading of a stack. Spacing between nodes of an expanded stack may be adjusted by varying the length of the drag or swipe motion across the surface of the display screen .

For the purposes of the present discussion a node stack also simply called stack herein is said to be expanded or unstacked if nodes thereof are tiled spread further separated or the visual appearance of the stack is otherwise altered to reveal additional information or nodes associated with the stack that is not observed when the stack is in the unstacked state.

A stack is said to be flipped through if a top node of a stack is repositioned to reveal another node in the stack. In certain implementations a particular node may be drilled into to display additional information associated with the node. In an example implementation an animation may be employed to rotate the node to illustrate information appearing to be written on the back of a node. The information appearing on the back of a node may be further drilled into. However in such cases the node is said to be rotated rather than flipped.

In general such operations e.g. flipping displaying link information and so on may be triggered via user selection of one or more user options in the drop down menu of and or by other functionality e.g. touch screen functionality afforded by features of the user interface and underlying software. Exact mechanisms and user interface controls for implementing such user options and associated functionality are implementation specific and may vary depending upon the implementation without departing from the scope of the present teachings.

Various example operations applied to the second diagram of result in display of the updated second diagram of . The node stacks of the diagram of correspond to the node stacks respectively of the updated second diagram of .

In the present example embodiment a Flip Top Node user option and a Display Graphic user option have been selected from the drop down menu of and have been applied to the circle stack thereof resulting in display of an updated stack and associated graphic in . The resulting displayed graphic includes for example a bar chart plotting performance information e.g. performance metric values associated with each employee represented by a node of the updated circle stack . Note that other metrics such as salary seniority time on the job or other values associated with nodes may be incorporated into an auxiliary visualization such as a bar chart without departing from the scope of the present teachings. Furthermore visualizations pertaining to one or more nodes in a stack are not limited to bar charts and may include other types of charts graphs diagrams or other visualizations such as pie charts sunburst visualizations and so on.

Note that the top node of the updated stack has changed color to reveal a different underlying node in response to a user Flip Top Node operation applied to the stack of . Similarly the top nodes of the triangle stack and the square stack have had their top nodes flipped relative to the corresponding stacks of .

User selection of the Overlay Stack s option may result in display of an additional dialog box which may have additional user interface controls for enabling a user to specify which stack and or accompanying node or nodes should be overlaid on the original diagram. In the present example embodiment a user has chosen to overlay nodes of the first stack on a representation of the original diagram of . The first stack is said to be overlaid on the representation when connecting lines are shown from the first stack to the original diagram representation to illustrate where nodes of the stack originated from in the original diagram of . This feature facilitates illustrating contextual information which may help reveal important information in underlying data and may help a user to understand interrelationships occurring between nodes in an original diagram.

Note that in certain implementations where the original diagram is very complex selectively stacking nodes and overlaying stacks may reveal otherwise difficult to see phenomena. For example unconnected nodes or excessively connected nodes and or accompanying attributes may become readily visible after stacking or after overlaying a stack on the original diagram.

The N box diagram includes different node groups arranged in different rectangles or squares. The different nodes of each group are color coded in accordance with an attribute such as an impact of loss attribute which is selectable as a stack attribute via a legend via an impact of loss check box . Hence nodes associated with employees that are associated with different categories e.g. low medium or high of impact of loss values will be differently colored and or shaded.

Each of the stack groups represent each group of nodes of after nodes in each group have been stacked by impact of loss. Stacking by impact of loss occurs in response to user selection of the impact of loss check box in the legend .

The stack groups include corresponding node stacks . Each of the stacks represents all employees sharing impact of loss values within the same impact of loss categories in each accompanying stack group .

Hence various node stacking methods discussed herein may be applied to different types of diagrams e.g. to an N box diagram not just network diagrams. Furthermore links e.g. node associating information between nodes need not be represented by physical connecting lines but may be represented for example by sections of a visualization.

A map legend includes various check boxes for enabling stacking of the nodes by various attributes including state expertise level expertise category and job role attributes of employees represented by the nodes . User selection of one or more stacking attribute check boxes may result in stacking of the nodes based on the attributes as discussed more fully below with reference to .

Nodes of the visualization of which may overlap and conceal each other are stacked into various stacks in in accordance with the state in which a node occurs. Hence stacking of nodes may reveal additional otherwise obscured information or patterns such as the number of nodes in a given state which may otherwise be difficult to discern from an original visualization before stacking is applied.

A second step includes providing a first user option such as a check box to specify a first node attribute.

A third step includes grouping nodes e.g. stacking nodes of the first visualization based on the first node attribute resulting in one or more groups of nodes in response thereto.

A fourth step includes adjusting the first visualization to illustrate the one or more groups of nodes while preserving one or more of the one or more links resulting in display of a second visualization in response thereto.

Although the description has been described with respect to particular embodiments thereof these particular embodiments are merely illustrative and not restrictive. For example while various embodiments have been discussed with reference to one or more visualizations illustrating enterprise data embodiments are not limited thereto. In general any type of data that may be organized into nodes associated with different attributes may be illustrated by a visualization and the nodes may be stacked based on underlying attributes without departing from the scope of the present teachings.

Any suitable programming language can be used to implement the routines of particular embodiments including C C Java assembly language etc. Different programming techniques can be employed such as procedural or object oriented. The routines can execute on a single processing device or multiple processors. Although the steps operations or computations may be presented in a specific order this order may be changed in different particular embodiments. In some particular embodiments multiple steps shown as sequential in this specification can be performed at the same time.

Particular embodiments may be implemented in a computer readable storage medium for use by or in connection with the instruction execution system apparatus system or device. Particular embodiments can be implemented in the form of control logic in software or hardware or a combination of both. The control logic when executed by one or more processors may be operable to perform that which is described in particular embodiments.

Particular embodiments may be implemented by using a programmed general purpose digital computer by using application specific integrated circuits programmable logic devices field programmable gate arrays optical chemical biological quantum or nanoengineered systems components and mechanisms may be used. In general the functions of particular embodiments can be achieved by any means as is known in the art. Distributed networked systems components and or circuits can be used. Communication or transfer of data may be wired wireless or by any other means.

It will also be appreciated that one or more of the elements depicted in the drawings figures can also be implemented in a more separated or integrated manner or even removed or rendered as inoperable in certain cases as is useful in accordance with a particular application. It is also within the spirit and scope to implement a program or code that can be stored in a machine readable medium to permit a computer to perform any of the methods described above.

As used in the description herein and throughout the claims that follow a an and the includes plural references unless the context clearly dictates otherwise. Also as used in the description herein and throughout the claims that follow the meaning of in includes in and on unless the context clearly dictates otherwise.

Thus while particular embodiments have been described herein latitudes of modification various changes and substitutions are intended in the foregoing disclosures and it will be appreciated that in some instances some features of particular embodiments will be employed without a corresponding use of other features without departing from the scope and spirit as set forth. Therefore many modifications may be made to adapt a particular situation or material to the essential scope and spirit.

