---

title: Bridge to connect an extended development capability device to a target device
abstract: Techniques are disclosed for development of code for deployment on target devices within native code containers that provide access to native resources on the target devices. The native code containers on the target devices may provide only limited development capabilities. Thus, the disclosed development techniques may make use of a device that offers extended development capabilities in comparison to the native code containers on the target devices. A bridge may be established to connect an extended development capability device to a target device. The disclosed bridge may allow developers to benefit from extended development capabilities, while also enabling certain appropriate features to be tested on the target device in the environment in which they will eventually be used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047404&OS=09047404&RS=09047404
owner: AMAZON TECHNOLOGIES, INC.
number: 09047404
owner_city: Seattle
owner_country: US
publication_date: 20130313
---
As more new and diverse types of computing devices become increasingly popular the development of applications for such devices becomes increasingly challenging. As an example many mobile devices now commonly employ hybrid mobile applications which are a cross between native mobile device applications and web based applications. In particular similar to web based applications hybrid mobile applications may employ a common code base that works across multiple different platforms and or operating systems. Additionally similar to native mobile device applications hybrid mobile applications may interact with a variety of native device resources such as the camera notifications contacts calendar and various communication capabilities. Hybrid mobile applications typically execute the common code base from within a native code container that provides access to the native resources on the mobile device.

Hybrid mobile application functionality may be developed by executing test code directly on mobile devices. This enables for example the hybrid mobile application functionality to interact with native mobile device resources and to be tested in an environment that is similar to the environment in which the final developed functionality will eventually be used. However the native code containers on the mobile devices typically provide only limited capabilities for testing and development of hybrid mobile applications. For example to debug an error resulting from hybrid mobile application test code execution the native code containers often require a developer to repeatedly perform procedures such as insertion of log messages recompilation of code and generation of printouts. Each instance of recompilation of code may take an average of three to four minutes or longer in certain circumstances.

In general this disclosure describes techniques for development of code for deployment on target devices within native code containers that provide access to native resources on the target devices. For example code may be developed for a hybrid mobile application for deployment within native web code containers on mobile devices. The native code containers on the target devices may provide only limited development capabilities. Thus the disclosed development techniques may make use of a device that offers extended development capabilities in comparison to the native code containers on the target devices. An extended development capability device may be for example a desktop or laptop computer executing a full feature web browser. A bridge may be established to connect an extended development capability device to a target device. The disclosed bridge may allow developers to benefit from extended development capabilities while also enabling certain appropriate features to be tested on the target device in the environment in which they will eventually be used.

As an example the disclosed techniques may be employed by initiating the execution of test code on the extended development capability device. The test code may include certain designated bridge instructions which are instructions that are intended for execution on the target device. A test code interception module on the extended development capability device may be employed to identify and intercept the bridge instructions. The test code interception module may then route the bridge instructions to the target device over the established bridge for execution by the target device. The remaining non bridge instructions are not sent over the bridge and are executed locally by the extended development capability device. After the bridge instructions have been executed on the target device results of the execution may be returned back over the bridge to the extended development capability device. Thus the bridge allows the bridge instructions to be executed by the target device while also allowing the remaining non bridge instructions to be executed locally by the extended development capability device.

Although only a single target device is shown in the extended development capability device may be simultaneously bridged to any number of target devices using additional bridges . Once again depending upon the scenarios in which they are employed each of the simultaneously bridged target devices may have few if any common characteristics. For example each of the simultaneously bridged target devices may execute different operating systems and may be distributed by different manufacturers.

Extended development capability device executes an extended capability bridged application while target device executes native code container . As examples extended capability bridged application may be a full feature web browser application while native code container may be a native web code container for a hybrid mobile application. As set forth above hybrid mobile applications may provide advantages such as a common code base that works across multiple different platforms and or operating systems as well as the ability to interact with a variety of native device resources such as the camera notifications contacts calendar and various communication capabilities. For example hybrid mobile applications may employ combinations of common programming languages such as JavaScript cascading style sheets CSS and hypertext markup language HTML . In order to provide such advantages hybrid mobile applications typically execute their common code base from within a native web code container that provides access to the native resources on the mobile device.

Thus while native web code containers may provide certain advantages to hybrid mobile applications they may also limit certain capabilities of the hybrid mobile applications. As an example on many platforms the available native web code containers do not provide equivalent capabilities in comparison to full feature web browsers. This may cause significant complications associated with operations such as debugging of the hybrid mobile applications during the application development process. For example full feature web browsers often allow a particular problem to be debugged by simply setting a breakpoint at a corresponding instruction within the test code. By contrast debugging of the same problem using a native web code container may often require for example generation of log messages at necessary locations recompilation of the necessary code and generation of a printout of the relevant information. All or portions of this process may then need to be repeated as necessary until the problem is corrected with each recompilation process possibly averaging several minutes for completion.

In addition to native code container target device includes a number of native resources . As examples resources may include resources such as the camera notifications contacts calendar and various communication capabilities. In some cases native code container may include functionality that is not developed specifically for target device . For example if native code container is a hybrid mobile application then it may employ a common code base that works across multiple different platforms and or operating systems. Thus while native code container may be capable of using and interacting with resources an interface layer may be required in order to enable such use and interaction. Interface layer may for example enable a web to native abstraction from native code container to native resources . As should be appreciated in some cases interface layer may not be necessary for interaction with any or all of native resources 

As set forth above bridge may be employed to develop functionality that upon completion of the development process may be executed on devices similar to target device . Thus the bridge may allow developers to benefit from the extended development capabilities of the extended development capability device while also enabling certain appropriate features to be tested on the target device in the environment in which they will eventually be used. In some cases the extended development capabilities provided by extended development capability device may be quite significant in comparison to those provided by native code container .

While extended development capability device may offer advantageous testing and development capabilities in comparison to native code container the target device may also be advantageous in the sense that it provides an execution environment that is similar to the environment in which the developed functionality will upon execution eventually be deployed. Thus there may be considerable advantages to being able to test at least a portion of the developed functionality on the target device . For example consider the scenario in which an element of the developed functionality involves the ability to send a text message. While mobile devices are commonly employed to send text messages desktops and laptops are not typically provided with texting functionality. In this scenario bridge may provide the ability to generate and modify test code on extended development capability device while also testing the texting functionality on the target device which may provide an environment similar to that in which the functionality is eventually expected to be used.

Continuing with the example of a text message when execution of the test code reaches a point where text messaging is performed the instructions to generate and send a text message may be sent from the extended development capability device to the target device using bridge . The target device may then attempt execution of the text message and return results of this attempt back to the extended development capability device once again using the bridge . For example if the text message is sent successfully then the success of the attempt may be reported back to the extended development capability device . By contrast if the text message could not be sent then the failure of the attempt may instead be reported back to the extended development capability device .

If a problem or failure is detected with one or more operations at the target device then the extended development capability device may in some cases be used to debug the problematic operations. For example consider the scenario in which a necessary prerequisite to sending a text message is the need to identify a respective network service carrier for the device to which the text message is being sent. The example scenario could include logic to match certain telephone number prefixes with certain carriers. If for example there was a problem with this logic and the carriers were not properly identified then the text message could not be sent. In this and other example scenarios the target device may allow a problem to be detected while the extended development capability device may then provide the ability to debug and find a solution for the detected problem.

As set forth above the extended development capability device may allow extended testing and development features such as for example the use of breakpoints. Continuing once again with the texting example extended development capability device may allow for example breakpoints to be inserted at the portions of code in which number prefixes were matched to certain carriers. By contrast debugging of such a problem at the target device might require multiple log messages recompilations and generations of printouts as set forth above.

Thus bridge enables communications between bridged extended capability application and native code container . As an example bridge may be a transport control protocol TCP socket bridge connection. However bridge may be generated using any appropriate connection that allows instructions or commands and corresponding results or other necessary messages to be communicated between extended capability bridged application and native code container . As should be appreciated bridge need not necessarily provide a direct communication path between bridged application and container . For example communications between application and container may pass through any number of communication processing security and or other additional modules. Network may be any appropriate communications network such as for example a local area network LAN or a wide area network WAN such as the Internet. Bridge may also be disconnected and reconnected any number of times as necessary due to for example device and or network malfunctions or other issues.

Test code includes a number of instructions that may be executed and evaluated in order to verify that the code is successfully performing as intended. As set forth above bridge enables certain desired instructions within test code to be sent to the target device for execution. The instructions that are intended for execution at target device are referred to herein as bridge instructions while the remaining calls that are intended for execution locally on extended capability development device are referred to as non bridge instructions .

Instructions intended for execution by target device may be designated as bridge instructions using for example bridge instruction designation list . In some cases bridge instruction designation list may list a number of specific individual calls. However it is not required that every desired bridge instruction be individually identified in list . For example in some cases bridge instruction designation list may designate bridge instructions based on certain classes objects or other groupings. For example in some cases bridge instruction designation list may include a list of one or more objects. In such cases each instruction that extends from or is otherwise associated with the listed objects may then be designated as a bridge instruction .

In some cases bridge instructions may be identified based on information provided by a service or other entity external to the extended development capability device . For example in one scenario the target device and or the extended development capability device may include a middleware component that is provided by an external service. The middleware component may be remotely updated to provide updated sets of bridge instructions and other updated interfaces for interacting with the target device . Thus the bridge instructions may be provided by an external service without the need for developers to invest the time and effort required to identify and implement the bridge instructions . Additionally in one scenario a target device may be inspected by the middleware component or another component to identify any provided bridge instructions that are not supported by that particular target device . For example if some provided bridge instructions correspond to camera functionality and the particular target device doesn t have a camera then the camera instructions may be designated as non supported instructions. The non supported instructions may then be removed from the set available bridge instructions thereby preventing an attempted execution of the non supported instructions which could potentially fail and break execution of test code . The target device may provide any appropriate information regarding bridge instructions to the extended development capability device . Additionally in some cases an external and or remote entity may possess and or provide access to the target device or associated functionality. Thus it may not be necessary for a particular developer have an actual target device in the developer s possession. This may be particularly advantageous for example when a developer is testing functionality for a large number of different target devices .

In some cases bridge instructions may be designated for multiple types of operations across multiple native resources . For example in addition to the text messaging operations described above bridge instructions may be designated for interacting with the phone camera contacts notifications calendar and or any other type of native resource . In other cases bridge instructions may be designated for interacting with only a particular resource or for performing only a particular type of operation.

Additionally in some cases bridge instructions may be designated for multiple types of devices and or operating systems. For example bridge instructions may be designated for execution on multiple types of devices such as smart phones tablets televisions appliances and other devices. These multiple device types may execute any number of different operating systems from any number of different developers. In other cases bridge instructions may be designated only for specific device types or only for specific operating systems.

In addition to bridge code designation list a proxy designation list may also be employed. As should be appreciated lists and need not necessarily be separate lists and may be stored together in a single table code listing or file and possibly incorporated within or otherwise associated with test code . Proxy designation list identifies one or more proxies for use with each designated bridge instruction . Essentially a proxy includes data that serves as a placeholder for the results of an executed bridge instruction . The temporary nature of proxy is indicated by the dashed line extending from code interception module . The proxy may assist to maintain the stability of local execution and evaluation functionality while the bridge instruction is being executed by the target device . Each proxy may be used until a respective bridge instruction is executed by the target device and the actual results of the bridge instruction are returned back to the extended development capability device over the bridge .

In the example of during execution of test code code interception module may be employed to identify and intercept each designated bridge instruction . In order to perform these operations code interception module may have access to bridge instruction designation list . As should be appreciated code interception module need not necessarily be a distinct module or component and may be in some cases incorporated within or otherwise associated with test code . Generally code interception module routes each identified bridge instruction for transmission over bridge for execution by the target device . On the other hand each non bridge instruction is not intercepted and is executed locally by the extended capability bridged application . Code interception module may also insert a proxy for each identified bridge instruction . Thus code interception module may also have access to proxy designation list .

As set forth above when a bridge instruction is routed over bridge execution of the bridge instruction is attempted by target device . In particular referring back to bridge instruction may be executed by native code container . In many cases execution of the bridge instruction may require interaction with one or more of native resources . If necessary native code container may employ one or more interfaces for interaction with any of the one or more native resources 

Upon execution of a bridge instruction by native code container the results of the execution may be returned to the extended development capability device using bridge . For example if execution of the bridge instruction is completed successfully then results may include an indication of the success of the attempt and any relevant resulting information. By contrast if execution of the bridge instruction could not be successfully completed then results may include a failure message and any relevant resulting information.

After being transmitted over bridge the results may then be received by extended capability bridged application and incorporated as necessary into the code execution process. For example if a proxy is employed to serve as a temporary placeholder for results then the proxy may be removed and substituted with the actual results . Additionally the reception of results may trigger performance of various actions such as for example updating of any associated data values or display of error messages. Furthermore any code that was blocked from execution until completion of the bridge instruction may be unblocked when the results are received.

The designated bridge instructions may include any number of synchronous and or asynchronous instructions. Essentially synchronous bridge instructions may block the execution of test code until the bridge call is executed by the target device and the actual results of the bridge instruction are returned back to the extended development capability device over the bridge . Thus when a synchronous bridge instruction is being executed test code may be blocked from having a subsequent instruction executed. When the results of a synchronous bridge instruction are returned over bridge test code execution may then resume and subsequent instructions may be executed.

By contrast asynchronous bridge instructions do not block execution of test code . Thus when an asynchronous bridge instruction is being executed subsequent calls within test code may also be simultaneously executed. When the results of an asynchronous bridge instruction are returned over bridge they may be incorporated into the test code execution process as necessary. In many cases asynchronous bridge instructions may be preferred over synchronous bridge instructions because the asynchronous bridge instructions do not block code execution and therefore may be more stable with respect to test code execution. For example if a lengthy malfunction occurs at target device that renders the device unable to execute a synchronous bridge instruction then this could result in an extended blockage of test code execution. However while asynchronous bridge instructions may be preferred in some cases both synchronous and asynchronous bridge instructions may be employed and proxies may be generated such that they enable support for both synchronous and asynchronous bridge instructions .

At operation code interception module receives the next instruction within the test code . For example upon the first iteration of operation the first test code instruction may be received and upon the second iteration of operation a subsequent test code instruction may be received. At operation code interception module evaluates the next instruction to determine whether or not it is a bridge instruction . As set forth above a bridge instruction may be identified based on bridge instruction designation list . As also set forth above the bridge instruction designation list may list a number of specific individual calls and or may designate bridge instructions based on certain classes objects or other groupings. For example in some cases bridge instruction designation list may identify an object and each call that extends from or is otherwise associated with the listed object may then be designated as a bridge instruction .

If the received instruction is identified as a bridge instruction then at operation the bridge instruction is processed by the extended development capability device for remote execution at the target device . An example of a procedure for performance of operation is illustrated in and described in detail below. If on the other hand the received instruction is a non bridge instruction then at operation the non bridge instruction is executed locally by the extended development capability device . At operation it is determined whether there are any remaining instructions in test code . If so then the process returns to operation where code interception module receives the next instruction within the test code . If on the other hand there are no remaining instructions then the process is completed at operation .

In greater detail at operation the identified bridge instruction is intercepted for re routing by code interception module . At operation code interception module routes the identified bridge instruction over bridge for execution at the target device . The bridge may be a previously established bridge or if not previously established may be established based on the determination that the instruction is a designated bridge instruction . The bridge may be for example a TCP socket bridge or other appropriate connection that enables the bridge instruction to be transmitted from the extended capability device to the limited capability device for execution. As set forth above after transmission of the bridge instruction over bridge the bridge instruction may be executed by native code container . In many cases execution of the bridge instruction may require interaction with one or more of native resources . If necessary native code container may employ one or more interfaces for interaction with any of the one or more native resources 

At operation code interception module may provide a proxy as a placeholder for the actual results of bridge instruction . The proxy may be identified based on proxy designation list . The proxy may be employed to maintain stability of test code execution while bridge instruction is being executed by the target device .

At operation the results of the bridge instruction execution at the target device are received by extended development capability device over bridge . As set forth above if the bridge instruction is executed successfully then results may include an indication of the success of the attempt and any relevant resulting information. By contrast if the bridge instruction could not be successfully executed then results may include an indication of the failure of the attempt and any relevant resulting information.

At operation proxy is substituted for the actual received results . At operation the results are incorporated as necessary into execution of the test code. For example the reception of results may trigger performance of various actions such as for example updating of any associated data values or display of error messages. Furthermore any operations that were blocked from execution until completion of the bridge instruction may be unblocked when the results are received.

After execution of test code as described for example with respect to above the results of the test code execution may be evaluated by developers or other users to determine the next steps for the development process. In particular if the execution of bridge instructions at the target device resulted in any errors then in some cases the capabilities of extended development capability device may be employed at least in part to debug and correct such errors. For example code breakpoints may be employed on the extended development capability device to debug and correct errors. As part of this process extended development capability device may be used to modify the test code and to re execute the modified test code as desired.

Upon completion of the development process the developed functionality may be made available to consumers or other users via one or more communications networks or other distribution mechanisms. As examples functionality may be downloaded by multiple devices via a local area network LAN or a wide area network WAN such as the Internet. In particular functionality for hybrid mobile applications is commonly distributed via the Internet from a server to a client application on a mobile device.

As set forth above the disclosed techniques may employ the use of an extended development capability device in communication with a target device. Some example embodiments for the extended development capability device and or the target device will now be described in detail. In particular depicts an embodiment of an exterior of a computing device . It should be understood that this is merely an example for discussion and that a number of additional components configurations assemblies and combinations are possible as known in the art. Computing device can be any one of a variety of forms such as a desktop computer or laptop computer a tablet computing device a cell phone a handheld computing device or any other form of computing device. Computing device can include a housing . The housing can be made of any material or combinations of materials such as various types of plastic metal glass and combinations thereof that is suitable to house the components of device . Computing device can also include a display that can display images text any other type of visual information and any combination thereof. Display can also be a touchscreen display that is capable of sensing the presence and location of one or more touches of the display . A touchscreen display can sense touches by a user such as a touch by a finger or a hand and touches by objects such as a stylus. Display can be part of a user interaction system of the computing device .

Computing device can also include one or more hard buttons integrated into housing . In one embodiment the one or more hard buttons can include a single button such as a home button or a power button. In another embodiment the one or more hard buttons can include a small set of buttons such as a power button a home button and a back button. In yet another embodiment the one or more hard buttons can include a large set of buttons such as a full QWERTY keyboard a keypad and the like. The one or more hard buttons can be part of the user interaction system of the computing device .

Computing device can also include a speaker configured to emit sounds and a microphone configured to receive sounds. In the embodiment where computing device is a cell phone speaker and microphone can be used to carry on a telephone call. In one embodiment speaker can be configured to play sounds associated with graphics displayed on display such as during play of audiovisual material on computing device . In another embodiment microphone can receive audio sounds which the computing device can interpret as user inputs. In addition while not depicted in computing device can also include an audio port which can be connected to an external microphone and or an external speaker or speakers. Computing device can send and receive audio signals via the audio port and interpret the received audio signals via the audio port just as it would interpret audio signals generated from sounds received by the microphone .

Computing device can also include one or more optical devices . In one embodiment an optical device can include an optical sensor such as an infrared sensor a visible light sensor and or any device that can sense light and or electromagnetic energy. The detection of light and or electromagnetic energy can be used by the computing device to control components of the computing device such as a level of light emitted by a backlight of display illumination of one or more hard keys and any other aspect of computing device . In another embodiment an optical device can include an image capturing device such as a digital camera. An image capturing device can include any device configured to capture an image such as a complementary metal oxide semiconductor CMOS active pixel sensor APS and a charged coupled device CCD . Images captured by one or more optical devices can be stored by the computing device as individual image or as a series of images in a video. Individual images and or video images can be processed by computing device and interpreted as user inputs. While depicts one optical device pointing in the same direction as the display it is possible for computing device to have any number of optical devices and it is possible for one or more optical devices to be pointed in other directions such as a rear facing camera pointing in the opposite direction of display .

Computing device can include at least one power source . Power source can provide power to any or all of the other components in computing device . As depicted in power source can be connected to and provide power to each of processor memory display network interface and user interface . Power source can be any type of power source such as one or more disposable batteries a rechargeable battery and the like. In the embodiment where computing device is a portable device such as a laptop computer a tablet computer a cell phone a hand held computer and the like the power supply may need to provide power for a period of time between recharging of the power source . In other embodiments computing device can be a desktop computer workstation server or other non portable device that is typically connected to an external power source any time that computing device is active. With such computing devices certain elements such as a display user interface components and the like may also be external to the computing device.

As set forth above after completion of the debugging process developed functionality may be distributed to one or more customers or other users operating one or more target devices. Some example embodiments for a computing environment that may be used to distribute the developed functionality to target devices will now be described in detail. In particular illustrates an example computing environment in which the embodiments described herein may be implemented. is a diagram schematically illustrating an example of a data center that can provide computing resources to users and which may be referred herein singularly as user or in the plural as users via user computers and which may be referred herein singularly as computer or in the plural as computers via a communications network . Data center may be configured to provide computing resources for executing applications on a permanent or an as needed basis. The computing resources provided by data center may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as virtual machine instances. The instances may be configured to execute applications including Web servers application servers media servers database servers and the like. Data storage resources may include file storage devices block storage devices and the like.

Each type or configuration of computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. Customers may choose to allocate a number of small processing resources as Web servers and or one large processing resource as a database server for example.

Data center may include servers which may be referred herein singularly as server or in the plural as servers that provide computing resources available as virtual machine instances which may be referred herein singularly as virtual machine instance or in the plural as virtual machine instances . The virtual machine instances may be configured to execute applications including Web servers application servers media servers database servers and the like. Other resources that may be provided include data storage resources not shown and may include file storage devices block storage devices and the like.

The availability of virtualization technologies for computing hardware has provided benefits for providing large scale computing resources for customers and allowing computing resources to be efficiently and securely shared between multiple customers. For example virtualization technologies such as those provided by VMW or other virtualization systems may allow a physical computing device to be shared among multiple users by providing each user with one or more virtual machine instances hosted by the physical computing device. A virtual machine instance may be a software emulation of a particular physical computing system that acts as a distinct logical computing system. Such a virtual machine instance provides isolation among multiple operating systems sharing a given physical computing resource. Furthermore some virtualization technologies may provide virtual resources that span one or more physical resources such as a single virtual machine instance with multiple virtual processors that spans multiple distinct physical computing systems.

Referring to communications network may for example be a publicly accessible network of linked networks and possibly operated by various distinct parties such as the Internet. In other embodiments communications network may be a private network such as for example a corporate or university network that is wholly or partially inaccessible to non privileged users. In still other embodiments communications network may include one or more private networks with access to and or from the Internet.

Communication network may provide access to computers . User computers may be computers utilized by users or other customers of data center . For instance user computer or may be a server a desktop or laptop personal computer a tablet computer a wireless telephone a personal digital assistant PDA an e book reader a game console a set top box or any other computing device capable of accessing data center . User computer or may connect directly to the Internet e.g. via a cable modem or a Digital Subscriber Line DSL . Although only two user computers and are depicted it should be appreciated that there may be multiple user computers.

User computers may also be utilized to configure aspects of the computing resources provided by data center . In this regard data center might provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on user computer . Alternatively a stand alone application program executing on user computer might access an application programming interface API exposed by data center for performing the configuration operations. Other mechanisms for configuring the operation of the data center including deploying updates to an application might also be utilized.

Servers shown in may be standard servers configured appropriately for providing the computing resources described above and may provide computing resources for executing one or more applications. In one embodiment the computing resources may be virtual machine instances . In the example of virtual machine instances each of the servers may be configured to execute an instance manager or which may be referred herein singularly as instance manager or in the plural as instance managers capable of executing the virtual machine instances . The instance managers may be a virtual machine monitor VMM or another type of program configured to enable the execution of virtual machine instances on server for example. As discussed above each of the virtual machine instances may be configured to execute all or a portion of an application.

It should be appreciated that although the embodiments disclosed above discuss the context of virtual machine instances other types of implementations can be utilized with the concepts and technologies disclosed herein. For example the embodiments disclosed herein might also be utilized with computing systems that do not utilize virtual machine instances.

In the example data center shown in a router may be utilized to interconnect the servers and . Router may also be connected to gateway which is connected to communications network . Router may manage communications within networks in data center for example by forwarding packets or other data communications as appropriate based on characteristics of such communications e.g. header information including source and or destination addresses protocol identifiers etc. and or the characteristics of the private network e.g. routes based on network topology etc. . It will be appreciated that for the sake of simplicity various aspects of the computing systems and other devices of this example are illustrated without showing certain conventional details. Additional computing systems and other devices may be interconnected in other embodiments and may be interconnected in different ways.

It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. These network topologies and devices should be apparent to those skilled in the art.

It should also be appreciated that data center described in is merely illustrative and that other implementations might be utilized. Additionally it should be appreciated that the functionality disclosed herein might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art. It should also be appreciated that a server gateway or other computing device may comprise any combination of hardware or software that can interact and perform the described types of functionality including without limitation desktop or other computers database servers network storage devices and other network devices PDAs tablets cellphones wireless phones pagers electronic organizers Internet appliances television based systems e.g. using set top boxes and or personal digital video recorders and various other consumer products that include appropriate communication capabilities. In addition the functionality provided by the illustrated modules may in some embodiments be combined in fewer modules or distributed in additional modules. Similarly in some embodiments the functionality of some of the illustrated modules may not be provided and or other additional functionality may be available.

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computers or computer processors. The code modules may be stored on any type of non transitory computer readable medium or computer storage device such as hard drives solid state memory optical disc and or the like. The processes and algorithms may be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of non transitory computer storage such as e.g. volatile or non volatile storage.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition certain methods or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial in parallel or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

It will also be appreciated that various items are illustrated as being stored in memory or on storage while being used and that these items or portions of thereof may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software modules and or systems may execute in memory on another device and communicate with the illustrated computing systems via inter computer communication. Furthermore in some embodiments some or all of the systems and or modules may be implemented or provided in other ways such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the modules systems and data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The systems modules and data structures may also be transmitted as generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission media including wireless based and wired cable based media and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly the present invention may be practiced with other computer system configurations.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

While certain example embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions disclosed herein. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein.

