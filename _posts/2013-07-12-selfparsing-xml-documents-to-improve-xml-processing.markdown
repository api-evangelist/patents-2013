---

title: Self-parsing XML documents to improve XML processing
abstract: A method, computer program product, and system for pre-parsing a large XML document to enable faster processing, comprising providing an XML document that is idle or is being generated, pre-parsing the XML document to generate one or more indices associated with the XML document, storing the indices in the XML document, and storing the XML document in a storage area. At the time of processing the XML document, an XML consumer is able to process the XML document more quickly than normal by using the one or more indices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09111009&OS=09111009&RS=09111009
owner: International Business Machines Corporation
number: 09111009
owner_city: Armonk
owner_country: US
publication_date: 20130712
---
The present application claims priority to U.S. Nonprovisional application Ser. No. 13 114 339 filed 24 May 2011 and entitled Self Parsing XML Documents to Improve XML Processing the disclosure of which is incorporated by reference in its entirety.

The present invention relates generally to XML processing and more particularly to self parsing XML documents in order to improve XML document processing.

The eXtensible Markup Language XML is widely used in web services messaging systems databases and document processing. XML provides a powerful and flexible tool for data exchange and because XML documents are text based they are relatively easy to read and thus use. However XML documents are relatively verbose and large e.g. file sizes greater than one gigabyte and thus the processing of XML documents is often a performance bottleneck in computer systems and applications. Proposed solutions to these processing problems include upgraded hardware e.g. faster processors and software optimizations such as efficient parsers and file compression however each of these attempted solutions has shortcomings. Streaming XML parsing is sometimes used to process large XML documents however streaming parsers are generally limited in power and flexibility compared to other parsers such as tree based parsers and provide only a limited view of the infoset state at one location at a time in the XML document.

Accordingly embodiments of the present invention include a method computer program product and a system for pre parsing a large XML document to enable faster processing comprising providing an XML document that is not being parsed or executed pre parsing the XML document to generate an index associated with the XML document wherein the index is capable of being used by an XML consumer to process the XML document storing the index in the XML document and storing the XML document in a storage area.

The above and still further features and advantages of embodiments of the present invention will become apparent upon consideration of the following detailed description thereof particularly when taken in conjunction with the accompanying drawings wherein like reference numerals in the various figures are utilized to designate like components.

The present embodiments provide self parsing XML documents that exhibit improved XML processing. For example an XML document is pre parsed to create one or more indices associated with the XML document either at the time of document creation or at a later time when the XML document is idle e.g. stored in a database or file system and not being used. The indices may be stored inside the XML document or separately from it. When it is time for an XML consumer to process the XML document the XML consumer uses the index or indices associated with the XML document to assist in the processing thus significantly reducing the time and resources needed to parse the XML document while enhancing user response time. The present embodiments thus provide significant performance improvements particularly if the XML documents are large e.g. file sizes greater than one gigabyte .

Referring now to the Figures an exemplary computer system according to embodiments of the present invention is illustrated in . The exemplary computer system comprises multiple processing nodes each of which is capable of independently processing an XML document or a portion thereof. The system may be a client server system database system virtual desktop system distributed computer system cloud based system clustered database data center storage area network SAN or in any other suitable system for example in a system designed for the provision of Software as a Service SaaS such as a cloud data center or hosted web service.

The depicted system further comprises one or more user clients which allow a user to interface with the system for example by entering data into the system retrieving an XML document or querying a database. Although user clients are shown as interacting with XML server node it is understood that user clients may interact with multiple nodes and that any node may act as the server or coordinator for a particular application or process. Client devices which are described further with respect to may be any conventional or other computer system or device such as a thin client computer terminal or workstation personal desktop computer laptop or netbook tablet cellular phone networked television or other device capable of acting as a client in the described system.

Each of the processing nodes comprises a processor and storage area where for example XML documents or other data objects may be stored. Processing node comprises an XML server which comprises a multi core processor having four cores . Although the processing nodes are shown as each having one processor it should be understood that each node may comprise multiple processing partitions each of which may comprise multiple processors. XML server also comprises memory having a pre parser and scheduler resident therein XML document storage area and may also comprise index storage area depending on whether indices are stored with their associated XML documents or not in a particular implementation of the present embodiments.

Processors are for example data processing devices such as microprocessors microcontrollers systems on a chip SOCs or other fixed or programmable logic that executes instructions for process logic stored in respective memory not shown . Each processor may be a multi processor and have multiple CPUs multiple cores multiple dies comprising multiple processors etc. Because the XML processing in system may be divided among the multiple nodes multiple processors may be used to satisfy requests for information e.g. data retrieval or update requests.

Storage areas memory XML document storage area and index storage area may be implemented by any quantity of any type of conventional or other memory or storage device and may be volatile e.g. RAM cache flash etc. or non volatile e.g. ROM hard disk optical storage etc. and include any suitable storage capacity. Each storage area may be for example one or more databases implemented on a solid state drive or in a RAM cloud. Storage areas and memory may be part of one virtual address space spanning multiple primary and secondary storage devices as may collective storage areas . Data in the system e.g. documents files emails tables indexes etc. is stored in the storage areas for example a particular database table may be stored in multiple storage areas on one or more nodes .

User clients nodes processors pre parser and scheduler may each be implemented in the form of a processing system or may be in the form of software. They can each be implemented by any quantity of conventional or other computer systems or devices e.g. computer terminals personal computers of all types e.g. including tablets laptops netbooks etc. or cellular telephones personal data assistants of all types and may include any commercially available operating systems for all types of computer hardware and any commercially available or custom software e.g. browser software communications software word processing software etc. . These systems may include processors memories e.g. RAM cache flash ROM solid state hard disk etc. internal or external communications devices e.g. modem network adapter etc. I O interfaces output devices e.g. displays printers etc. and input devices e.g. physical keyboard touch screen mouse trackpad microphone for voice recognition etc. . If embodied in software e.g. as a virtual image they may be available on a recordable medium e.g. magnetic optical floppy DVD CD other non transitory medium etc. or in the form of a carrier wave or signal for downloading from a source via a communication medium e.g. bulletin board network LAN WAN Intranet Internet mobile wireless etc. .

It is understood that any of the various components of the system may be local to one another or may be remote from and in communication with one or more other components via any suitable communication means or devices for example a network such as a WAN a LAN Internet Intranet mobile wireless etc. In one embodiment the processing nodes and user clients are communicatively connected to each other for example via network connections which represent any hardware and or software configured to communicate information via any suitable communications media e.g. WAN LAN Internet Intranet wired wireless etc. and may include routers hubs switches gateways or any other suitable components in any suitable form or arrangement.

The computer system may include additional servers clients and other devices not shown and individual components of the system may occur either singly or in multiples. For example there may be more than four nodes in the system more than one multi core processor in the system more than four cores in the multi core processor and any of the processors may themselves be multi processors and have multiple CPUs multiple cores multiple dies comprising multiple processors etc. Also for example there may be more than one XML server in the system the XML server may have a single core processor instead of the depicted multi core processor or for example the functionality of various components e.g. pre parser and scheduler may be combined into a single device or split among multiple devices.

Referring to an example of a client device that may be used in system is depicted. Client device comprises one or more processors a network interface unit memory display rendering hardware and input output interface . Resident in memory are operating system XML client application and optionally other applications . The client application provides an interface such as a graphical user interface GUI for a user of the client device to interact with the XML server . Processor is for example a data processing device such as a microprocessor microcontroller system on a chip SOCs or other fixed or programmable logic that executes instructions for process logic stored in memory . Network interface unit enables communication to the computer system . Memory may be implemented by any quantity of any type of conventional or other memory or storage device and may be volatile e.g. RAM cache flash etc. or non volatile e.g. ROM hard disk optical storage etc. and include any suitable storage capacity. Display rendering hardware may be a part of processor or may be e.g. a separate Graphics Processor Unit GPU .

I O interface enables communication between display device input device s and output device s and the other components of client device and may enable communication with these devices in any suitable fashion e.g. via a wired or wireless connection. The display device may be any suitable display screen or monitor capable of displaying information to a user of a client device for example the screen of a tablet or the monitor attached to a computer workstation. Input device s may include any suitable input device for example a keyboard mouse trackpad touch input tablet touch screen camera microphone remote control speech synthesizer or the like. Output device s may include any suitable output device for example a speaker headphone sound output port or the like. The display device input device s and output device s may be separate devices e.g. a monitor used in conjunction with a microphone and speakers or may be combined e.g. a touchscreen that is a display and an input device or a headset that is both an input e.g. via the microphone and output e.g. via the speakers device.

Referring now to reference numeral generally designates a flow chart depicting an exemplary generation of an index associated with an XML document according to an embodiment of the present invention. This process may be carried out by any suitable server client or other device capable of generating or producing an XML document herein called the generator and may be carried out by e.g. the multi core processor or pre parser of one of the processors of or any other device etc.

In step the generator receives or is provided with optimum XML document processing parameters which comprise an optimum document size S of the XML document. This size S is determined e.g. predetermined in any suitable fashion by any suitable component of system and may be e.g. an optimum partition size an optimum document size for a parallel processor an optimum size based on the average processing capacity of the processors present in a particular system etc. The generator does not need to know any details about the number or type of the eventual consumers of the XML document the XML consumers and may operate with a general directive such as an optimum document size S of e.g. 1 gigabyte GB . The optimum document size S may be any suitable size and may be e.g. one gigabyte five gigabytes ten gigabytes 100 gigabytes etc. For ease of description the present embodiments will be described with reference to an optimum document size S of one gigabyte however it is understood that the present embodiments are not limited to this size.

In step the generator begins to generate the XML document and keeps track of the size of the XML document as it is generated. In step the generator determines if the XML data added to the XML document is greater than size S and if not proceeds to step and stores the XML document without generating an index at this time. If yes then the generator in step generates one or more indices associated with the XML document for example by pre parsing the XML document cycles back to step to continue generating the XML document and then again in step determines if the added XML data is greater than S. The one or more indices may be stored with or in the associated XML document or separately from it as shown by optional step . If stored separately then the indices are retrieved from a storage repository when it is time to process the XML document. After step or step if present the process ends with respect to this XML document.

Referring now to reference numeral generally designates a flow chart depicting a process for generating an XML index associated with an already existing XML document according to an embodiment of the present invention. This process may be carried out by a generator such as described with respect to or may be carried out e.g. by the pre parser . Although the process is described below with reference to the pre parser it is understood that this is the description of a particular embodiment and in other embodiments a different generator may carry out process .

Process may be initiated in any suitable manner for example by an XML consumer being instantiated by the generation of an XML document by the receipt of a request from a particular application or system module communicating with XML server etc. In one embodiment the scheduler instructs the pre parser to perform the process for example because a predetermined time interval has passed a certain threshold of XML consumer activity has been passed or the like.

In step the pre parser identifies a stored XML document that has a size greater than optimum document size S. The XML document may be stored in any suitable storage area e.g. storage area . In step the pre parser determines if the XML document is idle e.g. is not being parsed executed or otherwise used at this point in time. If yes the pre parser proceeds to step but if not idle then the process ends for this XML document . In step the pre parser determines if the XML document already has an associated index and if yes then the process ends for this XML document . If not then in step the pre parser retrieves the XML document from the storage area and then in step generates one or more indices associated with the XML document for example by pre parsing the XML document and then in step stores the indices either in the XML document or separately from the XML document in e.g. XML document storage or index storage area . After step the process ends with respect to this XML document.

Referring now to a portion of an example XML document is depicted before item and after item its associated XML index has been generated according to an embodiment of the present invention. In the depicted embodiment the index is stored in the XML document e.g. inside a character data CDATA section such as a CDATA section at the start of the document e.g. after the start tag or the root node or it may be embedded in a specialized tag such as that may be e.g. present at the head of the XML document so that it is easily fetched by an XML consumer. XML consumers that utilize the present embodiments are able to find and utilize the indices while other XML consumers may safely ignore the index information e.g. by treating it as any other comment. If there is more than one index associated with a particular XML document then one or more of the indices may be stored in the XML document and one or more other indices may be stored separately from the XML document or all indices may be stored in the same place e.g. in the XML document .

Referring now to alternative indices that may be associated with an XML document according to alternative embodiments of the present invention are shown. depicts a logical representation of the association of the generated index and the XML node in the sample XML document . depicts a logical representation of the association of generated XML index ranges for the corresponding XML nodes in sample XML document .

The index may comprise information such as unique keys within an XML node key ranges for a set of XML nodes etc. For example the index may include information such as first GB of XML data is about attributes x y second GB of XML data is about attributes m n etc. . The index may comprise the start and end location of each CDATA section in the XML document size information e.g. average minimum maximum etc. of sub trees rooted at different positions in the XML document etc. The index may also comprise set information about the XML document for example one or more of the following the start location of the sub tree rooted immediately below the root node or some other node of interest in the XML document the XPath of the root of this sub tree and the number of sub tree information present in the set. The sub trees are selected such that they divide the XML document into approximately equal sub divisions. For example the index may comprise the start locations of one or more nodes that are evenly spaced throughout the XML document.

Referring now to reference numeral generally designates a flow chart depicting the processing of an XML document using an index associated with an XML document according to an embodiment of the present invention. This process may be carried out by any suitable server client or other device capable of processing an XML document herein called the system and may be carried out by e.g. the XML server multi core processor or pre parser of one of the processors of an XML consumer or any other device etc. In one embodiment the process is carried out by an XML consumer.

In step the system receives a request to process an XML document and in step retrieves the XML document for example from XML document storage area or as input from another device or in any other suitable fashion. If necessary e.g. the index is not stored inside the XML document the system in step retrieves the index or indices associated with the XML document for example from index storage area or from any other suitable source. In step the system analyzes the index or indexes and uses the information therein to process the XML document. The process then ends with respect to this XML document.

Referring now to reference numeral generally designates a flow chart depicting the parallel processing of an XML document using an index associated with an XML document according to an embodiment of the present invention. This process may be carried out by any suitable server client or other device capable of processing an XML document herein called the system and may be carried out by e.g. the XML server multi core processor or pre parser of one of the processors of an XML consumer or any other device etc. In one embodiment the process is carried out by the XML server .

In step the system receives a request to process an XML document and in step retrieves the XML document for example from XML document storage area or as input from another device or in any other suitable fashion. If necessary e.g. the index is not stored inside the XML document the system in step retrieves the index or indices associated with the XML document for example from index storage area or from any other suitable source. In step the system determines the number N of XML consumers available to process the XML document. In step the system analyzes the index or indices and uses the information therein to select a partition node e.g. customers customer and in step generates N partitions which in step are processed in parallel by the XML consumers. The process then ends with respect to this XML document.

An XML consumer may be hardware e.g. a server client processor or other device or software e.g. an application task thread or portion thereof that independently consumes or processes XML e.g. accepts an XML object as input. For example an Extract Transform Load ETL process that extracts data from XML documents for storage in a database e.g. the IBM WebSphere DataStage XML pack WebSphere and DataStage are trademarks of International Business Machines Corporation may be considered an XML consumer. Also for example in the exemplary system of each node or each processor may be considered as an XML consumer because each node is capable of independently processing XML documents. Or for example the multi core processor may be considered as comprising four XML consumers the cores because each core is capable of independently processing XML documents.

The XML consumer may comprise a parser which may be any suitable parser capable of processing XML documents according to the present embodiments. The parser may comprise a custom or pre existing Application Programming Interface API for XML processing. The API may be e.g. a tree based API such as a Document Object Model DOM API an event based parser such as a Simple API for XML SAX API a stream oriented streaming API such as Expat or Streaming API for XML StAX an API for XML data binding such as the Java Architecture for XML Binding JAXB or any other suitable API. The parser may comprise multiple parsing interfaces for example the Java API for XML Processing JAXP comprises a DOM interface a SAX interface and a StAX interface and the Microsoft XML Core Services MSXML comprises DOM and SAX interfaces.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable medium may be for example but is not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a solid state disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device a phase change memory storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages e.g. an object oriented programming language such as Java Smalltalk C or the like or a procedural programming language such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

It is to be understood that the software for the computer systems of the present invention embodiments may be implemented in any desired computer language and could be developed by one of ordinary skill in the computer arts based on the functional descriptions contained in the specification and flow charts illustrated in the drawings. By way of example only the software may be implemented in the C C Python Java or PHP programming languages. Further any references herein of software performing various functions generally refer to computer systems or processors performing those functions under software control.

The computer systems of the present invention embodiments may alternatively be implemented by any type of hardware and or other processing circuitry. The various functions of the computer systems may be distributed in any manner among any quantity of software modules or units processing or computer systems and or circuitry where the computer or processing systems may be disposed locally or remotely of each other and communicate via any suitable communications medium e.g. LAN WAN Intranet Internet hardwire modem connection wireless etc. .

Aspects of the present invention are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

A processing system suitable for storing and or executing program code may be implemented by any conventional or other computer or processing systems preferably equipped with a display or monitor a base e.g. including the processor memories and or internal or external communications devices e.g. modem network cards etc. and optional input devices e.g. a keyboard mouse or other input device . The system can include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the system to become coupled to other processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems method and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometime be executed in the reverse order depending on the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

