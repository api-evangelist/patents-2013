---

title: Building conversational understanding systems using a toolset
abstract: Tools are provided to allow developers to enable applications for Conversational Understanding (CU) using assets from a CU service. The tools may be used to select functionality from existing domains, extend the coverage of one or more domains, as well as to create new domains in the CU service. A developer may provide example Natural Language (NL) sentences that are analyzed by the tools to assist the developer in labeling data that is used to update the models in the CU service. For example, the tools may assist a developer in identifying domains, determining intent actions, determining intent objects and determining slots from example NL sentences. After the developer tags all or a portion of the example NL sentences, the models in the CU service are automatically updated and validated. For example, validation tools may be used to determine an accuracy of the model against test data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311298&OS=09311298&RS=09311298
owner: Microsoft Technology Licensing, LLC
number: 09311298
owner_city: Redmond
owner_country: US
publication_date: 20130621
---
Conversational understanding CU systems are used for a variety of different applications. For example CU systems have been developed to allow users to search for content buy items obtain directions and the like. The CU development process uses experts such as scientists and computational linguists in each step of the CU building process. For example experts are used in the labeling of the data used when creating a CU application.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Developers may build Conversational Understanding CU systems with the aid of assets and tools that are available in a CU service or platform. The tools and assets are provided to allow developers to enable applications for CU and to interact with and extend the CU service. The tools include a variety of different tools such as but not limited to labeling tools training tools validation tools and the like. The tools may be used to select coverage from existing domains extend the coverage of one or more domains as well as to create new domains in the CU service. For example a developer may select one or more Application Programming Interfaces APIs from one or more existing domains e.g. weather finance news sports . . . in the CU service to include in an application. A developer may provide example Natural Language NL sentences that are analyzed by the tools to assist the developer in labeling data that is used to update the models in the CU service. For example the tools may assist a developer in identifying domains determining intent actions determining intent objects and determining slots from example NL sentences. The tools automatically determine possible labels for the example NL sentences and allow the user to create new domains intent actions intent objects and slots. For example the tools may be used by a developer to add their own tags for intent and slots or select automatically determined tags. After the developer tags all or a portion of the example NL sentences the models in the CU service are automatically updated and validated. For example validation tools may be used to determine an accuracy of the model against test data.

Referring now to the drawings in which like numerals represent like elements various embodiment will be described.

As illustrated system includes Conversational Understanding CU service development manager Application Programmer Interfaces APIs models data labeling tools training tools validation tools application and touch screen input device .

Generally Natural Language Understanding NLU in a goal oriented CU service such as CU service is directed at identifying the domain s and intent s of the user as expressed in natural language NL and to extract associated arguments or slots. For example in an airline domain users often request flight information e.g. I want to fly to Boston from New York next week . In the movie domain where users often search for movies using natural language and play them with natural language commands there are many different slot types e.g. movie star movie release date movie rating and the like . Traditional training of NLU systems uses queries that are manually labeled domain intent and slots by experts or automatically labeled and checked by an expert.

Development manager is configured to provide tools that assist a developer in developing and building applications to interact with CU service . The tools include a variety of different tools such as but not limited to labeling tools training tools validation tools and the like.

The different tools may be used to select coverage from existing domains extend one or more domains as well as to create new domains for interacting with a CU service. For example a developer may select one or more Application Programming Interfaces APIs from one or more existing domains e.g. weather finance news sports . . . in CU service that are accessed by an application. Generally a domain is an area that is associated with a set of actions e.g. movie domain music domain book domain game domain flight domain . . . for which the CU service is trained to understand. Domains are typically related to a specific area but may also include more than one area. A developer may also extend a domain or create a new domain in CU service using the tools.

According to an embodiment for each domain that is added to a CU service a fixed number of existing models is updated to reflect the newly added domain. According to an embodiment the models include a domain model an intent action model an intent object model and a slot model. According to another embodiment new models may be created when a new domain is added.

Data includes data relating to creating and enabling an application for Conversational Understanding. According to an embodiment the application interacts with CU service . For example data may include training data that is used to train the models of CU service one or more schemas relating to CU service example data e.g. example NL sentences used to extend an existing domain or create a new domain in CU service and the like. According to an embodiment data such as training data can be shared across domains and intents. For example training data for intent actions may be common across a variety of different domains.

Labeling tools may be used by the developer to assist in labeling the data for the desired domains intents and slots. For example the labeling tools may be used by a developer to add their own tags for intent and slots. A developer may provide example NL sentences that are analyzed by the labeling tools to assist the developer in determining what existing domains intent actions intent objects and slots to use as well as how to incorporate additional coverage into CU service . Labeling tools automatically determine possible labels for the example NL sentences and allow the user to create new domains intent actions intent objects and slots. For example the tools may be used by a developer to add their own tags for intent and slots or select automatically determined tags. The labeling tools may use domain detector intent action detector intent object detector and slot tagging component .

Domain detector identifies the domains from different NL sentences. For example a developer may provide example NL sentences that they would like coverage for in the CU service. Domain detector may identify a single domain or multiple domains from the examples. For example domain detector may identify both a movie domain and a social domain from one example NL sentence and identify a movie domain from another example NL sentence. The domains that are detected from the examples may or may not already be supported by CU service . The results of domain detector may be displayed in graphical user interface GUI .

Intent action detector is configured to predict the intent action for the current example NL sentence. An intent action is the action to be performed e.g. find post play buy . . . in the example NL sentence. For example intent action detector may predict the intent action for a current NL sentence to be a get action a find action a post action a play action and the like. The predicted intent action may be displayed to the developer in GUI to determine if the predicted intent action is the desired action.

For each determined intent action one or more intent objects are identified by intent object detector . An intent object is an object that relates to that determined intent action. The intent object is the object of the determined intent action e.g. movie picture item . . . . The results of intent object detector may be displayed in graphical user interface GUI . According to an embodiment the intent i.e. the combination of the intent action and intent object is determined from the current example NL sentence.

Slot tagging is performed by slot tagging component using the determined domains intent actions and intent objects. Generally slot tagging identifies what slots are associated with the words of a NL sentence. The example NL sentences may be automatically tagged using the predictions and then corrected by the developer when determined. For example a developer may use GUI to change the tagging. The results of slot tagging component may be displayed in graphical user interface GUI .

Training tools include different tools that can be used to update the models of CU service . For example a developer may select a training tool to update one or more of the models with additional training data.

Validation tools may be used by a developer to determine the accuracy of the updated models. For example the validation tools may be used to compare the results that are obtained using the models with expected results. The validation tools may also be used by the developer to see if individual examples are processed correctly. The results may be corrected e.g. by changing labels when the validation tools indicate that the results are not correct.

In order to facilitate communication with the development manager one or more callback routines may be implemented. According to an embodiment application program is a multimodal application that is configured to receive speech input and input from a touch sensitive input device or other input devices. For example voice input keyboard input e.g. a physical keyboard and or SIP video based input and the like. Application program may also provide multimodal output e.g. speech graphics vibrations sounds . . . . Development manager may provide information to from application in response to user input e.g. speech gesture . For example a user may say a phrase to identify a task to perform by application e.g. selecting a movie buying an item identifying a product . . . . Gestures may include but are not limited to a pinch gesture a stretch gesture a select gesture e.g. a tap action on a displayed element a select and hold gesture e.g. a tap and hold gesture received on a displayed element a swiping action and or dragging action and the like. Gestures may also include optically captured gestures such as a wave gesture a scroll gesture a guide gesture and the like. For example a device such as MICROSOFT KINECT may be used to detect gestures.

System as illustrated comprises a touch screen input device that detects when a touch input has been received e.g. a finger touching or nearly teaching the touch screen . Any type of touch screen may be utilized that detects a user s touch input. More details are provided below.

As illustrated shows graphical user interface GUI that includes a current NL example sentence a domain section an intent action section an intent object section and a slot section.

According to an embodiment the CU service includes a set of models including a domain model one or more intent models and a slot model that are trained for one or more domains. For purposes of explanation the following example relates to a CU service that is trained for four different domains including a Game domain a Movie domain a Music domain and a Generic Commands domain. The data that is used to train the models for the CU service is annotated. As discussed above labeling tools can be used by a developer to assist in labeling the data used to update the models.

In the current example a developer has submitted example NL sentences that relate to sports and possibly other domains. Generally the example NL sentences are sentences that are illustrative of how a user would interact with the application being developed. For example in a sports application the domains may include information that relates to a Sports domain a Weather domain a Movie domain a Generic Commands domain and the like.

Each of the example NL sentences submitted by the developer can be processed by labeling tools. Additional NL sentences may also be automatically generated using the example NL sentences. For example the example NL sentences may be rephrased using a sentence rephrasing tool that automatically generates an enriched list of sentences which contain different ways of expressing the same meaning as the example NL sentences.

Domain section shows results from running a domain detector on example NL sentence . The domain detector may be automatically run or manually run. For example the developer may select domain option to run the domain detector. As illustrated the domain detector identifies the domains from the available domains in the CU service that relate to the example NL sentence and a confidence score for the domain. The confidence score provides an indication to a developer as to whether or not the domain is correctly identified for the example NL sentence. According to an embodiment the confidence score ranges between 0 and 1 where a higher score indicates that the domain is more related to the example NL sentence as compared to a lower score. The developer can pick one of the suggested domains e.g. by selecting the displayed box next to the domain or add their own domain by selecting the add Domain option . In the current example the developer has added a new Sports domain.

Intent Action section shows results from running an intent action detector on example NL sentence . The intent action detector may be automatically run or manually run. For example the developer may select intent action option to run the intent action detector. In response to running the intent action classifier the most likely intent actions e.g. top N results along with a confidence score is displayed. The developer may also select the see examples option to see example NL sentences that use the displayed intent action labels that are already included in the models. The developer can compare the example NL sentence to the example sentences and decide to pick one of the suggested intent actions or the developer can choose to add his own intent action to label the example NL sentence. For example the user may select the add intent action option .

Intent Object section shows results from running an intent object detector on the example NL sentence . The intent object detector may be automatically run or manually run. For example the developer may select intent object option to run the intent object detector. In response to running the intent object classifier the most likely intent objects e.g. top N results along with a confidence score are displayed. The developer may also select the see examples option to view example NL sentences that use the displayed intent object labels that are already included in the model. The developer can compare the example NL sentence to the example sentences and decide to pick one of the suggested intent objects or the developer can choose to add his own intent object to label the example NL sentence. For example the user may select the add intent object option .

Slot section shows results from slot tagging the entities in example NL sentence . The slot tagging may be automatically run or manually run. For example the developer may select slot tagging option to run the slot tagging. In response to running the slot tagging different detected slots e.g. the top N results along with a confidence score are displayed. The developer may also select the see examples option to view similar slots that are already included in the model. The developer can either pick what is suggested or choose to highlight the sequences in the sentence and assign a new slot name by selecting the add new slot option . In the current example the developer has created a new Athlete slot.

After performing the above steps for one or more of the sentences the platform automatically updates the models to make better suggestions to the developer for the next set of example NL sentences.

The proposed process biases the developers to label their data similarly to the already existing data.

After a start operation the process moves to operation where the tools to develop and enable a CU application are displayed. Tools are provided to allow developers to build applications to interact with Conversational Understanding CU systems and services. The tools include a variety of different tools such as but not limited to selecting API tools labeling tools training tools validation tools and the like. The tools may be used to select functionality from existing domains extend one or more domains as well as to create new domains.

Transitioning to operation the tools are used to determine what domains to use in the application as well as the corresponding APIs for the application. For example a domain detector may be used to identify the existing domains in the CU service that relate to the application being developed. A user may also select one or more existing APIs that are associated with one or more domains.

Moving to decision operation a determination is made as to whether there is an update to a domain or whether a domain is to be added to the CU system. When there is not either an update to a domain or a domain is not to be added the process flows to operation . When there is an update to a domain or a domain is to be added the process flows to operation .

At operation the tools are used to update and validate the models. For example labeling tools training tools and validation tools may be used by the developer to update the CU service to include coverage for the application that is being developed.

Moving to operation the models in the CU system are used by the application. The models may be used by one or more applications.

After a start operation the process moves to operation where example NL sentences are received. The example NL sentences may be received in different forms. For example the examples may be in a form of sentences or utterances. For example an example NL sentence may be find the most recent tom cruise movie. Another example may be post this link on social network site X. 

Flowing to operation the domains associated with the example NL sentences are detected. Generally a domain is an area that is associated with a set of actions e.g. movie domain music domain book domain game domain flight domain . . . . Zero or more domains may be detected depending on the domains that are already included in the domain model of the CU service. For example a domain model may initially include one domain e.g. movies that is then extended to include another domain e.g. social . More domains may be added or removed from the domain model. In the examples provided above two different domains may be detected e.g. movie and social .

Moving to operation the output of the domain detection is used to determine the intent action s that are associated with each of the detected domains. One or more intent actions may be detected. An intent action is an action to be performed e.g. find post play buy . . . . In the examples provided above the intent actions detected include find and post. The detected domains may or may not be used to assist in detecting any intent actions. The intent action domain may tag different intent actions according to the domain s the intent action is associated with. For example the intent action find may be associated with many different domains e.g. movie games books flight . . . whereas the intent action post may be associated with a single domain e.g. social .

Transitioning to operation the intent object s are detected. For each determined intent action one or more intent objects are identified. An intent object is an object that relates to that determined intent action. The intent object is the object of the determined intent action e.g. movie picture item . . . . In the examples provided above the intent objects detected include movie and picture. 

Flowing to operation slot tagging is performed. One or more slot models may be used. In the examples provided above the slots for the movie slot model include a ReleaseDate slot that is set to most recent a MovieStar slot that is set to tom cruise a MovieType slot that is set to movie and an ItemType slot that is set to picture. The slots for the social media slot model include and a SocialMedia slot that is set to X. Other domains may include other types of slots. For example a travel domain may comprise slots for departure location departure time arrival time arrival destination travel method constraints e.g. lowest cost no layovers etc. . A dining domain may comprise slots for cuisine type time party size reservation needed and relative location e.g. in walking distance near a transit station etc. . The developer may add one or more slots to a slot model. For example the slot model for the travel domain may not include a slot for the travel method. Using the provided examples of tagging the utterance the developer may create a new slot.

Moving to operation models for the CU system are updated or customized. According to an embodiment new models may be trained.

After a start operation the process moves to operation where a domain to update or add to a CU service is determined. One or more models may be updated or created. According to an embodiment four models are updated including a domain model an intent action model an intent object model and a slot model. According to another embodiment two new models intent and slot models are created when a domain is added.

Flowing to operation the domain model is updated with the new domain to add. For purposes of explanation assume the understanding system currently supports four different domains movies music games and generic commands and that a sport domain is to be added. Instead of adding two new models to the understanding system the existing domain model is updated to detect the new Sports domain when language relating to the Sports domain is located within a NL sentence.

Transitioning to operation the intent action model is updated to support any new intent actions that are not already included in the intent action model. Many intent actions associated with the new domain may already be supported by the intent action model before being updated. For example get and find intent actions that are associated with the sports domain may already be supported by the intent action model. Zero or more intent actions may be added to the intent action model e.g. schedule . . . .

Moving to operation the intent object model is updated to support any new intent objects that are not already included in the intent object model. Many intent objects associated with the new domain may already be supported by the intent object model before being updated. For example the intent objects already supported may include game photos person information. Zero or more intent objects may be added to the intent object model e.g. news . . . .

Flowing to operation the slot model is updated to support the new domain. According to an embodiment a single slot model is used to support the domains. The slots may be associated with one or more different domains actions and intents.

For purposes of explanation and not intended to be limiting the models in the example CU service are trained using four different domains including a Movie domain a Music domain a Games domain and a Generic Commands domain. More or less domains may be used to train the models.

In the current example a developer wants to add a new Sports domain to the CU service. According to an embodiment the developer supplies example NL sentences. For each example NL sentence the tools predict an intent action and an intent object.

Table includes an example NL sentence column a predicted intent action column a true intent action column a predicted intent object column a true intent object column and a predicted intent column. Table shows four example NL sentences.

As can be seen by referring to table the predicted intent actions are accurately predicted even though the sports domain is not part of the current CU service. In the current example the predicted intent actions are the same as the true intent actions. The predicted intent objects are not as accurately predicted as compared to the intent actions but they are reasonable.

In the first two NL sentences in table the game intent object label from the Games domain is predicted as each of the first two NL sentences is related to a game or match.

The third NL sentence example shares the intent action and intent object with existing domains and is correctly predicted.

The fourth NL sentence example detected the right context of retrieving information using the get person info although the true intent was to fetch get news .

As the number of covered domains in the CU service increases beyond the four in the current example the predictions would become more accurate due to better coverage. From experimental results it was found that the automatically determined predictions are accurate over 90 of the time.

As illustrated system includes input manager language understanding component dialog engine response generator and application .

Application is an application that is configured to interact with CU service and was developed using the tools as described herein. Application may include a natural user interface NUI or some other interface to interact with CU service . For example a combination of a natural language dialog and other non verbal modalities of expressing intent e.g. gestures touch gaze images videos spoken prosody etc. may be used to interact with service . As illustrated CU service receives speech utterances from application and is configured to have a dialog with a user.

Input manager is configured to receive input the user dialog act from application . The user dialog act may be different types of user input. For example the user dialog act may be speech input e.g. an utterance touch input gesture input text input as well as other types of input.

Input manager may include different components such as an Automatic Speech Recognizer ASR a gesture recognizer a handwriting recognizer and the like. When the user dialog act is speech the speech is recognized by input manager using ASR. Input manager outputs text that is delivered to language understanding component .

Language understanding component is configured to receive and analyze the text. Generally language understanding component associates a meaning to the words of the text. For example language understanding component may tag the text perform a syntactic analysis of the text and the like. The language understanding component is traditionally a rules based component that converts natural language sentences into semantic representations.

Dialog engine manages the dialog by determining a machine action in response to the user dialog act. Dialog engine computes possible dialog states using dialog state computation component . Dialog manager determines the machine action or machine actions. The dialog state information that is used by dialog manager includes information for the current turn in the dialog as well as information for one or more past turns in the dialog. Dialog engine provides the determined machine action to response generator .

Response generator determines what type of response to provide the user. For example response generator may determine to provide a spoken response to the user or a visual response to the user. For example a Text to Speech TTS component may output the response as synthesized speech when determined Response generator provides the response to the input to application .

As illustrated system includes service data store tools touch screen input device e.g. a slate smart phone and display device .

As illustrated service is a cloud based and or enterprise based service that may be configured to provide services such as dialog services as described herein. The service may be interacted with using different types of input and output. For example a user may use speech input touch input hardware based input and the like. Functionality of one or more of the services provided by service may also be configured as a client server based application.

As illustrated service is a multi tenant service that provides resources and services to any number of tenants e.g. Tenants 1 N . Multi tenant service is a cloud based service that provides resources to tenants subscribed to the service and maintains each tenant s data separately and protected from other tenant data.

System as illustrated comprises a touch screen input device e.g. a slate device and smart phone that detects when a touch input has been received e.g. a finger touching or nearly touching the touch screen . Any type of touch screen may be utilized that detects a user s touch input. For example the touch screen may include one or more layers of capacitive material that detects the touch input. Other sensors may be used in addition to or in place of the capacitive material. For example Infrared IR sensors may be used. According to an embodiment the touch screen is configured to detect objects that in contact with or above a touchable surface. Although the term above is used in this description it should be understood that the orientation of the touch panel system is irrelevant. The term above is intended to be applicable to all such orientations. The touch screen may be configured to determine locations of where touch input is received e.g. a starting point intermediate points and an ending point . Actual contact between the touchable surface and the object may be detected by any suitable means including for example by a vibration sensor or microphone coupled to the touch panel. A non exhaustive list of examples for sensors to detect contact includes pressure based mechanisms micro machined accelerometers piezoelectric devices capacitive sensors resistive sensors inductive sensors laser vibrometers and LED vibrometers.

According to an embodiment smart phone touch screen input device and device are configured with multimodal input and output and each include an application that interact with service and were developed using tools .

As illustrated touch screen input device smart phone and display device shows exemplary displays and showing the use of an application. Data may be stored on a device e.g. smart phone touch screen input device and or at some other location e.g. network data store . Data store or some other store may be used to store models as well as other data. The applications used by the devices may be client based applications server based applications cloud based applications or some combination. According to an embodiment display device is a device such as a MICROSOFT XBOX coupled to a display.

Development manager is configured to perform operations relating to processes as described herein. Development manager is configured to access tools that are used by a developer to create an application to interact with service . While manager is shown within service the functionality of the manager may be included in other locations e.g. on smart phone and or touch screen input device and or device .

The embodiments and functionalities described herein may operate via a multitude of computing systems including without limitation desktop computer systems wired and wireless computing systems mobile computing systems e.g. mobile telephones netbooks tablet or slate type computers notebook computers and laptop computers hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers and mainframe computers.

In addition the embodiments and functionalities described herein may operate over distributed systems e.g. cloud based computing systems where application functionality memory data storage and retrieval and various processing functions may be operated remotely from each other over a distributed computing network such as the Internet or an intranet. User interfaces and information of various types may be displayed via on board computing device displays or via remote display units associated with one or more computing devices. For example user interfaces and information of various types may be displayed and interacted with on a wall surface onto which user interfaces and information of various types are projected. Interaction with the multitude of computing systems with which embodiments of the invention may be practiced include keystroke entry touch screen entry voice or other audio entry gesture entry where an associated computing device is equipped with detection e.g. camera functionality for capturing and interpreting user gestures for controlling the functionality of the computing device and the like.

As stated above a number of program modules and data files may be stored in the system memory . While executing on the processing unit the program modules e.g. the development manager may perform processes including but not limited to one or more of the stages of the methods and processes illustrated in the figures. Other program modules that may be used in accordance with embodiments of the present invention may include electronic mail and contacts applications word processing applications spreadsheet applications database applications slide presentation applications drawing or computer aided application programs etc.

Furthermore embodiments of the invention may be practiced in an electrical circuit comprising discrete electronic elements packaged or integrated electronic chips containing logic gates a circuit utilizing a microprocessor or on a single chip containing electronic elements or microprocessors. For example embodiments of the invention may be practiced via a system on a chip SOC where each or many of the components illustrated in may be integrated onto a single integrated circuit. Such an SOC device may include one or more processing units graphics units communications units system virtualization units and various application functionality all of which are integrated or burned onto the chip substrate as a single integrated circuit. When operating via an SOC the functionality described herein with respect to the development manager may be operated via application specific logic integrated with other components of the computing device on the single integrated circuit chip . Embodiments of the invention may also be practiced using other technologies capable of performing logical operations such as for example AND OR and NOT including but not limited to mechanical optical fluidic and quantum technologies. In addition embodiments of the invention may be practiced within a general purpose computer or in any other circuits or systems.

The computing device may also have one or more input device s such as a keyboard a mouse a pen a sound input device a touch input device etc. The output device s such as a display speakers a printer etc. may also be included. The aforementioned devices are examples and others may be used. The computing device may include one or more communication connections allowing communications with other computing devices . Examples of suitable communication connections include but are not limited to RF transmitter receiver and or transceiver circuitry universal serial bus USB parallel and or serial ports.

The term computer readable media as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures or program modules. The system memory the removable storage device and the non removable storage device are all computer storage media examples i.e. memory storage. Computer storage media may include RAM ROM electrically erasable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other article of manufacture which can be used to store information and which can be accessed by the computing device . Any such computer storage media may be part of the computing device . Computer storage media does not include a carrier wave or other propagated or modulated data signal.

Communication media may be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media.

One or more application programs may be loaded into the memory and run on or in association with the operating system . Examples of the application programs include phone dialer programs e mail programs personal information management PIM programs word processing programs spreadsheet programs Internet browser programs messaging programs and so forth. The system also includes a non volatile storage area within the memory . The non volatile storage area may be used to store persistent information that should not be lost if the system is powered down. The application programs may use and store information in the non volatile storage area such as e mail or other messages used by an e mail application and the like. A synchronization application not shown also resides on the system and is programmed to interact with a corresponding synchronization application resident on a host computer to keep the information stored in the non volatile storage area synchronized with corresponding information stored at the host computer. As should be appreciated other applications may be loaded into the memory and run on the mobile computing device including the development manager as described herein.

The system has a power supply which may be implemented as one or more batteries. The power supply might further include an external power source such as an AC adapter or a powered docking cradle that supplements or recharges the batteries.

The system may also include a radio that performs the function of transmitting and receiving radio frequency communications. The radio facilitates wireless connectivity between the system and the outside world via a communications carrier or service provider. Transmissions to and from the radio are conducted under control of the operating system . In other words communications received by the radio may be disseminated to the application programs via the operating system and vice versa.

The visual indicator may be used to provide visual notifications and or an audio interface may be used for producing audible notifications via the audio transducer . In the illustrated embodiment the visual indicator is a light emitting diode LED and the audio transducer is a speaker. These devices may be directly coupled to the power supply so that when activated they remain on for a duration dictated by the notification mechanism even though the processor and other components might shut down for conserving battery power. The LED may be programmed to remain on indefinitely until the user takes action to indicate the powered on status of the device. The audio interface is used to provide audible signals to and receive audible signals from the user. For example in addition to being coupled to the audio transducer the audio interface may also be coupled to a microphone to receive audible input such as to facilitate a telephone conversation. In accordance with embodiments of the present invention the microphone may also serve as an audio sensor to facilitate control of notifications as will be described below. The system may further include a video interface that enables an operation of an on board camera to record still images video stream and the like.

A mobile computing device implementing the system may have additional features or functionality. For example the mobile computing device may also include additional data storage devices removable and or non removable such as magnetic disks optical disks or tape. Such additional storage is illustrated in by the non volatile storage area . Mobile computing device may also include peripheral device port .

Data information generated or captured by the mobile computing device and stored via the system may be stored locally on the mobile computing device as described above or the data may be stored on any number of storage media that may be accessed by the device via the radio or via a wired connection between the mobile computing device and a separate computing device associated with the mobile computing device for example a server computer in a distributed computing network such as the Internet. As should be appreciated such data information may be accessed via the mobile computing device via the radio or via a distributed computing network. Similarly such data information may be readily transferred between computing devices for storage and use according to well known data information transfer and storage means including electronic mail and collaborative data information sharing systems.

Embodiments of the present invention for example are described above with reference to block diagrams and or operational illustrations of methods systems and computer program products according to embodiments of the invention. The functions acts noted in the blocks may occur out of the order as shown in any flowchart. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality acts involved.

The description and illustration of one or more embodiments provided in this application are not intended to limit or restrict the scope of the invention as claimed in any way. The embodiments examples and details provided in this application are considered sufficient to convey possession and enable others to make and use the best mode of claimed invention. The claimed invention should not be construed as being limited to any embodiment example or detail provided in this application. Regardless of whether shown and described in combination or separately the various features both structural and methodological are intended to be selectively included or omitted to produce an embodiment with a particular set of features. Having been provided with the description and illustration of the present application one skilled in the art may envision variations modifications and alternate embodiments falling within the spirit of the broader aspects of the general inventive concept embodied in this application that do not depart from the broader scope of the claimed invention.

