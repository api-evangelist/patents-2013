---

title: Controlling runtime access to application programming interfaces
abstract: The present invention extends to methods, systems, and computer program products for controlling runtime access to application programming interfaces Embodiments of the invention allow library developers to more precisely and easily control which of their libraries' APIs can be called dynamically. Thus, their servicing and versioning burden can be more appropriately controlled. Further, application developers can control which such APIs to further exclude from dynamic calling scenarios, to minimize the runtime support overhead (e.g., preventing generation of metadata).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990839&OS=08990839&RS=08990839
owner: Microsoft Technology Licensing, LLC
number: 08990839
owner_city: Redmond
owner_country: US
publication_date: 20130422
---
Computer systems and related technology affect many aspects of society. Indeed the computer system s ability to process information has transformed the way we live and work. Computer systems now commonly perform a host of tasks e.g. word processing scheduling accounting etc. that prior to the advent of the computer system were performed manually. More recently computer systems have been coupled to one another and to other electronic devices to form both wired and wireless computer networks over which the computer systems and other electronic devices can transfer electronic data. Accordingly the performance of many computing tasks is distributed across a number of different computer systems and or a number of different computing environments.

During code development software developers often use Application Programming Interfaces APIs to facilitate communication between software components. An API can include a specification for routines data structures object classes and variables associated with the API. As such one developer can use an API specification to determine how to call an API written by another developer.

Often one software developer a library developer develops code having a number of related APIs that are grouped into a library offering specified functionality. The software developer can make parts of the functionality available to other programs by exposing corresponding APIs within the library as public APIs. Thus another developer an application developer can access the available parts of functionality from within their code through calls to the public APIs. The software developer can also maintain other parts of the functionality as private. The private functionality can be used internally between APIs within the library or to access other private APIs in other libraries. APIs providing the private functionality are not directly exposed to other programs.

However many runtime environments permit code to dynamically call any API in a third party library e.g. using reflection to access metadata . As such an application program or library can identify and call private APIs within another library. When a software developer maintains an API is private the software developer does not expect the API to be externally called. Unfortunately servicing or versioning changes to internal implementation details of such libraries such as for example renames or removals of private methods have the potential of causing breaking changes in applications using these libraries.

In addition runtime support for dynamic calls carries a size and working set overhead e.g. metadata . The size and working set overhead is maintained for APIs private or public whether or not the APIs are actually called dynamically. Maintaining size and working set overhead for uncalled APIs unnecessarily consumes computing resources.

The present invention extends to methods systems and computer program products for controlling runtime access to application programming interfaces. Embodiments of the invention include controlling runtime access to an application programming interfaces API . A runtime environment provides dynamic access requests e.g. through reflection or other dynamic calling techniques with a default visibility into APIs based on API type. For example the default visibility into non public APIs may prevent dynamic access.

A set of APIs combined in a library is accessed. The set of APIs include one or more public APIs and one or more non public APIs. An API is identified from among the set of APIs for which the default visibility provided to dynamic access requests is to be altered.

The default visibility into the API is altered by applying an attribute to the API. The attribute indicates to the runtime environment at runtime that dynamic access requests are to be provided the altered visibility into the API. Altering visibility can include permitting dynamic access to a non public API where by default dynamic access is not permitted.

Other embodiments include reducing the default visibility into an accessible API. Application code for an application is accessed. The application code refers to one or more accessible APIs combined in a library. An accessible API referred to within the application code is identified. The accessible API is selected from among the one or more accessible APIs.

It is determined that the accessible API is not to be dynamically accessed at runtime. An attribute is applied to the accessible API to reduce the default visibility into the accessible API. The attribute indicates to a runtime environment at runtime that dynamic access requests e.g. through reflection or other dynamic calling techniques are to be provided with reduced visibility into the accessible API. Reducing visibility into an API can correspondingly reduce metadata generation. In some embodiments reducing visibility into an API includes preventing dynamic access to the API.

Further embodiments include providing a consumer with specified visibility into an API. Executable code is executed in a runtime environment. The executable code is derived from application code. During execution of the executable code a dynamic call is received from a consumer to execute a portion of the executable code. The portion of the executable code is derived from a portion of the application code that refers to an API within a library. A runtime default visibility into the API is accessed based on the type of the API.

Any attributes applied to the API are accessed. Attributes applied to the API can be indicative of a desire by the author of API to alter the runtime default visibility into the API. Any attributes applied to the portion of the application code are accessed. Attributes applied to the portion of the application code can be indicative of a desire by the author of the application code to provide less visibility into the API than indicated by the runtime default visibility as altered by any attributes applied to the API.

A calculated visibility into the API is determined based on one or more of the runtime default visibility into the API any attributes applied to the API and any attributes applied to the portion of the application code that refers to the API. The dynamic call is provided with the calculated visibility into the API.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Additional features and advantages of the invention will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

The present invention extends to methods systems and computer program products for controlling runtime access to application programming interfaces. Embodiments of the invention include controlling runtime access to an application programming interfaces API . A runtime environment provides dynamic access requests e.g. through reflection or other dynamic calling techniques with a default visibility into APIs based on API type. For example the default visibility into non public APIs may prevent dynamic access.

A set of APIs combined in a library is accessed. The set of APIs include one or more public APIs and one or more non public APIs. An API is identified from among the set of APIs for which the default visibility provided to dynamic access requests is to be altered.

The default visibility into the API is altered by applying an attribute to the API. The attribute indicates to the runtime environment at runtime that dynamic access requests are to be provided the altered visibility into the API. Altering visibility can include permitting dynamic access to a non public API where by default dynamic access is not permitted.

Other embodiments include reducing the default visibility into an accessible API. Application code for an application is accessed. The application code refers to one or more accessible APIs combined in a library. An accessible API referred to within the application code is identified. The accessible API is selected from among the plurality of accessible APIs.

It is determined that the accessible API is not to be dynamically accessed at runtime. An attribute is applied to the accessible API to reduce the default visibility into the accessible API. The attribute indicates to a runtime environment at runtime that dynamic access requests e.g. through reflection or other dynamic calling techniques are to be provided with reduced visibility into the accessible API. Reducing visibility into an API can correspondingly reduce metadata generation. In some embodiments reducing visibility into an API includes preventing dynamic access to the API.

Further embodiments include providing a consumer with specified visibility into an API. Executable code is executed in a runtime environment. The executable code is derived from application code. During execution of the executable code a dynamic call is received from a consumer to execute a portion of the executable code. The portion of the executable code is derived from a portion of the application code that refers to an API within a library. A runtime default visibility into the API is accessed based on the type of the API.

Any attributes applied to the API are accessed. Attributes applied to the API can be indicative of a desire by the author of API to alter the runtime default visibility into the API. Any attributes applied to the portion of the application code are accessed. Attributes applied to the portion of the application code can be indicative of a desire by the author of the application code to provide less visibility into the API than indicated by the runtime default visibility as altered by any attributes applied to the API.

A calculated visibility into the API is determined based on one or more of the runtime default visibility into the API any attributes applied to the API and any attributes applied to the portion of the application code that refers to the API. The dynamic call is provided with the calculated visibility into the API.

Embodiments of the present invention may comprise or utilize a special purpose or general purpose computer including computer hardware such as for example one or more processors and system memory as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions are computer storage media devices . Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments of the invention can comprise at least two distinctly different kinds of computer readable media computer storage media devices and transmission media.

Computer storage media devices includes RAM ROM EEPROM CD ROM solid state drives SSDs e.g. based on RAM Flash memory phase change memory PCM other types of memory other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.

A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmissions media can include a network and or data links which can be used to carry desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to computer storage media devices or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile computer storage media devices at a computer system. Thus it should be understood that computer storage media devices can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which when executed at a processor cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs tablets pagers routers switches and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. In a distributed system environment program modules may be located in both local and remote memory storage devices.

Embodiments of the invention can also be implemented in cloud computing environments. In this description and the following claims cloud computing is defined as a model for enabling on demand network access to a shared pool of configurable computing resources. For example cloud computing can be employed in the marketplace to offer ubiquitous and convenient on demand access to the shared pool of configurable computing resources. The shared pool of configurable computing resources can be rapidly provisioned via virtualization and released with low management effort or service provider interaction and then scaled accordingly.

A cloud computing model can be composed of various characteristics such as for example on demand self service broad network access resource pooling rapid elasticity measured service and so forth. A cloud computing model can also expose various service models such as for example Software as a Service SaaS Platform as a Service PaaS and Infrastructure as a Service IaaS . A cloud computing model can also be deployed using different deployment models such as private cloud community cloud public cloud hybrid cloud and so forth. In this description and in the claims a cloud computing environment is an environment in which cloud computing is employed.

Embodiments of the invention allow library developers to more precisely and easily control which of their libraries APIs can be called dynamically. Thus their servicing and versioning burden can be more appropriately controlled. Further application developers can control which such APIs to further exclude from dynamic calling scenarios to minimize the runtime support overhead.

Development environment can be a software application that provides facilities for software development including but not limited to a source code editor build automation a debugger a version control system a class browser an object inspector a class hierarchy diagram etc. In some embodiments development environment includes or is included in an Integrated Development Environment IDE . A library developer can use development environment to apply an attribute to an API to change the visibility of the API to dynamic access requests.

Runtime environment can be a software application that provides facilities for software execution. Runtime environment can include a compiler e.g. a just in time JIT compiler and or an interpreter for executing code developed in software development environment . In some embodiments runtime environment includes or is included in an Integrated Development Environment IDE . Runtime environment can include mechanisms e.g. reflection for dynamically requesting access to an API.

Development environment and execution environment can be integrated into the same environment or can be resident in separate environments.

Runtime environment includes visibility calculation module . Visibility calculation module is configured to calculate the visibility into an API based on API type e.g. internal private public etc. and applied attributes. Default visibility rules can define a default visibility e.g. permit dynamic access or remove dynamic access for each API type. Applied attributes can be used to alter or override a default visibility. As such applied attributes give a library developer more precise control over how individual APIs can be accessed dynamically.

In some embodiments default visibility rules define that dynamic access is removed for APIs indicated as private or internal. A library developer can use development environment to apply an attribute to the private or internal API. The applied attribute can indicate that dynamic access is to be permitted for the private or internal API. Upon receiving a dynamic call to the private or internal API visibility calculation module can determine that the applied attribute overrides the default visibility of removed dynamic access for the private or internal API. As such the dynamic call is permitted access to the private or internal API.

Method includes accessing a set of application programming interfaces APIs combined in a library the set of application programming interfaces APIs including one or more public application programming interfaces APIs and one or more non public application programming interfaces APIs . For example development environment can access library . Library includes one or more public APIs including public API . Library includes one or more non public e.g. private or internal APIs including non public API

Method includes identifying an application programming interface API from among the set of application programming interfaces APIs for which the default visibility provided to dynamic access requests is to be altered . For example development environment possibly in response to author input can identify that the default visibility for dynamic access requests e.g. using reflection or other dynamic calling techniques into non public API is to be altered.

Method includes altering the default visibility into the application programming interface API to an altered visibility by applying an attribute to the application programming interface API the attribute indicating to the runtime environment at runtime that dynamic access requests are to be provided the altered visibility into the application programming interface API . For example author can enter visibility input at development environment . In response to visibility input development environment can apply attribute to non public API . Attribute can indicate to runtime environment that the default visibility for non public APIs defined in default visibility rules is to be altered for non public API .

Subsequently library can be compiled along with other source code into executable code . During execution of executable code visibility calculation module can consider both default visibility rules and attribute when calculating visibility into non public API . In some embodiments attribute indicates the dynamic access to non public API is allowed even though default visibility rules indicate that dynamic access to non public APIs is to be prevented.

Development environment can be a software application that provides facilities for software development including but not limited to a source code editor build automation a debugger a version control system a class browser an object inspector a class hierarchy diagram etc. In some embodiments development environment includes or is included in an Integrated Development Environment IDE . An application developer can use development environment to apply an attribute to code referencing an accessible API e.g. included in a third party library . Attributes applied to code referencing an accessible API can be used to reduce default visibility into the accessible API.

Runtime environment can be a software application that provides facilities for software execution. Runtime environment can include a compiler e.g. a just in time JIT compiler and or an interpreter for executing code developed in software development environment . In some embodiments runtime environment includes or is included in an Integrated Development Environment IDE . Runtime environment can include mechanisms e.g. reflection for dynamically requesting access to an API.

Development environment and execution environment can be integrated into the same environment or can be resident in separate environments.

Runtime environment includes visibility calculation module . Visibility calculation module is configured to calculate the visibility into an accessible API e.g. public API or non public API attributed to permit dynamic access based on attributes applied to code referencing the accessible API. Default visibility rules can permit dynamic access to accessible APIs. As such applied attributes give an application developer a mechanism to exclude otherwise accessible APIs e.g. included in a third party library from dynamic access. Excluding an otherwise accessible API from dynamic access minimizes runtime support overhead e.g. metadata generation and thereby conserves resources.

Method includes accessing application code for an application the application code referring to one or more accessible application programming interfaces APIs combined in a library . For example development environment can access application code . Development environment can also access library . Application code can refer to one or more APIs such as for example APIs and included in library .

Method includes identifying an accessible application programming interface API referred to within the application code the accessible application programming interface API selected from among the one or more accessible application programming interfaces APIs . For example development environment can identify API referred to by API reference .

Method includes determining that the accessible application programming interface API is not to be dynamically accessed at runtime . For example development environment possibly in response to author input can determine that dynamic access to API is to be prevented.

Method includes reducing the default visibility into the accessible application programming interface API to a reduced visibility by applying an attribute to the portion of the application code referring to the accessible application programming interface API the attribute indicating to the runtime environment at runtime that dynamic access requests are to be provided the reduced visibility into the accessible application programming interface API . For example author can enter visibility input at development environment . In response to visibility input development environment can apply attribute to API reference a reference to API . Attribute can indicate to runtime environment that the default visibility for API is to is to be reduced.

Subsequently application code and library can be compiled along possibly with other source code into executable code . During execution of executable code visibility calculation module can consider both default visibility rules and attribute when calculating visibility into API . In some embodiments attribute indicates the dynamic access to API is prevented even though default visibility rules indicate that dynamic access to accessible APIs is to be allowed.

Limited visibility into an API can include not generating metadata for the API. For example as depicted in computer architecture metadata is not generated for API . On the other hand metadata can be generated for API another accessible API referenced form application code .

Runtime environment can be a software application that provides facilities for software execution. Runtime environment can include a compiler e.g. a just in time JIT compiler and or an interpreter for executing code developed in software development environment . In some embodiments runtime environment includes or is included in an Integrated Development Environment IDE . Runtime environment can include mechanisms e.g. reflection for dynamically requesting access to an API.

Runtime environment includes visibility calculation module . Visibility calculation module is configured to calculate the visibility into an each of a plurality of APIs grouped together in a library. Visibility can be calculated for an API based on an API type e.g. internal private public attributes applied e.g. a library author to the API and attributes applied to application that references the API. Applied attributes can be used to alter override reduce etc. a default visibility.

In some embodiments default visibility rules define that dynamic access is removed for non public e.g. private or internal APIs and that dynamic access is permitted for public APIs. However the author of a non public API e.g. a library author can apply an attribute to the non public API to override the default visibility and permit dynamic access to the non public API. Likewise the author of a public API e.g. a library author can apply an attribute to the public API to override the default visibility and deny dynamic access to the public API. Other default visibility rules are also possible.

For any dynamically accessible APIs whether dynamically accessible by default or dynamically accessible by an applied attribute a third party author e.g. an application author can apply an attribute to code referencing the dynamically accessible API to remove dynamic access from the API. Thus an application author can minimize runtime support overhead e.g. metadata generation and thereby conserves resources.

Method includes executing executable code in the runtime environment the executable code derived from application code . For example executable code can be executed in runtime environment . Executable code can be derived from application code that includes references to APIs contained in a library. For example API references and can reference APIs contained in a library. The APIs contained in the library can include APIs and

Method includes during execution of the executable code method includes receiving a dynamic call from a consumer to execute a portion of the executable code the portion of the executable code derived from a portion of the application code that refers to an application program interface API within a library . For example dynamic call can be received from consumer . Dynamic call can be a call to execute a portion of executable code .

In one embodiment dynamic call is a call to execute executable code that includes API reference . API reference can reference either API or API . In another embodiment dynamic call is a call to execute executable code that includes API reference . API reference can reference either API or API .

Method includes accessing a runtime default visibility into the application program interface API based on the type of the application program interface API . As indicated by type API is a non public API. Thus when an API reference references API a runtime default visibility for e.g. preventing dynamic access to non public APIs can be accessed from default visibility rules for API . As indicated by type API is a public API. Thus when an API reference references API a runtime default visibility for e.g. allowing dynamic access to public APIs can be accessed from default visibility rules for API .

Method includes accessing any attributes applied to the application program interface API attributes applied to the application program interface API indicative of a desire by the author of application program interface API to alter the runtime default visibility into the application program interface API . For example when an API reference references API attribute can be accessed. Attribute can indicate a desire by the library author to alter the runtime default visibility as defined in default visibility rules into API . For example by default dynamic access to non public APIs can be prevented. However attribute can indicate that dynamic access to API is to be permitted.

Method includes accessing any attributes applied to the portion of the application code that refers to the application program interface API attributes applied to the portion of the application code indicative of a desire by the author of the application code to provide visibility into the application program interface API to a lesser extent than indicated by the runtime default visibility as altered by any attributes applied to the application program interface API . For example when dynamic call is a call to execute executable code that includes API reference attribute can be accessed. Attribute can indicate a desire by an application author to reduce visibility into a reference API e.g. API or API . For example attribute can indicate that dynamic access to the references API e.g. API or API is to be prevented. As such even if the library author otherwise permits dynamic access to an API the application developer can apply attribute to prevent dynamic access to the API.

Method includes determining a calculated visibility into the application program interface API based on one or more of the runtime default visibility into the application program interface API any attributes applied to the an application program interface API and any attributes applied to the portion of the application code that refers to the application program interface API . Thus visibility calculation module can determine a calculated visibility into an API based on a default visibility for the API s type as defined in default visibility rules any attributes applied to the API and any attributes applied to an API reference that references the API.

Method includes providing the dynamic call with visibility into the application program interface API in accordance with the calculated visibility . For example consumer can be provided with visibility into a dynamically called API in executable code . Results of dynamic call can also be returned to consumer . Results may indicate that the dynamic access to the dynamically called API is not permitted.

Within executable code various different combinations of referring code and APIs are possible. In one embodiment dynamical call uses API reference to call API . In this embodiment visibility is determined from a default visibility for API type e.g. as defined in default visibility rules attribute and attribute . In another embodiment dynamical call uses API reference to call API . In this embodiment visibility is determined from a default visibility for API type e.g. as defined in default visibility rules and attribute .

In a further embodiment dynamical call uses API reference to call API . In this further embodiment visibility is determined from a default visibility for API type e.g. as defined in default visibility rules and attribute . In an additional embodiment dynamical call uses API reference to call API . In this further embodiment visibility is determined from a default visibility for API type e.g. as defined in default visibility rules .

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

