---

title: Methods and apparatus for increased security in issuing tokens
abstract: In some embodiments, an apparatus includes an authorization module implemented in at least one of a memory or a processing device. The authorization module receives at a first time and from a first mobile application, a request for an access token associated with a second mobile application that includes an identifier associated with the second mobile application and a first random verification identifier. The authorization module provides to the first mobile application a signal representing an authorization code associated with the access token. The authorization module receives from the second mobile application at a second time a signal representing the authorization code, the identifier associated with the second mobile application, and a second random verification identifier. The authorization module provides a signal representing the access token to the second mobile application based in part on the first random verification identifier being equal to the second random verification identifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08615794&OS=08615794&RS=08615794
owner: Ping Identity Corporation
number: 08615794
owner_city: Denver
owner_country: US
publication_date: 20130109
---
Some embodiments described herein relate generally to methods and apparatus for an authorization server to authenticate an application installed on a mobile communication device before issuing a token for the application. In particular but not by way of limitation some embodiments described herein relate to methods and apparatus of authenticating an application by using a randomly generated verification identifier unique to the application before issuing a token for the application.

Open Authorization OAuth is an open standard protocol for authorization and allows a user such as an enterprise employee to grant a third party application access to information associated with that user stored at a given location e.g. on given website without sharing that user s account credentials e.g. password or the full extent of that user s data. Some known systems use OAuth tokens to authenticate applications for users of a variety of communication devices e.g. a laptop computer a personal digital assistant PDA a standard mobile telephone a tablet personal computer PC etc. . If the OAuth Authorization Server is unable to authenticate an application before issuing a token malicious software may be able to obtain the token issued for a valid application and use that token in making application programming interface API calls and impersonate the valid application.

Accordingly a need exists for methods and apparatus for an OAuth Authorization Server to authenticate an application installed on a mobile communication device before issuing a token to that application.

In some embodiments an apparatus includes an authorization module implemented in at least one of a memory or a processing device. The authorization module receives at a first time and from a first mobile application a request for an access token associated with a second mobile application that includes an identifier associated with the second mobile application and a first random verification identifier. The authorization module provides to the first mobile application a signal representing an authorization code associated with the access token. The authorization module receives from the second mobile application at a second time a signal representing the authorization code the identifier associated with the second mobile application and a second random verification identifier. The authorization module provides a signal representing the access token to the second mobile application based in part on the first random verification identifier being equal to the second random verification identifier.

In some embodiments an apparatus includes an authorization module implemented in at least one of a memory or a processing device. The authorization module is configured to receive at a first time and from a first mobile application a request for an access token associated with a second mobile application. The request includes an identifier associated with the second mobile application and a first random verification identifier. The authorization module is configured to provide to the first mobile application and in response to the request a signal representing an authorization code associated with the access token. The authorization module is configured to receive from the second mobile application and at a second time after the first time a signal representing the authorization code the identifier associated with the second mobile application and a second random verification identifier. The authorization module is configured to provide a signal representing the access token to the second mobile application based at least in part on the first random verification identifier being equal to the second random verification identifier.

In some embodiments a non transitory processor readable medium includes code to cause a processor to receive at a first time and from a first mobile application a request for an access token associated with a second mobile application. The request includes an identifier associated with the second mobile application and a verification identifier generated by the second mobile application. The code causes the processor to provide to the first mobile application a signal representing an authorization code associated with the access token in response to the request. The code also causes the processor to receive from the second mobile application and at a second time after the first time a signal representing the authorization code the identifier associated with the second mobile application and the verification identifier. The code further causes the processor to provide a signal representing the access token to the second mobile application when the authorization code the identifier associated with the second mobile application and the verification identifier are verified.

In some embodiments an apparatus includes a first mobile application implemented in at least one of a memory or a processing device. The first mobile application is configured to generate a random verification identifier and initiate a second mobile application such that the second mobile application sends a signal representing the random verification identifier and an identifier associated with the first mobile application to an authorization module at a first time. The first mobile application is configured to receive a signal representing an authorization code provided by the authorization module based on the authorization code being within an address associated with the first mobile application at a second time after the first time. The first mobile application is configured to provide a signal representing the random verification identifier and the authorization code to the authorization module. The first mobile application is configured to receive a signal representing an access token associated with the first mobile application based at least in part on the authorization module validating the random verification identifier and the authorization code.

As used in this specification the singular forms a an and the include plural referents unless the context clearly dictates otherwise. Thus for example the term a device is intended to mean a single device or a combination of devices.

The device can be any mobile communication or computing device such as a laptop computer a personal digital assistant PDA a standard mobile telephone a tablet personal computer PC and or so forth. The device includes a memory and a processor . The device can be configured to generate random verification identifiers and request and receive access tokens from the authorization server . The device can also be configured to request application data from the resource server e.g. by sending access tokens to the resource server and to receive application data from the resource server via the network as described in further detail herein.

The memory can be for example a random access memory RAM a memory buffer a hard drive a database an erasable programmable read only memory EPROM an electrically erasable read only memory EEPROM a read only memory ROM and or so forth. In some embodiments the memory stores instructions to cause the processor to execute modules processes and or functions associated with such an access token issuing system .

The processor can be a general purpose processor a Field Programmable Gate Array FPGA an Application Specific Integrated Circuit ASIC a Digital Signal Processor DSP and or the like. The processor can be configured to run and or execute applications and or other modules processes and or functions associated with an access token issuing system . The processor includes a browser and an application .

The application can be any native mobile application installed on the device or a web browser based application. The application for example can be configured to receive access tokens from the authorization module and cause the processor to execute specific operations associated with particular functions in an enterprise. For example the application can be an accounting application a sales application a payroll application and or the like. In other configurations application can be any other enterprise or third party application configured to be run and or executed at the device .

A mobile application can be configured to generate a random verification identifier e.g. a string of random or pseudo random numbers such as a cryptographic nonce and initiate another mobile application such as for example the browser such that this other mobile application can send a signal representing the random verification identifier and an identifier associated with the application to an authorization module at a first time. Note that the browser is a specific example of a native mobile application in the specific instance described herein. In other instances the browser need not be considered as a native mobile application but instead can be considered as and functions as a browser independent of application . The application can be configured to receive a signal representing an authorization code provided by the authorization module based on the authorization code being within an address associated with the application at a second time after the first time. The application can provide a signal representing the random verification identifier and the authorization code to the authorization module . The application is also configured to receive a signal representing an access token associated with the application based in part on the authorization module validating the random verification identifier and the authorization code.

The browser can be any native mobile browser installed on the device such as for example the Android browser the Blackberry browser Safari Internet Explorer Mobile browser Firefox for mobile browser and or the like. The browser can connect to the Internet via for example a cellular network and or a wireless local area network LAN using standard Hypertext Transfer Protocol HTTP over Transmission Control Protocol Internet Protocol TCP IP and can display web pages written in for example HyperText Markup Language HTML Extensible HyperText Markup Language XHTML Mobile Profile WAP 2.0 Wireless Markup Language WML and or the like.

The browser can be configured to be initiated by the application and send a request signal for an access token associated with the application to an authorization module at a first time. The request signal can include the random verification identifier generated by the application and an identifier associated with the application . The browser can also be configured to send to the authorization module a signal representing approval to provide an access token to the application before the authorization module provides an authorization code associated with the access token to the browser .

The authorization server can be for example a web server an application server a proxy server a telnet server a file transfer protocol FTP server a mail server a list server a collaboration server and or the like. The authorization server can receive from a first mobile application such as for example the browser in the device a signal requesting an access token associated with a second mobile application such as for example the application in the device . The authorization server can send a signal representing an authorization code associated with the access token to the first mobile application in response to the request signal via the network . The authorization server can also execute modules processes and or functions associated with such an access token issuing system . The authorization server can be for example an OAuth 2.0 authorization server. OAuth 2.0 defines a standardized messaging protocol by which a native application installed on a mobile communication device can obtain security tokens such as for example access tokens from an authorization server. OAuth 2.0 is described in detail in The OAuth 2.0 Authorization Framework dated October 2012 which is incorporated herein by reference in its entirety. These security tokens can then be included by the application on its application programming interface API calls to a resource server such as resource server to authenticate before obtaining application data.

The authorization server includes a processor and a memory . The memory can be for example a random access memory RAM a memory buffer a hard drive a database an erasable programmable read only memory EPROM an electrically erasable read only memory EEPROM a read only memory ROM and or so forth. The memory can store instructions to cause the processor to execute modules processes and or functions associated with such an access token issuing system e.g. authorization module .

The processor can be a general purpose processor a Field Programmable Gate Array FPGA an Application Specific Integrated Circuit ASIC a Digital Signal Processor DSP and or the like. In some configurations processor can be configured to run and or execute application modules processes and or functions associated with such an access token issuing system . For example processor can be configured to run and or execute modules processes and or functions associated with or in response to access token requests e.g. authorization module . As shown the processor includes an authorization module .

The authorization module can be a hardware and or software module stored in memory and or executed in a processor that can receive at a first time and from a first mobile application such as for example the browser in the device a signal requesting an access token associated with a second mobile application such as for example the application in the device . In some instances the browser can part of another native mobile application. In the context of the access token issuing system described in however the browser is considered as a specific example of a native mobile application. The request signal can include an identifier associated with the second mobile application and a first random verification identifier. Upon receiving the request signal the authorization module can send a signal via the network to the browser to provide user approval or authentication information. Upon receiving the user approval information from the browser the authorization module can authenticate the user as described in greater detail herein. Upon successful authentication of the user the authorization module can send a signal representing an authorization code associated with the access token to the first mobile application browser in response to the request signal via the network . As described in further detail herein the first mobile application browser can send the signal representing the authorization code to the second mobile application application via for example the operating system of the device . The authorization module can receive from the second mobile application and at a second time after the first time a signal representing the authorization code the identifier associated with the second mobile application and a second random verification identifier. The authorization module can be configured to generate and or define access tokens for the application on the device . The authorization module can provide a signal representing the access token to the second mobile application based in part on the first random verification identifier being equal to the second random verification identifier as described in further detail herein. The authorization module can also be configured to not provide the first random verification identifier to the first mobile application or the second mobile application for maintaining security.

The resource server can either be a server associated with the enterprise such as a company that is associated with the authorization server or a third party server distinct from the enterprise that is associated with the authorization server . The resource server can be for example a Software as a Service SaaS host that is a web server a proxy server a telnet server a file transfer protocol FTP server a mail server a list server a collaboration server and or the like.

The resource server includes a processor and a memory . The memory can be for example a random access memory RAM a memory buffer a hard drive a database an erasable programmable read only memory EPROM an electrically erasable read only memory EEPROM a read only memory ROM and or so forth. In some configurations the memory can store instructions to cause the processor to execute modules processes and or functions associated with the application server within the access token issuing system e.g. resource module .

The resource module can be a hardware and or software module stored in memory and or executed in a processor configured to provide application data to applications via the network . For example the application data can include results of external market analysis for a product of the enterprise and or the like. This application data can be used by the application for example to set the retail price of the product to calculate the expected profit levels for the product to determine locations for the best retail vendors available for the product and or the like. In other words the application data can be related to the type of application sales data for a sales related application financial data for a financial application etc. The resource module can receive and process an access token from the application of the device prior to providing application data to the application . Such application data can enable the application to execute modules processes and or functions associated with the device .

At the application initiates the browser by launching the browser and sends a signal representing the verification ID and a client ID associated with the application to the browser . Upon launching the application can send a signal representing a URL associated with the address of the authorization module to the operating system of the mobile device . The operating system can then launch the browser to fetch the URL associated with the address of the authorization module .

The client ID can include an encrypted or an unencrypted form of an application identity number that has been assigned to the application by the authorization module . In some instances the client ID can also include for example additional encrypted or unencrypted application credentials such as the version of the application the features of the application that are accessible to the user of the device a device identifier an identifier associated with the user of the device and or the like.

At the browser sends a signal requesting the access token for the application to the authorization module via the network . The request signal can include the verification ID and the client ID associated with the application . Upon receiving the request signal the authorization module can store the association between the first verification ID and the client ID. Upon receiving the request signal the authorization module can also send a signal via the network to the browser to request user approval or authentication information at . Such user approval request signal can for example redirect the browser to an OAuth authorization server login page where the user can enter the information used for authentication of the user with respect to the OAuth authorization server .

At the browser sends a signal that contains user approval information to the authorization module via the network . The user approval or authentication information can include for example an identifier unique to each user of the device using the OAuth 2.0 protocol. The identifier associated with each user can include for example a user login a user password an employee ID number a personal identification number PIN biometric information e.g. data associated with a fingerprint scan a retinal scan etc. an employee security access level an enterprise division code and or the like. Note that in some instances the identifier can be unique to the user and the application . For example a specific user can have different passwords for different applications installed on the device .

The authorization module receives the user approval or authentication signal from the browser via the network and authenticates the user at . In some instances the authorization module can authenticate the user by matching the user authentication information to a specific entry in a user authentication database or a look up table stored in the memory of the authorization server . The user authentication database can include for example a list of employees and their corresponding employment positions and security access level social security numbers employee personal identification numbers PIN employee passwords and or the like. In other configurations the user authentication database can be stored in the memory of another device e.g. a server not shown in operatively coupled to the network . The authorization module can authenticate the user using any suitable authentication protocol such as for example Secure Sockets Layer SSL Secure Shell SSH Kerberos and or the like.

Upon successful authentication of the user the authorization module can generate an authorization code associated with the access token. The authorization code can be for example a string of arbitrary random or pseudo random numbers generated by the authorization module that is mapped to the access token for a given application. The authorization module can send to the browser a signal that redirects the browser to a device or resource within network and that includes the authorization code via a uniform resource locator URL represented by the signal at . The URL provided is formatted in a scheme that the application is configured to handle the scheme of the URL provided is not recognized by the browser . When an application is installed on a mobile device the application registers itself with the operating system of the mobile device as a handler of a uniform resource locator URL of a given scheme such as for example URLs of the form nativeapp a rest of url . The scheme of the URL represented by the signal sent by the authorization module is only recognizable by the application and not the browser because the valid application and not any other application is designed to be able to access the authorization code that can be exchanged for the access token. If the scheme of the URL represented by the signal sent by the authorization module was otherwise recognizable by the browser a possibility exists that the browser and not the valid application might obtain the authorization code a situation that can be avoided by the application registering itself with the operating system. The authorization code can be random or pseudo random string of numbers that is generated at the authorization module that is uniquely associated with the access token for an application installed on the device for a user. In some configurations after the authorization module generates the authorization code for the first time for an application the authorization module can store the authorization code along with the access token and the verification ID for an application in a database in the memory of the authorization server for access in the future. In other configurations the new authorization code can be generated by the authorization module each time an access token is requested by an application and the authorization code can be made time variant by including a suitably fine grained timestamp in its value.

Because the URL scheme used by the authorization module to format the signal is not recognizable by the browser the browser sends the URL to the operating system. The signal or portion of the signal representing the same URL scheme is registered at the authorization module and the operating system of the mobile device as being associated with the particular application . For example a database or lookup table can exist in the memory of the authorization server and the memory of the device and this database or lookup table can contain entries associated with different applications and the URL s each application can handle. On receiving the URL from the browser the operating system of device can search the database or lookup table to detect or determine whether the specific URL scheme associated with the URL is supported by the device and if so determine what applications have used the URL scheme to register itself on the device . On detecting the application that can handle that URL scheme the operating system sends the signal or portion of the signal representing the URL with the authorization code to the application at .

The application can access the authorization code contained in the URL and generate a second verification ID. In some instances the application can retrieve the original verification ID from the memory of the device instead of generating a second verification ID. The application can send a signal representing the authorization code the verification ID and the client ID to the authorization module without going through the browser via the network at .

At the authorization module can receive via the network the signal representing the authorization code the verification ID and the client ID from the application and can assess the validity of and or verify the attributes of the authorization code the verification ID and the client ID. In some instances the authorization module can perform this verification by querying a database or a look up table stored in the memory of the authorization server for an entry that corresponds to the authorization code and or the verification ID and or the client ID. In other instances the database or look up table can be stored in the memory of a different server operatively coupled to the network . For example the authorization module can acknowledge if an authorization code for an application of an authorized user of the communication device has been received. In another example the authorization module can use the authorization code the verification ID and the client ID to query a second database or lookup table stored the memory of the authorization server that can contain entries that list the approved functionalities of each application for an authenticated user. The authorization module can acknowledge if the approved functionalities of the application has been activated for the user. In yet another example the authorization module can acknowledge if the time stamp on the verification ID and or the client ID is valid and or the like.

Upon verifying the authorization code the verification ID and the client ID the authorization module can generate and or define an access token for the requested application installed on the device . Note that the access token can be generated at this point when the verification ID sent by the application after obtaining the authorization code step is equal to the original verification ID stored in the memory of the authorization server and will not be generated when they differ. The two verification ID s differing is an indication that the application that generated the signal requesting the access token is not the same application that initiated the process of user authentication and access token generation. Accordingly the verification ID can be used to verify that the application that generated the signal requesting the access token is not malicious code posing as the application that initiated the process of user authentication and access token generation.

In some instances the access token can include an encrypted or unencrypted form of a user personal identity number PIN a user security access level a device identification number an internet protocol IP and or media access control MAC address of the device an application identity number an address of the authorization module and or the like. In other instances the access token can include additional encrypted or unencrypted application credentials such as the specific features and or resources of the application that has been approved for the user a duration for which the access token is valid and or the like. In some instances the access token can be for example an Open Authorization OAuth token an OpenID token a SecurID token and or the like. Upon generating the access token the authorization module can send the access token to the application via the network at .

The application can send the access token to the resource module directly via the network i.e. not through the browser at . Upon successfully receiving the access token the resource module can at send application data via the network to the application in a data package e.g. a JavaScript Object Notation JSON package for use during execution of the application on the device . For example if the application is a sales application the application data can include a representation of the price of a unit of a product the number of units sold in a month the number of units in pending orders the revenue generated from all sales in a month the profits earned in a month and or the like. In some instances the application can use the application data to populate a table for display to the user. In another example if the application is a human resource HR application the application data can include a user employee number a user social security number an employee status code an enterprise code for paid time off PTO and or the like. In some instances the application can allow the user to use this data to calculate the total number of hours worked that can be charged to the enterprise in a pay cycle and or the like.

The access token issuing system as described in involves the generation of a first and a second verification ID by the valid application or the generation and the retrieval of a valid verification ID by the application during the request for the authorization code step and request for the access token step . An access token is generated by the authorization module when the two verification ID s are equal but not when they differ or when the verification ID retrieved by the application is equal to the verification ID stored by the authorization module . Hence the generation of the unique verification ID e.g. a nonce by the valid application can reduce the risk of a malicious software to claim the access token as the malicious software does not generate the verification ID that is unique only to the valid application . Known operating systems on mobile devices cannot prevent a malicious software e.g. spyware virus etc. from claiming the URL scheme associated with a valid application . Hence in known operating systems even though a valid application may start the process of obtaining the access token as shown in if a malicious application has been able to claim the URL scheme the operating system on the mobile device can pass the URL with the authorization code to the malicious application instead of the valid application . The malicious software can then exchange the authorization code for the access token and use it on making API calls. Although by implementing the access token issuing system described in a malicious software may still be able to intercept the authorization code the malicious application however will not be able to exchange the authorization code with the access token as the malicious software cannot provide a valid verification ID. Only a valid application can provide the valid verification ID and hence only a valid application can obtain the access token.

At a signal representing an authorization code associated with the access token is provided to the first mobile application and in response to the request. The signal representing the authorization code is sent from for example the authorization module. As described above the authorization module can send to the first mobile application browser a signal that redirects the browser to a network device or resource associated with a uniform resource locator URL that includes the authorization code and a scheme the application is configured to handle not recognized by the browser . The authorization code can be a random or pseudo random string of numbers that is generated at the authorization module that is associated with an application installed on the device for a user.

At a signal representing the authorization code the identifier associated with the second mobile application and the verification identifier is received at for example the authorization module at a second time after the first time. As described above the verification identifier or verification ID can be for example a string of arbitrary random or pseudo random numbers e.g. a cryptographic nonce issued so that this verification ID is not reused in any replay attacks. To ensure that the verification ID is used only once the verification ID can be made to be time variant for example by including a suitably fine grained timestamp in the value or generating the verification ID with a sufficient number of random bits to ensure a probabilistically insignificant chance of repeating a previously generated value.

At a signal representing the access token is provided by for example the authorization module to the second mobile application when the authorization code the identifier associated with the second mobile application and the verification identifier are verified. In some instances the authorization module can perform this verification by querying a database or a look up table stored in the memory of the authorization server for an entry that corresponds to the authorization code verification ID and or client ID. In other instances the database or look up table can be stored in the memory of a different server operatively coupled to the network. As described above the access token is generated and sent from the authorization module when the first verification identifier generated in step is equal to the second verification identifier generated in step and not when they differ. The generation of the unique verification ID e.g. a nonce by the valid application can reduce the risk of a malicious software to claim the access token because the malicious software does not generate the verification ID that is unique only to the valid application .

Some embodiments described herein relate to a computer storage product with a non transitory computer readable medium also can be referred to as a non transitory processor readable medium having instructions or computer code thereon for performing various computer implemented operations. The computer readable medium or processor readable medium is non transitory in the sense that it does not include transitory propagating signals per se e.g. a propagating electromagnetic wave carrying information on a transmission medium such as space or a cable . The media and computer code also can be referred to as code may be those designed and constructed for the specific purpose or purposes. Examples of non transitory computer readable media include but are not limited to magnetic storage media such as hard disks floppy disks and magnetic tape optical storage media such as Compact Disc Digital Video Discs CD DVDs Compact Disc Read Only Memories CD ROMs and holographic devices magneto optical storage media such as optical disks carrier wave signal processing modules and hardware devices that are specially configured to store and execute program code such as Application Specific Integrated Circuits ASICs Programmable Logic Devices PLDs Read Only Memory ROM and Random Access Memory RAM devices. Other embodiments described herein relate to a computer program product which can include for example the instructions and or computer code discussed herein.

Examples of computer code include but are not limited to micro code or micro instructions machine instructions such as produced by a compiler code used to produce a web service and files containing higher level instructions that are executed by a computer using an interpreter. For example embodiments may be implemented using imperative programming languages e.g. C Fortran etc. functional programming languages Haskell Erlang etc. logical programming languages e.g. Prolog object oriented programming languages e.g. Java C etc. or other suitable programming languages and or development tools. Additional examples of computer code include but are not limited to control signals encrypted code and compressed code.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Where methods described above indicate certain events occurring in certain order the ordering of certain events may be modified. Additionally certain of the events may be performed concurrently in a parallel process when possible as well as performed sequentially as described above. For example in some instances the browser can include the user approval information along with the verification ID and the client ID in the signal sent to the authorization module that requests an access token for the application. In such instances step can be performed concurrently with step in and step can be avoided.

