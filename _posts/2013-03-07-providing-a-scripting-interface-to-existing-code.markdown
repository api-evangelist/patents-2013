---

title: Providing a scripting interface to existing code
abstract: To communicate with a software application, internal data of the software application is exposed or otherwise made accessible responsive to injection of computer readable program code comprising a scripting engine into a runtime environment associated with the software application. Computer readable program code comprising a script in accordance with the internal data is loaded. The script is interpretable by the scripting engine for execution with existing code of the software application to alter operation thereof without modification of the existing code. Related methods, systems, and computer program products are also discussed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075601&OS=09075601&RS=09075601
owner: CA, Inc.
number: 09075601
owner_city: New York
owner_country: US
publication_date: 20130307
---
The present disclosure relates to computing systems and methods of interfacing with computing systems.

Virtualized computing environments also referred to as cloud computing systems or composite information technology systems are used to provide computing resources to end users. In a cloud computing environment the physical hardware configuration is hidden from the end user. Cloud computing systems may include servers network storage devices routers gateways communication links software e.g. applications operating systems web services etc. and other devices. However because the physical hardware and software platforms on which cloud computing system is implemented are hidden within a cloud they can be managed upgraded replaced or otherwise changed by a system administrator without the customer being aware of or affected by the change.

In a typical cloud computing environment applications may be executed on virtual machines or appliances which are guest operating systems installed within a host system and an optional preset configuration and structure e.g. combination of operating system and web server . A virtual machine VM can be a software implementation of a machine or computer that executes programs as would a physical machine in a manner that is transparent to a user. Virtual machines are typically implemented with software emulation and or hardware virtualization. A single hardware and or software platform may host a number of virtual machines each of which may have access to some portion of the platform s resources such as processing resources storage resources etc.

In any computing environment interacting with already existing code bases for example to integrate new functionality can present challenges. In particular it may be advantageous to integrate new code with existing code without rewriting the existing code. In one such integration technique an interface of an existing software component or application such as a Simple Object Access Protocol SOAP interface may be digested to discover and or expose methods and application program interfaces APIs of the existing component. A developer may then write a connector for example in Java to interact with the existing component.

Systems methods and computer program products for communicating with existing computer readable program code are disclosed.

According to an embodiment described herein in a method of communicating with a software application internal data of the software application is exposed or otherwise made accessible responsive to injection of computer readable program code comprising a scripting engine into a runtime environment associated with the software application and computer readable program code comprising a script in accordance with the internal data is loaded. The script is interpretable by the scripting engine for execution with existing code of the software application to alter operation thereof without modification of the existing code.

In an embodiment the exposing may be independent of an interface of the software application. For example access to the internal data may be provided using a hook in the existing code. Based on the internal data a location in the existing code to insert the script may be determined and the script may be inserted into the existing code at the determined location.

In an embodiment the script may be based on a different programming language than that of the software application and or the scripting engine. For example the software application and the scripting engine may be based on a static and or compiled programming language and the script may be based on a dynamic and or interpreted programming language. The script may be loaded for execution without mapping the computer readable program code of the script to the programming language of the software application.

In an embodiment the script may be executed in a context of the existing code to provide one or more functionalities that are different from that provided by the software application.

In an embodiment the execution of the script may provide a functionality to instrument a performance of the software application trace execution of the existing code dynamically at runtime determine an interaction of subroutines of the software application and or generate an analysis or suggestion regarding operation of the software application.

In an embodiment the software application may be a first software application and a second software application having the computer readable program code comprising the scripting engine injected into a runtime environment thereof may be discovered. An output or result of the execution may be provided to the second software application. For example the output of the execution of the script may be a result of a native call in the existing code and the result may be provided to the second software application. Additionally or alternatively the output of the execution of the script may be an external call to the second software application and the external call may be provided to the second software application.

In an embodiment responsive to loading of the script a file of the script may be updated to alter operation of the script without recompiling the software application.

In an embodiment the software application may be hosted by a virtual machine and the execution may include conversion of the scripting engine to machine readable program code for execution by the virtual machine in a context of the existing code.

It is noted that aspects described with respect to one embodiment may be incorporated in different embodiments although not specifically described relative thereto. That is all embodiments and or features of any embodiments can be combined in any way and or combination. Moreover other systems methods and or computer program products according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems methods and or computer program products be included within this description be within the scope of the present disclosure and be protected by the accompanying claims.

As will be appreciated by one skilled in the art aspects of the present disclosure may be illustrated and described herein in any of a number of patentable classes or context including any new and useful process machine manufacture or composition of matter or any new and useful improvement thereof. Accordingly aspects of the present disclosure may be implemented as entirely hardware entirely software including firmware resident software micro code etc. or by a combined software and hardware implementation that may all generally be referred to herein as a circuit module component processor or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable media having computer readable program code embodied thereon.

Any combination of one or more computer readable media may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an appropriate optical fiber with a repeater a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing 

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Scala Smalltalk Eiffel JADE Emerald C C VB.NET Python or the like conventional procedural programming languages such as the C programming language Visual Basic Fortran 2003 Perl COBOL 2002 PHP ABAP dynamic programming languages such as JavaScript Python Ruby and Groovy or other programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider or in a cloud computing environment or offered as a service such as a Software as a Service SaaS .

Aspects of the present disclosure are described herein with reference to flowchart illustrations and or block diagrams of methods apparatuses systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable instruction execution apparatus create a mechanism for implementing the functions acts specified in the flowchart and or block diagram block or blocks. Elements described as being to perform such functions acts operations may be configured to or otherwise structured to do so.

These computer program instructions may also be stored in a computer readable medium such as a computer readable storage medium and or a computer readable signal medium that when executed can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions when stored in the computer readable medium produce an article of manufacture including instructions which when executed cause a computer to implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable instruction execution apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatuses or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the present disclosure will be described more fully hereinafter with reference to the accompanying drawings. Other embodiments may take many different forms and should not be construed as limited to the embodiments set forth herein. Like numbers refer to like elements throughout.

It will be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first element could be termed a second element and similarly a second element could be termed a first element without departing from the scope of the present disclosure. As used herein the term and or includes any and all combinations of one or more of the associated listed items.

Unless otherwise defined all terms including technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which the present disclosure belongs. It will be further understood that terms used herein should be interpreted as having a meaning that is consistent with their meaning in the context of this specification and the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.

As described herein a computing environment may include one or more hosts operating systems peripherals and or applications. Machines physical or virtual in a same computing system or environment may have shared memory or resources may be associated with the same or different hardware platforms and or may be located in the same or different physical locations. Computing environments described herein may refer to a virtualized environment such as a cloud environment and or a physical environment.

As also described herein a scripting engine refers to a computer readable program code that is configured to interpret and process or execute a script. The scripting engine may be an interpreter for example a JavaScript interpreter that is written in a static programming language for example Java . A script refers to computer readable program code that is configured to be interpreted and or executed by the scripting engine. The script may be written in dynamic programming language which may refer to a high level programming language that executes at runtime some behaviors that other languages such as a static programming language might perform during compilation. In contrast the software application or environment in which the script may be executed may be written in a static or compiled language.

Some embodiments of the present disclosure arise from realization that digesting an interface of an existing software application for the purpose of writing connector code may be cumbersome particularly with respect to the number of parties involved in the process. Also the programming language of the software application may impose limits with respect to implementation of the connector code. For example a connector for interacting with a software application based on a static or complied programming language may also be required to be implemented using the same programming language.

Accordingly rather than using an interface of an existing software application embodiments of the present disclosure inject a scripting engine also referred to herein as the R2 solution into a runtime environment associated with the existing software application. The scripting engine may automatically expose or provide access to the internal data such as the underlying methods and or application program interfaces of the software application allowing for the loading and execution of connectors written in a different programming language than that of the software application. For example in some embodiments connectors may be scripts written in a dynamic scripting language such as JavaScript even where the software application is based on a static language such as Java .

The scripting engine may thus allow programmatic access to computational objects within the software application including methods thereof. The scripting engine may accomplish this by utilizing pre existing hooks in the existing code loading a script that is configured to perform a desired operation and executing the script directly in the existing code. For example for a Java based application the scripting engine may be injected into the Java runtime and may provide access to all internal data that the Java subsystem exposes. As such a developer may write connectors in JavaScript rather than Java and the connector may be loaded and executed by the scripting engine at runtime. The result may be interpreted and converted into Java bytecode for execution by a Java virtual machine JVM that is hosting the application in the context of the application s existing source code. As such embodiments of the present disclosure can alter operation of the software application for example to provide new functionality without modifying the existing code of the software application.

The hardware platform generally refers to any computer system capable of implementing the machines A C which may include without limitation a mainframe computer platform personal computer mobile computer e.g. tablet computer server wireless communication terminal e.g. cellular data terminal or any other appropriate program code processing hardware. The hardware platform may include computer resources such as a processing circuit s e.g. central processing unit CPU networking controllers communication controllers a display unit a program and data storage device memory controllers input devices such as a keyboard a mouse etc. and output devices such as printers. The processing hardware may include circuit s configured to execute computer program code from memory device s described below as a computer readable storage medium to perform at least some of the operations and methods described herein and may be any conventional processor circuit s such as the AMD Athlon 64 or Intel Core Duo.

The hardware platform may be further connected to the data storage space through serial or parallel connections. The data storage space may be any suitable device capable of storing computer readable data and program code and it may include logic in the form of software applications random access memory RAM or read only memory ROM removable media or any other suitable memory component. Although some embodiments of the computer system can be configured to operate as a computer server the computer system is not limited thereto and can be configured to provide other functionality such as data processing communications routing etc.

Besides acting as a host for computing applications that run on the hardware platform the host operating system may operate at the highest priority level in the system executing instructions associated with the hardware platform and it may have exclusive privileged access to the hardware platform . The priority and privileged access of hardware resources affords the host operating system exclusive control over resources and instructions and may preclude interference with the execution of different application programs or the operating system. The host operating system can create an environment for implementing a virtual machine hosting the guest virtual machines A C. One host operating system is capable of implementing multiple isolated virtual machines simultaneously.

The virtual hypervisor which may also be known as a virtual machine monitor manager or VMM may run on the host operating system and provides an interface between the machines A C and the hardware platform through the host operating system . The hypervisor virtualizes the computer system resources and facilitates the operation of the managed machines . The hypervisor may provide the illusion of operating at the highest priority level to the guest operating systems A C. However the virtual hypervisor can map the guest operating system s priority level to a priority level lower than the top most priority level. As a result the virtual hypervisor can intercept the guest operating systems A C and execute instructions that require virtualization assistance. Alternatively the virtual hypervisor may emulate or actually execute the instructions on behalf of the guest operating systems A C. Software steps permitting indirect interaction between the guest operating systems A C and the physical hardware platform can also be performed by the virtual hypervisor .

When operating in a virtualized environment the machines A C present a virtualized environment to the guest operating systems which in turn provide an operating environment for applications and other software constructs.

Still referring to each of the machines A C also includes computer readable program code defining a scripting engine that has been introduced into a runtime environment thereof by code injection . The injected scripting engine provides a platform for scripting existing software applications such as the applications A C without modifying the existing code bases of the applications A C. The scripting engine may be an interpreter written in a same programming language as one or more of the applications A C. For example the scripting engine can be injected into existing Java based software applications A C where there is no scripting environment or to add an additional auxiliary scripting mechanism. Once injected the scripting engine can load and execute scripts to provide the existing applications A C with additional functionality. As such the scripting engine provides an umbrella approach whereby code injection and scripting can be used to change the behavior of the software applications A C to implement additional functionality that would not otherwise be provided thereby and without modifying the existing code of the applications A C.

For example the scripting engine may be configured to receive and load a script that provides the functionality to instrument existing code bases in one or more of the applications A C. Instrumenting can include for example feature enhancement and or bug fixes. For example the scripting engine may be configured to load a script that when executed can instrument existing Java code and or load native code via a native library loader. A full JavaScript runtime can be provided via a standard Java component such as Rhino providing enhanced flexibility. The scripting engine may also be configured to receive and load a script to find and instrument existing objects in memory. Accordingly the scripting engine may allow users or developers to change the behavior of running applications or applications at load time without modifying the actual source code of the host software A C.

The scripting engine may be further configured to receive and load a script that when executed can interrogate existing code bases. In particular a script may be received that provides the functionality to trace existing code dynamically at runtime. This may allow a user or developer to determine the interaction of function calls method calls and or inter product communications via networks. In addition using the results of the tracing the scripting engine may be configured to receive and load a script that performs automated analysis and make suggestions about integrations performance problems and find potential bugs and suggest fixes.

Accordingly injection of a scripting engine as described herein can allow users developers to script their own use of existing software applications A C. In some embodiments the scripting engine may also include its own JavaScript application program interface API . In addition the scripting engine can also allow for a less powerful automated representational state transfer REST API generation for example for calls implemented within the JavaScript Evaluation environment for integration with other web technologies. In particular capabilities of the scripting engine described herein can include but are not limited to load time instrumentation of existing Java based applications runtime injection of scripting environment into Java based applications full JavaScript evaluation environment based on Rhino distributed node discovery via multicast domain name system MDNS dynamic Java code instrumentation native library loader JavaScript API API tracing and call graph generation for products raw REST API generation from call graphs and automated analysis of call graphs to suggest integrations and fixes.

Although illustrated by way of example in with respect to managed virtual machines in a virtual computing environment it will be understood that introduction of a scripting engine into a computing environment using code injection in accordance with embodiments of the present disclosure may be applied to managed machines in physical computing environments and or cloud computing environments as well. Also while illustrated in with reference to specific functions performed by specific blocks it will be understood that the functionality of blocks shown herein may be combined divided or eliminated.

The cloud may include a plurality of server systems that are communicatively coupled via a network . The network facilitates wireless and or wireline communication and may communicate using for example IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may include one or more local area networks LANs radio access networks RANs metropolitan area networks MANS wide area networks WANs all or a portion of the global computer network known as the Internet and or any other communication system or systems at one or more locations. Although referred to herein as server systems it will be appreciated that any suitable computing device may be used.

As shown in computer readable program code defining a scripting engine is injected into a runtime environment of one or more applications hosted by each of the server systems . As discussed above with reference to the scripting engine may be configured to expose or otherwise provide access to the internal data of the applications and to load one or more scripts for execution in the context of the existing code of the application. The injected scripting engine may provide a platform to add functionalities and or otherwise alter operation of the applications hosted by the computer systems without modifying the existing code. For example as described in greater detail below scripts may be loaded by the scripting engine to allow for discovery and communication between one or more applications executing on the various computer systems via the network .

Still referring to each injected engine provides a platform for altering operation of the software applications A C without modifying the existing code bases A C of the applications A C. In particular injection of the scripting engine provides an interface such as a HTTP interface into the respective environments of each of the application A C. As such in accordance with the exposed internal data one or more scripts W Z can be written and loaded by the scripting engine . The scripts W Z may be written in a different programming language than that of the applications A C. For example the applications A C may be based on a static language in which errors are detected at compilation such as Java while the scripts may be written in a dynamic language where errors are detected at runtime such as JavaScript. The loaded script s W Z may thus be executed by the engine in the context of the existing code A C of the software applications A C.

The scripts W Z may be configured to introduce various functionality that is not provided by the existing applications A C and or may access the existing subroutines methods of the applications A B and or C. For example if application A includes a class called A.look.up then upon loading an appropriate one of the scripts W Z the scripting engine could enumerate and call A.look.up. The scripts W Z may also be updated to reflect changes in the existing applications A C and or otherwise alter operation thereof without having to recompile the applications A C. For example if in an upgrade to application A the call A.look.up was deprecated or required extra parameters a file associated with the script W could simply be updated to reflect this change instead of having to recompile the application A. Also to add a method to an object a function call can be added to the respective code bases of one or more of the dynamic scripts W X Y and or Z. Likewise to remove the function call a plain text file of the dynamic scripts W X Y and or Z may be updated without requiring repackaging or recompiling of the applications A B and or C.

The scripting engine is also configured to find other instances of the scripting engine dynamically and or in real time. In particular in the example of the instance of the scripting engine injected into the runtime environment of application A is configured to automatically discover the instances of the scripting engine injected into the runtime environments of applications B and C allowing for communication and interoperability between one or more otherwise unrelated software applications A C. For example upon loading a corresponding one of the scripts W Z written to provide the desired functionality a function call could be executed that took the results for the existing call A.look.up of application A and combined the results with an existing call B.phone.num of application B. More particularly in an example where application A is an asset management tool and application B is a company directory tool a script could be loaded and executed to take the results of an existing function call in application A to look up all assets on Floor and combine these results with the results of an existing function call in application B to determine the phone numbers of the owners of each of the assets on Floor . In other words the scripting engine may be configured upon loading of a script that provides the functionality to provide an output of the execution on application A to the application B and the application B may be configured to create a native call using the output.

Furthermore as the scripting engine is injected into multiple applications A C a scriptable external call may be written. For example a script may be loaded by the instance of the scripting engine of application A that executes an external call to a function of application B. So the scripting environment is not only limited to application A or application B or application C but could contain calls to any or all three environments semi transparently. In addition as the scripting engine is configured to allow the nodes A C to have knowledge of each other scripts W Z that are written to run on application A could also be loaded and run on applications B and or C with little to no modification.

The script W is interpreted by the scripting engine which is converted into Java bytecode and executed by the JVM that is hosting application A in a context of the existing code A at block . Responsive to execution of the script W the performance of the software application A is instrumented at block and the execution of the existing code A is traced at block . For example the instrumenting and tracing may record and output logging information about the execution of the software application A at runtime. Interaction s of one or more function calls and method calls in the existing code A is determined at block and analysis suggestions based on the determined interactions are provided at block . For example the analysis may result in suggestions with respect to integration performance issues and or potential bugs relating to application A.

Still referring to responsive to execution of the script one or more other software applications B and or C having instances of the scripting engine injected into their respective runtime environments are dynamically discovered at block . As such at least one output of the execution of the script W is communicated to the other software applications B and or C at block . For example a result of the pre existing or new function provided by the script W may be transmitted to the application B for use thereby. Additionally or alternatively a function call to a pre existing or new function of the application B may be communicated to the application B responsive to execution of the script W. As such based on injection of the scripting engine the applications A C may be provided with new functionality and or interoperability without altering or modifying the existing code bases A C.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various aspects of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular aspects only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of any means or step plus function elements in the claims below are intended to include any disclosed structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The aspects of the disclosure herein were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure with various modifications as are suited to the particular use contemplated.

Many different embodiments have been disclosed herein in connection with the above description and the drawings. It will be understood that it would be unduly repetitious and obfuscating to literally describe and illustrate every combination and subcombination of these embodiments. Accordingly all embodiments can be combined in any way and or combination and the present specification including the drawings shall support claims to any such combination or subcombination.

In the drawings and specification there have been disclosed typical embodiments and although specific terms are employed they are used in a generic and descriptive sense only and not for purposes of limitation the scope of the invention being set forth in the following claims.

