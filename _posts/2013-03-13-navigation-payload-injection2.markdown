---

title: Navigation payload injection
abstract: Described are techniques for event processing. Notification may be received at a navigation service of a first event regarding an interaction with a user interface element of a user interface of an application. The notification may include a set of one or more source parameters describing context information about the notification and information identifying a navigation point in the application. Responsive to receiving the notification, the navigation service may perform first processing that includes identifying first target code of the application to be invoked to update the user interface to include a content view associated with the navigation point, mapping the set of one or more source parameters to a set of one or more target parameters in accordance with first metadata, and transferring control to the first target code. The set of one or more target parameters may be provided as input parameters to the first target code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09575617&OS=09575617&RS=09575617
owner: EMC IP Holding Company LLC
number: 09575617
owner_city: Hopkinton
owner_country: US
publication_date: 20130313
---
Computer systems may include different resources used by one or more host processors. Resources and host processors in a computer system may be interconnected by one or more communication connections. These resources may include for example data storage devices such as those included in the data storage systems manufactured by EMC Corporation. These data storage systems may be coupled to one or more servers or host processors and provide storage services to each host processor. Multiple data storage systems from one or more different vendors may be connected and may provide common data storage for one or more host processors in a computer system.

A host processor may perform a variety of data processing tasks and operations using the data storage system. For example a host processor may perform basic system I O operations in connection with data requests such as data read and write operations.

Host processor systems may store and retrieve data using a data storage system including a plurality of host interface units disk drives and disk interface units. The host systems access the data storage system through a plurality of channels provided therewith. Host systems provide data and access control information through the channels and the storage system provides data to the host systems also through the channels. The host systems do not address the disk drives of the storage system directly but rather access what appears to the host systems as a plurality of logical disk units. The logical disk units may or may not correspond to the actual disk drives. Allowing multiple host systems to access the single data storage system allows the host systems to share data stored in the storage system. In order to facilitate sharing of the data on the data storage system additional software on the data storage systems may also be used.

In connection with an application for management of data storage systems or more generally any application a user interface may be displayed. Existing applications providing a user interface may control various aspects of user interface UI elements such as visual aspects of buttons displayed text and the like by setting properties of the user interface elements within the application code.

In accordance with one aspect of the invention is a method of event processing comprising receiving notification at a navigation service of a first event regarding an interaction with a user interface element of a user interface of an application said notification including a set of one or more source parameters describing context information about the notification and including information identifying a navigation point in the application and responsive to receiving the notification performing first processing by the navigation service the first processing including identifying first target code of the application to be invoked to update the user interface to include a content view associated with the navigation point mapping said set of one or more source parameters to a set of one or more target parameters in accordance with first metadata and transferring control to the first target code whereby said set of one or more target parameters are provided as input parameters to the first target code. The notification may be sent to the navigation service by a web browser executing code of the user interface of the application. The first target code may dynamically modify one or more aspects of the currently displayed content. The first target code may dynamically modify a document object model used by the web browser. The first target code may dynamically create a new object or modify an existing object of the document object model. The first target code may perform a call to a server to request first data used to populate a user interface element having a corresponding object in the object model whereby the corresponding object may be any of dynamically created or modified by the first target code. A navigational structure file may be provided as an input to the navigation service. The navigation structure file may include a description of a hierarchical structure describing the navigational flow of the application. The hierarchical structure may include objects corresponding to different navigation points of the application whereby interaction with a user interface element causes transition or navigation from a first navigation point of the application to a second navigation point of the application as described in the hierarchical structure. Each navigation point of the application may be represented by a node in the hierarchical structure where said each navigation point may be associated with a content view. The hierarchical structure may form a tree structure of a plurality of nodes corresponding to a plurality of navigation points of the application. The tree structure may include a plurality of levels. Each of the plurality of levels may include one or more nodes. The tree structure may include a root node at first level and one or more nodes at one or more other levels and one or more leaf nodes. A first content view may be associated with a first node that is not a leaf node and may represent a first navigation point of the hierarchical structure. The first content view may include a first user interface element which when selected results in navigation to a second content view associated with a second node representing a second navigation point of the hierarchical structure. The first node may be a parent node of the second node and the second node may be a child node of the first node. The hierarchical structure of the navigational structure file may include a first node representing said navigation point and the content view. The navigational structure file may include additional information for the first node. The additional information may include information identifying the first target code of the application and identifying the first metadata. The first metadata may identify any of a correspondence between the set of one or more source parameters and the set of one or more target parameters mapping a first of the source parameters having a first position in the source parameters to a second of the target parameters having a second position in the target parameters whereby the first position denotes a different positional ordering in the source parameters than the second position denotes with respect to the target parameters mapping one of the source parameters having a first data type to one of the target parameters having a second data type different than the first data type and mapping one of the source parameters having a first format or layout to one of the target parameters having a second format or layout different than the first format or layout. The user interface element may be any of a menu a menu bar a menu item a text box a button a navigation section including one or more hyperlinks a hyperlink a table a table item table row table column a drop down list a list box a check box a dialog box a wizard and a combo box.

In accordance with another aspect of the invention is a computer readable medium comprising code stored thereon for event processing the computer readable medium comprising code for receiving notification at a navigation service of a first event regarding an interaction with a user interface element of a user interface of an application said notification including a set of one or more source parameters describing context information about the notification and including information identifying a navigation point in the application and responsive to receiving the notification performing first processing by the navigation service the first processing including identifying first target code of the application to be invoked to update the user interface to include a content view associated with the navigation point mapping said set of one or more source parameters to a set of one or more target parameters in accordance with first metadata and transferring control to the first target code whereby said set of one or more target parameters are provided as input parameters to the first target code. The notification may be sent to the navigation service by a web browser executing code of the user interface of the application. The first target code may dynamically modify one or more aspects of the currently displayed content. The first target code may dynamically modify a document object model used by the web browser. The first target code may dynamically create a new object or may modify an existing object of the document object model. The first target code may perform a call to a server to request first data used to populate a user interface element having a corresponding object in the object model whereby the corresponding object may be any of dynamically created or modified by the first target code. A navigational structure file may be provided as an input to the navigation service. The navigation structure file may include a description of a hierarchical structure describing the navigational flow of the application. The hierarchical structure may include objects corresponding to different navigation points of the application whereby interaction with a user interface element may cause transition or navigation from a first navigation point of the application to a second navigation point of the application as described in the hierarchical structure. The hierarchical structure of the navigational structure file may include a first node representing the navigation point and the content view and wherein the navigational structure file may include additional information for the first node. The additional information may include information identifying the first target code of the application and identifying the first metadata.

Referring to shown is an example of an embodiment of a system that may be used in connection with performing the techniques described herein. The system includes one or more data storage systems connected to server or host systems through communication medium . The system also includes a management system connected to one or more data storage systems through communication medium . In this embodiment of the system the management system and the N servers or hosts may access the data storage systems for example in performing input output I O operations data requests and other operations. The communication medium may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. Each of the communication mediums and may be a network connection bus and or other type of data link such as a hardwire or other connections known in the art. For example the communication medium may be the Internet an intranet network or other wireless or other hardwired connection s by which the host systems may access and communicate with the data storage systems and may also communicate with other components not shown that may be included in the system . In one embodiment the communication medium may be a LAN connection and the communication medium may be an iSCSI or Fibre Channel connection.

Each of the host systems and the data storage systems included in the system may be connected to the communication medium by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium . Similarly the management system may be connected to the communication medium by any one of variety of connections in accordance with the type of communication medium . The processors included in the host computer systems and management system may be any one of a variety of proprietary or commercially available single or multi processor system such as an Intel based processor or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.

It should be noted that the particular examples of the hardware and software that may be included in the data storage systems are described herein in more detail and may vary with each particular embodiment. Each of the host computers the management system and data storage systems may all be located at the same physical site or alternatively may also be located in different physical locations. In connection with communication mediums and a variety of different communication protocols may be used such as SCSI Fibre Channel iSCSI and the like. Some or all of the connections by which the hosts management system and data storage system may be connected to their respective communication medium may pass through other communication devices such as switching equipment that may exist such as a phone line a repeater a multiplexer or even a satellite. In one embodiment the hosts may communicate with the data storage systems over an iSCSI or a Fibre Channel connection and the management system may communicate with the data storage systems over a separate network connection using TCP IP. It should be noted that although illustrates communications between the hosts and data storage systems being over a first connection and communications between the management system and the data storage systems being over a second different connection an embodiment may also use the same connection. The particular type and number of connections may vary in accordance with particulars of each embodiment.

Each of the host computer systems may perform different types of data operations in accordance with different types of tasks. In the embodiment of any one of the host computers may issue a data request to the data storage systems to perform a data operation. For example an application executing on one of the host computers may perform a read or write operation resulting in one or more data requests to the data storage systems .

The management system may be used in connection with management of the data storage systems . The management system may include hardware and or software components. The management system may include one or more computer processors connected to one or more I O devices such as for example a display or other output device and an input device such as for example a keyboard mouse and the like. A data storage system manager may for example view information about a current storage volume configuration on a display device of the management system provision data storage system resources and the like.

In one embodiment the data storage systems may include one or more data storage systems such as one or more of the data storage systems such as data storage arrays offered by EMC Corporation of Hopkinton Mass. Each of the data storage systems may include one or more data storage devices such as disks. One or more data storage systems may be manufactured by one or more different vendors. Each of the data storage systems included in may be inter connected not shown . Additionally the data storage systems may also be connected to the host systems through any one or more communication connections that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements such as those related to bandwidth and throughput required in accordance with a rate of I O requests as may be issued by the host computer systems for example to the data storage systems . It should be noted that each of the data storage systems may operate stand alone or may also be included as part of a storage area network SAN that includes for example other components such as other data storage systems. Each of the data storage systems may include a plurality of disk devices or volumes . The particular data storage systems and examples as described herein for purposes of illustration should not be construed as a limitation. Other types of commercially available data storage systems as well as processors and hardware controlling access to these particular devices may also be included in an embodiment.

In such an embodiment in which element of is implemented using one or more data storage systems each of the data storage systems and management system may include code thereon for performing the techniques as described herein.

Servers or host systems such as provide data and access control information through channels to the storage systems and the storage systems may also provide data to the host systems also through the channels. The host systems may not address the disk drives of the storage systems directly but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of logical devices or logical volumes LVs . The LVs may or may not correspond to the actual disk drives. For example one or more LVs may reside on a single physical disk drive. Data in a single storage system may be accessed by multiple hosts allowing the hosts to share the data residing therein. An LV or LUN logical unit number may be used to refer to the foregoing logically defined devices or volumes.

The data storage system may be a single unitary data storage system such as single data storage array including two service processors or compute processing units. Techniques herein may be more generally use in connection with any one or more data storage system each including a different number of service processors than as illustrated herein. The data storage system may be a data storage array such as a VNX data storage array by EMC Corporation of Hopkinton Mass. including a plurality of data storage devices and two service or storage processors . The service processors may be computer processing units included in the data storage system for processing requests and commands. In connection with performing techniques herein an embodiment of the data storage system may include multiple service processors including more than two service processors as described. The VNX data storage system mentioned above may include two service processors for performing processing in connection with servicing requests. Additionally the two service processors may be used in connection with failover processing when communicating with the management system . Client software on the management system may be used in connection with performing data storage system management by issuing commands to the data storage system and or receiving responses from the data storage system over connection . In one embodiment the management system may be a laptop or desktop computer system.

The particular data storage system as described in this embodiment or a particular device thereof such as a disk should not be construed as a limitation. Other types of commercially available data storage systems as well as processors and hardware controlling access to these particular devices may also be included in an embodiment.

Referring to shown is an example of an embodiment of the data storage system that may be included in the system of . Included in the data storage system of are one or more data storage systems as may be manufactured by one or more different vendors. Each of the data storage systems may be a data storage array inter connected not shown to other data storage array s . Additionally as noted above the data storage systems may also be connected to the host systems through any one or more communication connections . In this example as described in more detail in following paragraphs reference is made to the more detailed view of element . It should be noted that a similar more detailed description may also apply to any one or more of the other elements such as but have been omitted for simplicity of explanation.

Each of the data storage systems such as may include a plurality of storage devices such as disk devices or volumes included in an arrangement consisting of n rows of disks or more generally data storage devices . In this arrangement each row of disks may be connected to a disk adapter DA or director responsible for the backend management of operations to and from a portion of the disks . In the system a single DA such as may be responsible for the management of a row of disks such as row . In a data storage system such as by EMC Corporation a backend DA may also be referred to as a disk controller. The DA may performed operations such as reading data from and writing data to the physical devices which are serviced by the DA.

The system may also include one or more storage processors . Each of the storage processors may be CPU and an embodiment may include any number of such processors. For example the VNX data storage system by EMC Corporation includes two storage processors. The system may also include one or more host adapters HAs or directors . Each of the HAs may be used to manage communications and data operations between one or more host systems and the global memory. In an embodiment the HA may be a Fibre Channel Adapter FA or other adapter which facilitates host communication. The HA communicates with a component of the host such as a host bus adapter HBA . Generally directors may also be characterized as the different adapters such as HAs including FAs DAs RAs and the like as described herein. Components of the data storage system such as an HA which may communicate with a host may also be referred to as front end components. Within the data storage system components which may be characterized as backend components communicate with a front end component. An example of a backend component is a DA. In connection with data storage systems such as by EMC Corporation various types of directors or adapters may be implemented as a processor or more generally a component that includes the processor. Examples of directors are disk adapters DAs host adapters HAs and the like.

One or more internal logical communication paths may exist between the DAs the RAs the HAs and the memory . An embodiment for example may use one or more internal busses and or communication modules. For example the global memory portion may be used to facilitate data transfers and other communications between the DAs HAs and RAs in a data storage system. In one embodiment the DAs may perform data operations using a cache that may be included in the global memory for example in communications with other disk adapters or directors and other components of the system . The other portion is that portion of memory that may be used in connection with other designations that may vary in accordance with each embodiment.

Also shown in the storage system is an RA or remote adapter . The RA may be hardware including a processor used to facilitate communication between data storage systems such as between two of the same or different types of data storage systems.

A configuration of a data storage system may be described by data storage configuration information. The data storage configuration information may describe various entities attributes and the like about how the physical storage systems and devices are configured such as by a manager or system administrator. For example the data storage configuration information may identify and describe LUNs file systems RAID groups and the like as may be formed using the physical data storage of the data storage system. With reference back to in one embodiment management software may be executing on the management system where the user may be issuing requests in connection with reading and or writing data storage configuration information that may be stored on physical storage device of the data storage system . More generally the management system may be referred to as a client issuing requests to the data storage system which acts as a server to service the client requests e.g. read and write requests for data storage configuration information.

In general a storage area network SAN may be characterized as a collection of data storage systems that are networked together via a switching fabric to a number of host computer systems operating as servers such as illustrated in .

Data storage management applications may include a graphical user interface GUI that enables a network manager to graphically manage control and configure various types of hardware and software resources associated with a corresponding managed storage area network and its data storage systems. The management application may execute for example on the management system of . The management application may generate a graphical user interface utilized by a storage administrator to graphically select interact with and manage local or remote devices and software processes associated with the storage area network. Based on use of the graphical user interface in combination with an input device e.g. tablet pen or stylus hand operated mouse and corresponding pointer displayed on a viewing screen or other display a storage administrator is able to manage hardware and software entities such as file systems databases storage devices volumes peripherals network data communications devices etc. associated with the storage area network. Consequently the storage management system and associated management software enables a storage administrator a person responsible for managing the storage network to manage the storage area network and its resources.

One example of this kind of GUI includes a screen presentation that may include toolbars with accompanying menus and menu items as well as displays such as graphs tables maps or trees. The management application providing the GUI may be written in any suitable language such as JavaScript Flex and the like.

Described in following paragraphs are techniques that may be used in connection with web based GUI frameworks such as may be included in the GUI of a data storage management application which may use generic navigation code such as of a navigation service. The navigation code may control the overall flow of the application such as via UI navigation and may support deep linking so that the user can make use of browser functionality such as the browser back forward button and bookmark pages in context. In connection with the navigation service techniques are described in following paragraphs that allow a payload such as data in the form of one or more parameters to be passed at each level within the deep linking since some working pages need additional context to function. Techniques herein may be used to reduce coupling of the working page e.g. such as displayed by a web browser using code of an application s UI and the navigation service e.g. which may be characterized as generic and used in connection with multiple different applications and their UIs so that the working page may be unaware of the navigation service. Techniques described in following paragraphs provide for automatically injecting the payload during page creation instead of the page pulling content from the navigation service. Additionally techniques herein may provide for customizing payload specific to a particular page. Such customization may include using metadata for mapping or manipulating information as used by the navigation service to have a customized form expected for use by code used in updating and rendering a current UI display. Such metadata may be specified in an external navigation configuration file.

In connection with the above mentioned techniques and embodiments thereof a web browser or browser such as Internet Explorer by Microsoft Corporation Firefox and the like may be used to retrieve process and present resources. The resources may be web pages such as HTML hyper text markup language documents as well images videos as other content. A resource that is a web page may be written in a language such as HTML whereby HTML may be characterized as a tag based language. The browser does not display the HTML tags but rather uses the tags to interpret the contents of the page. The browser reads and interprets the HTML documents and composes or renders them into visible or audible web pages. In other words the browser does not display the HTML tags but uses the tags to interpret the content of the page. An HTML document may reference various resources which may be retrieved in connection with rendering the document for display as a webpage. The resources retrieved in connection with rendering the webpage may be identified using URLs uniform resource locators referenced within the HTML document. Thus a first HTML document may reference or provide a link to a second HTML document or more generally any second resource. For example the HTML document may include appropriate HTML tags such as the tag e.g. Hyperlink Code specifying a hyperlink to another second HTML document. The second HTML document may be retrieved and loaded into the web browser upon selection of the hyperlink. Hyperlinks allowing for connection between different web pages if a particular hyperlink is selected may be characterized as the navigational flow of an application. This is described in more detail below.

A web browser may be used in connection with requesting one or more resources such as documents including various types of content for processing and or display by the web browser. Generally the web browser or browser may be characterized as a software application for retrieving presenting interpreting traversing and or processing information resources such as may be obtained from one or more internet locations or websites e.g. servers or hosts have an IP address . A web page processed by the web browser may be a document or file or more generally a resource such as an HTML hyper text markup language file written in accordance with the HTML language that may include tags. The resource identified by a URL may be an HTML file or document an image a video a multi media file an application e.g. a resource including executable code or instructions a script e.g. containing instructions or more generally any allowable information or content that may be processed for use with the web browser in connection with rendering a web page. Each URL included in an HTML file may denote a resource which the web browser automatically requests from the identified location in the URL when processing the HTML file for display as a webpage in a window. As also known in the art an HTML file such as processed by the browser may also include instructions in the form of a scripting language such as JavaScript .

A deep link may be characterized as a hypertext link to a resource or page on a website other than its homepage. The use of deep in this context of deep linking generally refers to the depth of the page in a site s hierarchical structure of pages. Any page or more generally content identified using a URL to identify the content location below the top page in the hierarchy e.g. the home page can thus be considered deep. For example www.xyz.home may refer to a top level page or URL in a hierarchy and www.xyz.home.level1 may be characterized as a deep link referring to a page or resource at a site at other than the top level.

To render a document such as an HTML page most web browsers use an internal object model such as a document object model DOM e.g. such as the DOM by W3C the World Wide Web Consortium . With DOM the nodes of every document are organized in a tree structure also referred to as the DOM tree with the topmost node named Document object . When an HTML page is rendered in a browser the browser downloads the HTML into local memory and automatically parses it to display the page on a screen. The DOM is also a way in which JavaScript may transmit the state of the browser in HTML pages. A web browser may rely on a layout engine to parse input files such as HTML and other input files into a DOM. The DOM may be defined as a platform and language neutral interface that allows programs and scripts to dynamically access and update the content structure and style of a document. The DOM may be characterized as an object model defining a logical structure of documents and the way a document is accessed and manipulated. The term document may be used to more generally represent many different kinds of information or data. XML and HTML for example present this data as documents and the DOM may be used to manage this data. With the DOM programmers can build documents navigate their structure and add modify or delete elements and content. For example any object created as a result of executing statements of an HTML or XML document can be accessed changed deleted or added using the DOM.

With the DOM documents are modeled using objects and the model encompasses the structure of a document and also the behavior of a document and the objects of which it is composed. As an object model the DOM may be characterized as identifying the interfaces and objects used to represent and manipulate a document the semantics of these interfaces and objects including both behavior and attributes and the relationships and collaborations among these interfaces and objects. For example an input file such as an HTML file processed by a browser may include a definition for a table having a particular structure content and attributes. The DOM may be used to represent the content e.g. data of table elements structure e.g. number of rows columns and style e.g. attributes of displayed text as bold font size location of the table in a defined area of a display of objects in the document such as the table. An embodiment may use a language such as XML or HTML to describe the objects corresponding to information rendered in a display by the browser.

Websites which are built on web technologies such as Adobe Flash and AJAX Asynchronous JavaScript and XML may not support deep linking. This can result in usability problems for people visiting such websites. For example visitors to these websites may be unable to save bookmarks to individual pages of the site web browser forward and back buttons may not work as expected and use of the browser s refresh button may return the user to the initial page. AJAX may be characterized as a group of interrelated web development e.g. JavaScript and XML or JavaScript and JSON JavaScript Object Notation technologies used on the client side to create both synchronous and asynchronous web applications. With AJAX web applications may for example can send data to and retrieve data from a server asynchronously e.g. in the background without interfering with the display and behavior of the existing page. Data may be retrieved for example by issuing HTTP requests. With AJAX for example HTML and CSS Cascading Style Sheets described elsewhere in more detail may be used in combination to mark up and style information. Also the DOM may be accessed with JavaScript to dynamically display and to allow the user to interact with the information presented. JavaScript and the use of HTTP requests for specified data may be used for exchanging data asynchronously between browser and server to avoid full page reloads. JSON is a text based open standard designed for human readable data interchange based on the JavaScript scripting language for representing objects. As noted above JSON may be used an alternative to XML.

Dynamic HTML DHTML may be characterized as a term referring to a collection of technologies used together to create interactive and animated websites using a combination of a static markup language such as HTML a client side scripting language such as JavaScript a presentation definition language such as CSS or cascading style sheets and the DOM. DHTML allows scripting languages to change variables in a web page s definition language which in turn affects the look and function of otherwise static HTML page content after the page has been fully loaded and during the viewing process. Thus the dynamic characteristic of DHTML is the way it functions while a page is viewed not in its ability to generate a unique page with each page load. DHTML allows for use of a scripting language for example to change the DOM to change associated style and or to change displayed content. As noted above DHTML may be characterized collectively as a product of related and complementary technologies such as for example HTML Cascading Style Sheets CSS and Javascript. To allow scripts and components to access features of HTML and CSS the contents of the document may be represented as objects in a programming model such as the DOM.

The DOM may include an API application programming interface providing a structured interface that allows access and manipulation of virtually anything in the document. The HTML elements in the document are available as a hierarchical tree of individual objects meaning you can examine and modify an element and its attributes by reading and setting properties and by calling methods. The text between elements is also available through DOM properties and methods. The DOM also provides access to user actions such as for example pressing a key and clicking the mouse. Such actions may be examples of events that may be intercepted and processed by registered event handler functions and routines. The event handler receives control each time a given event occurs and can carry out any appropriate action including using the DOM to change the document.

Styles may be generally characterized as attributes of different elements that may be described in an HTML file whereby styles relate to how to display or affect visual aspects of such elements. For example styles relate to font color whether to bold and the like. CSS refers to external style sheets where style information e.g. formatting and appearance may be specified in files separate from HTML files using such style information. Dynamic styles such as using CSS may provide for modifying the appearance and formatting of elements in a document without adding or removing elements. The DOM may also provide programmatic access to styles. This means a programmer may change inline styles on individual elements and change style rules using script based programming. These scripts can be written in any language supported by the target browser such as JavaScript Microsoft JScript or Microsoft Visual Basic Scripting Edition VBScript . Inline styles are CSS style assignments that have been applied to an element using the style attribute. A programmer may examine and set these inline styles by retrieving the style object for an individual element. For example to highlight the text in a heading when the user moves the mouse pointer over it the style object may be used to enlarge the font and change the color of displayed text.

Data binding is a DHTML feature for binding individual elements in a document to data from another source such as a database or comma delimited text file. When the document is loaded the data is automatically retrieved from the source and formatted and displayed within the element. For example data binding may be used to automatically and dynamically generate tables in a document such as by binding a table element to a data source. When the document is viewed a new row is created in the table for each record retrieved from the source and the cells of each row may be filled with text and data from the fields of the record. Because this generation is dynamic the user can view the page while new rows are created in the table. Additionally once all the table data is present scripting code in the document may be used for example to manipulate e.g. sort or filter the table data without requiring the server to send additional data. The table may be regenerated using the previously retrieved data to fill the new rows and cells of the table. As another example data binding with DHTML may be used to bind one or more elements in the document to specific fields of a given record or form. When the page is viewed the elements are filled with text and data from the fields in that record sometimes called the current record. The user of the UI may view the content also change that content by changing the settings and values of the form. The user can then submit these changes so that the new data is uploaded for example to a server.

In accordance with techniques herein an embodiment may provide for dynamically updating the contents of a web page making calls as needed to the server to obtain such contents without reloading changing and or refreshing the current web page. An embodiment may use a navigation services described in more detail below and may use DHTML techniques and technologies to perform the foregoing dynamic updating of different aspects of the current web page. For example the DOM of the current page may be modified and the content of the page may be modified. As needed content may be retrieved from the server. Additionally an embodiment in accordance with techniques herein may use metadata to customize parameters providing further context of a particular UI navigation to code of an application s UI.

Referring to shown is an example of components that may be included in a system for use with techniques herein. The example includes a navigational NAV service a navigational structure file a web browser and a server . In one embodiment the components and may all reside in a single computer system such as the management system of . The components and may be included in a client application such as the data storage management application. More specifically the management application may include GUI application code which is executed by a web browser. For example the GUI application code may include JavaScript code which runs in the browser . The browser may include a JavaScript JS engine which performs processing to parse interpret and execute the GUI application code . The management application including GUI application code may have a navigational structure or application flow as described in the NAV structure file which will be described in more detail below. The management application including GUI application code for providing the application s GUI through the browser may use the NAV service and the NAV structure file to provide for navigation control flow through the management application thereby responding to events generated due to user selections and interactions with the GUI displayed in the browser . The NAV service may be characterized as a generic service or generic navigation code that may be utilized by the GUI of the management application as well as more generally any application having its navigational structure and flow described in to provide for navigation control flow through the application thereby responding to events generated due to user selections and interactions with the GUI displayed in the browser . In following paragraphs reference may be made to the particular data storage management application and its GUI code also referred to as a client being used to manage a server that represents one or more data storage systems. However the techniques described herein using the NAV service and GUI code of the application may be used more generally in connection with any application functioning as a client and any server.

The GUI application code may include multiple code modules or components e.g. different dialogues wizards and the like of the UI written by different developers such as to support different GUI features. For example as described in more detail below the application s UI may be partitioned at a high level into multiple navigational sections whereby each such section may include a portion of the overall navigational flow of the GUI. Within each navigational section a user may interact with the GUI causing traversal or navigation between different navigation points each causing display of different content UI elements and the like also referred to herein as a content view. Thus the selection or interaction of a user with a UI element may function as a navigational link between different navigation points each having different associated content views displayed in response to UI navigation to each particular navigation point. The application s entire navigational structure may be described in the NAV structure file which may link together the various UI navigational flows or paths that may be taken by a user interacting with the application s GUI. For example a user may make a series of menu selections select particular links and other UI interactions each resulting in display of different content views. The NAV structure file may thus be characterized as describing the application s UI navigational flow that may include multiple components of the UI. In this manner the NAV structure file may tie together the overall application GUI navigational flow with the individually developed navigational sections and portions thereof including different code portions used to generate different content views whereby each such code portion may be navigationally unaware of other content views and or the overall navigational flow described by NAV structure file .

Although following paragraphs may provide exemplary uses of techniques herein with data storage management it will be appreciated by those skilled in the art that techniques herein have broader use and applicability more generally with any type of UI having associated content views displayed. For example techniques herein may be generally used with any application having a UI with a workflow reflected in connection with a series UI elements e.g. such as menus tabs buttons data input fields and the like the different user responses and selections and the resulting UI content views displayed in response to such various user inputs and selections from such UI elements. The foregoing may be represented in a hierarchal manner of different UI content views displayed in response to user inputs and or selections for displayed UI elements.

A content view may be characterized as what data or content is displayed and how such data is represented in connection with a UI at a point in time. The data or content may include for example a list of detailed information about a single host or single LUN. Depending on the particular detailed information the list of detailed information may be displayed on the UI in any one of a variety of different UI elements or structures such as a table chart graph menu list and the like. Further a particular UI element such as a menu or selection button may further be represented in different ways based on other attributes. For example a menu may be a drop down menu or the menu items may rather be displayed as a set of tabs. A table may have different display options related to spacing sizes borders whether text is bolded or in a particular font and the like. A displayed UI element in a first content view when selected may also provide a link to another second UI content view. Collectively such information regarding the data or content and how to display or visually represent the content on a UI display may be referred to as a content view. Each different UI displayed such as in response to a menu selection may be characterized as having its own UI content view. As such the series of UI displays in response to selecting a sequence of one or more UI elements e.g. in response to a selection button selection and the like may be represented as a work flow navigational flow or path originating from the first UI display. Each node in the path corresponds to a UI display or a UI content view. The possible paths where each node in a path has a corresponding UI content view may be represented in a hierarchical structure such as a tree. The NAV structure file may describe the foregoing hierarchical structure or tree of the UI navigational flow. A user may navigate from a source UI content view to a target UI content view by selecting or otherwise interacting with one of the UI elements that may be included in the source UI content view. In this manner the foregoing one UI element may serve as a navigational UI link to the target content view.

The application s navigational structure may be specified in the NAV structure file and provided as an input to the NAV service during runtime when executing the application and its GUI code . During runtime of the application at its GUI code a user may make a selection or otherwise interact with a UI element of the GUI causing generation of a navigation event. The UI element may be displayed in a current content view whereby selection or user interaction with the UI element may denoted a UI navigation to a target content view. The NAV service may be registered to receiving notification of such navigation events. In a step S the web browser may therefore notify the NAV service regarding the occurrence of a navigational event. The web browser may also include context information in the notification of S such as the particular UI element selected within a current display and any associated data. The particular UI element selected may be mapped by the NAV service to a particular navigation point or node in the NAV structure file thereby denoting that selection or interaction with that particular UI element denotes a navigational transition to a target navigation point of the NAV structure file . The context information in S passed from the browser to the NAV service may therefore include a navigational identifier NAV ID denoting the foregoing UI element of a current navigation point which then transitions or navigates to a target navigational point. Thus the NAV ID may be associated with a target content view. Additionally the context information may include one or more source src parameters params . The src params may include for example information identifying a menu item selected an input value such as input through a dialogue or field in a form a particular item e.g. row column entry of a selected table item and the like. In a step S the NAV service may obtain information from the NAV structure file associated with the target navigation point denoted by NAV ID received in the context information of S. In particular the information obtained from the NAV structure file may identify a target body of code e.g. routine function method and the like within the GUI application code invoked to further process the UI navigational event associated with the transition or navigation from the current navigation point to a target navigation point denoted by NAV ID. The information obtained from the NAV structure file for the target navigation point NAV ID may also include metadata identifying generally how to manipulate or map the src params to target tgt parameters params of the target body of code. The target body of code may use additional context information specified by the target params in order to appropriately update the displayed content of the GUI to be that associated with the target navigation point having a target content view. Generally the metadata may describe how to map the src params as received by the NAV service to tgt params having a format or layout and type as expected and used by the target body of code. With reference to element may represent the information obtained from the NAV structure file when the target navigation point has an NAV ID of C. The file may further identify that the target body of code in the GUI application code is JS RTN denoted by element and metadata META describes how to map the src params to target params whereby the target params represent one or more target parameters passed in the call or transfer or control to the target body of code JS RTN . In a step S the NAV service may obtain the foregoing information from the NAV structure file perform processing to map the src params to the target params in accordance with metadata META and then transfer control in step SA to the target body of code JS RTN in the GUI application code . The target body of code JS RTN may perform processing in step S including modifying aspects of the UI. Such modification may include for example dynamically modifying the DOM e.g. create new layouts or structures such as a new table modify an existing structure create new UI elements and the like . Such processing in step S for modifying aspects of the UI may include for example modifying styles or attributes affecting visual display of currently displayed elements. Such processing in step S for modifying aspects of the UI may include for example requesting additional data S which is then returned S from the server . Some or all of the returned data may then be included as content displayed in the UI for the target navigation point. Some or all of the returned data may be further processed e.g. by the target body of code JS RTN or other code of the GUI application code so that resulting or derived data generated as an output of the processing may be included as content displayed in the UI for the target navigation point having a target content view.

To further illustrate the processing just described a user may make a UI selection e.g. such as by selecting a button tab or menu item to view a table of information such as a list of physical or logical entities of the data storage system server . The table of such entities may be for example physical storage devices logical devices or hosts. The NAV service may be notified regarding the UI selection in step S denoting a transition or navigation from a current navigation point to a target navigation point. The target navigation point may be identified by NAV ID and have a content view including the table of information. Using the NAV ID the NAV service may obtain information represented by from the NAV structure file and perform step S to map the one or more src params to the one or more target params and transfer control SA to target body of code JS RTN . The target body of code may perform processing to request S from the server information regarding the entities for inclusion in the table. The server may return the requested information in a response S to the web browser for use by the target body of code JS RTN of the GUI application code . The code may then perform processing to modify the DOM such as to create a new table and populate the new table with the information returned in the response of S. The new table may then be included in the content displayed on the GUI for the target navigation point. In this manner NAV service facilitates UI navigation by invoking a target body of code in the GUI application code and using techniques herein for providing customized mapping of any one or more parameters for use by the target body of code in navigating the UI to the target navigation point having an associated target content view. In connection with the processing performed in S by the target body of code such as JS RTN of it should be noted that generally the DOM may be manipulated before and or after any desired information is requested such as from the server. For example the DOM may be updated to display a table in the process of loading e.g. with a loading spinner . The information may be loaded from the server and then stored in the table for display whereby the loading spinner is then removed. More generally the particular ordering in which steps may be performed by the target body of code in connection with particular examples herein should not be construed as a limitation or requiring that particular order. Such variations will be appreciated by those skilled in the art.

It should be noted that the GUI application code may or may not send any request s to the server for information. Whether such requests are performed may vary with the particular UI event being processed and the information to be displayed. For example as a simple illustration the src params may include two numeric inputs specified by the user. The src params may be in a first form which is mapped to a second form as specified in the metadata data META. The second form describes an expected form of the target params provided as parameters in the call or transfer of control Sto the target body of code JS RTN . The code may perform processing of the two numeric inputs such as add the two numbers multiply the two numbers and the like generating a single numeric output representing the result of the mathematical operation. The numeric output may be included in the displayed content of the UI. The code may dynamically modify the DOM as needed to include an element or object for the numeric output with suitable styles or attributes. In this manner the code of may use the target params and perform processing to dynamically update aspects of the GUI without requesting further information from the server .

In one embodiment details of which are further described below the NAV structure file may be a JSON file describing the application overall layout and navigational flow. The NAV service may include JavaScript code and use an internal representation using JavaScript objects. With reference to information from the JSON file such as related to a target navigation point having a NAV ID may be used to generate a JavaScript object used by the NAV service . With the NAV service information regarding core navigational panels may be provided. Element may represent for example top level navigational panels such as top level UI navigational sections of the application represented in the JSON file . Element may represent that additional working pages or displayed content views not aware of the navigation stack such as tables and forms. In other words element may represent the content views corresponding to navigational points represented in the file where code of the GUI application code invoked to create such content views may be characterized as creating working pages content views which are not navigation aware.

It should be noted that JS RTN of may denote another body of code of the GUI application code . Element is described in connection with other examples in following paragraphs and may perform processing similar to that as described herein connection with element .

Referring to shown is an example of a hierarchical structure regarding an application s navigational UI flow that may be represented by information included in the NAV structure file such as a JSON file mentioned above. The example illustrates a hierarchical structure corresponding to UI content views e.g. portions of a display or pages that the user may navigate from and to such as in connection with a data storage management application. The structure in this example forms a tree having a root node at level 0 nodes and at level 1 nodes and at level 2 and nodes and at level 3. The example also includes examples of additional data that may be defined for each node in the tree structure having root Each node in the structure may be associated with a unique NAV ID as described herein. For example element illustrates additional information that may be specified in the file for the node having NAV ID and element illustrates additional information that may be specified in the file for the node having NAV ID . Although information and are only illustrated for 2 nodes for simplification in illustration information may be similarly included in the file for each node of the NAV structure having root . Elements and may include information similar to element of .

A node at level N may have child nodes connect to it at level N 1. For example nodes are child nodes of node and node is the parent node of child nodes . A node which has no child nodes is also a leaf node. A path may be defined from the root at level 0 to a second node at another level greater than 0 in the hierarchy whereby the path includes the root node and any intervening nodes traversed from the root to reach the second node. For example a path may defined by . A second path may be defined by . More generally a path may be defined between two nodes in the tree as follows a path between a first node at level N to a second node at a level M N may represent a navigational path through UI displays of each node on the path. A first node may be a descendant of a second node if the second node is included in a path from the root to the first node e.g. there are one or more intervening nodes connecting the second node to the first node where each node in the path is at a different level in the hierarchy .

Element is the root denoting that initially the UI display may include a content view with a first level of menu options buttons or other UI elements for host management provisioning logical devices physical devices and support . Thus the nodes and at level 1 may represent the major partitioned navigational sections of the UI displays. Each of the nodes in levels 2 and 3 may represent a UI content view that may be rendered in connection with UI navigation. A user may navigate to a UI content view corresponding to a first node at level 2 by selecting the UI element corresponding to the first node s parent at level 1. A user may navigate to a UI content view corresponding to a first node at level 3 through the first node s parent at level 2. Leaf nodes such as may represent content views having no links to other content views as represented by the fact that there is no further link from such leaf nodes to any other node in the tree.

A user may select a UI element associated with any one of and and result in rendering another UI content view associated with a child node of the selected node. For example with reference to element may illustrate the initial UI content view corresponding to the root node including 5 UI elements such as buttons for host management provisioning logical devices physical devices and support. In this example selecting host management may result in a UI content view of corresponding to the node in . The UI content view may include 3 hyperlinks or other navigational links such as in connection with navigating in a browser LINK LINK and LINK. Selection of LINK of may result in UI navigation to UI content view . Selection of LINK of may result in UI navigation to UI content view having two links LINK and LINK . Selection of LINK of may result in UI navigation to UI content view . Selection of LINK of may result in UI navigation to UI content view . Selection of LINK of may result in UI navigation to UI content view

UI content views and associated UI elements associated with a single application may be partitioned into major navigational sections of the hierarchy as illustrated by the 5 groupings at level 1 of . Each of the LINKS of may generally represent any UI elements that a user may interact with causing transition or navigation to another content view. Thus LINKS may be characterized as UI elements providing navigational links to other target content views from a current content view and LINKS may be characterized as UI elements providing navigation links to other target content views 

The example of indicates that the content views corresponding respectively to leaf nodes of may include no UI elements providing links to other content views since as represented in such leaf nodes have no child nodes.

With reference back to each node in the tree may represent a navigation point and associated content view within the application. A first navigation point may correspond to a parent node having a first content view. The parent node may have a child node representing a second navigation point for a second content view. A user may navigate from the first content view to the second content view by selecting a UI element included in the first content view. It should be noted that the rendered content may not completely change of update each time a UI element is selected. For example the rendered content in the entire UI display at a point in time may collectively be the net result of a current or last selected UI element as well as one or more prior UI element selections. Selecting a menu option or button for example may result only in updated a portion of the display with a new content view. In this manner the resulting display may include the new content view along with possibly one or more other content views or portions of such other content views.

Referring back to the techniques described herein may be generally used in connection with a client and server where the client may make API calls such as in the form of requests to the server. In one embodiment the GUI application code may be executed on browser of a client whereby the code may be JavaScript loaded from server . The client may be rendering a GUI in the browser . When processing is performed to transition or navigate between content views the client may not load new JavaScript or HTML from the server to render each new content view e.g. working page . In accordance with techniques herein the GUI application code may be generally written using AJAX technologies including JavaScript whereby any data if needed may be requested and obtained from the server using AJAX calls to load the data and dynamically change the DOM and other aspects of what is being rendered in the browser. The code of the GUI application may be characterized as using DHTML technologies and techniques known in the art and also mentioned herein to dynamically modify the DOM and perform any necessary call s to the server to obtain data for display without refreshing the page. Using DHTML techniques JavaScript may be used to dynamically modify the existing HTML code and associated structure of the DOM which may be populated with new data obtained from the server without requesting and obtaining an entirely new web page. Techniques herein may dynamically manipulate the DOM defining the document body of the displayed web page for example to dynamically add and remove objects from the DOM. The client side executing JavaScript may create and or modify objects or elements of the DOM on the client dynamically and perform AJAX calls to obtain data.

Referring to shown is an example illustrating use of techniques described herein. Element may represent the content view corresponding to node of the exemplary NAV structure file of . The content view of may be initially displayed when the data storage management application starts. A user may select UI element to display a list of physical devices PDs in the form of a PD table. Element and may be as described above in connection with . Elements may be buttons or tabs. In response to selection of UI element the web browser may perform step S of to notify the NAV service providing context information identifying the particular UI element selected. It should be noted that the information provided in S to the NAV service may be the NAV ID for the UI element selected or may otherwise be information that the NAV service uses to indirectly determine the corresponding NAV ID for UI element . The NAV ID as described herein may identify a target content view to be displayed and may denote a navigational point represented by an object or node included in the structure of . In this example the NAV ID may identify the node of having an associated content view of . Element of identifies the information the NAV service obtains S from the NAV structure file for the identified NAV ID . Element may identify JS RTN as the target code of the GUI application code to which control is transferred. Element may include target params NONE meaning that there are no target parameters and no mapping of parameters in connection with the invocation and transfer of control to JS RTN . In this case the NAV service performs S and transfers control to JS RTN . JS RTN may perform processing similar to S as described in connection with element . JS RTN may modify aspects of the UI needed to create the content view including table and also obtain the data from the server needed to populate the table . JS RTN may include JavaScript to dynamically define a new table structure and object in the DOM for table and also dynamically set any appropriate styles or attributes. Additionally the code of may also create a text box UI element with the text Physical Devices . The code of may issue a request S to the server to obtain a list of PD identifiers e.g. PD PD . . . PD N used to populate the physical device table .

A user may then select a UI element displayed in . In this example the user may select an element of the PD table for PD as illustrated. In response to selecting the browser may notify S the NAV service whereby the NAV service is passed information identifying the UI element as well as the particular table entry or element for PD. In this example assume the NAV service receives a row ID of 1 denoting the particular entry or element selected. The NAV service may obtain S from the file the information of of for the NAV ID corresponding to the table UI element selected in the current content view and also denoting the target UI content view represented by node or navigational point . Element of identifies the information the NAV service obtains S from the NAV structure file for the identified NAV ID . Element may identify JS RTN as the target code of the GUI application code to which control is transferred. Element may include target params META meaning that as part of S the NAV service maps src params to target params in accordance with the metadata description METAL In this example assume that there is only a single src param of the form P1 VAL1 and META indicates that the target params are of the form ID VAL1. In connection with the foregoing src params and target params may be name value pairs. The src param may have a name of P1 and a value of VAL1 e.g. P1 VAL1 . META may include metadata as noted above which indicates that the name portion of the src param is modified from P1 to ID whereby the target params include the following name value pair ID VAL1 identifying the particular PD for which details are to be displayed. The NAV service may transfer control SA to JS RTN using the mapped target params. JS RTN may perform processing similar to S as described elsewhere herein. JS RTN may modify aspects of the UI needed to create the content view including details table and also obtain the detailed information for the particular PD from the server needed to populate the table . JS RTN may include JavaScript to dynamically define a new details table structure and object in the DOM for table and also dynamically set any appropriate styles or attributes. Additionally the code of may issue a request S to the server to obtain detailed information for PD e.g. the particular PD identified by the src param used to populate the physical device details table corresponding to content view and navigation point of .

It should be noted that the same target body of code JS RTN may be invoked to provide PD detailed information for any selected PD of the table whereby the src params and thus the target params may identify the selected PD.

In connection with the foregoing example of the target body of code JS RTN may implicitly know the object or other entity used to identify a physical device table based on when JS RTN is expected to be invoked. In other words as described above JS RTN may be a target body of code which only retrieves and displays the physical device table and not other tables of data. As a variation JS RTN may be a more generally or generically written target body of code that retrieves and displays other tables of data e.g may display a physical device table LUN or logical device table storage group table RAID group table and the like whereby one of the src params and target params may identify the particular table to be displayed. Similarly the target body of code JS RTN described above may be more generally written than as described above and the src params and target params may identify the particular selected table entry as described above and similarly include an additional parameter identifying the physical device table as distinguished from other possible types of tables of information .

Referring to shown is an example of metadata that may be used in connection with techniques herein. Such metadata may be included or otherwise denoted by information in the file of as described herein which is used by the NAV service to map src params to target params. The metadata may be generally characterized as a data descriptor describing a format or layout of target parameter s of target body of code invoked by the NAV service. The metadata data describes to the NAV service how to interpret or pass parameters to the invoked target body of code.

Element may define a first exemplary set of metadata such as may be denoted by META. The metadata may be a data descriptor including the information of whereby element denotes the particular ordering and number of src params as received by the NAV service and element denotes the target param ordering and number. In this example element denotes that both source and target parameters are name value pairs. Element indicates that there are two source params of the form P1 VAL1 P2 VAL2. Element indicates that there are two target params of the form ID VAL2 ALIAS VAL1. Element denotes that the target params use different names of the name value pairs than the src params e.g. target params use ID and ALIAS and src params use P1 and P2 and also that the ordering of the target parameters values is reversed from what is specified in the src params e.g. source params specify a first value of the first name value pair of VAL 1 and a second value of the second name value pair of VAL2 and target params specify a first value of the first name value pair of VAL 2 and a second value of the second name value pair of VAL1 .

Element may define a second exemplary set of metadata such as may be denoted by META. The metadata may be a data descriptor including the information of whereby element denotes the particular ordering and number of src params as received by the NAV service and element denotes the target param ordering and number. In this example element denotes that the src params include two parameters which are name value pairs. Element indicates that there are two source params of the form P1 VAL1 P2 VAL2. Element indicates that there is a single target param that is a structure DS1 including two fields FIELD 1 and FIELD 2. FIELD 1 has a data type of INT64 denoting a 64 bit integer and FIELD2 has a data type of string. Element may be characterized as denoting a different data layout or format of the target params and also the different data types. Element indicates that the value VAL1 of the first src param is mapped to FIELD 1 of the target param structure DS1 having type INT64 and that the value VAL2 of the second src param is mapped to FIELD 2 of the target param structure DS1 having type string.

Element may define a third exemplary set of metadata such as may be denoted by META. The metadata may be a data descriptor including the information of whereby element denotes the particular ordering and number of src params as received by the NAV service and element denotes the target param ordering and number. In this example element denotes that the src params include a single parameter that is a structure DS2 including two fields FIELD 1 and FIELD 2. FIELD 1 has a data type of INT64 denoting a 64 bit integer and FIELD2 has a data type of INT32 denoting a 32 bit integer. Element indicates that the target params include 3 parameters which are just values such as integer quantities as follows DS2.Field2 DS2.Field1 DS2.Field2 DS2.Field1 whereby DS2.Field2 denotes the value included in Field 2 of DS2 e.g. VAL2 DS2.Field1 denotes the value included in Field 1 of DS2 e.g. VAL1 and DS2.Field2 DS2.Field1 denotes the result of the expression VAL2 VAL1 .

In this manner the metadata may generally describe a mapping between the src params and target params and also any layout or format of the target params. The metadata may identify any reordering of parameter information and or reformatting as illustrated above. The foregoing examples of are merely illustrative of some ways in which the metadata may be used to map src params to target params. The metadata may take any suitable form and be expressed using any suitable syntax. For example the metadata may include statements like that as illustrated in . As yet another example the metadata such as denoted by META of of may identify one of a predefined set of values whereby each value in the predefined set may denote a different predefined mapping between the src params and target params and also a format for the target. For example an embodiment may define a range of values 1 3 each associated with a predefined mapping between source and target parameters and also layout or format for the target parameters if needed. A value of 1 for metadata may denote metadata of . A value of 2 for metadata may denote metadata of . A value of 3 for metadata may denote metadata of . Using the foregoing an embodiment may predefine such metadata descriptors and and associate each of the foregoing descriptors respectively with the values 1 3. In this manner specifying an integer value of 1 such as METADATA 1 in the file may denote to use metadata descriptor . Similarly specifying integer values of 2 and 3 such as METADATA 2 and METADATA 3 in the file may denote to respectively use metadata descriptors and .

Referring to shown are flowcharts of processing steps that may be performed in an embodiment in accordance with techniques herein. The flowcharts summarize processing described above. At step an application s navigational structure is defined and included in the navigational structure file e.g. of having a structure such as illustrated in . At step metadata or data descriptor information used to map source parameters to target parameters for each navigation point in the application may be provided. Such metadata may be included the navigational structure file and associated with a node in the described hierarchical structure representing each navigation point associated content view and UI element of a parent node used to transition to or navigate to the associated content view. At step target code of the application is identified where the target code is to be invoked to generate a content view associated with a particular navigation point in the application. A target entry point of such target code is identified for each navigation point and included in the navigational structure file. At step the application using the NAV service may be started. At step the NAV service registers to receive notification of navigation events from the web browser while executing UI code of the application. At step the NAV service receives notification of a navigation event from the web browser executing the application UI code. The notification may identify a NAV ID and one or more src params. The NAV ID may identify the target content view to be displayed and also the UI element selected which navigates to such target content view. At step the NAV service uses information in the navigational structure file for the particular NAV ID to determine what target code is invoked and what metadata to use in connection with mapping the one or more src params to one or more target params used by the target code. At step the NAV service performs any necessary mapping of src params to target params in accordance with the metadata and invokes the target code in the application passing the target params as input to the target code. At step the target code may dynamically modify the DOM and other aspects of the UI as needed and may also issue one or more requests to the server to obtain any data as needed to update the UI to include the target content view. Steps and may be repeated for each navigation event about which the NAV service is notified by the web browser for the application.

Although exemplary uses herein may be made with reference to particular UI elements it will be appreciated that techniques herein may be used in connection with any suitable UI element of an interface. UI elements may include for example a menu a menu bar a menu item a text box a button e.g. radio button cycle button a wizard a navigation section including one or more hyperlinks a table a drop down list a list box a check box a dialog box and a combo box. Menus allow the user to execute commands by selecting from a list of choices. Menu options are selected for example with a mouse or other pointing device within a GUI. A keyboard may also be used. A menu may be for example a pull down menu displayed in response to a user selection. A menu bar may be displayed horizontally across the top of the screen and or along the tops of some or all windows. A software wizard is a UI type that presents a user with a sequence of dialog boxes that lead the user through a series of well defined steps. A text box may be a box in which to enter text or numbers. A hyperlink may be displayed as text with some visual indicator such as underlining and or color indicating that selecting the link will result in linking or displaying another screen or page. Properties of a hyperlink may relate to whether the hyperlink is enabled disabled or hidden. If enabled the particular path or location identifying a website or the web page may be displayed in response to selection of the hyperlink. A drop down list may be a list of items from which to select. The list normally only displays items when a special button or indicator is selected. A list box allows a user to select one or more items from a list contained within a static multiple line text box. A combo box may be a combination of a drop down list or list box and a single line textbox allowing the user to either type a value directly into the control or choose from the list of existing options. A check box indicates an on or off state via a check mark or a cross . A radio butting is similar to a check box except that only one item in a group can be selected. Its name comes from the mechanical push button group on a car radio receiver. Selecting a new item from the group s buttons also deselects the previously selected button. A cycle button is a type of button that cycles its content through two or more values thus enabling selection of one from a group of items. A table may also be referred to as a grid in which numbers and or text may be displayed in rows and columns. The foregoing are some examples of UI elements that may be supported in an embodiment in accordance with techniques herein.

Using techniques herein UI content e.g. strings settings of style based properties and other properties related to UI controls may be dynamically modified such as by code of a target body of code of the application invoked to provide customization and dynamic modification of UI element attributes e.g. to disable or hide any all UI elements such as by setting the property of a particular UI element to a value denoting the selected state of enabled disabled or hidden. The properties may relate for example visual aspects of displayed text or content e.g. font text size bolded not bolded italicized not italicized display state e.g. enabled disable hide of a UI element an ordering of displayed elements or text left to right right to left ordering of menu items such as displayed in pull down menu size or physical dimensions of a UI element e.g. width height location position of button on UI display e.g. may be an absolute or relative location as displayed sort ordering of buttons or UI element on screen ordering or position of displayed text in table listing of UI elements and the like. 

In one embodiment the NAV service as described herein may be implemented using an object model including JavaScript objects. In connection with invoking or transferring control to a target body of code of the application e.g. such as elements of an object in the model used by the NAV service may be created whereby a method may be specified for the object which is the target body of code. Placement of the object in the object model of the NAV service may result in invoking and transfer of control to the target body of code using the target params mapped from the src params in accordance with specified metadata as described above.

An embodiment may implement the techniques herein using code executed by a processor. For example an embodiment may implement the techniques herein using code which is executed by a processor. As will be appreciated by those skilled in the art the code may be stored on a computer readable storage medium having any one of a variety of different forms including volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer readable storage media also referred to as computer readable media may include but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by a processor.

While the invention has been disclosed in connection with preferred embodiments shown and described in detail their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly the spirit and scope of the present invention should be limited only by the following claims.

