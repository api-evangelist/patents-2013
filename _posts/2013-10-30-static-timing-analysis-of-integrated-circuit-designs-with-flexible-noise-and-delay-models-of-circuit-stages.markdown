---

title: Static timing analysis of integrated circuit designs with flexible noise and delay models of circuit stages
abstract: Systems, apparatus, and methods of static timing analysis for an integrated circuit design in the presence of noise are disclosed. The integrated circuit design may be partitioned into a plurality of circuit stages. A timing graph including timing arcs is constructed to represent the timing delays in circuit stages of the integrated circuit design. A model of each circuit stage may be formed including a model of a victim driver, an aggressor driver, a victim receiver, and a victim net and an aggressor net coupled together. For each timing arc in the timing graph, full timing delays may be computed for the timing arcs in each circuit stage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09129078&OS=09129078&RS=09129078
owner: Cadence Design Systems, Inc.
number: 09129078
owner_city: San Jose
owner_country: US
publication_date: 20131030
---
This non provisional United States U.S. patent application is a divisional patent application and claims the benefit of U.S. patent application Ser. No. 12 203 128 filed on Sep. 2 2008 by inventors Igor Keller et al. entitled FLEXIBLE NOISE AND DELAY MODELING OF CIRCUIT STAGES FOR STATIC TIMING ANALYSIS OF INTEGRATED CIRCUIT DESIGNS pending. U.S. patent application Ser. No. 12 203 128 claims the benefit of provisional U.S. Patent Application No. 60 969 580 filed on Aug. 31 2007 by inventors Igor Keller et al. entitled CONCURRENT SENSITIVITY NOISE AND STATIC TIMING ANALYSIS FOR INTEGRATED CIRCUIT DESIGNS USING A MULTI CCC CURRENT SOURCE MODEL and is incorporated in its entirety including appendices herein by reference.

U.S. patent application Ser. No. 12 203 128 further is a continuation in part and claims the benefit of non provisional U.S. patent application Ser. No. 12 203 115 filed on Sep. 2 2008 by inventors Igor Keller et al. entitled CONCURRENT NOISE AND DELAY MODELING FOR STATIC TIMING ANALYSIS OF INTEGRATED CIRCUIT DESIGNS now issued as U.S. Pat. No. 8 543 954 on Sep. 24 2013.

The embodiments of the invention relate generally to integrated circuit design software tools such as static timing analysis software tools and signal integrity analysis software tools for designing integrated circuits.

Electronic computer aided design ECAD software tools for static timing analysis STA may be used to estimate timing delays in an electronic circuit such as electronic circuits that are found in integrated circuits. However process technology has improved so that smaller transistor channels of 65 nano meters nm and 45 nm have become available. With smaller transistor channels there is an increased need for more accurate timing analysis. Additionally with the smaller geometries there may be a number of unknown effects to electronic signal propagation that may be considered which may not have been as severe with more relaxed process technology nodes.

Briefly however crosstalk noise may be analyzed concurrently with timing delays by modeling the noise effects using a current source. This additional current source along with a voltage dependent current source modeling a switching or static driver of the victim net and reduced order model for the interconnect allows for an efficient calculation of noisy transitions and noise glitches on the victim nets. A model of a circuit stage of an integrated circuit may be formed by including a model of victim drivers aggressor drivers receivers and the victim nets and aggressor nets together. Base timing delays may be initially computed for each timing arc from each victim driver to each receiver of a timing graph without regard to noise. The glitch responses of the circuit stage into each receiver in response to the input transitions coupled to the aggressor drivers may then be computed. The input transitions of the aggressor drivers may be aligned with the input transition of the victim drivers as a result of the glitch responses. The aligned glitch responses can then be summed together to determine a combined first order noise effect on a circuit stage.

In accordance with another embodiment of the invention a flexible noise analysis method is disclosed that to analyze noise and the noise on delay effects in a circuit with user selectable methods. The method of analyzing noise and the noise on delay effects in a circuit stage may be partitioned into independently controlled components such as an aggressor driver model a victim driver model aggressor filtering constraining a virtual aggressor driver aggressor aligning and a metric or objective measure of the noise effects on the circuit each of which may be user selectable. In this manner the method of concurrent analysis of timing delays and noise effects may be selectable by a user.

In the following detailed description of the embodiments of the invention numerous specific details are set forth in order to provide a thorough understanding. However it will be obvious to one skilled in the art that the embodiments of the invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the embodiments of the invention.

At the graph level of abstraction the highest level the software tool works with the entire circuit design as a design graph. The graph level abstraction propagates quantities or metrics of interest from the inputs of the circuit design to the outputs of the circuit design. For example an STA tool may propagate arrival times throughout the circuit design.

At the net level of abstraction the STA software tool calculates quantities of interest for each of the nets in the design. While doing an SI analysis an SI analysis software tool may calculate the crosstalk glitch induced on a specific net.

At the shape level of abstraction the software tools work with information from the actual chip layout. The information may include device sizes and interconnect parasitics for example such as can be obtained from a parasitic extractor.

In some embodiments of the invention an electrical calculation engine component or delay calculator is provided for the net level abstraction layer of electrical analysis software tools.

Referring now to a block diagram of a multi CCC gate delay calculator EOS is illustrated. The multi CCC gate delay calculator EOS may also be referred to herein as an electrical calculator. The delay calculator receives characterization data and a netlist to generate timing delays e.g. max timing delay min timing delay including process sensitivities. The characterization data may be part of a cell library of logic cells.

The delay calculator includes an application programming interface API an interconnect reducer analysis engine a gate simulation engine and a multi CCC current source model coupled together as shown.

The interconnect reducer analysis engine receives the netlist including a defined interconnect of standard cells to reduce it down to a simplified model for use with the gate simulation engine . The interconnect reduction and analysis engine reduces the extracted parasitic network down to a simplified load model. Typically the extracted parasitic network corresponding to an output net can be very large. Since only the inputs and outputs of the net need to be monitored the interconnect network may be reduced to create a smaller electrically equivalent representation speeding up delay calculations while preserving the input to output electrical behavior of the net.

The multi CCC current source model described in further detail below receives the characterization data and models single CCC and multi CCC standard cells in response to the type of standard cell in the netlist that is being analyzed in a given stage of a delay path. The multi CCC current source model describes the electrical behavior of a standard cell in an abstract fashion in order to speed electrical calculations such as delay calculations and noise delay calculations and sensitivity calculations. The parameters of the gate model are usually derived by a library characterization process such as described below.

The gate simulation engine calculates the output waveform at the output of a given gate in response to the input stimulus as well as the multi CCC current source model and its parameters. A simplified load model may be used to model the effect of the interconnect loading on the gate. A noise model may also be used to model noise from aggressors in the standard cell.

The parameters for each standard cell to fashion its corresponding gate model are typically stored in a standard cell library. The IC netlist design data is stored in some form in the host tool. One or more application programming interfaces API interact with the library and the design data to read information there from. Another one or more APIs may be used by graph level engines operating at the graph level on the netlist to determine delays along data paths for example to call the delay calculator and obtain the timing results of the calculations at each gate along a graphed path.

A current source model for a multi CCC structure described below may be used for both delay and SI calculations. Thus a single characterization process may yield a gate model for both delay and SI calculations.

The delay paths DP DPi may have various stages of single CCC and multi CCC standard cells. A first delay path DP includes a single stage Stage. A second delay path DP includes two stages Stage and Stage. A third delay path DP includes M stages Stage through StageM. An idelay path Dpi includes N stages Stage through StageN.

Referring now to a schematic diagram of an exemplary standard cell in a netlist is illustrated. This is the view seen by the electrical delay calculator working at a gate or net level abstraction layer. The standard cell includes a driver the RC interconnect network connected to the output of the driver consisting of one or more resistors and one or more capacitors the extracted parasitics associated with the output net Vo see coupled together as shown. One or more receivers are coupled to the output net Vo and may add to the extracted parasitics . An aggressor driver may generate an aggressor signal coupled into the interconnect network . An aggressor receiver may also influence the generation of the aggressor signal adding additional parasitic load to the network .

Without any aggressor driver or when node is quiet the delay calculator may generate a relatively smooth output waveform A on the Vo output signal that has a timing delay TD not affected by coupling noise or crosstalk . When aggressor driver and node are switching the delay calculator may generate a noisy output waveform B on the Vo output signal that has a timing delay TDN which is affected by coupling noise that may be greater than the timing delay TD without coupling noise. That is the switching of the aggressor driver may cause additional delay in the signal generated by the stage on the output net Vo .

The multi CCC current source model used in the delay calculator may also be referred to herein as a ViVo II model. The multi CCC current source model is capable of accurately supporting standard cells with both single channel connected components single CCC and multi channel connected components multi CCC . Channel connected components CCCs are found within standard circuit cells or simply standard cells of a standard cell library.

A single channel connected component single CCC includes transistors connected to each other by their drain and or source terminals between paths from the positive power supply VDD to the negative power supply VSS or ground. The boundary of a CCC is at a gate terminal or an input or output terminal of the standard cell.

Standard cells with multi channel connected components multi CCCs include a plurality of single CCCs coupled in series together at gate terminals between inputs and outputs of the standard cell.

The ViVo II multi CCC current source model i treats standard cells with either single CCCs or multi CCS as black boxes during characterization ii compacts the model which is independent of output load and much less dependent on the number of input slews to use during characterization and iii encapsulates internal waveform distortion and internal delay in multi CCC standard cells efficiently.

The goal of ViVo II multi CCC current source model is to characterize the gate s driving capability and to provide a simple abstraction which captures the output current waveform in the presence of multiple internal stages. The current through a single CCC can be described accurately based on a two dimensional DC current function F Vi t Vo t . For a multi CCC cell the current Io t waveform at the output of the standard cell is dictated by the instantaneous input voltage at the last CCC which we denote as V t . Thus the current through a multi CCC standard cell is a function of the instantaneous input voltage at the last CCC which can be denoted by I F V t Vo t . In order to find V t from Vi t a waveform transfer function can be used to map the input voltage transition to an intermediate voltage transition.

A multi CCC current source model therefore may consist of two major components i the dc current function modeling drawn current as a function of instantaneous input and output voltages and their time derivatives of the last CCC of the cell and ii a waveform transfer function defining the waveform at the input of the last CCC as a function of the waveform at the cell s input.

A one straightforward way to construct these two parts is to perform a series of spice simulations where the node which is the input of the cell s lass CCC is directly probed or stimulated respectively. However while this approach is feasible an understanding of the internal topology of the cell s circuit and a partition of the circuit into one or more CCCs must be performed. Instead the embodiments of the invention treat a standard cell as a black box without having to understand the internal topology of a circuit and partition it into CCCs. Thus the construction of the two components of the model is done through fitting the results of a series of spice simulations where excitation and probing points are only the standard cell s interface e.g. input output pins.

The first part is an internal waveform transformation function which transforms the input voltage V t into the intermediate voltage V t by Equation 1 as follows 1 

Note that the intermediate voltage Vc t models a delay and distortion of the input signal transition as it propagates through a standard cell s circuit up until the input to the last CCC. Fitting techniques may be used to map the input signal to the intermediate voltage signal V t .

The second part is a voltage dependent current source which characterizes the driving CCC . It consists of a voltage dependent current source I F V V which gives the driving current for any Vand Vvalue and their derivatives 2 

In Equation 2 Fis a DC component of the current source defining the current value based on the values Vand V. The second and third terms in Equation 2 model the dynamic current due to Miller effect from input to the output of the last CCC of the cell and output pin capacitance of the cell. The coefficients of the two latter terms are nonlinear Miller and output pin capacitances which in general depend upon voltages Vc Vo. However since the contribution of the last dynamic term in Eq. 2 is usually small characterizing the Cfor the initial input voltage Vi t 0 suffices to provide sufficiently accurate results.

In Equation 3 F is a normalized time transfer function time versus time with time normalization being defined by

As shown by the intermediate voltage Vc t versus time chart of is the starting time of the transition in the intermediate voltage V t and T is the transition period of the intermediate voltage V t .

The function F captures the non linear waveform shape change from V t to V t . F T and are all functions of the slew rate change in voltage over time of the input voltage V t and are stored in tables indexed by . illustrates an exemplary table of values for T and as a function of a reference slew rate a fast slew rate and a slow slew rate of the input voltage V t . illustrates an exemplary table of values for F as a function of a reference slew rate a fast slew rate and a slow slew rate over the normalized time which varies from 0 to 1.

In its application the multi CCC current source model captures the slew rate from the voltage input waveform V t which is then used to look up the corresponding values for T and F V from look up tables such as the tables illustrated in and respectively. The model then applies the voltage transformation equation Eq. 3 to map the voltage points on V t to V t to convert an input waveform V t of slew rate to the intermediate voltage waveform V t in one embodiment of the invention. In another embodiment of the invention a lookup table is used to convert the waveform V t of slew rate to the intermediate voltage waveform V t .

With the intermediate voltage waveform V t the output current waveform may be computed by using the intermediate voltage waveform V t as the dependent input of the current source model I V V . The model may use a table to store I V V such as illustrated by which is indexed by both Vand V. To compute output current at time to given a particular Vand Vat time t the model may first find the nearest voltages in the table and then perform a two dimensional interpolation to approximate the actual output current at Vand V. The model may also look up Cgiven Vfrom another table such as illustrated in . With the values of Iand Ccomputed at time t we can compute the value of Vand move on to the next time point t at which we look up Iand Cagain using Vand Vat time t. This process repeats until the whole output waveform is computed.

The ViVo II multi CCC model for gates is characterized from a blackbox view of a standard circuit cell. To characterize a ViVo II multi CCC model the voltage and current waveforms at inputs and outputs of the standard cell are observed. Characterization starts at block and jumps to block .

At block the output current Iis characterized for the driving stage of the multi CCC current source model. The flow chart of illustrates the characterization of the output current of the multi CCC standard cell in greater detail.

To characterize the driving stage I V V transient simulations with a SPICE transistor circuit simulator such as Spectre software by Cadence Design Systems Inc. are used to switch the input to the standard cell with its output voltage Vbeing fixed.

At block while holding the output voltage Vfixed a spice transistor simulation is run on the multi CCC standard cell.

At block one input of the multi CCC standard cell is switched using an input signal with an initial reference slew rate.

At block a determination is made as to whether or not the output voltage was set to the power supply voltage Vdd. If so the process ends at block . If not the process goes to block .

At block the output voltage is incremented to a new value and the process returns to block to determine the output current for the new fixed value of output voltage Vo.

In the case of standard cells with only one CCC performing a DC analysis by sweeping Vand Vis sufficient to find I V V . However for a multi CCC standard cell I V V a DC analysis may not be used since the input voltage Vdoes not equal the intermediate voltage Vc.

At block the voltage transform function V t of the multi CCC standard cell is characterized. The flow chart of illustrates the characterization of the voltage transform function V t of the multi CCC standard cell in greater detail. Characterizing the functional in Equation 1 requires extra simulations using different input slews than a reference slew rate .

At block of the input signal slew rate is set to a first slew rate that is different form the reference slew rate. For example the input slew rate may be changed to a slow slew rate .

At block the output voltage Vof the multi CCC current source model is fixed to of Vdd for a rising output and of Vdd for a falling output.

At block with the output voltage fixed SPICE transistor circuit simulations are run with the multi CCC current source model.

At block one input of the multi CCC standard cell is switched using the input signal with the differing slew rate than the reference slew rate.

At block the output current Iis measured and results may be tabulated. illustrates an I V V x V waveform which is obtained by changing input slew rate to where x is a fraction of for rising output and for falling output.

At block the output current waveform is compared with the input signal waveform to determine the extra delay time in the transition periods to extract and Tparameters for example.

From I V V x V waveform curve we observe that the output current waveform incurs an extra delay of and its transition period stretches from Tto Tcompared to the original reference current waveform I V V x V . Tand are stored in the table of for example for the input slew as part of the parameter for characterizing the functional . Moreover we can capture the non linear shape difference between I V V x V and I V V x V by normalizing the time axis

At block the output I V V x V waveform curve is normalized using and Tparameters. The reference waveform curve I V V x V is normalized using its and Tparameters. The normalized output waveform curve and the normalized reference curve are aligned together and equal current time points are recorded for each output current for their respective slew rates such as illustrated by . The equi current normalized time information further simplifies the computations and reduces the amount of information that need be stored to model a multi CCC standard cell. The equi current normalized time information is used to further transform the output waveform be it an output current waveform Ior an output voltage waveform V.

Referring now back to at block a determination is made if all desired slew rates differing from the reference slew rated have been simulated. If so the process goes to block and ends. If not the process goes to block .

At block the input signal slew rate is set to the next slew rate differing from the reference slew rate. The process then returns to block where the characterization process is repeated.

The current table of is characterized for at least one input voltage slew rate a reference slew rate or . In another embodiment of the invention it is characterized for two slew rates a fast slew rate or and a slow slew rate or . In another embodiment of the invention it is characterized for at least three slew rates the reference slew rate or the fast slew rate or and the slow slew rate or . The more characterization data the better the interpolation accuracy with respect to input slew.

To adapt the characterized output currents to input voltage signals with different slew rates the values in the current table are adjusted. With a multi CCC standard cell there are first and second order adjustments to be made. With a single CCC standard cell a first order adjustment for a different slew rate may only be made.

Referring now to a first order only transformation applying to the first order of the voltage input waveform Vi into an output current waveform Io is illustrated. A reference voltage input waveform was previously used to generate the tabulated output current waveform . A voltage input waveform with a new slew rate indicated by the slope and a delayed start indicated by the offset from time zero is coupled into the single CCC standard cell. The new voltage input waveform results in a new output current waveform . The output current waveform is the result of a SPICE transistor circuit simulation for comparison with the output current waveform of the multi CCC model.

A first order output adjustment to the output current waveform is due to the change input slew rate illustrated by the slope of waveform and the delayed start of the input illustrated by the time offset between waveforms and . The change in slope of the input waveform illustrated by the difference between waveforms and results in a change in slope in the output waveform as illustrated by the difference between output waveforms and . The delayed start in the input waveform illustrated by the difference between waveforms and results in a delayed start in the output waveform as illustrated by the difference between output waveforms and . The change in slope is established by a stretch parameter T. The change in start time is established by a shift parameter .

A second order output adjustment to the output current waveform is the result of the extra gate stages in a multi CCC standard cell. The new voltage input waveform is coupled into a different gate than that of the last driving stage of a multi CCC standard cell. The second order adjustment to the output current waveform is illustrated by the difference between output waveforms and . The second order output adjustment is modeled by a time transformation function that is responsive to the new input slew rate. If the standard cell is a simple single CCC standard cell the time transformation function is u where is the normalized time with respect to the current table and u is the normalized simulation time. That is there is no second order output adjustment to be made to a simple standard cell with a single CCC. The first order output adjustment may be made to a simple standard cell with a single CCC.

Referring now to the characterization of a time transformation function is now described. A voltage input waveforms Vand its respective output current Iover time are plotted in the left chart. Output current waveforms Io normalized for time are plotted in the right chart.

From the plots of voltage input waveforms Vi with different slew rates and their respective output current Io the shift parameters and the stretch parameters T are first measured. The shift parameters and the stretch parameters T for each voltage input waveform and its respective slew rate may be tabulated such as illustrated in .

The output current waveforms Io are aligned and normalized for time over U from zero to one such as illustrated in the right chart of . Three output current waveforms Io A C are illustrated in the right chart of with slew rates and respectively. A plurality of equi current points Iare selected and their normalized times U for all of the output current waveforms Io A C with their respective slew rates are recorded into a table such as the table illustrated in .

For example consider the equi current point Iillustrated in the right chart of that intersects the waveforms A C at points A C respectively. At point A on waveform A the normalized time is Z. At point C on waveform C the normalized time is Y. At point B on waveform B the normalized time is X. These normalized time points are tabulated in .

As another example consider the equi current point Iillustrated in the right chart of that intersects the waveforms A C at points A C respectively. At point A on waveform A the normalized time is Z. At point C on waveform C the normalized time is Y. At point B on waveform B the normalized time is X. These normalized time points are also tabulated in . Additional equi current points are selected and their respective normalized times for each waveform and slew rate are tabulated. The greater the number of equi current points selected the better the accuracy of the model. Additionally the greater the number of output currents characterized for different input slew rates the better the accuracy of the model.

Referring now to the equi current values of the output current waveform with their respective slew rates can be inverted and normalized with respect to time in order to form time transformation curves illustrated in . That is illustrates time versus time plots plotted from . Time transformation waveforms with respective slew rates of and are illustrated in .

With curves and a new intermediate voltage waveform with respect to a new slew rate may be readily interpolated by applying the second order adjustment. The interpolation is to construct an intermediate waveform for a multi CCC standard cell to assist in output current look up during simulation. The curves and of may be stored in a table such as illustrated in as piece wise linear time versus time curves.

The characterized time transformation curves of for the slew rates and may be saved and used as part of the multi CCC current source model. After determining a new slew rate of an input voltage waveform to a multi CCC standard cell the characterized time transformation curves of for the slew rates and respectively may be utilized to interpolate a new time transformation curve associated with the new slew rate of the input voltage waveform.

At a normalized time of uin curves and have normalized equi current values of Yand Z respectively. The new transformation curve has an interpolated value of Wat a normalized time of X. Equivalent ratios may be set up to interpolate all values of W along the curve as follows 

for all values of normalized time u and each respective value of y and z. The equation may be solved for the value w along the curve as follows 

Referring now to the left graph illustrated in the input voltage waveform is then normalized by shifting the starting time point to zero at the origin and scaling the time axis so that the normalized input waveform V goes from the normalized time of zero to one.

Using the new time transformation curve new time points are generated from the new input voltage waveform to begin its transformation into the intermediate voltage waveform V as illustrated by the right graph in .

Using the new slew rate values for a new shift parameter and a new stretch parameter may be interpolated from a parameter look up table such as the table illustrated in . A pair of parameter values and with respective slew rates and around the new slew rate are chosen. A new shift parameter may be interpolated from the equivalent ratios in the following equation 

A pair of parameter values Tand Twith respective slew rates and around the new slew rate are chosen. A new stretch parameter Tmay be interpolated from the equivalent ratios in the following equation 

Referring now to the intermediate voltage waveform V is further transformed by the stretch parameter value Tby stretching it into the intermediate voltage waveform V . The intermediate voltage waveform V is finally transformed by the shift parameter value by shifting it into the final intermediate voltage waveform V.

At block the parasitic capacitance of the standard cell for the multi CCC current source model is characterized. The flow chart of illustrates the characterization of the parasitics of the standard cell in greater detail.

At block all the inputs of the multi CCC standard cell are set to a constant logic level input voltage. At block a voltage source is coupled to the output of the multi CCC standard cell. With the input voltage Vi being held constant the intermediate voltage level Vc is also held constant.

At block while holding the inputs to the multi CCC standard cell fixed a SPICE transistor circuit simulation is run of the transistors in the given multi CCC standard cell.

At block to characterize C V the voltage source at output applies a voltage ramp with a slew rate at the output of the multi CCC standard cell.

At block the current I going through the voltage source at the output of the multi CCC standard cell which asserts the voltage ramp is measured.

At block the expected initial output current I V t 0 V may be looked up from a current table such as the table illustrated in given that we set the output voltage Vand we estimated the intermediate voltage V t 0 at time zero.

where Iis the measured current and I V t 0 V is the initial output current that may be looked up from a current table.

Referring now to and a method of characterizing the miller capacitance Cor C of the multi CCC current source model is now described.

At block all the inputs but one input of the multi CCC standard cell are set to a constant logic level input voltage. They may be set to a constant high logic level by coupling to the positive power supply voltage VDD or a constant low logic level by being coupled to ground VSS.

At block a fixed voltage source Vis coupled to the output of the multi CCC standard cell . The fixed voltage source Vmay be fixed to a constant positive power supply voltage level VDD in one embodiment of the invention or a constant zero volts in another embodiment of the invention.

At block while holding the output voltage of the multi CCC standard cell fixed to the fixed voltage source V a SPICE transistor circuit simulation is run of the transistors in the given multi CCC standard cell.

At block to characterize the miller capacitance C a voltage source applies a voltage ramp with a fast slew rate at the input to the multi CCC standard cell . The slew rate of the voltage ramp should be as fast as possible for best results.

At block the output current I going through the fixed voltage source is measured and plotted over time in response to the voltage ramp at the input of the multi CCC standard cell.

At block the miller current Ior Iis determined and a time delay S in the change of the output current is also determined from the plotted output current. The time delay S is used as the change in the time period for the voltage decay over the miller capacitor.

Referring now to plots of exemplary waveforms for the input voltage ramp Vi intermediate voltage Vc and the output current Iare illustrated in the case that the fixed voltage source is set to the positive power supply voltage VDD. illustrate plots of exemplary waveforms for the input voltage ramp Vi intermediate voltage Vc and the output current Iin the case that the fixed voltage source is set to the zero volts.

In either case the miller current is a current that results because the miller capacitor resists an instantaneous change in voltage. The miller current flows from the input to the driver stage of the multi CCC current source model through the miller capacitor to the output node Vo. The miller current is the instantaneous change in current illustrated in as a result in the initial change in the intermediate voltage Vc in . The driver stage of multi CCC current source model has yet to turn on and provide a current. Thus the measured output current is the miller current prior to the driver stage turning on and driving a current into the output node.

The current through a capacitor is known to be proportional to the product of the capacitance and a time derivative of the voltage. The latter can be approximated by a change in voltage divided by a change in time 

At block the change in voltage over time in the miller capacitor is estimated using the time delay S. That is dV dt is congruent to the positive power supply voltage VDD divided by the time delay S or VDD S.

At block the miller capacitance is calculated using Eq. 12 and the measured miller current Im through the miller capacitor Cm and the change in voltage over time VDD S across the miller capacitance. After the miller capacitance is determined for the given multi CCC standard cell it is stored with the other parameters of the multi CCC current source model.

After the miller capacitance is determined the characterization of the miller capacitance ends at block .

Generally the multi CCC current source model is efficient in the runtime that is required to characterize the model as well as the amount of data storage need to preserve its parameters. The multi CCC current source model can achieve sufficient accuracy by keeping seven Vvalues and twenty time samples of

The embodiments of the invention may be used with or in a static timing analyzer for analyzing the timing of an integrated circuit.

Referring now to and a timing analysis of the circuit netlist of may be made starting at block in which jumps to block .

At block a netlist is analyzed to partition a circuit into stages. The stages are further levelized to perform static timing analysis. Each stage may include one or more standard cells and associated interconnect.

At block in each stage one or more standard cells are modeled using a multi CCC current source model. If a standard cell is a single CCC standard cell the multi CCC current source model may still be used with the voltage transform function having a unity value of one such that the intermediate voltage is the input voltage.

At block in each stage the coupled RC interconnect network may be generated from a parasitic extraction after a circuit is laid out or the parasitics may be generated in response to the netlist after logic synthesis and possibly a floor plan of the functional blocks of the circuit if available. The parasitics of the coupled RC interconnect network in each stage are modeled using a reduced order model ROM .

At block a determination is made as to whether or not the system is in a concurrent calculation mode. A concurrent calculation mode includes a noise or signal integrity analysis as part of the multi CCC current source model. If not the process goes to block . If so the process goes to block .

At block the delay in each stage is computed using the modeled current of the multi CCC current source model and the modeled parasitics of the reduced order model ROM . The process then goes to block .

At block for each stage assuming concurrent calculation mode the response on the output of each stage due to each noise aggressor transition is computed and tabulated. The process may then go to block .

At block for each stage the combined response on the output of each stage in response to all noise aggressor transitions may be computed and tabulated.

Next at block for each stage the delays and the sensitivities to all noise aggressors and process variations are computed via simulation using the multi CCC current source model and the reduced order model ROM for the associated RC interconnect. The receiving gates in each stage are modeled using constant capacitors. The process then goes to block .

At block the calculated delays of each stage are used by a static timing analysis tool to determine the critical delay paths. The process goes to block and ends.

The multi CCC current source model may be used to perform timing delay calculations on a stage of a circuit in the presence of process variations. Process variations can effect the interconnect as well as the transistors used in the logic cells of a standard cell library. For example a metallization process is used to manufacture the interconnect within an integrated circuit. During the metallization process the sheet resistance may vary in the metal as well as the width and thickness of metal lines due to process variations and change the impedance.

Referring now to a circuit stage is illustrated including a driver connected to a plurality of receivers A N through an interconnecting net . The stage is modeled by a circuit consisting of the net s parasitics and its driver and receivers A N. For the sake of simplicity a net is assumed to have a single victim driver as shown. However the methods may be adopted with modification for the general case of multiple driving stages.

For calculation of STA delays at the driver output port X and receiver inputs taps Y YN A N the transition at the driver input is required. Correspondently the delay calculator computes voltage responses at the so called probing points Yd Y YN A N in FIG. nodes which are connected to output of the driving gate and inputs of receiving gates respectively.

For calculation of the responses at the probing points Yd Y YN A N a state space formulation is used. A vector of voltages V v . . . v is formed at nodes of the RC network in the stage . The vector V of voltages may be formed so that vdenotes a voltage on the output node port from the driver as shown in and v . . . vdenote respectively voltages at input nodes taps of the receiving gates . . . v.

To enable an efficient and accurate delay calculation the nonlinear parts of the stage are approximated using appropriate models. The driver is modeled with the multi CCC current source model described previously. The driver includes a voltage controlled current source and a capacitance C. Calculation of responses at the stage s probing points is performed after responses are computed at the previous stages and parameters of input transitions such as slews and delays are determined at the inputs of the stage being analyzed.

During calculation of responses it is assumed that voltage at one of the inputs of the driving gate is transitioning either rising or falling and this causes some transition at the nodes of the driven interconnect. We can assume that for each input pin of the driving gate direction of transition at the input and output pins and logical values at other input pin there exists a unique current source model describing current at the output pin as a function of voltage transitions at the switching input and output pins I I v t v t . However since transition at the inputs of the driving gate are known at the time of delay calculation at the stage the driver current source can be represented as a function of time and voltage at the output node of the driving gate I I t v t .

For a given switching input pin directions of transitions at the input and the output of the driving gate and logical values at the other inputs the current drawn by the driver is thus a known function of time t and voltage vand may be designated as I t v .

Each of the receivers or receiving gates A N may be modeled using a constant input capacitor C extracted from a standard cell library for the respective type of cell or gate.

Kirchhoff s current law KCL equations regarding the principle of conservation of electric charge may be applied to describe the stage as follows 

In the left hand side of Eq. 13 C is a capacitance matrix G is a conductance matrix and v is the voltage vector. The vector y v v . . . v denotes voltages at the probing points which include output of the driver and inputs to the receiving gates of the M receivers A N as shown in .

In the right hand side of Eq.13 14 the matrices B and L are respectively input and output position matrices and Iis the current drawn by the driver current source.

The set of equations 13 14 is sufficient to calculate responses at the probing points which may be achieved via simulation of the circuit using numerical integration of the governing equations 13 14 . Note that the current source model for the driver is different for different input switching pins input and output direction transition and values at side other inputs. That is for each such configuration of the driver a separate simulation is required.

Since RC interconnect may include hundreds or even thousands of resistors and capacitors it is usually expensive to integrate Eqs. 13 14 with highly sparse matrices G C. In order to make simulation more efficient a model order reduction MOR may be performed to generate a load model a reduced order model ROM of the RC interconnect. Model order reduction is generally described in U.S. Patent Application Publication No. 2006 0095236A for U.S. patent application Ser. No. 10 932 406 filed on Sep. 2 2004 by Joel R. Phillips and incorporated herein by reference. The model order reduction results in much more compact state space equations with very little loss of accuracy. The reduction produces a reduced order model ROM for the interconnect parasitics which also includes receiver pin capacitors. After the reduced order model ROM for the interconnect parasitics is generated the state space equations can be formulated in this conventional form 

Note that matrix C in Eq. 16 is unrelated to the capacitance matrix used in Eq. 13 . The vector x is the state vector which usually has much smaller dimension that original vector of node voltages. Vector y is the vector of probing points as before and u in the right hand side of Eq. 15 is the driver current I. The input to the ROM which is the node where a driver is connected to and the outputs which are nodes where receiving gates are connected to are often referred to as port and taps respectively. Matrices E A are of much smaller size than before reduction.

Generally both linear and nonlinear elements of a circuit are functions of process parameters. Let a vector with n 1 . . . P denote a vector of interconnect and cell process parameters. It is assumed that the capacitance and the conductance matrices of the original state space system C G and driver current source I t v are known functions of process parameters. Likewise the state space matrices of the reduced system A E are also functions of process parameters. Moreover the capacitance matrix C the conductance matrix G the driver current source I t v of the original stage space system and the state space matrices A E of the reduced state space system can also be modeled so that the effects of variation of temperature and variation in power supply voltage Vdd can be accounted for.

For a fixed vector of process parameters the port and tap responses can be determined by solving both of the equations 5 6 . This may be done for instance using trapezoidal integration method. Since excitation u is a nonlinear function of the port voltage Newton Raphson iterations are used at each time step. This means that the responses and correspondent delays are implicitly functions of process parameters.

The delay calculation problem of the stage may be formulated as a problem of finding the port and tap responses y and the correspondent delays and slews as functions of vector . Some delay characteristics are of particular interest in the presence of process variations. The timing delay of the stage the stage delay is of interest at a particular point of the subspace of process parameters referred to as a process parameter vector PPV . The maximum and minimum values of the stage delay within a certain range subspace of process parameters may be of interest. Moreover the sensitivity of the stage delay with respect to process parameters at a particular process parameter vector may be of interest.

In the presence of large variations in process parameters one approach to model the stage delay is to choose a representative set of process parameter vectors often referred to as set of process corners and perform a delay calculation at each process corner. The selection of the corners is usually done in such a way as to cover the feasible space of process variations and ensure that the maximum and or minimum timing delays are reached at least one of the chosen corners. However with a large number of process parameters the number of corners to ensure a conservative analysis may be too high for the process corner approach of analyzing timing delays to be practical.

However all or several of the process parameters may vary within a relatively small range. In this case an efficient technique to model the timing delay with process variations is as a linear function of the process parameters. This approach is based on a sensitivity analysis. The sensitivity of delay is defined as a derivative of the timing delay with respect to a varying parameter. Since the behavior of timing delay in a sufficiently small vicinity of a chosen process parameter vector is linear with respect to the process parameters knowing the delay and its sensitivities at a process parameter vector provides a good model for the delay in the vicinity of the process parameter vector.

An algorithm for the calculation of the stage delay and delay sensitivity at a given process parameter vector is now described with reference to .

A state space system for the voltage responses at the output port X of the driver and receiver inputs taps Y YN A N of the receivers A N in the presence of process variations may be written as

Since both matrices and excitation vector depend on process parameter vector X the solution must depend on as well.

In order to find sensitivity of the stage delay with respect to process parameters at a given process parameter vector the state space system as well as responses are expanded in Taylor series around some nominal value of the process parameter vector .

Assuming that small variations of process parameters around their nominal values cause the variation of responses to be also small the circuit responses in the vicinity of the nominal vector of process parameters can be sought in the form of a Taylor series with respect to the deviation of the process parameter vector from its nominal value . . . 19 . . . 20 . . . 21 . . . 22 

In equations 19 22 the zero order terms A E u x correspond to nominal matrices excitation and states which are taken at . In this approach which uses Z formulation the matrices B and C do not depend on process parameters and therefore do not need to be expanded. The first order terms are summations of a product of the deviation of process parameter from its nominal value and the sensitivity or partial derivative of the correspondent function with respect to this process parameter e.g.

Before formulating the first order problem allowing sensitivity calculations notice that since u I t v depends on process parameters via two latter arguments the sensitivity with respect to w.r.t. is

The two components in the first order correction of driver current are due respectively to variation of the gate driving strength itself and due to change in driver output response.

In equation 27 yis first element of vector y which is the sensitivity of driver output response w.r.t. parameter and it can be expressed via xusing Eq. 28 .

Equations 27 28 are linear with respect to sensitivity values. All quantities in the right hand side of equations 27 28 are known since they depend on the nominal response which is found from equations 23 24. The sensitivities can be calculated from equations 27 28 using different numerical methods for solving a set of linear ordinary differential equations. For instance a trapezoidal numerical integration method can be used to calculate the sensitivities using equations 27 28.

In another embodiment of the invention the total delay under nominal conditions may initially be computed. The non linear circuit equations for the stage including current source model for the driver Iand ROM for interconnect may be formulated in their parameterized form with respect to the process parameter vectors. The port and tap responses as well as the equations and the driver current equations may be expanded around the nominal values of process parameter. The sensitivities of the responses and hence delays to process variations may be determined from a set of linear equations 27 28 obtained by the application of a perturbation method to original equations 17 18 .

Digital electrical analysis engines are usually compared against a SPICE like transistor level circuit simulator such as Cadence Design Systems Inc. Spectre transistor level circuit simulator product. A number of tests have been performed to validate the accuracy of the multi CCC current source model. A comparison was made on a stage by stage basis. The basic structure of all netlists is a three stage gate chain. The test suite has thousands of combinations of input slews drivers interconnect topologies lengths and sizes. To validate nominal delay noise coupling capacitors of the interconnect if any are coupled to ground. Each of the cells in the standard cell library such as a commercial 90 nm technology cell library is completely characterized for the multi CCC current source model beforehand. The library models for the electrical simulation engine may also be fine tuned to achieve greater accuracy.

Referring now to voltage waveform results of a static timing analysis using the digital delay calculator with a multi CCC current source model and transistor level simulations generated by Cadence Design System Inc. s Spectre transistor level simulator are plotted for comparison.

The test case used to generate the plots of was three stages of AND gates coupled in series together with an interconnect network with a maximum span of 200 microns m . An AND gate is a multi CCC standard cell with its driver stage being an inverter. The ramp input voltage waveform V t coupled to the input of the multi CCC standard cell in the first stage had a slew rate of 100 pico seconds ps . The other curves plotted in are pairs of curves both generated at the following stages input voltage V t at stage input voltage V t at stage and output voltage V t at the output port of stage . The calculated results from the static timing analysis using the digital delay calculator and the simulated results of the transistor level simulator are substantially similar such that the pairs of curves are indistinguishable from each other at each stage.

Referring now to a plot of timing delays calculated with the delay calculator EOS versus those simulated with a spice transistor level simulator such as Spectre simulator by Cadence Design Systems Inc. is illustrated. A forty five degree line illustrating a perfect match is also drawn to see how well the static timing results match that of the transistor level simulated results. As shown in the timing delay determined using delay calculator EOS with a multi CCC current source model substantially matches the timing delay simulated by the Spectre transistor level simulator in most cases.

While the output results of the static timing analysis may be substantially similar there may be other cases where a lesser level of accuracy may be acceptable. Depending on the usage scenario different applications may need different levels of accuracy. For example during cell placement we may want to perform delay calculations using lookup models without considering any signal integrity issue. However during sign off of an integrated circuit design for manufacture it may be desirable to calculate the timing delays with noise effects using the fully extracted parasitics. For some critical paths the most accurate delay calculations may be desirable with results substantially similar to that achieved using a SPICE transistor level simulation. The software infrastructure of static timing analyzer EOS with the multi CCC current source model can support such different usage scenarios.

With smaller geometries and larger numbers of switching transistors and gates in integrated circuits accurate and efficient calculation of delay and crosstalk effects has become more important in the design of integrate circuits.

Crosstalk noise may be analyzed concurrently with timing delays by modeling the noise effects using a current source. This additional current source along with a voltage dependent current source modeling a switching or static driver of the victim net and reduced order model for the interconnect allows for an efficient calculation of noisy transitions and noise glitches on the victim nets. In this manner multi CCC current source models may be used to model noise and timing delays.

U.S. Pat. No. 7 359 843 issued on Apr. 15 2008 to inventors Igor Keller et al. entitled ROBUST CALCULATION OF CROSSTALK DELAY CHANGE IN INTEGRATED CIRCUIT DESIGN and incorporated herein by reference introduces sources of noise in a circuit and one method of analyzing the noise aggressors therein. However it is desirable to concurrently compute timing delays and other noise effects in a circuit due to noise sources such as crosstalk noise from noise aggressors.

The effect of a switching aggressor on a victim is proportional to the slew rate of transition of on the aggressor. In one embodiment rising edge slew rate is defined as time required for a rising signal to transition from 20 of supply voltage Vdd to 80 of Vdd and then divided by 0.6. Similarly the falling edge slew rate is defined as time required for a falling signal to transition from 80 of Vdd to 20 of Vdd and then divided by 0.6.

The effect of aggressor s crosstalk onto a victim s steady state or transition times is roughly proportional to signal transition rates slew rates on the aggressor s net that in turn are proportional to effective load seen by the aggressors drivers. That is the slew rate on an aggressor depends on the coupling capacitance between the aggressor and the aggressor s neighbors as well as the strength of drivers holding the aggressor s neighbors i.e. second order aggressors . Due to the high ratio of coupling capacitance to ground capacitance of wires in modern process nodes it is important to account for second order aggressors aggressors of aggressors of a victim when calculating crosstalk effects on the victim net. Neglecting decoupling the second order aggressors effectively increases the load. Depending on the magnitude of the coupling capacitance between an aggressor and its aggressors the error of slew rate due to such decoupling can be significant. Thus second order aggressors may be accounted for when determining aggressor slew rate.

A first order aggressor is an aggressor net that has a significant crosstalk influence on a given victim net. A second order aggressor is an aggressor net that has significant influence upon a transition waveform or slew rate on a first order aggressor of the given victim net. It is possible that an aggressor net may serve as both a first order aggressor and a second order aggressor relative to a given victim net. The consideration of second order aggressor effects can contribute to more accurate delay change analysis.

Referring now to each stage of a circuit circuit stage may have a logic gate such as a buffer or driver with some interconnect with or without one or more aggressor drivers A N and an aggressor net to couple the output of the driver to one or more receiving logic gates such as an AND gate A and or inverter BN. Each stage of the circuit circuit stage may be modeled for static timing analysis to reduce the run time in determining timing delays.

The interconnect illustrated in can be modeled by a reduced order model ROM for interconnect. U.S. Pat. No. 7 359 843 issued on Apr. 15 2008 to inventors Igor Keller et al. entitled ROBUST CALCULATION OF CROSSTALK DELAY CHANGE IN INTEGRATED CIRCUIT DESIGN previously incorporated by reference generally describes how the interconnect with an aggressor may be modeled with a reduced order model. The input load of the one or more receiving logic gates A B illustrated in may be respectively modeled by one or more capacitors A B.

Generally noise effects and timing delay of a circuit stage may be concurrently computed for static timing analysis of integrated circuit designs by using multi CCC current source models for drivers of victim nets and aggressor nets. In order to compute the delay in the presence of noise in general one has to simulate the stage s circuit with victim and aggressor nets undergoing transition. Such a simulation is performed for each timing arc of the victim gate. In addition the alignment of aggressor transitions relative to victim transition and each other which gives the worst case delay is not known prior to simulation and has to be found in iterations. The need for a plurality of simulations on a larger circuit which includes coupled RC network and aggressors drivers may be a computationally expensive task. However many stages exhibit weak coupling between victim and aggressor nets in which case a perturbation method can be employed. In this case the noise impact of each aggressor on victim can be found independently of other aggressors. Due to the weak noise effect and usually even weaker non linear interaction between aggressors the independent results from each aggressor driver may be aligned together to compute the transition in the signal on the output of the victim driver due to the impact from all the aggressor drivers. This linearly superimposed combined noise effect may be very close to the one computed from a full nonlinear simulation but is much less expensive to compute. Furthermore a relatively inexpensive perturbation method may then be used to compute the changes in the timing delay of the victim driver when switching due to the combined noise effects of all the aggressor drivers for the circuit stage.

Crosstalk analysis includes glitch calculations as well as calculations of the effects of crosstalk noise on timing delay of a circuit. The approach to crosstalk analysis undertaken herein is different from other approaches in that i it is based on a unified analysis infrastructure used for both base delay calculations and crosstalk analysis ii it is based on a mathematically more rigorous formulation and iii it is more efficient since it may use perturbation methods to find a response or transition in the presence of weak noise.

Crosstalk analysis is performed on a circuit stage which is a usually small part of a digital circuit consisting of a victim net and one or more aggressor nets coupled via capacitance to the victim net and their corresponding driving gates victim driver and aggressor drivers . The receiving gates coupled to the victim net are typically not considered to be part of the circuit stage but their parasitic effects on delay of the output of the circuit stage may be modeled using gate capacitance.

Transitions on the aggressor nets affects a victim net in two situations i when the victim driver is at a steady state transitions on aggressors generate a glitch which can propagate further on and cause a logical failure in a sampling flip flop FF and ii when the victim driver is transitioning the switching aggressor drivers may speed up or slow down the victim net transition potentially causing a timing violation at the output of the circuit stage.

In the framework of static crosstalk timing analysis a worst case configuration is sought in the circuit stage for which the crosstalk effect is a maximum under certain constraints. The constraints are switching windows SW or timing windows for victim driver input transitions and aggressor driver input transitions and the logical relationships between aggressor nets and victim nets. This gives rise to a couple of complexity factors in a crosstalk analysis of the circuit stage i that the worst case alignment between victim and aggressor transitions is not known in advance and is found through a multi dimensional nonlinear optimization ii that for each optimization step a solution of a set of ordinary differential equations ODEs is to be determined for the sub circuit stage. The set of ordinary differential equations ODEs to be solved may be large as it includes the coupled RC networks for the victim net and aggressor nets and their respective driver cells.

In accordance with embodiments of the invention calculation of noise effects noise glitch and delay change due to noise is performed concurrently with the calculation of delay for each delay arc. The noise effects are computed inside a loop over cell timing arcs or edges of a timing or design graph and included into the full timing delay that is passed to the static timing analysis tool. That is the analysis of the noise sources is concurrently performed by a delay calculator in such a way that the noise effects on timing delay are included in the step where the cell and interconnects delays are computed. In this manner the delay calculator can pass full timing delays to a static timing analysis tool including noise effects.

To concurrently analyze noise and delay the delay SI calculator in works on a net level abstraction. It deals with computing the signal propagation delay through each edge or timing arc of a design or timing graph. Typically the computation is performed for a set of related edges where all the edges are formed based on a cell driving a net. The set of related edges is often referred to as a stage. The delay SI calculator creates an electrical view of a stage and then computes all required electrical calculations on this stage by performing appropriate electrical simulations.

Referring now to an exemplary portion of a design or timing graph a subgraph corresponding to a circuit stage is illustrated. The subgraph and the overall timing graph includes driver based timing arcs associated with drivers and interconnect based timing arcs A B associated with the interconnect network from each driver to each input of the receivers A B.

Referring to a timing analysis method is illustrated for concurrently computing noise effects and the overall timing delay.

At block the analysis begins by forming a stage of a circuit around a victim net being analyzed such as the circuit stage shown in . The stage of the circuit is a sub circuit of an overall integrated circuit design. The stage of the circuit includes a victim net its drivers and receivers parasitic resistance and capacitance of the interconnect network aggressor nets and the aggressor drivers and aggressor receivers if any.

An initial model of the circuit stage is formed such as shown by that were described previously. The model circuit of stage is created including models of interconnect parasitics driving gate and receiving gates A B. A method of forming the initial model of the circuit stage is illustrated in detail by .

Referring now to at block the victim drivers and receivers and the aggressor drivers and receivers if any are identified in the circuit. The process then goes to block .

At block the parasitic resistance and capacitance of the interconnect network is read and loaded. The process then goes to block .

At block out of all the identified aggressor nets a subset are identified as being strong aggressor nets whose R and C elements are included into the coupled parasitic RC network of the victim net. The aggressor nets which are not identified as strong are referred to as being weak. The weak aggressor nets are modeled in a different way by using a virtual aggressor method that lumps them together into one or more virtual aggressors to simplify calculations. A method of filtering the weak aggressors from the strong aggressors may be selected by a user to determine the real aggressor nets and drivers whose R and C elements are included into the coupled parasitic RC network of the victim net. Constraints may be selected by a user to be used with the filtering method to determine the strong real aggressor drivers. After differentiating between the strong aggressors and the week aggressors the process then goes to block .

At block a virtual aggressor may be formed to model and simplify the selected set of weak aggressors. Various methods of lumping weak aggressors together may be used to simplify computations with little loss in accuracy. For example a virtual aggressor may be formed by i connecting the driver nodes of the weak aggressors together ii eliminating setting to zero or shorting out the wire resistance in the weak aggressor nets iii lumping capacitors in the weak aggressors connected to the same node in the victim net together into a single capacitor with a capacitance value determined by various factors such as the total number of weak aggressors. The formation of virtual aggressors is further described in U.S. patent application Ser. No. 11 417 862 entitled SYSTEM METHOD AND COMPUTER PROGRAM PRODUCT FOR HANDLING SMALL AGGRESSORS IN SIGNAL INTEGRITY ANALYSIS filed by Igor Keller et al. on May 4 2006 which is incorporated herein by reference. Accordingly all the gate models of the drivers of the weak aggressors may be lumped together to form a model of the driver of a virtual aggressor. One such driver model may be a Thevenin model a voltage source coupled to the virtual aggressor responsive to the slew rates of all the weak aggressor to approximate the current waveform induced by all the weak aggressors when switching together. The process then goes to block .

At block the inputs pins of the receivers to which the output of the victim driver is coupled are evaluated to determine the input capacitance of the receivers which may be selectively modeled by capacitors such as capacitors A B respectively modeling receivers A B illustrated in . The process then goes to block .

At block the reduced order interconnect model modeling the interconnection network between the victim driver and the receivers is generated. The reduced order model includes the interconnect parasitic resistance and capacitance between the victim driver and the receivers and between the aggressor driver and the receivers . Depending upon how the aggressor driver is selectively modeled a parasitic device e.g. a capacitor and or resistor may be included as part of the reduced order interconnect model to model the aggressor driver . The process then goes to block .

At block gate models for victim drivers and aggressor drivers for each timing arc in the timing graph of the circuit are read from a physical cell library representing a plurality of logic gates that may be instantiated into an integrated circuit design. There may be a plurality of user selectable gate models from which a user may select to model each victim driver and aggressor driver in the circuit stage. Depending upon the user selection the appropriate gate models for each victim driver and aggressor driver in the circuit stage are read from the physical cell library.

The process then goes to block and upon completion of forming the initial circuit stage model returns to the method disclosed by . The assembled modeled components of the initial circuit stage model then undergo further analysis characterization to simplify the circuit stage and speed up a static timing analysis that is to be performed on the larger integrated circuit design including the circuit stage.

Generally the circuit stage may be described by the following set of ordinary differential equations commonly referred to as a state space system allowing one to calculate voltage waveforms on all nodes of interest particularly the outputs of the circuit stage coupled to the receiver input pins as follows 

In this set of state space equations Eqs. 29 and 30 x is the vector of states for the circuit stage A E B C are state space matrices formed during resistor capacitor RC interconnect network reduction ROM generation v is a vector of voltages at the taps inputs to the final receivers of the stage and ports outputs of drivers of the stage and u is a vector of current sources at the inputs of the circuit stage to model the victim driver and or the aggressor driver. The state space equation system describes port and tap voltage responses v to nonlinear current source s u connected at port s of the RC network.

In general the nonlinear current sources attached to each port are nonlinear functions of time and unknown voltage at that port u I t v . Additionally the current sources used to model the aggressor drivers have an additional parameter which may shift over time reflecting the fact that transition at aggressor input can occur within certain timing or switching windows SW . The current source for the kaggressor is described by the equation u I t v where k is the shift parameter for the kaggressor.

Calculation of the voltages on the terminals ports and taps of the circuit stage may be performed by a numerical integration of state space equations Eqs. 29 and 30 which can be very expensive. However due to the special structure of the matrices A and E a perturbation method may be used to solve the state space equations more efficiently to determine the voltages.

The general idea of the perturbation method is separation the original problem into several simpler problems which can be solved much more efficiently with little or no loss of accuracy. In the particular the application of the original problem of calculating a response to simultaneous transitions of victim and aggressor nets is separated into two or more simpler problems.

The first problem describes a transition on only the victim net to calculate a base delay with the aggressor nets being quiet. The noiseless responses and corresponding delays can therefore be determined from the first problem which is much simpler and easier to solve than the original problem.

The crosstalk effects which are considered to be perturbations of the noiseless solution are determined from the second problem which models the switching aggressors. The second problem provides for crosstalk induced adjustment to the noiseless solution found from the first problem.

At a high level of description the perturbation method is based on a mathematical expansion of unknown quantities in a series such as . . . 31 . . . 32 Eq. 31 for the vector of states x and Eq. 32 for the vector of voltages v at ports and taps respectively.

The system of state space equations Eqs. 29 and 30 are also expanded in series yielding a set of problems to be solved sequentially. As described above the expansion of the original problem is carried out in such a way such that the first problem describes a noiseless situation where aggressor drivers are quiet and the crosstalk effects are obtained from the second problem. Accordingly the excitation vector u may be expanded as well as follows . . . 33 

In the expansion of the excitation vector u the first term uis the excitation vector for the first problem containing only the current source to model the victim driver u I t v 0 . . . 0. Here the only non zero element of the vector of sources represents the current source attached at the 1port modeling victim s driver. The corresponding first order problem becomes 

The second term uin the expansion of the excitation vector includes current sources modeling the aggressor drivers as well as a correction current through the victim driver due to crosstalk effects as follows . . . . 36 

Here gis the average small signal admittance of the victim driver model computed as g where denotes time averaging and g dI t v dv v. The other terms in the source vectors are current sources at ports 2 . . . k representing switching aggressor drivers. These current sources are shifted by corresponding alignment parameters which need to be chosen to maximize effect of noise for example glitch height or delay change . The second order problem has the form 

The solution of the problem given by Eqs. 37 38 is the noise induced correction of the noiseless solution v. Since the problem 37 38 is linear and autonomous its solution can be found using superposition of properly aligned solutions of the following problems each defining a response from single aggressor switching 

Here in Eqs. 39 40 the subscript k denoted the problem and corresponding solution for the k th problem defined for k th aggressor source vector is u vg 0 ..0 I t 0 . . . 0 and the correspondent solution vis a vector of port and tap voltages due to k th aggressor switching and vis the voltage response to the k th aggressor at the victim s port. Since the system is autonomous any time shift in the source causes same time shift in the response hence the combined response due to all aggressor properly aligned becomes 41 

The linearly combined solution 41 depends on the alignments of each aggressor which now can be determined from the condition that the corresponding victim response has certain maximized criterion such as glitch height or delay. Once the worst case alignment vector is found it can be used to refine the solution by either computing higher order correction to the response or by performing a full nonlinear simulation with all aggressors properly aligned and switching.

In this manner using the perturbation approach to solving the equations the effect of crosstalk on victim transitions is initially computed separately for each aggressor and then linearly or nonlinearly combined with the noiseless transition solution of the first problem or the base solution. The corrections to the solutions of the state space equations due to non linear interactions between the victim and aggressors drivers may be found from the high order problems formulated using the next terms in the expansion similar to the expansion of terms shown by Eqs. 31 32 and 33 .

Referring now back to further analysis of the circuit stage is undertaken using the state space system.

At block iterations of computations are performed for each victim driver of the victim net. For each victim driver base timing delays are computed for each timing arc in the timing graph from the victim driver to the input of each victim receiver. The base delays of each timing arc are computed using the state space equations without any current source modeling an aggressor driver. To compute base delays of each timing arc Eqs. 34 and 35 are used. That is the base delays are computed for each timing arc in the circuit stage without regard to the noise from an aggressor driver. The process then goes to block .

At block a determination is made to be sure all victim drivers in the circuit stage have been considered to compute base delays and complete the computation loop over blocks and . The process then goes in parallel to block where the base delays for each timing arc of the timing graph is annotated to the netlist of the circuit cell library and to block if noise effects on the circuit stage are to be considered.

Blocks are used to determine noise effects on the circuit stage. If noise is not being considered blocks may be skipped as illustrated by the parallel path directly from block to block .

At block for each of the one or more aggressor drivers the glitch response of the circuit stage is computed using the state space equations of Eqs. 39 and 40 . Holding other inputs in a steady state each aggressor driver is independently modeled and its input switched to determine how it affects the signal e.g. generating a glitch in the signal that is input into each receiver . The circuit stage described by the state space equations is simulated to determine the glitch response when the vector u representing the current source of the aggressor driver changes. In order to compute the glitch response of the circuit due to the k th aggressor denoted above by vall but the k 1 th current source term in the current source vector u of the state space equations are ignored.

At block a determination is made to be sure all aggressor drivers in the circuit stage have been considered to complete a computation loop over blocks and . The computation loop of blocks are used to determine glitch responses over all the receiving gates and timing arcs from the driver to each receiver. After competing the computation of the glitch responses the process then goes to block .

At block iterations for each receiver coupled to the victim net is initially performed. For each receiver the input signals to the input of the aggressor drivers are aligned with the input signal to the victim driver in response to the respective glitch responses previously computed in block . The method of alignment may be user selectable such as described herein with reference to for example. Alternatively the alignment may be performed in such a way so as to maximize a certain objective given by a predefined metric. For example the objective may be to determine alignment of the aggressor input signals with the input signal to the victim driver that generates the worst case glitch in the input signal to the receiver. As another example the objective may be to determine alignment of the aggressor input signals with the input signal to the victim driver that generates the worst case delay in the input signal to the receiver. After the aggressor input signal alignment with the input signal to the victim driver is determined the process may go to block .

At block a determination is made to be sure all receivers in the circuit stage have been considered for determining the alignment of the input signals to the aggressor drivers. If not all receivers have been considered the process loops back to repeat block for the remaining receivers in the circuit. If all receivers have been considered the process goes to block .

At block the aligned glitch responses are linearly summed up together to determine a combined first order noise effects on the circuit stage. If the level of the combined first order noise effects is below a user defined threshold second order noise effects may be ignored. The process goes to block to make such determination.

At block a determination is made as to whether or not the computed level of the combined first order noise effects is below a user defined pre determined threshold. If so the process may skip block and go to block directly. If not the level of the second order noise effects may be significant and the process goes to block to make such computations. The process is more efficient if the second order noise effects can be skipped.

At block a combined nonlinear simulation of the circuit stage is performed using Eqs. 29 30 to compute the responses of the circuit stage to concurrent switching of all the input signals of the circuit stage. The input signals to the aggressor drivers are switched in accordance with the alignment determined previously in block . This causes all the current sources in the current vector u to be turned on and the state space equation is solved to compute the response of the circuit stage thereto. As the simulation of the circuit stage to the aggressor drivers is typically non linear the computed voltage response of the circuit stage at the inputs to the receivers is expected to be non linear in this case as well. After the output responses for the circuit stage are computed in response to the one or more worse case aggressor input alignments the process goes to block .

At block the output responses from the circuit stage in response to the noise sources generated by aggressor drivers and aggressor input signal alignments may be interpreted with an objective measure to determine the overall glitch response and delay in the circuit stage to signal switching and noise. The object measure to interpret the responses may be user selectable. As the output responses from the circuit stage in response to the one or more worse case aggressor input alignments are non linear they may be interpreted with different objective measures for glitch and timing delay. For example an objective measure for glitch may be thirty percent of the power supply voltage while an objective measure for timing delay may be fifty percent of the power supply voltage. After the responses have been interpreted the interpreted responses may be saved into a database associated with the circuit stage such as a cell library. The process goes to block .

At block the interpreted responses to glitch and timing delay in presence of the noise effects are annotated onto the timing graph of the netlist of the given circuit stage and saved into a database for use by a static timing analysis tool. The static timing analysis tool may be used to determine the overall timing delays in a larger or complete integrated circuit design with the model and the saved responses. The annotation of the results to the netlist substantially completes the model of the given circuit stage for use in static timing analysis. Other circuit stages with different gates and interconnect may be similarly modeled and characterized. Otherwise the process may go to block and end.

There are a number of different methodologies that are available to analyze noise and the noise on delay effects that have been adopted by users and EDA software vendors. However each of these methods is typically rigidly applied to the circuit analysis for noise and noise on delay analysis. Until now a single flexible solution that can support a plurality of possible useful solutions has been a challenge. A flexible noise analysis method is now described that can be tuned for various methodologies to analyze noise and the noise on delay effects in a circuit.

Referring now to a computer system is illustrated for providing timing and noise analysis of an integrated circuit. The system may include a display device a processor a processor readable storage medium and an input device . Software instructions may be stored in the processor readable storage medium for execution by the processor . The software instructions may have the processor display a user interface on the display device . The user interface may display a plurality of selectable choices that are selectable by a user through use of the input device . The user interface may be used to facilitate the flexible noise analysis methods now described.

The method of analyze noise and the noise on delay effects in a circuit stage may be partitioned into independently controlled components such as an aggressor driver model a victim driver model aggressor filtering constraining a virtual aggressor driver aggressor aligning and a metric or objective measure of the noise effects on the circuit. With a flexible noise analysis method provided by EDA software each of these components may have a plurality of choices displayed on a display device by the user interface that are selectable by a user with the input device .

Generally a user selects from a plurality of methods of modeling an aggressor driver as the aggressor driver model component. A user selects from a plurality of methods of modeling a victim driver as the victim driver model component. A user selects from a plurality of modes of filtering aggressors as the aggressor filtering constraining component. A user selects from a plurality of metrics used for aggressor mutual alignment as the aggressor alignment mode component. A user further selects from a plurality of metrics that may be used to interpret the results of timing delays or timing glitches in a signal as the metric component for objectively measuring the noise effects on a circuit.

More specifically the aggressor driver model component of the flexible noise analysis method is used to select the aggressor driver model when using the state space equations Eqs. 29 and 30 for computing the glitch response on the receivers and the timing delay in signals including noise coupled into the receivers.

Aggressor driver models for an aggressor driving gate that may be selected by a user for the aggressor driver model component include two or more of a voltage source a linear current source a non linear current source and a transistor level netlist.

The selection of the aggressor driver model can affect the accuracy and the run time of the noise analysis. However the selection of the aggressor driver model for the aggressor driver model component of the flexible noise analysis method is independent from the selection of the other components. That is the selection of the victim driver model the aggressor filtering constraining the aggressor aligning and the objective measure of the noise effects on the circuit are not dependent upon the choice made for the aggressor driver model component.

The victim driver model component of the flexible noise analysis method is used to select the victim driver model when using the state space equations Eqs. 29 and 30 for computing the glitch response on the receivers and the timing delay in signals including noise coupled into the receivers.

Victim driver models for the victim driving gate that may be selected by a user for the victim driver model component include two or more of a linear current source a non linear current source and a transistor level netlist.

The aggressor filtering constraining component of the flexible noise analysis method is used to select a method of filtering or selecting a subset of aggressor drivers that are to be included in the noise analysis method for simplification as well as the constraints that are used in determining the worst case alignment of aggressor driver switching relative to each other and to the switching of the victim driving gate .

Possible methods for aggressor filtering include a using a timing window TW based overlap method to determine subgroups of aggressors that induce crosstalk and b using a logical relation e.g. AND to determine a subset of aggressor drivers that can switch together. With the method selected a set of constraints for the method may be to be used during alignment. illustrates an exemplary use of aggressor switching timing windows.

Referring now to an exemplary method of aligning aggressor drivers and their input signaling is illustrated. illustrates three aggressor timing windows Agg Agg and Agg plotted along a time axis with respect to a clock signal CK for three aggressor drivers. An aggressor timing window represents a time period with respect to the clock signal CK over which the input to the respective aggressor driver may switch to inject noise into an input of a receiver. Two or more aggressor timing windows may overlap to form various time ranges along the time axis. For each of the various time ranges a list may be formed indicating the aggressors that are capable of switching within the respective time range. For time ranges and a non overlapping portion of the timing window only the first aggressor driver Agg may switch. For the time range the timing windows overlap such that the first aggressor driver Agg and the second aggressor driver Agg may switch during the time range . A list including the first aggressor driver Agg and the second aggressor driver Agg may be formed for the time range . For the time range the timing windows and overlap such that the first aggressor driver Agg and the third aggressor driver Agg may switching during this range. Accordingly a list for the time range may be formed including the first aggressor driver Agg and the third aggressor driver Agg. For time range and a non overlapping portion of the timing window only the third aggressor driver Agg may switch. Accordingly a list for the time range would include only the third aggressor driver Agg.

The virtual aggressor component of the flexible noise analysis method is used to select a method of lumping the selected subset of aggressor drivers into one or more virtual aggressor drivers. For example a first plurality of aggressor drivers may be lumped into a first virtual aggressor driver coupled to one end of the interconnect network while a second plurality of aggressor drivers may be lumped into a second virtual aggressor driver coupled to an opposite end of the interconnect network. As another example every three aggressor drivers positioned along the interconnect network may be lumped into a virtual aggressor driver.

The aggressor aligning component of the flexible noise analysis method is a method and metric that is used for determining how to align the aggressor driver input signal switching to the victim input signal switching as described with block of .

The method of aligning the aggressor driver transitions relative the victim driver transitions is based upon a a metric or objective function that is maximized for indentifying the worst case alignment and b the method of how the constraints are to be applied. The objective function to evaluate a glitch response may be a maximum glitch peak a maximum glitch area energy or a maximum delay based on a crossing time of transitions at a predetermined voltage threshold level between input signal and the resultant output signal coupled into a receiver or the maximum glitch peak or maximum delay measured at the output of a receiving gate driving a nominal capacitive load where the output voltage response V t of the circuit stage resultant output signal is coupled to the input of the receiving gate.

Exemplary alignment methods constraints include a a partial alignment method and b a binary alignment method. The binary alignment method involves overlapping windows of timing windows within the objective constraints such as shown by . The partial alignment method includes non overlapping timing windows meeting the objective constraints. The non overlapping timing windows may be aligned as close as possible within the objective constraints to form the worse case for the objective measure.

The metric component to determine an objective measure of the noise effects on the circuit component with the flexible noise analysis method is used to determine a mapping from the output voltage response V t of the circuit stage into a number M. The mapping is an objective optimization function e.g. search for worst case results . Exemplary metrics include glitch peak glitch area energy and timing delay. The worst case results may be the maximum glitch peak the maximum glitch area energy and the maximum timing delay. The peak of the glitch in the peak in output voltage response from the circuit stage caused by the aggressor driver. The maximum glitch energy is the integration of the glitch in the output voltage response over time. The timing delay may be determined in a number of different ways. The timing delay may be determined by the time it takes the output voltage response from the circuit stage to cross over a pre defined voltage threshold level. Instead of measuring at the output of the circuit stage into a receiving gate the receiving gate may be used to assist in the metric by measuring at the output of the receiving gate coupled to a predetermined capacitive load. In this manner the receiving gate drives the predetermined capacitive load in response to the output response of the circuit stage. The glitch peak glitch area energy and or timing delay may then be measured at the output of the receiving gate.

Concurrent calculation of noise effects and timing delay for a circuit stage within an integrated circuit can provide a more efficient static timing analysis. A separate computational step of determining noise induced delay changes incremental delays and annotation to the timing graph can be avoided.

Pessimism in the overall timing analysis of an integrated circuit in the presence of crosstalk noise may be reduced as some of previous computational assumptions regarding noise effects need not be made. Noise effects are computed for individual timing arcs to provide improved results. A weakest timing arc need not be singled out from the set of timing arcs for a circuit stage to calculate a delay change due to noise effects.

With a concurrent noise and delay calculation several computationally expensive steps of the analysis are shared to reduce run time. In contrast if the base delay glitch noise and delay changes were computed sequentially significant duplication of simulations would be performed resulting in a high run time. In addition the concurrent computational methods may be performed in parallel by parallel processors to further reduce the run time.

A flexible method of noise analysis may be provided with user selectable components to control the computational methods independently from one another. In this manner the noise analysis flow can be easily tuned and adjusted in order to meet different users methodologies and optimize the analysis by balancing the tradeoff between accuracy and runtime.

When implemented in software the elements of the embodiments of the invention are essentially the code segments to perform the necessary tasks. The program or code segments can be stored in a processor readable medium that can be read and executed by a processor. The processor readable medium may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit a semiconductor memory device a read only memory ROM a flash memory an erasable programmable read only memory EPROM a floppy diskette a CD ROM an optical disk and a magnetic disk. The program or code segments may be downloaded via computer networks such as the Internet Intranet etc and stored in the processor readable medium. When implemented as a system the elements of the embodiments of the invention include a processor to execute the program or code segments that may be stored in a processor readable medium to perform the tasks or functions of a method or process.

The embodiments of the invention are thus described. While embodiments of the invention have been particularly described they should not be construed as limited by such embodiments. Instead the embodiments of the invention should be construed according to the claims that follow below.

