---

title: Method and system for deploying content to wireless devices
abstract: A method and system for deploying content to devices is provided. The method and system can be used to deploy markup content to web browser applications on wireless devices. The wireless devices may included, for example, WAP phones, HDML phones, Palm VII, Palm V, etc. The method and system can also be used in conjunction with wired systems. A translator receives data, in a variety of formats, from the wireless devices. The translator then translates the data into a standardized format. A content provider interface receives the data in the standardized format and provides content data, also in the standardized format. The content data in the standardized format is provided to a transformer. The transformer transforms the content data into the pre-selected format for the particular wireless device. The content data can then be utilized and manipulated by the wireless device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09418053&OS=09418053&RS=09418053
owner: ZHIGU HOLDINGS LIMITED
number: 09418053
owner_city: Grand Cayman
owner_country: KY
publication_date: 20131226
---
This patent application is a continuation of and claims priority to each of U.S. patent application Ser. No. 13 752 097 filed Jan. 28 2013 entitled METHOD AND SYSTEM FOR DEPLOYING CONTENT TO WIRELESS DEVICES now U.S. Pat. No. 8 825 869 which is a divisional of U.S. patent application Ser. No. 13 345 187 filed on Jan. 6 2012 entitled METHOD AND SYSTEM FOR DEPLOYING CONTENT TO WIRELESS DEVICES now U.S. Pat. No. 8 364 821 which is a continuation of U.S. patent application Ser. No. 12 318 946 filed on Jan. 13 2009 entitled METHOD AND SYSTEM FOR DEPLOYING CONTENT TO WIRELESS DEVICES now U.S. Pat. No. 8 095 663 which is a continuation of U.S. patent application Ser. No. 09 709 487 filed Nov. 13 2000 entitled METHOD AND SYSTEM FOR DEPLOYING CONTENT TO WIRELESS DEVICES now U.S. Pat. No. 7 483 983. To the extent permitted the entireties of the foregoing patent applications are respectively hereby incorporated by reference herein.

The present invention relates in general to the field of communications and in particular to a method and system for deploying content to devices.

A multitude of wireless handsets personal data assistants PDAs and pagers exist that feature microbrowsers for wireless access to the World Wide Web Web . Wireless Web development standards are emerging from groups such as the Wireless Access Protocol WAP Forum . However these standards have yet to fully permeate the market. Therefore handset and PDA manufacturers currently support several different protocols and markup languages. The plethora of protocols and languages create a problem for application developers trying to provide content that can be presented with some consistency across the widest range of devices. This is often referred to as the Write Once Render Anywhere problem. The WAP Forum is addressing this problem by standardizing on a markup language Wireless Markup Language WML and providing a set of guidelines for developers. Although a tremendous help WML does not cover the vast array of devices already on the market not to mention those devices deployed with non conformant software and services.

Most wireless Web enabled devices attach to a gateway or proxy system housed at a network carrier or Wireless Service Provider WSP . shows various methods of wireless Internet access. Most Web enabled phones use the phone.com 3.x UP.Browser to request content from an origin Web server. Phone.com UP.Link gateways housed at the carrier sites process these requests which are fulfilled over the Internet via services . Newer phones and some pagers already support the WAP standards and they connect through a WAP gateway . Web enabled Palm PDAs pass through a proxy service which is supplied by Palm.net or OmniSky services for example. All of these methods are similar in that the wireless request passes through a gateway or proxy service for example UP.Link gateway WAP gateway and proxies to be translated into a wire based HTTP S request. Although the request model for the most common wireless Internet connections are similar their underlying networks and device technologies differ. Wireless handset and PDA operating systems are usually delivered with a communication stack that abstracts the application developer from the underlying communication protocols and network technologies. Microbrowsers supplied on the wireless handsets and PDAs render hyperlinked markup content on the user interface display and enable user directed navigation.

Currently custom Web applications have to be developed for each specific device that uses different languages and protocols. Accordingly there is a need for a uniform approach to content delivery to deliver an application to the broadest audience across the widest possible set of devices.

A method and system for deploying content to devices is provided. The method and system can be used to deploy markup content to web browser applications on wireless devices. The wireless device may included for example WAP phones HDML phones Palm VII Palm V etc. The method and system can also be used in conjunction with wired systems. A translator receives data in a variety of formats from the wireless devices. The translator then translates the data into a standardized format. A content provider interface receives the data in the standardized format and provides content data also in the standardized format. The content data in the standardized format is provided to a transformer. The transformer transforms the content data into a format for the particular wireless device and or application. The content data can then be utilized and manipulated by the wireless device.

In another embodiment data can be spontaneously sent to a device from a content provider. The data and an identifier ID to may be provided to the transformer. The ID can be looked up in a database to associate it with a device. A content type specific form is determined for the device. Based on the content type specific form a transformation may be selected. The data can then be transformed using the selected transformation and the transformed data forwarded to the device. In a further embodiment multiple transformations can be applied to the data. The transformations may be applied sequentially independently or a combination of both. The independent transformations may be done simultaneously.

According to another embodiment a method for deploying markup content to browser applications on devices is provided. Messages and requests are accepted from the devices. The messages and requests may be processed as synchronous messages via a block and wait mechanism. Information related to form data session data MIME data and a message key can be retrieved in order to generate an XML stream. The XML stream may then be parsed into an XML message. Next it can be determined which of a number of content provider interfaces can handle the XML message based on the message key. A content provider interface should be selected to process the XML message and the XML message can be forwarded to the selected content provider interface. A response is then received from the selected content provider interface. One or more XSL stylesheets may be selected and used to transform the response into device type specific and content type specific form. Next the transformed response can be forwarded to the requesting devices.

In a further embodiment a method for deploying markup content to browser applications on devices is provided. Requests are accepted from devices. The requests are preferably processed as synchronous messages via a block and wait mechanism. Information related to at least one of form data session data MIME data and a message key is retrieved in order to generate an XML stream. The XML stream is parsed into an XML message. Content provider interfaces that can handle the XML message are determined based on the message key and a content provider interface is selected to process XML message. The XML message is provided to the selected content provider interface. A response is received from the selected content provider interface. One or more XSL style sheets may be selected to transform the response into one or more forms. The transformed response may then be sent to the requesting devices.

Additionally the system and method allow for content providers to be added dynamically. According to one possible method an XSL style sheet should be previously registered in a provider database for any new content providers to be added. When a content provider is added dynamically the provider database is queried. The previously registered XSL style sheet associated with the new content provider is received from the provider database. This style sheet may then be used to transform data provided by the new content provider.

A method and system for deploying content to devices is provided. The method and system can be used to deploy markup content to web browser applications on wireless devices. The wireless device may included for example WAP phones HDML phones Palm VII Palm V etc. A translator may receive data in a variety of formats from the wireless devices. The translator then translates the data into a standardized format. A content provider interface receives the data in the standardized format and provides content data preferably also in the standardized format. The content data in the standardized format is then provided to a transformer. The transformer transforms the content data into a format for the particular wireless device and or application. The content data can then be utilized and manipulated by the wireless device and or application.

In addition to communication with a CPI to respond to a request the system and method can unilaterally deploy content from the content provider interface or third party to the device without having received a request from the device. This is called sending the device an alert or push . The process of sending an alert is very similar to sending a response and is described in more detail below.

A component based architecture for mid tier services may be provided to perform the above described functions. As mentioned above the services provided by the architecture are preferably written in Java and use XML as a common language of transference and translation although other suitable languages can be used. XML can be used to define a standard set of request and response messages. Employing XML s Document Type Definition DTD language requests and responses used in a standard market setting such as stock trading and brokerage services can be defined. Once defined in a given vertical market a DTD can be used across clients in a uniform fashion. Of course other schemas can be used to specify vertical market requests and responses.

As mentioned above the W3C also provides a set of specifications for the Extensible Stylesheet Language XSL . Stylesheets can house the presentation format for a given device display abstracting the presentation and formatting language from the data content housed in the XML. XSL also supplies syntax for transforming XML markup content into other markup forms and is referred to as SLT. SLT may be used to change the common data formats of content into the presentation languages i.e. HDML WML HTML etc. required by the wireless devices.

Turning now to an example of a platform deployed with the architecture is illustrated. The platform can include various components such as an HTTP S server a standard Java application server and a relational database . Applications can be developed and supported by this platform. Each component should operate over objects referred to as messages. Messages can simply be data containers. Each message should have associated header information such as a message key described below which helps to identify the context of the message its payload and how it is handled. The payload of the message is the actual data used in a transaction such as a quote symbol an account number or even a bill summary. Using messages helps to give each component a standard integration interface that facilitates reusability. In a preferred embodiment messages can be delivered to the components either as Java objects or as XML.

As mentioned above a message key is preferably associated with each message in order to facilitate the routing of information and the dispatching of requests in the system. The information included in a message key can vary depending on the vertical market. The message key should include the following information 

The message key can be used to uniquely identify common requests within a specific vertical market. Information in the message key may be used to facilitate processing of a message by the system. For example the content provider ID references a specific back end system with which the user may maintain an account. The system thus knows where to route a request. The content provider ID may remain blank however the other elements of the message key market domain action and action type are preferably always specified in order to ensure the message is properly handled.

A plurality of various wireless devices capable of Internet access communicate over a wireless communication medium to a network operation center which houses the components and services that support and process request messages response messages and alerts for the wireless devices . Request messages response messages and alerts are preferably communicated to and from wireless devices via a proxy server and web applications . Proxy server and web applications communicate with the wireless web architecture via communication media for request messages inbound and communication media for response messages and alerts outbound . The wireless web architecture can communicate with a plurality of content provider interfaces via communication media for translated request messages and via communication media for response messages and alerts. Content provider interfaces may communicate with third party content providers via communication media such as a wide area network WAN or the Internet. The third party content provider can provide information to generate a response message or an alert. A content provider interface may be an object that is registered with the system to handle specific actions that are sent in a request message. The content provider interface may provide proxy services to the third party content providers or it may fully encompass the content provider capabilities.

In a preferred embodiment wireless web architecture translates and transfers request messages via translator . The translator translates the request message into the standardized format preferably an XML request and forwards the translated request message to a selected content provider interface . Once a response message or an alert is generated by a content provider interface or received from a third party content provider the response message or alert is transformed by transformer via selected transforms i.e. XSL transforms into device type specific content type specific or other specific forms for the wireless devices . The message is then forwarded to proxy server and web applications for communication to wireless devices .

A method for spontaneously sending data to a device is also provided. As mentioned above this is called sending an alert. In one embodiment data and an identifier ID are sent to transformer . The data may come from either CPI or a third party content provider . The ID may be one of a user ID a device ID a client ID a customer ID or some other type of identifier. The ID is referenced in a database to associate it with a device. A format for presentation to the device is preferably determined and a style sheet is selected based on the device. The selected style sheet is then used to transform the data. After transformation the transformed data is forwarded to the appropriate device .

In connection with illustrates a specific component model that may be used for handling synchronous requests. The individual components shown in are discussed in more detail below. Although described below in a specific embodiment in connection with XML the invention may be implemented with various other languages.

In general request messages which may be generated by wireless devices are communicated to a request transformer . The request will usually be in the form of an HTTP request. However other types of messages can be used. The request transformer may communicate MIME information to a session manager which in turn queries database and receives session information. Request transformer then processes the request messages and the session information to yield a flattened basic XML stream which is communicated to XML transformer . Here flat is used in the sense that each form variable s corresponding XML tag is an immediate descendant of the document root. XML transformer further processes the flattened basic XML stream into an XML request message which is communicated to dispatcher . Dispatcher selects a content provider interface from a plurality of content provider interfaces. This is preferably done based on information retrieved from content provider map database and information in the request message. Dispatcher then forwards the XML request message to the selected content provider interface which may further communicate with third party service to generate a response message.

Upon receipt of an XML response message or alert from the third party content provider content provider interface forwards the response message or alert to dispatcher . Dispatcher forwards the XML response message to XML transformer . XML transformer can transform the response message into a format for the device . XML transformer queries XSL database and DTD database . Based on the information retrieved XML transformer selects XSL transforms to be applied to the XML response message or alert in order to transform the XML response message or alert into the appropriate format. The processed XML response or alert is then forward to the response transformer . Response transformer can query a Java bindings database if necessary and convert the processed XML response into the form expected by the wireless device if conversion is necessary.

In a preferred embodiment inbound HTTP requests are received by a servlet or some similar server side construct and then forwarded to the wireless web architecture for processing. An interface component called the message controller that can provide a simple application programming interface API for the application developer is also preferably provided. The message controller can manage the synchronous block and wait nature of HTTP requests. Synchronous as used herein does not mean that messages transfers are clocked but rather that there is a mechanism via the message controller that blocks any additional request messages for service while waiting for a response. Thus the servlet can forward HTTP request information to the message controller and wait for a device specific response to be formulated which it then returns as the HTTP response. Also the database objects that are shown and described do not necessarily imply that there will be more than one database.

The message controller is preferably a wrapper around the internal components of the architecture for use in an HTTP context. The application developer will in most cases interface with this component and will not necessarily have to interface directly with the other internal components of the framework. illustrates an example of a message interface.

In one embodiment HTTP requests from wireless devices are translated into messages in a standardized format. This can be accomplished with the message controller. Various interfaces may be provided on the message controller to give greater control regarding this translation to the application developer. For example Java Binding interfaces can be offered through the message controller . Java bindings or classes representing a given XML entity may be provided for each XML request message and response message that is part of the DTD for the given market domain. Bindings enable the application developer to employ a Java interface instead of working with the XML directly. Each class may implement accessor methods for the DTD elements that are associated with that object. For portability and interface abstraction these bindings are preferably then wrapped inside a class named MarketDomainBinding in . Every binding should implement a toXml method that streams out its contents as an XML stream. diagrams an example of this interface.

A second method for creating messages from HTTP requests involves automated conversion techniques. In order to use this method the application developer should appropriately name their HTTP form variables querystring keys according to the equivalent XPath specification of the DTD and include hidden fields for the message key. The request transformer should parse each of the form variables out of the querystring along with its associated values and place it into flattened XML eventually becoming a message.

For example in most cases the HTTP request will include a message key. As discussed above the message key should include an action i.e. a request for a stock quote. The form variable action is parsed out of the message. Based on the specified action additional information may be required to form the message. In this example a stock symbol is required for the stock quote request. The HTTP request can be parsed to find the addition information. This information and the form variables are then placed in the message.

A third approach for creating messages from HTTP requests allows the application developer to provide XSL to transform a flattened XML request message. In this scenario the application developer registers their XSL in the XSL database to be used by the XML transformer . Once the HTTP request is received and flattened by the request transformer for example by the second approach described above the XML transformer may be invoked to transform the resulting XML into an appropriate form for the data. This approach offers greater flexibility than the automatic conversion.

The request transformer can receive an incoming request object that should correspond to the initial HTTP request and perhaps a Java or XML binding of the request. From these it can generate an XML stream. If a Java binding is received the body of the stream is just the XML derivable from the binding. In the case where no binding is received the stream includes a body which is a flattened encoding of the HTTP request s form data. A standard procedure that may be used for writing form values to a simple flat XML document is for each tag to have the same name as a form variable and the tag s value is the value of the variable. In addition to form data session data MIME data and message key information may be encoded in the stream. illustrates an example of the request transformer interface. The resulting XML stream does not necessarily conform to a DTD accepted by a content provider s interface. In those cases the XML transformer see below may receive the stream and can transform it into an acceptable XML message request.

The session manager should be responsible for identifying and returning state information about a given set of interactions between a client device and its user and the Web application server . The session manager can operate as an extractor to access system information about a browser of a particular device. In this context session does not refer to the establishment of a secure connection for example SSL but rather to a series of interactions between a client and server over a defined period. The following kinds of state based information may be maintained for the duration of a session 

When a request is made the session manager should first determine whether an ongoing session exists for the requesting client. If no session exists the session manager can create a new object to maintain the three kinds of state based information mentioned above. Otherwise if a session already exists then the state information can be returned from a database .

Certain variables of the system state can be configured with each application. As each new session is constructed the session manager automatically populates the system state with certain variables found in the HTTP header of the request. A system administrator should configure the application with the necessary information to extract the appropriate variables. The device type user agent and subscriber number are among typical variables that can be automatically extracted.

The XML transformer can transform XML input into another form of XML output via XSL transformations. However it is also possible to use the XML transformer to produce non XML output such as HDML or even plain text. The XML transformer can receive inbound XML from the request transformer transform it and pass the resulting request message to the dispatcher . The XML transformer can also receive outbound response messages from the dispatcher transform them into the correct format e.g. HTML HDML WML for the target device user and forward the result to the response transformer . Thus XML transformer is shown twice in . is an example of an object model of the XML transformer and its associated objects.

In the example shown in The transformation is facilitated by an XMLProcessor which may include an XmlParser and XslProcessor. The parser creates a Document Object Model DOM and supports a run time setting that can be used to validate XML against a DTD. The XSL processing component handles the actual transformation.

The XML transformer can receive a message and find and apply the appropriate XSL for transforming the data contained within that message. The XSL source for example string URI or file is preferably retrieved through a database query to database preferably taking into account the following items from the message and from session information 

The following table helps to illustrate this point. The following table is an example of the information that may be stored in database .

Consider a response message with the following message key Financial RealTimeQuote Response ABC Inc a device type of Palm which has a Mozilla 2.0 User Agent. A database query will be transacted to look for XSL in database that matches the above information. The third row in the table matches the above description with the location for example an URL for the appropriate XSL style sheet namely http . . . xsl stylesheets rtQuoteResp1.xsl. 

In many cases the XSL lookup and selection process will produce a single XSL style sheet. However there may be situations where it is desirable that the lookup produce a collection of more than one XSL style sheet. When this occurs there are a number of possible strategies for applying the multiple transformations to an XML source including 

In the sequential strategy multiple XSL style sheets are selected. Depending upon which style sheets are selected the style sheets may be applied in a pre selected order or the ordering may not be relevant. For example the result of a first style sheet may be need for the application of a subsequent style sheet. After determining an order each subsequent XSL style sheet is applied in turn to the result of the previous transformation. Thus it is preferable that the result of each interim transformation be well formed XML so that it can serve as input to the next transformation. depicts the sequential application of S.S. The figure shows XML the initial XML source being transformed into XMLvia n distinct transformations. The itransformation is specified by XSL Stylesheet and the result of applying the itransformation is the XML output XML.

One example of the utility of chaining sequential transformations involves content branding. Raw XML can be transformed into a presentation format appropriate for an application or device for example a specific browser and then as a second step references to appropriate branding material for example logos can be inserted. This facilitates separating branding from other presentation or stylistic concerns. In most cases the branding step can just as easily be performed first and the presentation format transformation applied second. illustrates this as XML is transformed into WML by XSL stylesheetin preparation for presentation on a WAP phone for example and then that WML is branded for a specific enterprise by XSL stylesheet.

A second multi transformation strategy is depicted in . Multiple XSL stylesheets XSL Stylesheets XSL Stylesheetsare applied to source XML. The application of each stylesheet results in separate XML output XML XML. Here there is no ordering or sequencing of the selected XSL style sheets. Each transformation is independent and can be applied simultaneously to a single XML source. An example of this strategy is the delivery of content simultaneously as voice and text to a single device. shows an example of this strategy using transformations by stylesheetand stylesheetinto VoiceXML and WML for voice and text presentation respectively. The source XML is transferred by XSL Stylesheets XSL Stylesheetsinto different output types.

Sequential and independent multi transformation strategies are not the only possibilities nor are they mutually exclusive. They can be combined in a number of ways producing a variety of hybrid strategies. One example of a hybrid strategy is shown in in which one of n simultaneous transformations is comprised of a sequence of sub transformations. Here XSL Stylesheets XSL Stylesheetsare applied simultaneously to source XML resulting in output XML XML. Application of each of these style sheets should result in well formed XML. Consequently subsequent stylesheets may be applied to output XML XML. In the example shown stylesheetis sequentially applied to output XML resulting in output XML.

The response transformer receives outbound XML messages for example from the message controller and if necessary converts them into another form that is expected by the application servlet or wireless device . If the servlet expects an XML stream no conversion will occur. If the servlet expects a Java binding the specific class for the binding will be retrieved from the database . The binding should be instantiated populated with the data from the XML string and sent back through the message controller to the servlet . illustrates an example of the response transformer data manager interface.

In one embodiment the response transformer may also generate a combined response from a plurality of responses or alerts from one or more content providers. The plurality of responses may be generated from a plurality of requests.

The dispatcher s primary function is to dispatch incoming messages to an appropriate CPI which in turn may communicate with a third party content provider . To do so the dispatcher must first identify which CPI can and should handle the request embedded within the incoming message and if necessary load that CPI . This may be accomplished using a database lookup on information in the message key for example market domain action action type content provider id . In a preferred embodiment only certain information for example market domain need be specified for a database lookup to be attempted. Any or all of the other components of the message key can be wildcarded for the lookup. A wildcard stands for any values that might occur in the database for that component of the message key. The following table helps illustrate this point.

CPI may be java classes that implement an abstract interface for processing messages that are forwarded from the dispatcher . illustrates an example of the CPI interface. The back end application developer should provide CPI classes specific to that application. The CPI may process the inbound message and its contained XML request in any manner it sees fit either through direct manipulation of an XML DOM tree SAX or through a java specific XML binding. If a developer chooses to use a bound Java class an alternative to passing the CPI a direct XML stream is to pass and receive a bound Java instance. This shields the application developer from having to know anything about XML itself and allows him to simply concern himself with the actual data model or message content. Inbound content provider session data may be made available to the CPI through the incoming message. For outbound data the CPI is preferably able to change the content provider session data if required and insert the response XML into the market data portion of the outgoing message.

The above components can be combined into a system to provide a uniform approach to content delivery. Using this system an application developer is able to render their content in the appropriate format to a wide variety of devices without having to customize the application for each type of device.

The embodiments illustrated and discussed in this specification are intended only to teach those skilled in the art the best way known to the inventors to make and use the invention. Nothing in this specification should be considered as limiting the scope of the present invention. The above described embodiments of the invention may be modified or varied and elements added or omitted without departing from the invention as appreciated by those skilled in the art in light of the above teachings. It is therefore to be understood that within the scope of the claims and their equivalents the invention may be practiced otherwise than as specifically described.

