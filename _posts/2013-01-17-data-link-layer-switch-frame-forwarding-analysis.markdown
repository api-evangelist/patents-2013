---

title: Data link layer switch frame forwarding analysis
abstract: Systems and methods to analyze layer-2 data frame switch forwarding are provided. A first switch may be coupled to a second switch. The first switch may maintain state information mirroring the state of the second switch. A sequence number may be appended to a data frame that is received at the first switch. Forwarding compliance of the second switch may be determined by analyzing a runtime attribute of the first switch.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09455895&OS=09455895&RS=09455895
owner: International Business Machines Corporation
number: 09455895
owner_city: Armonk
owner_country: US
publication_date: 20130117
---
The present disclosure relates generally to data communication in a networked computing system and more particularly to testing the connectivity and responsiveness associated with data frame forwarding in a computing network.

Problems arising in the data link layer layer 2 of the Open Systems Interconnection OSI model of a network can result in degraded communications. Layer 2 switches use hardware address tables to selectively forward data frames to appropriate destination ports. Verifying that a data frame was forwarded to the appropriate port requires an in depth understanding of Institute of Electrical and Electronics Engineers IEEE 802.3 standards. This burden is exponentially increased where large numbers of switching tests must be performed or customized tests are desired.

According to a particular embodiment an apparatus may include a test case module configured to transmit a data frame and a first switch including a first port. A second switch may include a second port coupled to the first port. The second switch may be configured to receive the data frame from the test module to monitor a state of the first switch and to determine a runtime attribute associated with forwarding the data frame.

According to another embodiment a method of analyzing a data frame switch operation may include receiving a data frame at first switch from a test case module. A frame sequence number may be appended to the data frame and the frame sequence number may be used to verify forwarding compliance of the second switch. The frame sequence number may include a checksum or any signature used to uniquely identify a data frame and may be appended to the end of the data frame or inserted anywhere in the payload of the data frame.

According to another embodiment a program product may include program code configured to receive a data frame at a first switch from a test case module to append a frame sequence number to the data frame and to use the frame sequence number to verify forwarding compliance. A computer readable medium may bear the program code.

Features and benefits that characterize embodiments are set forth in the claims annexed hereto and faulting a further part hereof. However for a better understanding of the embodiments and of the advantages and objectives attained through their use reference should be made to the Drawings and to the accompanying descriptive matter.

A particular embodiment may offload the test case protocol knowledge into a mirror switch. The mirror switch may mirror the state of the layer 2 switch under test and may execute the Institute of Electrical and Electronics Engineers IEEE 802.3 standard in parallel with the layer 2 switch under test. Both switches may be configured identically or nearly identically and the ports may be connected. The layer 2 switch under test may be running in a hardware device or a simulator. The mirror switch ports may be connected via Ethernet cables when testing a hardware device or a virtual device e.g. a TAP device when testing in a simulator.

An embodiment may simplify IEE 802.3 test case writing while providing accurate comprehensive layer 2 forwarding verification. Sequence numbers may be appended to the end of each frame to uniquely identify an egress frame. The embodiment of a system may verify access control list ACL functionality verify a forwarding rate and recognize aggregated links ports. The embodiment may further verify that only one frame egresses a trunk and implements a multicast snooper to learn multicast groups.

Test cases may be written to inject any Ethernet frame into the layer 2 switch under test to validate compliance. The actual verification may be done by the redundant layer 2 mirror switch and not the test case itself. The mirror switch may verify that the layer 2 switch complies with the IEEE layer 2 forwarding standard. The mirror switch may run in a standalone Linux server or a simulator such as Simics. The mirror switch may have a verification port paired with each of the layer 2 switch ports under test. The verification port may be directly cabled to the switch port or tapped using a virtual TAP device.

The mirror switch may enable the configuration of ports trunks VLANs and other layer 2 configuration objects. The mirror switch may keep track of the switch state so that the mirror switch may verify the compliance of the layer 2 switch. The mirror switch may inject data frames into a selected verification port. The mirror switch may append a sequence number to the end of each data frame to uniquely identify the data frames as the data frames egress switch ports. The mirror switch may verify that egress data frames are correctly tagged or untagged as specified by the switch configuration. The mirror switch may maintain an ACL and verify that the layer 2 switch does not forward that match a drop action. The mirror switch may verify that aggregated ports are treated as one logical link. For example the mirror switch may verify that a particular data frame egresses only one member of an aggregated link or trunk. The mirror switch may perform multicast snooping to dynamically learn multicast groups and validate compliance.

The mirror switch may also verify that each injected data frame is forwarded to the appropriate switch port or ports. A unicast data frame may be flooded if the destination address of the unicast data frame has not yet been learned. Otherwise the unicast data frame may be forwarded to the appropriate switch port. Broadcast data frames may be broadcast to all members of the VLAN. Multicast data frames may be flooded if a multicast snooper has not received any Internet group management protocol IGMP membership frames. Otherwise multicast data frames may be forwarded to members of a multicast group.

The mirror switch may be configured to mirror the state of the layer 2 switch under test. The mirror switch may go through the same states as the layer 2 switch. Test case configures the mirror switch identically to the layer 2 switch. For example all protocols being tested on the layer 2 switch may also be present on the mirror switch. Based on the current configuration the mirror switch may calculate what the expected results should be and what the expected egress ports should be. The payloads should be identical as well. In this manner the mirror switch may simplify layer 2 analysis by automatically making available expected results for a given configuration.

Embodiments of the switching and analysis system may be realized in hardware software or in any combination thereof. In one example different components such as the ports may be distributed. Either or both of the layer 2 switch and the mirror switch may be hardware in one embodiment and software in another. The terms frame and packet may be used interchangeably throughout this description.

Turning more particularly to the drawings shows an embodiment of a computing system configured to monitor and analyze data frame switching processes. The system may include a layer 2 L2 switch that receives data e.g. commands from a test case module forwarded through a mirror switch or test switch.

The test case module may be a program configured to output configuration commands. The test case module may be in communication with the mirror switch via a management link . The mirror switch may be identical or nearly identical to the layer 2 switch . The layer 2 switch may be the switch under test SUT . The layer 2 switch may be implemented in hardware or in a simulator such as Simics.

The mirror switch may generally be configured to emulate and analyze the data frame switching processes of the layer 2 switch . The mirror switch may be realized in either hardware or software. The mirror switch may include a layer 2 L2 testing module an Internet group management protocol IGMP snooper module and a switch state . The L2 testing module may comprise software or firmware executable to monitor and verify data frame transmission. The IGMP snooper module may be configured to learn multicast groups. The switch state may indicate the state of the layer 2 switch . The mirror switch may further include verification ports that are coupled to switch ports of the layer 2 switch . A management link may enable configuration commands and related communications between the mirror switch and the layer 2 switch .

The sequence number may be appended to the end of each data frame before the data frames are injected into a verification of a mirror switch and a switch port of a layer 2 switch . The sequence number may be used to uniquely identify the data frame . When the data frame egresses a port the sequence number may be analyzed to see if it is the expected sequence number . As discussed herein other characteristics such as the payload and the source address may additionally be verified. A properly functioning layer 2 switch may not alter data appended after the payload . The frame sequence number may uniquely identify the data frame as the data frame egresses switch ports. The frame sequence number may also be used as a human readable identifier to aid in diagnosing bugs in the layer 2 switch.

Processes may add ports to a VLAN to establish a broadcast domain. One skilled in the art will appreciate that embodiments may be extended to test multiple complex switch configurations. Identical configurations may be stored in both the mirror switch and the layer 2 switch.

Processes of show how a media access control MAC address is dynamically learned. More particularly the test case module may call at the learn mac application programming interface API to cause MAC 00 00 00 00 00 03 to be learned on port . A gratuitous address resolution protocol ARP frame may be created at with source address 00 00 00 00 00 03 at . The ARP frame may be injected into port . The layer 2 switch may add 00 00 00 00 00 03 port to its forwarding cache and may broadcast the ARP frame on all other members of the VLAN. Process may include the mirror switch verifying that the ARP frame egresses all the switch ports except source port .

Processes of show the forwarding of unicast data frame when its destination address has been previously learned. More specifically the test case module at may inject a unicast data frame with destination address 00 00 00 00 00 03 into port . The unicast data frame may be injected into port at . The layer 2 switch may locate destination address DA 00 00 00 00 00 03 in its forwarding cache at and may forward the unicast data frame to port no need to flood . At of the mirror switch may verify that the unicast data frame only egresses port and may return a successful return code to the test case. Where the unicast data frame had also egressed port the layer 2 would be non compliant and an error return code would be returned to the test case.

The test case module may at create a trunk that includes member ports and such that the ports are treated as a single logical link. The mirror switch may configure trunk at on the layer 2 switch that includes member ports and . The test case module at may call the learn mac API to cause MAC 00 00 00 00 00 01 to be learned on port . The mirror switch may at inject a gratuitous ARP frame with source address 00 00 00 00 00 01 into port . The mirror switch at may add MAC 00 00 00 00 00 01 port to its forwarding cache and may broadcast the ARP frame to all the other VLAN member ports. At the mirror switch may verify that the ARP frame egresses all the VLAN member ports except port . The test case module at may call the learn mac API to cause MAC 00 00 00 00 00 09 to be learned on trunk .

The mirror switch may at inject a gratuitous ARP frame with source address 00 00 00 00 00 09 into port . Injecting the ARP into port may have had the same effect since both ports and belong to trunk . The layer 2 switch may at add MAC 00 00 00 00 00 09 trunk to its forwarding cache and may broadcast the ARP frame to all the other VLAN member ports. At the mirror switch may verify that the ARP frame egresses all the VLAN member ports except ports and trunk member ports . The test case module at may call the inject packet API to inject a unicast data frame with DA 00 00 00 00 00 09 into port . The mirror switch may inject at the unicast data frame into port . The layer 2 switch may locate MAC 00 00 00 00 00 09 trunk in its forwarding cache and use the default hashing algorithm to select trunk member port and to forward the unicast data frame to port . It is possible that trunk member port may have been selected. At the mirror switch may verify that the unicast data frame is forwarded to either member ports of trunk and may return a successful return code to the test case.

Referring to a particular embodiment of a method of verifying a runtime attribute such as a data frame egress is illustrated. The method includes initiating a test case at and the layer 2 switch may be configured at . Commands used in the configuration process at are generally shown in .

A data frame may be injected at . The processes at may generally relate to those illustrated in . Proceeding to block the method may wait for egress frame verification before returning to block . The mirror switch may verify that the data frame egresses the appropriate ports and that the content of the data frame is correct.

Referring to a particular embodiment of a method of monitoring and analyzing data frame switching is illustrated as a flowchart. At of the flowchart a data frame may be injected by the test case module into the mirror switch.

The method also includes the mirror switch calculating expected egress ports at . Determining which ports are expected to egress may be based on the switch configuration e.g. the state of the switch and on the type of frame e.g. a broadcast frame a multicast frame a unicast frame etc. .

Proceeding to block the mirror switch may append a sequence number to the data frame. The sequence number may be used to uniquely identify the data frame. When the data frame egresses a port the sequence number may be analyzed to see if it is the expected sequence number. As discussed herein other characteristics such as the payload and the source address may additionally be verified.

At the mirror switch may inject the data frame into an ingress port. For example the test case module may instruct the mirror switch that the data frame should be injected. Proceeding to block the method may wait for the data frame to egress expected ports.

At the method determines when a timeout occurs. The timeout may be associated with a computing time expected for the data frame to be successfully forwarded. In an embodiment a timeout may correspond to a sufficient time for potential frames to arrive for analysis. Where a timeout is detected at block an error may be returned at . Where no timeout is alternatively detected the mirror switch may determine at if a data frame with a matching sequence number has been received. When no data frame with a matching sequence number has been received the mirror switch may initiate at an output message indicating an unknown data frame.

Returning to block where a data frame with a matching sequence number has been received the mirror switch may determine at whether a payload is corrupted by comparing the payload to the payload of the originally injected frame. Where the payload is corrupted the mirror switch may initiate at an output message indicating that the payload has been corrupted.

Where the payload is determined to be uncorrupted the mirror switch may determine at if a destination address DA and the source address SA match. Where the destination address and the source address do not match the mirror switch may indicate an error at and the method may return to . Where the destination address and the source address match the mirror switch may determine at if an S Tag is correct. Where the S Tag is not correct an output indicating that the S Tag is invalid may be generated at . The S Tag correctness may be determined using the known switch configuration.

Where the S Tag is correct the mirror switch may determine at whether the VLAN tag is correct. Where the VLAN tag is unexpected an output indicating that the VLAN tag is invalid may be generated at .

Where the VLAN tag is correct the mirror switch may determine at whether a port was expected to be egressed. Where the port was not expected to be egressed the mirror switch may indicate at that an unexpected egress has been detected. Where the expected port was egressed the mirror switch may indicate at that the data frame has successfully egressed the port.

The mirror switch may determine at whether the data frame is expected to egress anymore ports. Where the data frame is expected to egress more ports the method may return to . Where the data frame is not expected to egress more ports the data frame has successfully egressed appropriate ports and the method may end at . An output report may be generated for analysis. For example output files may include linked data that allows a tester to efficiently review highlighted portions of the layer 2 analysis.

Referring to a particular embodiment of a method of determining expected egress ports is illustrated as flowchart. As such an embodiment of the method may have application at of . The mirror switch may initially determine at the expected egress ports. The determination may depend in part on the type of data frame.

The mirror switch may determine at whether a data frame is a unicast data frame. Where the data frame is a unicast data frame the mirror switch may determine whether a destination cache hit occurs for the destination address of the data frame at . Where a destination address cache hit occurs the method may determine at that the expected egress is a single port. Where a destination address cache hit alternatively does not occur the method may at determine that the expected egress may be flooding to all VLAN member ports.

Where the data frame is not a unicast data frame the mirror switch may determine whether the data frame is a broadcast frame at . When the data frame is a broadcast frame the expected egress ports at may be to all VLAN member ports. Where the data frame is a multicast frame at the expected egress ports may be all ports belonging to a multicast group at .

At the method may determine whether Access Control List ACL rules affect the expected egress ports. When the ACL rules effect the expected egress ports the mirror switch may adjust at the expected egress ports.

At the mirror switch may determine whether a private VLAN configuration affects the expected egress ports. A private VLAN may be subset of a VLAN. Where the private VLAN configuration affects the expected egress ports the mirror switch may at adjust the expected egress ports according to the private VLAN configuration.

At the mirror switch may determine whether there is a port mirroring configuration. A port mirroring configuration may cause a frame to be mirrored additional mirrored ports. Where there is a port mirroring configuration the mirror switch may adjust at the expected egress ports to account for the additional mirrored ports. In this manner the mirror switch of an embodiment may determine expected egress ports in a manner that takes into account the illustrated and other known switch configuration attributes.

One skilled in the art will appreciate that there are many more configuration commands that could affect frame forwarding and that are not illustrated in . For example an embodiment may determine if VLAN filtering has been enabled. VLAN filtering may discard the frames if the VLAN tag does not match the VLAN port membership. VLAN filtering may cause the expected egress ports to be adjusted. In another example having the 802.1x port authorization enabled may also cause the expected egress ports to be adjusted. The 802.1x port authorization may discard the frame if the port is not currently authorized.

The data processing system may include any device configured to process data and may encompass many different types of device system architectures device system configurations and combinations of device system architectures and configurations. Typically a data processing system will include at least one processor and at least one memory provided in hardware such as on an integrated circuit chip. However a data processing system may include many processors memories and other hardware and or software elements provided in the same or different computing devices. Furthermore a data processing system may include communication connections between computing devices network infrastructure devices and the like.

The data processing system is an example of a single processor unit based system with the single processor unit comprising one or more on chip computational cores or processors. In this example a processing unit may constitute a single chip with the other elements being provided by other integrated circuit devices that may be part of a motherboard multi layer ceramic package or the like to collectively provide a data processing system computing device or the like. The processing unit may execute a test case module to monitor and verify frame switching in accordance with an embodiment.

In the depicted example the data processing system employs a hub architecture including a north bridge and a memory controller hub NB MCH in addition to a south bridge and an input output I O controller hub SB ICH . A processing unit a main memory and a graphics processor are connected to the NB MCH . The graphics processor may be connected to the NB MCH through an accelerated graphics port AGP .

In the depicted example a local area network LAN adapter connects to the SB ICH . An audio adapter a keyboard and mouse adapter a modem a read only memory ROM a hard disk drive HDD a CD ROM drive a universal serial bus USB port and other communication ports and PCI PCIe devices connect to the SB ICH through bus and bus . The PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash basic input output system BIOS .

An HDD and a CD ROM drive connect to the SB ICH through the bus . The HDD and the CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A duper I O SIO device may be connected to SB ICH .

An operating system runs on the processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system. An object oriented programming system programming system may run in conjunction with the operating system and provide calls to the operating system from programs or applications executing on the data processing system . The data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in the processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as the HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments may be performed by the processing unit using computer usable program code. The program code may be located in a memory such as for example a main memory a ROM or in one or more peripheral devices and for example.

A bus system such as the bus or the bus as shown in may be comprised of one or more buses. The bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as the modem or the network adapter of may include one or more devices used to transmit and receive data. A memory may be for example the main memory the ROM or a cache such as found in the NB MCH in .

Those of ordinary skill in the art will appreciate that the embodiments of may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Further embodiments of the present disclosure such as the one or more embodiments may take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a non transitory computer usable or computer readable medium can be any non transitory medium that can tangibly embody a computer program and that can contain or store the computer program for use by or in connection with the instruction execution system apparatus or device.

In various embodiments the medium can include an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and digital versatile disk DVD . The processes of the illustrative embodiments may be applied to a multiprocessor data processing system such as a SMP without departing from the spirit and scope of the embodiments.

Moreover the data processing system may take the form of any of a number of different data processing systems including client computing devices server computing devices a tablet computer laptop computer telephone or other communication device a personal digital assistant PDA or the like. In some illustrative examples the data processing system may be a portable computing device that is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data for example. Essentially the data processing system may be any known or later developed data processing system without architectural limitation.

Particular embodiments described herein may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a particular embodiment the disclosed methods are implemented in software that is embedded in processor readable storage medium and executed by a processor which includes but is not limited to filmware resident software microcode etc.

Further embodiments of the present disclosure such as the one or more embodiments may take the form of a computer program product accessible from a computer usable or computer readable storage medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a non transitory computer usable or computer readable storage medium may be any apparatus that may tangibly embody a computer program and that may contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

In various embodiments the medium may include an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable storage medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and digital versatile disk DVD .

A data processing system suitable for storing and or executing program code may include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements may include local memory employed during actual execution of the program code bulk storage and cache memories that provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the data processing system either directly or through intervening I O controllers. Network adapters may also be coupled to the data processing system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the disclosed embodiments. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the scope of the disclosure. Thus the present disclosure is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope possible consistent with the principles and features as defined by the following claims.

