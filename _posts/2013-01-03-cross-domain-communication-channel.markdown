---

title: Cross domain communication channel
abstract: Systems, software, and computer implemented methods for consuming services from a cross-domain service server. One example method includes providing for presentation a web page associated with a first domain, the web page including an iFrame associated with a service associated with a second domain; converting a set of data associated with the web page into a form element embedded within the iFrame associated with the second domain; submitting the set of converted data in the form element to the service associated with the second domain via the iFrame; receiving, via the iFrame, a response from the service associated with the second domain; identifying a pre-registered action associated with the received response; and performing the identified pre-registered action in response to receiving the response and identifying the pre-registered action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09264507&OS=09264507&RS=09264507
owner: SAP Portals Israel Ltd
number: 09264507
owner_city: Ra'anana
owner_country: IL
publication_date: 20130103
---
The present disclosure relates to computer implemented methods software and systems for consuming services from a cross domain service server.

A web page can be used to present content and or an application to a user. A web page can communicate with a web server using HTTP HyperText Transfer Protocol . For example GET and POST commands can be submitted from the web page. Client side processing can be performed in association with the web page. For example one or more scripts e.g. JavaScript scripts can be executed by a JavaScript engine running in a web browser that is used to present the web page. Scripts can be executed for example when the page is loaded or in response to other events such as events triggered by user input or events triggered for example by a timer.

The present disclosure involves systems software and computer implemented methods for consuming services from a cross domain service server. One example method includes providing for presentation a web page associated with a first domain the web page including an iFrame associated with a service associated with a second domain. A set of data associated with the web page is converted into a form element embedded within the iFrame associated with the second domain. The set of converted data in the form element is submitted to the service associated with the second domain via the iFrame. A response is received via the iFrame from the service associated with the second domain. A pre registered action associated with the received response is identified. The identified pre registered action is performed in response to receiving the response and identifying the pre registered action.

While generally described as computer implemented software embodied on tangible and non transitory media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

A web application e.g. running on a web page can be configured to consume a service such as a backend service offered by a server or a web service without requiring complex integration with or complex changes to the server e.g. without requiring a server side proxy implementation or complex server side authentication integration . For example an iFrame included in the web application and a form element embedded in the iFrame can be used to create a communications channel with the server. A service request can be submitted to the server and the server can execute the service as performed for service requests received from any type of requesting entity and can create a response message associated with the request. The server can identify that the request is from an iFrame based client and can provide a wrapper for the response message and send the wrapped response message to the web application via the iFrame. The web application can process the response message and can invoke for example a callback function based on identifying a particular response or response type in the wrapped response message.

The web page can be configured to submit a request to the cross domain service server . The request can correspond to an API Application Programming Interface provided by the cross domain service server for accessing particular service functionality. The request can be submitted for example in response to an event such as an event triggered by a user input by the loading of the web page or by expiration of a timer among others. The application browser can be configured to implement one or more security policies which may allow the web page to access services provided by the client domain but which limit or restrict the accessing of a service running in the context of a different domain such as the server domain. For example the application browser can implement a same origin policy. A same origin policy can permit scripts or other objects running on web pages originating from the same domain to access each other s data such as methods and properties and can prevent access to data across web pages on different domains. A same origin policy can be implemented to restrict revealing of data and performing state changing actions to prevent data loss and to maintain confidentiality and data integrity.

The web page can however submit a request to the cross domain service server using an iFrame component . Sending the request using the iFrame component can overcome for example a same origin policy implemented by the application browser . For example the iFrame component can be configured to be associated with the server domain of the cross domain service server while being embedded in the web page that is associated with the client domain.

The iFrame component can be configured for example to be associated with a service associated with the server domain. For example the iFrame component can be associated with a server address in the server domain that is associated with a service provided by the cross domain service server . The iFrame component can be hidden e.g. no visual representation for the user of the web page . The iFrame component can be included for example in a JavaScript or other package that is embedded in or included in the web page such as a package included in JavaScript packages included in memory . The iFrame component can be automatically created for example when the JavaScript package is included in or associated with the web page .

The iFrame component can include a form element . The form element can be for example a form document object model DOM element within the iFrame component . The form element can be created for example when the iFrame component is created. Like the iFrame component the form element can be hidden. Data associated with the web page that is to be submitted with the request to the service at the cross domain service server can be associated with e.g. converted into the form element . For example one or more parameters for the request can be embedded into the form element . Embedding data in the form element can enable sending of large amounts of data to the cross domain service server such as data associated with large files video content etc.

The set of converted data in the form element can be submitted to the cross domain service server via the iFrame component . For example a service request can be sent using an HTTP GET or POST command. The submission can be sent to a particular server address in the server domain that is associated with the requested service . The request can be sent using an interface of the client .

An authentication module can provide authorization credentials to be included in the request. For example the user of the web page may have logged in to the web page during the current or a previous session. To secure sending of the credentials HTTPS HyperText Transfer Protocol over SSL Secure Sockets Layer can be used to submit the request. In some instances the authentication module may be a part of the application browser and can apply or associate any suitable credentials to requests responses or other actions associated with the web page .

In some implementations the request can be sent using a sendRequest API not shown . Parameters sent using the sendRequest API can include the name of a pre registered action e.g. a callback function to be called when a response is received from the server data to send to the server which can be data in for example a JSON JavaScript Object Notation format or a reference to the form element a response format e.g. which specifies a type of data for response data such as text JSON XML eXtensible Markup Language or JavaScript and a method type e.g. get or post .

The pre registered action can be for example a callback function or other hook that is triggered when a response of a particular type is received in response to a request submitted to the cross domain service server . For example one or more response types or other response indicators or response content can be registered and can be stored in the set of registered hooks and responsive actions . In some implementations the set of registered hooks and responsive actions are included in or otherwise associated with the JavaScript packages . The set of registered hooks and responsive actions can include a mapping between respective response types or response content and corresponding respective actions to perform. As described in more detail below a response can be routed to a pre registered action upon receipt of the response and can be executed by a JavaScript engine .

The service request from the client can be received at the cross domain service server using an interface . A service component can extract parameters included in the request. An authentication module can authenticate the request such as verifying credentials included in the request. The service component can verify whether the request corresponds to a defined service included in a service operations component . If the request corresponds to a defined service the service operations component can execute the service which can result in service output.

The service operations component can prepare a response based on the service execution. The response can include output s generated during service execution. A response wrapper module can determine that the request is a request received from an iFrame based cross domain client and can identify a response wrapper to associate with the response. For example the response wrapper module can apply an iFrame specific response wrapper to the response. A wrapped response can be sent to the client using the interface and can be received by the client using the interface .

The response can be received via the iFrame component . Upon receipt of the response the JavaScript engine can using the set of registered hooks and responsive actions identify a pre registered action associated with the received response. The pre registered action can be identified for example based on the contents of the response. The JavaScript engine can perform the identified pre registered action. Performing the pre registered action can include for example one or more of processing data included in the response updating the web page redirecting the web page to another location submitting another service request to the cross domain service server or submitting a service request to a different cross domain service server e.g. to a server that provides one or more services not provided by the cross domain service server among other actions.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single cross domain service server the environment can be implemented using two or more cross domain service servers as well as computers other than servers including a server pool. Indeed the cross domain service server may be any computer or processing device such as for example a blade server general purpose personal computer PC Mac workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further the cross domain service server may be adapted to execute any operating system including Linux UNIX Windows Mac OS Java Android iOS or any other suitable operating system. According to one implementation the cross domain service server may also include or be communicably coupled with an e mail server a Web server a caching server a streaming data server and or other suitable server.

The interface is used by the cross domain service server for communicating with other systems in a distributed environment including within the environment connected to the network for example the client device as well as other systems communicably coupled to the network . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated environment .

The cross domain service server further includes one or more processors . Each processor included in the cross domain service server may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally each processor included in the cross domain service server executes instructions and manipulates data to perform the operations of the cross domain service server . Specifically each processor included in the cross domain service server executes the functionality required to receive and respond to requests from the client device for example.

Regardless of the particular implementation software may include computer readable instructions firmware wired and or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java JavaScript Visual Basic assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The cross domain service server includes the memory or in some implementations multiple memories . The memory included in the cross domain service server may include any type of memory or database module and may take the form of volatile and or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including caches classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the cross domain service server .

The client device may generally be any computing device operable to connect to or communicate with at least the cross domain service server via the network using a wireline or wireless connection. In general the client device comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the environment of . The client device can include one or more client applications including the application browser . A client application is any type of application that allows the client device to request and view content on the client device . In some implementations a client application can use parameters metadata and other information received at launch to access a particular set of data from the cross domain service server . In some instances a client application may be an agent or client side version of the one or more enterprise applications running on the cross domain service server .

The interface of the client device can be for communicating with other systems in a distributed environment including within the environment connected to the network for example the cross domain service server as well as other systems communicably coupled to the network . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated environment .

The client device further includes one or more processors . Each processor included in the client device may be a central processing unit CPU an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally each processor included in the client device executes instructions and manipulates data to perform the operations of the client device . Specifically each processor included in the client device executes the functionality required to send requests to the cross domain service server and to receive and process responses from the cross domain service server .

The memory included in the client device may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including the JavaScript packages DOM elements the set of registered hooks and responsive actions user selections caches classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the client device .

There may be any number of client devices associated with or external to the environment . For example while the illustrated environment includes one client device alternative implementations of the environment may include any number of client devices communicably coupled to the cross domain service server and or the network . Additionally there may also be one or more additional client devices external to the illustrated portion of environment that are capable of interacting with the environment via the network . Further the term client client device and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client device is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The client device is generally intended to encompass any client computing device such as a laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client device may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the cross domain service server or the client device itself including digital data visual information or a graphical user interface.

At a web page associated with a first domain is provided for presentation the web page including an iFrame associated with a service associated with a second domain. The web page can be or can include for example a web application. As another example the web page can be or can include a portion of a web based portal. The service associated with the second domain can be for example a file storing service an in memory database service an analytics service or some other type of service.

The iFrame can be for example a DOM iFrame element. In some implementations the iFrame is hidden when the web page is presented. In some implementations the iFrame is associated with a particular server address in the second domain where the particular server address is associated with the service associated with the second domain. In some implementations the web page includes at least one other iFrame associated with a second service associated with a third domain. For example the first service can be a file storing service the second domain and the iFrame can be associated with the file storing service the second service can be an analytics service and the third domain and the second iFrame can be associated with the analytics service.

At a set of data associated with the web page is converted into a form element embedded within the iFrame associated with the second domain. For example parameters to be provided to the service can be embedded in the form element. The form element can be for example a DOM form element.

At the set of converted data in the form element is submitted via the iFrame to the service associated with the second domain. Submission of the set of converted data in the form element can be performed for example via a GET or POST command. The submission can be sent to a particular server address in the second domain associated with the service. Authorization credentials can be included in the submission. A browser on which the web page is presented can allow the submission via the iFrame to the particular server address in the second domain whereas the browser may restrict a submission to the particular server address in the second domain for a submission performed not via the iFrame.

At a response is received via the iFrame from the service associated with the second domain. The response can include one or more of a response type indicator an identification of a pre registered action and other data. In some implementations the response is in a JavaScript format. Other formats can be used such as text XML or JSON. In some implementations an example response can be 

At a pre registered action associated with the received response is identified. The pre registered action can be identified for example based on the contents of the response received via the iFrame. The pre registered action can be for example a hook callback or other function or event. In the example response shown above document added can be identified as a pre registered action. In some implementations the parent.postMessage method code included in the above example response can be executed by a JavaScript engine which can result in a message being posted to the web page which is the parent of the iFrame. The document added pre registered action can be identified as part of the processing of the posted message.

At the identified pre registered action is performed in response to receiving the response and identifying the pre registered action. For example performing the pre registered action can include redirection of at least a portion of the web page. Other examples of performing the pre registered action include processing of data included in the response submitting another request for another service and requesting user input from a user of the web page. Performing the pre registered action can include extracting data provided by the service from the response and using the extracted data. For example in the above example response message the server response field and corresponding example server response data data can be identified and the example server response data can be used during performance of the pre registered action.

At a service request is received from a cross domain iFrame the request associated with a service and including at least one parameter for execution. The request can be received for example as a submission of a form that is embedded in the cross domain iFrame. The iFrame can be associated for example with a first domain where the service request is received at a second domain different than the first domain.

At the request is processed to identify a service associated with the request and the identified service is executed. Executing the service can include verifying authorization credentials included in the request. For some or all requests output data can be generated during execution of the service. The service can be associated for example with a second domain.

At a normal response is prepared based on service execution. A normal response is a response that is prepared for any execution of the service whether in response to a request from a cross domain iFrame or a request from some other type of requesting entity. The normal response can include for example data generated from execution of the service. The normal response can be for example a cross domain message that is structured in JavaScript or some other format.

At a requesting entity is identified as an iFrame based cross domain client. At in response to identifying the requesting entity as an iFrame based cross domain client an iFrame specific response wrapper is applied to the response. For example in some implementations an example wrapped response can be 

At the wrapped response is sent to the request client s iFrame. For example a cross domain message can be sent to the iFrame at the first domain.

The web page can request a first service from an analytics server to produce data for the chart or in some implementations to produce the chart . The web page can request a second service from a file server to retrieve data for the grid from remote storage managed by the file server . The requests for the first and second services can be sent for example over a network . The analytics server and the first service can be associated with a first domain the file server and the second service can be associated with a second domain and the web page can be associated with a third domain.

A first iFrame can be created and associated with the first service and with the first domain and a second iFrame can be created and associated with the second service and with the second domain. Both the first and second iFrames can each include an embedded form. The web page can submit the request for the first service to the analytics server using the first iFrame and can submit the request for the second service to the file server using the second iFrame.

One or more hooks can be registered in association with the web page for one or more response types which may be included in responses from the first service. Similarly one or more hooks can be registered in association with the web page for one or more response types which may be included in responses from the second service. A particular hook can be identified and invoked in response to receipt of a response message from either the first or second service.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously concurrently and or in different orders than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

