---

title: Registration-based remote debug watch and modify
abstract: A remote debugging technique provides anonymity of program variables and selective debugging capability by providing a registration facility by which program variables are registered locally with a debugging module. An external program then communicates with the debugging modules and observes and/or modifies the program variables by specifying either an index or a variable name. The need to publish symbols is thereby averted and only the variables that a developer is interested in observing need be registered.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251038&OS=09251038&RS=09251038
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09251038
owner_city: Armonk
owner_country: US
publication_date: 20130802
---
This U.S. Patent Application is a Continuation of U.S. patent application Ser. No. 12 908 100 filed on Oct. 20 2010 which is incorporated herein by reference.

The present invention is related to program debuggers and more specifically to a program debugger that provides remote watch and modify features by providing a registration facility.

Debuggers are used in both development and field environments to determine if program code is operating properly and to investigate faults that cause improper program behavior that is apparent such as non terminating behavior. Debuggers generally provide views of the various aspects of internal program function and structure such as traces of program execution path and views of program variables in addition to hardware observation capabilities such as register and memory value snooping.

In order to provide the capabilities pointed out above development systems typically provide the program developer with the capability of generating a debugging version of program code which contains information allowing a debugging program to determine symbolic links to the program code and data storage areas. The symbol information may be embedded in the debug version of the program or may be stored in one or more external files. A non debug version of the program code is typically devoid of symbolic information.

The invention is embodied in a method computer system and computer program product that provide for observing data values within storage locations of a computer program during execution of the computer program within the computer system. The method is a method of operation of the computer system and the computer program product is a set of program instructions embodied in tangible form in computer readable storage media such as optical magnetic or electrical removable or non removable memory.

The computer program registers individual storage locations that store the data values with a debugging module located in the same address space as the computer program. The debugging module receives requests from an external program that specify data values corresponding to storage locations that have been registered by the registering. In response to the requests the debugging module retrieves or modifies the particular data values and for read requests sends the particular data values from the debugging module to the external program where the data values are displayed.

The foregoing and other objectives features and advantages of the invention will be apparent from the following more particular description of the preferred embodiment of the invention as illustrated in the accompanying drawings.

The present invention relates to methods and programs that provide remote debugging capability by permitting an external debugging program to view and or modify program variables i.e. data values stored in program storage locations . The viewable modifiable program variables are restricted to variables that have been registered with a debugging module located in the same memory space as the computer program. The debugging module can be selectively linked with the program so that non debug versions of the program do not contain the debugging module and the calls to register the program variables can either be stubbed or conditioned on a debugging constant so that the non debug version can be generated from the same program code as the debug version. Permissions are supported by the debug module so that the program may register some program variables as read only and others as read write read modify . Since no breakpoints are required to observe or modify the program variables the debugging scheme is suitable for debugging real time systems such as control systems. Also by providing altering the program values from within the program space using a debugging module no overhead is present unless the debug module is actually retrieving or modifying a program variable which also makes the debugging scheme useful in debugging real time systems. Further by registering only key variables both security and compactness are achieved since only those variables the programmer wishes to expose are exposed. The compactness of the scheme is suitable for embedded systems in which the large amount of memory required for complete symbol tables may exceed the resources available.

Referring now to a computer system in which techniques in accordance with an embodiment of the present invention are practiced is shown. The depicted computer system includes a workstation computer system coupled to a debugger platform A. The depicted computer system configuration is illustrative and processing systems in accordance with other embodiments of the present invention include special purpose computer systems in place of workstation and or other systems in which the debugger is executed by the same computer system. A processor is coupled to a memory which contains program instructions implementing a computer program executed by processor that in at least a debug version includes debug functionality in accordance with an embodiment of the present invention as described in detail below. Debugger platform A includes a processor A that is coupled to a memory A for storing data and program code implementing a debugger that communicates with one or more debug modules in the computer program executed by workstation computer system . Processor in workstation computer is also coupled to a storage interface which couples processor and memory to storage devices such as hard disc drive and an optical drive . Embodiments of the invention include computer program products that contain the debug module of the present invention stored in memory as well as stored on tangible media such as a CD ROM that may be inserted into optical drive to transfer computer program and other programs memory for execution by processor . Similarly debugger platform A includes hard disk drives and optical drives for accepting media such as optical storage A containing the debugger program and other data and or program code. The illustrated workstation computer system also includes input output I O interfaces and devices such as mice and keyboards for receiving user input and graphical displays for displaying information such as user interfaces constituting output of the computer program being debugged. Further debugger platform A also includes input output I O interfaces and devices A such as mice and keyboards for receiving user input and graphical displays for displaying information such as user interfaces of the debugger that in particular displays values of program variables of a program executing within workstation computer .

Workstation computer system is coupled to debugger platform A by an interface that couples to interface A through a wired optical or wireless connection that may be proprietary or take the form of a standardized serial or parallel bus such as an Ethernet connection. Debugger platform A sends commands to workstation computer system . The commands include commands to examine program variables of a program executing within workstation computer system and commands to modify those program variables among other commands. While the system illustrated in is a remote computer debugging arrangement it is understood that in accordance with other embodiments of the present invention the debugger may be executed within workstation computer system . Further in other architectures such as in a distributed processing system portions of the target program i.e. the computer program being debugged and the debugger program that communicates with the target program may be executed by multiple processors within the distributed processing system and may be partially executed by the same processor and partially executed by different processors. Therefore the terms remote and local as used herein are referring generally to the local program local tables of variables and local debug module in the sense that they are associated with and locate generally in the same memory space as the computer program while the remote tables and remote debugger are generally located in at least a different memory space if not in a separate computer system.

Referring now to an arrangement of program code and data within memory of workstation computer system and program code and data within memory A of debugger platform A is shown in accordance with an embodiment of the present invention. The computer program is located in memory is executed by workstation computer system and includes program variables which in the sense of the present invention may include constants and other data space such as allocated memory blocks referred to by pointers or other reference. Debugger is executed by debug platform A and communicates with a debug module associated with computer program . In the depicted embodiment debug module is linked with computer program and forms part of the loadable image of computer program . However in other embodiments of the present invention debug module may be a dynamic library or other operating facility that is not part of the loadable image of computer program .

In order to make a program variable accessible to debugger executable code within computer program calls an application programming interface API of debug module that registers program variables for debugging purposes. Therefore computer program has complete control over which variables are exposed to debugger . The API used to register program variables of computer program is illustrated as register which may be of the form 

A collection of all of the program variables registered by computer program is maintained in a local table which may be contained within debug module within a data area of computer program or may be in a separate location accessible by debug module . An exemplary table suitable for use as local table is shown in Table I below in which the first row is merely explanatory and not required.

Debugger also has an associated table remote table A that may match local table or may be different in that the flags value is not needed nor is the actual pointer to the storage location either needed to function nor desirable to expose external to computer program . In one embodiment remote table A is not needed if the values in local table are stored by index and it is desirable to display values only by index on the output display of debugger . In general remote table A will contain human readable names and optionally an index hash or other identifier to be supplied with the read or modify requests sent to debug module from debugger . The received read or modify requests are then satisfied by debug module using a look up of a storage location based on the index hash or variable name provided by debugger from remote table A or for interpretive scripting languages by evaluating the value specified by the variable name provided by debugger or a look up of the variable name using an index hash or other alias used in remote table A to represent an entry in local table . The information in remote table A can be loaded from a computer readable media or transmitted to debugger from local table or other data source through interface A that couples debugger to workstation computer which may be performed when a connection is established between debugger and debug module or at initialization of computer program . In one embodiment of the invention in addition to the register API debug module can support an unregister API in which case a transmission to update remote table A may be required unless it is desirable to merely fail requests to access program variables that are no longer registered. Further while the exemplary embodiment above indicates that program variables would be registered generally at startup and that in general local table would have a fixed set of entries it is possible for computer program to call the register API and optionally the unregister API on the fly to add or remove entries from local table . If such techniques are employed it would generally be desirable to synchronize remote table A with local table via update transmissions and in particular if indexes are used and reassigned such synchronization would be necessary. An example of such a use of on the fly program variable registration would be to only register variables in a region of program code that should not be entered under normal operating conditions. Such operation makes it possible to only expose selected program variables and only at certain times or when certain conditions such as errors have been encountered.

Debugger retrieves and modifies values of program variables within program by transmitting read and modify commands to debug module which then performs the requested operations if permissions are proper. The read command may take the form or where index and variable name are the identifiers and cmd read is a constant identifying the command as a read command. In response debug module returns a packet of data containing the contents of the storage location associated with the program variable that was requested which may be formatted with a header providing identifying information associated with the command that was sent in order to permit asynchronous and buffered transmissions of requests. To modify a program variable debugger sends a modify command which may take the form or where cmd modify is a constant identifying the command as a modify command where index and variable name are the identifiers as above data is the value to be written to the storage location associated with the program variable to be modified and size is an optional value that provides a check as to whether the size of data matches the size of the variable to me modified.

Referring now to a method for registering program variables with debug module in accordance with an embodiment of the present invention is shown. When debug module receives a request to register a program variable step if debug module is not present decision then the request is not processed which is accomplished by a stub or other technique as described above. If debug module is present decision if anonymizing is selected decision an index hash or other anonymous identifier is generated and associated with the program variable step and the storage location of the program variable the identifier the program variable size and permission flags are added to local table step . Otherwise if anonymizing is not selected decision the storage location of the program variable the program variable name the program variable size and permission flags are added to local table step . While the method illustrated in provides an example of how to register program variables in accordance with an embodiment of the present invention other techniques may be employed as well in accordance with other embodiments of the present invention.

Referring now to a method for reading and modifying variables from debugger in accordance with an embodiment of the present invention is shown. When debugger transmits a request to debug module step if debug module is not present decision then the request is not received step and no processing occurs. If the debug module is present decision the request is received and the storage location is looked up in local table from the variable name or identifier provided with the request step . If the request is a modify request decision the permissions are checked to determine whether permission to modify the program variable was set decision . If modify permission was not set then the request is failed step which may require a response to debugger in some environments so that debugger does not reflect an incorrect value for the program variable due to a failed modify operation. If modify permission was set for the program variable decision the new value supplied with the request is written into the storage location step . If the request is a read request decision the value of the storage location is read step and is transmitted to debugger step . While the method illustrated in provides an example of how to read and modify program variables in accordance with an embodiment of the present invention other techniques may be employed as well in accordance with other embodiments of the present invention.

As noted above all or portions of the present invention may be embodied in a computer program product which may include firmware an image in system memory or another memory cache or stored on a fixed or re writable media such as an optical disc having computer readable code stored thereon. Any combination of one or more computer readable medium s may store the program in accordance with an embodiment of the invention. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing.

In the context of the present application a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

While the invention has been particularly shown and described with reference to the preferred embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention.

