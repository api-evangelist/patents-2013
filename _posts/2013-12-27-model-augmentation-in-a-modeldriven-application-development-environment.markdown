---

title: Model augmentation in a model-driven application development environment
abstract: A principal model is configured to facilitate automatic generation of at least one resource for use by a computer-executable application. The principal model includes a group of classes, references, attributes, and associations between any of the classes. At least one model item required for a task that is absent from the principal model is identified. The absent model item is instantiated in a decoration model that operates with the principal model to augment operational functionality of the principal model. The decoration model includes a class, a reference, and an attribute for any corresponding one of the group of classes, references, and attributes of the principal model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513879&OS=09513879&RS=09513879
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09513879
owner_city: Armonk
owner_country: US
publication_date: 20131227
---
This application is a continuation of and claims priority to and claims the benefit of U.S. patent application Ser. No. 11 945 046 titled MODEL AUGMENTATION IN A MODEL DRIVEN APPLICATION DEVELOPMENT ENVIRONMENT which was filed in the United States Patent and Trademark Office on Nov. 26 2007 which has a current status of Allowed and which is incorporated herein by reference in its entirety. This application is related to U.S. Pat. No. 8 095 570 titled DECORATED MODEL ARCHITECTURE FOR EFFICIENT MODEL DRIVEN APPLICATION DEVELOPMENT which was filed in the United States Patent and Trademark Office on Nov. 26 2007 to U.S. Pat. No. 8 307 015 titled DECORATED MODEL ARCHITECTURE FOR EFFICIENT MODEL DRIVEN APPLICATION DEVELOPMENT which was filed in the United States Patent and Trademark Office on Nov. 1 2011 and to U.S. patent application Ser. No. 13 605 217 titled DECORATED MODEL ARCHITECTURE FOR EFFICIENT MODEL DRIVEN APPLICATION DEVELOPMENT which was filed in the United States Patent and Trademark Office on Sep. 6 2012 and which has a current status of Allowed. 

With the advent of modeling methodologies such as the Unified Modeling Language UML developers of computer based applications have been able to create system models and then employ tools that use the models to automatically generate application resources such as application programming interface API software for creating accessing and modifying instances of model classes as well as aspects of the persistence layer of an application such as database structures. While it may be preferable from the point of view of those that work with models or perform analyses on models that models should be constructed in a way that makes them easy to understand and work with models are often optimized for better system performance and other implementation considerations resulting in models that are difficult to understand and work with.

The present invention provides a decorated model architecture supporting model augmentation in a model driven application development environment.

In one aspect of the present invention a method is provided for augmenting a model in a model driven application development architecture the method including defining a task to be performed on at least one model item of a principal model where the principal model is configured to facilitate the automatic generation of at least one resource for use by a computer executable application identifying at least one model item required for the task that is absent from the principal model defining the absent model item in a decoration model mapping the decoration model to the principal model and storing both of the models on a computer readable medium.

In another aspect of the present invention the identifying step includes identifying at least one class in the principal model that can be subdivided into one or more subclasses identifying in the class an attribute that distinguishes the identities of each of the subclasses and declaring a lookup table mapping values of the attribute to the identities of the subclasses.

In another aspect of the present invention the method further includes identifying a flattened class hierarchy in the principal model where all subclasses of any classes in the flattened class hierarchy are stored in a single table using a type discriminator attribute and representing any of the classes in a static class model in the decoration model where the subtype information of any of the classes is explicitly represented by separate subclasses in the decoration model.

In another aspect of the present invention the method further includes performing a look up of derived subclasses in the decoration model by using a primitive attribute value where more than one attribute is involved in determining a derived subclass.

In another aspect of the present invention the method further includes providing read access for a query that is formatted for use with the decoration model and that is not directly operative on the principal mode by translating the query for operation on an instance of the principal model.

In another aspect of the present invention the method further includes providing read access for a query that is formatted for use with at least one class of the principal model where the query yields information that resides in both the principal model and the decoration model.

In another aspect of the present invention the method further includes setting values of instances of any of classes references or attributes of the decoration model by translating the values for storage in the principal model where the values retain their meaning when the instances are subsequently retrieved via the decoration model.

In another aspect of the present invention the method further includes providing write access for an object that is created via the decoration layer and whose class is a derived subclass by setting then the type attribute value according to the subclass lookup value where the type attribute value is persisted with persistent schema of the principal model such that when the object is subsequently accessed the object is assigned to an appropriate derived subclass.

In another aspect of the present invention the method further includes identifying at least two classes in the principal model where an association between the classes is not expressed using an association model item and representing the association in the decoration model.

In another aspect of the present invention the representing step includes creating a reference associated with a key which contains information about a source attribute and a target attribute of the key in the decoration model.

In another aspect of the present invention the method further includes providing read access responsive to a request for the value of a derived reference in the decoration model where an object that is implicitly referenced by the key is returned.

In another aspect of the present invention the method further includes providing write access responsive to a request to set a value for a derived reference in the decoration model where the source key attribute of a source object is set to the target key attribute value of a target object.

In another aspect of the present invention the method further includes saving the source object in a persistence layer including the set key attribute value where the target object will be retrieved when the source object is subsequently accessed.

In another aspect of the present invention a system is provided for augmenting a model in a model driven application development architecture the system including a model builder configured to facilitate the defining of a task to be performed on at least one model item of a principal model where the principal model is configured to facilitate the automatic generation of at least one resource for use by a computer executable application identifying of at least one model item required for the task that is absent from the principal model defining of the absent model item in a decoration model mapping of the decoration model to the principal model and means for storing both of the models on a computer readable medium.

In another aspect of the present invention the model builder is configured to facilitate identifying at least one class in the principal model that can be subdivided into one or more subclasses identifying in the class an attribute that distinguishes the identities of each of the subclasses and declaring a lookup table mapping values of the attribute to the identities of the subclasses.

In another aspect of the present invention the model builder is configured to facilitate identifying a flattened class hierarchy in the principal model where all subclasses of any classes in the flattened class hierarchy are stored in a single table using a type discriminator attribute and representing any of the classes in a static class model in the decoration model where the subtype information of any of the classes is explicitly represented by separate subclasses in the decoration model.

In another aspect of the present invention the model builder is configured to facilitate performing a look up of derived subclasses in the decoration model by using a primitive attribute value where more than one attribute is involved in determining a derived subclass.

In another aspect of the present invention the model builder is configured to facilitate providing read access for a query that is formatted for use with the decoration model and that is not directly operative on the principal mode by translating the query for operation on an instance of the principal model.

In another aspect of the present invention the model builder is configured to facilitate providing read access for a query that is formatted for use with at least one class of the principal model where the query yields information that resides in both the principal model and the decoration model.

In another aspect of the present invention the model builder is configured to facilitate setting values of instances of any of classes references or attributes of the decoration model by translating the values for storage in the principal model where the values retain their meaning when the instances are subsequently retrieved via the decoration model.

In another aspect of the present invention the model builder is configured to facilitate providing write access for an object that is created via the decoration layer and whose class is a derived subclass by setting then the type attribute value according to the subclass lookup value where the type attribute value is persisted with persistent schema of the principal model such that when the object is subsequently accessed the object is assigned to an appropriate derived subclass.

In another aspect of the present invention the model builder is configured to facilitate identifying at least two classes in the principal model where an association between the classes is not expressed using an association model item and representing the association in the decoration model.

In another aspect of the present invention the model builder is configured to facilitate creating a reference associated with a key which contains information about a source attribute and a target attribute of the key in the decoration model.

In another aspect of the present invention the model builder is configured to facilitate providing read access responsive to a request for the value of a derived reference in the decoration model where an object that is implicitly referenced by the key is returned.

In another aspect of the present invention the model builder is configured to facilitate providing write access responsive to a request to set a value for a derived reference in the decoration model where the source key attribute of a source object is set to the target key attribute value of a target object.

In another aspect of the present invention the model builder is configured to facilitate saving the source object in a persistence layer including the set key attribute value where the target object will be retrieved when the source object is subsequently accessed.

In another aspect of the present invention a computer program is provided embodied on a computer readable medium the computer program including a first code segment operative to define a task to be performed on at least one model item of a principal model where the principal model is configured to facilitate the automatic generation of at least one resource for use by a computer executable application a second code segment operative to identify at least one model item required for the task that is absent from the principal model a third code segment operative to define the absent model item in a decoration model a fourth code segment operative to map the decoration model to the principal model and a fifth code segment operative to store both of the models on a computer readable medium.

In another aspect of the present invention the second code segment is configured for identifying at least one class in the principal model that can be subdivided into one or more subclasses identifying in the class an attribute that distinguishes the identities of each of the subclasses and declaring a lookup table mapping values of the attribute to the identities of the subclasses.

In another aspect of the present invention the computer program further includes a sixth code segment operative to identify a flattened class hierarchy in the principal model where all subclasses of any classes in the flattened class hierarchy are stored in a single table using a type discriminator attribute and a seventh code segment operative to represent any of the classes in a static class model in the decoration model where the subtype information of any of the classes is explicitly represented by separate subclasses in the decoration model.

In another aspect of the present invention the computer program further includes an eighth code segment operative to perform a look up of derived subclasses in the decoration model by using a primitive attribute value where more than one attribute is involved in determining a derived subclass.

In another aspect of the present invention the computer program further includes an eighth code segment operative to provide read access for a query that is formatted for use with the decoration model and that is not directly operative on the principal mode by translating the query for operation on an instance of the principal model.

In another aspect of the present invention the computer program further includes an eighth code segment operative to provide read access for a query that is formatted for use with at least one class of the principal model where the query yields information that resides in both the principal model and the decoration model.

In another aspect of the present invention the computer program further includes an eighth code segment operative to set values of instances of any of classes references or attributes of the decoration model by translating the values for storage in the principal model where the values retain their meaning when the instances are subsequently retrieved via the decoration model.

In another aspect of the present invention the computer program further includes an eighth code segment operative to provide write access for an object that is created via the decoration layer and whose class is a derived subclass by setting then the type attribute value according to the subclass lookup value where the type attribute value is persisted with persistent schema of the principal model such that when the object is subsequently accessed the object is assigned to an appropriate derived subclass.

In another aspect of the present invention the computer program further includes a sixth code segment operative to identify at least two classes in the principal model where an association between the classes is not expressed using an association model item and a seventh code segment operative to represent the association in the decoration model.

In another aspect of the present invention the seventh code segment is configured for creating a reference associated with a key which contains information about a source attribute and a target attribute of the key in the decoration model.

In another aspect of the present invention the computer program further includes an eighth code segment operative to provide read access responsive to a request for the value of a derived reference in the decoration model where an object that is implicitly referenced by the key is returned.

In another aspect of the present invention the computer program further includes an eighth code segment operative to provide write access responsive to a request to set a value for a derived reference in the decoration model where the source key attribute of a source object is set to the target key attribute value of a target object.

In another aspect of the present invention the computer program further includes a ninth code segment operative to save the source object in a persistence layer including the set key attribute value where the target object will be retrieved when the source object is subsequently accessed.

Reference is now made to which is a simplified conceptual illustration of system for model driven application development constructed and operative in accordance with an embodiment of the present invention. In the system of a model generally designated and bounded by dashed lines is shown. Model is typically constructed using a model builder employing any known modeling technology such as the Unified Modeling Language UML that supports classes such as of an enterprise IT infrastructure or other system and associations between the classes. Model is configured to facilitate the automatic generation of one or more resources such as by a resource generator for use by one or more computer executable applications. Such resources may be associated with what is referred to in modeling as the persistence layer which includes schema elements including tables columns foreign keys and indexes or may be associated with the API as is known in the art. Model is divided into a principal model a decoration model and a model map that maps between principal model and decoration model . Principal model is configured to include anything that when added to deleted from or modified within principal model subsequent to automatically generating the resources would again require the automatic generation of the resources in order to effect the change for use by an application. Conversely decoration model is configured to include anything that when added to deleted from or modified within decoration model subsequent to automatically generating the resources would not require the automatic generation of the resources in order to effect the change for use by an application.

Model is preferably stored in a model storage which may be computer memory magnetic storage or any other suitable information storage medium. Model may be stored in storage in any suitable format such as in a relational database RDB or object oriented database OODB . Any of the elements shown in are preferably executed by or otherwise accessible to a computer .

Principal model preferably includes elements for storing decoration model such as a via DecorationModel class representing a package of the items in decoration model . There is preferably one model partition per package and each decoration model is preferably serialized such as an XML document.

Reference is now made to which is a simplified illustration of an exemplary implementation of model of constructed and operative in accordance with an embodiment of the present invention. In a principal model is shown having various modeled items. A corresponding item is created in a decoration model for one or more of the items in principal model . One or more items may then be attached to any of the items in decoration model rather than in principal model where their addition to modification in and or subsequent deletion from decoration model will not require that resources that were previously automatically generated using principal model be subsequently regenerated due to the addition modification and or deletion. Direct association links are preferably used for navigating from items in decoration model to items in principal model whereas a model map is preferably used for navigating in the opposite direction.

Reference is now made to which is a simplified illustration of an exemplary implementation of decoration model of constructed and operative in accordance with an embodiment of the present invention. In a decoration model is shown for aspects of a GUI interface in which classes and associations attributes are decorated by detailed GUI presentation definitions such as where there is one per user role application service level constraints and analysis logic definitions. For the sake of clarity DPackage and DPackageGuiDef are not shown. DClass and DStructuralFeature are shown having been generated for each corresponding EClass EStructuralFeature of a corresponding principal model. Instantiation of various concepts may be optional in a given decoration model such as where a DClass has no DClassGuiDef for a certain UserRole and will therefore be invisible in the GUI layer for a user with that role.

Items in the decoration model of may be created edited and deleted without affecting a related principal model and without requiring regeneration of resources defined by the principal model. For example a user may set a different display name for a class or attribute in the decoration model although DClass and DStructuralFeature items in the decoration model that correspond to EClass EStructuralFeature items in the principal model ought not be deleted.

The following guidelines may be employed when deciding what model items should be included in a principal model and what model items should be included in a decoration model. Model items that generally have and should have impact on resources that are generated based on a model should be included in a principal model whereas model items that generally do not or should not have impact on resources that are generated based on a model should be included in a decoration model. Model builder may be configured to recognize model items that do not impact generated resources and automatically place such items into a decoration model. These guidelines may be understood by way of example with regard to the persistence layer of an application environment in which database schema and an O R mapping are generated using a model. In this example model items that do not impact the generation of these resources include annotations that control display and business logic and thus these items may be included within a decoration model. Model items that do impact the generation of these resources include classes references attributes and annotations that control aspects of the persistence layer such as indexes. Some model items may be included within a decoration model although they would otherwise impact resource generation such as classes references and attributes whose instances or values can be derived from other data. Thus for example where the attribute Person.fullName can be derived from Person.firstName and Person.lastName the derived attribute may be included within a principal model such as where the attribute values for Person.fullName are meant to be stored in a database. The responsibility to insert and update the values for Person.fullName would lie with the applications that populate Person data. Although including Person.fullName in a principal model may be convenient for authors of reporting applications doing so results in data redundancy performance costs owing to insertion time and table size as well as the need to regenerate the schema and upgrade instances when the name or type of Person.fullName is changed. Alternatively by placing Person.fullName in a decoration model the responsibility for calculating the values for Person.fullName lies with applications that retrieve Person data.

Reference is now made to which is a simplified flowchart of an exemplary method of using a decoration model in an application environment operative in accordance with an embodiment of the present invention. In the method of once model of has been prepared and its principal model used to generate resources as described hereinabove the decoration model is read from where it is stored and is instantiated for use by one or more computer executable applications steps such as may be hosted by computer . When an application wishes to access an instance EObject of an item of the principal model step if the item has a corresponding item in the decoration model step the application accesses the corresponding instance DObject of the decoration model step instead of the EObject step . Calls to methods that are defined in EObject step are passed through to EObject step while calls to methods that are defined in DObject are handled by DObject step . For example getRepresentation string will return a representation based on which attribute is defined as representation attribute of the corresponding DObject s class in the decoration model.

Reference is now made to which is a simplified flowchart of an exemplary method of hot deploying decoration model changes operative in accordance with an embodiment of the present invention. In the method of once model of has been prepared and its principal model has been used to generate resources as described hereinabove the decoration model is read from where it is stored and is instantiated for use by one or more computer executable applications step such as may be hosted by computer . The instantiated decoration model is preferably made globally accessible step . For each request by an application to access an object associated with either the principal model or the decoration model step a new thread is preferably created to handle the request step . The decoration model is preferably assigned to a thread local variable in the new thread step and all thread internal code function calls to access the decoration model do so via the thread local variable of its thread step . Changes may be made to the decoration model step while applications that use the model are executed. The decoration model changes may be committed without impacting currently running applications since the previously instantiated decoration model was globally accessible and was reused by all request threads prior to the changes being made. The changed decoration model may be made available to new threads by starting a new thread that reads the changed decoration model instantiates the changed decoration model and deserializes it into its own thread local variable step . This may be done without affecting other currently running threads. The globally accessible decoration model may then be replaced by the changed model step . This is preferably done using synchronization and isolation techniques where new incoming requests are forced to wait until the globally accessible decoration model is replaced. Thereafter all new requests will have the new decoration model assigned to their thread local variable. Older requests that are still running using the old decoration model need not be disrupted and may return and present results according to the older decoration model in their thread local variable. Users may be warned when a model change occurs by checking for pointer equality between a thread local variable and the globally accessible decoration model during the post processing of a request. If the pointers are not the same a warning may be displayed recommending that the user resubmit the request. If the server hosting the applications is restarted at any point after the decoration model is changed the changed decoration model will preferably be in effect for all new and restarted applications.

Reference is now made to which is a simplified flowchart of an exemplary method of using a decoration model to augment a principal model operative in accordance with an embodiment of the present invention. In the method of which may be implemented by model builder in the context of the system of a task to be performed on one or more model items of a principal model is defined step . The task may be for example an impact analysis or a data lineage analysis. One or more model items that are required for the task but that are not found in the principal model are then identified step . The identified model items are then defined in a decoration model a mapping is made between the principal and decoration models and the models are stored on a computer readable medium step all as described hereinabove.

The application of the method of to augment principal models may be further understood in the context of its application to several examples described hereinbelow with reference to .

Reference is now made to which is a simplified illustration of a model legend useful in understanding the present invention. In a principal model item is shown having a plain border while an instance of a principal model class is denoted by a border with a plus symbol . A decoration model item that directly corresponds to a principal model item is denoted by a border with a square symbol . A decoration model helper item is denoted by a border with a triangle symbol . A derived decoration model item that directly expresses information that is only implicit in the principal model is denoted by a border with a circle symbol . A decoration model object that corresponds to an instance of a principal model class is denoted by a border with a diamond symbol . Model items in employ the border symbols shown in to indicate which model item types are represented.

Reference is now made to which are simplified illustrations of exemplary models useful in understanding the augmentation method of operative in accordance with an embodiment of the present invention. In a flattened class hierarchy is shown where all subclasses of a class may be stored in a single table by using a type discriminator attribute . This is done for example to allow queries regarding classes to be performed efficiently on a single table rather than on multiple tables storing multiple query types. However given a task involving read events and or write events within the model a conceptually clearer model and one that would allow for better analysis definition may be represented by the static class model shown in where the subtype information of a class is explicitly represented by separate subclasses and . Using the method of a decoration metamodel shown in may be used as a template for defining a decoration model shown in a model object diagram in in which a look up may be performed of derived subclasses using a primitive attribute value. This approach may be used whenever more than one attribute is involved in determining a derived subclass. Thus in the example shown in a new DClass instance is added per implicit subclass being WriteEvent and ReadEvent which are both subclasses of Event. An instance of EventSubclassLookup is also added being associated with DClass Event. For each new subclass an instance of ClassLookupEntry is added with an appropriate discriminatorValue.

A sample instance level object diagram of the augmented model of is shown in . Once a principal model has been augmented by a decoration model as described above read access of class instances may be provided in various ways. Read access may be provided for queries that are formatted for use with the decoration model and that are not directly operative on the principal model by translating them such that they may operate on instances of the principal model to retrieve the desired results. Thus in the current example a query for instances of WriteEvent in the decoration model may be translated into a query that may be performed on the EClass Event in the principal model where the value of the attribute type equals w. Read access may also be provided for queries of instances of principal model classes such that they yield not only information that resides in the principal model but may also provide related information that now resides in the decoration model. Thus in the current example read access of class instances may be provided as follows When an EObject instance is loaded and mapped to a DObject and the DClass has derived subclasses then the type attribute value is examined and the DObject is assigned the appropriate derived subclass.

When setting values of instances of derived classes references or attributes the values may be translated to values that may be stored in the principal model and that retain their meaning when the instances are subsequently retrieved via the decoration model. Thus in the current example write access may be provided as follows When an object is created via the decoration layer and the object class is a derived subclass then the type attribute value is set according to the subclass lookup value. Where this type attribute value is persisted with the principal model persistent schema the next time this object is loaded into memory the read access logic above will ensure that the object is assigned the appropriate derived subclass.

It is appreciated that the GUI definitions described hereinabove with reference to can be defined for any DClass including derived subclasses. Thus in the example shown in 

2. The reference target may be hidden in ReadEvent and source may be hidden in WriteEvent since they are not applicable there.

3. The attribute type may be hidden in both ReadEvent and WriteEvent since type information is already explicit in the class name.

Reference is now made to which are simplified illustrations of exemplary models useful in understanding the augmentation method of operative in accordance with an embodiment of the present invention. In a model is shown where an association between two classes and is not expressed using an association model item. Thus in the example shown there is no modeled association between a customer and transactions involving the customer. This is done for example so that inserting editing and removing references within the model may be carried out quickly without involving any checks or locks in the database and or the Object Relational Mapping ORM level. Thus given a task involving the relationship between customers and transactions the model may be represented as shown in where the association is explicitly represented. Using the method of a decoration metamodel shown in may be used as a template for defining a decoration model shown in a model object diagram in in which a derived DReference may be created and associated with a DlmplicitKey which contains information about the source and the target DAttribute of the key. This is similar to the concept of a Foreign Key in a database. However there is no need for DlmplicitKey to reference the type class since this is already done by DReference.

A sample instance level object diagram of the augmented model of is shown in . Read access may be provided as follows When the value for a derived reference is requested by clients of the decoration layer the object that is implicitly referenced by the key attribute is returned. Once retrieved the reference value can be cached. Services and GUI clients on top of the decoration layer see the derived reference value transparently although derived reference values may be marked as such in the GUI layer. Write access may be provided as follows When the values for a derived reference are set by clients of the decoration layer the respective source key attribute e.g. customerID value of the source object e.g. transaction is set to the target key attribute e.g. id value of the target object e.g. customer . When the persistence layer subsequently saves the source object it will contain the correct new key attribute value which will cause the correct new target object to be retrieved next time the source object is loaded into memory. Decoration GUI definitions may be set to hide the attribute customerID in DClass Transaction and the attribute id in DClass Customer since this information is now explicitly expressed by reference customer .

Any of the elements and steps described hereinabove are preferably executed by or otherwise accessible to computer having been configured for such purpose.

It is appreciated that one or more of the steps of any of the methods described herein may be omitted or carried out in a different order than that shown without departing from the true spirit and scope of the invention.

While the methods and apparatus disclosed herein may or may not have been described with reference to specific computer hardware or software it is appreciated that the methods and apparatus described herein may be readily implemented in computer hardware or software using conventional techniques.

While the present invention has been described with reference to one or more specific embodiments the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that while not specifically shown herein are nevertheless within the true spirit and scope of the invention.

