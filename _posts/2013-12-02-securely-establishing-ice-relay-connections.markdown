---

title: Securely establishing ice relay connections
abstract: Methods, apparatuses, and computer program products are described for securely connecting a plurality of ICE client devices without using TURN. A session border controller (SBC) receives, via a website application server, a connectivity message from a first ICE client device at a first relay port and a connectivity message from a second ICE client device at a second relay port. The SBC authenticates the messages using credential information received from the server, and latches address information associated with the first client device to the first relay port and address information associated with the second client device to the second relay port. The SBC forwards the message from the first client device to the second client device and the message from the second client device to the first client device, and establishes an ICE relay connection indirectly between the first client device and the second client device via the relay ports.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08725885&OS=08725885&RS=08725885
owner: Sansay, Inc.
number: 08725885
owner_city: San Diego
owner_country: US
publication_date: 20131202
---
This application is a continuation of U.S. patent application Ser. No. 13 827 793 filed on Mar. 14 2013 which claims priority to U.S. Provisional Patent Application No. 61 730 345 filed on Nov. 27 2012 the contents of which are incorporated herein in their entirety.

This application relates generally to methods and apparatuses including computer program products for automatically creating Interactive Connectivity Establishment ICE relay candidates and securely establishing ICE relay connections without using Traversal Using Relays around NAT TURN .

An Internet Protocol IP session involves the connection between two devices across a network of routers cables and switches for the purpose of exchanging packets of information. For example a web browser can establish an IP based HTTPS session with a website for the purpose of retrieving information. In another example a device can establish a Session Initiation Protocol SIP session with another computing device to e.g. conduct a phone call.

Web browsers have recently begun adopting the Web Real Time Communication WebRTC protocol for the purpose of establishing real time audio and video sessions between browser clients. The WebRTC protocol as defined by the IETF relies on the ICE RFC 5245 methods for establishing a direct communication link between the two clients. Under certain network topologies the only means for a successful communication link is through the use of a media relay server placed out in the network.

For both SIP and WebRTC sessions ICE defines that media relay server to be a TURN server running the TURN protocol RFC 5766 . The TURN protocol however is susceptible to many types of attacks such as theft of service and distributed denial of service.

The ICE protocol is designed to allow two client devices to automatically discover the best way to send voice and video media streams across an IP network. Certain network topologies such as those using Firewall NATs can prevent the devices from directly communicating due to the way in which some Firewall NATs create and enforce IP address and port access. The NAT function automatically maps an external IP address and port to every outbound message stream the client produces. The procedures of ICE allow the client to learn what IP address and port the NAT has assigned. When a client decides to initiate a real time session the client must first determine which IP address and port combinations are available for the purpose of establishing a media connection with another client. These IP and port combinations are called candidates in the terminology of ICE.

In the simplest model a client begins its candidate discovery by sending a STUN RFC 5389 binding request to a STUN server somewhere out in the network. The STUN server responds to the client binding request and provides the IP address and port information of where the STUN server saw the binding request originate from. If the client is behind a Firewall NAT the STUN server sees the external IP address and port that the NAT assigned to this outbound message transmission. This is called the Server Reflexive candidate.

According to ICE a client in need of a network media relay issues a TURN allocation request using a procedure similar to STUN. In addition to providing the Server Reflexive candidate the TURN request asks the TURN server to allocate a media relay port for the client to use. depicts a system for establishing a media connection using a TURN service. The system includes a website application server that is connected to a plurality of client computing devices e.g. Client A Client B via Firewall NAT devices respectively. The system also includes a TURN server that is also connected to the client devices via the Firewall NAT devices 

The website application server hands the TURN service credentials to Client A when Client A initiates a call request e.g. a SIP INVITE a WebRTC call request by clicking on a web page link for example. Client A then issues the necessary resource allocation messages to the TURN server using the TURN protocol. The allocation response from the TURN server contains the ICE Relay candidate referred to as r1 in to Client A . Note that the port t1 is the TURN service port and not the Relay candidate.

In the TURN model the client device then creates a Session Description Protocol SDP of its possible media candidates. In Client A creates an SDP containing the Host candidate a1 the Server Reflexive candidate a2 and the Relay candidate r1 . The SDP is then passed up to the website application server using the mechanisms of the media protocol e.g. WebRTC SIP . The website application server then uses the media protocol to send the SDP of Client A down to Client B . Client B then initiates its own candidate discovery using STUN. Client B does not attempt a TURN reservation because client B sees that Client A has already offered a Relay candidate and only one relay candidate is needed per media stream.

After the STUN binding exchange Client B creates its SDP using the Host candidate b1 and the Server Reflexive candidate b2 . The SDP is handed up to the website application server using the media protocol and the website application server delivers the SDP to Client A . Both Client A and Client B now have the other client s SDP and the STUN connectivity checks begin. ICE defines the priority of the various permutations that arise when each client systematically tries to communicate between candidates. Client A for instance attempts to send a STUN message from its Host candidate to Client B s Host candidate a1 b1 . If Client A does not see a response then Client A tries to send a STUN connectivity message to the Server Reflexive candidate of Client B and make the attempt occur between a2 b2 as shown in .

At the same time Client B performs STUN connectivity checks towards Client A s candidates. If the Host and Reflexive candidates do not succeed then Client B sends a STUN connectivity check to the Relay candidate r1 . The TURN server then encapsulates the request inside a TURN header and forwards the encapsulated request to Client A using the established TURN binding a2 t1 . Because Client A created that TURN binding Client A receives the encapsulated STUN connectivity message and responds using the reverse path a2 t1 r1 b2 . Client B then successfully receives the connectivity response and both clients decide to use that connection for the media stream. This entire process must happen for each media stream. For example a call using audio and video will have to perform the above process twice before exchanging audio and video data.

The systems and methods described herein allow for a session border controller SBC or a Web Session Border Controller WebSBC server to be used in place of a TURN server such that the media relay function is not subject to the service affecting attacks of TURN. The WebSBC server available from Sansay Inc. of San Diego Calif. differs from a TURN server fundamentally by only allowing resource allocations to occur directly from the website application server. In contrast ICE deployments that rely on TURN servers initiate resource allocations directly from the client which result in the inherent security problems.

The WebSBC server with its direct interface to the website application server allows for secure media relay allocations to occur outside of the client s direct involvement or knowledge. The WebSBC server allocation information is provided to the website application server application for the purpose of manipulating the media relay binding description also called the Session Description Protocol SDP see RFC 4566 by adding the allocated relay candidate to the client provided SDP. The SDP that is exchanged between the clients through the website application server therefore offers a pre allocated media relay candidate that the clients naturally use according to the procedures of ICE. The WebSBC server performs the media relay function securely and effectively without using the TURN protocol.

The invention in one aspect features a method for securely connecting a plurality of ICE client devices without using TURN. A session border controller receives via a website application server a connectivity message from a first ICE client device at a first relay port located on the session border controller where the session border controller and the website application server are connected by an allocation link. The session border controller receives a connectivity message from a second ICE client device at a second relay port located on the session border controller. The session border controller authenticates the connectivity messages using credential information received from the website application server. The session border controller latches address information associated with the first ICE client device to the first relay port. The session border controller latches address information associated with the second ICE client device to the second relay port. The session border controller forwards the connectivity message from the first ICE client device to the second ICE client device. The session border controller forwards the connectivity message from the second ICE client device to the first ICE client device. An ICE relay connection is established indirectly between the first ICE client device and the second ICE client device via the relay ports located on the session border controller.

The invention in another aspect features a system for securely allocating ICE relay candidates without using TURN. The system includes a website application server computing device comprising a CPU coupled to a memory and to one or more communication interface ports and a session border controller coupled to the website application server device via an allocation link. The session border controller is configured to receive via the website application server computing device a connectivity message from a first ICE client device at a first relay port located on the session border controller. The session border controller is configured to receive a connectivity message from a second ICE client device at a second relay port located on the session border controller. The session border controller is configured to authenticate the connectivity messages using credential information received from the website application server computing device. The session border controller is configured to latch address information associated with the first ICE client device to the first relay port. The session border controller is configured to latch address information associated with the second ICE client device to the second relay port. The session border controller is configured to forward the connectivity message from the first ICE client device to the second ICE client device. The session border controller is configured to forward the connectivity message from the second ICE client device to the first ICE client device. The session border controller is configured to establish an ICE relay connection indirectly between the first ICE client device and the second ICE client device via the relay ports located on the session border controller.

The invention in another aspect features a computer program product tangibly embodied in a non transitory computer readable medium for securely allocating ICE relay candidates without using TURN. The computer program product includes instructions operable to cause a session border controller coupled to a website application server device via an allocation link to receive via the website application server computing device a connectivity message from a first ICE client device at a first relay port located on the session border controller. The computer program product includes instructions operable to cause the session border controller to receive a connectivity message from a second ICE client device at a second relay port located on the session border controller. The computer program product includes instructions operable to cause the session border controller to authenticate the connectivity messages using credential information received from the website application server computing device. The computer program product includes instructions operable to cause the session border controller to latch address information associated with the first ICE client device to the first relay port. The computer program product includes instructions operable to cause the session border controller to latch address information associated with the second ICE client device to the second relay port. The computer program product includes instructions operable to cause the session border controller to forward the connectivity message from the first ICE client device to the second ICE client device. The computer program product includes instructions operable to cause the session border controller to forward the connectivity message from the second ICE client device to the first ICE client device. The computer program product includes instructions operable to cause the session border controller to establish an ICE relay connection indirectly between the first ICE client device and the second ICE client device via the relay ports located on the session border controller.

The invention in another aspect features a method for securely allocating ICE relay candidates without using TURN. A first ICE client device receives a request to initiate a media session with a second ICE client device. The first ICE client device transmits a STUN binding request to a website application server. The first ICE client device receives an ICE relay candidate from the website application server in response to the STUN binding request. The first ICE client device generates an ICE relay binding description the binding description including the ICE relay candidate. The first ICE client device transmits the ICE relay binding description to the website application server. The first ICE client device receives a modified ICE relay binding description including one or more ICE relay candidates associated with the second ICE client device and one or more relay ports located on a session border controller coupled to the website application server. An ICE relay connection is established based on the modified ICE relay binding description where the ICE relay connection is established i directly between the first ICE client device and the second ICE client device via the ICE relay candidates associated with the first and second ICE client devices or ii indirectly via relay ports located on the session border controller when the ICE relay connection cannot be established directly between the first ICE client device and second ICE client device.

Any of the above aspects can include one or more of the following features. In some embodiments the ICE relay connection uses the Web Real Time Communication WebRTC protocol. In some embodiments the session border controller is a WebSBC server.

In some embodiments the session border controller performs a Datagram Transport Layer Security Secure Real Time Protocol DTLS SRTP handshake with the first ICE client device to establish a first SRTP key performs a DTLS SRTP handshake with the second ICE client device to establish a second SRTP key decrypts packets received from the first ICE client device using the first SRTP key and encrypts the received packets using the second SRTP key and transmitting the encrypted packets to the second ICE client device. In some embodiments the session border controller replicates the decrypted packets and stores the replicated packets. In some embodiments the replicated packets are stored for call recording purposes.

In some embodiments the connectivity message from the first ICE client device includes the address information associated with the first ICE client device and the connectivity message from the second ICE client device includes the address information associated with the second ICE client device. In some embodiments the address information associated with the first ICE client device represents a new IP address and port number generated by the first ICE client device upon transmitting the connectivity message to the session border controller. In some embodiments the address information associated with the second ICE client device represents a new IP address and port number generated by the second ICE client device upon transmitting the connectivity message to the session border controller.

In some embodiments the ICE relay candidates associated with the first ICE client device include a server reflexive address associated with a Network Address Translation NAT device coupled between the first ICE client device and the website application server. In some embodiments the ICE relay candidates associated with the second ICE client device include a server reflexive address associated with a Network Address Translation NAT device coupled between the second ICE client device and the website application server.

In some embodiments the step of establishing an ICE relay connection includes transmitting by the first ICE client device a connectivity message to a first one of the relay ports on the session border controller transmitting by the second ICE client device a connectivity message to a second one of the relay ports on the session border controller authenticating by the session border controller the connectivity messages using credential information received from the website application server via the allocation link latching by the session border controller address information associated with the first ICE client device to the first one of the relay ports latching by the session border controller address information associated with the second ICE client device to the second one of the relay ports forwarding by the session border controller the connectivity message from the first ICE client device to the second ICE client device and forwarding by the session border controller the connectivity message from the second ICE client device to the first ICE client device. In some embodiments the connectivity message from the first ICE client device includes the address information associated with the first ICE client device and the connectivity message from the second ICE client device includes the address information associated with the second ICE client device.

Other aspects and advantages of the technology will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating the principles of the technology by way of example only.

The systems and methods described herein do not require a TURN server or TURN protocol to be run by the clients. is a block diagram of a system for securely allocating media relay candidates without using TURN. By using the system a successful media relay can be allocated much more securely and with less complexity. Also the clients do not need any modification from the standard ICE procedures. The system only utilizes the STUN capabilities of the ICE clients.

The system includes a website application server that is connected to a plurality of client computing devices e.g. Client A Client B via Firewall NAT devices respectively. Example client devices can include but are not limited to personal computers tablets mobile computing devices smart phones and the like. The system also includes a WebSBC server that is also connected to the client devices via the Firewall NAT devices 

The system requires an Allocation Protocol link to be established between the website application server and the WebSBC server . This link should use a secure protocol API such as Representational State Transfer REST over HTTP HTTPS but other secure protocols can be used as well. The link can be initiated by either the website application server or the WebSBC server based on preconfigured addresses. The link is expected to stay up for the duration of service and can provide for multiple client allocations over the common interface.

The binding request sent by Client A results in the Server Reflexive address a2 being created. Client A then constructs its media relay binding description also called SDP using the candidates a1 and a2 and passes the media relay binding description up to the website application server via WebSockets or HTTP. The website application server receives the media relay binding description that includes the ICE relay candidates associated with Client A .

The website application server then determines a subscription profile associated with Client A . The website application server decides based on the subscription profile to create an allocation link denoted by the Allocation Protocol link in to a session border controller e.g. the WebSBC server . The website application server can send a REST command instructing the WebSBC server to allocate a set of media relay ports. As shown in a STUN server is encapsulated in the WebSBC server . By encapsulating the STUN server inside the WebSBC server the STUN server can share the Denial of Service DOS protection and blocking capabilities as well as the redundancy schemes of the WebSBC server . The systems described herein are not limited to such an embodiment however as the STUN server and the WebSBC server can be deployed as separate nodes in the network without changing the behavior of the system .

The WebSBC server then allocates two relay ports r1 and r2 and returns those candidates to the website application server in an Allocation Protocol response. The website application server then modifies the media relay binding description by adding the relay candidate r2 to Client A s a1 and a2 candidates and transmits the media relay binding description down to Client B . Client B responds by transmitting its two ICE relay candidates b1 and b2 to the website application server and the website application server receives the two ICE relay candidates from Client B . The website application server then modifies the media relay binding description to add Relay candidate r1 to the b1 and b2 candidates from Client B . The website application server transmits the media relay binding description including the relay candidate r1 to Client A . A media relay connection is established between Client A and Client B based on the media relay binding description via the relay ports r1 and r2 located on the WebSBC server .

The result of this network based Relay candidate allocation is that Client A is told to try to connect with Client B using b1 b2 and r1 candidates. Client B subsequently tries to connect using a1 a2 and r2 candidates. If the Host and Reflexive candidates are not able to communicate directly then both clients begin sending STUN connectivity messages to the relay candidates r1 and r2 . The act of sending those messages creates two new Firewall NAT bindings a3 and b3 .

The WebSBC server in then auto learns the IP and port binding that occurred when the STUN connectivity messages were received over its r1 and r2 relay ports. The website application server also shares the STUN short term credentials provided in the SDP to the WebSBC server within the Allocation Protocol so that the WebSBC server can perform STUN authentication before latching the bindings a3 r1 and b3 r2 .

For example assume Client A happens to attempt a connectivity check to the relay candidate r1 before Client B does its check to r2 . The WebSBC server verifies that Client A actually sent the connectivity message by performing the STUN short term credential check using the information provided in Allocation Protocol request. If the authentication check passes the WebSBC server binds the r1 relay port to the source IP and port a3 of Client A s message. The WebSBC server can either store that STUN message and deliver it to Client B at a later time or the WebSBC server can discard the message relying on the fact that Client B s attempt should cause a retransmit from Client A . Once Client B attempts a connectivity check to port r2 and it is verified and latched the WebSBC server forwards it to the other latched connection on port r1 . From this point on the two clients have a secure and authenticated path to complete the STUN connectivity handshake and can begin sending the media streams over the ports a3 r1 r2 b3 as shown in . The WebSBC server then has provided a network relay service without the same vulnerabilities as TURN. For example in the WebSBC server model 

In a second embodiment the system of can utilize WebSockets connections between the client devices and the website application server for the purpose of call control. is a block diagram of a system for securely allocating media relay candidates without using TURN the system having WebSockets connections between client devices and the website application server. The system includes the same components as the system in with the added feature of WebSockets connections e.g. connection connection between the client devices and the website application server . The WebSockets connections enable full duplex low overhead bidirectional communication between the website application server and the respective clients providing a solution to reduce latency and unnecessary traffic that is scalable for large applications. As shown in the system uses the WebSockets connections for transmitting SIP call control messages but it should be understood that any protocol can be transmitted using the WebSockets connections to implement a variety of applications such as real time messaging games social media and the like.

In a third embodiment the ICE relay candidate creation techniques described above can be applied to a system using a SIP SBC model. is a block diagram of a system for securely allocating media relay candidates without using TURN the system using a SIP SBC model. The system includes a SIP SBC that is connected via a communications network to client devices through Firewall NAT devices respectively.

The system uses the same ICE relay candidate creation techniques as described above with respect to . The SIP SBC receives a media relay binding description from Client A that includes the ICE relay candidates associated with Client A. The SIP SBC allocates relay ports and modifies the media relay binding description to include the relay ports in addition to the ICE relay candidates from Client A . The SIP SBC transmits the modified binding description to Client B and Client B responds by sending its two ICE relay candidates back to the SIP SBC . The SIP SBC then modifies the media relay binding description to add the b1 and b2 candidates from Client B . The SIP SBC transmits the media relay binding description including the relay ports to Client A . A SIP connection is established between Client A and Client B based on the media relay binding description via the relay ports located on the SIP SBC .

The following section provides additional detail on the attributes of the allocation protocol used by the system in over the allocation link between the website application server and the WebSBC server . The attributes include 

2 Ability to initiate and initialize a control session between the website application server and WebSBC server.

3 Ability for the website application server to query the status and capabilities of the WebSBC server.

4 Ability for the website application server to request a media relay allocation and other services such as IPv4 to IPv6 conversion and transcoding.

5 Ability for the WebSBC server to accept reject or redirect the resource allocation based on local conditions.

6 Ability for all media relay binding description SDP elements to be provided to and from the WebSBC server for the purpose of authentication and application features.

7 Ability for the website application server to request the WebSBC server to initiate an outbound SIP session using the SDP provided.

9 Ability for the website application server to request and receive media stream events such as dual tone multi frequency DTMF signaling.

The following are examples of the media relay binding description also called the SDP transmitted between the client devices and the website application server as described above with respect to .

The above described techniques can be implemented in digital and or analog electronic circuitry or in computer hardware firmware software or in combinations of them. The implementation can be as a computer program product i.e. a computer program tangibly embodied in a machine readable storage device for execution by or to control the operation of a data processing apparatus e.g. a programmable processor a computer and or multiple computers. A computer program can be written in any form of computer or programming language including source code compiled code interpreted code and or machine code and the computer program can be deployed in any form including as a stand alone program or as a subroutine element or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one or more sites.

Method steps can be performed by one or more processors executing a computer program to perform functions by operating on input data and or generating output data. Method steps can also be performed by and an apparatus can be implemented as special purpose logic circuitry e.g. a FPGA field programmable gate array a FPAA field programmable analog array a CPLD complex programmable logic device a PSoC Programmable System on Chip ASIP application specific instruction set processor or an ASIC application specific integrated circuit or the like. Subroutines can refer to portions of the stored computer program and or the processor and or the special circuitry that implement one or more functions.

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital or analog computer. Generally a processor receives instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and or data. Memory devices such as a cache can be used to temporarily store data. Memory devices can also be used for long term data storage. Generally a computer also includes or is operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. A computer can also be operatively coupled to a communications network in order to receive instructions and or data from the network and or to transfer instructions and or data to the network. Computer readable storage mediums suitable for embodying computer program instructions and data include all forms of volatile and non volatile memory including by way of example semiconductor memory devices e.g. DRAM SRAM EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and optical disks e.g. CD DVD HD DVD and Blu ray disks. The processor and the memory can be supplemented by and or incorporated in special purpose logic circuitry.

To provide for interaction with a user the above described techniques can be implemented on a computer in communication with a display device e.g. a CRT cathode ray tube plasma or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse a trackball a touchpad or a motion sensor by which the user can provide input to the computer e.g. interact with a user interface element . Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech and or tactile input.

The above described techniques can be implemented in a distributed computing system that includes a back end component. The back end component can for example be a data server a middleware component and or an application server. The above described techniques can be implemented in a distributed computing system that includes a front end component. The front end component can for example be a client computer having a graphical user interface a Web browser through which a user can interact with an example implementation and or other graphical user interfaces for a transmitting device. The above described techniques can be implemented in a distributed computing system that includes any combination of such back end middleware or front end components.

The components of the computing system can be interconnected by transmission medium which can include any form or medium of digital or analog data communication e.g. a communication network . Transmission medium can include one or more packet based networks and or one or more circuit based networks in any configuration. Packet based networks can include for example the Internet a carrier internet protocol IP network e.g. local area network LAN wide area network WAN campus area network CAN metropolitan area network MAN home area network HAN a private IP network an IP private branch exchange IPBX a wireless network e.g. radio access network RAN Bluetooth Wi Fi WiMAX general packet radio service GPRS network HiperLAN and or other packet based networks. Circuit based networks can include for example the public switched telephone network PSTN a legacy private branch exchange PBX a wireless network e.g. RAN code division multiple access CDMA network time division multiple access TDMA network global system for mobile communications GSM network and or other circuit based networks.

Information transfer over transmission medium can be based on one or more communication protocols. Communication protocols can include for example Ethernet protocol Internet Protocol IP Voice over IP VoIP a Peer to Peer P2P protocol Hypertext Transfer Protocol HTTP Session Initiation Protocol SIP H.323 Media Gateway Control Protocol MGCP Signaling System 7 SS7 a Global System for Mobile Communications GSM protocol a Push to Talk PTT protocol a PTT over Cellular POC protocol Universal Mobile Telecommunications System UMTS 3GPP Long Term Evolution LTE and or other communication protocols.

Devices of the computing system can include for example a computer a computer with a browser device a telephone an IP phone a mobile device e.g. cellular phone personal digital assistant PDA device smart phone tablet laptop computer electronic mail device and or other communication devices. The browser device includes for example a computer e.g. desktop computer and or laptop computer with a World Wide Web browser e.g. Chrome from Google Inc. Microsoft Internet Explorer available from Microsoft Corporation and or Mozilla Firefox available from Mozilla Corporation . Mobile computing device include for example a Blackberry from Research in Motion an iPhone from Apple Corporation and or an Android based device. IP phones include for example a Cisco Unified IP Phone 7985G and or a Cisco Unified Wireless Phone 7920 available from Cisco Systems Inc.

Comprise include and or plural forms of each are open ended and include the listed parts and can include additional parts that are not listed. And or is open ended and includes one or more of the listed parts and combinations of the listed parts.

One skilled in the art will realize the technology may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting of the technology described herein.

