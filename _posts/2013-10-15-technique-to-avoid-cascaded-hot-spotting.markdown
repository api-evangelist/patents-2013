---

title: Technique to avoid cascaded hot spotting
abstract: The present invention overcomes the disadvantages of the prior art by providing a technique that stripes data containers across volumes of a striped volume set (SVS) using one of a plurality of different data placement patterns to thereby reduce the possibility of hotspots arising due to each data container using the same data placement pattern within the SVS. The technique is illustratively implemented by calculating a first index value, an intermediate index value and calculating a hash value of an inode associated with a data container to be accessed within the SVS. A final index value is calculated by multiplying the intermediate index value by the hash value, modulo the number of volumes of the SVS. Further, a Locate( ) function may be used to compute the location of data container content in the SVS to which a data access request is directed to ensure consistency of such content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08880814&OS=08880814&RS=08880814
owner: NetApp, Inc.
number: 08880814
owner_city: Sunnyvale
owner_country: US
publication_date: 20131015
---
The present application is a continuation of commonly assigned U.S. patent application Ser. No. 13 116 356 which was filed on May 26 2011 which is a continuation of commonly assigned U.S. patent application Ser. No. 11 834 412 which was filed on Aug. 6 2007 now issued as U.S. Pat. No. 7 975 102 on Jul. 5 2011 by Robert Wyckoff Hyer Jr. for a TECHNIQUE TO AVOID CASCADED HOT SPOTTING and is hereby incorporated by reference.

The present invention is directed to storage systems and in particular to striping a data container across a plurality of volumes on one or more storage systems.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage NAS environment a storage area network SAN and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of data containers such as files and logical units. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the data container. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the data container a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

A known type of file system is a write anywhere file system that does not overwrite data on disks. If a data block is retrieved read from disk into a memory of the is storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. Sunnyvale Calif.

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing file based and block based protocol messages in the form of packets to the system over the network.

A plurality of storage systems may be interconnected to provide a storage system environment or cluster configured to service many clients. Each storage system or node may be configured to service one or more volumes wherein each volume stores one or more data containers. In one embodiment the volumes serviced by the particular node may be distributed among all of the nodes of the environment. This embodiment distributes the data access requests along with the processing resources needed to service such requests among all of the nodes thereby reducing the individual processing load on each node. In another embodiment a data container may be striped across a plurality of volumes configured as a striped volume set SVS where each volume is serviced by a different node of the cluster thereby distributing the load for the single data container among a plurality of node. A technique for data container striping is described U.S. Pat. No. 7 698 289 entitled STORAGE SYSTEM ARCHITECTURE FOR STRIPING DATA CONTAINER CONTENT ACROSS VOLUMES OF A CLUSTER by Michael Kazar et al the contents of which are hereby incorporated by reference.

In the latter embodiment described above each data container is striped across the plurality of volumes using an identical striping i.e. data placement pattern. That is the same data placement pattern is used for each of a plurality of data containers striped across the SVS. Thus as data is written to data containers the volumes comprising the SVS are traversed in the same order for each data container. A noted disadvantage of such identical volume traversal arises when a plurality of data containers have continued write operations directed to them. In such situations one or more nodes servicing the volumes may become unnecessarily overloaded processing the contained write operations thereby rendering one or more volumes of the SVS a bottleneck. Eventually the increasingly bottlenecked volume of the SVS may become a hotspot. As used herein a hotspot is a localized area to which a significant number of data access requests are directed. System resources may become overloaded while attempting to process the data access requests resulting in a concomitant loss of throughput. Consequently because identical striping patterns are used as the current bottlenecked volume completes its I O input output operations each subsequent data container will receive the next set of I O operations directed to the next volume designated by the striping algorithm thus becoming the new bottlenecked volume. In this way a wave of bottlenecks cascades among the volumes in accordance with the striping algorithm.

The present invention overcomes the disadvantages of the prior art by providing a technique that stripes data containers across volumes of a striped volume set SVS using one of a plurality of different data placement patterns to thereby reduce the possibility of cascading hotspots arising due to each data container using the same data placement pattern within the SVS. Illustratively the SVS is serviced by a storage system architecture that comprises a plurality of nodes interconnected as a cluster. Notably the novel technique enables more than one data placement pattern to be used to stripe the data containers across the volumes of the SVS thus facilitating steady servicing of data access requests by the nodes and reducing the effects of hotspots.

Illustratively the SVS is associated with a set of striping rules that define a particular stripe algorithm a stripe width and an ordered list of volumes within the SVS. The stripe algorithm specifies the manner in which data container content is apportioned as stripes across the plurality of volumes while the stripe width specifies the size width of each stripe. The ordered list of volumes specifies the function and implementation of the various volumes and striping rules of the SVS. For example the ordering of the volumes in the list may denote the manner of implementing a particular data placement pattern.

Further a Locate function may be used to compute the location of data container content in the SVS to which a data access request is directed to thereby ensure consistency of such content served by the cluster. Illustratively the Locate function accepts as an input an inode number of the data container and an offset value indicating an offset into the data container. A first index value is determined by first adding the inode number to the value of the offset divided by the stripe width with the sum then taken modulo the striping table size. Next an intermediate index value is generated by indexing the first value into the ordered list of volumes. A hash value is then obtained by for example indexing using the inode number into an array comprising values numbers that have been selected to be mutually prime with the size of an ordered list of volumes which may comprise a striping table. The first index value may then be cached into a configuration table. A final value is determined by multiplying the intermediate index value by the hash value modulo the number of volumes of the SVS. The final value is then used to identify and locate the volume and node servicing the volume by indexing into the stripe table.

The present invention overcomes the disadvantages of the prior art by providing a technique that stripes data containers across volumes of a striped volume set SVS using one of a plurality of different data placement patterns to thereby reduce the possibility of hotspots arising due to each data container using the same data placement pattern within the SVS. The technique is illustratively implemented by calculating a first index value an intermediate index value and then calculating a hash value of an inode associated with a data container to be accessed within the SVS. A final index value is subsequently calculated by multiplying the intermediate index value by the hash value modulo the number of volumes of the SVS. Further a Locate function may be used to compute the location of data container content in the SVS to which a data access request is directed to thereby ensure consistency of such content.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

In previous striping systems such as that described in above referenced U.S. Pat. No. 7 698 289 data containers are striped using identical algorithms across volumes serviced by the D Modules. In such systems a plurality of clients may be accessing sections of data containers that are serviced by a single D Module. The single D Module may become inundated with an overwhelming demand for data access requests. Once overloaded the hotspot may cascade as each data container utilizes the same striping technique. As a result a concomitant loss of throughput may occur and the hotspot may become exacerbated as more data access operations are received while the rate of data access completion remains stagnant.

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named data containers such as directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N Module on the node while the other processor executes the functions of the D Module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . The volumes may be embodied as flexible volumes and further organized as one or more aggregates. Aggregates and flexible virtual volumes are described in U.S. Pat. No. 7 409 494 titled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT by John K. Edwards et al and assigned to Network Appliance Inc. which is hereby incorporated by reference as though fully set forth herein.

As noted above in previous striping systems data containers may be striped using identical algorithms across a volume serviced by a single D Module. As the storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients the single D Module may become overwhelmed with demand for data access requests. The present invention overcomes the disadvantages of the previous striping systems by providing a technique that stripes data containers across volumes of a striped volume set SVS using one of a plurality of different data placement patterns to thereby reduce the possibility of cascading hotspots arising due to each data container using the same data placement pattern within the SVS.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named data containers such as directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted data container in which names and links to other data containers and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of data containers such as blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term Data ONTAP is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperating relation with a volume striping module VSM a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS utilizing the novel data placement technique of the present invention. As described further herein the VSM cooperates with the file system to enable storage server to service a volume of the SVS. In particular the VSM implements the novel Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte KB blocks and using index nodes inodes to identify data containers and data container attributes such as creation time access permissions size and block location . The file system uses data containers to store meta data describing the layout of its file system these meta data data containers include among others an inode data container. A data container handle i.e. an identifier that includes an inode number inum is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode data container. A file system fs info block specifies the layout of information in the file system and includes an inode of a data container that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode data container may directly reference point to data blocks of the inode data container or may reference indirect blocks of the inode data container that in turn reference data blocks of the inode data container. Within each data block of the inode data container are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a data container.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode data container using the inode number inum to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

The present invention provides a system and method for providing a technique that stripes data containers across volumes of a striped volume set SVS using one of a plurality of different data placement patterns to thereby reduce the possibility of cascading hotspots arising due to each data container using the same data placement pattern within the SVS.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D Module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N Module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N Module and D Module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D Module to D Module communication for data container striping operations described herein.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N Module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D Module . That is the N Module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D Modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D Modules in the cluster . Thus any network port of an N Module that receives a client request can access any data container within the single file system image located on any D Module of the cluster.

Further to the illustrative embodiment the N Module and D Module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N Module and D Module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N Module and D Module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Patent Application Publication No. US 2002 0116593.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D Module exposing the CF API to which an N Module or another D Module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N Module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D Module residing on the same node or ii a remote procedure call RPC when communicating the command to a D Module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D Module de encapsulates the CF message and processes the file system command.

A data container e.g. a file a block or the like is accessed in the file system using a data container handle. is a schematic block diagram illustrating the format of a data container handle including a SVS ID field an inode number inum field a unique ifier field a striped flag field and a striping epoch number field . The SVS ID field contains a global identifier within the cluster of the SVS within which the data container resides. The inode number field contains an inode number of an inode within an inode data container pertaining to the data container. The unique ifier field contains a monotonically increasing number that uniquely identifies the data container handle . The unique ifier is particularly useful in the case where an inode number has been deleted reused and reassigned to a new data container. The unique ifier distinguishes that reused inode number in a particular data container from a potentially previous use of those fields. The striped flag field is illustratively a Boolean value that identifies whether the data container is striped or not. The striping epoch number field indicates the appropriate striping technique for use with this data container for embodiments where the SVS utilizes differing striping techniques for different data containers.

In the illustrative embodiment a data container is represented in the write anywhere file system as an inode data structure adapted for storage on the disks . is a schematic block diagram of an inode which preferably includes a meta data section and a data section . The information stored in the meta data section is of each inode describes the data container e.g. a file and as such includes the type e.g. regular directory vdisk of data container its size time stamps e.g. access and or modification time and ownership i.e. user identifier UID and group ID GID of the data container. The meta data section also includes a generation number and a meta data invalidation flag field the latter indicating meta data whether meta data in the inode is usable. The contents of the data section of each inode may be interpreted differently depending upon the type of data container inode defined within the type field . For example the data section of a directory inode contains meta data controlled by the file system whereas the data section of a regular inode contains file system data. In this latter case the data section includes a representation of the data associated with the data container.

When an on disk inode or block is loaded from disk into memory its corresponding in core structure embeds the on disk structure. For example the dotted line surrounding the inode indicates the in core representation of the on disk inode structure. The in core structure is a block of memory that stores the on disk structure plus additional information needed to manage data in the memory but not on disk . The additional information may include e.g. a dirty bit . After data in the inode or block is updated modified as instructed by e.g. a write operation the modified data is marked dirty using the dirty bit so that the inode block can be subsequently flushed stored to disk. The in core and on disk format structures of the WAFL file system including the inodes and inode data container are disclosed and described in the previously incorporated U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998.

The VLDB is a database process that tracks the locations of various storage components e.g. SVSs flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N Module of each node accesses a configuration table that maps the SVS ID of a data container handle to a D Module that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the flexible volumes hereinafter generally volumes and aggregates within the cluster. Examples of such VLDB entries include a VLDB volume entry and a VLDB aggregate entry .

The VLDB illustratively implements a RPC interface e.g. a Sun RPC interface which allows the N Module to query the VLDB . When encountering contents of a data container handle that are not stored in its configuration table the N Module sends an RPC to the VLDB process. In response the VLDB returns to the N Module the appropriate mapping information including an ID of the D Module that owns the data container. The N Module caches the information in its configuration table and uses the D Module ID to forward the incoming request to the appropriate data container. All functions and interactions between the N Module and D Module are coordinated on a cluster wide basis through the collection of management processes and the RDB library user mode applications .

To that end the management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database.

The present invention overcomes the disadvantages of the prior art by providing a technique that stripes data containers across volumes of a striped volume set SVS using one of a plurality of different data placement patterns to thereby reduce the possibility of hotspots arising due to each data container using the same data placement pattern within the SVS. Illustratively the SVS is serviced by a storage system architecture that comprises a plurality of nodes interconnected as a cluster. Notably the novel technique enables more than one data placement pattern to be used to stripe the data containers across the volumes of the SVS thus facilitating steady servicing of data access requests by the nodes and reducing the effects of hotspots.

Illustratively the SVS is associated with a set of striping rules that define a particular stripe algorithm a stripe width and an ordered list of volumes within the SVS. The stripe algorithm specifies the manner in which data container content is apportioned as stripes across the plurality of volumes while the stripe width specifies the size width of each stripe. The ordered list of volumes specifies the function and implementation of the various volumes and striping rules of the SVS. For example the ordering of the volumes in the list may denote the manner of implementing a particular data placement pattern.

Further a Locate function may be used to compute the location of data container content in the SVS to which a data access request is directed to thereby ensure consistency of such content served by the cluster. Illustratively the Locate function accepts as an input an inode number of the data container and an offset value indicating an offset into the data container. A first index value is determined by first adding the inode number to the value of the offset divided by the stripe width with the sum then taken modulo the striping table size. Next an intermediate index value is generated by indexing the first value into the ordered list of volumes. A hash value is then obtained by for example indexing using the inode number into an array comprising values numbers that have been selected to be mutually prime with the size of a striping table and with the number of aggregates in the stripe. The first index value may then be cached into a configuration table. A final value is determined by multiplying the intermediate index value by the hash value modulo the number of volumes of the SVS. The final value is then used to identify and locate the volume and node servicing the volume by indexing into the stripe table.

Each set of striping rules illustratively includes a stripe width field a stripe algorithm ID field an ordered list of volumes field and in alternate embodiments additional fields . The striping rules contain information for identifying the organization of a SVS. For example the stripe algorithm ID field identifies a striping algorithm used with the SVS. In the illustrative embodiment multiple striping algorithms could be used with a SVS accordingly stripe algorithm ID is needed to identify which particular algorithm is utilized. Each striping algorithm in turn specifies the manner in which file content is apportioned as stripes across the plurality of volumes of the SVS. In accordance with an illustrative embodiment of the present invention described herein the novel data placement technique may be identified by one of the multiple stripe algorithm IDs even though the data placement technique utilizes a plurality of data placement patterns. The stripe width field specifies the size width of each stripe. The ordered list of volumes field contains the IDs of the volumes comprising the SVS. In an illustrative embodiment the ordered list of volumes comprises a plurality of tuples each comprising a flexible volume ID and the aggregate ID storing the flexible volume. Moreover the ordered list of volumes may specify the function and implementation of the various volumes and striping rules of the SVS. For example the ordering of volumes in the list may denote the manner of implementing a particular data placement pattern e.g. round robin.

According to yet another aspect of the invention a Locate function is provided that enables the VSM and other modules such as those of N Module to locate a D Module and its associated volume of a SVS in order to service a data access request to a file. The Locate function takes as arguments at least i a SVS ID ii an offset within the file iii the inode number for the file and iv a set of striping rules and returns the volume on which that offset begins within the SVS. For example assume a data access request directed to a file is issued by a client and received at the N Module of a node where it is parsed through the multi protocol engine to the appropriate protocol server of N Module .

To determine the location of a D Module to which to transmit a CF message the N Module may first retrieve a SVS entry to acquire the striping rules and list of volumes associated with the SVS. The N Module then executes the Locate function to identify the appropriate volume and D Module to which to direct an operation. Thereafter the N Module may retrieve the appropriate VLDB volume entry to identify the aggregate containing the volume and the appropriate VLDB aggregate entry to ultimately identify the appropriate D Module . The protocol server of N Module then transmits the CF message to the D Module .

In accordance with an illustrative round robin striping algorithm volume A contains a stripe of file content or data D followed in sequence by two stripes of sparseness S another stripe of data D and two stripes of sparseness S . Volume B on the other hand contains a stripe of sparseness S followed in sequence by a stripe of data D two stripes of sparseness S another stripe of data D and a stripe of sparseness S . Volume C continues the round robin striping pattern and to that end contains two stripes of sparseness S followed in sequence by a stripe of data D two stripes of sparseness S and another stripe of data D . It should be noted that use of the round robin striping technique is only exemplary.

In step the N Module accesses the VLDB to identify the D Module hosting the volume containing the desired data. To determine the location of a D Module to which to transmit a CF message the N Module may first retrieve a SVS entry to acquire the striping rules and list of volumes associated with the SVS. The N Module then executes a process such as Locate function to identify the appropriate volume to which to direct the request.

Thereafter the N Module may retrieve the appropriate VLDB volume entry to identify the aggregate containing the volume and the appropriate VLDB aggregate entry to ultimately identify the appropriate D Module . Once the N Module identifies the volume containing the desired data the procedure proceeds to step where the N Module forwards the data access request via a CF message to the D Module . Upon receiving the data access request the D Module processes the data access request in step . The procedure then completes in step .

The first index value is generated by first adding the inode number to the value of the offset divided by the stripe width with this sum taken modulo the striping table size e.g. First Index Value inum offset stripe width modulo StripingTableSize In step an intermediate index value is generated e.g. Intermediate Index Value Striping Table Entry First Index Value In step a hash value is then generated for example by mapping the inode number into numbers that have been selected to be mutually prime with the size of the striping table and with the list of ordered volumes. The N Module may illustratively cache the first index value in its configuration table . In step the final index value is determined by multiplying the intermediate index value by the hash value modulo the number of volumes of the SVS e.g. Final Index Value Intermediate Index Value Hash Value Modulo Number of Volumes in SVS In step the final value is then used to identify and locate the volume by indexing into a list of ordered volumes where the D Module ID forwards the incoming request to the appropriate data container. The procedure then completes in step .

In another illustrative embodiment different SVS traversal patterns may be used for separate regions of a single data container. One advantage of this embodiment is that even if a single data container were receiving all the I O requests a bottleneck could still be avoided. This may be illustratively accomplished by generating a second hash value in step .

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed data container systems. Furthermore while this description has been written in terms of N and D Modules the teachings of the present invention are equally suitable to systems where the functionality of the N and D Modules are implemented in a single system. Alternately the functions of the N and D Modules may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

