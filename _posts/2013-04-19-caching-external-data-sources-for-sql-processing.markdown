---

title: Caching external data sources for SQL processing
abstract: Techniques are provided for caching external data sources for SQL processing. According to an embodiment, a database system receives a query that requires foreign data from an external data source. In response to receiving the query, the database system determines whether the foreign data currently resides in a cache of the database system. In response to determining that the foreign does not currently reside in the cache, the database system retrieves the foreign data from the external data source, maps the foreign data to a column granule of a table, and stores the column granule in the cache. In another embodiment, the database system receives a second query that requires the foreign data. In response to determining that the foreign data is cached with the stored column granule, the database system retrieves the column granule from the cache.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251210&OS=09251210&RS=09251210
owner: Oracle International Corporation
number: 09251210
owner_city: Redwood Shore
owner_country: US
publication_date: 20130419
---
The present disclosure relates generally to techniques for evaluating database queries and more specifically to techniques for caching external data sources for query processing.

A database is a structured collection of data and metadata that is stored on one or more storage devices such as a set of hard disks. The data within a database may be logically organized according to a variety of data models depending on the implementation. For example in the relational model data is typically organized into a set of tables where each table comprises a set of row and columns. In most cases each row represents a distinct object and each column represents a distinct attribute. However other data models may also be used to organize the data.

A database management system DBMS is software that controls access to data in a database. The DBMS is configured to receive and process a variety of database commands often referred to as queries. In many implementations the DBMS supports queries that conform to a structured query language SQL . SQL is a standardized query language for managing data in a relational DBMS RDBMS .

SQL includes two distinct sets of commands Data Definition Language DDL for managing and indexing data structures in the database and Data Manipulation Language DML for accessing and manipulating data residing within the data structures. DDL is typically used to create alter and delete database objects such as tables indexes views and constraints whereas DML is typically used to add query update and delete data in existing database objects.

When the DBMS receives a query such as a SQL expression the DBMS evaluates the query to obtain a query result. Query evaluation includes two stages query compilation and query execution. During query compilation the DBMS parses the SQL expression and generates a query execution plan. The query execution plan specifies an ordered set of steps frequently represented as a tree of query operators used to execute the query. The query operators at each step are associated with one or more expressions that represent computations or other actions that will be performed upon query execution. Example SQL operators include without limitation table scans joins table queues group by operations and bloom filters. Once the query execution plan is generated the query is executed according to the plan.

In order to evaluate a SQL expression the DBMS relies upon the internal structures and organization of the data within the database. For example the SQL expression may identify which data to access from the database based on where it resides in a particular table. Data that resides externally herein referred to as foreign data from the database is typically not constrained by the structure and organization defined by the internal database metadata. For instance the foreign data may not be organized into a tabular format by the external data source and may be organized according to a different structure and format defined by the external data source. Therefore SQL queries typically cannot be used to access and modify data external to the database.

One approach to enable SQL queries to analyze data residing outside the database involves loading the foreign data into the database. A database loader is an application that extracts data from the external source transforms the extracted data into a format suitable for loading into a target database table and populates the database table with the extracted data. Thus data from the external source is internalized by the database and converted to a format that conforms to database s internal organization. This approach allows the DBMS to execute queries on data from external data sources after the data has been loaded into the database. However the loading process involves a high processing and storage overhead especially where the external source comprises large quantities of data that are continuously updated.

Another approach for evaluating foreign data is to offload query evaluation to an external source of the foreign data. For example when a database query directed to foreign data is received the DBMS may send the database query to the external source for evaluation. The external source may then evaluate the query and return the query result to the DBMS. This approach increases the processing overhead on the external data source and requires the external data source to be able to process queries received from the DBMS.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Techniques are described herein for caching foreign data for SQL processing. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

According to embodiments described herein a database system is configured to cache foreign data on demand without loading the foreign data into persistent storage of a database. The cache of foreign data is herein referred to as an external data cache. By caching such data SQL analytics and other data analysis may be performed on the foreign data without repeatedly extracting the most commonly used foreign data from external sources. At the same time the database is not overloaded with potentially extraneous foreign data since the data is only cached and not persisted in the database. Accordingly query processing speeds on foreign data may be increased without increasing the storage overhead of the database. Furthermore query evaluation may be completely internalized by the database system without offloading computation onto an external source of the foreign data.

In an embodiment the DBMS may cache the foreign data in a format that is internal to the database system even though the external database that originated the foreign data may store the data in a different format. For example the foreign data may reside in an arbitrary data file in the external data source. When a query is received the appropriate data may be mapped from the data file to one or more database objects defined by the database system. The format may correspond to the internal structures and organization of the database to facilitate query evaluation using the foreign data. When subsequent queries that access the foreign data are received the DBMS may access the cached foreign data without having to reextract the data from the external source or reformat the data to conform to the database s internal organization.

In an embodiment the DBMS manages the external data cache according to one or more cache management policies. For example the DBMS may purge foreign data that has become cold from the cache. The DBMS may also invalidate foreign data that has become stale.

In another embodiment the external data cache is distributed across a plurality of nodes and the DBMS may distribute the foreign data across the different nodes. When a query is received that accesses the foreign data the plurality of nodes may be used to execute the query in parallel.

Query processing logic comprises logic for compiling and executing database queries submitted by database user s . Database user s may be any person application or other mechanism capable of submitting database queries to database system . Query processing logic may process and execute SQL queries directed to data residing external to database such as foreign data SQL queries directed to data internal to database such as structured data or SQL queries directed to any combination thereof. Query processing logic may include without limitation a language engine for extracting database operations from the query expressions and generating a query execution plan a query optimizer for optimizing the query execution plan and a database engine for performing the database operations of the optimized query execution plan on the appropriate database objects.

External data cache is a memory cache used by database manager to store foreign data extracted from external data sources. External data cache may reside in system memory on a single database node or may be distributed across a plurality of database nodes. A database node may comprise any host machine executing a database server for an instance of database manager . Database system may comprise other data caches that are not illustrated for purposes of brevity. Examples include without limitation a metadata or data dictionary cache a buffer cache a result cache and a library cache. In an embodiment external data cache is part of the database result cache as described in further detail below. The memory for external data cache may be allocated when a database instance is started and deallocated when the database instance terminates. External data cache may be shared by multiple processes that belong to a single database instance. If external data cache has no more available space for caching foreign data some of the foreign data may be moved to disk as described in further detail below.

Access driver is an application programming interface API that interprets foreign data for database system . When one of database queries requests access to foreign data database manager may use access driver to read and format foreign data from external data source . In an embodiment access driver performs the transformations on foreign data so that it matches the internal structures and organization of database system .

Cache management logic manages external data cache according to one or more cache replacement policies. For example cache management logic may purge the least recently used foreign data object from external data cache to generate space for incoming foreign data. Cache management logic may also invalidate foreign data when it has become stale. Techniques for invalidating foreign data are described in further detail below.

Foreign data may comprise any data that resides externally to database . In an embodiment foreign data is managed by one or more external data source s and is not subject to the same constraints imposed by database system on data residing in database . For example the structure and manner in which foreign data is generated updated and stored by external data source s may be different than the manner in which database manager manages structured data . Examples of external data sources include without limitation internet feeds flat files remote tables accessed via a database link data generated by program functions and other data files managed by separate applications outside the control of the DBMS.

Database is non volatile memory such as disk that persistently stores metadata in metadata repository and structured data in structured data repository . In an embodiment metadata stored in metadata repository includes a data dictionary that defines database objects in structured data repository . For example the metadata may identify table segments such as tables partitions and subpartitions stored in the structured data. Structured data repository may store data according to one or more data models including without limitation a relational data model. Other data models may also be used depending on the particular implementation.

In an embodiment database manager performs on demand formatting and caching of external data. For example when access is first requested to target foreign data database manager extracts the target foreign data from the external data source formats the target foreign data and stores the data in external data cache .

In order to determine how to format the foreign data database manager may maintain mapping data that define how the foreign data maps to internal structures of database system .

In an embodiment database manager maintains external table mapping data. An external table as used herein is a table whose structure is defined in database and or in a database query but whose data is stored outside database . For example an external table may be created and its structure defined through DDL statements such as the CREATE . . . ORGANIZATION EXTERNAL statement. In another example the external table may be created through programmatic functions such as PL SQL statements or other table functions. The table functions may comprise any function that takes foreign data sources as input and produces a collection of rows and or columns that can be queried

Creating an external table does not create an actual table in database . That is no foreign data is loaded and persisted in database when a request to create an external table is received. In some embodiments creating the external table may cause a table definition to be stored in database . For example when an external table is first created database may store external table metadata which describes how the external table layer presents data to the database system. The metadata may define the number and type of columns in the external table and how external data maps to the columns of the external table. In other embodiments the external table may be linked to the external data source through a script or other programmatic function or through a database link to a remote table. Accordingly the structure of the table is defined however no data is loaded into the table in database .

In an embodiment when foreign data is loaded into external data cache access driver uses mapping data maintained by database manager to convert the foreign data from a format native to the external data source to a format herein referred to as a target format that conforms to the internal structures and organization of database system . For example each separate line of a file in external data source may be mapped to a different table row as defined by external table metadata. In another embodiment foreign data included in external files may map to certain columns based on the date that the data was generated. The foreign data may be mapped in any other suitable manner.

In an embodiment the external data cache stores the foreign data in the target format for use in query processing. The target format may vary from implementation to implementation. For example the foreign data may be loaded into a set of one or more columns of a table. The columns may be stored in column major format row major format or some combination thereof. The foreign data may also be compressed and or encoded differently than the foreign system.

In step database manager processes the query and checks external data cache for foreign data required by the query. In an embodiment database manager uses query processing logic to parse the query and identify query expressions referencing the external data sources and to generate a query execution plan. Techniques for generating a query execution plan are described in further detail below.

In step database manager determines whether the foreign data required by the received query currently reside in external data cache . For example database manager may query external data cache for a particular external table column referenced by the query. If the foreign data does not reside in the cache then the process continues to step . On the other hand if the cache has the foreign data then the process continues to step . In some instances part of the foreign data required by the query may be cached in external data cache while other parts may not have been previously cached or may have been deleted. In such instances the process continues to step for those parts that are cached and step for those parts that are not cached.

In step database manager determines whether the cached data is valid. If invalidation logic has determined the foreign data is stale or otherwise invalid then the process continues to step . On the other hand if the cached data is valid then the process continues to step . In some instances part of the cached data may be valid while another part may be invalid. In such instances the process continues to step for those parts that are invalid and for those parts that are valid. In an embodiment step involves invalidation logic querying external data source s through access driver whether the foreign data is still valid. In other embodiments the external data source s may proactively notify invalidation logic when cached foreign data has become invalid. In such cases invalidation logic may delete the cached data whenever the external data source sends an invalidation request and step may be omitted as foreign data only resides in external data cache if valid.

In step database manager extracts the foreign data required by the query from the external data source. In an embodiment access driver determines from external table metadata and the external columns referenced in the database query which foreign data to extract from the external data source. Access driver retrieves this foreign data from the external data source and maps the foreign data to columns and or column granules of the external table.

In step database manager stores the foreign data in external data cache in a format that facilitates query processing. For example the foreign data may be stored in column format where each row of the column is stored contiguously in memory. The foreign data may be stored in column format even though stored in a different format by external data source s . In another embodiment the foreign data is loaded into the cache without storing the data in persistent storage in database .

In step database manager retrieves the foreign data from external data cache during query execution and in step database manager executes the query using the foreign data to generate a query result. Database manager may combine the foreign data with internal data to generate the query result. For example structured data may store information about various individuals for whom genomic data has been generated while the actual genomic data resides in external files. Database manager may extract certain parts of the genomic data based on the received database query and combine this foreign data with selected information for the respective individual to whom the genomic data pertains. Once generated the query result may be stored in external data cache and or database . Thus the query result may be stored in persistent storage within the database system even though the foreign data used to generate the query result may only reside in a memory cache.

In an embodiment external data cache caches column granules of the external table. A column granule may comprise any range of rows of a column. For example the column granule may store a set of rows for a column of a table partition or for a rowid range granule. Thus a column granule may be the entire column or a portion of the entire column requested by the query. The column granule may even comprise a single row of the external table column.

In an embodiment the column granules are generated by a parallelization process. The parallelization process breaks an external table column into multiple parts for parallel execution so that query execution can be performed on different processors in a multi processor database system. The manner in which the column granules are formed may vary depending on the implementation. For example each column granule may correspond to a different offset in an external file.

As noted above database manager may be distributed across a plurality of database node. Each of the database nodes may comprise a different computing device executing a database server with its own external data cache that stores a different portion of the column i.e. a different column granule . Columns that reside on different database nodes are herein referred to as parallel query PQ column granules. Each cached PQ granule may be managed independently from other granules of the same column. For example eviction of a column granule from the external data cache of one database server does not affect the eviction of a different column granule of the same column stored in the external data cache of a different or the same database server.

In an embodiment external data cache may be part of a result cache that database system uses to store query results for re use in subsequent executions. For example the first time a query is received data blocks used by the query are read from database and loaded into a buffer cache if they do not already reside in the buffer cache. The DBMS executes the query to generate a query result which is stored in a result cache. The result data stored in the result cache may comprise result data for particular operations performed while executing the query such as the result of a table scan or table join and or may comprise the entire final result of executing the query. In contrast to the buffer cache or a cache of data blocks the result cache does not cache entire data blocks as they are read from the database but rather result set data for individual queries. When the same query is received again by the DBMS the query result may be retrieved from the result cache without reaccessing the data blocks from either the buffer cache or database that are required by the query. According to techniques described further herein external data cache may be part of a result cache that also caches foreign data loaded from external data sources. The foreign data may be treated as result data in the result cache even though the foreign data may not be the final result of an executed query but rather data required to obtain the final result.

Foreign data residing in external data cache can be shared across different database queries to minimize redundant caching. is a chart illustrating example database queries and the resulting state of a result cache according to an embodiment. Although a result cache is illustrated in this embodiment other memory caches may also be used depending on the implementation.

Queries to represent different SQL queries received by database manager . Each of these queries points to a state of the result cache caused when the respective query is processed.

In an initial state the result cache is empty. Database manager receives query which references various columns of the external table SALES1995. These columns include the PROD ID column the CHANNEL ID column and the QUANTITY SOLD column. These columns do not initially reside in external data cache as the result cache is empty. Accordingly database manager extracts the foreign data from an external source and maps the foreign data to the appropriate column granules. PQ column granules are then added to the result cache for each of the PROD ID CHANNEL ID and QUANTITY SOLD columns. Database manager uses the foreign data stored in the result cache to evaluate query and generate the query result.

Database manager subsequently receives query which references the PROD ID and the CHANNEL ID columns. Database manager does not need to extract these columns again as they already reside in result cache. Database manager reuses the cached data for the PROD ID and CHANNEL ID columns to evaluate query and generate the query result. Accordingly these columns are shared by query and query even though these queries use these columns to generate different results. The QUANTITY SOLD column is not needed by query . However this column continues to reside in external data cache as long as there is sufficient storage space.

Query references the PROD ID and PROMO ID columns of the external table SALES1995. The PQ PROD ID column granule is reused but the PROMO ID column has not been previously extracted from the external data source. Therefore database manager extracts the foreign data loads the foreign data into the PQ PROMO ID column granule and stores this column granule in external data cache . The PQ CHANNEL ID and PQ QUANTITY SOLD column granules also continue to reside in external data cache but are not used in processing query .

SQL STATEMENT alters the location of the external source for the external table SALES1995. Therefore the PQ column granules that currently reside in external data cache for the external table SALES1995 are invalidated and removed from the cache. Database manager subsequently receives query which references the CHANNEL ID column. Because this column has been invalidated the foreign data for this column is extracted again from the external data source and the column is reloaded into external data cache .

In an embodiment query processing logic generates a query execution plan by adding a cache operator for every external table scan in the query execution plan. The cache operator checks for available external table columns in external data cache before performing the external table scan. If all external table columns needed are in the cache then the external table scan operation is skipped. Otherwise the external table scan operation is performed to extract the foreign data for the missing columns. The cache operator then causes these missing columns to be cached in external data cache .

In an embodiment the cache operator and the table scan operator are row sources and the underlying table scan row source fetches rows from the external data source in rowid order. This ensures that separately loaded columns have the same row ordering. The rowid order may be determined from the external table metadata as the external data source may not structure the foreign data into row format.

In an embodiment caching of foreign data may be enabled and disabled by a database user such as a database administrator. Control may be specified on a per external table basis or for particular views of an external table. Accordingly result caching may be enabled for only specific foreign data files and disabled for other data files in the same external data source. Similarly result caching may be enabled for some external data sources and disabled for others.

In an embodiment the database user enables result caching by indirectly annotating the external table. In order to annotate the external table the database user may use a RESULT CACHE database hint in DDL statements accessing external tables. Example statements include the CREATE and ALTER VIEW statements. Database manager determines whether an external table is annotated before performing the result caching process described above. When the annotations indicate that result caching is enabled database manager caches the foreign data and enables the cached data to be shared across different database queries.

Table 1 below illustrates database statements may be used to enable result caching for a particular table view that accesses the external table SALES EXTERNAL 

The cached columns or column granules can be managed by DBAs like any other result cache object. DBAs may track the cached columns and column granules using a view which will name each cached column unambiguously. Additionally all the cached columns may be stored in a separate namespace. In another embodiment DBAs may directly select the contents of a cached column or other result cache object.

In an embodiment columns are cached on demand and independent of other columns in the table. For example the PROD ID CHANNEL ID column and QUANTITY SOLD columns are loaded into external data cache as demanded by query and are loaded independently of other columns in the SALES1995 table. Thus foreign data for other columns such as the PROMO ID column is not loaded into external data cache in response to query .

In another embodiment a plurality of database servers load the foreign data for the same external table in parallel. When loading the table in parallel a server process waits for a column that it needs when another server process is loading it but does not wait if all the columns it needs are present and another server process is loading some other column of that external table.

In an embodiment columns with few distinct values relative to the number of rows are stored in an encoded form in external data cache . For these encoded columns the unique bit patterns are kept in a symbol table followed by a vector of indexes into that table. Encoding such columns reduces memory usage and allows for a greater number of objects to be cached which may improve performance. Encoding may also allow opportunities for more efficient query execution.

The encoding algorithm used may vary from implementation to implementation In an embodiment the encoding algorithm used provides in place decoding. This allows the column buffer pointers to directly point into the stored values. In another embodiment the encoding algorithm used to store encoded data in external data cache differs from the encoding algorithm used if any of the foreign system that originated the data.

In an embodiment the external data cache also caches statistics on the external table columns. The statistics may be determined by database manager as the foreign data is extracted from the external data source and mapped to the appropriate column granules.

For example database manager may count the total number of rows of an external table column as the foreign data are mapped to rows in the external table column. External data cache may store these statistics which may be accessed through a COUNT query expression. When a query requests such statistics the statistics do not need to be recomputed by reanalyzing the relevant column granules. Rather the result may be directly retrieved from external data cache .

In another example external data cache may store min max statistics. The min max statistics identify the minimum and maximum values within a column granule. These statistics may make it possible for certain queries to obviate scanning the column granule altogether.

In an embodiment predicates on the external tables are pushed into the external data cache service which in turn uses the cached predicates for efficient access where possible. For example CUST IN CORP A CORP B CORP C may be processed by converting the values into integers by looking them up in the per column symbol table and then scanning the fixed width column vector for the given integers.

Because database manager does not manage foreign data foreign data may be altered without permission from database manager . When foreign data is altered the cached data in external data cache may no longer be valid. In order to ensure data in external data cache is up to date invalidation logic determines when foreign data for a particular external table column granule changes and invalidates the appropriate column granules from external data cache when a change is detected. The manner in which changes are detected may vary from implementation to implementation.

In an embodiment a column granule is invalidated when a transaction has modified the definition of the external table or the view using that external table. For example invalidation logic invalidates all PQ column granules for the external table SALES1995 in response to receiving SQL statement .

In another embodiment invalidation logic performs a status checks on the external tables. For example whenever query processing logic requests a cached external table column granule from external data cache invalidation logic checks with external data source through the APIs provided in access driver whether the foreign data for that column granule has changed. If the foreign data has changed then the column granule is invalidated and reloaded into the external data cache .

In another embodiment the external data source comprises logic that notifies invalidation logic whenever foreign data changes. Invalidation logic receives information about which foreign data has changed and determines which cached items in the external data cache should be invalidated.

In another embodiment an expiration time is associated with external data cache objects. The expiration time specifies a time to live for each column granule cached in external data cache . When the time to live expires the corresponding external table column is invalidated i.e. marked as invalid or deleted from the cache .

In order to determine if foreign data has changed in an external data source timestamps of the data file from which the foreign data may be compared. For example invalidation logic may store a timestamp of the file when the column granule is first cached. When a subsequent query uses the column granule or the external data source sends a status update invalidation logic checks the timestamp of the underlying file to see if it has changed. If the timestamp is changed then the column is invalidated and reextracted from the external data source.

If foreign data is added to external data source without changing the preexisting foreign data invalidation logic does not invalidate any column granules according to an embodiment. Rather when a subsequent query is received the additional data is extracted and loaded into the external table column. The column granules for the referenced column that have already been cached continue to reside in their respective external data cache s .

As the external data cache does not have unlimited memory cache items are evicted to free up space for incoming items. In an embodiment each external table column granule is a cache object that moves up and down a least recently used LRU list independently with respect to other columns in that external table. The external table column granule that is least recently used is evicted from the cache and replaced with the most recently used column granule. Other cache eviction algorithms may also be used depending on the implementation. Examples include without limitation evicting cached items based on which item is the least frequently used.

When multiple column granules are stored at different nodes in a distributed database system certain column granules may become cold before other column granules in the same column. For example a first database server may evict a column granule of a particular external table from the first database server s external data cache while another database server maintains a column granule from the same external table in the second database server s external data cache.

In an embodiment when a valid column granule is selected for eviction from external data cache all of the memory blocks are released. The evicted column granule is not stored in database and will therefore be extracted again from the external data source the next time it is required by a query.

In an alternative embodiment the result is written to a swap file specified at database instance startup time. When the result is evicted then external data cache release all but a first block or a header block from memory for that column granule. The header block stores a disk pointer corresponding to an offset in the swap file where the column granule was written. A subsequent request for that swapped out column granule causes it to be loaded into external data cache using the disk pointer. Thus step may comprise extracting the foreign data from the swap file instead of the external source when the foreign data is reloaded into the external data cache. To reduce the amount of input output IO overhead the column granule may be compressed before writing it to the swap file. The swap file may be used not only for column granules but also for all other cache objects such as SQL and PL SQL results. The swap file may be implemented as a swap table or may be written in any other format depending on the implementation.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk optical disk or solid state drive is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operate in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical disks magnetic disks or solid state drives such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

