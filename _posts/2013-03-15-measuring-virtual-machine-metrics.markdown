---

title: Measuring virtual machine metrics
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for measuring virtual machine metrics. In one aspect, a method includes initializing a virtual machine, the virtual machine being associated with virtual hardware comprising a virtual metrics device, the virtual metrics device being configured to report values of a virtual machine metric that measures the performance of the virtual machine; receiving data identifying the virtual machine metric and a virtual machine memory address to which the virtual machine writes values of the virtual machine metric; reading one or more values of the virtual machine metric from the virtual machine memory address; and generating a report based on the one or more metric values.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146763&OS=09146763&RS=09146763
owner: Google Inc.
number: 09146763
owner_city: Mountain View
owner_country: US
publication_date: 20130315
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Patent Application No. 61 616 857 filed Mar. 28 2012 entitled Measuring Virtual Machine Metrics which is incorporated by reference herein in its entirety.

Cloud computing is network based computing in which collections of servers housed in data centers or server farms provide computational resources and data storage as needed to remote end users. Some cloud computing services provide access to software applications such as word processors and other commonly used applications to end users who interface with the applications through web browsers or other client side software. Users electronic data files are usually stored in the server farm rather than on the users computing devices. Maintaining software applications and user data on a server farm simplifies management of end user computing devices. Some cloud computing services allow end users to execute software applications in virtual machines. In a public cloud computing environment multiple users are able to launch virtual machines VMs and each VM launched by a user is included in a cluster of other VMs launched by the user.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of initializing a virtual machine the virtual machine being associated with virtual hardware comprising a virtual metrics device the virtual metrics device being configured to report values of a virtual machine metric that measures the performance of the virtual machine receiving data identifying the virtual machine metric and a virtual machine memory address to which the virtual machine writes values of the virtual machine metric reading one or more values of the virtual machine metric from the virtual machine memory address and generating a report based on the one or more metric values.

Other embodiments of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

These and other embodiments can each optionally include one or more of the following features. Reading one or more values of the virtual machine metric can include mapping the virtual machine memory address to a host memory address. The virtual machine metric can be a triggered metric and the virtual metrics device can be further configured to indicate when reported values of the virtual machine metric are valid.

The virtual machine metric can be a non triggered metric. Reading the one or more values of the virtual machine metric can be performed without further interaction with the virtual machine. The virtual machine can be associated with a virtual metrics driver wherein the virtual metrics driver is configured to identify one or more virtual machine metrics available from the virtual metrics device and identify a respective virtual machine memory address to which values of each of the one or more virtual machine metrics are written.

The virtual metrics device can be configured to expose a name of each of the one or more virtual machine metrics and the respective virtual machine memory address to which values of each of the one or more virtual machine metrics are written. The method can further include providing a high level configuration to the virtual machine wherein the high level configuration identifies the virtual machine metric and configures a component of the virtual machine to generate values of the virtual machine metric.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Virtual machine metrics that measure the performance of a virtual machine can be measured by the underlying host machine in a low latency manner without interrupting the operation of the virtual machine. The metrics that can be measured are configurable and can be measured at varying levels of granularity. For example the scope of the metrics being measured and the frequency at which the metrics are measured can be changed. Additionally metrics can be measured even while the guest operating system of the virtual machine is otherwise not responsive. For example metric values can be measured when the guest operating system has crashed is hanging or when there are network issues. Metric values read during otherwise non responsive states can provide useful information in identifying the cause of the problem e.g. identifying the event that caused the virtual machine to enter the non responsive state.

Each host machine executes a host operating system or other software that virtualizes physical hardware e.g. the underlying host machine hardware or other hardware and manages concurrent execution of one or more virtual machines. For example the host operating system is managing virtual machine VM and VM while host OS is managing a single VM . Each VM includes a simulated version of the underlying host machine hardware or a different computer architecture. The simulated version of hardware is referred to as virtual hardware e.g. virtual hardware and . Software that is executed by the virtual hardware is referred to as guest software. In some implementations guest software cannot determine if it is being executed by virtual hardware or by a physical host machine. If guest software executing in a VM or the VM itself malfunctions or aborts other VMs executing on the host machine will not be affected. A host machine s microprocessor s can include processor level mechanisms to enable virtual hardware to execute software applications efficiently by allowing guest software instructions to be executed directly on the host machine s microprocessor without requiring code rewriting recompilation or instruction emulation.

Each VM e.g. VMs and is allocated a set of virtual memory pages from the virtual memory of the underlying host operating system. Each VM is also allocated virtual disk blocks from one or more virtual disk drives for use by the guest software executing on the VM. The term virtual disk drive as used herein is a broad term encompassing its plain and ordinary meaning including but not limited to a simulated version of a physical disk drive. For example host operating system allocates memory pages and disk blocks to VM and VM and host operating system does the same for VM . In some implementations a given VM cannot access the virtual memory pages assigned to other VMs. For example VM cannot access memory pages that have been assigned to VM . A virtual disk drive can be persisted across VM restarts. Virtual disk blocks are allocated on physical disk drives coupled to host machines or available over the internal network for example.

In addition to virtual memory and virtual disk resources VMs can be allocated network addresses through which their respective guest software can communicate with other processes reachable through the internal network or the Internet . The network addresses can be for example Internet Protocol IP addresses. In some implementations each VM is allocated one or more unique Internet Protocol IP version 4 or version 6 addresses one or more User Datagram Protocol UDP port numbers or both. Other address schemes are possible.

A VM s guest software can include a guest operating system e.g. guest operating systems and which is software that controls the execution of respective guest software applications e.g. guest applications and within the VM and provides services to those applications. For example a guest operating system could be a variation of the UNIX operating system. Other operating systems are possible. Each VM can execute the same guest operating system or different guest operating systems. In further implementations a VM does not require a guest operating system in order to execute guest software applications. A guest operating system s access to resources such as networks and virtual disk storage is controlled by the underlying host operating system other cluster management software executing on a separate computing device or both.

By way of illustration and with reference to virtual machine when the guest application or guest operating system attempts to perform an input output operation on a virtual disk initiate network communication or perform a privileged operation for example the virtual hardware is interrupted so that the host operating system can perform the action on behalf of the virtual machine . The host operating system can perform these actions with a process that executes in kernel process space user process space or both.

The kernel process space is virtual memory reserved for the host operating system s kernel which can include kernel extensions and device drivers for instance. Similarly the kernel process space is virtual memory reserved for the host operating system s kernel

The kernel process space has elevated privileges sometimes referred to as supervisor mode that is the kernel can perform certain privileged operations that are off limits to processes running in the user process space . Examples of privileged operations include access to different address spaces access to special functional processor units in the host machine such as memory management units and so on. The user process space is a separate portion of virtual memory reserved for user mode processes. User mode processes cannot perform privileged operations directly.

In various implementations a portion of VM network communication functionality is implemented in a communication process e.g. communication process or communication process . In some implementations the communication process executes in the user process space e.g. user process space or user process space of a host operating system e.g. host operating system or host operating system . In other implementations the communication process can execute in the kernel process space e.g. kernel process space or kernel process space of the host operating system. There can be a single communication process for all VMs executing on a host machine or multiple communication processes one for each VM executing on a host machine. In yet further implementations some portion of the communication process executes in the user process space and another portion executes in the kernel process space. For example the communications process receives packets sent by VM or VM and forwards the packets to the destination identified in the packet.

In various implementations it may be desirable for a system administrator or other entity managing the operation of host machine and host machine to monitor the performance of virtual machines executing on the host machines. In these cases when a virtual machine whose performance is to be monitored is created by a user a high level configuration is distributed to the newly created virtual machine. The configuration identifies names of virtual machine metrics that the guest software of the virtual machine is configured to measure and configures a component of the virtual machine to generate values of each identified virtual machine metric. This configuration can be static so that the named metrics cannot be altered after the virtual machine is created or dynamic so that the named metrics can be modified after the virtual machine is created.

The virtual machine metrics measure the performance of the virtual machine and can include triggered metrics non triggered metrics or both. A triggered metric is a metric whose value is only valid when the entity that is reporting the metric values indicates that the metric is valid. Examples of triggered metrics can include a metric that indicates whether the virtual machine has booted e.g. finished initializing a metric that indicates whether the virtual machine has run out of memory a metric that indicates when a certain task has been completed by the virtual machine and so on. A non triggered or passive metric is a metric whose value is always valid. Examples of non triggered metrics can include the amount of free memory the amount of dirty memory the average load of the guest operating system the amount of memory being used for a particular task how many times a certain event has occurred and so on.

The virtual hardware of the virtual machine whose performance is to be monitored can include a virtual metrics device e.g. virtual metrics device . The virtual metrics device can be e.g. a virtual Peripheral Component Interconnect PCI card. The virtual metrics device is configured to collect values of one or more of the metrics that are identified by the configuration. The metric values that the virtual metrics device is configured to collect can be specified by the system administrator or other entity managing the operation of the host machines. For example if the guest operating system maintains a counter of the amount of free memory available to the virtual machine a system administrator may configure the virtual metrics device to collect values of the amount of free memory and report those values to the host machine.

The virtual machine whose performance is to be monitored also includes a virtual metrics device driver e.g. virtual metrics device driver that communicates with the virtual metrics device. The virtual metrics device driver can be included in the virtual machine s guest software e.g. as part of the guest operating system. The virtual metrics device driver communicates with the virtual metrics device to provide information identifying the metrics that are available from the virtual metrics device to a metrics manager e.g. metrics manager . The metrics manager can be executed by the host machine as part of the kernel process space or the user process space . Alternatively the metrics manager can execute on a separate data processing apparatus. The metrics manager can receive information identifying metrics and determine memory addresses where values of those metrics are written. The metrics manager can then read the metric values from the memory addresses and e.g. generate a report based on the values.

The virtual metrics device driver then binds each identified metric to a respective virtual machine memory address in the virtual metrics device . That is the virtual metrics device driver provides information identifying a respective virtual memory address from which values of each identified metric can be read. The virtual machine memory address can be an address in the memory address space of the virtual machine.

For example during initialization of the virtual machine other components of the virtual machine e.g. other processes executing in the guest operating system of the virtual machine provide data identifying the metrics that they have been configured to collect and the virtual memory addresses to which they are writing values of those metrics to the virtual metrics device driver . The virtual metrics device driver can determine whether any of the data identifies a metric that the virtual metrics device has been configured to collect. For each of those metrics the virtual metrics device driver provides data identifying the virtual memory address to which the metric is being written to the virtual metrics device .

The virtual metrics device provides data that identifies the names of the metrics and the virtual machine memory address corresponding to each metric to a metrics manager . The metrics manager can be e.g. a process that executes in the kernel space of the underlying host machine. Alternatively the metrics manager can execute in user space or on a separate computing device.

As data is written to the virtual memory addresses bound in the virtual metrics device the metrics manager reads metric values from those memory addresses. For example the metrics manager can include or be able to communicate with a direct memory access DMA engine that once the data that identifies a virtual machine metric and the corresponding virtual machine memory address for the metric has been received can translate the virtual machine memory address to a host memory address. For example the DMA engine can map the virtual machine memory address to a host memory address by consulting a pre determined mapping of virtual machine memory addresses to host memory addresses. The host memory address can be e.g. a virtual memory address or a physical memory address in the address space of the underlying host machine. The DMA engine can then associate the host machine memory address with the virtual machine memory address. The DMA engine can monitor the host machine memory address and when data is written to that memory address the DMA engine can identify the written data as a value of the corresponding metric. Alternatively the DMA engine can read from the host machine memory addresses at specified time intervals. Thus once the metrics manager receives the data identifying the names of the metrics and the virtual machine memory addresses for the metrics the metrics manager can read the values of non triggered metrics without any further interaction with the virtual machine. If one or more of the identified virtual machine metrics is a triggered metric when a valid value is written to the virtual machine memory address for the triggered metric the metrics manager can receive data specifying that the value of the metric value is valid and can be read from the corresponding memory address.

The metrics manager can then store the metric values and generate a report based on the values e.g. at predetermined time intervals or in response to a user request. The values can also be used to generate and transmit an alert to an entity monitoring the performance of the virtual machine. For example an alert can be generated whenever a value of a particular metric is below a threshold value. Additionally instead of or in addition to generating a report or an alert the metric values can be used to adjust the performance of the virtual machine. For example based on the metric values the amount of memory or the amount of processing power allocated to the virtual machine can be adjusted or the virtual machine can be migrated to a different host machine. In some implementations when values of one or more metrics meet specified criteria the performance adjustments to the virtual machine can be made automatically. For example if the value of an amount of free memory metric reported by the virtual machine is below a threshold value over a specified period of time the amount of memory allocated to the virtual machine can automatically be increased.

The virtual machine identifies available metrics. For example the virtual machine s virtual hardware can include a virtual metrics device that has been configured to collect metric values based on data generated by e.g. the virtual machine s guest software. The metrics that the virtual metrics device has been configured to collect can be identified during initialization of the virtual machine.

The virtual machine binds each metric to a virtual memory address in the virtual metrics device. For example a virtual metrics device driver included in the guest operating system of the virtual machine can receive information from components of the virtual machine that have been configured to generate values of virtual machine metrics. The information can identify the virtual machine metric and the virtual machine memory address to which values of the metric are being written. The virtual machine device driver can for each metric that the virtual metrics device has been configured to collect bind the virtual memory address for the metric to the virtual metrics device.

The virtual machine exposes data identifying the available metrics and the memory addresses to the host. For example the data can be formatted in accordance with an application programming interface API that has previously been made available to the host.

The virtual machine writes metric values to the corresponding virtual memory addresses. That is the components of the virtual machine that have been configured to generate the metric values write the values to the virtual memory addresses that they identified to the virtual metrics device driver.

The metrics manager identifies a virtual machine metric and a virtual machine memory address to which values of the metric are being written. For example the metrics manager can receive data from a virtual metrics device driver executing as part of the guest software of the virtual machine. The metrics manager can process the data in accordance with an application programming interface API in order to identify the virtual machine metric and the virtual machine memory address for the metric.

The metrics manager determines the host memory address that corresponds to the virtual machine memory address. For example the metrics manager can determine the appropriate host memory address based on pre determined associations between virtual machine memory addresses and host machine memory addresses.

The metrics manager reads metric values from the corresponding host memory address. For example the metrics manager can monitor writes to the host memory address and store the data being written to the memory address as values of the virtual machine metric.

The metrics manager generates a report based on the metric values. For example the report can include data identifying values of the metric over a specified period of time.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. Additionally the processor may be implemented using any of a number of architectures. For example the processor may be a CISC Complex Instruction Set Computers processor a RISC Reduced Instruction Set Computer processor or a MISC Minimal Instruction Set Computer processor. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT Thin Film Transistor Liquid Crystal Display display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor that may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN peer to peer networks having ad hoc or static members grid computing infrastructures and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few implementations have been described in detail above other modifications are possible. Moreover other mechanisms for virtual machine name resolution may be used. In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. Other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

