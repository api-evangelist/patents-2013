---

title: Privacy leak detection in .NET framework
abstract: A binary application suitable for the .Net framework is disassembled into human readable code. Or, CIL or MSIL code is obtained. The methods are put into a representation indicating which methods of the code call other methods. A source method call chain having a source API and a sink method call chain having a sink API are discerned from the representation. APIs are put into the same format as the methods to allow matching. A method in common between the two call chains indicates that a privacy leak exists. The application is downloaded from a remote server to a computing device where the analysis occurs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09208322&OS=09208322&RS=09208322
owner: Trend Micro Inc.
number: 09208322
owner_city: Tokyo
owner_country: JP
publication_date: 20130916
---
The present invention relates generally to detection of a privacy leak from a software application on mobile device. More specifically the present invention relates to privacy leak detection of applications used within the .NET framework on Microsoft s Windows Phone or other mobile device using Microsoft s windows operation system.

Malicious software or malware may affect a mobile device in many different ways. One current technique that is used is to gather sensitive or private information from a user s mobile device and then send that information over a communications link to an outside entity. Thus the user s sensitive or private information which he or she thinks is safe upon his or her private mobile device is sent to an entity that may misuse that information. Examples of information that may be sent include the user s geographic location passwords and user names financial information credit card information contact information of others etc.

The gathering of this sensitive or private information is not necessarily limited to malicious software created by unscrupulous persons. With the growing popularity of mobile devices and the thousands upon thousands of mobile applications available for download over the Internet it is possible that and instances have occurred in which well meaning writers of these applications have programmed these applications to gather sensitive or private information and send it to a remote location. In addition there have been instances in which well known corporations have distributed software applications that collect user information from a computing device and send that information to a remote location.

Against this backdrop of potential privacy leakage the .NET framework is becoming a very important infrastructure used with new software applications. As is known in the art this software framework developed by Microsoft Corporation runs primarily on Microsoft operating systems but can run on other platforms as well. Software applications that are written for this .NET framework execute within a software environment known as the Common Language Runtime CLR which is an application virtual machine. The .NET framework includes a class library and the CLR. Typically programmers produce a software application by combining their own source code with the .NET framework in other libraries.

As this framework is becoming more popular and as more and more software applications are being written especially by third parties and for mobile devices it is desirable to have techniques that will detect leakage of sensitive and private information from within this framework.

To achieve the foregoing and in accordance with the purpose of the present invention a technique is disclosed that detects privacy leaks of software applications used within the .Net framework.

In a first embodiment a binary application suitable for execution within the framework is obtained and this binary application is disassembled into human readable code. The code may be CIL code or MSIL code. The methods of the code are put into a representation indicating which methods of the code call other methods of the code. This representation may be a method call graph. From the graph two types of method call chains may be discerned a source method call chain having a source API and a sink method call chain having a sink API. If there is a method in common between these two call chains then an alert is generated indicating that a privacy leak exists in the application.

In a second embodiment a binary application suitable for execution within the framework is obtained and this binary application is disassembled into human readable code. The methods of the code are put into a representation indicating which methods of the call other methods of the code. This representation may be a method call graph. From the graph two types of method call chains may be discerned a source method call chain having a source API and a sink method call chain having a sink API. If there is no method in common between these two call chains then a message is generated indicating that no privacy leak exists in the application.

In a third embodiment a software application suitable for execution within the framework is obtained the software application is in CIL code. The methods are formatted in a standard format and the methods of the code are put into a data structure indicating which methods of the call other methods of the code. Potential application programming interfaces APIs that might be called by the methods are also formatted in the same standard format. A source method call chain is discerned from the data structure that has a method matching one of the APIs and a sink method call chain is also discerned that has a method matching another one of the APIs. If the call chains have a method in common then a privacy leak alert is generated.

Software application is any software application written for use within the .NET framework. As is known in the art this framework is engineered to be platform agnostic and cross platform implementations are available for operating systems other than Microsoft operating systems. The framework is available for use upon not only desktop computers but also upon other computing devices such as mobile telephones and tablet computers. For example two versions of the framework are available for mobile or embedded device use and a reduced version of the framework the .NET compact framework is available on mobile devices. The .NET Micro Framework is intended for resource constrained devices. The software environment Mono is an implementation of the CLI and the .NET Base Class Library. The software environment Portable.NET also provides an implementation of the CLI. CrossNet is another implementation of the CLI. The term .NET framework or framework is meant to encompass all of these above described frameworks software and environments.

The Common Language Runtime CLR is the execution engine of the .NET framework and the Common Language Infrastructure CLI defines a specification for programming languages. Within this architecture the Common Intermediate Language CIL is the lowest level human readable programming language defined by the CLI specification which is executed within the CLR. Programs written for use within the framework are translated into the CIL which may then be assembled into object code for execution. Formerly the CIL was known as the Microsoft Intermediate Language MSIL .

Software applications distributed by server are typically distributed as binary code and are executed by the CLR on the target computing device. For example an application can be distributed as a compressed package which includes the executable binary code the application s signature resources manifest file and so on. In other situations it is also possible for software application to be distributed as a higher level language or as CIL code. Once software application has been downloaded to computing device it is ready for execution or further compilation . Computing device may be any suitable computing device such as a desktop computer mobile telephone tablet computer or other.

Advantageously the present invention realizes that this binary code may then be converted back into CIL code using a disassembler and that the CIL code may then be further analyzed to detect privacy leaks. Accordingly in step a disassembler is used to disassemble application into a CIL representation or into an MSIL representation . Any suitable disassembler may be used including off the shelf software or custom code. Off the shelf software includes an open source project named Mono available at http www.mono project.com Main Page and a Microsoft dissembler named ildasm.exe which is included in the Visual Studio SDK. In one embodiment a custom disassembler written in the Java language and using Apache and Java libraries may be used and makes use of the Common Language Infrastructure Standard ECMA 335 sixth edition June 2012 . This disassembler advantageously only needs to disassemble the code needed in the below steps.

In one particular embodiment it is not necessary to disassemble the binary application into a complete CIL representation. Only instructions need be represented and in particular only the method calls need be expanded from binary code into a CIL representation. Next in step all of the relevant instructions that have been disassembled into CIL are collected.

Information provides additional details concerning the overall method such as the method offset in binary and its size. Each method or class is shown along with its instructions in regions . Within each region the instructions are organized as follows. Column provides the label for each instruction s offset for a particular method such as offset IL000A for method column shows the actual operation code Op Code for each instruction and column provides the various operands for each instruction.

In this example the overall method includes two instructions the method includes seven instructions and the method includes one instruction. Class names and include respectively three two and two instructions. In this fashion the classes and methods of a particular application can be collected organized and made ready for future analysis. Next in step a method call graph may be built using the methods classes and instruction information shown for example in . Any of a variety of techniques may be used to build the method call graph.

For example a linked list data structure may be used to represent method calls within an application a relational database may be used etc. In one particular embodiment a class is defined named GraphNode which is used to describe each node in the method call graph. The variables used to identify such a node may be defined as follows 

Each node will record its parent set and its children set. For example node E has a parent set which is D and node B has a children set which is C. These sets may be defined as follows 

Thus the method call graph may be built with a set of nodes defined by GraphNode where each node records not only its own identification but also its own parent and children sets for example as follows 

In this fashion a representation of the methods of the original software application is formed which describes how the methods call one another within the application. And as explained above this representation may take the form of a method call graph or may use any other data structure to describe the relationship between the methods. Once the calling relationship of the methods of the application have been represented in some form it is then possible to analyze which methods are used to get user information source APIs which methods are used to send user information sink APIs . For example a method call chain A D E may be defined and a method call chain A B C may also be defined.

Because the present invention is concerned with collection of private or sensitive user information on a computing device and the improper dissemination of that information it is useful to enumerate the source APIs and the sink APIs use within the .Net framework. In one particular embodiment APIs are enumerated that are used on computing devices that make use of a Microsoft operating system assuming that software applications that make use of this operating system are targeted .

Accordingly illustrates a collection of source and sink APIs used within the .Net Framework on computing devices that use a Microsoft operating system. As shown a plurality of source APIs are shown in region while a plurality of sink APIs are shown in region . In one embodiment these APIs have been formatted according to the formatting used in so that these APIs may be more easily compared to the methods used in the disassembled code of .

These APIs may be further organized as follows. Within region there are a number of APIs relating to determining the location of the computing device an API relating to determining contact information on the computing device an API relating to determining appointment information and an API relating to finding SMS information on the computing device. Similarly region shows a number of APIs used to send information from the computing device using the HTTP protocol. Of course depending upon the particular computing device and the operating system that it implements many other types of source APIs and sink APIs may be identified. Identification of various source and sink APIs that may be in use upon a particular computing device and within an application will be useful to determine which APIs have been used within software application and to determine if these APIs are present within the method call graph built in step .

The source and sink API list depends on the Microsoft development SDK for example . If Microsoft publishes or updates the SDK the list will be changed adding new APIs or removing old APIs. Thus in this embodiment represents all of APIs which might be found based on the current Microsoft development SDK that is used.

Next in step two kinds of method call chains are collected using the method call graph. Using the example of a depth first search may be used to traverse the method call graph in a reverse fashion in order to determine a method call chains. For example one such call chain may be E D A and another method call chain may be C B A. Of course other techniques may be used to traverse a method call graph or to traverse whichever data representation is being used .

And it is not strictly necessary that the method call graph be traversed in reverse fashion. For example a forward search may be used resulting in call chains A D E and A B C. Assuming that a reverse traversal is used the leaf nodes of the method call graph for example nodes C and E are searched to determine whether or not any of these leaf nodes represent one of the source or sink APIs of . If so this means that a method call chain exists where the ultimate goal of the method call chain appears to be either collecting user information from the computing device or sending user information from the computing device.

Two types of method call chains are collected. Step collects so called source methods. These are methods which retrieve privacy information from the computing device including device information and user information. For example device privacy information includes the location of the device applications executing or present on the device the type of the device or any unique identifiers associated with the device such as its MAC address. User privacy information includes user names passwords account numbers credit card information contact lists and e mail addresses. In general any private or sensitive information includes information that a reasonable user would not want to be divulged. The above privacy information may be stored anywhere within the computing device such as on a hard disk in non volatile memory in memory in a cache etc. These source methods may be any suitable method that collects retrieves or obtains this privacy information from its location within the computing device.

Step collects so called sink methods. These are methods which send the privacy information from the computing device to any location outside of the computing device. For example one of these methods may attempt to take any of the above privacy information and transmit it over the Internet to a remote device transmit it via an SMS message transmit it via a wired or wireless connection etc.

Once the two or more method call chains have been determined a comparison is performed in step in order to determine whether at any point in these method call chains there is a method in common. In this simple example it is apparent that both method call chains begin with same the method PhoneAppTester. Using the example of it will be apparent that the two method call chains C B A and E D A both have a method A in common. It is not strictly necessary that the method call chains have their first calling method in common. For example it is entirely possible that within two lengthy method call chains that there is an intermediate node that is in common between the two call chains. Even though the first calling method of each call chain may not be in common there still exists a single method which is invoking a source API and a sink API on the computing device thus indicating that this method and the overall application is attempting to send private information from the user s device.

Accordingly once it is determined in step that there is a method or node in common between the two method call chains then in step a determination is made that a privacy leak exists in the application. If no node is found in common then in step a determination is made that no privacy leak exists. If a privacy leak exists then further steps may be taken such as displaying a warning on the computing device disabling the software application sending a message or report to an e mail address or other location invoking antivirus software or other software to remedy the problem found within the application etc.

CPU is also coupled to a variety of input output devices such as display keyboard mouse and speakers . In general an input output device may be any of video displays track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styluses voice or handwriting recognizers biometrics readers or other computers. CPU optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface it is contemplated that the CPU might receive information from the network or might output information to the network in the course of performing the above described method steps. Furthermore method embodiments of the present invention may execute solely upon CPU or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing.

In addition embodiments of the present invention further relate to computer storage products with a computer readable medium that have computer code thereon for performing various computer implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs and holographic devices magneto optical media such as floptical disks and hardware devices that are specially configured to store and execute program code such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Therefore the described embodiments should be taken as illustrative and not restrictive and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents.

