---

title: Transparent data service suitable for modifying data storage capabilities in applications
abstract: A method includes monitoring, on a computing device, data events corresponding to manipulation of data by an application. The monitoring is performed by a data library service that is embedded in the application. The method includes, in response to the monitoring indicating first data on the computing device is modified by the application, synchronizing, by the computing device under control at least in part of the data library service, second data stored on one or more storage providers in a network with the first data modified by the application and stored on the computing device. Apparatus and computer program products are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122734&OS=09122734&RS=09122734
owner: International Business Machines Corporation
number: 09122734
owner_city: Armonk
owner_country: US
publication_date: 20130916
---
This patent application is a continuation of U.S. patent application Ser. No. 13 723 934 filed on Dec. 21 2012 which is incorporated herein by reference in its entirety to provide continuity of disclosure.

This invention relates generally to data storage by applications executing on electronic computing systems and more specifically relates to remote data storage by applications.

This section is intended to provide a background or context to the invention disclosed below. The description herein may include concepts that could be pursued but are not necessarily ones that have been previously conceived implemented or described. Therefore unless otherwise explicitly indicated herein what is described in this section is not prior art to the description in this application and is not admitted to be prior art by inclusion in this section. Acronyms that appear in the text or drawings are defined below prior to the claims.

Many applications rely on data that is stored remotely that is stored off the computing device on which the application resides. In fact dozens of network based storage service providers have appeared that can offer large amounts of network based storage fairly inexpensively. They offer high availability and have had little or no downtime in their service thus far. Examples include Apple s iCloud Amazon S3 Google Drive Microsoft Skydrive Dropbox.com Box.net and a raft of other providers that have transformed network storage into a commodity. These storage services are attractive for an application developer primarily because of cost. The developer does not need to manage a private storage infrastructure and can pay only for storage consumed rather than peak provisioning. These benefits are not just recognized by developers as enterprises are now outsourcing many traditional IT services to cloud based providers as well. This trend is likely to continue but enterprises will have more thoughtful policies as to what and how certain enterprise data can be stored on an external storage provider.

The following summary is merely intended to be exemplary. The summary is not intended to limit the scope of the claims.

In an example a method is disclosed that includes monitoring on a computing device data events corresponding to manipulation of data by an application. The monitoring is performed by a data library service that is embedded in the application. The method includes in response to the monitoring indicating first data on the computing device is modified by the application synchronizing by the computing device under control at least in part of the data library service second data stored on one or more storage providers in a network with the first data modified by the application and stored on the computing device.

In another example an apparatus is disclosed that includes one or more memories comprising computer readable code and one or more processors. The one or more processors are configured in response to executing the computer readable code to cause the computing device to perform monitoring on a computing device data events corresponding to manipulation of data by an application the monitoring performed by a data library service that is embedded in the application and in response to the monitoring indicating first data on the computing device is modified by the application synchronizing by the computing device under control at least in part of the data library service second data stored on one or more storage providers in a network with the first data modified by the application and stored on the computing device.

In another example an apparatus comprises means for monitoring on a computing device data events corresponding to manipulation of data by an application the monitoring performed by a data library service that is embedded in the application and means responsive to the monitoring indicating first data on the computing device is modified by the application for synchronizing by the computing device under control at least in part of the data library service second data stored on one or more storage providers in a network with the first data modified by the application and stored on the computing device.

An additional example is a program product that includes a computer readable storage medium comprising computer readable code to cause a computer to perform the following code for monitoring on a computing device data events corresponding to manipulation of data by an application the monitoring performed by a data library service that is embedded in the application and code in response to the monitoring indicating first data on the computing device is modified by the application for synchronizing by the computing device under control at least in part of the data library service second data stored on one or more storage providers in a network with the first data modified by the application and stored on the computing device.

As stated above while there are many benefits to using cloud storage services there are many complexities. For instance developers have to evaluate cost and feature sets of various storage providers and once the developer chooses one provider changing storage providers can be costly. Code will have to be rewritten as no two storage providers share the same interface and the developer will have to compensate for differences in the feature sets between two providers. Enterprise developers also must ensure that their application follows storage policies. For example all data may have to be encrypted before the data is stored in the cloud. The term cloud has many connotations but in this case refers generally to a network providing on demand data storage. There are also optimizations to consider most devices run on metered networks and data transfers may incur significant costs.

This potentially means that every time a new storage provider is used the enterprise has to reevaluate whether the storage feature set can natively support enterprise policies. Furthermore enterprise developers may have to rewrite applications to interface correctly with the new storage provider especially if the storage feature set does not natively support enterprise policies or supports different enterprise policies as compared to the previous storage provider.

By contrast exemplary embodiments herein introduce the concept of a data library service which through an instrumentation process in an exemplary embodiment is embedded into application code and then deployed with the application to a client. The data library service activates when the application launches and runs in the background.

Referring to this figure is an overview of a transparent service which includes a client side component labeled Data Library for a data library service and an optional server side component labeled Mediator Server . The data library service is implemented on a computing device . The computing device also comprises one or more memories one or more processors one or more I O interfaces and one or more wired or wireless network interfaces and in this example a display . This example provides an application a platform data storage and the data library service as computer readable program code that is executable by the one or more processors to cause the computing device to perform one or more of the operations described herein. In another example the operations may also be performed in part or completely by circuitry that implements logic to carry out the operations. The circuitry may be implemented as part of the one or more processor s . The processors may be any electronic circuit such as a digital signal processor application specific integrated circuit programmable logic and or single core or multi core general purpose processors. The memories may comprise non volatile and or volatile RAM cache memory NAND based flash memory and or read only memory. This example further comprises a storage system in memories which uses a non volatile typically large size relative to other memories memory. Depending on implementation memory may include removable or non removable non volatile memory. The display may be a touchscreen flatscreen monitor television projector as examples. The one or more I O interfaces may include interfaces through which a user may interact with the computing device . The network interfaces may be wired or wireless and may implement a number of protocols such as cellular or local area network protocols. The elements in computing device may be interconnected through any technology such as buses traces on a board interconnects on semiconductors and the like.

The server computer system comprises one or more memories one or more processors and one more network interfaces . These elements are similar to their corresponding elements in computing device . The one or more memories in this example include the media server which comprises computer readable code that is executable by the one or more processors to cause the server computer system to perform one or more of the operations described herein. In another example the operations may also be performed in part or completely by circuitry that implements logic to carry out the operations. The circuitry may be implemented as part of the one or more processor s .

The computing device communicates through a network e.g. the Internet a local area network with the cloud storage providers A and B each of which has a corresponding storage system and respectively.

The client side component the data library service uses the native API of the platform data storage to monitor data events caused by the host application. The host application does not interact with the data library service but rather uses the native platform API to register for events. Most modem platforms include such an API to monitor events related to creating reading updating and deleting data . It is assumed herein that the data is stored in the storage system but the data may be stored anywhere in the memories . The figure shows the data library service interacting via two links with two different cloud storage providers respectively as well as an optional mediator server . The cloud is a network of interconnected computers and cloud storage is a model of networked online storage where data is stored on one or more virtual servers in this case cloud storage providers .

In an exemplary embodiment the data library service treats local platform storage e.g. storage system as a large cache and performs incremental backups and restores of data to one or more cloud storage providers . A strategy the data library service employs to perform this duty is dictated by how the data library service is configured. For example the data library service may interact with only one storage provider to perform all operations in one configuration but can be re configured to interact with two storage providers in another configuration. As just one example of why multiple storage providers might be advantageous the data library service can be configured to mirror data as indicated by mirror between storage provider A and storage provider B so the data is stored redundantly that is a copy of data is stored on each of the providers as data where data is the same as data or the data library service can be configured to split the data into mutually exclusive sets of data stored and then partitioned on both providers as indicated by stripe .

Also in is an optional mediator server . If configured so the data library service can communicate with the mediator server to send metadata about the operations of the media server and receive new configurations and commands. In an exemplary embodiment the mediator server provides more ample storage and computation relative to the storage in storage system and the computing power in the processor s for performing data related analytics and can act as an aggregator for many clients with instantiations of the data library service . From analytics the mediator server can keep track of where data is located and maintain a version history of different replicas of the same data. The mediator can be an important part of an exemplary system but the mediator server is optional. The exemplary library service can run completely on the client side. The purposes of the mediator server include but are not limited to one or more of the following 

1. The mediator server may include an administrative component for configuring data library service instances and setting up communication channels e.g. an implementation might require the use of an MQTT broker that needs to be started somehow .

2. The mediator server may be a location for collecting and storing information i.e. provenance about data events occurring across instances of the data library.

3. The mediator server may include a platform for running analytics on the information collected for item above to help optimize the overall operation of data libraries services .

Specifically the data library service may be responsible for one or more of the following exemplary and non limiting functions 

3. Comparing the data in the local storage e.g. the storage system with that stored in the cloud on one of the storage systems 

6. Performing full backups and restores of data between the client i.e. computing device and data the cloud 

8. Optionally the data library service interacts with a mediator server to upload an interaction log receive new configuration data and receive commands to perform certain data related actions. The mediator server acts as an aggregator for metadata from many clients and can be used for analytics.

Concerning backups and restores backups and restores are something a user typically initiates through the application . These differ from the more generic data synchronization performed in exemplary embodiments which happens automatically in that backup and restore have a notion of versions not present in normal synchronization. In other words a user should be able to restore data from a specific version number. The instant monitoring of data events is more for the synchronization case where it is ensured that all replicas of the data are the same across devices. In exemplary embodiments there is no notion of version number other than the most recent version. Version numbers and versions of data are not excluded and could be added if desired although adding versions will increase complexity of the system.

Once the data library service is embedded into the program code for the application the data library service may be configured block for operation. In an example the configuration is performed through the creation e.g. by an administrator of an enterprise of a configuration file . This configuration file is read by the data library service when the data library service launches to set operation parameters e.g. details about what backend storage the service should use see indication of the backend storage to be used whether or not security features should be turned on see indication turn on off security features and the like. The configuration comprises in an example two main settings storage provider settings and replication settings. Storage provider settings include authentication information for different storage providers as well as any specific settings required by the storage provider protocol. Replication settings are agnostic to specific storage settings and determine the replication behavior of the data library service . That is all storage providers are just viewed as big dumb disks and at a high level are viewed as interchangeable in an exemplary embodiment by the data library service . However at a lower level the data library service should in an example also know the details about the storage providers to normalize feature sets e.g. add encryption if the provider does not natively support encryption. Examples of replication behavior include using a single storage provider for backup and restore mirroring data across multiple storage providers or partitioning data across multiple storage providers. It is noted that in one example a user using the computing device does not perform the configuration in block . Instead this configuration is performed by an enterprise e.g. via an administrator configuring the data library service via the configuration file . In another example some or the entire configuration is performed by a user using the UI e.g. by using the UI to select for instance one or more storage providers.

When the data library service is fully configured the data library service can be activated in block . Activation occurs in response e.g. to a first launch of the application into which the data library service is embedded. The data library service does not have to be loaded prior to loading the application . In fact the data library service may be a child process of the main application such that in response to launching the main application the data library automatically gets instantiated. Depending on the platform the data library service can run as a background process even if the application is not in the foreground or suspended as can occur on a mobile device as computing device or the data library service can run only when the application is running. The data library service registers itself block with the platform data storage on the platform as a listener for data events for the application . For example Windows Mac OSX iOS and Android OS all have facilities such as system calls for applications to listen to i.e. monitor data events.

After the data library service activates the data library service spends the majority of its time waiting for data events by monitoring block these events. Data events include notifications that data is created read updated and or deleted by the application . The data library service evaluates each data event as the event occurs and determines whether or not to take any actions block . The events that require actions are the events that modify data. For example in response to the data library service receiving a data creation event the data library service will determine that action is necessary block Yes since this event modifies data. If the data library service receives a data read event the data library service may determine that no action is necessary block No since this event should not modify data.

If action is necessary block Yes the data library service evaluates block the event to determine the appropriate course of action and then triggers the action block . For example if data is modified locally the data library service may determine that synchronization of the data is necessary. Modification of data could include deletion of portions or all of a file additions to portions of a file addition of files replacement of one file with another file and the like. At that point an action is triggered to synchronize data on the storage provider s with the local data . At least block can be considered therefore to synchronize block data on the storage provider s with local data although block also may be considered to synchronize the data on the storage provider s with local data since data events should both be evaluated and triggered to maintain synchronization. The triggering of data actions in block in an example includes issuing one or more data storage commands described below in reference to block .

For all actions the data library service typically records block metadata regarding the event that caused the action and the action taken. This metadata can be stored locally or uploaded block to the optional mediator server for analysis. The mediator server can extract important information regarding how data is replicated and maintained and then use that information to optimize the overall performance of the data library service . As one example of an optimization the mediator server can determine from the metadata log how often data needs to be replicated with the backend storage provider. The mediator server can generate a new configuration for the data library service that minimizes the cost of the replication by commanding the data library service to replicate only when WiFi is available as an example.

An overview of an exemplary embodiment of the data library service is shown in . This example follows a typical implementation pattern where lower level entities at the bottom of the figure interface with a platform e.g. an OS of the platform and an administrator or the mediator server interfaces with the higher level entities at the top of the figure . There are many examples of this implementation pattern including the Open Systems Interconnection OSI model for communication systems. Starting at the bottom the data library service includes a platform interface which integrates the functions of the data library service with the native platform services e.g. via the native API and the platform data storage for registering itself to monitor data events. The platform interface also contains the necessary functions which allow the data library service to perform basic data operations such as copy and move data within the local storage system.

Above the platform interface are StorageProvider drivers of which three are shown which implement the authentication and data interface protocols with the backend storage providers . Note that part of the configuration of the data library service may include specifying which StorageProvider drivers are necessary. The data library service can be kept relatively small by minimizing the number of included StorageProvider drivers as well as features included in the data feature enhancer described below .

Above the drivers is the storage provider configuration . This component is responsible for selecting one or more storage providers to perform an operation such as replication. This component can be configured using e.g. a configuration policy file or programmatically by accessing a configuration interface e.g. via UI in the data library service .

The data feature enhancer contains implementations of features that are not natively part of the storage provider but necessary to conform to enterprise policy data requirements. For example many enterprises may require that data be encrypted before storing outside the company IT infrastructure. If the storage provider does not natively encrypt the data the data library service can include a data feature enhancer that encrypts the data before allowing the data to be replicated. This process is described in more detail below in reference to .

The data logger records metadata regarding the event that caused the action and the action taken. The secure credential store may store and provide access to security credentials e.g. so that the data library service can access securely a storage provider . The configuration and command interface provides an interface to enable a user and or administrator e.g. or configuration utility to configure the data library service . The interface also provides an interface for commands such as replace storage provider A with storage provider B or perform striping using both storage provider A and storage provider B . It is noted that the data monitoring e.g. block of and metadata recording sending e.g. block of are part of data logger . The triggering e.g. block of is accomplished through replication configuration in an exemplary embodiment.

Turning to a logic flow diagram is shown that illustrates operations performed to extend features of a service provider . This figure also illustrates the operation of an exemplary method a result of execution of computer program instructions embodied on a computer readable memory and or functions performed by logic implemented in hardware in accordance with an exemplary embodiment of this invention. The flow starts in block . In the figure the data feature enhancer will receive data storage commands corresponding in an exemplary embodiment to the triggered data actions in block of from the replication configuration in block . The data storage commands are commands that are meant to be implemented by the cloud storage provider s . In the example of the data storage commands include the commands of delete file e.g. delete a file stored as data at a storage provider that corresponds to a local file previously stored as data in the computing device but recently deleted update file e.g. replace file stored as data at a storage provider with a local file stored as data in the computing device and create file e.g. create a new file stored as data at a storage provider and populate with a recently created local file stored as data in the computing device .

The data feature enhancer will evaluate block the commands against the enterprise policy configuration and the policies therein and the feature set of the storage provider s currently being used. Exemplary policies are shown as the policy Enforce encryption for data stored outside a computing device and the policy Use encryption that supports automatic key updating . Policy requires that any data stored outside a computing device to be encrypted. Policy requires that an encryption scheme that is used support automatic key updating e.g. a process where keys are automatically updated to new keys . In this example the set of features corresponds to the cloud storage provider and the set of features corresponds to cloud storage provider . The feature set includes features of delete file and create file while the feature set includes features of delete file update file create file and encrypt file . In this example the features do not have the feature of encrypt file so encryption is not natively supported by the cloud storage provider . The features do have the feature of encrypt file so encryption is natively supported by the cloud storage provider . However neither of the features or has a feature corresponding to automatic key updating. It should be noted that the features and use the same terminology to refer to the same features however this is merely for ease of exposition and not a requirement. For instance the feature of create file may correspond to a feature of replicate file supported by a cloud storage provider . Also although the feature set does not include a feature of update file a file may be updated by deleting the current filed stored as data in the cloud storage provider and creating a new file in data with the data in the modified local file.

In block it is determined whether a feature is natively supported by the storage provider and if so block Yes then the data feature enhancer will ensure that the data storage command is configured to use that feature during the execution of the command block . For instance an update file command would also include encryption of the file. By natively supported this means e.g. the cloud storage provider provides the feature e.g. and the data library service can access and use the feature . If a needed feature is not natively supported block No then the data feature enhancer will activate block an implementation of the feature if available from the data library service . This feature can be executed locally or the data library service can forward data and an indication of the computation e.g. encryption using a certain encryption scheme to be performed to the mediator server which then performs the computation and returns the result e.g. an encrypted file . After execution of block or the original storage command is performed in block . The flow ends in block . Note that in an exemplary embodiment only features with implementations included in the data library service can be executed in this manner. If the policy specifies a feature that is not implemented then the data library service cannot use the storage provider and the data command will be rejected in block which is performed in place of blocks and . In the example of neither cloud storage provider supports a feature of automatic key updating and assuming the data library service also does not support this feature then block is performed where the command is rejected that is the underlying data action is not performed . Block may also include alerting the mediator server that the feature of automatic key updating is not supported by current storage providers sending an email to an IT administrator that the automatic key updating is not supported by current storage providers or any other action suitable for the rejection of this type of command.

In this example all metadata configuration and commands are sent via link through the network to the mediator server to keep a complete record of all actions that have occurred in the data library service . The mediator server has two communication channels and . The first channel is for metadata and utilizes a lightweight messaging MQTT Message Queue Telemetry Transport messaging server shown as RSMB Really Small Message Broker . This allows for inexpensive near real time communication between the data library service and the mediator server . The second channel is used to replicate higher volume data and is implemented using a REST REpresentational State Transfer API using HTTP and a replication API. That is the server uses a REST API which is a generic API type and on top of that the server can implement a higher level API specifically for replication shown as Replication API . For example a version of a server has been implemented that uses WebDAV which is a REST API with some specialization for handling file operations. The data from the mobile device is placed into three directories corresponding to the three applications app app and app . To store data the mediator server has built in support for three data models relational key value pairs and documents byte arrays . Data stored in the mediator server is organized by application type and metadata is stored along with the actual data items where the actual data items are shown as Bytes . In this example app has data fitting the relational model and therefore is stored in corresponding storage support for this model app has data fitting both the relational model and key value model and therefore is stored in corresponding storage support for each of these models and app has data fitting the documents model and therefore is stored in corresponding storage support for this model. It is noted that the data models are exemplary different types of data models that application developers might want to use e.g. some developers may prefer using relational databases so organize everything by tables while others just need key value stores. Other data models may be used.

The mediator server has a global view of operations of the data library service e.g. spread over many computing devices mobile devices . As such metadata stored in the mediator server can be used to perform analytics for optimizations that are not possible with only a local view of data as seen by a single instance of the data library service . Such optimization include but are not limited to determination of data redundancy for improved availability migration of data across data providers to reduce cost and or data read performance and strategies to implement sideload strategies given known locations of replicas.

As an overview and an example there is some administrative authority that is allowed to configure the data library service . This can be some separate IT person who is not the user but this could also be the user if desired. If it is the former then data services for storage providers are transparent to the user.

In one example a developer creates a photo sharing application app for a smartphone as computing device and the photo sharing app is later linked e.g. by an IT administrator to the data library service through the instrumentation process described above. The app writes image files as data to the file system of the smartphone and nothing more. The data library service detects that the data is written and uploads the image files to a particular cloud storage provider this is because during instrumentation the IT administrator configured the data library to write to the particular cloud storage provider . In practice configuration is usually performed by creating a configuration file which contains the settings that the data library service should use that include the selected storage provider s . When the app launches the app runs the data library service automatically which reads the configuration file for the settings. The user does not need to do anything except perhaps enter a username and a password for the particular cloud storage provider when the photo sharing app first launches .

In another example the user of the photo sharing app has the ability to select which storage providers to use because the developer adds this to their application. This differs from the previous example where the developer need not have any knowledge of the data library service . In this case the developer knows the data library service will be used so writes code to manually configure the data library which in an exemplary embodiment just writes the same configuration file that the administrator creates in the previous example. When this version of the photo sharing app launches the data library service reads the configuration file as before.

In yet another example the data library service may be provided with an interface for UI on the display which would allow the user of the computing device to initially and or intermittently select the cloud storage provider s the data library service should use. Once set up either initially or intermittently including entering username s and password s if required for the cloud storage provider s the data library service should operate transparently.

The flow in starts in block . In block the data library service is installed on the device with the application app . In block in response to the application running or being configured the data library service can select the storage providers to use by reading a configuration file which tells the data library service what to do. Alternatively there could be a setting that users can change to select the storage provider manually e.g. in a preferences setting for either the application or the data library service where the application could write the configuration file in an exemplary embodiment .

In block the app and or the data library service will if necessary authenticate with the storage provider or providers selected in block so the storage provider s can be used. If the app or the data library service wants to use more than one storage provider at once block Yes then there are additional settings that should be set for parallel use block . For example the app or data library service may want to have complete replicas of data duplicated on all storage providers or the app may want to evenly partition the data across storage providers randomly. There may be other app specific preferences for how the storage providers should be used such as use storage provider A for storing images and storage provider B for video data . However the app or data library service can also just use a single storage provider which does not require the settings regarding how data is stored on multiple providers. The app then operates normally and the data library service monitors data events and uses the storage providers as configured block and as described above. It is noted that if new storage provider s have been configured then data from the previous storage provider s can be copied from the previous storage provider s to the new storage provider s . That is the data library service operates to cause the data from the previous storage provider s to the new storage provider s . See block .

At some point the app user or data library service as the case may be may want to reconfigure to use new storage provider s . The entity should be allowed to do so and block allows the entity to reconfigure the data library service to use new storage providers.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

