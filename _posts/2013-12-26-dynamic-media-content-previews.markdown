---

title: Dynamic media content previews
abstract: A sandboxed process is initiated in response to a request for a preview of dynamic media content. A stream of frames is generated in a preview specific format by a plug-in that executes within the sandboxed process. The stream of frames is provided as the preview of the dynamic media content, where the preview is viewable on a display screen.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317683&OS=09317683&RS=09317683
owner: Apple Inc.
number: 09317683
owner_city: Cupertino
owner_country: US
publication_date: 20131226
---
The instant application is a continuation of and hereby claims priority under 35 U.S.C. 120 to pending U.S. patent application Ser. No. 12 509 401 which is titled Dynamic Media Content Previews by inventors Julien Jalon et al. which was filed 24 Jul. 2009 and which is incorporated by reference.

Embodiments of the invention relate to streaming media and more particularly to providing secure previews of streaming media and digital media content.

As computer users become increasingly sophisticated there is an increasing desire for efficiency in the computer programs that people use. For example many computer systems have some type of file management system that manages hundreds or even thousands of files to which a user may need access. In many traditional file management systems it is difficult to ascertain the contents of a particular file without actually opening the file using the necessary application associated with the file type for the file. Oftentimes the only useful information that the user can obtain about a file before opening it is the file name. Many users would like to be able to preview the contents of a file before actually committing resources to opening the full application and then the file. Some file management systems such as the Finder in Mac OS X offered by Apple Inc. of Cupertino Calif. provides functionality for previewing files before opening them. Other operating systems and file management systems may also offer some static previewing functionality.

For example using Apple s Finder a user can preview documents such a PDFs text files word processing documents and spreadsheets etc. Finder also allows a user to preview certain video content that has a native file type recognized by the Mac OS.

The Quick Look daemon in the Mac OS incorporates a variety of plug ins each of which accepts a particular data type from a client process and converts it into a preview in one of a set of standard format such as PDF and HTML. The standard format previews are then displayed by the client process using the Quick Look framework. The advantage of this structure is that it avoids a client application crash being caused by a third party plug in crashing. However this model does not work particularly well for dynamic media such as streaming media because converting dynamic media associated with a non native filetype into a suitable standard format takes too much processing time to be useful or reliable.

When a client process receives a request for a preview of dynamic media content the request is passed to a sandboxed process. The sandboxed process is isolated from the client process meaning that if the sandboxed process crashes the client process remains functional and operational. Within the sandboxed process the type of dynamic media content is determined. The content type may be determined based on for example a uniform type identifier UTI . Once the content type has been determined the sandboxed process retrieves a streaming plug in to convert the dynamic media content to a media type that the client process can use to display a preview of the dynamic media.

The plug in is used to convert the dynamic media content according to the protocol associated with the plug in. In some embodiments the plug in generates both an audio component and a video component at least for the dynamic media content that has both audio and video . As each frame of dynamic content is generated it is passed to the client process for display as a streaming preview. In some embodiments the plug in provides one or more controls to the client process that allows a user to control limited aspects of the preview of the dynamic media content e.g. stop play and pause etc .

As provided herein various methods apparatuses and systems enable previews of dynamic media content. When a user selects a file e.g. from a file management system and requests a preview of that file embodiments described herein facilitate conversion of the dynamic media into a format that is suitable for previewing the dynamic media content.

By sending request to preview daemon any manipulation or conversion of file that causes any errors problems with preview daemon e.g. crashing hanging unacceptable latency etc. will not affect client process . In other words if preview daemon crashes client process will continue to run unaffected. For the user this means that any errors in generating a preview of a file will not prevent the user from using the underlying program such as the file management system. This can be particularly important if client process is associated with a fundamental user program such as a file management system e.g. Apple Finder Windows Explorer etc. . In some embodiments if the sandboxed process crashes the client process may display an indication that the requested preview is not current available.

In various embodiments a file type module initially receives request from client process . File type module determines the file type associated with file . As discussed previously the file type may be determined using a uniform type identifier or UTI which is a string defined by Apple Inc. that uniquely identifies the type of a class of items. Thus UTIs are used to identify the type of files and folders clipboard data bundles aliases symlinks and streaming data. If file type module recognizes the file type of file as a native file type then file type module retrieves a known plug in associated with the native file type. For files that contain static media such as word processing documents PDFs HTML files etc. the retrieved plug in can handle the file request and convert it into a file preview that is sent back to client process for display as a preview. In certain embodiments plug in is directly capable of converting dynamic media content audio video files interactive D animation files etc. as described in more detail below. The file preview that is sent to client process is handled by API which includes various display bundles . Each display bundle includes the resources necessary to display a preview of one or more specific file types. Thus if file preview is a preview of a PDF then a PDF display bundle from the group of display bundles takes the PDF preview and prepares it for display on display .

Further embodiments described herein are capable of providing previews for dynamic media content e.g. streaming media video 3 D animation etc. . For example if file includes dynamic media content request might be sent to preview daemon and file type module determines the file type based on for example the UTI associated with the file . Other identifiers could be used in different embodiments. If the dynamic media is of a native file type and recognized by the file type module then a corresponding plug in is retrieved to convert the file and provide a preview. If however file includes dynamic media content of a non native file type then file type module retrieves a designated plug in to handle the non native conversion of file .

In certain embodiments the designated plug in is responsible for retrieving an additional plug in stream plug in to handle the dynamic media content. The designated plug in may also retrieve a copy of the file that needs to be converted. In some embodiments this file is the same file that is received as a part of request . However in other embodiments the file may be a different copy of the same file to be used in converting to a streaming preview.

In addition another sandbox process is opened or initiated for the stream plug in to convert file into a streaming preview . In this way streaming preview daemon is isolated from preview daemon and from client process . Thus if during the conversion of the file to streaming preview the stream plug in crashes process preview daemon and client process remain unaffected. In this way a user does not lose any functionality in the client application e.g. the file management system and moreover the user can still preview other files specifically those that do not require streaming previews without any interruption.

In various embodiments stream preview is a series of frames converted from the original file . The frames associated with stream preview may include limited user functionality. In other words if a full application e.g. a media player were opened to display the dynamic media content in file the user would have the application s full range of user interfaced options to control and or manipulate the file. For example if a user wanted to view a video file and opened a video file viewing application e.g. Quicktime offered by Apple Inc. Windows Media Player offered by Microsoft Corporation etc. the user would have the ability to stop pause play adjust the volume re size the window and or perform various other operations on the file e.g. save delete copy etc. from within the context of the opened application. In contrast streaming preview offers limited control to the user as it is specifically designed to be a preview. For example streaming preview may only provide control over stopping and playing the content in the preview.

Streaming preview is received and handled by API and more particularly by one of the designated display bundles . In the case of streaming previews one or more display bundles includes the resources necessary to display streaming preview . Thus a streaming preview display bundle from the group of display bundles takes streaming preview and prepares it for display on display .

In addition to generating stream preview stream plug in may also generate and provide a set of one or more stream controls to client process . Stream controls include one or more commands that allow a user to control various aspects of streaming preview . Thus as discussed previously stream controls might include commands to stop pause and or play the content in the streaming preview. More commands or fewer commands may be included in certain embodiments. In some embodiments stream controls may not provide the user with the full range of functionality available in the native application associated with the file.

As discussed previously stream plug in provides stream controls in various embodiments to the client process. As shown in stream controls run within client process and allow a user to control certain aspects of stream . As described herein stream controls provide limited control over the stream and do not provide the full range of control that would be available if the file were opened in a native application.

Based on the content type a stream plug in is retrieved to convert the dynamic media into a preview specific format. As used herein a stream plug in refers to any plug in specifically designated to convert dynamic media content e.g. video audio interactive D animation etc. into streaming media. If the content type of the dynamic media is a native file type or in other words a recognized file type then it may be possible to quickly and conveniently convert that file into a preview. However if the file type is determined to be a non native file type then the stream plug in needs to be capable of converting the original file from one format to a preview specific format that is compatible with dynamic previewing.

The retrieved plug in is provided to the sandboxed process and the preview is generated . In situations where the file is a video file containing both audio and video data the plug in may generate separate audio and video components for the preview. If the original file contains only audio then only an audio component might be generated. If the original file contains only video without audio then only a video component might be generated. The streaming media plug in can also support various files that contain interactive D animation such as COLLADA files. Once the preview components have been generated the stream preview is provided for display to a user and controls for the dynamic preview are also provided . Such controls allow a user to control limited functionality associated with the dynamic preview for example stop play pause . For 3 D animated files the dynamic preview may include similar controls such as the ability to stop pause or play the animated file. However in certain embodiments the provided user controls are limited as compared to the controls available when a native application is opened to play the dynamic media content.

It should be noted that in alternate embodiments the steps described in can be rearranged and performed in a different order that the one shown. Also it should be noted that more process steps or fewer process steps than those described in can be used to accomplish the same dynamic media preview functionality contemplated by the various embodiments described herein.

According to various embodiments also represents a form of the system that can be used to implement the described details shown in . In particular it should be noted that display can be used to display dynamic media content as does display of . Embodiments that facilitate dynamic media content previews as described herein may included as instructions in the system of that are stored for example in drive unit or main memory and can be executed by processor .

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor a processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a display unit e.g. a liquid crystal display LCD light emitting diode LED display a cathode ray tube CRT and an input device e.g. a keyboard and or mouse etc. .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface device . In various embodiments web content requested by a user can be retrieved e.g. from the World Wide Web via network using network interface device .

While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the terms machine readable storage medium or computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The terms machine readable storage medium or computer readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine computer and that cause the machine computer to perform any one or more of the methodologies of the present invention. The terms machine readable storage medium or computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Various components described herein may be a means for performing the functions described herein. Each component described herein includes software hardware or a combination of these. The operations and functions described herein can be implemented as software modules hardware modules special purpose hardware e.g. application specific hardware application specific integrated circuits ASICs digital signal processors DSPs etc. embedded controllers hardwired circuitry etc.

Aside from what is described herein various modifications may be made to the disclosed embodiments and implementations of the invention without departing from their scope. Therefore the illustrations and examples herein should be construed in an illustrative and not a restrictive sense.

