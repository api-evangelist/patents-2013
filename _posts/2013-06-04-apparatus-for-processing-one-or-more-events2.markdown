---

title: Apparatus for processing one or more events
abstract: Processing events for use with a complex event processing system that includes a server computer system and a client application executable on a client computer system. The processing includes analyzing content of the events and assigning a plurality of attributes to associated event processing logic. A first attribute is associated with event processing logic that is operable to be applied at the client computer system and a second attribute is associated with event processing logic that is operable to be applied at a server computer system. The processing also includes using, in response to receiving a first event, assigned attributes to determine whether event processing logic associated with the first event is operable to be applied at the client computer system. The first event is forwarded to the server computer system based on determining that the event processing logic associated with the first event is not operable to be applied at the client computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596128&OS=09596128&RS=09596128
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09596128
owner_city: Armonk
owner_country: US
publication_date: 20130604
---
This application claims priority to Great Britain Patent Application No. 1211270.2 filed Jun. 26 2012 and all the benefits accruing therefrom under 35 U.S.C. 119 the contents of which in its entirety are herein incorporated by reference.

An event is an occurrence of some activity in a business application that is important to other applications in an enterprise. For example the occurrence of an event may trigger an action in another business application or it may simply trigger data movement.

In large organizations tens of millions of events occur every day but not all events or event occurrences are of equal importance. Providing insight requires the ability to determine when a pattern of related or seemingly unrelated events from one or more sources has occurred and to coordinate the execution of the responses to the pattern of events.

Complex event processing allows for detection of and responses to patterns in streams of simpler events. An example of a pattern is if events A and B occur and event C does not occur in then do X Y and Z after .

Embodiments include an apparatus a method and a computer program product for processing one or more events for use with a complex event processing system that includes a server computer system and a client application executable on a client computer system that is operable to generate the one or more events. The method includes analysing content of the one or more events and assigning a plurality of attributes to associated event processing logic. A first attribute is associated with event processing logic that is operable to be applied at the client computer system and a second attribute is associated with event processing logic that is operable to be applied at a server computer system. The processing also includes using in response to receiving a first event assigned attributes to determine whether event processing logic associated with the first event is operable to be applied at the client computer system. The first event is forwarded to the server computer system based on determining that the event processing logic associated with the first event is not operable to be applied at the client computer system.

As will be appreciated by one skilled in the art aspects of the embodiments of the present invention may be embodied as a system method or computer program product. Accordingly aspects of embodiments of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of embodiments of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fibre a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fibre cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of embodiments of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Java and all Java based trademarks and logos are trademarks or registered trademarks of Oracle and or its affiliates Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of embodiments of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

With reference to the contemporary complex event processing system of a client application e.g. an Internet application a banking application executing on a client computer system generates an event. Note that the system can include multiple client computer systems and each client computer system can include multiple client applications operable to generate events.

The client application invokes a messaging application programming interface API which sends the generated event as a message to an event processor executing on a server computer system . The event processor parses the event matches a name associated with a name of the event against a stored list of event processing logic and evaluates the received event against the associated event processing logic comprising one or more patterns that is stored in a persistent store . If the event evaluates true against the pattern the event processor generates an action . A graphical user interface GUI is used by a user to generate and modify the event processing logic. When a change to the event processing logic is deployed to the server computer system a rule management component is operable to update the persistent store and the event processor . The event processor typically has a method that can be called by the rule management component such that the event processor can be notified to update its stored list of event processing logic that is associated with event names.

It should be noted that a contemporary complex event processing system is typically server based as the event processing logic is evaluated by an application residing on a server computer system. For certain types of event correlation this is important for example given an example pattern e.g. If a customer makes three purchases in one day trigger an action and given that events can be received from a number of different sources it is necessary to perform such a correlation in a central location e.g. by a server computer system as individual client computer systems are not aware of the events generated by each other.

Performance can be critical in complex event processing systems where throughputs of thousands of events per second are common and server based processing can create a bottleneck.

According to exemplary embodiments rather than event processing being performed solely at a server computer system any simple event processing that does not require cross event correlation across multiple disparate events can be performed at a client computer system. Advantageously significant performance advantages may be achieved in scenarios where a large number of events can be processed at least in part at the client computer system.

A complex event processing system according to an exemplary embodiment is depicted in . The system comprises a client application executing on a client computer system an event filter component component operable to interact with client side event processing logic e.g. a client side library stored in a storage component and a filter manager .

The system also comprises a server computer system having an event processor and a rule management component . A user uses a GUI to manipulate the rule management component . Server side event processing logic is stored in a persistent store . The persistent store is also operable to store at least one occurrence of at least one event.

The event filter component provides an API that can be called by the client application . The event filter component can accept events from client applications that are represented as e.g. event objects wherein an event object is a representation of an event in a given programming language or event packets e.g. a textual representation of an event e.g. written in XML . The event filter component is operable to send events to the server computer system using a messaging API however a calling client application need not be aware of the underlying messaging infrastructure and simply makes calls to the event filter component . The event filter component is pre configured with a location of the event processor .

The event filter component comprises a method that can be called by the filter manager such that the event filter component can be notified to update its stored list of event processing logic that is associated with event names. An example method e.g. updateLogic Listlogic is implementation specific however functionally the method is operable to receive updated server side event processing logic and use the updated logic when subsequently invoked.

The filter manager is responsible for keeping the client side event processing logic up to date. When the client application initializes the filter manager registers itself with the rule management component and provides callback details associated with itself such that the filter manager can receive updated server side event processing logic from the server computer system .

In one embodiment example callback details comprise a host name and a port number which the rule management component uses in order to send updated server side event processing logic in a message to the filter manager . The filter manager listens on the port in order to receive the message.

In another embodiment the filter manager exports a static library comprising the server side event processing logic from the server computer system and any updates to the server side event processing logic are executed manually that is by redeploying the static library at each client computer system.

At block the client application generates an event and calls the event filter component component in order to send the generated event. An example call comprises sendEvent String message where String message denotes the content of the event.

The event filter component in response to receiving the event parses the event to obtain an Event Name and compares the Event Name against a list of event processing logic. If the Event Name is not known to the event filter component this means that there is no associated event processing logic associated with the event and thus no action need be generated for the event. In this case the event filter component discards the event.

If the Event Name is known to the event filter component at block the event filter component determines if there is any client side event processing logic to be applied. If the event filter component determines that there is no client side event processing logic to be applied e.g. because the event does not match any patterns associated with the client side event processing logic the event filter component forwards at block the event to event processor .

If the Event Name is known to the event filter component and if at block the event filter component determines that there is client side event processing logic to be applied the event filter component applies at block client side event processing logic to one or more fields associated with the event. During the application the event filter component applies relatively simple sub patterns to the event. This will be described in more detail with reference to the examples.

At block if the event filter component determines that criteria defined by the one or more patterns are not met the event filter component discards the event and no further action is taken at block .

At block if during evaluation of the client side event processing logic against the event the event filter component determines that criteria defined by one or more patterns associated with the client side event processing logic are met the event filter component forwards at block the event to the event processor .

At block the event processor evaluates the event against the server side event processing logic by applying the remaining relatively complex sub patterns to the event this will be described in more detail with reference to the examples.

At block if during evaluation of the sever side event processing logic against the event the event processor determines that criteria defined by one or more patterns associated with the server side event processing logic are met the event processor generates at block an action.

At block if the event processor determines that criteria defined by the one or more patterns are not met the event processor discards the event and no further action is taken at block .

At block the client application generates an event in response to a customer making a purchase of 10.

The client application passes the event to the event filter component which parses the event to obtain an Event Name e.g. PurchaseEvent .

In the first example the Event Name is known to the event filter component and at block the event filter component compares the Event Name against a list of associated event processing logic. An example of a list comprising an Event Name and associated logic is shown in the table below 

With reference to the list above when logic associated with an Event Name is deployed the rule management component analyses content of the logic and assigns an attribute. The rule management component assigns a Simple attribute to logic that should be processed by the event filter and assigns a Complex attribute to logic that should be processed by the event processor .

In an example the rule management component is operable to assign a Simple attribute when a parameter e.g. field amount associated with logic e.g. If field amount 100 then largePurchaseEvent is contained within an event e.g. Event 1 itself as such processing can be carried out by the event filter due to the event filter having knowledge of the content of the event.

In an example the rule management component is operable to assign a Complex attribute when a number of occurrences of events e.g. occurrences of this Event in 1 day associated with logic e.g. If occurrences of this Event in 1 day then WarningAction generated by one or more client applications needs to be counted. Such processing typically needs to be carried out by the event processor at the server computer system because a client computer system would typically not have awareness of events generated by other client computer systems.

In response to the comparison of the Event Name namely PurchaseEvent against the associated event processing logic the event filter component determines that there is client side event processing logic to be applied as PurchaseEvent has a Simple attribute.

The event filter component applies at block client side event processing logic to one or more fields associated with the event. In more detail the event filter component compares a value in the amount type Real field of Event 1 against Rule 1 specifically against the value 100.

In the first example at block the event filter component determines that criteria namely Rule 1 defined by the one or more patterns are not met and event filter component discards the event and no further action block is required.

At block the client application generates an event in response to a customer making a purchase of 110.

The client application passes the event to the event filter component which parses the event to obtain an Event Name e.g. PurchaseEvent .

In the example the Event Name is known to event filter component and at block the event filter component compares the Event Name against the above list of associated event processing logic. An example of a pattern associated with the client side event processing logic is shown above namely Pattern 1.

In response to the comparison of the Event Name namely PurchaseEvent against the associated event processing logic the event filter component determines that there is client side event processing logic to be applied as PurchaseEvent has a Simple attribute.

The event filter component applies at block client side event processing logic to one or more fields associated with the event. In more detail the event filter component compares a value in the amount type Real field of Event 2 against Rule 1 specifically against the value 100.

In the example at block the event filter component determines that criteria namely Rule 1 defined by the one or more patterns is met and the event filter component according to Rule 1 generates and forwards at block a large purchase event to the event processor .

At block the event processor compares the Event Name against the above list of associated event processing logic.

In response to the comparison of the Event Name namely LargePurchaseEvent against the associated event processing logic the event processor determines that there is server side event processing logic to be applied as LargePurchaseEvent has a Complex attribute.

In more detail during the evaluation the event processor accesses the persistent store in order to determine how many occurrences of the event have occurred before. As this is the first occurrence of the event at block if the event processor determines that criteria namely Rule 2 defined by the one or more patterns are not met and the event processor discards the event and no further action block is required. The event processor stores the first occurrence of the event in the persistent store .

If the LargePurchaseEvent event occurs a further two times in accordance with Rule 2 at block the event processor determines that criteria namely Rule 2 defined by one or more patterns associated with the server side event processing logic are met and the event processor generates at block a Warning action which can be accessed programmatically or by the user using the GUI .

In accordance with an embodiment of the present invention a user can modify the server side event processing logic. In an example the user uses the GUI to modify the server side event processing logic so that only events over 200 evaluate true against a pattern. The user uses the GUI to manipulate the rule management component in order to modify the server side event processing logic.

The rule management component updates the filter manager with the new server side event processing logic by making a call to the filter manager using the callback that the filter manager has previously registered. The filter manager calls a method associated with the event filter component to inform it to update its stored list of event processing logic that is associated with an event name. Subsequently purchase events 200 evaluate true against the Pattern 2.

Embodiments of the present invention allow simple filtering of events using a client side library and API. An event need only be sent to a server computing system if client side event processing logic cannot be applied by the client computer system. Further the event need only be sent to a server computing system if logic criteria are met. Alternatively if logic criteria are met and if there is no further logic to be applied by the server computing system the client computer system takes no further action.

Embodiments of the present invention also provide the ability to update the client side event processing logic associated with the client side library to keep the client side event processing logic in step with the server side event processing logic.

Advantageously if there are a significant number of events whereby simple logic can be applied to an event at a client computer system this has significant performance advantages as the application is very cheap compared with the cost of sending the event using a messaging API such that a server computer system can process the event. Embodiments of the present invention have the technical benefits of requiring less CPU cycles and reducing load on the messaging system the latter of which can be a bottleneck in complex event processing systems. In turn advantageously cost overhead for customers with respect to hardware required to run a complex event processing system and an associated messaging backbone are reduced.

