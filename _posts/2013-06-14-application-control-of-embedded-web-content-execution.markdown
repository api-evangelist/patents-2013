---

title: Application control of embedded web content execution
abstract: Web content is displayed concurrently with application content of an application that is hosting the web content. The web content includes at least some content that can be executed or run, such as a script. Performance of the web content is monitored, such as by monitoring the amount of time the web content has been executing and/or an amount of memory used by the web content. Feedback regarding the performance of the web content is provided to the application hosting the web content, and the application can determine whether and/or how to alter execution of the web content based on the performance of the web content. Execution of the web content can be altered in various manners, such as by throttling execution of the web content or ceasing execution of the web content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09288125&OS=09288125&RS=09288125
owner: Microsoft Technology Licensing, LLC
number: 09288125
owner_city: Redmond
owner_country: US
publication_date: 20130614
---
As computers have become increasingly commonplace a wide variety of different application have become available. These applications can display content via a user interface of the computer and the content displayed can be based on data from different sources. Situations can arise however where the data from a particular source causes the performance of the application to suffer such as due to the data being written or designed poorly and resulting in an adverse effect on the application. Such situations can detract from the usability of the application and result in a frustrating user experience.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one or more aspects web content embedded in an application is displayed concurrently with content of the application. Performance of the web content is monitored and feedback is provided to the application regarding the performance of the web content. The application is allowed to alter execution of the web content in response to the feedback.

Application control of embedded web content execution is discussed herein. An application can include embedded web content also referred to as the application hosting the web content. Both the web content and the content of the application hosting the web content are displayed concurrently. The web content includes at least some content that can be executed or run such as a script. Performance of the web content is monitored such as by monitoring the amount of time the web content has been executing and or an amount of memory used by the web content. Feedback regarding the performance of the web content is provided to the application hosting the web content and the application can determine whether and or how to alter execution of the web content based on the performance of the web content. Execution of the web content can be altered in various manners such as by throttling execution of the web content or ceasing execution of the web content.

The computing device includes an application that displays application content in a portion of a display device . The application content can be any of a variety of different types of content including images drawings text video graphs maps links combinations thereof and so forth. The application content is illustrated as multiple lines e.g. representing text in although it should be noted this is merely an example. The portion can be a window displayed on the display device another segment or area of the display device the entire display area of the display device and so forth. The display device can be included as part of the computing device . Alternatively the display device can be separate from the computing device and the computing device can provide one or more signals to the display device indicating the content and any other user interface elements to be displayed by the display device .

The computing device also includes a web view control . The web view control obtains web content from one or more web content sources. The web content sources can include a web content source that is local to the computing device such as a fixed or removable storage device of the computing device . The web content can additionally or alternatively be obtained from a web content source that is remote from the computing device and accessed by the computing device via a network . The network can be any one or more of a variety of different networks such as the Internet a local area network LAN a public telephone network an intranet other public and or proprietary networks combinations thereof and so forth.

The web view control manages display of web content in part of the portion illustrated as a sub portion . The web content is embedded in the application which refers to the web content as to be displayed e.g. by the web view control concurrently with the application content that is displayed by the application . The displayed web content is illustrated as an image of a car in although it should be noted this is merely an example. The sub portion can be a window or other area in the portion that is separated from the area of the portion in which the application content is displayed to allow the displayed web content to be distinguished from the displayed application content. Alternatively the displayed web content can be interspersed with the displayed application content and there may be no visible or user discernible delineation between the displayed application content and the displayed web content.

The web content refers to content that is written in a language that is understandable to applications using the World Wide Web. The web content can include various data links executable instructions and so forth. The web content can be but need not be a web page. For example the web content can include content written in various markup languages such as HyperText Markup Language HTML . By way of another example the web content can include content written in various scripting languages such as JavaScript.

The web content includes at least some content that can be executed such as script content content written in a scripting language . Executing the web content is also referred to as running the web content . The content that can be executed can be compiled instructions that are executed instructions that are interpreted rather than compiled and executed and so forth. The web view control includes an execution engine that executes this content to generate the displayed web content in the sub portion as discussed in more detail below. The web content can optionally include additional content that is displayed or otherwise presented by the web view control such as images text video and so forth. It should be noted that such additional content can simply be displayed or otherwise presented and is not executed or otherwise run to generate the display of that additional content. Executing the web content refers to executing that part of the web content that can be executed.

Generally during operation of the system the application provides to the web view control a request to display or otherwise present the web content . The web content retrieval module retrieves or otherwise obtains the web content from a web content source and makes appropriate portions of the web content available to the presentation module and the execution engine . The presentation module displays or otherwise presents some of the web content e.g. text images etc. and the execution engine executes the web content . The result of executing portions of the web content can be displayed or otherwise presented by the execution engine and or by the presentation module which is also referred to as displaying the web content .

The application interface is a mechanism via which the application can request that web content be displayed by the web view control . To have the web view control display web content the application can provide an indication of the web content to be displayed to the application interface . The indication can be provided in different manners such as by invoking a method of an application programming interface API exposed by the application interface . Alternatively rather than the application providing an indication of the web content to be displayed the web content to be displayed can be identified in other manners such as by the web view control being configured with an indication of the web content by the application itself providing the web content to the web view control by the web view control being configured with or obtaining from elsewhere an indication of the web content source and how to identify the web content associated with the application and so forth.

The execution engine executes the web content . In one or more embodiments the execution engine and optionally other modules or interfaces of the web view control is running in a same process as the application . For example the execution engine can be a script engine running in the same process as the application . Alternatively the execution engine can be running in a separate process from the application .

Because the application content and the web content are displayed concurrently performance problems with the web content can create the appearance that the application is performing poorly. Thus the web view control monitors the performance of the web content that is executed by the execution engine and provides feedback to the application regarding the performance of the web content. Various different performance aspects of execution of the web content can be monitored as discussed in more detail below. The web view control also allows the application to alter the execution of the web content . The alteration of the execution of the web content can be performed in a variety of different manners as discussed in more detail below.

In one or more embodiments monitoring the performance of the web content that is executed by the execution engine includes monitoring an amount of time that the web content has been executing e.g. how long the web content has been running . The web content execution time monitoring module monitors the execution of the web content by the execution engine keeping track of the amount of time that the web content has been executing. This monitoring of the amount of time that the web content has been executing is also referred to as web content or script governance.

The execution time monitoring module can determine the amount of time that the web content has been executing in various manners. In one or more embodiments the execution time monitoring module is attached to another task or operation that is performed at regular or irregular intervals by the execution engine . For example such a task may be execution of an instruction execution of a particular type of instruction garbage collection e.g. collecting objects that can be freed being performed by the execution engine and so forth. In response to the other task being performed or it being time for the other task to be performed the execution time monitoring module determines the amount of time that the web content has been executing. For example the execution time monitoring module can keep a record of a time when the execution engine began executing the web content . The execution time monitoring module can then readily determine the amount of time that the web content has been executing by determining the time difference between the current time and the time when the execution engine began executing the web content . The execution time monitoring module can alternatively determine the amount of time that the web content has been executing in other manners such as by applying various heuristics or rules based on a number of instructions that have been executed a number of other tasks that have been performed e.g. how many times garbage collection has been performed by the execution engine and so forth.

The execution time monitoring module can provide an indication to the application at regular or irregular intervals of the amount of time that the web content has been executing. The timing of when to provide the indication to the application can be determined in various manners such as at a particular interval e.g. approximately every 250 milliseconds in response to other events or tasks being performed e.g. every third time garbage collection is performed by the execution engine in response to a request for the indication from the application and so forth. This indication provided to the application can be an explicit indication of the amount of time e.g. a number of milliseconds that the web content has been executing.

The execution time monitoring module can provide indications to the application of how long the web content has been executing for as long as the web content is executing and then can cease providing such indications to the application . The execution time monitoring module can optionally provide to the application an indication that the web content has ceased executing or alternatively the application can infer that the web content has ceased executing if no indications of the how long the web content has been executing are received from the execution time monitoring module for at least a threshold amount of time. If executing of the web content were to subsequently resume the execution time monitoring module can resume providing indications to the application how long the web content has been executing optionally resetting the amount of time the web content has been executing each time the web content resumes executing after having ceased executing for at least a threshold amount of time .

Alternatively rather than determining the amount of time that the web content has been executing the execution time monitoring module can simply determine whether the web content is still executing. This determination can be made at regular or irregular intervals analogous to the discussion above regarding determining an amount of time that the web content has been executing but without determining the amount of time. The execution time monitoring module can then provide an indication to the application at regular or irregular intervals of whether the web content is still executing. The timing of when to provide the indication to the application can be determined in various manners such as at a particular interval e.g. approximately every 250 milliseconds in response to other events or tasks being performed e.g. every third time garbage collection is performed by the execution engine and so forth. The application can then determine how long the web content has been executing based on how long the application has received indications from the execution time monitoring module that the web content is still executing.

The execution time monitoring module can continue to provide to the application indications at regular or irregular intervals of whether the web content is still executing. Alternatively the execution time monitoring module can cease providing such indications when execution of the web content ceases notifying the application that execution of the web content has stopped but not continuing to provide indications to the application that the executing of the web content has stopped. If execution of the web content were to subsequently resume the execution time monitoring module can resume providing indications to the application that the web content is executing.

In other embodiments the application provides an execution time trigger value to the web view control . The execution time trigger value is an indication of an amount of time and if the web content executes for an amount of time that satisfies the execution time trigger value e.g. executes for at least the execution time trigger value amount of time then the execution time monitoring module notifies the application that executing of the web content has satisfied the execution time trigger value e.g. that the web content has been executing for at least the execution time trigger value amount of time . The amount of time that the web content has been executing can be determined by the execution time monitoring module in a variety of different manners as discussed above. Thus the execution time monitoring module can monitor how long the web content has been executing but does not notify the application of how long the web content has been executing unless the web content has been executing for at least a particular amount of time.

In one or more embodiments monitoring the performance of the web content that is executed by the execution engine includes monitoring an amount of memory that is used by the web content . The web content memory consumption monitoring module monitors the amount of memory that the web content uses or consumes e.g. the amount of memory that has been allocated to the web content and or the execution engine by a memory manager of the computing device implementing the system .

The memory consumption monitoring module can determine the amount of memory used by the web content in various manners. In one or more embodiments the web content is maintained by the web view control in a data structure such as a document object model DOM having multiple elements. The memory consumption monitoring module can traverse the data structure identifying the amount of memory allocated to each of the multiple elements and adding together the amounts of memory allocated to each of the multiple elements. The sum of the amounts of memory allocated to each of the multiple elements is the amount of memory used by the web content . Alternatively the amount of memory used by the web content can be determined in other manners such as by monitoring memory allocation requests made by the web content and or the execution engine and the granting of such requests.

The timing of when the memory consumption monitoring module determines the amount of memory used by the web content can be determined in various manners. In one or more embodiments the memory consumption monitoring module is attached to another task or operation that is performed at regular or irregular intervals by the execution engine . For example such a task may be execution of an instruction execution of a particular type of instruction garbage collection e.g. collecting objects that can be de allocated being performed by the execution engine and so forth. In response to the other task being performed or it being time for the other task to be performed the memory consumption monitoring module determines the amount of memory that the web content is using.

The memory consumption monitoring module can provide an indication to the application at regular or irregular intervals of the amount of memory that the web content is using. The timing of when to provide the indication to the application can be determined in various manners such as at a particular interval e.g. approximately every 250 milliseconds in response to other events or tasks being performed e.g. every third time garbage collection is performed by the execution engine in response to a request for the indication from the application and so forth. This indication can be an explicit indication of the amount of memory e.g. a number of megabytes that the web content is using. This indication can optionally be provided along with other indications such as an indication provided by the web content execution time monitoring module of how long the web content has been executing.

The memory consumption monitoring module can provide indications to the application of the amount of memory that the web content is using for as long as the web content is executing and or being displayed and then can cease providing such indications to the application .

In other embodiments the application provides a memory usage trigger value to the web view control . The memory usage trigger value is an indication of an amount of memory and if the web content uses an amount of memory that satisfies the trigger value e.g. uses at least the memory usage trigger value amount of memory then the memory consumption monitoring module notifies the application that the web content has satisfied the memory usage trigger value e.g. that the web content is using at least the memory usage trigger value amount of memory . The amount of memory used by the web content can be determined by the memory consumption monitoring module in a variety of different manners as discussed above. Thus the memory consumption monitoring module can monitor the amount of memory that the web content uses but does not notify the application of the amount of memory that the web content uses unless the web content uses at least a particular amount of time.

In response to indications provided by the web view control e.g. the web content memory consumption monitoring module and or the web content execution time monitoring module the application can provide indications to the web view control of how to alter execution of the web content . The execution of the web content can be altered in a variety of different manners. By indicating to the web view control when and or how to alter execution of the web content the application is able to control execution of the web content.

In one or more embodiments execution of the web content is altered by terminating execution of the web content . The application sends a request or other indication to the web view control to cease executing the web content and in response the execution engine stops executing the web content . Ceasing executing the web content can optionally include removing the web content from the memory of the system also referred to as unloading the web content e.g. deleting the web content freeing memory allocated to the web content and or the execution engine etc. . It should be noted that although the application may send a request to the web view control to cease executing the web content the application can subsequently send a request to the web view control to resume executing the web content . In response to a request to resume executing the web content the execution engine resumes executing the web content e.g. assuming the web content is still in memory or can otherwise be obtained by the web view control .

Alternatively the execution of the web content can be altered in other manners. For example the application can throttle execution of the web content . The application sends a request or indication to the web view control to throttle execution of the web content and in response the execution engine alternates between executing and not executing e.g. starting and stopping the web content . For example the execution engine may alternate between executing the web content for 200 milliseconds and not executing the web content for 100 milliseconds between executing the web content for 200 milliseconds and not executing the web content for 500 milliseconds and so forth. The amount of time that the web content is to be executed can be determined in a variety of different manners such as being configured in the execution engine being identified to the web view control by the application and so forth.

Whether execution of the web content is altered and or how execution of the web content is to be altered can be determined by the application in a variety of different manners. In one or more embodiments the application includes or otherwise obtains one or more rules or criteria that are applied to determine whether and or how to alter execution of the web content . These rules or criteria can include various factors such as the amount of time the web content has been executing an amount of memory used by the web content how long the application has been executing an amount of memory used by the application an amount of memory used by other applications in the system and so forth.

In one or more embodiments the application can also prompt a user of the system regarding whether and or how to alter execution of the web content . For example the user may be notified that the web content has been executing for a long amount of time optionally specifying to the user approximately how long the web content has been executing the user may be notified that the web content is using a lot of memory optionally specifying to the user approximately how much memory the web content is using and so forth. A user input can then be received indicating whether and or how to alter execution of the web content .

In the discussions herein reference is made to the web view control monitoring the performance of web content providing feedback to the application regarding the performance of the web content and optionally altering the execution of the web content. In one or more embodiments this monitoring providing feedback and optional altering of execution can be performed for multiple different web content concurrently. For example the application may embed first web content from one source and second web content from the same or different source. The first and second web content can both be displayed concurrently with the application content and the web view control can monitor provide feedback and optionally alter execution of the first web content and the second web content individually. E.g. the application could determine to terminate execution of the second web content but not alter execution of the first web content.

The long running script detected method is invoked by the application e.g. the application discussed above to provide a callback function to the web view control. The long running script detected method includes a parameter that is the callback function of the application. The web view control calls the callback function of the application to provide an indication of the amount of time that web content has been executing. The callback function can take as a parameter for example the amount of time that the web content has been executing and return a value indicating whether to cease execution of the web content or continue execution of the web content. Alternatively the callback function need take no parameters and or may return other values such as no return value an indication of whether execution of the web content is to be throttled an amount that execution of the web content is to be throttled e.g. allowed to execute 60 of the time such as alternate between executing for 60 milliseconds and not executing for 40 milliseconds an indication to unload the web content from memory and so forth.

The get script memory information method is invoked by the application e.g. the application discussed above to request an amount of memory that the web content is using. The get script memory information method can be a function including no parameters and returns an indication of the amount of memory that the web content is using e.g. a number of megabytes . Alternatively the get script memory information method can be implemented in other manners such as invoked by the application to provide a callback function to the web view control and the web view control can call that callback function of the application to provide an indication of the amount of memory that the web content is using analogous to the long running script detected method discussed above.

The is script enabled property is a property of the web view control indicating whether execution of web content e.g. execution of scripts is enabled or disabled. The property can be read by the application e.g. the application discussed above to determine whether execution of web content by the web view control is currently enabled or disabled. The property can also optionally be set or written by the application allowing the application to specify whether execution of web content by the web view control is to be enabled or disabled.

In process web content is obtained act . The web content can be obtained from various sources as discussed above and includes at least some content that can be executed or run.

The web content is displayed concurrently with application content of the application that is hosting the web content act . The application hosting the web content is the application in which the web content is embedded. The web content is displayed by displaying any images text or other displayable content included in the web content as well as displaying the result of the execution or running of the web content that can be executed or run e.g. executing one or more scripts included in the web content .

Performance of the web content is monitored act . Performance of the web content can be monitored in a variety of different manners. For example performance of the web content can be monitored by monitoring the amount of time the web content is executed act as discussed above. Additionally or alternatively performance of the web content can be monitored by monitoring an amount of memory used consumed by the web content act as discussed above.

Feedback regarding the performance of the web content is provided to the application hosting the web content act . The feedback can be provided in a variety of different manners as discussed above such as an indication of how long the web content has been executing an indication of whether the web content is still executing an indication of an amount of memory consumed by the web content and so forth.

Execution of the web content can be altered based on indications from the application act . These indications are typically in response to the feedback provided in act but can alternatively be in response to other actions or events. Execution of the web content can be altered in various manners as discussed above such as ceasing execution of the web content throttling execution of the web content unloading the web content from memory and so forth. It should be noted that no indication need be received from the application in response to the feedback provided in act in which case no alteration of execution of the web content need be performed in act . For example the application can determine based on the feedback provided in act that no alteration of execution of the web content is desired and provide no indication of such to the web view control in which case the web view control continues execution of the web content.

The techniques discussed herein support various usage scenarios. For example an application can embed web content that is displayed concurrently with the application content and determine if the web content is using too much memory or includes a script that is executing for too long. If the application determines that the web content is using too much memory or includes a script that is executing for too long the application can terminate execution of the script and or have the web content unloaded from memory. By way of another example an application can embed web content that is displayed concurrently with the application content and determine if the web content is using too much memory or includes a script that is executing for too long. If the application determines that the web content is using too much memory or includes a script that is executing for too long the application can notify a user of the system that the web content is using a lot of memory or executing for a long time. The user is thus notified that perceived performance problems may be attributable to the web content rather than the application itself and the user can be given the opportunity to terminate execution of the web content.

Although particular functionality is discussed herein with reference to particular modules it should be noted that the functionality of individual modules discussed herein can be separated into multiple modules and or at least some functionality of multiple modules can be combined into a single module. Additionally it should be noted that a particular module discussed herein as performing an action includes that particular module itself performing the action or alternatively that particular module invoking or otherwise accessing another component or module that performs the action or performs the action in conjunction with that particular module . Thus a particular module performing an action includes that particular module itself performing the action and or another module invoked or otherwise accessed by that particular module performing the action.

The example computing device as illustrated includes a processing system one or more computer readable media and one or more I O Interfaces that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware elements that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone e.g. for voice inputs a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to detect movement that does not involve touch as gestures and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Computing device also includes a web view control . Web view control can be for example a web view control as discussed herein.

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and computer readable signal media. 

 Computer readable storage media refers to media and or devices that enable persistent storage of information and or storage that is tangible in contrast to mere signal transmission carrier waves or signals per se. Thus computer readable storage media refers to non signal bearing media. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Computer readable signal media refers to a signal bearing medium that is configured to transmit instructions to the hardware of the computing device such as via a network. Signal media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Signal media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of instructions modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein. Hardware elements may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware devices. In this context a hardware element may operate as a processing device that performs program tasks defined by instructions modules and or logic embodied by the hardware element as well as a hardware device utilized to store instructions for execution e.g. the computer readable storage media described previously.

Combinations of the foregoing may also be employed to implement various techniques and modules described herein. Accordingly software hardware or program modules and other program modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of modules as a module that is executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable storage media and or hardware elements of the processing system. The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

As further illustrated in the example system enables ubiquitous environments for a seamless user experience when running applications on a personal computer PC a television device and or a mobile device. Services and applications run substantially similar in all three environments for a common user experience when transitioning from one device to the next while utilizing an application playing a video game watching a video and so on.

In the example system multiple devices are interconnected through a central computing device. The central computing device may be local to the multiple devices or may be located remotely from the multiple devices. In one or more embodiments the central computing device may be a cloud of one or more server computers that are connected to the multiple devices through a network the Internet or other data communication link.

In one or more embodiments this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to a user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one or more embodiments a class of target devices is created and experiences are tailored to the generic class of devices. A class of devices may be defined by physical features types of usage or other common characteristics of the devices.

In various implementations the computing device may assume a variety of different configurations such as for computer mobile and television uses. Each of these configurations includes devices that may have generally different constructs and capabilities and thus the computing device may be configured according to one or more of the different device classes. For instance the computing device may be implemented as the computer class of a device that includes a personal computer desktop computer a multi screen computer laptop computer netbook and so on.

The computing device may also be implemented as the mobile class of device that includes mobile devices such as a mobile phone portable music player portable gaming device a tablet computer a multi screen computer and so on. The computing device may also be implemented as the television class of device that includes devices having or connected to generally larger screens in casual viewing environments. These devices include televisions set top boxes gaming consoles and so on.

The techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples of the techniques described herein. This functionality may also be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device embodiment implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

