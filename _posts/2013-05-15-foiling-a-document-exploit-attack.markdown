---

title: Foiling a document exploit attack
abstract: A method of foiling a document exploit type attack on a computer, where the attack attempts to extract malware code from within a document stored on the computer. The method includes monitoring the computer in order to detect repeated function calls made by a given process in respect of the same function but different file descriptors; and in the event that such repeated function calls are detected or the number of such repeated function calls exceeds some threshold, terminating the process that initiated the function calls.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959641&OS=08959641&RS=08959641
owner: F-Secure Corporation
number: 08959641
owner_city: Helsinki
owner_country: FI
publication_date: 20130515
---
The present invention relates to document exploits and in particular to the prevention of malicious code embedded in a malicious document being run.

The term malware is short for malicious software and is used to refer to any software designed to infiltrate or damage a computer system without the owner s informed consent. Malware can include viruses worms trojan horses rootkits adware spyware and any other malicious and unwanted software. Many computer devices such as desktop personal computers PCs laptops personal data assistants PDAs and mobile phones can be at risk from malware.

Detecting malware is often challenging as malware is usually designed to be difficult to detect often employing technologies that deliberately hide the presence of malware on a system. It is desirable if possible to prevent malware being installed onto a computer in the first place rather than having to detect and remove it once it has been installed. A common method that is used by creators of malware to bypass anti virus software and firewalls installed on a computer is to embed the malicious executable code into a document such as a PDF Excel or Flash file. A vulnerability in the software used to open the document can then be exploited by the attacker and allow malware to be installed on the computer system. This is known as a document exploit . In recent years there have been several vulnerabilities in Adobe Reader and Adobe Flash Player as well as in Microsoft Office software such as Excel Word and Powerpoint . For example a recent trend has been to embed malicious Flash objects within Microsoft Office files as these are easy to deliver as email attachments and are generally mistakenly trusted by recipients who will open them without much concern. By sending the malware embedded in a document the attacker no longer requires the malware binary to be downloaded for example from a known malicious server on the internet and therefore increases the chances of avoiding antivirus and Intrusion Detection System IDS security.

Typically when a user opens a malicious document i.e. one that has malicious code embedded within on a computer this triggers shellcode to be executed. Shellcode is a small piece of code that is also embedded in the document. It is executed by the code that exploits a vulnerability in the software used to open the document The shellcode attempts to find the malicious document that has been opened and once it has been found the shellcode can extract the embedded malicious data from the document. Once extracted the malware can be run and the computer will be infected.

A current method of detecting such malicious documents is to analyse the code that makes up the document. For example analysis of the code may include searching for known sections of code that are indicative of known malware or known malicious shellcode. However code analysis has significant limitations examples of which include the relatively long time taken to carry out the analysis and the high processing resources required to do so. This can degrade the experience of the end user. In addition malicious code can be obfuscated making it difficult to detect and as shellcode is relatively easy to code when compared to the malware an extremely large number of shellcode variants can exist many of which are likely to be unique and never seen before.

It is an object of the present invention to prevent document exploits occurring on a computer. This can be achieved by hooking and analysing function calls detecting suspicious behaviour indicative of document exploit activity and terminating any processes that show suspicious behaviour.

According to a first aspect of the invention there is provided a method of foiling a document exploit type attack on a computer where the attack attempts to extract malware code from within a document stored on the computer. The method comprises monitoring the computer in order to detect repeated function calls made by a given process in respect of the same function but different file descriptors and in the event that such repeated function calls are detected or the number of such repeated function calls exceeds some threshold terminating the process that initiated the function calls.

Embodiments of the present invention may provide an improved method of preventing document exploits before malware has the opportunity to install itself on a computer system. Embodiments of the present invention may also provide improved zero day protection against document exploits.

The computer may be monitored to detect repeated function calls where the file descriptors are values that increment or decrement in sequence.

The computer may be running a Microsoft Windows operating system and said function calls may be GetFileSize function calls.

The computer may be running a Linux operating system and said function calls may be fstat function calls.

The method may further comprise quarantining or deleting the document containing the exploit after the process has been terminated.

According to a second aspect of the invention there is provided a non transitory computer readable medium storing a computer program which when run on a computer causes the computer to monitor itself in order to detect repeated function calls made by a given process in respect of the same function but different file descriptors and in the event that such repeated function calls are detected or the number of such repeated function calls exceeds some threshold terminate the process that initiated the function calls.

According to a third aspect of the invention there is provided a computer program product comprising a computer readable medium bearing computer program code for use with a computer the computer program code comprising code for monitoring the computer in order to detect repeated function calls made by a given process in respect of the same function but different file descriptors and the computer program code comprising code for terminating the process that initiated the function calls in the event that such repeated function calls are detected or the number of such repeated function calls exceeds some threshold.

According to a fourth aspect of the invention there is provided a computer system comprising one or more processors and one or more computer readable memories storing computer program code the one or more processors being configured to execute the computer program code to cause the computer system at least to monitor itself in order to detect repeated function calls made by a given process in respect of the same function but different file descriptors and in the event that such repeated function calls are detected or the number of such repeated function calls exceeds some threshold terminate the process that initiated the function calls.

The repeated function calls to be detected may have file descriptor values that increment or decrement in sequence.

The computer system may be running a Microsoft Windows operating system and said function calls may be GetFileSize function calls.

The computer system may be running a Linux operating system and said function calls may be fstat function calls.

The one or more processors may be configured to execute the computer program code to further cause the computer system to quarantine or delete the document containing the exploit after the process has been terminated.

As discussed above during a document exploit attack when a user opens a malicious document on a computer shellcode is executed. The shellcode attempts to find the malicious document that has been opened and once it has been found the shellcode can extract the embedded malicious data from the document. Once extracted the malware can be installed and or run and the computer will be infected. Also as discussed above malicious code that is embedded in documents such as PDF or Microsoft Office files can be difficult to detect. Whilst malware that is delivered in this way may be detected and dealt with by antivirus software after it has been installed it is far more desirable to stop the malware being installed in the first place.

A new method will now be described with reference to the figures that can provide an improved way of detecting and preventing malware from being installed onto a computer system via a document exploit.

Considering further the document exploit scenario the shellcode that is used to retrieve the malicious code from the document is run as soon as the document is opened by the user. In order for the malicious code to be extracted from the document the shellcode needs to read back from the original document. In order to do this the shellcode needs to obtain the document s file descriptor . A file descriptor is an abstract indicator that the operating system assigns temporarily to a file when it is open and that can be used for accessing the file. On the Windows operating system this file descriptor is known as a file handle but file descriptors are used in all modern operating systems including Mac OSX and Linux.

Almost universally in document exploits in order to obtain the file descriptor for the document the shellcode uses a brute force method an example of which is illustrated in the flow diagram of .

Monitoring for this behaviour of brute forcing API function calls can be used to detect and prevent a document exploit from occurring. Code that allows function calls on a computer system to be intercepted is known as a hook . Hooking will enable the function calls to be monitored and compared to other recent function calls that originated from the same process. Any processes that give rise to a suspicious function call pattern can then be terminated. Harmless code typically uses valid file descriptors and so would not give rise to this sort of suspicious behaviour.

This method of preventing document exploit detection has several benefits. For example a large number of document exploits have used file descriptor brute forcing for a number of years and it is expected that they will continue to do so making this an effective method for preventing future document exploits. Furthermore the method is behaviour orientated and will prevent attacks initiated via document exploits regardless of the vulnerability that is being exploited. It therefore provides robust protection against zero day exploits. The method can be applied to other APIs that are susceptible to brute forcing and can also easily be implemented to provide protection for multiple different programs e.g. Adobe Read Word Excel etc. .

The antivirus application uses the hooking module to hook the GetFileSize API . The function calls to that API can then be analysed by the function call analysis module . When a user of the computer opens a document within software which triggers the document exploit to initiate the document exploit attempts to brute force the GetFileSize API in order to obtain the correct file descriptor. This brute force behaviour is detected as being suspicious by the function call analysis module and so the result handler terminates the process. The result handler can also engage other aspects of the antivirus application which can for example quarantine or delete the document.

It will be appreciated by the person of skill in the art that various modifications may be made to the above described embodiments without departing from the scope of the present invention.

