---

title: System and methods for semiautomatic generation and tuning of natural language interaction applications
abstract: A system for supervised automatic code generation and tuning for natural language interaction applications, comprising a build environment comprising a developer user interface, automated coding tools, automated testing tools, and automated optimization tools, and an analytics framework software module. Text samples are imported into the build environment and automated clustering is performed to assign them to a plurality of input groups, each input group comprising a plurality of semantically related inputs. Language recognition rules are generated by automated coding tools. Automated testing tools carry out automated testing of language recognition rules and generate recommendations for tuning language recognition rules. The analytics framework performs analysis of interaction log files to identify problems in a candidate natural language interaction application. Optimizations to the candidate natural language interaction application are carried out and an optimized natural language interaction application is deployed into production and stored in the solution data repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08903711&OS=08903711&RS=08903711
owner: Artificial Solutions Iberia, S.L.
number: 08903711
owner_city: Barcelona
owner_country: ES
publication_date: 20131008
---
The instant application is a continuation of U.S. patent application Ser. No. 13 731 091 titled SYSTEM AND METHODS FOR SEMIAUTOMATIC GENERATION AND TUNING OF NATURAL LANGUAGE INTERACTION APPLICATIONS filed on Dec. 31 2012 which is a continuation in part of the jointly owned U.S. patent application Ser. No. 13 565 790 titled SYSTEM AND METHODS FOR DELIVERING ADVANCED NATURAL LANGUAGE INTERACTION APPLICATIONS filed on Aug. 2 2012 and also claims priority to U.S. provisional patent application Ser. No. 61 622 381 titled SYSTEM AND METHOD FOR DEVELOPING A VIRTUAL ASSISTANT which was filed on Apr. 10 2012 the entire specifications of which are incorporated herein by reference.

The invention relates to the field of artificial intelligence and more particularly to the field of natural language interaction based applications such as virtual assistants.

Virtual assistants are an example of a class of software applications referred to herein as natural language interaction applications that use natural language to interact with a human user. With respect to virtual assistants in particular these applications perform functions similar to those provided by human assistants in that they can engage in conversations with their users in order to for example provide information carry out routine tasks or perform other operations as required. Many virtual assistants have been used in association with web sites with these virtual assistants often featuring the use of graphical images or avatars to simulate the experience of interacting with a human being.

While some natural language interaction applications known in the art may possess rudimentary natural language understanding capabilities in reality most such applications and particularly most virtual assistants known in the art are tightly scripted applications that carry out a limited range of activities. While scripted agents have proven useful in many online scenarios their acceptance has generally been limited because when users are restricted in their ways of expressing themselves in natural language the communication language is not natural. Any notion of the virtual assistant s behaving like a real assistant disappears because too much effort is demanded of the user when the user is expected to know precisely what to say or what to do in order to achieve her goals. Thus there is a distinct need in the art for interpreting fluid and freely expressed natural language in various applications for example by virtual assistants. This challenge is exacerbated by the fact that even when equipped with rudimentary natural language interpretation natural language interaction applications such as virtual assistants that seem to only know a small number of facts and who only talk about a very limited range of subjects such as appointment management do not seem very realistic to humans who are used to being able to say things in a fluid way shifting subjects easily and intermixing casual banter with task oriented speech.

The use of natural language interaction applications generally and virtual assistants more particularly has also been hampered by the high degree of complexity and cost associated with developing and deploying virtual assistants particularly those that have any significant degree of natural language interpretation and interaction capability. Because applications capable of even basic natural language interpretation and interaction tend to require teams of linguistic experts with technical skills to develop the rate of adoption has been limited and the range of entities that have used virtual assistants tends to be limited to large companies that can afford the high time and cash investments needed to implement even marginal natural language interaction applications. Moreover testing of natural language interaction applications tends to be manual difficult for humans to oversee and extremely time consuming as developers must either test the behavior of such applications manually or carry out tests with users.

Accordingly what are needed in the art are a system and various methods that enable organizations of all sizes to efficiently develop test deploy and maintain useful natural language interaction applications such as virtual assistants that are able to interpret and react properly to a wide range of natural language inputs from users including casual off topic conversational elements as well as task oriented language.

What are further needed in the art in order to decrease the development time are a system and various methods for automatically generating and tuning code for natural language interaction applications.

Accordingly the inventor has conceived and reduced to practice in a preferred embodiment of the invention various systems and methods for automatic language recognition rule generation and tuning for natural language interaction applications.

According to a preferred embodiment of the invention a system for supervised automatic code generation and tuning for natural language interaction applications is disclosed. According to the embodiment the system comprises a build environment comprising a developer user interface automated coding tools automated testing tools and automated optimization tools and an analytics framework software module. Text samples are assigned to input groups based on semantic content each input group comprising semantically related inputs and where the assignment of the plurality of text samples into input groups is performed either with automatic clustering or manually. For each input group a plurality of language recognition rules a plurality of language objects and a plurality of flow elements are automatically generated by the plurality of the automatic coding tools. Text samples are imported into the build environment and automated clustering is performed to assign them to a plurality of input groups each input group comprising a plurality of semantically related inputs. Language recognition rules are generated by automated coding tools. Automated testing tools carry out automated testing of language recognition rules and generate recommendations for tuning language recognition rules. The analytics framework performs analysis of interaction log files to identify problems in a candidate natural language interaction application. Optimizations to the candidate natural language interaction application are carried out and an optimized natural language interaction application is deployed into production and stored in the solution data repository.

According to another preferred embodiment of the invention a method for semiautomatic generation and tuning of natural language interaction applications is disclosed comprising the steps of a importing into a build environment comprising a plurality of software modules stored or operating on a computer the plurality of software modules comprising a developer user interface a plurality of automated coding tools a plurality of automated testing tools and a plurality of automated optimization tools a plurality of text samples b performing using at least one of the developer user interface and the plurality of automated coding tools automated clustering based on semantic content on the plurality of text samples to assign at least a substantial portion of the plurality of text samples to a plurality of input groups each input group comprising a plurality of semantically related inputs c generating using at least one of the plurality of automated coding tools a plurality of language recognition rules for each of the plurality of input groups d performing using at least one of the plurality of automated testing tools automated testing of language recognition rules generated in step c e automatically generating based on results obtained in step d a plurality of recommendations for tuning or correcting language recognition rules f providing the plurality of recommendations to a developer via the developer user interface g deploying a candidate natural language interaction application to a plurality of users h delivering log files of natural language interaction sessions of the plurality of users to an analytics framework software module operating on a server computer for analysis i performing analysis using the analytics framework software module of the log files to identify problems in the candidate natural language interaction application j carrying out using the plurality of optimization tools a plurality of optimizations to the candidate natural language interaction application and k deploying an optimized natural language interaction application into production.

The inventor has conceived and reduced to practice various systems and methods for supervised automatic code generation and tuning for natural language interaction applications.

One or more different inventions may be described in the present application. Further for one or more of the inventions described herein numerous alternative embodiments may be described it should be understood that these are presented for illustrative purposes only. The described embodiments are not intended to be limiting in any sense. One or more of the inventions may be widely applicable to numerous embodiments as is readily apparent from the disclosure. In general embodiments are described in sufficient detail to enable those skilled in the art to practice one or more of the inventions and it is to be understood that other embodiments may be utilized and that structural logical software electrical and other changes may be made without departing from the scope of the particular inventions. Accordingly those skilled in the art will recognize that one or more of the inventions may be practiced with various modifications and alterations. Particular features of one or more of the inventions may be described with reference to one or more particular embodiments or figures that form a part of the present disclosure and in which are shown by way of illustration specific embodiments of one or more of the inventions. It should be understood however that such features are not limited to usage in the one or more particular embodiments or figures with reference to which they are described. The present disclosure is neither a literal description of all embodiments of one or more of the inventions nor a listing of features of one or more of the inventions that must be present in all embodiments.

Headings of sections provided in this patent application and the title of this patent application are for convenience only and are not to be taken as limiting the disclosure in any way.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries logical or physical.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. To the contrary a variety of optional components may be described to illustrate a wide variety of possible embodiments of one or more of the inventions and in order to more fully illustrate one or more aspects of the inventions. Similarly although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may generally be configured to work in alternate orders unless specifically stated to the contrary. In other words any sequence or order of steps that may be described in this patent application does not in and of itself indicate a requirement that the steps be performed in that order. The steps of described processes may be performed in any order practical. Further some steps may be performed simultaneously despite being described or implied as occurring non simultaneously e.g. because one step is described after the other step . Moreover the illustration of a process by its depiction in a drawing does not imply that the illustrated process is exclusive of other variations and modifications thereto does not imply that the illustrated process or any of its steps are necessary to one or more of the invention s and does not imply that the illustrated process is preferred. Also steps are generally described once per embodiment but this does not mean they must occur once or that they may only occur once each time a process method or algorithm is carried out or executed. Some steps may be omitted in some embodiments or some occurrences or some steps may be executed more than once in a given embodiment or occurrence.

When a single device or article is described it will be readily apparent that more than one device or article may be used in place of a single device or article. Similarly where more than one device or article is described it will be readily apparent that a single device or article may be used in place of the more than one device or article.

The functionality or the features of a device may be alternatively embodied by one or more other devices that are not explicitly described as having such functionality or features. Thus other embodiments of one or more of the inventions need not include the device itself.

Techniques and mechanisms described or referenced herein will sometimes be described in singular form for clarity. However it should be noted that particular embodiments include multiple iterations of a technique or multiple instantiations of a mechanism unless noted otherwise. Process descriptions or blocks in figures should be understood as representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of embodiments of the present invention in which for example functions may be executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those having ordinary skill in the art.

As used herein virtual assistant means a software hardware or hybrid hardware software application that provides assistance to humans analogous to that provided by human assistants generally using an intuitive user interface such as one that allows a user to express her needs in natural language.

As used herein natural language interpretation means interpretation by a machine of one or a series of utterances made by a human user speaking or writing naturally in some cases natural language may be supplemented by gestural haptic or other input combined with natural language input for example saying move this here while pointing or clicking on an object and a later a location . That is a natural language interpreter generally does not require users to format their requests in simple fixed patterns such as a program might be required to do as for example when invoking a web service or an application programming interface API .

As used herein a dialog is a conversational exchange between two or more participants consisting of a generally unstructured sequence of natural language contributions in the form of requests responses statements and the like. A dialog is an interaction sequence that actually occurs i.e. in run time during a conversation exchange between a user and a natural language system.

As used herein a flow is a logical task unit comprising a set of related interaction steps required and preconfigured in order to perform a task. Typically a flow may comprise one or more transition conditions and operative nodes. A flow is typically defined in a natural language system as a series of predefined steps to perform when some triggering condition is satisfied.

As used herein an instructional path is a sequence of instructions from one or more flows that were invoked or executed during the delivery of a dialog by a natural language system. In effect an instructional path is the realization of one or more flows that occurs in an actual conversation or dialog between a user and a natural language system it represents the sequence of decisions or instructions taken in support of natural language conversation whereas the corresponding dialog is the actual sequence of what was said during the conversation by the parties involved rather than why it was said .

As used herein a natural language interaction system or a natural language system is a computer based system capable of interacting via dialogs with one or more users using natural language perhaps augmented by haptics gestures or other nonverbal means . Natural language systems carry out their function using dialogs which can be thought of also as the actual as executed sequence of interaction steps between a user and a natural language system. A natural language system may participate in a dialog by following the instructional steps of flows.

As used herein a language object means an abstract representation of a logical unit of human linguistic expression that has meaning and is suitable for processing by automated systems such as virtual assistants. Language objects in their simplest form are represented as single words that represent a plurality of variants of a single common meaning including inflectional variants and variants connected by synonymy. That is generally a language object represents all variants and synonyms of the core word that represents it and language objects may contain grammatical variants of words as well such as verb tenses contractions and so forth .

As used herein script means an executable sequence of instructions generally stored or at least rendered for execution as plain text which can be executed by an appropriate script interpreter. Scripts may be written in any scripting language known in the art such as Perl Python PHP Ruby Groovy and the like or in any similar scripting language including proprietary scripting languages. As described variously herein scripts generally are executed upon occurrence of specific events such as initiation or termination of a user interaction session or the triggering of a business rule such as execute the following script if the number of active sessions exceed a configured number . Scripts can be nodes in flows in which case they are referred to as script nodes .

As used herein request or question means a user supplied or automatically supplied input to a natural language interaction based system as opposed to a system supplied output .

As used herein response means a system supplied output from a natural language interaction system as opposed to a user supplied or automatically supplied input .

As used herein condition means a rule or logical expression used for interpreting natural language utterances that if satisfied will allow for execution of one or more actions or will generate one or more effects. There are several types of conditions envisioned according to the invention comprising for example language recognition rules skip conditions and transition conditions.

As used herein a language recognition rule is a specific type of condition built up from language objects and used for capturing natural language expressions. For example a language recognition rule can be used to interpret or capture the intention of a user request.

As used herein trigger or a flow trigger is a construct which holds a condition and which makes the system activate and start executing a flow if the condition is fulfilled.

As used herein listener means is a rule construct with a conditional part and an operational part. When the conditional part is fulfilled the operational part is invoked or executed whereupon it updates current state based on information present in the current state and in the natural language input the user request . Listeners may be configured to operate on a global level on a flow level or on a transition level and they are generally evaluated in that order.

As used herein transition or transition condition means a condition that determines whether the system should pass a transition to enter a new instructive step or process a node or a new transition . Transition may be input consuming requires user input or non input consuming does not require user input . Transitions may comprise one or more conditions and transitions can follow each other directly.

As used herein skip condition means a condition that is verified prior to executing an instructive step i.e. entering a node for example of a flow . If the condition is met e.g. some values have already been set previous in the system the system will skip executing the instructional step and will continue as if it has already been executed.

As used herein small talk means generally off topic conversation elements that may be used to respond to user request. For example if during a flow devoted to making an airline reservation a user asks do you like to fly yourself a preprogrammed response or a random or other selection from a plurality of possible responses may be invoked which causes a response such as I never fly myself because I live in a machine .

As used herein safety net means a special flow type which is invoked when a user request fails to satisfy any condition i.e. no matches were found it is used to ensure that some form of response is made after which generally the last active flow is resumed where it left off.

As used herein lemma means a word form chosen to represent a substantially complete set of inflectional variants of a given word. A lemma is typically the canonical or dictionary head form of a word e.g. the nominative singular for nouns or the infinitive for verbs. The inflectional variants may be seen as possible instances of the lemma whereas the lemma itself is an abstraction.

As used herein an example input is a text sample that is used to describe build and test language recognition rules triggers and flows. Example inputs are typically obtained from text sample corpora which are often obtained for example from logs of actual interactions between users and service representatives such as agents handling chat interactions or phone calls which can be transcribed to generate example inputs . Typically an example input EI will belong to at least one group of EIs that are related to a specific part of a natural language solution such as a trigger and a language recognition rule the trigger s condition . So an EI may belong to a specific trigger of a flow and represents an example of what type of input should fulfill the language recognition rule of the trigger in other words the EI is assigned to a specific language recognition rule often this occurs automatically because the language recognition rules was auto generated from a set of example inputs each of which is then assigned as a positive example input for the language recognition rule by default. Each language recognition rule which can be linked to a trigger language object listener internal flow transition or a skip condition typically comprises four sets of assigned EIs positive local EIs that should match the language recognition rule when tested in isolation but may not necessarily trigger it when tested in the context of the whole solution negative local EIs that should not match it positive global EIs that should both match and trigger it and negative global EIs that maybe could match it but should never trigger it . Those sets may be empty. For example example input Insurance may trigger a general language recognition rule Vehicle insurance may fulfill a more specific language recognition rule and Car insurance may trigger the most specific rule of the three. In this situation the car insurance EI will always match the general insurance rule a designer can solve the implied conflict here by setting an ordering relation that always evaluates the car insurance rule before the more general insurance rule. In that way the more general rule is triggered only when the more specific condition isn t fulfilled. Alternatively systems according to the invention may automatically identify conflicts such as tangles and propose a new ordering relation that may be reviewed by a developer.

Generally the techniques disclosed herein may be implemented on hardware or a combination of software and hardware. For example they may be implemented in an operating system kernel in a separate user process in a library package bound into network applications on a specially constructed machine on an application specific integrated circuit ASIC or on a network interface card.

Software hardware hybrid implementations of at least some of the embodiments disclosed herein may be implemented on a programmable network resident machine which should be understood to include intermittently connected network aware machines selectively activated or reconfigured by a computer program stored in memory. Such network devices may have multiple network interfaces that may be configured or designed to utilize different types of network communication protocols. A general architecture for some of these machines may be disclosed herein in order to illustrate one or more exemplary means by which a given unit of functionality may be implemented. According to specific embodiments at least some of the features or functionalities of the various embodiments disclosed herein may be implemented on one or more general purpose computers associated with one or more networks such as for example an end user computer system a client computer a network server or other server system a mobile computing device e.g. tablet computing device mobile phone smartphone laptop and the like a consumer electronic device a music player or any other suitable electronic device router switch or the like or any combination thereof. In at least some embodiments at least some of the features or functionalities of the various embodiments disclosed herein may be implemented in one or more virtualized computing environments e.g. network computing clouds virtual machines hosted on one or more physical computing machines or the like . Moreover in some embodiments one or more aspects or all aspects of the invention may optionally be implemented via a specially programmed chip for instance an application specific integrated circuit or ASIC or an erasable programmable read only memory or EPROM or via some other hardware only approach known in the art.

Referring now to there is shown a block diagram depicting an exemplary computing device suitable for implementing at least a portion of the features or functionalities disclosed herein. Computing device may be for example any one of the computing machines listed in the previous paragraph or indeed any other electronic device capable of executing software or hardware based instructions according to one or more programs stored in memory. Computing device may be adapted to communicate with a plurality of other computing devices such as clients or servers over communications networks such as a wide area network a metropolitan area network a local area network a wireless network the Internet or any other network using known protocols for such communication whether wireless or wired.

In one embodiment computing device includes one or more central processing units CPU one or more interfaces and one or more busses such as a peripheral component interconnect PCI bus . When acting under the control of appropriate software or firmware CPU may be responsible for implementing specific functions associated with the functions of a specifically configured computing device or machine. For example in at least one embodiment a computing device may be configured or designed to function as a server system utilizing CPU local memory and or remote memory and interface s . In at least one embodiment CPU may be caused to perform one or more of the different types of functions and or operations under the control of software modules or components which for example may include an operating system and any appropriate applications software drivers and the like.

CPU may include one or more processors such as for example a processor from one of the Intel ARM Qualcomm and AMD families of microprocessors. In some embodiments processors may include specially designed hardware such as application specific integrated circuits ASICs electrically erasable programmable read only memories EEPROMs field programmable gate arrays FPGAs and so forth for controlling operations of computing device . In a specific embodiment a local memory such as non volatile random access memory RAM and or read only memory ROM including for example one or more levels of cached memory may also form part of CPU . However there are many different ways in which memory may be coupled to system . Memory may be used for a variety of purposes such as for example caching and or storing data programming instructions and the like.

As used herein the term processor is not limited merely to those integrated circuits referred to in the art as a processor a mobile processor or a microprocessor but broadly refers to a microcontroller a microcomputer a programmable logic controller an application specific integrated circuit and any other programmable circuit.

In one embodiment interfaces are provided as network interface cards NICs . Generally NICs control the sending and receiving of data packets over a computer network other types of interfaces may for example support other peripherals used with computing device . Among the interfaces that may be provided are Ethernet interfaces frame relay interfaces cable interfaces DSL interfaces token ring interfaces graphics interfaces and the like. In addition various types of interfaces may be provided such as for example universal serial bus USB Serial Ethernet Firewire PCI parallel radio frequency RF Bluetooth near field communications e.g. using near field magnetics 802.11 WiFi frame relay TCP IP ISDN fast Ethernet interfaces Gigabit Ethernet interfaces asynchronous transfer mode ATM interfaces high speed serial interface HSSI interfaces Point of Sale POS interfaces fiber data distributed interfaces FDDIs and the like. Generally such interfaces may include ports appropriate for communication with appropriate media. In some cases they may also include an independent processor and in some in stances volatile and or non volatile memory e.g. RAM .

Although the system shown in illustrates one specific architecture for a computing device for implementing one or more of the inventions described herein it is by no means the only device architecture on which at least a portion of the features and techniques described herein may be implemented. For example architectures having one or any number of processors may be used and such processors may be present in a single device or distributed among any number of devices. In one embodiment a single processor handles communications as well as routing computations while in other embodiments a separate dedicated communications processor may be provided. In various embodiments different types of features or functionalities may be implemented in a system according to the invention that includes a client device such as a tablet device or smartphone running client software and server systems such as a server system described in more detail below .

Regardless of network device configuration the system of the present invention may employ one or more memories or memory modules such as for example remote memory block and local memory configured to store data program instructions for the general purpose network operations or other information relating to the functionality of the embodiments described herein or any combinations of the above . Program instructions may control execution of or comprise an operating system and or one or more applications for example. Memory or memories may also be configured to store data structures configuration data encryption data historical system operations information or any other specific or generic non program information described herein.

Because such information and program instructions may be employed to implement one or more systems or methods described herein at least some network device embodiments may include nontransitory machine readable storage media which for example may be configured or designed to store program instructions state information and the like for performing various operations described herein. Examples of such nontransitory machine readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media such as optical disks and hardware devices that are specially configured to store and perform program instructions such as read only memory devices ROM flash memory solid state drives memristor memory random access memory RAM and the like. Examples of program instructions include both object code such as may be produced by a compiler machine code such as may be produced by an assembler or a linker byte code such as may be generated by for example a Java compiler and may be executed using a Java virtual machine or equivalent or files containing higher level code that may be executed by the computer using an interpreter for example scripts written in Python Perl Ruby Groovy or any other scripting language .

In some embodiments systems according to the present invention may be implemented on a standalone computing system. Referring now to there is shown a block diagram depicting a typical exemplary architecture of one or more embodiments or components thereof on a standalone computing system. Computing device includes processors that may run software that carry out one or more functions or applications of embodiments of the invention such as for example a client application . Processors may carry out computing instructions under control of an operating system such as for example a version of Microsoft s Windows operating system Apple s Mac OS X or iOS operating systems some variety of the Linux operating system Google s Android operating system or the like. In many cases one or more shared services may be operable in system and may be useful for providing common services to client applications . Services may for example be Windows services user space common services in a Linux environment or any other type of common service architecture used with operating system . Input devices may be of any type suitable for receiving user input including for example a keyboard touchscreen microphone for example for voice input mouse touchpad trackball or any combination thereof. Output devices may be of any type suitable for providing output to one or more users whether remote or local to system and may include for example one or more screens for visual output speakers printers or any combination thereof. Memory may be random access memory having any structure and architecture known in the art for use by processors for example to run software. Storage devices may be any magnetic optical mechanical memristor or electrical storage device for storage of data in digital form. Examples of storage devices include flash memory magnetic hard drive CD ROM and or the like.

In some embodiments systems of the present invention may be implemented on a distributed computing network such as one having any number of clients and or servers. Referring now to there is shown a block diagram depicting an exemplary architecture for implementing at least a portion of a system according to an embodiment of the invention on a distributed computing network. According to the embodiment any number of clients may be provided. Each client may run software for implementing client side portions of the present invention clients may comprise a system such as that illustrated in . In addition any number of servers may be provided for handling requests received from one or more clients . Clients and servers may communicate with one another via one or more electronic networks which may be in various embodiments any of the Internet a wide area network a mobile telephony network a wireless network such as WiFi Wimax and so forth or a local area network or indeed any network topology known in the art the invention does not prefer any one network topology over any other . Networks may be implemented using any known network protocols including for example wired and or wireless protocols.

In addition in some embodiments servers may call external services when needed to obtain additional information or to refer to additional data concerning a particular call. Communications with external services may take place for example via one or more networks . In various embodiments external services may comprise web enabled services or functionality related to or installed on the hardware device itself. For example in an embodiment where client applications are implemented on a smartphone or other electronic device client applications may obtain information stored in a server system in the cloud or on an external service deployed on one or more of a particular enterprise s or user s premises.

In some embodiments of the invention clients or servers or both may make use of one or more specialized services or appliances that may be deployed locally or remotely across one or more networks . For example one or more databases may be used or referred to by one or more embodiments of the invention. It should be understood by one having ordinary skill in the art that databases may be arranged in a wide variety of architectures and using a wide variety of data access and manipulation means. For example in various embodiments one or more databases may comprise a relational database system using a structured query language SQL while others may comprise an alternative data storage technology such as those referred to in the art as NoSQL for example Hadoop MapReduce BigTable and so forth . In some embodiments variant database architectures such as column oriented databases in memory databases clustered databases distributed databases or even flat file data repositories may be used according to the invention. It will be appreciated by one having ordinary skill in the art that any combination of known or future database technologies may be used as appropriate unless a specific database technology or a specific arrangement of components is specified for a particular embodiment herein. Moreover it should be appreciated that the term database as used herein may refer to a physical database machine a cluster of machines acting as a single database system or a logical database within an overall database management system. Unless a specific meaning is specified for a given use of the term database it should be construed to mean any of these senses of the word all of which are understood as a plain meaning of the term database by those having ordinary skill in the art.

Similarly most embodiments of the invention may make use of one or more security systems and configuration systems . Security and configuration management are common information technology IT and web functions and some amount of each are generally associated with any IT or web systems. It should be understood by one having ordinary skill in the art that any configuration or security subsystems known in the art now or in the future may be used in conjunction with embodiments of the invention without limitation unless a specific security or configuration system or approach is specifically required by the description of any specific embodiment.

In various embodiments functionality for implementing systems or methods of the present invention may be distributed among any number of client and or server components. For example various software modules may be implemented for performing various functions in connection with the present invention and such modules can be variously implemented to run on server and or client components.

In order to formulate one or more appropriate responses to request natural language interaction engine carries out a process that may be broadly described as taking place in three steps. First natural language interaction engine analyzes request to determine its meaning usually by determining the user s intent . Analysis may require preprocessing for example to convert a spoken request into a textual form suitable for further analysis although it should be noted that in some embodiments audio data obtained from a spoken request could be analyzed directly using one or more speech analytics technologies known in the art . Analysis typically involves parsing request and then analyzing its semantic content to determine one or more possible user intentions that motivated request . In many cases this may be straightforward for instance a request might be Please set my alarm for 8 am and accordingly the user s intent would easily be understood once the sentence was parsed but in other cases it might be anything but straightforward for instance a user might say Get out of here which has several possible intentions depending on context . Thus it could be that output from analysis could involve a certain amount of uncertainty for instance in cases where an output of analysis step comprises a list of possible user intents perhaps with weights indicating their likelihood of being the user s actual intention.

Once analysis is completed natural language interaction engine may undertake a reasoning step to further elaborate or to better determine user intent. Interaction engine may use advanced linguistic interpretation and business rules to simulate intelligent thinking allowing interaction engine to appear to reason like a human and to determine a most appropriate way to respond to a user request . During this reasoning process interaction engine may take into account many contextual factors such as date time location of user entities and facts discussed in a current or recent dialog active flows local context global context information picked up in previous dialogs data about a user and the like. In addition inferences may be drawn based on data about one or more users for example when users do this they normally also want to do that . For example if a user inquires about next year s insurance premium interaction engine may understand context of next year but may need to seek clarification about whether the user is asking about home or motor insurance. In general the goal of reasoning is to reduce ambiguity about what a user meant in request and to apply rules or other logical processing to take into account the extended context in which request was made in order to facilitate the final step of reacting . Once user intent is understood and relevant context has been taken into account natural language interaction engine may select and execute appropriate actions needed to react to request . Suitable reactions may be to give an appropriate verbal textual visual or haptic response to ask for more information to disambiguate user intent when for example disambiguation could not be carried out during reasoning step to open a webpage to play a video to open another application to automatically fill in a form to invoke or update or interact with a third party service to perform some form of multimodal output or to execute a transaction for example by updating a database or by integrating with one or more backend or e commerce systems. These three steps analyze reason and react may all happen seamlessly in milliseconds with interaction engine able to handle thousands of interactions simultaneously or they may occur over an extended period of time depending on context and the state of the device being used or its connectivity.

Once a request is received by interaction engine in step initial processing of request takes place. Several possible initial processing substeps may be taken as needed including for example but not limited to preparing data received in request by transforming it into a form in which it can be used by further steps for instance by transcribing spoken audio input into text form suitable for parsing evaluating one or more data elements to determine whether there are any missing elements and if so attempting to retrieve those missing elements either from the author of request or from a separate data source such as on device data storage checking to see whether the request pertains to an existing interaction session in which case its data is appended to that sessions data store or represents a new session in which case new session identifier may be created and a new session data store instantiated and populated with data from request and so forth. In step preparations are made to carry out an interpretation process specifically by one or more of segmenting request into sentences tokenizing the resulting sentences for example by breaking them down into individual words numerals and other tokens and normalization of the results and optionally formatting the processed request into a format suitable for use in interpretation process . Step is carried out using one or more of interpretation aids such as language properties characteristics of the language in which request was rendered such as standard sentence orders verb tenses and the like standard or custom abbreviations which may in some embodiments include domain specific abbreviation sets such as those used in making travel arrangements and standard or customized auto correction settings or both .

Once request has been preprocessed in steps and in step an interpretation process is carried out to determine whether any conditions or rules or other artifacts in one or more loaded knowledge bases are satisfied and if more than one satisfied rule is found choosing an appropriate rule . Interpretation is typically done one processed sentence at a time so following step a check is made to see if another request exists that is whether was there more than one logical request or sentence in request if yes then interpretation process may be repeated with the further request if no then execution passes to step . In step outputs generated by interpretation process are concatenated if necessary for instance if there were two or more logical requests in request and then in step session state variables may be updated. For example as a result of a request one or more steps in a flow may have been accomplished so state variables such as current flow state next flow step and flow history might be updated. As another example frequently more than one flow may be instantiated at a time within a given user interaction session for example when a user may switch between related topics naturally and each topic is the subject of one or more flows in such situations one flow may be activated by a request and a previously active flow might be put on a flow stack until it is reactivated by a subsequent request or by completion of the newly activated flow. In step one or more preconfigured views is selected for rendering output to the user who submitted request or another user for example in the case where a first user s request is to notify a second user of something in this case such a request could be considered as two requests one requiring notification of the second user of the thing requested and the other being notification of the first user that the desired notification of the second user was carried out and possibly whether it was responded to or acknowledged by the second user . Views may be graphical user input elements or may be some other output modality such as spoken text. Once an appropriate view has been selected one or more response documents is prepared and sent in step as a response responses are commonly but not necessarily rendered via hypertext transfer protocol HTTP or a secure version thereof although other output protocols are known in the art may be used according to the invention.

For example according to various embodiments at least some systems for efficiently delivering natural language interaction applications such as virtual assistants may be configured to use natural language interaction engine a core component of a process that manages conversations with users creates responses from its own content base and receives and sends data from and to external systems. Natural language interaction applications according to the invention may understand or use free format sentences even when grammatical or spelling errors may be present. Virtual assistants or other natural language interaction applications according to the invention may allow for change of topic or task interruptions initiation of subtasks or asking of counter questions and then may return to a previous topic or resume a task within a conversation either on request by the user or initiated itself. Natural language interaction applications may be able to handle jargon specialized corporate vocabulary idioms and slang. For example a customer may ask their questions in a conversational style without having to go through a series of yes no queries or standardized prompts and questions. A natural language interaction application might not provide the same response to a given request or question when provided twice as it may for example select a context dependent answer to a question e.g. a different response dependent on the time of the day and may handle deferred requests easily.

When a user submits a request it is generally handled by a dialog interface within interaction environment . Interaction engine manages the execution and state of one or more flows and manages transitions between flows as required by subsequent requests for example when a user changes topics . Dialog interface uses a process such as that described at a high level with respect to to process user input and send it to a interaction engine which carries out an interpretation process such as that briefly described above using language recognition rules from one or more solution data repositories built up from one or more language objects flows language recognition rules and the like. When a language recognition rule has been triggered and interaction engine has taken the appropriate actions and found one or more responses these are sent back to dialog interface which then updates session state and provides a response to the user in an appropriate medium channel or mode or multimodally as described herein. Interaction engine may commonly be integrated and interact with a back office environment which may for example comprise one or more enterprise or third party applications log files and analytics frameworks . Enterprise applications may for example be a customer relationship management CRM system a corporate transaction database a trouble ticket tracking system or any other type of enterprise applications known in the art. Connections between interaction engine and enterprise applications may be any of a number of interface means known in the art including but not limited to web services invocations proprietary application programming interfaces APIs Java remote procedure calls and so forth. Log files may be written directly to a file system or may be processed by a log server not shown which collects information from interaction engine and processes it for instance by parsing raw data and compressing it into a more efficient format for storage and may then either write log files directly to disk or add log entries in a relational database or other data storage system. As logs are loaded either periodically continuously or on demand they may be loaded into analytics framework where either automated or manual analysis or both may be conducted. Analysis may be performed for example in order to identify common dialog models that is sequences of dialog steps or flows that occur often in interactions between humans and virtual assistants or dialog models that tend to result in abandonment or in user s seeking help or expressing frustration with a virtual assistant such analytical results may be helpful in improving one or more virtual assistants by identifying best and worst practices in virtual assistant dialog or flow designs and by identifying problems with language or domain models contained in knowledge base . When such useful lessons are learned they may be passed via periodic or occasional updates to build environment where they can be used by human natural language interface NLI developers to improve an existing natural language interaction application such as a virtual assistant . In some embodiments modifications to solution data may be made automatically as a result of patterns or defects detected by analytics framework for example if it was determined that a certain node in a flow was always abandoned because the applicable language model had an error .

In general natural language interaction engine which for brevity may also be referred to simply as interaction engine makes use of one or more solution data repositories . Solution data will be described in detail below but in general comprises one or more collections of rules and conditions relevant to a particular natural language interaction application or solution . Solution data repositories are generally prepared in a build environment although in many embodiments prebuilt solution data repositories may be supplemented using build environment by addition of organization specific or domain specific data. For example in preparing a travel agent virtual assistant using build environment specific language objects phrases vocabularies and so forth may be added that are likely to be relevant in travel related dialogs and a domain model or ontology of one or more domains and or subdomains related to travel and to likely adjacent subject matter domains for example credit card handling may be created or imported and edited . A knowledge base of solution data is a collection of language recognition rules conditions flows scripts response rules language objects ontologies or domain models.

A virtual assistant request may be generated as discussed in the previous paragraph either by being spoken in various forms being provided as text in various forms being provided by haptics clicking pointing gesturing and the like or by any combination of these. A dialog interface which may be comprised as voice and or text processing applications turns a user input into a request form interaction engine understands. Language processor may prepare evaluate interpret and identify a dialog session use enterprise and third party applications from a back office environment as deemed valuable to process then go through a parsing and interpretation process applying segmentation and tokenization to sentences and words then may generate an appropriate response or perform an appropriate action and send it back through a dialog interface and on back to requestor .

As dialogs take place logging activity within a back office environment captures data pertaining to one or more session events which allows dialogs to be analyzed by an analysis framework at a later time which may provide insights into customer behavior and for possible quality and very specific structural metrics as desired.

Analysis framework may publish metrics and specific dialog criteria as captured by logging and analysis sending criteria on to a build environment for possible updating and inclusion into learning for new requests. Build environment may contain a large array of knowledge divided into items such as language and domain libraries previously captured knowledge and using coding and testing tools create dialogs for a variety of request types. Additional knowledge tools helpful to development process may contain rules for responding various object types for a variety of requests and information from similar request development activities and may be available for language processor as a request session develops.

Interaction environment normally comprises a dialog interface and an interaction processing core engine . Dialog interface performs functions necessary for media specific interactions with users. A principal role of dialog interface is to receive input from a user in order that interaction engine core can successfully determine a user s meaning and the user s intent and to provide feedback or responses back to the user. For example when interactions are conducted using speech interfaces interaction may be either via a phone for example when a virtual assistant is used in place of a conventional IVR application or via a dedicated voice application for example when a user of a mobile application or a web site interacts with a virtual assistant using an application and no phone is involved . In either case or indeed in other cases such as embodiments where other means of exchanging voice communications via audio signals of which many are known in the art are used such as interaction with a building control virtual assistant using an intercom system it is generally necessary to convert speech input into some form of text and conversely to convert text output into some form of speech output although it should be noted there are limited means known in the art for analyzing speech signals directly known in the art as speech analytics technologies and these could be used directly to infer user meaning and intent . Normally this is done by a voice to text conversion layer within dialog interface comprising an automated speech recognition ASR engine and a text to speech TTS engine . Many of each of these components are well known in the art such as those available from Nuance Acapela Ispeech Google and other vendors any suitable ASR and TTS engines may be used according to the invention. In some embodiments ASR and or TTS are deployed integrally to system as shown in while in others they may be deployed as separate services delivered over a network such as the Internet or a telecommunications network such external services architectures may employ ASR or TTS provided by one or more third party service providers. Input may also be received and output sent via text based media channels such as dedicated virtual assistant interfaces for instance when a virtual assistant equipped with a graphical avatar is embedded in a web site and when activated by a user is interacted with directly a social media interface such as Facebook LinkedIn Twitter and the like or any of a number of other text based media channels known in the art but not shown in such as for example text based interaction with a virtual assistant from within a document such as a word processing document a spreadsheet document or a presentation document kiosks such as at airport check in counters and so forth .

Once input has been received it is passed as input to interaction engine core where it is reacted to and one or more responses may be generated. When responses are generated and sent to dialog interface they are converted using TTS to speech form or spoken output if required and delivered to a user via either or both of a voice application or a phone or if response is already in textual form it is passed directly to a text based output channel such as email virtual assistant social media and the like. As a further example illustrating how natural language interpretation can be used to enrich multimodal user interactions consider a combination mobile phone application that proceeds as follows. First a user presses a button to initiate the application which displays or plays a welcome prompt or both to the user. The user may say an utterance expressing her intent or goal for example I would like to arrange travel to Berlin tomorrow morning. The application may then display a selection of radio button style choices on the screen of the mobile phone for example comprising Flights Hotel Car Transport and Recommended . At substantially the same time the application may speak a phrase such as Where would you like to start to make travel plans Select a button or tell me what you want to do. The user and the application may throughout the subsequent interaction use a blend of spoken text and haptic interface conventions to exchange information and satisfy the user s original and any subsequently arising intention . Thus it can be seen that many examples of natural language interaction applications envisioned by the inventors may involve multimodal interactions comprising two or more interface modalities such as speech text buttons images videos vibrations sounds and so forth .

When input is received by interaction engine core it is generally first handled by an input interpretation module which manages the process of handling inputs making various calls to one or more services of natural language interpreter core NLI core which services and associated processes are described in more detail below in order to determine one or more meanings of a user s input and to infer therefrom the user s intent. That is a goal of input interpretation module is to understand what a user wants in order that NLI core in conjunction with input interpretation module can formulate one or more appropriate responses to input . Once a response type or the content of a response is determined output generation module is tasked with creating an appropriate response which can then be sent to dialog interface for delivery in an appropriate medium or via an appropriate channel to the requesting user. In general every time input interpretation module receives and processes a user input and every time output generation module formulates a response and sends it to dialog interface log file generation module generates one or more log files in order to capture a history of interactions between users and natural language interaction applications. In addition more or less detailed information pertaining to processes carried out by NLI core is passed to log file generation module as well in order that not only what transpired is recorded that is the inputs and outputs but also how it was done and why that is a history of decisions made rules and flows executed variables set and so forth in NLI core is captured . NLI core may in order to process user inputs or to create responses require access to one or more external data sources or external services such access is provided by one or more connection APIs which manage interactions between NLI core and possibly also input interpretation module and output generation module and external data sources and services. Such external entities may comprise a plurality of enterprise applications such as customer relationship management CRM systems transaction management systems trouble ticket tracking systems inventory management systems and so forth it will be appreciated by one having ordinary skill in the art that essentially any enterprise or third party applications may be interacted with using standards based APIs or other integration technologies and thus any such enterprise applications known in the art may be used by interaction engine as needed to serve users . Such external entities may also comprise a plurality of third party cloud based applications or any other third party services or applications accessible via public or private interfaces whether standards based or proprietary subject only to findability and security constraints.

NLI core when processing requests received after preprocessing from input interpretation module uses one or more solution data repositories or simply solutions that it loads as required. Solutions generally comprise various combinations of business rules integrations that is configuration data necessary to carry out communications via connect APIs with enterprise applications third party cloud applications and the like custom objects such as script objects used to encapsulate frequently used functionality domain objects which are collections of ontologies or ontological data sets that represent knowledge about one or more subject domains such as travel finance heart health furniture and so forth language recognition rules built up from language objects which may comprise a large number of formal models of various language elements for one or more languages language objects will be discussed in detail below and flows . These solution data components in turn may be preloaded as standardized knowledge bases when a natural language interaction application is created or they may be hand crafted by one or more natural language interaction NLI developer within build environment or both it is quite common to start with a prebuilt set of knowledge base components and then to add new components or extend the added components from within build environment or part of it can be automatically generated according to the embodied invention.

Build environment comprises several components organized in a preferred embodiment into a single application sometimes referred to as a studio from which an NLI developer may access client knowledge and data domain libraries and language libraries . Build environment typically comprises a graphical coding tool and one or more automated testing tools . Thus in a typical scenario a developer building a new natural language interaction application such as a virtual assistant would within a coding tool in build environment load one or more prebuilt language libraries and domain libraries edit these based on available client knowledge and data and then test the resulting knowledge base using one or more automated or manual testing tools in order to test the behavior of her new application prior to its use. Once satisfied with a new solution and with the associated application s behavior the developer would publish knowledge base which would then be available for NLI core to load and use in handling user requests . A key benefit of the build environment approach envisioned by the inventors is that it enables NLI developers who are not necessarily research scientists such as computational linguists to rapidly prototype test refine and then tune natural language interaction applications for particular domains or business needs. This makes it possible to move natural language interaction application development from being an activity typical of linguistic experts with technical skills to one practiced commonly by user without technical or linguistic skills and users such as businesses large and small and other organizations desiring to use natural language interaction applications in production.

According to a preferred embodiment of the invention the process just described is part of an overall closed loop process. The loop is made closed by the availability of an analytics framework which can be used to automatically or manually analyze natural language interaction application performance in order to eliminate poorly functioning dialog elements improve customer satisfaction and so forth. Analytics framework generally takes as input a plurality of log files generated by log file generation module although in some embodiments analytics framework may take input directly in real time from interaction engine for example by receiving requests responses raw user inputs and processed outputs to users as they occur directly from the corresponding components of interaction engine and of course diagnostic information about decision making and operational processes occurring within interaction engine could similarly be obtained as they occur . Thus the log file driven architecture shown and discussed herein should be taken as exemplary and not limiting. In various embodiments analytics framework may comprise one or more of a top response analysis module a dialog browser a category analysis module a log file loader a report generator and a time based analytics module . In any particular embodiment of the invention some most or all of these components may be present within analytics framework moreover in some embodiments one or more of these components or other analytical components known in the art such as business intelligence engines datamarts and the like may be implemented as standalone components separate from analytics framework including for example delivery as web based or cloud based services from a third party analytics platform provider. It should be apparent to one having ordinary skill in the art that any combination or architecture of these and other analytical components may be used according to the invention and that the particular arrangement shown in is intended to be exemplary and not limiting.

Top response analytics module is a software module that computes a ranked list of responses generated by interaction engine to user requests in many embodiments a corresponding ranked list of requests that led to a particular response may be provided often by provision of a drill down capability so that when viewing a ranked list of responses a user may right click or take some other action to see what requests led to that response most commonly . Responses and corresponding requests may be ranked according to one of many numerical or qualitative parameters such as most popular most used most often abandoned from most often viewed most often complained about or any other similar ranking metric. Top response analytics module may automatically generate and maintain ranked lists of responses or may do so on request from an analyst or other authorized user or both . In some embodiments users may be allowed to specify one or more custom ranking criteria as long as they are susceptible of measurement based on data received from interaction engine such custom rankings may be conducted on an ad hoc basis although useful rankings may be added to the last of available standard rankings and could be added to any automated ranking processes as well if desired.

Dialog browser is a user interface element that allows an analyst or other authorized user to view or hear one or more interactions or dialogs between users and natural language interaction applications. Users may be allowed to request random interaction sessions in which case one or more sessions would be displayed for viewing at a time such a view would be useful for example to a marketing analyst who wants to see how users interact by randomly browsing among user experiences. Users may also select one or more sessions for viewing or listening based typically on any of a wide range of filters or selection criteria made available through a user interface of dialog browser . For example a user could request to view all interactions with a specific user or with a specific user application pair or relating to a particular subject such as a particular product or small talk and so forth. Users may also request a specific interaction by providing a time or a session identifier or a customer name and a time or any other filtering arrangement that can distinguish the desired session from all others.

Category analysis module is typically a graphical user interface component that allows an analyst or other authorized user to view one or more or all sessions or interactions that pertain to a particular category such as a category within a domain model for instance by requesting to view a sampling of sessions involving furniture related questions . Users of category analysis module may be able for example to view all or a set of sessions or to view aggregated numerical data pertaining to such sessions that were about home equity loans. While viewing such a set of data or sessions the user might be able to explore for example whether certain questions related to home equity loans are more commonly received from customers that are actually considering taking out such a loan this might be determined for example by displaying columns of data about probability of loan application being taken and probability of closing of loan applications taken and allowing a user to rank sessions by one or another column in order to understand such patterns. It should be clear to one having ordinary skill in the art of data analytics that there are many ways of viewing and analyzing data of this type any of which may be included in category analysis module according to the invention.

Time based analysis module is typically a graphical user interface element that allows an analyst or other authorized user to configure conduct schedule and view the results of various analyses of one or more time based behaviors of natural language interaction applications and or their users. For example time based analysis module may in some embodiments be used to identify trends in user behavior such as the emergence of new dominant questions or shifts in linguistic usage over time. Another example likely to occur quite readily would be the use of time based analysis module to study assimilation of new application capabilities upon their introduction in one or more natural language interaction applications. When new capabilities for instance new language models improved business rules richer interaction modality options or expansion of domain coverage are added to an application such as a virtual assistant their use by those who interact with the modified natural language interaction application is likely to vary over time as more and more users become accustomed to the new capabilities such user assimilation can be studied to learn how long to wait before expecting changes in user behavior such knowledge would be quite useful in avoiding for example the premature termination of an experimental feature which might occur if knowledge engineers misunderstood a normal uptake curve for lack of user interest . Similarly in some embodiments time based analysis of users natural language inquiries may uncover emerging linguistic elements such as the emergence of new buzzwords common off topic questions such as What do you think of the Avengers movie or topics of interest any of which might suggest modifications to knowledge base to maintain a high degree of user acceptance and virtual assistant fluency .

Report generator is typically a graphical user interface element that allows an analyst or other authorized user to design configure schedule edit manage distribution of or view one or more periodic or ad hoc reports regarding operation of interaction engine or virtual assistants hosted by it. Similarly to output from time based analysis module reports generally prove very useful in detecting trends or emerging problems with natural language interaction applications language or domain models or the infrastructure or applications of interaction engine . For example a report might provide tabular and graphical data pertaining to the number of occurrences of various types of interactions using one or more applications and data for each row or category of interaction for each time period might include items such as the number and or percentage of sessions that terminated either prematurely or in an unexpected way the number of sessions that resulted in or involved a product sales inquiry the number of those that resulted in a sale and so forth. It is common in the art for reports to be useful in understanding such issues as diurnal patterns of user behavior for example users might be more likely to conclude purchases during early evening hours and might engage in a higher level of off topic small talk in the hours after midnight . It should be clear to one having ordinary skill in the art that any of the many infrastructure data presentation drill down and drill up filtering and other options known in the well developed art of enterprise application reporting may be used according to the invention. Of course the range of inferences that might be made through use of analytics based on natural language interaction engine data is quite broad. For example in some implementations it may be desirable to identify particular channels media types such as email phone kiosk instant messaging and so forth particular operating systems particular browsers and similar specifics regarding a plurality of users. As an exemplary use of such data it may be that users of Macintosh computers from Apple might be found to demonstrate certain typical habits and preferences knowledge of which might allow for effective tailoring of natural language interaction engine to better serve those customers.

Log file loader is typically a graphical user interface element that allows an analyst or other authorized user to manage the configuration and scheduling of log file loading or to configure real time data acquisition when that approach is taken to gathering data from interaction engine and to carry out ad hoc log file activities such as log file pruning exporting of log files to other systems archiving or configuring archival of log files onto long term storage systems and so forth.

In most embodiments the various components of analytics framework are tightly coupled for instance by allowing an analyst or other user to move directly from one tool or view to another with a simple user interface action such as selecting a button choosing a tab or picking a different view from a context sensitive menu. For example a user viewing a list of sessions in a category analysis screen might select one or more sessions from a list for example by shift clicking them using a mouse or using a check button interface element and then select browse dialogs to view the selected sessions in dialog browser . It should be appreciated by one having ordinary skill in the art that many styles of linking of related user interface elements and analytic functionality exist in the art any of which may be used according to the invention.

Language objects are linguistic rules that have meaning and structure and that are used to recognize words phrases or a combination of both. A language object may include one or more synonyms and phrasings that depict the same idea e.g. different ways of answering affirmatively such as yes yeah okay of course by all means sounds great give it a go and so forth . A language object may contain the required grammatical alternatives for a word. For example for to be a language object might contain among others tokens words such as be am is are were was and so forth. By convention a special character such as may be used as the first character in the name of a language object to signify that the name is that of a language object in some embodiments a lexical convention of this sort assists natural language interaction engine in identifying the beginning of a sub rule such as a language object.

The following sections describe different types of language objects that may be used to build a language object base as part of knowledge base . Language object types are listed ordered roughly by their increasing degree of linguistic complexity.

LEX language objects are the smallest most elementary building blocks of a language object library from which more complex language object structures are built. That is LEX language objects generally correspond to and can taken as basic dictionary entries. A LEX language object may correspond to a lemma and capture a full set of inflectional forms or variants of a given word irrespective of whether that set may have several different meanings. There typically will be only one LEX language object created for a lemma and its set of inflectional forms as is illustrated here by a language object representing the noun bark 

It will be appreciated by one having ordinary skill in the art that there are any number of other object labeling approaches that could be adopted these exemplary embodiments are not to be taken as limiting. For purposes of consistency the examples given below will follow one approach. It will also be appreciated by one having ordinary skill in the art that inflectional forms of LEX language objects will not be necessary if techniques such as lemmatization or morphological analysis is used as part of the preprocessing of interaction engine.

LEX language objects always belong to a specific part of speech. If more than one part of speech is derived from same stem separate LEX language objects are created for each one of these. For example 

Identical words may sometimes have a similar part of speech but may inflect differently. In that case they may correspond to two different lemmas and therefore possibly two different LEX language objects may need to be created one for each word. For example the word land in Swedish may have two meanings country and garden patch which share several inflectional forms but not all of them. This may be modeled as 

MUL language objects may form the multi word correspondence to LEX language objects as they capture dictionary level entries of multi word units that are meant for use as building blocks in higher level language objects. MUL language objects may be generally built from LEX language objects. MUL language objects may only contain inflectional variations of a multi word unit captured by their kernel name as opposed to higher level language objects which may also contain synonymic variations thereof . Exceptions to this general rule may be constituted by slight changes in word order and variations in function words. Phrasal verbs verbs with a preposition form typical MUL language objects for example the phrasal verb give up may constitute a MUL language object comprising two LEX objects give and up . MUL language objects may also be used for other kinds of word groups that often appear consecutively therefore it may be convenient to have language objects that may be referred to when building higher level language objects.

Mixed language objects group LEX language objects which represent lemmas deriving from a same lexical root e.g. happy happily and happiness. This type of language object may be referred to as a mixed language object since it may contain entries with various parts of speech for example a mixed language object could comprise a language object further comprising the LEX objects LEX.HAPPY.ADJ LEX.HAPPILY.ADV and so forth.

Since linguistically a set of lemmas deriving from a same root is fuzzy a MIX language object may be defined with various degrees of restrictiveness as deemed appropriate in its respective context of use. Due to a potentially diverse list of language objects referenced by a MIX language object names of MIX language objects typically do not reference a specific part of speech. Grouping only an adjective and its corresponding adverb rather than all words deriving from a same root may be used in the same context. In this case only a certain subset of all possible parts of speech may be included in the language object. This may be signaled in a language object name by adding a corresponding part of speech suffixes in alphabetical order separated by underscores. Included are parts of speech suffixes in those cases to provide a clearer description of the language object s content. Word Level Synonym Language Objects SYN. 

Since natural language may have various ways of expressing a same or very similar concept language object library needs structures to represent types of synonymy. Synonymy may occur at word level for example different words denoting a same concept or at phrase level for example different linguistically more complex ways of expressing a same concept . Synonym language objects may similarly either be at word level or at phrase level. SYN language objects are conventionally synonym language objects at word level.

All words grouped in a SYN language object are interchangeable. Phrase level language objects are marked as PHR language objects see paragraph below referring to PHR language objects . SYN language objects may group LEX and MUL and occasionally also PHR language objects to represent words or phrases sharing the same or a very similar meaning.

There are of course other possible approaches to grouping. Words with similar meanings may be grouped in more than one way with different objectives and with varying degrees of granularity. It will be appreciated by one having ordinary skill in the art that there are any number of other grouping approaches that could be adopted these exemplary embodiments are not to be taken as limiting.

Words may generally have more than one meaning their senses. Note that SYN language objects may be defined with respect to a certain sense of a word. An adjective sharp may have at least two senses an original one used with knives for instance and a metaphorical one used for describing intelligent people. He is really sharp means the same as He is really intelligent yet the knife is sharp cannot be replaced by the knife is intelligent. Therefore these two senses may be represented by different SYN language objects. One may be able to think of a context in which all words grouped in a SYN language object are interchangeable. Since words may have several senses basic SYN language objects are sometimes context dependent.

Proper synonyms may typically belong to a single part of speech. This may hold for basic SYN language objects. Whenever entries in a SYN language object are of the same part of speech an appropriate part of speech suffix may be added to a language object name. If a language object contains entries with different parts of speech no suffix will generally be added again naming described herein is merely exemplary of one embodiment and not limiting .

SYN language objects may be used to capture close synonymic relationships between words this may be referred to as a language object having narrow semantic scope. One may wish to capture synonymic groupings that semantically are somewhat looser and hence have a wider coverage. To mark an extended coverage of these wider scope synonym language objects we add the suffix .WIDE to the language object name.

PHR language objects may represent all possible ways of expressing a phrase or partial sentence for example What is the price of X Agreement Consent or How long will it take for X to happen A linguistic phrase may be arbitrarily complex and so may PHR language objects. Some PHR language objects may capture noun phrase units while others may capture several sentence constituents. As such PHR language objects may typically reference LEX MUL SYN and other PHR language objects. For example a PHR language object may refer to other PHR language objects as when PHR what is your name is composed from phrases tell me what is as well as LEX objects your and name .

If a PHR language object is comprised of content light words such as I is what extra attention may need to be paid to word order. It should be noted that other words may come between conditioned constituents when using a operator. Important PHR language objects may be tested against real inputs. For example a code may be restricted by for number tense or any other morphosyntactic feature where appropriate. In a language object like PHR.CAN I BUY it does for example not make sense to allow for past tense forms of a verb.

LIST language objects contain lists of concepts such as colors car brands and countries. LIST language objects may be composed of other LIST language objects. List language objects that list entries of the same part of speech POS may also indicate this part of speech in language object name.

Theme language objects may group words on basis of theme. Words generally have different meaning but are associated to a common theme. One may think of theme language objects as keyword language objects. An ideal THEME language object may not be dependent on context but signals a theme regardless of where it is triggered. For example a THEME language object could be CAR and could comprise various synonyms for car as well as other language objects such as car parts a LIST object car brands and so forth.

REC s are larger language objects which may not fit under PHR or any other category. They may be very wide or rather specific but may not have consistent structure. Both their scope and naming may be highly pragmatic.

Some high level language objects may be very likely to occur in many different types of projects such as questions about a company about opening hours or driving directions to stores or offices. These language objects may occur in many instances so it may be economical to code a linguistic part of them only once and adapt a comparatively minor set of differences in content from instance to instance. This set of language objects may be referred to as PROJECT language objects PROJ . To make PROJ language objects recognizable from project to project they may be named the same across projects. It will be appreciated by one having ordinary skill in the art that condition codes may be adopted based on individual requirements of a project at hand.

A language object structure may provide us with capability to refine broader language objects by imposing specific constraints or filters upon them. One application of a constraining operation for example may be to obtain only past tense forms for a given verb from a language object representing all inflectional forms of that verb. To this effect a constraint operator may be used to selectively form conditional subsets of entities represented by a given language object. As an example consider a need to obtain only past tense inflections of the verb to go . While a new language object may be created to capture those specific entities we may also use a constraint operator on a generic language object to filter for its past tense forms.

It should be understood by one having ordinary skill in the art that the various language object types illustrated in are exemplary and more or fewer types of language objects including language objects of distinct types not shown in may be used according to the invention. For example if lemmatization is applied LEX language objects would not need inflectional forms. Moreover it will also be understood that specific syntactical and naming conventions used herein are also exemplary and other approaches known in the art may be used to label language objects without departing from the scope of the invention.

As shown in in order to build a language library while creating a virtual assistant one typically begins with morphological features within a language model . As words are added a balanced corpus a sample of language usage such as for example from a particular population of texts and logs to provide a history of actual usage. Data analysis of word grouping frequencies of word usage statistics of when how often where and others may yield a better more accepted by a virtual assistant s target audience. An inflector acts as an extender when building LEX language objects to generate inflected forms to extend word and therefore sentence understanding in a variety of expressions of language usage. As we continue to build upon LEX language objects building an eventual PHR for a potential high level word structure in another embodiment of the invention with usage of lower level language objects to expand the library. Creation of high level word structuring toward a PHR brings us to a goal of filling word gaps using word libraries and eventually to expanding libraries . As base words LEX are turned into groupings and more than one PHR library elements are put together to form a general flow . This process may be repeated any number of times as needed to create language recognition rules which may then be used to create flows which may in turn by assembled into one or more solution data repositories that may be used to implement for example a virtual assistant or any other natural language interpretation application.

In general natural language interaction applications may be rapidly developed using systems and methods of the invention for example using the process described below with reference to . As an overview such rapid development generally starts with a set of possible user inputs to which a natural language interaction application in development should be able to respond that is a corpus of sample inputs and possibly also corresponding outputs typical of what is expected to be handled by the natural language interaction application being developed is used to initiate development . These inputs and possibly outputs are analyzed and as a result may be organized into a manageable structure generally where closely semantically related inputs outputs are grouped together . For each group of inputs so obtained a variety of acceptable forms of response may be provided for instance by providing a frequently asked question list and corresponding answers . Finally the inputs may be automatically or semiautomatically mapped to a limited set of predefined response the set typically comprising a plurality of responses to expected inputs as well as responses for unforeseen inputs such as safety net responses this step involved automatic or semiautomatic coding of language recognition rules language conditions linguistic grammar rules or the like. Such automated or semiautomated coding of language recognition rules may typically use a natural language parser that may segment simplify perform part of speech POS tagging as well as various types of semantic and syntactic analysis. Autocoding based on natural language processing NLP analysis of inputs and responses combines different patterns from one or more preexisting language libraries into various language recognition rules which may then be used to automatically map each input into a corresponding appropriate response by creating flows. Patterns language objects and rules language recognition rules each conform to a specific syntax various non limiting examples of which are provided herein they may alternatively comprise a plurality of lexicons grammar rules ontologies regular expressions and other representations of syntactic and semantic information known in the art. Language recognition rules may be formally compared merged split into independent parts and manipulated in various ways with regard to their semantic value. Moreover in most embodiments language recognition rules are evaluated in a defined order so variant orderings of language recognition rules may affect behavior of natural language interactions and accordingly various automated ranking processes may be used to ensure an optimal arrangement of language recognition rules that is one that leads to acceptable behavior of resulting natural language interaction applications . This brief high level summary is intended to place the various detailed descriptions of exemplary embodiments that follow into context.

Clustered text fragments may be referred to as concepts and represent semantically related text fragments it is an object of step to group text fragments within an input corpus into groupings that would be sensible to a human and for this reason clusters are available for viewing and editing by developers designers and other users see discussion below pertaining to . Once a given input text corpus has been automatically clustered typically many concepts sets of semantically related inputs will have been identified and also a portion of the input text items may remain uncategorized that is not assigned to at least one concept . This is quite common in automated clustering algorithms as outliers and inconclusive groupings may be ignored depending on how a particular clustering algorithm is configured and applied. In some cases a designer or developer may elect to perform additional manual clustering of inputs into existing or new concepts effectively applying human judgment to identify relationships that may not have been detected by an automated clustering algorithm. In step each identified concept may be taken as input to an automated code generation method carried out for example by automated coding tools with or without supervision by a designer or developer using development user interface . Automated code generation is described in more detail below with reference to . Automated code generation and supervised and manual code generation may use concepts to create language recognition rules for EI clusters and to organize them into flows. In some cases some elements of new concepts comprise one or more words or textual elements that are not contained in any language objects of language libraries or are present in only a set of language objects none of which might for example exhibit an appropriate level of generality or specificity for use in conjunction with a particular concept or set of inputs . Also while reviewing language recognition rules and flows created in step a developer might determine that a particular word or concept requires a new language object or requires an existing language object to be supplemented by a new language object of greater or lesser granularity or scope. Alternatively the system itself may identify new words that are not part of a language object library but that recur in many example inputs in a cluster. Another option is that a concept identified a group of EIs may actually be a word or word sequence that does not have any corresponding language object. So the identification of a new LO LEX LO may be automatic and actual creation of a new LO may be assisted by a user if needed or it can be created automatically by automatically identifying part of speech and using an auto inflector to generate appropriate word forms . Thus in step new language objects may be created automatically or semiautomatically for instance using a pop up language object editor available from a context sensitive menu when needed by a user. In step automated recommendations for improvements of language recognition rules flows and language objects created or edited in steps and may be carried out. For example automated testing tools might identify a conflict between a set of language recognition rules for example a tangle tangle detection and resolution is described in more detail below with reference to and make appropriate recommendations to correct the detected problem. In step a designer developer or other user may carry out one or more of the recommendations provided in step . Finally after all or a substantial portion of the concepts generated in step have been used to generate language recognition rules and after conflicts tangles missing language objects and other issues have been identified and corrected in step method outputs a candidate virtual assistant or other natural language interaction application that may be stored in solution repository for further testing and possible deployment.

In general when building natural language interaction applications according to the invention it is very important to have high quality well structured language object libraries or lexical grammar rules as these libraries are the raw material from which language recognition rules and ultimately natural language interaction applications are built. Language object libraries are used variously according to the invention to define conditions language recognition rules used for matching user requests with prepared responses filtering relevant or less relevant portions of user requests from irrelevant or less relevant portions respectively defining or organizing terminology and vocabulary in each solution s domain recognizing concepts shared by example inputs and output texts as well as by different example inputs and identifying relationships between concepts automatically although it should be appreciated by one having ordinary skill in the art that this list is merely exemplary and not exhaustive or limiting . It is evident that several of the exemplary uses listed above depend not only on the content of specific language objects but also crucially on one or more relationships between language objects. In particular it is generally useful to arrange language objects hierarchically for example according to an ontology in the sense that objects higher in a hierarchy are broader in their linguistic scope and those lower are conversely more linguistically narrow. For example is an illustration of an exemplary language object hierarchy according to an embodiment of the invention. The hierarchy shown in would typically be a subset of a larger language object library. It comprises a parent node that is associated with a language object labeled ANIMAL and represents the very broad linguistic concept of animal for example any species belong to Kingdom animalia. Parent object ANIMAL has two children PET and WILD ANIMAL which each correspond to high level linguistic concepts associated with certain types of animals. Clearly there are many other children that could belong to language object ANIMAL for example CHORDATES INVERTEBRATES and so forth in general a particular choice of objects to include in a particular language object hierarchy will be very dependent on a particular ontological domain to which a natural language interaction application is applied. Concepts such as INVERTEBRATES and CHORDATES are not likely to be useful for dealing with everyday life for example distinguishing between a need for a pet store referral and a need for animal control services each of which might be indicated by the presence of language objects PET and WILD ANIMAL respectively any particular parent language object such as ANIMAL may have widely varying children in various language object libraries depending on particular domains of interest although in general library models and standards might provide basic starter kit language object libraries with standardized hierarchies which can then be edited and extended to suit particular domains and natural language interaction applications for example standardized ontologies such as OpenCyc WordNet and the like .

In the example hierarchy given each child of the base parent that is PET and WILD ANIMAL acts as parent to its own potentially complex family of descendants. For example PET has children DOG.SYN an object of type SYN that comprises various forms of the word dog and its synonyms CAT.SYN and HAMSTER . DOG.SYN in turn has children DOG in this case a basic LEX object of dog and its inflections which is narrower than DOG.SYN for example because pooch would not be included in DOG but would be in DOG.SYN LABRADOR and SHAFFER DOG consists of the terminal nodes Dog Dogs Dog s Dogs which is a very specific set of inflective variants of DOG . Similarly WILD ANIMAL has children WOLF FOX and BEAR FOX includes the word forms Fox Foxes Fox s Foxes . It should be noted that while the illustrated hierarchy is fairly simple and in some sense linear each child is related to any ancestors in only one way language object hierarchies are not so limited. For example ANIMAL could also have a child object CANINE not shown which could then have among its children both DOG.SYN from the PET family and the pair WOLF and FOX from the WILD ANIMAL family and many other similar relationships might exist creating a language object relationships diagram that while it has hierarchy implicit within it some things are higher or broader in scope than others may be modeled or viewed as a graph or a network rather than a tree. It will be appreciated by one having ordinary skill in the art that any arbitrary linguistically sensible relationships between concepts or language objects may be used according to the invention.

According to the embodiment each language object may be associated with a language condition which when satisfied indicates that a subject text matches or includes the associated language object. For example a language object SIGN UP might be associated with the conditional rule SIGN up where SIGN is a LEX language object is an operator meaning immediately followed by and up means the literal word up such a language object would be triggered for example by an input such as I want to sign up for a cable TV subscription which might also trigger language objects such as WANT CABLE TV and NEW SUBSCRIPTION . Other operators that may be used in language conditions or language recognition rules may include but are not limited to means followed by but not necessarily immediately means logical OR means logical AND means logical NOT means a wildcard operator and so forth. Other choices of symbols for logical primitives may be chosen of course one having ordinary skill in the art will recognize that operators such as those described are typical logic operators and are not dependent on any particular symbols used. Moreover in various embodiments one or more variants of basic logical operators may be used for example since operands may themselves be language objects comprising further executable code or logic in some embodiments both slow and a fast immediately followed by operators may be provided indicated for example by corresponding symbols such as and respectively . Slow means that only the left hand language object operand is evaluated first the right hand language operand is only evaluated if the left hand operand s logical condition is satisfied use of slow operators may actually improve performance since unnecessary operations would be avoided . Furthermore language recognition rules according to the invention may be pattern based or grammar based as will be appreciated by one having ordinary skill in the art.

With these operators in mind various rules may be used to assist in automatic creation of language or concept hierarchies. For example a prioritization rule may provide that A B A A B A B A B which means a language object with the leftmost logical expression as a condition i.e. A OR B would be an ancestor of each the other language objects A would be an ancestor of A B A B and A B A B would be an ancestor of A B and A B and A B would be an ancestor of A B . Another prioritization rule may be that if a first language object A is preceded by an operator i.e. NOT or an operator i.e. MAYBE in a condition code for a second language operator B then the relationship between A and B is undefined. Similarly where a relationship exists between A and B that comprises a mixture of the OR operator and one or more of the AND Followed By or Immediately Followed By operators then the relationship between A and B would be undefined. Another common prioritization rule is that if A B and B C then necessarily A C. It will be appreciated by one having ordinary skill in the art that these prioritization rules are exemplary in nature and other rules could be used according to the invention as well.

Users of build environment will commonly have widely varying degrees of technical and linguistic skill. For example according to some embodiments business users may be provided with access to build environment to enable them to edit existing natural language interaction applications or even to build new ones without having to directly write complex code in other cases advanced natural language developers may choose to modify or test a globally used language library containing many language objects and language recognition rules and would typically elect to use more advanced tools that depend on a user s having greater familiarity with technical details of systems and methods of the invention. Therefore in most embodiments various means of interacting with natural language interaction applications ranging from highly abstract graphical representations to advanced code editing tools will be made available to various users as needed. For example in various embodiments language objects may be presented to users as a auto formatted text with code highlighting b auto formatted text with linguistic commentary added c syntax trees or graphs d schemas with LOs and words used as building blocks. In many such visualizations users will be provided with a capability to select an element such as an LO or a word and to drill into or to expand it to see any embedded content or to toggle between different views easily.

According to the invention a language object s scope reflects the type of user input that might match the language object LO . For example the following list shows a variety of potential descriptions of LOs in which the portion in parentheses would typically be added by a user to enhance legibility of natural language interaction application code and the remainder would be added automatically 

In general addition of language objects may be desirable when a user desires to link two concepts to add an unrecognized concept or to edit an existing recognition. For example to link two concepts perhaps one from a question and one from an associated answer in order to add them to an existing recognition a Add a new language object window or dialog box may be opened with the concepts to be linked present as graphical objects within the new window or dialog box. If either of the concepts already exists within a language library or a solution the user may be presented with a drop down box or similar graphical interface element to allow the user to select an appropriate scope for the concept e.g. LEX SYN PHR THEME etc. . In general if any of the concepts do not already have any associated language objects a user may be prompted to create one and optionally then be prompted to use an inflector and or a part of speech tagger if available. In some cases a user may want to add an unrecognized concept from a question to a recognition even if it was not repeated in an associated answer in this case only one element the unrecognized word would be presented in the ensuing add a new language object window or dialog box but everything else would proceed as just described. In some cases a user may desire to edit an existing recognition for instance by adding a concept from a question or answer by adding a concept to the recognition. If the concept to be added was not previously represented by a language object an inflector may be invoked otherwise for instance to add a new SYN LO the user is presented as before with an Add new language object dialog.

A business user might want to remove an element from a language object condition either to make it more narrow e.g. removing CAT from ANIMAL CAT DOG BIRD or wider e.g. removing WILD from WILD ANIMALS FOX WOLF WILD CAT . In either case the user will generally be able to make a choice as to whether the change will be local i.e. applied only to the current place recognition or condition of another LO where the LO is used or global where the LO itself is changed . Clearly a global change may influence all the other places where the same LO is used. In this case the user should be warned of consequences and see the list of triggering changes which new inputs variants receive other answers than before if that macro gets changed. Another way to reduce scope of a LO could be to remove a subtraction of it on the outside ANIMAL CAT instead of changing the same LO on the inside . Similarly a business user might elect to remove elements from a language object condition or language recognition rule. Generally the business user may drag a selected word phrase from a sentence to a puzzle piece within a graphical visualization of an LO which adds it automatically and the user may then select an appropriate concept level i.e. only the dragged word or all its inflections or its inflections and synonyms and so forth or create a LEX LO for it with the help of an inflector. Similarly a business user may click on any puzzle piece operator or LO to see a list of alternatives it may be replaced with more or less strict LO s or operators . The change can be saved locally or globally as described above and triggering effects of the change may of course preferably be shown to the user.

We introduce the notion of node contexts as an alternative way for exploring semantics of a language condition syntax tree and for determining semantic similarity and relations between two syntax trees. A node context is the complete set of paths between a specific node and all leaves in the tree containing the node. The set may be divided into three subsets the above context the below context and the side context. Each context path may be considered as an array of context segments and each context segment consists of a plurality of elements taken from the following set of three elements 1 Vertical direction up or down 2 Horizontal direction left right or n a and 3 Node content an operator or a language object word or script condition. Horizontal direction is generally only relevant for order aware operators i.e. the followed by and directly followed by . After writing out a path as described above the path needs is generally compressed through the following steps in the given order starting from the beginning until no more compression can be performed 

While in some situations dividing a tree may be useful in others it may be useful to merge several trees into one logically equivalent tree. Accordingly is a process flow diagram illustrating a method for merging language recognition rules according to an embodiment of the invention. According to the embodiment in step each tree i.e. language condition or language recognition rule to be merged is split into its top level disjuncts using method . Then in step each distinct pair of disjuncts is considered in turn i.e. if two trees which each could be decomposed into three top level disjuncts were to be merged there would be six top level disjuncts which would then be handled in fifteen separate iterations of step since there are fifteen distinct pairs of disjuncts . For each pair in step the two disjuncts are checked for equivalence meaning they are converted into a form such as that shown in and then compared to each other . If the two disjuncts are equivalent then in step the more verbose of the two is removed from the pool of top level disjuncts the more verbose disjunct is that which has more nodes in it and execution returns to step to consider the next pair. If the two disjuncts are not equivalent then in step a check is made to see whether one of the disjuncts is smaller in scope than the other if so in step the smaller scope disjunct is removed from the pool and execution returns to step for consideration of the next pair of disjuncts. If neither of the pair is smaller in scope than the other then in step a check is made to see whether replacement of a followed by operator or by an AND operator is possible. Specifically if both trees have a followed by operator in their top nodes and the left child of a first condition s top node is equivalent in the sense of to the right child of a second condition s top node or vice versa then the two conditions are replaced by a new condition that equals the smaller of the two original conditions where the top node s content a followed by operator is replaced by an AND operator. For example by this rule A B B A A B. This substitution is carried out in step and execution returns to step for consideration of the next pair. If the test of step is not met then in step a test is made to determine whether the pair of nodes one from each tree has equivalent above contexts if so then the two conditions are recursively merged in step and in step the more compact tree is selected and the other discarded and execution returns to step for consideration of the next pair.

Once all pairs have been evaluated i.e. once execution arrives at step then in step one pair of disjuncts is merged by creating a temporary tree T with as its top node and each of the two disjuncts as children of the top node. Then in step a test is made to see if there remain more disjuncts remaining in the pool if so then in step T is merged with a next disjunct with a new top node added the previous version of T as one child thereof and the next disjunct as the other child. If there are no more disjuncts in step then in step the process is complete and a merged tree T is available for use.

Some general rules may be applied during this process of automatic solution code generation. For example texts from output nodes in the same flow as a current condition located above or below it in the flow are considered relevant. If there are more than some specified number of these texts then only the nearest subset of them may be considered nearness being for example a measure of the number of input consuming transitions between a specific input and the desired output . Also texts from output nodes from other flows and from nodes in other branches of a current flow than the current condition s node are generally considered irrelevant.

Next in step any words in the text string being processed that belong to one or more stop lists typically comprising language objects classified for example as functional words LEX FW such as the a his and the like are removed from all sets. Then in step from each EI s set of matching language objects and words at least two objects are chosen following these criteria 

Once step is complete in step a language recognition rule or grammar rule is created for each example input by merging any language objects found in step in the order in which they appear in the example input with a FOLLOWED BY operator placed between each language object. Finally in step rules for all example inputs of the same input group may optionally be merged following the process described above with reference to . This optional step may be omitted when language condition improvement is contemplated for example by tuning language conditions using negative example inputs see or using a condition s local flow or global context both of which are described below with reference to respectively .

Clearly there is a problem since input EI1 does not trigger the condition that would give the response R1 as expected thus requiring an automated means of detecting the problem and identifying an underlying cause so that the cause may be automatically corrected or at least brought to the attention of a user if automatic correction is impossible. Accordingly in step a check is made whether any concept is shared by more than one input response pair in a relevant knowledge base. In the example under discussion the answer to this is YES since concepts A and B are shared by two input response pairs each creating two tangle candidates 

Next in step a check is made to determine if any tangle candidates contain a question variant that receives an incorrect answer. Again the answer here is YES since both tangle candidates contain EI1 which receives R3 an incorrect response . Then in step a check is made whether a wrong response to any input variant comes from the same tangle Here the answer is NO for the tangle candidate sharing the concept A since it comprises Pair 1 and Pair 2 neither of which correctly generates R3. On the other hand the answer is YES for the tangle candidate sharing the concept B since Pair 3 does correctly generate R3. These results localize the problem to the following tangle 

Once a tangle that causes a problem has been identified the general approach is for an automated coding tool according to the invention to expand the tangle candidate so that a user can obtain a good overview of the problem and can perform a series of actions to convert the expanded tangle to a well formed complex flow i.e. one without a tangle . Accordingly is a process flow diagram illustrating a method for expanding a tangle in a set of language recognition rules according to an embodiment of the invention. According to the embodiment in step specific tangle is chosen i.e. a concept or concepts is are shared by all EIs in the tangle . Then in step all other concepts used by the tangle s EI recognitions are listed. In step branches of the core concept are created for all other concepts. In step a new set of sub branches for all existing among the input response pairs concept combinations is created as well as an additional other sub branch in step . In step more narrow versions sub concepts of an existing branch are added as sub branches of each other rather than as separate parallel branches. In step existing EIs may be attached to corresponding nodes in the tree and in step any nodes without a corresponding EI are marked for example using a question mark as candidates for new safety net or other responses that might improve input coverage of the system so they can be reviewed as such by a user .

Accordingly a plurality of identified concepts such as account card branch and so forth may be displayed in for example a tree map visualization as rectangles in an upper part of screen along with a similar rectangle labeled unclassified inputs and representing user inputs that were not considered similar enough to any other inputs in order to fall into a cluster group and which may require manual assignment . In some embodiments the size of each rectangle corresponds to a relative number of inputs that matched the applicable concept so that larger rectangles represent more prominent or frequently occurring concepts.

According to the embodiment more precise clusters can be created automatically by finding co occurrences of concepts which are referred to as associations see discussion pertaining to .

According to the embodiment various user interface elements may be provided to assist a user in concept assignment and analysis of semantic concepts of a corpus or a plurality of corpora . For example a search bar may be provided to allow a user to enter a text string comprising one or more words or word fragments so that a user may query via screen to identify all concepts associated with a given word a concept is associated with a word in this sense when at least one input comprising the word is present in the set of inputs that have been assigned to the concept . Similarly a filter bar may be presented to allow a user to filter concepts in an analogous way so that only concepts that contain one or more elements from a text string entered in filter bar will be displayed thus if account were entered in filter bar only concepts such as Account Bank Account set savings account and the like would be displayed . Buttons for viewing concepts associations and categories may also be provided so that a user can easily switch between related views that may be provided illustrates an example of a concepts view . An input details box may be provided to provide easy viewing of a range of concepts and then may easily browse through all of the inputs that comprise any concept of interest or a plurality of selected concepts as in most embodiments screen will support multiple selections via common user interface conventions such as control click . For example input details box is shown for a situation where Unclassified Inputs is selected and informs a user in a status bar that acts as a header for input details box that there are in this case 4 338 inputs for the concept Unclassified Inputs . Input details box generally illustrates a selection of inputs associated with a selected concept or set of concepts such as for example an input of careers of which 62 instances were present in the corpus or plurality of corpora being analyzed. Various optional sliders or other elements may be present to allow a user to easily zoom in or zoom out or otherwise navigate the data for instance by varying a total number of concepts to be shown in a given mosaic view display or by limiting a frequency range of concepts to be displayed. Furthermore in most embodiments various context sensitive commands are available by selecting or clicking on various elements of screen . For example a user might right click on a concept or select a plurality of concepts and then while they are selected right click one of the selected concepts in order to bring up a context sensitive menu that provides various actions that may be taken by the user with respect to those concepts. Similarly one or more inputs may be selected and then a user may right click to activate a context sensitive menu that provides input relevant functions including assigning an input to a concept or viewing a plurality of inputs directly in their raw form in order to better understand an actual conversational context in which the input was received. It will be appreciated by one having ordinary skill in the art that the user interface conventions illustrated in are exemplary of various ways that a user may be provided intuitive means to explore a natural language interaction application under development and its associated inputs outputs language recognition rules and the like moreover it will be appreciated that any number of other user interface techniques known in the art may be used according to the invention as well.

According to the embodiment various user interface elements may be provided to assist a user in analysis of semantic associations of a corpus or a plurality of corpora . For example a search bar may be provided to allow a user to enter a text string comprising one or more words or word fragments so that a user may query via screen to identify all associations related to a given set of words or word fragments an association is related to a word in this sense when at least one input comprising the word is present in the set of inputs that have been assigned to at least one of the concepts that define the association . Similarly a filter bar may be presented to allow a user to filter associations in an analogous way so that only associations that comprise a text string entered in filter bar will be displayed thus if Account were entered in filter bar only associations such as Account Balance Close Account Open Savings Account and the like would be displayed . Buttons for viewing concepts associations and categories may also be provided so that a user can easily switch between related views that may be provided illustrates an example of an associations view . An input details box may be provided to provide easy viewing of a range of actual inputs that are comprised by a selected association or a plurality of selected associations as in most embodiments screen will support multiple selections via common user interface conventions such as control click . For example input details box is shown for a situation where Non Associated Inputs is selected and informs a user in a status bar that acts as a header for input details box that there are in this case 4 338 inputs for the concept Non Associated Inputs . Input details box generally illustrates a selection of inputs associated with a selected association or set of associations such as for example an input of careers of which 62 instances were present in the corpus or plurality of corpora being analyzed. Various optional sliders or other elements may be present to allow a user to easily zoom in or zoom out or otherwise navigate a natural language interaction application and its data for instance by varying a total number of associations to be shown in a given mosaic view display or by limiting a relevance range of associations to be displayed. Furthermore in most embodiments various context sensitive commands are available by selecting or clicking on various elements of screen . For example a user might right click on an association or select a plurality of associations and then while they are selected right click one of the selected associations in order to bring up a context sensitive menu that provides various actions that may be taken by the user with respect to those associations. Similarly one or more inputs may be selected and then a user may right click to activate a context sensitive menu that provides input relevant functions including assigning an input to a concept or viewing a plurality of inputs directly in their raw form in order to better understand an actual conversational context in which the input was received.

According to the embodiment various user interface elements may be provided to assist a user in analysis of semantic categories of a corpus or a plurality of corpora . For example a search bar may be provided to allow a user to enter a text string comprising one or more words or word fragments so that a user may query via screen to identify all categories related to a given set of words or word fragments a category is related to a word in this sense when at least one concept or association comprising the word is present in the set of inputs that have been assigned to at least one of the concepts or associations that in turn have been categorized as belonging to the category . Similarly a filter bar may be presented to allow a user to filter categories in an analogous way so that only categories that comprise a text string entered in filter bar will be displayed thus if Account were entered in filter bar only categories such as Open Account Current Account Savings Account and the like would be displayed . Buttons for viewing concepts associations and categories may also be provided so that a user can easily switch between related views that may be provided illustrates an example of a categories view . An input details box may be provided to provide easy viewing of a range of actual inputs that are comprised by a selected category or a plurality of selected categories as in most embodiments screen will support multiple selections via common user interface conventions such as control click . For example input details box is shown for a situation where Savings Account is selected and informs a user in a status bar that acts as a header for input details box that there are in this case 86 inputs for the category Savings Account . Input details box generally illustrates a selection of inputs associated with a selected category or set of categories such as for example an input of do you offer savings accounts for trustees of which two instances were present in the corpus or plurality of corpora being analyzed. Various optional sliders or other elements may be present to allow a user to easily zoom in zoom out or otherwise navigate the data for instance by varying a total number of categories to be shown in a given mosaic view display or any other data visualization techniques known in the art or by limiting a relevance range of categories to be displayed. Furthermore in most embodiments various context sensitive commands are available by selecting or clicking on various elements of screen . For example a user might right click on a category or select a plurality of associations and then while they are selected right click one of the selected categories in order to bring up a context sensitive menu that provides various actions that may be taken by the user with respect to those categories. Similarly one or more inputs may be selected and then a user may right click to activate a context sensitive menu that provides input relevant functions including assigning an input to a concept or viewing a plurality of inputs directly in their raw form in order to better understand an actual conversational context in which the input was received.

Various additional development tools and techniques are possible according to the invention. For instance in some embodiments language recognition rule tuning may be performed using cross solution comparisons that is by combining or comparing language recognition rules from separate but possible related natural language interaction applications or solutions in order to ensure that improvements in individual natural language interaction applications may be leveraged in other applications . Such an approach may for example iteratively expand or reduce various rules scope until an overall optimal triggering performance across multiple solutions is achieved.

In some embodiments highly interactive semiautomated coding techniques for use in building natural language interaction applications may be provided to further assist developers in achieving best results in minimal time. Such techniques may include but are not limited to 

The skilled person will be aware of a range of possible modifications of the various embodiments described above. Accordingly the present invention is defined by the claims and their equivalents.

