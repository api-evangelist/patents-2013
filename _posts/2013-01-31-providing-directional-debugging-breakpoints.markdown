---

title: Providing directional debugging breakpoints
abstract: Techniques for debugging an application are provided. In some examples, a user interface (such as a graphical user interface) is provided for a user to specify a breakpoint associated with a breakpoint location in an application and a message flow direction associated with the breakpoint. The message flow direction may be selected from one or more message flow directions associated with the breakpoint location. For example, a message flow direction may be a request message flow direction or a reply message flow direction. The breakpoint location may be a logical breakpoint location associated with a component in a component-based application such as an application based on Service Component Architecture (SOA). In an embodiment, an execution of the application is suspended when the breakpoint is reached in connection with the specified message flow direction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09208058&OS=09208058&RS=09208058
owner: Oracle International Corporation
number: 09208058
owner_city: Redwood Shores
owner_country: US
publication_date: 20130131
---
Service Component Architecture SCA provides a standardized framework for aggregating disparate enterprise Service Oriented Architecture SOA components such as Web services into a higher level composite application. A typical SCA composite application may contain several thousand lines of code to process orchestrations message transformations message routing human workflow interactions business rules processing and the like. As such the process for troubleshooting an SCA composite application can be tedious and complex.

The following presents a simplified summary of some embodiments of the invention in order to provide a basic understanding of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some embodiments of the invention in a simplified form as a prelude to the more detailed description that is presented later.

Embodiments of the present invention provide techniques that allow users to set debugging breakpoints associated with particular message flow direction. In an embodiment a user interface such as graphical user interface GUI and or an integrated development environment IDE is provided for a user to specify a breakpoint associated with a breakpoint location in an application and a message flow direction associated with the breakpoint. The message flow direction may be selected from one or more message flow directions associated with the breakpoint location. The message flow directions may be associated with a message exchange pattern such as a request reply pattern or a one way pattern. In an embodiment the user interface may allow a user to create a request breakpoint a reply breakpoint or both for a particular breakpoint location. The user interface may also enable the user to add remove enable disable or otherwise configure the breakpoints and their directions.

In an embodiment the application may be based on Service Oriented Architecture SOA technologies. For example the application may be a Service Component Architecture SCA composite application that includes one or more components. The breakpoint locations for an SCA composite application may include composite services composite references component services or component references.

In an embodiment when a breakpoint is reached during an execution of the application in connection with the user specified message flow direction e.g. request or response processing the execution is suspended to provide context information such as call stack information variable values and the like via the user interface. A user may choose to resume execution of the application via the user interface. On the other hand the execution may not be suspended when the same breakpoint location is reached in connection with another message flow direction for which the user does not set a breakpoint.

The foregoing together with other features and embodiments will become more apparent upon referring to the following specification claims and accompanying drawings.

In the following description various embodiments of the present invention will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the present invention may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Embodiments of the present invention provide techniques that allow users to set debugging breakpoints associated with particular message flow directions in an application causing execution of the application to be paused or suspended when the breakpoints are reached in the respective message flow directions.

A composite application may provide well defined entry points associated with the composite or components contained therein that may be used by other components within the same composite application or by external components or composite applications. As used herein a composite service refers to an entry point associated with a composite application whereas a component service refers to an entry point associated with a component. Besides entry points or services a composite application or component may also depend on other internal or external components or composite applications. As used herein a composite reference refers to a dependency from a composite application whereas a component reference refers to dependency from a component. Components services and references described above may be connected using wires.

In an embodiment an SCA composite application may be developed using an integrated development environment IDE . Such an IDE may provide a framework for developing e.g. building and debugging management and or deployment of an SCA composite application. Such an IDE may include a graphical user interface GUI that allows a user to build wire or otherwise configure components in the SCA composite application in a user friendly fashion such as using drag and drop. As described above a built out SCA composite application may include services components references properties and wires connecting the above. In some embodiments metadata describing the configuration of an SCA composite application may be stored in a unifying metadata file e.g. an Extensible Markup Language XML file and deployed to a metadata store MDS that may be used for the composite application during both design time and runtime. In an embodiment an SCA composite application may be deployed to a server such as a WebLogic Application Server that provides runtime infrastructures such as service engines for running the SCA composite and components such as BPEL processes business rules invocation and the like. The runtime infrastructure may also include policy management business activity monitoring identity based security and the like.

As illustrated in one or more users may connect to components of an SCA debugger framework to debug an SCA composite application. The users may include software developers business process designers deployment engineers system administrators and the like. In some cases users may include automated processes. In an embodiment the SCA debugger framework is implemented by a client component and a server component . The client component may provide an interface such as a graphical user interface e.g. an IDE a web interface a command line tool and the like for a user to perform debugging related tasks such as pausing and resuming the running of an instance of an application viewing and or editing contextual information e.g. variables properties during the running of the application modifying building and or deploying the application and the like. In an embodiment the client component may be implemented as part of an application or tool such as an IDE or command line tool on a computing device operated by the user a front end of a web service operated by a service provider and the like.

In an embodiment the SCA debugger framework includes a server component configured to provide runtime support or infrastructure for the debugging of an SCA composite application. For example the server component may provide service engines for running the SCA composite and components such as BPEL processes business rules invocation and the like policy management business activity monitoring identity based security and the like. Additionally the server component may be configured to manage the execution of an instance of an SCA composite application and providing debugging information to the client component . For example the server component may be responsible for monitoring the triggering of certain debugging events e.g. the reaching of a breakpoint or a pre defined condition that may be defined by the user and notify the client component of the occurrence of the debugging events and relevant information. In some embodiments the server component may also notify the client component events for the purpose of tracing or fault handling. Faults may include user defined fault conditions that may be specific to the application system generated runtime errors and the like.

In some embodiments the client component may process the information e.g. related to debug trace and or fault events received from the server component and or provide the server component with instructions or messages for debug actions e.g. stepping into or stepping over a subroutine continue with execution and the like based on user input. In some embodiments the client component may display contextual information during the debugging process based on information received from the server component and or provide logging or tracing functionalities. In some embodiments the server component may be implemented by one or more virtual logical or physical computer systems or any combination thereof. In some embodiments the server component and the client component may be implemented by the same or different computer systems. For example in some embodiments the server component and the client component may be co located on the same physical computer or they may commute remotely over a network such as the Internet local area network LAN wide area network WAN wireless data network or any other data network.

As illustrated the GET APR component invokes another LoanProcess component via the latter s entry point i.e. component service . The LoanProcess component may include a BPEL process that implements the logic and functionality of processing a loan request. The LoanProcess component may in turn invoke other components such as CreditCheck CHECK CUSTOMER and RiskAnalyzer via their respective service points and . In particular the CreditCheck component may implement the logic to check a customer s credit scores with various credit reporting agencies such as Experian and Equifax by invoking local or remote web services components such as the EXPERIAN component and the EQUIFAX component . The LoanProcess component may also invoke a web service component CHECK CUSTOMER that performs background checks e.g. criminal history of a customer. In addition the LoanProcess component may invoke the RiskAnalyzer component process the results returned by the referenced components such as CreditCheck and CHECK CUSTOMER and to determine a risk level associated with a loan. Based on the risk level the LoanProcess component may provide information to the GET APR component that is useful for calculating an appropriate APR. Finally the GET APR component may provide an APR rate as a response to an entity invoking the composite application.

In some embodiments a user may be able to create one or more breakpoints at specific locations on the execution path of an application such as at the composite service composite reference component service and component reference points such as illustrated in . The breakpoints would typically cause a running instance of the application to pause at those breakpoint locations until the user issues further debugging commands such as step into step over continue and the like.

In some embodiments a breakpoint location may be reached by an execution of an SCA composite application in more than one message flow or message processing directions. As used herein one or more message flow directions may be associated with a message exchange pattern MEP required by a communication protocol. Examples of message exchange patterns include request response pattern such as required by the Hyptertext Transfer Protocol HTTP one way pattern such as required by the User Datagram Protocol UDP and the like. As used herein a request response MEP exists where a requestor of information sends a request message to a system which receives processes and returns a message in response. As such a request response MEP includes two message flow directions a request message flow direction and a response message flow direction. In some embodiments a protocol may be associated with multiple MEP types. For example the Simple Object Access Protocol SOAP has several MEP types such request response one way and the like.

In some embodiments the request response MEP may be implemented synchronously where the connection between the requestor and the replier is held open until a response provided or until a timeout period expires. Examples of synchronous implementation of the request response MEP includes web service calls made over HTTP. In other embodiments the request response MEP may be implemented asynchronously where a response may be provided at an unknown later time. Asynchronous implementation of the request response MEP may be used where time intensive tasks or human workflow need to be performed before a response can be provided.

In an embodiment a user may be allowed to associate e.g. using an IDE such as described in connection with a message flow direction with a breakpoint in an application such that an execution of the application is suspended or paused only when the breakpoint location is reached in connection with the user specified message flow direction or directions. The advantage of setting breakpoints for distinct directions of message flow is that the user can focus troubleshooting efforts on a particular direction of message flow. This may be desirable for example when the user does not wish to pause execution of an application in connection with certain message flow direction e.g. request processing because he or she knows the correctness or validity of the application regarding that particular message flow direction. For example if a user knows that at a given breakpoint location such as a service entry point of a SCA component an incoming request message is well formed and valid or if the logic for handling a request message is valid the user only set a breakpoint for the response processing direction and not set a breakpoint for the request processing direction.

As graphical representation A illustrates a request breakpoint is set for the GET APR component at the composite entry point such that the execution of the composite application will be suspected when the application is invoked. Because no reply breakpoint is set at location the execution of the application will not be paused when GET APR returns. On the other hand a reply breakpoint is set for the LoanProcess component at the service entry point such that an execution of the application will pause when the LoanProcess component returns. Additional both a request breakpoint and a reply breakpoint are set at the reference point of the LoanProcess component to the CreditCheck component . Therefore the execution of the application will pause both when the LoanProcess component invokes the CreditCheck component and when a reply from CreditCheck component is received by the LoanProcess component .

In some embodiments when a breakpoint is encountered a user may then have the option to step into the execution of a component step over to the next component or continue execution until the next applicable breakpoint is reached. For example as illustrated in graphical representation A when the return breakpoint is reached the user may step into the detailed execution steps of the LoanProcess component step over the LoanProcess component to the next GET APR component or continue until the next breakpoint is reached reply breakpoint in this case .

The graphical representation B is similar to graphical representation A discussed above except that graphical representation B illustrates a one to many relationship between a breakpoint and message flow directions. In other words a single breakpoint may be used associated with one or more message flow directions. Thus the request breakpoint and reply breakpoint are similar to request breakpoint and reply breakpoint shown in graphical representation A. However the request breakpoint and reply breakpoint are now combined into a single request reply breakpoint indicated by a dot with arrows on both sides.

Other variations of graphical representation of the directional breakpoints are also within the scope of the invention. In various embodiments the graphical representation of breakpoints such as shown in may be independent from the actual implementation of the breakpoints discussed later. In some embodiments a breakpoint location a location where a breakpoint may be set is restricted to be one of a set of valid and or pre defined locations. For example in an embodiment a user may only set breakpoints at service or reference points associated with SCA components. In other embodiments a breakpoint may be set at any line of the source code of the application. In some embodiments a breakpoint location refers to a logical location such as illustrated in a graphical representation of a component. The logical location may correspond to one or more physical locations in the source or executable code of the application.

In various embodiments a user interface may be provided to enable a user to configure directional breakpoints as discussed herein for example in an IDE discussed above. For example illustrates example graphical user interfaces GUIs A B for a user to specify directional breakpoints in accordance with at least two embodiments. According to GUI A a menu associated with a breakpoint location of an SCA component may be displayed in response to a user action such as right clicking on or otherwise selecting the breakpoint location . The menu may include menu items for creating breakpoints associated with different message flow directions. In the illustrated example the menu includes a menu items for creating a pair of breakpoints. The selection of this menu item may result in the creation of the request breakpoint and reply breakpoint as shown in . The menu also includes a menu item for creating a request breakpoint only and for creating a reply breakpoint only. The selection of these menu items may respectively result in the creation of a request breakpoint such as request breakpoint and the creation of a reply breakpoint such as reply breakpoint shown in .

In some embodiments the content of the menu associated with a breakpoint location may be context specific to the breakpoint location. For example the menu items included in the menu may depend on the MEP associated with the particular component or composite to which the menu is associated with. In an embodiment if the breakpoint location is only reachable in one way of communication e.g. request the menu associated with the breakpoint location may include only one option to create a one way breakpoint. As illustrated by GUI B component LogProcess may be configured to receive a request and do some work e.g. writing to a log file without sending a response back to the requestor. In such a case a user may be presented with a menu associated with the service point of the component that includes the option to set a request breakpoint but not an option to set a reply breakpoint. On the other hand if the breakpoint location is reachable in multiple message flow directions the menu associated with the breakpoint location may include options to create a breakpoint for any subset including all of such the message flow directions such as shown in GUI A.

In some embodiments breakpoints described herein may be added removed enabled disable or otherwise configured. illustrates example GUIs A B used to configure breakpoints in accordance with at least one embodiment. As illustrated a menu associated with a breakpoint location of an SCA component may be displayed in response to a user action such as right clicking on or otherwise selecting the breakpoint location to allow a user to configure breakpoints associated with the breakpoint location. Such a menu may be context sensitive showing different options or menu items for under different contexts. In this example an enabled breakpoint is illustrated in black and a disabled breakpoint is illustrated in white.

As shown in GUI A an enabled request breakpoint is associated with a breakpoint location for component . In this case the menu associated with the breakpoint location may include options that allow a user to remove or disable the existing request breakpoint or create a reply breakpoint. On the other hand breakpoint location is associated with a disabled reply breakpoint . As such the menu associated with the breakpoint location may include options that allow a user to remove or enable the existing reply breakpoint or create a request breakpoint. In some embodiments instead of Enable Reply Breakpoint as shown in menu or Disable Request Breakpoint as shown in menu the menus may contain a menu item Toggle Reply Breakpoint or Toggle Request Breakpoint or Toggle Breakpoint to revert the status of an existing breakpoint.

As shown in GUI B an enabled request breakpoint and an enabled reply breakpoint are associated with a breakpoint location for component . In this case the menu associated with the breakpoint location may include options that allow a user to remove both breakpoints toggle both breakpoints remove the request breakpoint disable or toggle the request breakpoint remove the reply breakpoint or disable or toggle the reply breakpoint. As another example the breakpoint location is associated with both an enabled request breakpoint and a disabled reply breakpoint . As such the menu associated with the breakpoint location may include options that allow a user to remove both breakpoints toggle both breakpoints remove request breakpoint disable or toggle request breakpoint remove reply breakpoint or enable or toggle reply breakpoint.

GUI B illustrates another embodiment of breakpoint specific menus. In this embodiment the breakpoints shown in GUI B may be implemented according to embodiment B of where a single breakpoint may be used to either embody multiple breakpoints each with a single message flow direction or a single breakpoint with multiple message flow directions. For example breakpoint may be used to show a breakpoint that is enabled on the request path and disabled on the return path or two breakpoints i.e. an enabled request breakpoint and a disabled reply breakpoint. The menu associated with the breakpoint may include options to remove both breakpoints toggle both breakpoints remove request breakpoint disable or toggle request breakpoint remove reply breakpoint or enable or toggle reply breakpoint. Likewise breakpoint may be used to show a breakpoint that is enabled on both the request path and the return path or two breakpoints i.e. an enabled request breakpoint and an enabled reply breakpoint. The menu associated with the breakpoint may include options to remove both breakpoints toggle both breakpoints remove request breakpoint disable or toggle request breakpoint remove reply breakpoint or disable or toggle reply breakpoint.

In various embodiments menu associated with a breakpoint location or a breakpoint may include more or less options than discussed herein. In an embodiment a breakpoint may be added to a breakpoint location without specifying a message flow direction. Such a breakpoint may be treated in a configurable default manner e.g. as a request breakpoint a reply breakpoint or both . In another embodiment a message flow direction may be added to a directionless breakpoint for example via a menu associated with the breakpoint. In another embodiment menus specific to a particular direction may be displayed in response to a user action such as right clicking on or selecting an arrow that indicates a message flow direction. Such a direction specific menu may be similar to the breakpoint specific menus described in connection with .

In an embodiment process includes setting a breakpoint associated with a message flow direction in an application. The application may include a component based application such as an SCA composite application described herein or any other types of application. In some embodiments setting a breakpoint may include identifying a breakpoint location where a breakpoint may be set. For example such a breakpoint location may include the service or reference point of a composite or component in an SCA composite application. In an embodiment the breakpoint location may be illustrated in a graphical representation of the application in a GUI. Using the GUI a user may specify one or more breakpoints associated with the breakpoint location each of the breakpoints associated with a distinct message flow direction such as illustrated in connection with .

In an implementation directional breakpoints described herein may be implemented based on a location object with the following data structure 

In the data structure the identifier field may be used to uniquely identify the location object. In an embodiment the identifier field may include a combination of the distinct name of the composite e.g. including a partition for the composite application the name of the composite the revision number of the composite and service or reference of a component or composite. In other embodiment the identifier field may include a unique global identifier or other unique alpha numeric strings.

In an embodiment the ref field may be used to e.g. by a debugger to look up the source code associated with the location in the application. In a text based or line based debugger e.g. where the debugging performed line by line on the source code of an application the ref field may include a source file name and a line number. However in a diagram based debugger such as the SCA debugger described herein the ref field may not include such information.

In an embodiment the attributes field may be implemented by a map of name value pairs of attributes. The attributes may be used to further qualify a location without necessitating an excessively complex descriptive identifier field. One of such attributes may be a direction attribute for message flow direction. The value of the direction attribute e.g. request or response may indicate whether the location is encountered for handling a request message or a response message. Such a direction attribute may be useful for supporting multiple distinct breakpoints at a single logical breakpoint location one for each distinct message flow direction. For example in an embodiment each breakpoint may be implemented as a location object described above. Thus distinct breakpoints for the same logical breakpoint location may share the same identifier and or ref fields but with distinct direction values for their attributes fields.

Still referring to in an embodiment after a user finishes adding directional breakpoints the user may initiate a debugging session where the application is executed in a debugging mode for example by attaching a debugging client to a running instance of the application starting an instance from the debugger client or the like. In an embodiment the debugging client connects to a debug server such as the server component of an SCA debugger framework via a remote debugging session. An instance of the application e.g. a web service may be instantiated and executed when the application is invoked e.g. by a request sent from a web browser or a remote or local process . In various embodiments the instance of the application may be executed in a debug mode so as to provide debugging information and or the ability for a user to control the execution of the application.

In an embodiment process includes determining that the breakpoint has been reached in connection with the message flow direction associated with the breakpoint. In an embodiment breakpoint information may be stored in memory a configuration file local or remote data store or the like. Such debugger configuration information may be provided to a debug server or a process that monitors the execution of the application so that determination may be made during the execution of the application whether the breakpoint has been reached. In an embodiment a process executing the application monitors whether the breakpoint is reached by comparing the currently location of the execution to the breakpoint location and the message flow direction associated with the breakpoint to determine if there is a match. In some embodiments the source code of the application may be modified such that when the instruction or instructions at the breakpoint location may be replaced with a predetermined instruction instructions such that when the predetermined instruction or instructions are executed it can be determined e.g. via an exception thrown by a process executing the application that the breakpoint has been reached.

In an embodiment process includes suspending execution of the application once it is determined that the breakpoint has been reached. In some embodiments where the debugging is executed remotely a debug server may generate a debug event that indicates the reach of the breakpoint. The debug event may be provided to a debug client which may alert a user of the suspension of the application for example in a graphical debugger such as an IDE discussed herein. In other embodiments the debugger client may receive the debugger event from a process running locally.

After the application is suspended in some embodiments the user may perform a variety of debugging operations such as inspecting and or changing the state of the suspended application e.g. values of variables parameters or messages stack information proceeding with the execution of the application in various manners e.g. stepping into stepping over or continuing the execution and the like. In some embodiments debugger client may communicate with a debugger server to facilitate the fulfillment of such user initiated debugging actions.

In an embodiment process includes providing a user interface such as a GUI or a command line tool for debugging an application. In some embodiments the user interface may provide a graphical representation of the application such as illustrated in . Using the interface a user may add remove enable disable and otherwise configure breakpoints such as according to the methods described herein and illustrated in . The user interface may also allow a user to perform other debugging related operations such as viewing and or editing state information associated with execution of the program e.g. stack variables .

In an embodiment process includes receiving an indication to set a breakpoint associated with a message flow direction in the application. Such an indication may be received for example when a user selects Create Request Breakpoint from menu as illustrated in . As another example such an indication may be received when a user enables a previously disabled breakpoint. In some embodiments the message flow direction associated with a breakpoint may be provided by default which may be configurable or by specified by a user. In an embodiment a user may be allowed to set one or more breakpoints simultaneously.

In an embodiment process includes starting a debug session. As described above in connection with in some embodiments starting a debug session may include causing the executing of an instance of the application to be debugged locally or remotely by attaching to a running instance or staring an instance from a debugger which may include an IDE a command line tool or the like. In some embodiments starting a debug session may include rebuilding the application in debug mode if the application has been changed and or deploying the application e.g. to a debug server . In various embodiments up to date breakpoint information e.g. where a breakpoint is set and for which message flow direction may be maintained to enable suspension of the execution of the application at suitable time.

In an embodiment process includes receiving an indication that the breakpoint has been reached in connection with the message flow direction associated with the breakpoint. Such an indication may be provided after the execution of the application has been suspended or paused by a local or remote process. Upon receiving such an indication execution context information associated with the suspended application may be provided to the user in the user interface. For example such information may include the current location of execution the current call stack information values of variables parameters or messages and the like.

In some embodiments process may include causing resumption of the execution of the application for example in response to a user s debug command such as stepping into or over the current routine or component continue execution of the application until the next breakpoint and the like. In some embodiments a debugger client may provide a message or request to a remote or local process to resume executing the application. In some embodiments one or more of steps may be repeated when more breakpoints are encountered until the execution of the application finishes or is terminated for example due to errors or by the user.

In an embodiment process includes receiving an indication to start executing an application e.g. an SCA composite application in debug mode. In some embodiments an instance of the application may be invoked by a local or remote process such as via web service calls or application programming interface API calls. In response to such an indication an instance of the application may be executed in debug mode. In various embodiments the execution may be based on one or more configurable parameters provided by default or specified by the process invoking the application.

In an embodiment process includes determining whether an active or enabled breakpoint has been reached in connection with a message flow direction associated with the breakpoint. As discussed above a system implementing process such as a debugger server may have access to the current breakpoint information e.g. locations associated message flow directions and the like . Such information may be compared with the execution information to determine whether an active or enabled breakpoint has been reached. If it is determined that an active breakpoint has been reached process includes suspending the execution of the application and providing an indication or a message e.g. to a debugger client that the execution of the application has been suspended or paused at the particular breakpoint. Subsequently process may include receiving an indication to resume the execution of the application. Such an indication may be received in response to a user s command to step into step over or continue the execution in a debugger client such as described in connection with . In response to such an indication process includes resuming execution of the application in a manner e.g. step into step over or continue dictated at least in part by the received indication. Alternatively process may include terminating or resuming the execution of the application after a configurable timeout period expires without receiving any indication to resume execution.

Otherwise if it is determined that an active breakpoint has not been reached but that it is determined that the execution of the application is finished or terminated process includes providing an indication or a message e.g. to a debugger client that the execution of the application is finished so that such information may be provided to a user for example. Otherwise if it is determined that the execution of the application is not finished process includes continuing executing the application until an active breakpoint is reached or until the execution finishes.

Variations of the techniques described above are contemplated as being within the scope of the present invention. For instance functionalities for providing directional breakpoints may be provided for any component based application not limited to SCA composite application by any diagram based development environment.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple busses.

Network interface subsystem provides an interface to other computer systems networks and portals. Network interface subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . The network interface subsystem may be used for example to send and receive electronic messages over a network.

User interface input devices may include a keyboard pointing devices such as a mouse trackball touchpad or graphics tablet a scanner a barcode scanner a touch screen incorporated into the display audio input devices such as voice recognition systems microphones and other types of input devices. In general use of the term input device is intended to include all possible types of devices and mechanisms for inputting information to computer system . A user may use an input device to compose content for electronic messages and or to specify and or exclude recipients in accordance with various embodiments.

User interface output devices may include a display subsystem a printer a fax machine or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as a liquid crystal display LCD or a projection device. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system . Content of electronic messages may be displayed using output devices .

Storage subsystem provides a computer readable medium for storing the basic programming and data constructs that provide the functionality of the present invention. Software programs code modules instructions that when executed by a processor provide the functionality of the present invention may be stored in storage subsystem . These software modules or instructions may be executed by processor s . Storage subsystem may also provide a repository for storing data used in accordance with the present invention for example the data stored in the diagnostic data repository. For example storage subsystem provides a storage medium for persisting one or more ontologies. Storage subsystem may comprise memory subsystem and file disk storage subsystem .

Memory subsystem may include a number of memories including a main random access memory RAM for storage of instructions and data during program execution and a read only memory ROM in which fixed instructions are stored. File storage subsystem provides persistent non volatile storage for program and data files and may include a hard disk drive a floppy disk drive along with associated removable media a Compact Disk Read Only Memory CD ROM drive an optical drive removable media cartridges and other like storage media.

Computer system can be of various types including a personal computer a portable computer a workstation a network computer a mainframe a kiosk a mobile device a tablet device and a server or any other data processing system. Due to the ever changing nature of computers and networks the description of computer system depicted in is intended only as a specific example for purposes of illustrating the preferred embodiment of the computer system. Many other configurations having more or fewer components than the system depicted in are possible.

Client computing devices may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although example system environment is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

System environment may include a network . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

System environment also includes one or more server computers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present disclosure.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers Java servers database servers and the like. Example database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

System environment may also include one or more databases . Databases may reside in a variety of locations. By way of example one or more of databases may reside on a non transitory storage medium local to and or resident in server . Alternatively databases may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

Although specific embodiments of the disclosure have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the disclosure. Embodiments of the present disclosure are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present disclosure have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present disclosure is not limited to the described series of transactions and steps.

Further while embodiments of the present disclosure have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present disclosure. Embodiments of the present disclosure may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope.

Illustrative methods and systems for providing statistically triggered data placement are described above. Some or all of these systems and methods may but need not be implemented at least partially by architectures such as those shown in above.

Although embodiments have been described in language specific to structural features and or methodological acts it is to be understood that the disclosure is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as illustrative forms of implementing the embodiments. Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments could include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

