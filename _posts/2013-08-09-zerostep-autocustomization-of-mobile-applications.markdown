---

title: Zero-step auto-customization of mobile applications
abstract: In an embodiment, mobile application downloaded and installed in a mobile device is launched for the first time. The mobile application automatically locates a configuration server and connects automatically to the located configuration server. After connection is established with the configuration server, appropriate configuration parameters set is identified and automatically fetched to the mobile device. The fetched configuration parameters set is automatically applied to the mobile application. After applying the configuration parameters set, automatically authenticate the mobile application to an enterprise server. Thus, when the user of the mobile device launches the installed mobile application for the first time, the zero-step auto-customization noted above takes place without manual intervention. The user is thus able to use the mobile application in a normal manner subject to the configurations applied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09197501&OS=09197501&RS=09197501
owner: SAP SE
number: 09197501
owner_city: Walldorf
owner_country: DE
publication_date: 20130809
---
Some enterprises provide mobile devices to employees to stay connected with the business and discharge their responsibilities efficiently while some enterprises authorize employees to purchase and use a mobile device of their choice to stay connected with the business. Employees often tend to download varied mobile applications from public distribution channels to their mobile devices. Enterprise would like to customize the mobile applications to include branding provide enterprise connectivity enforce usage restrictions etc. before the first use of the downloaded mobile applications. But often employees directly install mobile applications from the public distribution channels and start using them without giving the administrators an opportunity to customize the mobile applications. Thus it is challenging to customize such downloaded mobile applications before their first use.

Embodiments of techniques for zero step auto customization of mobile applications are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Typically when an enterprise provides mobile devices to employees enterprise enforces installations and configurations of necessary customizations in the mobile device to make it compliant with the enterprise standards. In a scenario where enterprise authorizes employees to purchase and use mobile devices of their choice employees lend to download mobile applications from public distribution channels and install on the mobile devices and use. The enterprise administrators do not get an opportunity to enforce configurations and customizations on the mobile applications downloaded from the public distribution channels.

Some enterprises request source code from the mobile applications vendors and develop a customized version for some of the mobile applications and distribute these customized versions to the employees. But as the number of mobile applications increase drastically this is not a scalable solution as it tremendously increases custom development and maintenance effort for any enterprise. Whereas some enterprises request the mobile applications vendors to develop customized version of mobile applications for their enterprise use and ship it directly using business to business channels of distribution. The challenge here is that mobile applications vendors may not have the bandwidth to take up customization request from every enterprise using their mobile applications. Further the mobile applications vendors will be required to develop and maintain versions of the same mobile application for every enterprise in an on going basis.

Some enterprises mandate installation of mobile device management software agent on mobile devices that allows receiving of configurations for mobile application customizations. Mobile device management MDM software monitors manages and supports mobile devices by enabling distribution of one or more applications data and configurations for mobile devices. MDM agent installations are generally disliked by the employees because enterprises enforce many other usage restriction and security restriction on the mobile devices. Further MDM agents are required to be installed and managed in every mobile device. Therefore employees require an automatic configuration and customization of mobile applications in zero step without manual intervention.

Network provides connectivity between configuration servers A to N and client system . Network provides connectivity between enterprise server and client system . Network and may be implemented using protocols such as Transmission Control Protocol TCP and or Internet Protocol IP . In one embodiment network and network can be the same network implemented using any of the protocols noted above. The client system can be a computing device such as a mobile phone or a tablet computer used by end users. Mobile application is downloaded from a public distribution channel and installed in the client system . When the mobile application is launched from the client system for the first time the mobile application automatically determines a configuration server A from among a set of configuration servers and connects to the configuration server A .

Once connection is established with the configuration server A appropriate configuration parameters set is identified and automatically fetched from the configuration server A to the client system . Fetching includes sending data implicitly or explicitly in a query and correspondingly receiving associated information in response to the query. Fetching can be one time receiving or it can be receiving in portions. The fetched configuration parameters set is automatically applied to the mobile application . After applying the configuration parameters set the mobile application is automatically authenticated to an enterprise server . Thus when the user of the client system launches the installed mobile application for the first time the sequence of steps noted above are automatically performed without manual intervention and the user is able to use the mobile application in a normal manner subject to the configuration parameters set applied. The example embodiments illustrated below using to describe in detail the zero step auto customization of mobile applications as noted above.

In one embodiment mobile applications are standardized and developed in a way that after installation of a mobile application in a mobile device the mobile application automatically locates an appropriate configuration server and establishes connection to the located configuration server. The mobile application installed in the mobile device can ping a network for locating the configuration servers within the network. Ping is merely exemplary various types of mechanisms and protocols to locate the configuration server such as by defining in web configuration file using broadcasting or multi casting solutions such as service location protocol using service discovery protocols using neighbor discovery protocol etc. can be used. illustrates a registry providing mapping information for mobile applications according to one embodiment. Every mobile application is developed with a unique identifier referred to as an application identifier. Application identifier enables unique identification of the mobile application.

Registry is created with application identifiers mapped to corresponding non qualified machine names . In one embodiment registry can be a public registry private registry hosted file and the like. Non qualified machine names represent names of the configuration servers as defined by administrators of the enterprise. In registry an application identifier COM.DEF.APPS is mapped to a non qualified machine name SAMPLE . The non qualified machine names can be resolved based on geographical location or network of the mobile device to appropriate machines with the corresponding fully qualified domain name FQDN . FQDN is a complete domain name for a specific computer machine or host on the internet. For example the non qualified machine name XPOL can be resolved based on network of the mobile device to one of the configuration servers with the FQDN as shown in .

For example user A has installed a mobile application with application identifier COM.SOMECOMPANY. . Application identifier COM.SOMECOMPANY. is mapped to non qualified machine name XPOL in the registry User A is located in Waldorf network accordingly the non qualified machine name XPOL resolves to a FQDN XPOL.WDF.ABC.COM . Similarly for a user located in Bangalore network the non qualified machine name XPOL resolves to the FQDN XPOL.BLR.ABC.COM and for a user located in Vancouver network the non qualified machine name XPOL resolves to the FQDN XPOL.VAN.ABC.COM . These machines with the FQDN as shown in become the configuration servers across geography network for the enterprise ABC.

For example for an encrypted device identifier Z F LTY sent from the mobile device of User A the encrypted device identifier Z F LTY is matched to identify the configuration parameters set as configuration parameters set A from among the configuration parameters sets available. The configuration parameters set A includes authentication parameters configuration parameters customization parameters and other parameters as applicable. The number and type of parameters are merely illustrative and may vary for every mobile application. The authentication parameters include parameters such as user id mapped with the received device identifier connectivity details corresponding to the enterprise server and the like. If the received device identifier has access to the enterprise server then the user id along with a password provided in the authentication parameters enables automatic authentication to the enterprise server. If no user id is mapped with the device identifier guest id can be provided. Access using guest id has limited privileges in comparison to access using user id . Connectivity details includes details required to establish connection with the enterprise server such as database connection parameters host name port number server certificate etc. Based on the received encrypted device identifier these authentication parameters are encrypted and sent to the mobile device as a part of configuration parameters set A .

The configuration parameters include policies rules restriction conditions settings etc. Policies can be defined to restrict single sign on capability for a user of the mobile device as shown in . Single sign on capability is a property of access control in which a user logs in once in a software and gains access to multiple related independent software. While defining the policy network identifier can be specified to restrict the single sign on capability to be within a particular network virtual private network VPN identifier can be specified to restrict the single sign on capability when connected via a particular virtual private network server and location can be specified to restrict the single sign on capability within a particular geographic location or network. For example whenever User B is connecting from home network the single sign on capability for User B can be restricted. Rules can be specified to determine if a certain criteria is met and accordingly perform associated actions. For example a rule can be defined such that if User C is a contract employee then User C should not receive emails intended for permanent employees. Rules can also be specified as restriction conditions where the users are restricted from performing a set of defined actions. For example employees are restricted from accessing social networking sites from within the mobile application.

The customization parameters include user interface related customizations such as visual presentation personalization stylistic compliance etc. and functionality related customizations such as disabling offline storage on the mobile device disabling sending of emails from within the mobile application etc. Typically enterprises have a standard theme color font size of user interface elements etc. in their applications. The customization parameters are specified in for example brand and logo of an enterprise can be specified in the branding information. Theme in which the mobile application needs to be displayed can be specified in the application display theme. Color in which the mobile application needs to be displayed can be specified in the application colors. Certain functionalities in the mobile application are required to be enabled and disabled based on the profile of the employee. Such enabling and disabling of functionalities can be specified in enable and disable application functionality. For example contract employee User C should not be allowed offline storage on the mobile device and accordingly offline storage option needs to be disabled for User C .

The mobile device may automatically fetch the configuration parameters set A comprising authentication parameters configuration parameters and customization parameters in an encrypted form as encrypted configuration parameters set A . In one embodiment the configuration parameters set A can be stored in a file external to the software application executing in the configuration server. When the configuration parameters set A is externalized and stored in the file and not hardcoded in the software application managing and replacing the file dynamically is easier.

When the mobile application is launched for the first time and the encrypted configuration parameters set A is fetched from the configuration server XPOL.WDF.ABC.COM the encrypted configuration parameters set A is cached in the mobile application . During subsequent connections to the configuration server XPOL WDF.ABC.COM the mobile application looks for changes or modifications from the last cached content. For example entity tag Etag and if modified since conditional request header field can be used to look for modifications from the last cached content. Etag in hypertext transfer protocol HTTP HTTPS can be used to make conditional request. Independent version of the content is assigned an Etag. These Etags are compared to determine if two versions of the content are same or not. Based on this comparison only modified portion is requested from the configuration server. Another example would be to use if modified since conditional request header field in the HTTP request. If modified since is specified along with a date on which the content was last fetched. When if modified since request header field is specified in the request only if the content is modified since the date specified then the content is fetched from the configuration server. Else if the content is not modified no content is fetched from the configuration server.

The fetched encrypted configuration parameters set A is automatically applied to the mobile application . For example based on the configuration parameters set A the mobile application can be re branded with the fetched customization parameters such as enterprise logo images and etc. The mobile application s display theme and color is applied as fetched in the configuration parameters set A . Functionality related customizations such as enabling and disabling are also applied in the mobile application . A connection is established automatically with the enterprise server based on the connectivity details user id and password fetched in the authentication parameters of the configuration parameters set A . This connection established is a personalized connection for the user of the mobile device . While establishing connection to the configuration server policies in the configuration parameters to restrict single sign on capability for the user of the mobile device are applied.

In one embodiment initial set of configurations can be fetched from one configuration parameters set which could lead to additional configurations to be fetched from other configuration parameters sets. For example initial set of configurations can be fetched from configuration parameters set A to the mobile application this initial set of configurations could lead to additional configurations to be fetched from configuration parameters set B configuration parameters set C or configuration parameters set N . The initial set of configurations fetched can have a link to the next set of configurations such as a uniform resource locator URL internet protocol address IP address and the like.

In case one of the network identifier VPN identifier or location matches with any of the configuration parameters is executed where the mobile application automatically sends a login request to the enterprise server with the authentication parameters such as user id password and connectivity details to establish connectivity with the enterprise server in a single sign on mode. In case either of the network identifier VPN identifier or location does not match with any of the configuration parameters is executed where the mobile application prompts the user to enter password to continue login to the enterprise server . In one embodiment authentication parameters can include a certificate instead of user id and password. A certificate contains information about the owner of the certificate like email address owner s name duration of validity etc. The mobile application can fetch certificate corresponding to the device identifier from the configuration server. This certificate can be used to authenticate the mobile application to the enterprise server .

The various embodiments described above have a number of advantages. The development of mobile applications is standardized. With zero step auto customization of mobile applications employees using mobile devices of their choice can download the mobile application and use it in a normal way subject to the customizations applied. When employees launch the downloaded mobile application for the first time the mobile application is automatically connected to a configuration server and the configurations are fetched and installed automatically in the mobile application in zero steps without manual intervention. Thus employees do not have to manually install any additional configurations or customizations for every mobile application. More often employees do not realize that configurations and customizations are being applied to the mobile application. Time and effort to auto customize the mobile applications happens in zero step and proves very efficient.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hardwired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open Data Base Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the one or more embodiments are described herein for illustrative purposes various equivalent modifications are possible within the scope as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

