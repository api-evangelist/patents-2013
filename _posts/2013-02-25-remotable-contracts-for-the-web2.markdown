---

title: Remotable contracts for the web
abstract: A “Remotable Contract Implementation”, as described herein, provides various techniques for implementing static type checking of remoted contracts across iframes using scripts such as TypeScript, JavaScript, AJAX, etc., thereby enabling structured data and rich patterns of control flow across iframe boundaries. The Remotable Contract Implementation enables the static type-checking over the limited browser postMessage channel of communication across iframes, by generating statically type-checked proxies at runtime based on dynamic reflection, and allowing for full fidelity of JavaScript control flow interactions (e.g. methods, events, asynchronous communications, etc.) over that channel. Further, in various embodiments, the Remotable Contract Implementation provides various methods that can be used to produce useful application context for otherwise isolated applications by providing access to particular browser resources or information that would otherwise be unavailable over the postMessage communication channel using conventional scripting techniques.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569292&OS=09569292&RS=09569292
owner: Microsoft Technology Licensing, LLC
number: 09569292
owner_city: Redmond
owner_country: US
publication_date: 20130225
---
Scripts written using various scripting languages such as TypeScript JavaScript AJAX Asynchronous JavaScript and XML etc. have generally been restricted to run in a browser sandbox for security purposes. However the usage of HTML iframes inline frames allows a page from one domain to contain content from another page on another domain. However for security purposes code in one iframe from one domain is not allowed to directly call code in another iframe from another domain.

Attempts to create some form of interoperability between iframes has led to the creation of a simple mechanism conventionally referred to as the postMessage method to communicate text strings across iframes from different domains. No executable code is allowed to be passed over the postMessage channel between iframes just text strings.

In particular the well known postMessage method allows cooperative text exchange between non trusted modules from different domains embedded within a page. It does so by ensuring a consistent and secure process for text based data exchange. Using this method when a script e.g. TypeScript JavaScript AJAX etc. invokes the postMessage method on a window object the browser sends an onmessage event to the target document on which the data property has been set to the value passed in the postMessage message. Further for security when a target Unique Resource Identifier URI specifying a protocol and a host is passed a message using the postMessage method the message will only be received by the target window if it has the same protocol and host as the source URI.

Further because the well known postMessage method used with iframe coding allows only simple text strings to be passed from one iframe to another conventional communication across iframes using the postMessage method is subject to various limitations. For example the postMessage method is unstructured such that no notion of object identity nor separate fields within that object are provided. Note that using conventional techniques simple serialization can provide some structure of fields but doesn t allow for object identity. In addition the postMessage method is dynamically typed rather than statically typed with the result that opportunities to prevent entire classes of errors are lost because such errors will only be exposed at runtime. Further the postMessage method is one way such that richer patterns of control flow such as for example asynchronous methods events lazy evaluation and progress callbacks are not available via conventional postMessage based techniques.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Further while certain disadvantages of prior technologies may be noted or discussed herein the claimed subject matter is not intended to be limited to implementations that may solve or address any or all of the disadvantages of those prior technologies.

In general a Remotable Contract Implementation as described herein provides various techniques for annotating and translating structured code or control flow of scripts in iframes into text messages that can be passed over conventional postMessage channels between iframes where the message is then re translated into structured code or control flow for use by the receiving iframe. Consequently within the context of a web browser or multiple instances of web browsers the Remotable Contract Implementation enables multiple iframes on the same machine to pass complex information including data executable code etc. between those iframes using the postMessage channel. The capabilities provided by the Remotable Contract Implementation include implementing static type checking of remoted contracts across iframes using scripts created using TypeScript JavaScript AJAX etc. collectively referred to herein as scripting languages thereby enabling the flow of structured data and rich patterns of control flow across iframe boundaries. Advantageously the Remotable Contract Implementation is fully operable with existing browsers without requiring any modification to those browsers.

More specifically in contrast to conventional techniques for component programming and generating proxies for remoting procedure calls the Remotable Contract Implementation enables static type checking of control flow in scripts over the limited browser channel of communication across iframes provided via the postMessage method. Static type checking is enabled by generating statically type checked proxies at runtime for executable code to be passed between iframes by using dynamic reflection capabilities to evaluate that code. This enables the Remotable Contract Implementation to provide full fidelity of scripting language control flow interactions and callbacks e.g. methods events asynchronous communications etc. over the existing postMessage channel. Further in various embodiments the Remotable Contract Implementation provides various techniques for use in producing useful application context for otherwise isolated applications by providing access to particular browser resources or information across iframes that would otherwise be unavailable using conventional scripting techniques.

In view of the above summary it is clear that the Remotable Contract Implementation described herein provides various techniques for enabling the flow of structured data and rich patterns of control flow across iframe boundaries via browser postMessage channels. In addition to the just described benefits other advantages of the Remotable Contract Implementation will become apparent from the detailed description that follows hereinafter when taken in conjunction with the accompanying drawing figures.

In the following description of the embodiments of the claimed subject matter reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific embodiments in which the claimed subject matter may be practiced. It should be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the presently claimed subject matter.

In the art of coding scripts for applications objects created in a particular application domain can easily be called directly from within that domain. However making such objects available outside of that domain i.e. across domain boundaries is more complex. For the purposes of distributed applications there are two categories of objects nonremotable objects and remotable objects. In general as is known to those skilled in the art of browser and component e.g. COM coding or scripting the concept of remoting is used to separate the idea of the location of a component from the location of the callers of a component.

Nonremotable objects are those that do not leave their application domain further they are not marshaled because they do not declare a method of serialization. These nonremotable objects are designed for use within the same application domain in which they were created and are accessed directly from that application domain. Note that most base classes in the .NET Framework class library are nonremotable objects. Nonremotable objects from a particular domain are not copied or represented in another application domain. In other words nonremotable objects are accessible from their original application domain and are not available to other domains.

In contrast remotable objects are objects that can be accessed outside their application domain or context using a proxy. Alternatively such objects can be copied and these copies can be passed outside their application domain or context. In other words some remotable objects are passed by reference i.e. by proxy and some remotable objects are passed by value i.e. by copy .

Further as is known to those skilled in the art of browser and component coding a contract is a non versioning interface that defines a protocol for communicating types across an isolation boundary. One of the first steps in developing a communication pipeline between a host and an add in is to define a contract across the interface between the host and the add in. If the host and the add in are loaded into separate application domains e.g. separate iframes an isolation boundary exists between the add in side of the pipeline and the host side of the pipeline. By using contracts to communicate over an isolation boundary the add in model prevents the host s and add in s implementations of the types from leaking across the boundary and causing versioning issues.

Most current HTML based browsers allow individual web pages to concurrently display multiple iframes with each iframe including content from potentially different domains. Unfortunately as is known to those skilled in the art conventional browser based operations and communications do not allow code in one iframe to directly call or execute code in other iframes although the postMessage method does allow text strings to be passed between iframes.

Advantageously a Remotable Contract Implementation as described herein processes structured code in scripts created using TypeScript JavaScript AJAX etc. collectively referred to herein as scripting languages and provides various techniques for translating and annotating portions of any script having structured or executable code or control flow intended to be provided to another iframe into a text message that can be passed over the conventional postMessage channel between iframes. Consequently within the context of a web browser or multiple instances of web browsers the Remotable Contract Implementation enables multiple iframes in one or more browser windows on the same machine to pass complex information including data executable code etc. between those iframes using the browser s postMessage channel.

In other words on the sending end i.e. a hosting iframe complex executable scripts e.g. JavaScript or other scripting language or portions of those scripts are automatically transformed by the Remotable Contract Implementation into annotated serialized text that are then transmitted by a logical server associated with the hosting iframe via the postMessage channel to the receiving end i.e. a logical client associated with a target iframe where it is deserialized and transformed back into complex executable scripts for execution or use by the target iframe.

Note that any iframe may act as either or both a hosting iframe or a target iframe to send and or receive messages containing control flow or other information to any other iframes at any time. Further any number of iframes may operate concurrently as host or target with respect to any other number of host and target iframes. However for purposes of explanation the following discussion will generally refer a single hosting frame interacting with a single target iframe. Increasing the numbers of interacting iframes is simply a matter of using a Unique Resource Identifier URI or the like to ensure that messages intended for particular iframes are received and processed by the intended iframe. Further it should be understood that existing postMessage protocols allows text strings to be communicated between specifically identified iframes. In addition it should also be understood that multiple target iframes can use or receive the same message from a single hosting iframe if desired by specifying multiple target iframes and setting up listeners for each of those target iframes for messages sent by a particular hosting iframe.

The capabilities provided by the Remotable Contract Implementation for communicating between iframes include implementing static type checking of remoted contracts across iframes thereby enabling the flow of structured data and rich patterns of control flow across iframe boundaries. Advantageously the Remotable Contract Implementation is fully operable with existing browsers without requiring any modification to those browsers.

For example in various embodiments the Remotable Contract Implementation uses a TypeScript compiler to perform static type checking for use in creating a remoting library discussed in further detail below that is used by the Remotable Contract Implementation to enable rich communication across iframe boundaries. However it should be understood that the techniques described herein are fully operable without using TypeScript and that these techniques may be fully implemented using any desired scripting language. Advantageously TypeScript simplifies the overall process by providing statically typed interfaces similar to an API application programming interface that provide protocols intended to be used as an interface by software components to communicate with each other. These interfaces represent the contract used for communicating between domains. In general the contract specifies what is allowed in terms of the communication interface and everything not specifically allowed is inherently disallowed in the interface.

Note that TypeScript is a scripting language for application scale JavaScript. TypeScript adds optional types classes and modules to JavaScript. TypeScript supports tools for large scale JavaScript applications for any browser for any host on any OS. TypeScript compiles to clean readable standards based JavaScript. TypeScript adds optional static types to JavaScript. Types are used to place static constraints on program entities such as functions variables and properties so that compilers and development tools can offer better verification and assistance during software development. TypeScript s static compile time type system allows programmers to accurately express the type relationships that are expected to exist when their programs run and have those assumptions pre validated by the TypeScript compiler. TypeScript s type analysis occurs entirely at compile time and adds no run time overhead to program execution. Again it should be understood that the Remotable Contract Implementation described herein is fully operable and may be implemented without the use of TypeScript if desired.

As noted above the Remotable Contract Implementation provides various techniques for enabling the flow of structured data and rich patterns of control flow across iframe boundaries via browser postMessage channels. These capabilities enable the Remotable Contract Implementation to perform static type checking of remoted contracts across iframes using scripting languages including but not limited to TypeScript JavaScript AJAX etc. The processes summarized above are illustrated by the general system diagram of . In particular the system diagram of illustrates the interrelationships between program modules for implementing various embodiments of the Remotable Contract Implementation as described herein. Furthermore while the system diagram of illustrates a high level view of various embodiments of the Remotable Contract Implementation is not intended to provide an exhaustive or complete illustration of every possible embodiment of the Remotable Contract Implementation as described throughout this document.

In addition it should be noted that any boxes and interconnections between boxes that may be represented by broken or dashed lines in represent alternate embodiments of the Remotable Contract Implementation described herein and that any or all of these alternate embodiments as described below may be used in combination with other alternate embodiments that are described throughout this document.

In general as illustrated by the processes enabled by the Remotable Contract Implementation begin operation within an instance of a browser where it is desired to send structured code from a hosting iframe in a browser window to a target iframe in the same or another browser window across a postMessage channel . As noted above any iframe may act as either or both a hosting iframe or a target iframe to send and or receive messages containing control flow or other information to other iframes across the postMessage channel .

A script processing module evaluates scripts passed from any source such as page source HTML or JavaScript to the hosting iframe . The script processing module annotates that script to add event handlers for incoming messages expected from other iframes when the hosting iframe is acting as a target iframe and further annotates the script by registering classes and or instances intended to be available to one or more target iframes. A pre defined remoting library provides the scripting language predefined classes proxy stubs etc. used to annotate the script and convert the annotated script into a serialized text string for transmission to the target iframe via the postMessage channel .

In general the remoting library includes JavaScript used to provide the script annotations used by the script processing module to enable remoting objects across iframe boundaries to and from specific iframes. The remoting library can include any predefined functions methods objects proxy stubs etc. desired. Further the remoting library is used by a proxy creation module to evaluate scripts in either or both the hosting iframe and any target iframes by using object reflection to determine class members create proxies from the proxy stubs for class members to map control flow e.g. method calls event calls progress indicators asynchronous tasks etc. into the serialized text string for transmission via the postMessage channel .

In general when an incoming serialized text message is received by the target iframe a message processing module deserializes the received text string received from hosting iframe to reconstruct the original message. The message processing module then looks up object references from the remoting library and converts those references to JavaScript object pointers. The message processing module then converts the deserialized message and the object pointers to corresponding JavaScript control flow. The message processing module then uses the remoting library to pass the resulting JavaScript control flow through a corresponding statically type checked interface before that JavaScript control flow is executed or otherwise processed in the target iframe .

Finally an optional cleanup module is provided by the Remotable Contract Implementation for use in optionally cleaning up any resources that are no longer being used by any hosting iframe or target iframe . Note that while cleanup of unused resources is not specifically required it is generally performed to ensure proper usage of computing device memory and storage and to prevent problems including memory leaks and various security issues.

The above described program modules are employed for implementing various embodiments of the Remotable Contract Implementation. As summarized above the Remotable Contract Implementation provides various techniques for enabling the flow of structured data and rich patterns of control flow across iframe boundaries via browser postMessage channels. The following sections provide a detailed discussion of the operation of various embodiments of the Remotable Contract Implementation and of exemplary methods for implementing the program modules described in Section 1 with respect to . In particular the following sections provides examples and operational details of various embodiments of the Remotable Contract Implementation including 

As noted above the well known postMessage method allows cooperative text exchange between iframes. In general when a script e.g. TypeScript JavaScript AJAX etc. invokes the postMessage method on a window object the browser sends an onmessage event to the target document on which the data property has been set to the value passed in the postMessage message. The postMessage method call does not return until event listeners of the target document have finished executing.

For example if Document A contains a reference to a contentWindow property of Document B a script in Document A can send a message to Document B by calling the postMessage method using a script similar to the following 

The script in Document B can then respond to a predefined message or string sent from Document A by registering a corresponding onmessage event handler for incoming messages using a script similar to the following 

In other words in the above example if a string received by Document B that was passed from Document A via postMessage is recognized as an expected or predefined string e.g. if e.data Hello World that expected string can trigger the script in Document B to perform a particular action such as by responding with the message Hello e.g. asource.postMessage Hello .

Unfortunately conventional postMessage techniques for scripting communication across iframes are unstructured in that they do not provide a notion of object identity or separate fields within that object. Note that conventional use of serialization techniques for use with iframe postMessage based communication doesn t allow for object identity to be passed across iframes. Further conventional postMessage techniques make use of dynamic typing meaning that the opportunity to prevent entire classes of errors is lost because such errors will only be exposed at runtime. In addition conventional postMessage techniques are one way such that richer patterns of control flow including but not limited to asynchronous methods events lazy evaluation and progress callbacks are not available.

In contrast to existing work in component programming and generating proxies for remoting procedure calls the Remotable Contract Implementation described herein enables the application of static type checking over the limited postMessage browser channel of communication across iframes while generating proxies for target iframes at runtime based on JavaScript dynamic reflection. These proxies are constructed from statically type checked proxy script frameworks in the aforementioned remoting library that are automatically annotated or adapted by the Remotable Contract Implementation to include whatever references or variables are identified via dynamic reflection in script provided to the iframes. Advantageously this enables the Remotable Contract Implementation to provide full fidelity JavaScript control flow interactions e.g. methods events asynchronous between iframes over the postMessage browser channel.

With respect to dynamic reflection capabilities of JavaScript it is well known that conventional object reflection capabilities in JavaScript provide a mechanism for a Java class to self inspect and manipulate its member attributes and methods. Using reflection it is possible for a JavaScript class to query another class for the names of all its members. The Remotable Contract Implementation adapts these capabilities to generate proxies from the statically type checked proxy frameworks in the remoting library for any classes variables or other objects that a script in one iframe intends to use from other iframes.

Although TypeScript is not required by the Remotable Contract Implementation in various embodiments the Remotable Contract Implementation leverages the capabilities of the TypeScript compiler to perform static type checking. Among other things the TypeScript compiler adds static type checking on top of JavaScript allowing for certain classes of errors e.g. type mismatches to be detected at compile time before the code is delivered to the user. Advantageously the Remotable Contract Implementation provides a mechanism to leverage this static type safety in the context of the limited unstructured untyped communication method i.e. the postMessage channel across iframes from different domains. As such the Remotable Contract Implementation provides various techniques for implementing static type checking of remoted contracts across iframes for various scripting languages thus allowing for structured data and richer patterns of control flow across iframe boundaries.

In general the TypeScript compiler provides various automated mechanisms for static type checking through interfaces. However such static type checking capabilities can also be coded directly via other scripting languages such as JavaScript and AJAX. The Remotable Contract Implementation uses a library of statically typed checked interfaces in the aforementioned remoting library by providing a mapping or translation from the postMessage text string provided by the browser s API to JavaScript method calls made through the type checked interfaces. The Remotable Contract Implementation dynamically generates proxies for interface methods that provide the normal method call semantics to the caller but transparently convert method invocations to serialized string messages passed across the postMessage channel.

As part of this translation the Remotable Contract Implementation enables preservation of a notion of object identity across iframe boundaries instead of just passing values back and forth . This is used to build a context of state on the other side of the channel. It also allows for method invocations from iframe A to iframe B plus callbacks originated from iframe B to iframe A to reach the right objects. For this purpose the Remotable Contract Implementation tracks object identity across channels to correlate different method invocations on the relevant interfaces.

In addition the Remotable Contract Implementation optionally manages object lifetimes across the channel for optional cleanup of unused resources . This is achieved by generating proxies which ensure that when the target iframe i.e. the client or the hosting iframe i.e. the server is disposed the other side of the remoting relation is also disposed of properly. Establishing this relationship to a specific object also involves a protocol that handles the dynamic nature of HTML iframes i.e. the JavaScript code may not start executing in a deterministic fashion. Objects passed as parameters to these methods may also be remoted with a notion of object identity and statically typed interface proxies for these arguments are also dynamically generated by the Remotable Contract Implementation.

Further the Remotable Contract Implementation enables richer forms of control flow to be built on top of the aforementioned interface methods and callbacks. For example asynchronous method calls through a task completion or promise deferred or future interface have a specific type of proxy generated by the Remotable Contract Implementation to mimic that control flow pattern. Events to push notifications rather than polling also have a specific type of proxy generated by the Remotable Contract Implementation. Progress notifications are yet another type of control flow that is marshaled across the unstructured postMessage channel with the generating of a statically typed interface that can be type checked by TypeScript or other scripting language at compile time.

Since the above described mechanism allows for code to be invoked across the iframe security boundary there is a possibility that malicious code from one domain running in iframe A could potentially exploit vulnerabilities through remote execution of code in another domain s code in iframe B. Since this is not always desirable in various embodiments the Remotable Contract Implementation provides proxies that include validation code to ensure that any desired security constraints are satisfied.

Using this infrastructure the Remotable Contract Implementation constructs a mechanism to allow for iframe based application isolation with rich data exchange and control flow across isolation boundaries. In particular the Remotable Contract Implementation provides a shell mechanism that allows applications more information and capability than would otherwise be possible given the limited context of the iframe sandbox. One simple example of the information available to be passed back and forth across the untyped postMessage channel is semantically meaningful events about resizes of the browser s window. Further elaborations of these ideas allow for clipboard operations e.g. copy paste among iframe applications from different domains coupled with a standardized statically type checked interface for data exchange of JavaScript remotable objects. Note that significantly more complex processes than these simple examples may also be implemented by the Remotable Contract Implementation since there is no barrier to the amount of executable code or information that can be processed by the Remotable Contract Implementation and sent between iframes via the postMessage channel. In other words anything that could originally be executed only in individual iframes can now be passed or executed across any number of iframe boundaries using the techniques enabled by the Remotable Contract Implementation.

As noted above the aforementioned remoting library contains scripting code used to process scripts in iframes in order to communicate rich control flows and any other information desired across iframe boundaries. In general each iframe that is communicating with any other iframe uses a proxy or interface to receive communications over the postMessage channel via a logical client associated with the target iframe from a local logical server associated with the hosting iframe sending the communication to the target iframe. In other words scripts are written to use statically type checked interfaces or proxies implemented by a logical server hosted in another iframe and or such scripts are written to use statically type checked interfaces or proxies that are implemented and hosted by a server in their iframe own iframe. In either case scripts are processed using the pre defined remoting library to automatically generate the intermediaries i.e. type checked interfaces and proxies and initialize logical servers and listeners i.e. logical clients that allow complex control flows to be passed and received across iframe boundaries.

Various examples of interfaces enacted by the Remotable Contract Implementation include but are not limited to 

In general the Remotable Contract Implementation operates for any number of iframes by first using the browser to load JavaScript code into the iframe. The Remotable Contract Implementation then initializes the remoting library for use in adding its event handlers for incoming messages and optional cleanup when the hosting iframe is closed. Any classes or instances that script in iframe wants to make available to clients in other iframes are then registered. The script in iframe is used by the remoting library to create local proxies for any classes that it wants use from other iframes note that these iframes are asynchronously loaded and are not necessarily available at the time that the local proxies are created .

Then given the initialization described above when the script loaded into an iframe initiates an action the Remotable Contract Implementation automatically calls a corresponding statically type checked method drawn from the remoting library. A corresponding proxy generated using JavaScript s dynamic reflection capabilities is used to map the control flow of the statically type checked method as a message for passing either 1 a method call with invoke and result messages 2 an event with subscribe on event and unsubscribe messages 3 a progress indication with on progress and on completed messages an asynchronous task with on resolve and on reject messages. For differentiating between objects object references are named with a unique identifier or serialization of any desired format and the Remotable Contract Implementation then recursively generates proxies for those objects using the remoting library. The resulting messages are then serialized into a string format and the serialized text is passed through the browser s postMessage channel across iframes.

Then when an incoming message is received over the browser s between iframes postMessage channel it follows the reverse of the process described above. In particular the received text is deserialized into a message. Object references are looked up and converted into JavaScript object pointers. Conversion to of the deserialized message with object pointers to a corresponding JavaScript control flow e.g. a method result event callback progress made or asynchronous task completed is then performed by the Remotable Contract Implementation. The resulting control flow is then passed through the corresponding statically type checked interface drawn the remoting library.

Finally when the script in an iframe is finished using a specific object located in a remote iframe the Remotable Contract Implementation optionally calls dispose on the local proxy through the corresponding interface which optionally cleans up any unused resources in the remote iframe.

The following exemplary scripting code provides an example of how some of the various embodiments and features of the Remotable Contract Implementation may be implemented. It should be understood that given the detailed discussion provided herein and in view of the scripting code provided below there are many ways in which the functionality of the Remotable Contract Implementation can be implemented. In fact as is well understood by those skilled in the art of scripting in view of the examples provided below and the discussion provided throughout this document scripts to execute functionality similar to the Remotable Contract Implementation can be written in a wide variety of different ways to achieve similar or identical results to those described and illustrated herein. As such it should be understood that the described functionality is not intended to be limited to the specific processes and scripting formats and examples illustrated by the following exemplary scripting code.

Exemplary scripting code for enabling various embodiments of the Remotable Contract Implementation by including the following scripts in a module using a module using variables including var type Score.Type and var serializer Storage.Serializer .

The following script is used to implement local logical servers for remoting objects across iframe boundaries and local logical clients. Note that the client and server both create an instance of the Server pointing at the iframe they want to remote across 

The following script is used to implement various methods including a method for creating instances of remote objects a method for creating references to objects that can be sent to target iframes including corresponding proxies and listeners a method for registering constructors or running instances of a class with server and methods for disposing resources 

The following script is used to implement various methods including a method used by either or both the client and server for dispatching and processing messages received from another iframe depending upon the type of message 

The following script is used to implement various methods including a method used by the server to send a message to a client that the server is ready to communicate 

The following script is used to implement various methods including a method used by the server to return an object of the requested type to the client 

The following script is used to implement various methods including a method used by the server and client to dispose of references held by either the server or the client 

The following script is used to implement various methods including a method used by the client to dispatch an event received from a server iframe to listeners running in the client iframe 

The following script is used to implement various methods including a method used by the server to invoke a method called by a client 

The following script is used to implement various methods including a method used by the client to update the client on the progress of a server request 

The following script is used to implement various methods including a method used by the client to notify the client that a server request has failed 

The following script is used to implement various methods including a method used by the client to notify the client that a server request has succeeded and to return the results of the request to the client 

The following script is used to implement various methods including a method used by the client to create a client side proxy for a server passed reference 

The following script is used to implement various methods including a method used by the client to send a message to a server and then wait for a response 

The following script is used to implement various methods including a method used by the server to send a response to a message to the client 

The following script is used to implement various methods including a method used by the server to send an event to a client 

The following script is used to implement various methods including a method used by the client to notify a server that a particular reference or all references should be disposed and various postMessage methods 

The following script is used to implement various methods including a method used to wrap a callback with a function that ensures that the server hasn t been disposed before letting the callback happen 

The following script is used to implement various static methods including a method for disposing of references used by a particular iframe when the iframe is unloaded or disposed and to prevent unregistered calls 

The following script is used to implement various static methods including a method for ensuring that messages intended for particular iframes are from the same domain for security purposes 

The following script is used to implement various methods including a method used to verify whether a particular server exists before creating a server and to save servers 

The following script is used to implement various methods including a method used to remove particular servers 

The following script is used to implement various type checked interfaces e.g. ready create dispose event invoke progress reject resolve wherein each interface includes a unique identifier the type of message being sent any arguments to be encoded into the message any object ID that the message is related to and any method that the object is related to 

The following script is used to set up various window events such as adding listeners and to export type checked interfaces that are created 

Note that the following scripts are used to implement a variety of interfaces also referred to as remoting methods . Note also that that the Remotable Contract Implementation is not intended to be limited to the interfaces illustrated below and that the following exemplary interfaces are provided as examples of how any desired type of interface may be implemented. For example the following script is used to define a remoting method that returns anything 

The processes described above with respect to and in further view of the detailed description provided above in Sections 1 and 2 are illustrated by the general operational flow diagrams of through . In particular provides an exemplary operational flow diagram that summarizes the operation of some of the various embodiments of the Remotable Contract Implementation. and provide flow diagrams that expand on particular elements of . Note that through are not intended to provide exhaustive representations of all of the various embodiments of the Remotable Contract Implementation described herein and that the embodiments represented by these figures are provided only for purposes of explanation.

Further it should be noted that any boxes and interconnections between boxes that are represented by broken or dashed lines in represent optional or alternate embodiments of the Remotable Contract Implementation described herein and that any or all of these optional or alternate embodiments as described below may be used in combination with other alternate embodiments that are described throughout this document.

In general as discussed in detail above the remoting library is leveraged by script hosted in an iframe to generate statically type checked interfaces implemented by a server hosted in another iframe and or by implementing statically type checked interfaces and hosting a server in their iframe. More specifically as illustrated by operation of the Remotable Contract Implementation begins operation by providing a script written in scripting languages such as TypeScript JavaScript AJAX etc. to be loaded by a browser into a hosting iframe. As noted above any particular iframe can act as either or both a host and a target with respect to other iframes.

If the script loaded into the iframe includes postMessage script for processing in view of the remoting library then that script is further processed by Remotable Contract Implementation otherwise it is simply executed using conventional script execution techniques. In particular assuming that the script is to undergo further processing as shown by element the Remotable Contract Implementation uses the remoting library to add event handlers to the script in the hosting iframe for incoming messages and for optional resource cleanup when the hosting iframe is closed.

Further the Remotable Contract Implementation continues by evaluating the script and registering classes and or instances indicated by the script in the hosting iframe as being available to clients in one or more other iframes. In addition as illustrated by element the Remotable Contract Implementation uses JavaScript object reflection capabilities in combination with the remoting library to create local proxies for classes that the hosting script intends to use from other iframes which are asynchronously loaded and may or may not be currently available to the hosting iframe . Once these processes are complete the hosting iframe contains a script modified by the Remotable Contract Implementation and ready for execution within the iframe.

Then whenever the script in the hosting iframe initiates an action the Remotable Contract Implementation processes the action in the hosting iframe to generate and pass a corresponding serialized message across iframes boundaries using the browser s between iframes postMessage channel. Note that element of is expanded in further detail by the flow diagram of discussed in further detail below.

Further when a message is received from another iframe over the browser between iframes postMessage channel i.e. hosting iframe is also acting as a target iframe in this instance as illustrated by element the Remotable Contract Implementation deserializes the received message processes that message and provides whatever information or control flow corresponds to that message to the hosting iframe. Note that element of is expanded in further detail by the flow diagram of discussed in further detail below.

In addition when the hosting iframe is done with one or more objects from another iframe the Remotable Contract Implementation optionally disposes of those objects. More specifically as illustrated by element of when the script in the hosting iframe is finished using a specific object located in a remote iframe the Remotable Contract Implementation optionally calls dispose on the corresponding local proxy to optionally clean up resources in the remote iframe.

Similarly when the hosting iframe is closed the Remotable Contract Implementation performs optional cleanup for any resources no longer being used by the hosting iframe.

With respect to as noted above this figure expands upon element of . In general illustrates how the Remotable Contract Implementation processes actions initiated by a script in the hosting iframe. More specifically this processing begins by using the remoting library to call a statically type checked JavaScript method corresponding to the action initiated by script in hosting iframe.

Next the Remotable Contract Implementation uses a proxy generated using the remoting library to map the control flow of the type checked method as a message for passing any of 

Next the Remotable Contract Implementation names any object references with unique identifiers and recursively generates proxies for each object using the remoting library . The Remotable Contract Implementation then serializes the resulting message into a string format. This serialized message is then passed as text through the browser s post message channel across iframes to whatever target iframes are expecting the message. As illustrated by processing of the action initiated by the script in the hosting iframe then returns to element of .

With respect to as noted above this figure expands upon element of . In general illustrates how the Remotable Contract Implementation processes text strings received by the browser from other iframes for use by the hosting iframe which in this instance would be acting as a target iframe . More specifically this processing begins by deserializing the text string received from any other iframe over browser between iframes postMessage channel to reconstruct the message. The Remotable Contract Implementation then further processes the deserialized message by looking up object references from the deserialized message and using that information to convert the object references into JavaScript object pointers.

Next the Remotable Contract Implementation converts the deserialized message and the corresponding object pointers to a corresponding JavaScript control flow e.g. method result event callback progress made asynchronous task completed etc. . This control flow is then passed through a corresponding statically type checked interface to the hosting iframe. As illustrated by processing of the string received by the browser from another iframe then returns to element of .

The Remotable Contract Implementation described herein is operational within numerous types of general purpose or special purpose computing system environments or configurations. illustrates a simplified example of a general purpose computer system on which various embodiments and elements of the Remotable Contract Implementation as described herein may be implemented. It should be noted that any boxes that are represented by broken or dashed lines in represent alternate embodiments of the simplified computing device and that any or all of these alternate embodiments as described below may be used in combination with other alternate embodiments that are described throughout this document.

For example shows a general system diagram showing a simplified computing device such as computer . Such computing devices can be typically be found in devices having at least some minimum computational capability including but not limited to personal computers server computers hand held computing devices laptop or mobile computers communications devices such as cell phones and PDA s multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers audio or video media players etc.

To allow a device to implement the Remotable Contract Implementation the device should have a sufficient computational capability and system memory to enable basic computational operations. In particular as illustrated by the computational capability is generally illustrated by one or more processing unit s and may also include one or more GPUs either or both in communication with system memory . Note that that the processing unit s of the general computing device of may be specialized microprocessors such as a DSP a VLIW or other micro controller or can be conventional CPUs having one or more processing cores including specialized GPU based cores in a multi core CPU.

In addition the simplified computing device of may also include other components such as for example a communications interface . The simplified computing device of may also include one or more conventional computer input devices or combinations of such devices e.g. pointing devices keyboards audio input devices voice or speech based input and control devices video input devices haptic input devices touch input devices devices for receiving wired or wireless data transmissions etc. . The simplified computing device of may also include other optional components such as for example one or more conventional computer output devices e.g. display device s audio output devices video output devices devices for transmitting wired or wireless data transmissions etc. . Note that typical communications interfaces input devices output devices and storage devices for general purpose computers are well known to those skilled in the art and will not be described in detail herein.

The simplified computing device of may also include a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer via storage devices and includes both volatile and nonvolatile media that is either removable and or non removable for storage of information such as computer readable or computer executable instructions data structures program modules or other data. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media refers to tangible computer or machine readable media or storage devices such as DVD s CD s floppy disks tape drives hard drives optical drives solid state memory devices RAM ROM EEPROM flash memory or other memory technology magnetic cassettes magnetic tapes magnetic disk storage or other magnetic storage devices or any other device which can be used to store the desired information and which can be accessed by one or more computing devices.

Storage of information such as computer readable or computer executable instructions data structures program modules etc. can also be accomplished by using any of a variety of the aforementioned communication media to encode one or more modulated data signals or carrier waves or other transport mechanisms or communications protocols and includes any wired or wireless information delivery mechanism. Note that the terms modulated data signal or carrier wave generally refer a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. For example communication media includes wired media such as a wired network or direct wired connection carrying one or more modulated data signals and wireless media such as acoustic RF infrared laser and other wireless media for transmitting and or receiving one or more modulated data signals or carrier waves. Combinations of the any of the above should also be included within the scope of communication media.

Retention of information such as computer readable or computer executable instructions data structures program modules etc. can also be accomplished by using any of a variety of the aforementioned communication media to encode one or more modulated data signals or carrier waves or other transport mechanisms or communications protocols and includes any wired or wireless information delivery mechanism. Note that the terms modulated data signal or carrier wave generally refer to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. For example communication media includes wired media such as a wired network or direct wired connection carrying one or more modulated data signals and wireless media such as acoustic RF infrared laser and other wireless media for transmitting and or receiving one or more modulated data signals or carrier waves. Combinations of the any of the above should also be included within the scope of communication media.

Further software programs and or computer program products embodying the some or all of the various embodiments of the Remotable Contract Implementation described herein or portions thereof may be stored received transmitted or read from any desired combination of computer or machine readable media or storage devices and communication media in the form of computer executable instructions or other data structures.

Finally the Remotable Contract Implementation described herein may be further described in the general context of computer executable instructions such as program modules being executed by a computing device. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by one or more remote processing devices or within a cloud of one or more devices that are linked through one or more communications networks. In a distributed computing environment program modules may be located in both local and remote computer storage media including media storage devices. Still further the aforementioned instructions may be implemented in part or in whole as hardware logic circuits which may or may not include a processor.

The foregoing description of the Remotable Contract Implementation has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the claimed subject matter to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. Further it should be noted that any or all of the aforementioned alternate embodiments may be used in any combination desired to form additional hybrid embodiments of the Remotable Contract Implementation. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended hereto. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

