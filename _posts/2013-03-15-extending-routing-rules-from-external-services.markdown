---

title: Extending routing rules from external services
abstract: Techniques are disclosed to extend routing rules from external services. A request is received to modify a specified rule in a network element of a network. The specified rule governs disposition of a network flow specific to an application. The request is received via a communications channel configured to expose an application programming interface (API) to the application. The request is interpreted at a network abstraction layer of the network element. The request is converted into a command at a service implementation layer of the network element. The command is executed to modify the specified rule in the network element, responsive to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509549&OS=09509549&RS=09509549
owner: CISCO TECHNOLOGY, INC.
number: 09509549
owner_city: San Jose
owner_country: US
publication_date: 20130315
---
Embodiments presented in this disclosure generally relate to network systems. More specifically embodiments disclosed herein relate to techniques for extending routing rules from external services.

Networks have not traditionally been programmable entities. Although some programming frameworks may be used to configure a limited aspect of a network the intelligence has been in the framework and not the network. In this regard any programmability exists in the framework rather than in each switch or router of the network. As networks become more complex and the need for the networks to respond to external changes in near real time becomes increasingly important approaches of configuring networks at individual devices may become impractical.

Embodiments presented in this disclosure provide a computer implemented method that includes receiving a request to modify a specified rule enforced by at least one network element of a software defined networking SDN enabled network. The specified rule governs disposition of a network flow specific to an application. The request is received via a predefined communications channel configured to expose a predefined application programming interface API to the application. The method also includes interpreting the request at a network abstraction layer of the at least one network element. The method also includes converting the request into one or more commands at a service implementation layer of the at least one network element. The method also includes executing the one or more commands to modify the specified rule enforced by the at least one network element responsive to the request.

Other embodiments presented in this disclosure provide a computer readable medium containing a program which when executed performs an operation that includes receiving a request to modify a specified rule enforced by at least one network element of a software defined networking SDN enabled network. The specified rule governs disposition of a network flow specific to an application. The request is received via a predefined communications channel configured to expose a predefined application programming interface API to the application. The operation also includes interpreting the request at a network abstraction layer of the at least one network element. The operation also includes converting the request into one or more commands at a service implementation layer of the at least one network element. The operation also includes executing the one or more commands to modify the specified rule enforced by the at least one network element responsive to the request.

Still other embodiments presented in this disclosure provide a system that includes one or more processors and a memory containing a program which when executed by the one or more processors is confirmed to perform an operation that includes receiving a request to modify a specified rule enforced by at least one network element of a software defined networking SDN enabled network. The specified rule governs disposition of a network flow specific to an application. The request is received via a predefined communications channel configured to expose a predefined application programming interface API to the application. The operation also includes interpreting the request at a network abstraction layer of the at least one network element. The operation also includes converting the request into one or more commands at a service implementation layer of the at least one network element. The operation also includes executing the one or more commands to modify the specified rule enforced by the at least one network element responsive to the request.

One fast growing business sector particular in the space of cloud services is as a service type offerings. Such offerings may often be network related such as load balancing as a service virtual private network VPN as a service and firewall as a service. Such services may often be custom services having custom software and possibly also custom hardware. To provide such services on network devices such as on the switches and routers of a network may improve utility and adaptability of the network at least in some cases. In some embodiments and from an even broader perspective a framework is provided to generally allow third party code to interact with and run on the network devices thereby allowing for custom applications for the network. The framework may include an application architecture configured to support extending routing rules from external services according to techniques presented in this disclosure. The application architecture may also be referred to as an external routing extension architecture. At least in some embodiments the framework may also run on enterprise grade hardware and support manipulation of flows via third party code. The framework may be provided as part of a software defined networking SDN enabled network.

At least in some embodiments SDN techniques allow a network traditionally a static entity to become more dynamic in nature. SDN opens networks to application developers who may write applications to manage network elements and data flows passing through a network element without requiring physical access to the network elements themselves. Thus rather than a network element being a fixed function appliance SDN considers network hardware to be part of a distributed computational system that can be manipulated by software. An application developer writing applications for an SDN may execute the application in the network which may include any device which processes data flows between computing systems e.g. a switching or routing element connecting host systems to a network and devices connecting one computing network to another as well as other computing devices able to execute the application while connected to the network. The application may execute commands and apply functions to the network devices and the data flows remotely or locally on the network element itself. Using applications in an SDN developers may manage networking functions of a network element such as routing quality of service QoS and bandwidth allocation as well as manage performance and or properties the network elements themselves. Additionally different programming logic may be applied to different flows or packets in the same network topology such that each network graph need not have its own instance of the SDN application.

In some embodiments SDN provides additional flexibility and solidarity relative to conventional networks. Using an SDN controller which may be either centrally located or located on the respective network devices a network administrator can configure the control plane and dictate how the network devices route data. For example the network administrator may assign criteria or SDN rules that when satisfied instruct the network device to perform a specific action on the received packet e.g. drop the packet forward the packet to a particular network device evaluate the packet using an application on the network device and the like. In one embodiment the SDN controller configures the routing table or forwarding table i.e. forwarding information base in a network device based on the network administrator s preferences.

As described above in one embodiment an application architecture is provided to support extending routing rules from external services. The application architecture may include an orchestration application . In one embodiment the orchestration application is configured to orchestrate automation and programmability of the network elements in the SDN enabled network . The orchestration application may provide at least one API to abstract any implementation specific details of the network elements in the SDN enabled network . Stated differently the at least one API of the orchestration application are abstraction tools to permit a developer or network administrator to access and monitor different functions and outputs of the network elements in the SDN enabled network . Accordingly the at least one API may be configured to allow manipulation of management and runtime aspects of the network elements . By using the orchestration application and the at least one API functional programming techniques may be used to program a wide range of network elements regardless of the wide array of distinctions that may be found between specific network elements . For example the orchestration application may provide an interface to allow the application to read write and modify a routing table and routing engine of a network element .

In one embodiment the at least one API is an integrated component of the orchestration application or the application . In one embodiment the at least one API is configured to gather data associated with the different functions of the network elements such as statistics associated with the network element routing tables status of the network elements topology information errors etc. Further the at least one API may also permit a developer or network administrator to control functions of the network elements such as to change settings in the forwarding engine change the state of the network elements etc. The application may thus use the at least one API to send commands to the network elements .

In one embodiment each computer is configured to execute the application which is configured to use the functionality of the at least one API provided by the orchestration application and in order to modify the behavior of the network elements such as routing behavior. By abstracting details of the network elements using the at least one API a developer or network administrator may more readily and efficiently monitor and control different types of network elements at least in some cases regardless of the proprietary firmware used by each type of network element . At least in some embodiments such functionality may be permitted or facilitated via a software development kit SDK associated with the API . An example of the SDK is the One Platform Kit onePK software development kit SDK available from Cisco Systems of San Jose Calif. In some embodiments the application may additionally use the SDK which provides programmatic access to functionality of the network element from an external device such as the computer . In providing an application architecture that includes the API and the associated SDK according to the techniques disclosed herein routing rules may be more readily and efficiently extended from external services such as the application at least in some cases.

As shown in the networked system includes the operating system of the network element of . The operating system includes a hardware data plane that may be manipulated by a control process space also referred to herein as a management runtime. In one embodiment the control process space is extended to include the API in a session manager to allow manipulation of each management and runtime aspect of predefined features of the network element . Examples of such aspects include discovery topology element interface external configuration system log trace logging authentication authorization and accounting AAA Cisco Discovery Protocol CDP routing QoS access control list ACL external service and datapath policy.

In some embodiments each API has a corresponding module in the session manager . Examples of modules include interface tracing routing QoS ACL policy and other custom modules. The modules may include platform dependent modules and platform independent modules. The underlying capabilities of the API may be coordinated into a service framework of the session manager . The service framework may be exposed via a communications channel to the applications executing in an application hosting environment . An example of the communications channel is a remote procedure call RPC channel such as Thrift and examples of components of the service framework include session handler pluggable transport session event high availability HA notification handler locking service version handler access control and service registry. In some embodiments the RPC channel may be network transparent.

In one embodiment the applications may use an appropriate SDK that is configured to communicate over the communications channel and that is further configured to provide programmatic access to functionality of the network element from an external device. In some embodiments the SDK is configured to communicate with a data path process via local inter process communication IPC and the data path process may access the features via virtual network service data path vPath and or generic routing encapsulation GRE . By providing the API and the SDK according to the techniques disclosed herein third party code such as in the form of the application may be executed in multi tenant fashion on the networked system and using the underlying management runtime of the network element .

In one embodiment the application may be logically viewed as having three associated parts including an input filter on the network element the application proper also referred to as a controller and a switching routing element that is part of the data plane and that is manipulable via the API . At least in some embodiments the input filter is on an ingress port of the network element and the switching routing element directs packets or network flows to an appropriate egress port of the network element . Network flows may also be referred to herein as flows. Code associated with the API runs on the network element allowing programmatic access to the capabilities of the switch including reading and setting multiprotocol label switching MPLS tags reading and modifying Layer 2 or Layer 3 information deep packet inspection DPI updating routing tables etc. In one embodiment external applications use the SDK to coordinate with the management runtime on the network element and via the communications channel. The external application may manipulate both the input filter and the switching routing element efficiently and programmatically at least in some cases. Identified flows may then be sent to the external application for processing.

In some embodiments such as those involving multi tenant use over inclusive filters from a given user are prevented from catching flows from other users. To that end an MPLS tag or similar identifier is used as a first filter that is AND ed with any user supplied input filters. The MPLS tag may be cryptographically matched with credentials provided by the external application when the external application connects to the network element through the SDK to prevent unauthorized tapping of flows from other users.

In one embodiment when presented with a flow the external application may elect whether to itself handle the flow or to register through the SDK a rule to govern disposition of the flow. If the application elects to itself handle the flow then the flow continues on from the egress port of the device hosting the external application. Otherwise the application may programmatically modify the routing policy or other rules associated with the flow. The SDK receives the modifications and marshals the modifications via the communications channel. The modifications are then interpreted at the internal network abstraction layer and turned into commands or modifications at the service implementation layer . In turn the services at the service implementation layer control the flows at the hardware data plane level thereby maintaining performance of the network element . At least in some embodiments the application may arbitrarily alter the state of flows packets or configuration of the switch and according to rules encoded in the application by the developer.

In the end node hosting mode the application is hosted within a container and runs on an external server which may be any commodity device such as a server laptop mobile device etc. Doing so may provide high latency access to the forwarding path at least in some cases. Further both isolation and compute resources may be further increased at least relative to the blade hosting mode . Accordingly the communications abstraction provided between the application and the service framework allows the application to be deployed either on the switch in a separate process in a blade within the same chassis as the switch or on a separate computer or virtual machine VM altogether including third party computers or VMs.

In one embodiment the API may be configured to allow the application to independently modify each individual management and runtime aspect of the network element selected from MPLS tags Layer 2 information Layer 3 information DPI and routing tables. The request may be sent by the application via the SDK provided at the presentation layer associated with the at least one network element . The SDK may be configured to marshal the request and send the marshaled request via the communications channel. As described above in one embodiment the communications channel may be a network independent RPC channel. In such embodiments the network element may un marshal the received request prior to interpreting the request. The modified rule may be prevented from affecting at least one network flow not associated with a provider of the application . The specified rule may be modified by the management runtime of the network element . Depending on the embodiment the application may execute on the network element on a blade server disposed within the same chassis as the network element or on an external computer or VM operatively connected to the network element .

Accordingly at least some embodiments disclosed herein provide techniques to extend routing rules from external services. One embodiment provides a coordinated service framework configured to allow manipulation of management and runtime aspects of a network element such as a switch or router. Together with the network transparent communications channel the coordinated service framework allows for external controllers or applications to control the disposition of packets and flows and in various use case scenarios including multi tenant environments and third party application code. Consequently cloud hosts may provide such applications on top of any network configured according to the techniques disclosed herein. Further enterprise customers may extend their networks in arbitrarily ways by using the techniques disclosed herein.

In some cases the relationship between the external application and the underlying hardware and runtime which involves separation of management and policy planes may be analogous to a separation between the data plane and a standalone controller in context of SDN. However what can be managed from the external application may be much broader at least in some cases and may encompass management inspection QoS flow management etc.

In one embodiment any router or switch configured according to the techniques disclosed herein may advantageously become OpenFlow enabled. OpenFlow control packets may be detected and diverted at the ingress port and diverted to an OpenFlow controller running on the network element on a blade server in the same chassis or even on another host. The OpenFlow controller application may use the SDK to programmatically change the routing switching element in accordance with OpenFlow directives even when the network element itself may not necessarily support OpenFlow. Externally it appears as if the network element indeed supports OpenFlow.

In another embodiment load balancing provided as a service may allow a load balancing ruleset to run on a third party VM and may support any arbitrary ruleset including those of other vendors. The VM may be controlled by the third party and use the SDK to affect the flows across a number of network elements. Because only the flows associated with the third party is diverted to the load balancing service of the third party multiple third parties may participate in providing respective rules for their respective flows thereby providing multi tenant control of the network flows on the hardware.

Each network element and computer is generally under the control of an operating system. Examples of operating systems include the UNIX operating system distributions of the Linux operating system and the NX OS operating system by Cisco Systems of San Jose Calif. More generally any operating system supporting the functions disclosed herein may be used. At least in some embodiments the operating system of the network element is different from the operating system of the computer .

Each processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Similarly each memory may be a random access memory. While each memory is shown as a single identity it should be understood that each memory may comprise a plurality of modules and that each memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. Each network interface device may be any type of network communications device allowing the network element or computer to communicate with other nodes via the software defined network .

Each storage may be a persistent storage device. Although each storage is shown as a single unit each storage may be a combination of fixed and or removable storage devices such as fixed disc drives solid state drives floppy disc drives tape drives removable memory cards or optical storage. Further the memory and the storage may be part of one virtual address space spanning multiple primary and secondary storage devices.

The input device may be any device for providing input to the computer . For example a keyboard and or a mouse may be used. The output device may be any device for providing output to a user of the computer . For example the output device may be any display screen or set of speakers. Although shown separately from the input device the output device and input device may be combined. For example a display screen with an integrated touch screen may be used.

As shown the memory of the network element includes the orchestration application which is configured to provide at least one API . Depending on the embodiment the application may execute on the network element on a blade within a same chassis as the network element or on the computer . The application may also use the SDK associated with the API in order to programmatically access management and runtime aspects of the network element via the computer .

In the preceding reference is made to embodiments presented in this disclosure. However the scope of the present disclosure is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice contemplated embodiments. Furthermore although embodiments disclosed herein may achieve advantages over other possible solutions or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the scope of the present disclosure. Thus the preceding aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

Aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the disclosure may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present disclosure a developer may configure an external service to use an API provided by a network element in the cloud. Doing so allows the developer to extend routing rules from the external service executing on any computing system attached to a network connected to the cloud e.g. the Internet .

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In view of the foregoing the scope of the present disclosure is determined by the claims that follow.

