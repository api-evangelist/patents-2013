---

title: Apparatus and method for tile elimination
abstract: An exemplary embodiment describes a method for tile elimination, including: reading in data of a new tile; reading signature values corresponding to the new tile from a signature value repository; generating signature values for the new tile; comparing the read signature values and the generated signature values of the same tile to determine whether the two sets of signature values being identical; when the two sets of signature values being identical, copying the new tile directly from a tile frame buffer without rendering; otherwise, updating the signature value repository with the generated signature values replacing the stored signature values; rendering the tile; and updating the tile frame buffer with the newly rendered tile.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09305326&OS=09305326&RS=09305326
owner: INDUSTRIAL TECHNOLOGY RESEARCH INSTITUTE
number: 09305326
owner_city: Hsinchu
owner_country: TW
publication_date: 20131226
---
Graphics Processing Unit GPU now possesses the capability to render images of giga byte magnitude. As the trend of computer graphics moves towards higher resolution display such as 4K 4K and complex rendering the capability of computation and bandwidth of interface between GPU and system is critical. However for handheld devices possessing powerful computation capability and large bandwidth is not realistic because of huge power consumption. The tile based rendering technique wherein a frame is divided into a plurality of tiles for rendering is proposed to help GPU in better exploring the locality of memory access utilizing efficient use of traffic bandwidth and better scheduling of shader computation to achieve better performance.

Other techniques such as scheduling graphic commands based on property and function dispatching the commands to respective hardware and collecting the result in display driver and by using a sampling mechanism and utilizing previously rendered and sampled pixels to reconstruct a new frame are also proposed.

An exemplary embodiment describes an apparatus utilizing tile elimination comprising a front portion pipeline module a tile elimination module a back portion pipeline module all connected in a pipeline manner wherein the tile elimination module further includes a tile engine a signature value computation unit a signature value repository and a tile comparison unit wherein the tile engine is connected to the primitive operation unit the signature value computation unit is connected to API state and vertex shader primitive operation unit and tile engine for computing signature values the signature value repository is connected to the signature value computation unit for storing the signature values computed by the signature value computation unit and the tile comparison unit is connected to the tile engine and the signature value repository for comparing signature values of a tile of the current frame and the same tile of the previous frame and for accessing signature values of tiles stored in the signature value repository the tile comparison unit being also connected to the frame buffer and responsible for determining whether to proceed to render the tile or to signal the frame buffer to copy the previously rendered tile and eliminate the rendering of the tile.

Another embodiment describes a method for tile elimination comprising reading in data of a new tile reading signature values corresponding to the new tile from a signature value repository generating signature values for the new tile comparing the read signature values and the generated signature values of the same tile to determine whether the two sets of signature values being identical when the two sets of signature values being identical copying the new tile directly from a tile frame buffer without rendering otherwise updating the signature value repository with the generated signature values replacing the stored signature values rendering the tile and updating the tile frame buffer with the newly rendered tile.

The foregoing will become better understood from a careful reading of a detailed description provided herein below with appropriate reference to the accompanying drawings.

In the following detailed description for purpose of explanation numerous specific details are set forth in order to provide a thorough understanding of the disclosed embodiments. It will be apparent however that one or more embodiments may be practiced without these specific details. In other instances well known structures and devices are schematically shown in order to simplify the drawing.

As shown in the tile elimination module further includes a tile engine a signature value computation unit a signature value repository and a tile comparison unit wherein the tile engine is connected to the primitive operation unit to receive results from the primitive operation unit and to generate a list of arrays indicating the processing elements to be rendered on a tile basis the signature value computation unit is connected to API state and vertex shader primitive operation unit and tile engine for computing signature values based on the data and parameters from the API state and vertex shader primitive operation unit and tile engine the signature value repository is connected to the signature value computation unit for storing the signature values computed by the signature value computation unit and the tile comparison unit is connected to the tile engine and the signature value repository for comparing signature values of a tile of the current frame and the same tile of the previous frame and for accessing signature values of tiles stored in the signature value repository the tile comparison unit is also connected to the frame buffer and responsible for determining whether to proceed to render the tile or to signal the frame buffer to copy the previously rendered tile and eliminate the rendering of the tile.

It should be noted that the signature value computation unit may be implemented as a streaming signature value generator utilizing some signature generation algorithm such as but not limited to cyclic redundancy check CRC cryptographic hash algorithms MD5 SHA and so on. The parameters and data existing in the GPU that may be used in computing includes such as but not restricted to API count API state changes lighting matrix texture coordinates viewports transformation matrix color index normal coordinates texture ids texture address and so on.

Furthermore the tile comparison unit compares the signature values of a tile in the current frame computed by the signature value computation unit and the signature values of the same tile in the previous frame read from signature value repository . When the respective signature values are the same between current frame and previous frame the tile is not rendered. Instead the previously rendered tile is copied from the frame buffer and used. On the other hand when the respective signature values are different for the tile in the two frames the tile comparison unit proceeds to continue the rendering process in the pipeline i.e. passing data to the rasterizer . When the tile in the current frame is rendered the same tile in the previous frame is discarded from the frame buffer.

The signature value repository is not restricted to any specific implementation as long as the stored signature values are tile based. shows a schematic view of a storage scheme for the signature value repository according to an exemplary embodiment. As shown in the signature values of a tile is stored as a plurality of pairs. In the present embodiment five signature types are defined and computed for each tile including a command level signature CLS a scene level signature SLS an object level signature OLS a composer level signature PLS and a texture level signature TLS . In general a level is defined as an equal or similar effect or function that would affect the rendering pipeline of GPU. The definitions of each of the five level signatures are described as follows 

Command Level Signature CLS the CLS represents the command level characteristics. The command level refers to data and signals that would affect the entire rendering process such as graphics library GL command. For example GL API is fed into the computer graphics device through high level computing components like software compiler and driver. The number of GL API the state of GL API and the indication of change of the shader program passes through the signature value computation unit to generate one or more signature values of CLS type.

Scene Level Signature SLS the SLS represents scene level characteristics. The scene level refers to data or signals that would affect the rendering of the entire scene from the viewers perspective such as the final projection of the view final lighting effect and so on. For example the transformation and lighting in GL API provides scene level information which would affect the scene and the rendered frames. Transformation such as coordinate transformation the relation between scene and object and lighting such as direct lighting ambient lighting diffuse lighting specular lighting emission lighting and related lighting states i.e. number of light strength of light color of light are some of the scene level information. It should be noted that additional data such as a triangle list and a triangle count generated both generated by the tile engine in the present embodiment may also be included in the SLS.

Object Level Signature OLS the OLS represents object level characters. The object level refers to data or signals that would affect a graphic object such as the state of the object the characteristic value of the object the color of the object and so on. For example an object may be viewed as an enclosure of drawing command or drawing object in GL. In the present embodiment the OLS also includes coloring information such as fog fog mode fog and fog density and a primitive list related to the object.

Composer Level Signature PLS the PLS represents composer level characteristics. The composer level refers to data or signals indicating a list of vertices. For example the vertices are the descriptions to define the boundary of an object and may be used as the basic information to draw the object. In the present embodiment the PLS may include vertex coordinates vertex normal coordinates and so on.

Texture Level Signature TLS the TLS represents texture level characteristics. The texture level refers to data or signals regarding the texture that would be used in rendering. For example texture operation is performed in the fragment shader module in the pipeline. In the present embodiment the texture usage may be obtained by querying in advance before for example rasterization. The texture usage may include such as texture identification and texture address that would be used in the current frame. When the texture usage is changed in the frame the information about the texture obtained through in advance query will also be different.

In the present embodiment a signature value may be computed by the signature value computation unit for each of the CLS SLS OLS PLS and TLS levels to represent a tile and a summary signature value may further be computed based on the CLS SLS OLS PLS and TLS values. An advantage provided in the present embodiment is the minimum requirement of the storage space as well as the required computation time of the signature values.

It should be noted that the signature value repository may also be realized with other storage schemes for example to include more sub types and categories of signature values for further detailed differentiation. shows schematic view of a storage scheme for the signature value repository according to another exemplary embodiment. As shown in the signature values computed and stored for each tile include a CL Command a CL State an SL Lighting an SL Transform an SL Tile Data an OL Coloring a PL Vertex Coordinates a PL Normal Coordinates a TL Texture ID a TL Texture Address and a Summary Signature SS . In this embodiment the more signature values are computed and stored to provide finer granularity of signature values when comparing tiles.

The following describes each sub type signature values in details. The CL Command is the count of GL command that is fed to the GL API the CL State is the state that GL command indicates the SL Lighting is an lighting matrix used in rendering such as ambient lighting diffuse lighting specular lighting emission lighting shininess lighting and related lighting states i.e. number of light strength of light color of light the SL Transform is the view transformation where a change of viewport also entails change of relative location of each component in the frame the SL Tile data represents the output of tile engine such as the count of triangles and the content of the triangles and so on the OL Coloring represents how the fog effect applies such as fog mode fog coloring value density and so on the PL Vertex coordinate is the coordinates of each vertex the PL Normal coordinate is the coordinates of each vertex normal the TL Texture ID is the numbering of current use of texture and the TL Texture address is the actual location of texture use in the memory wherein the address can be a physical address or logical mapping address with reference base address.

The present embodiment uses the above storage scheme to enable a strict control over the hardware units for successive operation after the tile comparison unit i.e. the rasterizer fragment shader depth stencil color buffer blender dither unit and frame buffer . After the current tile is determined to require rendering based on the comparison result the hardware units in the pipeline may be enabled according to the information stored in the above scheme.

It should be noted that a hybrid storage scheme may also be used. For example the CLS SLS and OLS include only a single signature value for each while the PLS and TLS include two signature values respectively to provide finer details. As such the actual storage scheme may be selected according to the available storage resource.

It is worth noting that the signature values read in step and generated in step must be of the same storage scheme so that the comparison may be valid in step . For example when the storage scheme shown in is selected for the signature value repository the comparison made in step must include the comparison of signature values CLS SLS OLS PLS TLS and SS respectively. When any of the signature values of CLS SLS OLS PLS TLS and SS is different the new tile in the current frame is considered different from the same tile in the previous frame. Therefore the new tile in the current frame must be rendered. Similarly when the storage scheme shown in is selected for the signature value repository the comparison made in step must include the comparison of signature values CL command CL state SL lighting SL transform SL tile data OL coloring PL vertex coordinates PL normal coordinates TL texture ID TL texture address and summary signature SS respectively. When any of the signature values of CL command CL state SL lighting SL transform SL tile data OL coloring PL vertex coordinates PL normal coordinates TL texture ID TL texture address and summary signature SS is different the new tile in the current frame is considered as different from the same tile in the previous frame.

In summary the disclosure provides apparatus and method for tile elimination in rendering which utilizes existing parameters and data in GPU to save computation and traffic bandwidth between system and GPU.

An exemplary embodiment describes an apparatus utilizing tile elimination including connected in pipeline an application programming interface API a state and vertex shader a primitive operation unit a tile elimination module a rasterizer a fragment shader a depth stencil a color buffer blender a dither unit and a frame buffer wherein the tile elimination module further includes a tile engine a signature value computation unit a signature value repository and a tile comparison unit wherein the tile engine is connected to the primitive operation unit the signature value computation unit is connected to API state and vertex shader primitive operation unit and tile engine for computing signature values the signature value repository is connected to the signature value computation unit for storing the signature values computed by the signature value computation unit and the tile comparison unit is connected to the tile engine and the signature value repository for comparing signature values of a tile of the current frame and the same tile of the previous frame and for accessing signature values of tiles stored in the signature value repository the tile comparison unit being also connected to the frame buffer and responsible for determining whether to proceed to render the tile or to signal the frame buffer to copy the previously rendered tile and eliminate the rendering of the tile.

Another embodiment describes a method for tile elimination including reading in data of a new tile reading signature values corresponding to the new tile in the previous frame from a signature value repository generating signature values for the new tile comparing the read signature values and the generated signature values of the same tile to determine whether the two sets of signature values being identical when the two sets of signature values being identical copying the new tile directly from a tile frame buffer without rendering otherwise updating the signature value repository with the generated signature values replacing the stored signature values rendering the tile and updating the tile frame buffer with the newly rendered tile.

It will be apparent to those skilled in the art that various modifications and variations can be made to the disclosed embodiments. It is intended that the specification and examples be considered as exemplary only with a true scope of the disclosure being indicated by the following claims and their equivalents.

