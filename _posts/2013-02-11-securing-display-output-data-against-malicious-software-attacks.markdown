---

title: Securing display output data against malicious software attacks
abstract: Systems, apparatus and methods are described including operations for securing display output data against malicious software attacks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09158942&OS=09158942&RS=09158942
owner: INTEL CORPORATION
number: 09158942
owner_city: Santa Clara
owner_country: US
publication_date: 20130211
---
In a variety of situations such as online financial transactions or the like a computing device may need to present information to a user in a non tampered manner. In such situations malicious software i.e. malware such as kernel mode kernel mode rootkits and or user mode rootkits can inject code into a user application. The malicious code may attach key loggers or read memory such as displayer buffers and steal users credentials or other data.

In some existing implementations a display buffer may be protected using encryption e.g. protected audio video path PAVP encryption hardware isolation and or a display protected via a virtual memory manager. However such implementations may not be available on every platform and in general they may be costly and or difficult to implement.

In various computing implementations it may be desirable to protect user data and in particular sensitive user data e.g. usernames and passwords financial account information or the like against mal ware attacks.

One or more embodiments or implementations are now described with reference to the enclosed figures. While specific configurations and arrangements are discussed it should be understood that this is done for illustrative purposes only. Persons skilled in the relevant art will recognize that other configurations and arrangements may be employed without departing from the spirit and scope of the description. It will be apparent to those skilled in the relevant art that techniques and or arrangements described herein may also be employed in a variety of other systems and applications other than what is described herein.

While the following description sets forth various implementations that may be manifested in architectures such system on a chip SoC architectures for example implementation of the techniques and or arrangements described herein are not restricted to particular architectures and or computing systems and may be implemented by any architecture and or computing system for similar purposes. For instance various architectures employing for example multiple integrated circuit IC chips and or packages and or various computing devices and or consumer electronic CE devices such as set top boxes smart phones etc. may implement the techniques and or arrangements described herein. Further while the following description may set forth numerous specific details such as logic implementations types and interrelationships of system components logic partitioning integration choices etc. claimed subject matter may be practiced without such specific details. In other instances some material such as for example control structures and full software instruction sequences may not be shown in detail in order not to obscure the material disclosed herein.

The material disclosed herein may be implemented in hardware firmware software or any combination thereof. The material disclosed herein may also be implemented as instructions stored on a machine readable medium which may be read and executed by one or more processors. A machine readable medium may include any medium and or mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a machine readable medium may include read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other forms of propagated signals e.g. carrier waves infrared signals digital signals etc. and others.

References in the specification to one implementation an implementation an example implementation etc. indicate that the implementation described may include a particular feature structure or characteristic but every implementation may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same implementation. Further when a particular feature structure or characteristic is described in connection with an implementation it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other implementations whether or not explicitly described herein.

Systems apparatus articles and methods are described below including operations for securing display output data against malicious software attacks.

As described above in various computing environments malware may inject code into a user application that may attach key loggers or read memory such as displayer buffers and steal users credentials or other data.

As described in greater detail below user data such as for example display buffer data e.g. display data may be protected against malware attacks. In general a trusted memory service layer TMSL in a computing platform may be a virtual machine extension VMX root mode component and may provide various services. For example the TMSL may provide physical memory views only accessible by whitelisted software i.e. software known to be validated and trusted . Such physical memory views may be used to secure data into memory inaccessible to non whitelisted software. In the context of protecting a display buffer from malware for example an isolated display buffer may be generated or marked which may only be accessed by whitelisted or trusted software or code. The TMSL may similarly provide a portion of a graphics memory space i.e. an access controlled graphics memory region that may only be accessed by whitelisted or trusted software or code.

Further the TMSL may be capable of generating or emulating a device such as for example a peripheral component interconnect PCI or peripheral component interconnect express PCIe device. In this context the TMSL may provide a virtual sprite device and an associated virtual sprite memory region. The virtual sprite device may be implemented via a sprite engine of a graphics processor for example and may provide a sprite an image that may overlay frame buffers. In this context the sprite may provide an image that copies or emulates a presentation to a user i.e. the presentation the user would have viewed via a standard graphics pipeline such that the user sees no change in the information displayed to them. However as used herein the sprite may display the same data to the user via a separate and secure graphics pipeline i.e. a sprite pipeline . In general the data to be presented to the user may be sensitive data. The sensitive data may be received at a device or system or generated internally via the device or system. For example the data may include financial data received via a network such as the Internet. Or for example the data may be keystroke data received via a keyboard or virtual keyboard or the like received at the device and displayed to the user such as a username password or credit card number or the like.

For illustrative purposes in a non protected operation a graphics pipeline may provide display data to a display device. For example a display buffer may be accessed by for example an application programming interface API to provide the data in the display buffer to a windows manager. The windows manager may optionally compose the data and provide it to a graphics driver which may include a graphics translation table GTT for translating virtual addresses to physical addresses which may provide the data via a physical memory to a graphics device such as a display device. As will be appreciated such operations may be exposed to a malware attack.

As described in greater detail below in the discussed implementations a place holder display buffer which may contain non sensitive data fake data or the like may provide data via the discussed pipeline such that any malware attack will find only the non valuable non sensitive data held in the place holder display buffer. To display the potentially sensitive data to the user an alternative graphics pipeline i.e. a sprite pipeline may be used. The alternative pipeline may only allow access to whitelisted or trusted software or code. For example in response to sensitive data being received in the discussed isolated display buffer or other event triggering the described protective techniques data held in the place holder display buffer may be provided to the windows manager upon a API being invoked. Further sensitive data held in the isolated display buffer may be transferred via a virtual sprite device to a virtual sprite memory region. As discussed the virtual sprite device and virtual sprite memory region may be known to be secure due to being registered by the TMSL. The sensitive data may be further transferred to the discussed access controlled graphics memory region of the graphics memory space. Also as discussed the access controlled graphics memory region may be known to be secure due to having a trusted memory view generated by the TMSL. The secure data may then be transferred to a graphics device such as a display device for viewing by the user. As will be appreciated using the described techniques any malware attack may only receive non sensitive data and the sensitive data may have bypassed the attacked graphics pipeline for a secure graphics pipeline. Such implementations may provide security for display data.

In some examples system may include additional items that have not been shown in for the sake of clarity. For example system may include one or more central processing units a radio frequency type RF transceiver a display an antenna an operating system a graphics processor or the like. Further system may include additional items such as a speaker a microphone an accelerometer memory a router network interface logic etc. that have not been shown in for the sake of clarity.

As discussed system may provide security for user data. As shown system may include TMSL which may be implemented via one or more central processing units of system . As discussed TMSL may be configured to provide physical memory views only accessible by whitelisted i.e. software known to be validated and trusted software programs or virtual devices or the like. In some examples TMSL may be a virtual machine extension VMX root mode component. In some examples TMSL may be operate in VMX root mode and use Extended Page Table hardware to isolate physical memory of isolated display buffer control access to GTT control access to virtual sprite memory region and or control access to graphics memory space . In such examples TMSL may use Extended Page Table virtualization technology for memory management including memory access control and isolation. TMSL may be configured to compartmentalize a kernel virtual addresses space or a process virtual address space into separate physical memory views. Such separation may allow for physical memory views only accessible to whitelisted or trusted software or code i.e. isolated memory or access controlled memory . Other non protected areas of memory may be accessible to any code which may be whitelisted or trusted or unknown and potentially malware for example .

As shown in TMSL may provide for isolated display buffer which may only be accessed via a physical memory view by a registered program e.g. software virtual devices or the like for example. Isolated display buffer may be a portion of process address space for example and may be marked as isolated via the described physical memory view managed by TMSL . The physical memory view associated with isolated display buffer may be described as an isolated display buffer trusted memory view for example. Further system may include place holder display buffer as a portion of process address space which may not be protected by a physical memory view.

Further as shown TMSL may provide for access controlled region of graphics memory space . Access controlled region may only be accessed via a physical memory view by a registered program as managed by TMSL for example. The physical memory view associated with access controlled region may be described as an access controlled region trusted memory view for example. As shown graphics driver may include a graphics translation table GTT . GTT may provide a translation of virtual memory addresses to physical memory addresses such as for example translating kernel virtual addresses to physical addresses. In some examples virtual sprite device and the operating system and or other devices of system may access and or control areas of graphics memory space via GTT . In the output display security context discussed herein TMSL may implement a physical memory view to limit which devices and or the operating system may have access to the GTT to write to graphics memory space . In some examples marking a portion of graphics memory space as access controlled graphics memory region may include accessing GTT via physical memory view implemented via the TMSL . In some examples graphics memory space and virtual sprite memory region may be implemented as a memory mapped input output MMIO memory spaces. For example virtual sprite memory region may be a 1 1 copy or remapping of graphics memory space . In some examples the discussed implementations may include disabling a blitter BLT engine and enabling monitoring of GTT via the operating system of system . Upon completion of the secure presentation of display data monitoring of GTT may be disabled and the blitter engine may be enabled. Further upon completion of the secure presentation of display data access controlled region and or isolated display buffer may be disabled and returned for general usage by system .

It should be noted that TMSL may provide individual physical memory views having the same or different properties such as for example lists of programs or virtual devices that may access the individual physical memory views. In the context of protecting isolated display buffer and access controlled region the physical memory views may each allow access via virtual sprite device and virtual sprite memory region however they may allow access to other differing programs if any as needed.

Also as discussed TMSL may be TMSL may be configured to generate or emulate a device. For example TMSL may provide virtual sprite device and virtual sprite memory device region . Further various components of system may need to be loaded or set up prior to protecting sensitive data for example. To set up and or load various components of system TMSL may be loaded using any suitable techniques such as for example during a boot up of system or upon opening a secure application platform or the like. TMSL may expose an as yet unverified virtual sprite device driver i.e. software that operates a virtual sprite device . The unverified sprite device driver may be loaded via the operating system. Upon successfully loading the virtual sprite device driver TMSL may determine whether the unverified virtual sprite device driver is included on a provisioned whitelist i.e. that the sprite device driver is whitelisted . If the unverified virtual sprite device driver is whitelisted the virtual sprite device may be registered by TMSL allowed to operate provided associated virtual memory space and or have access to various physical memory views for example. In other implementations TMSL may load only expose a virtual sprite device driver known or flagged to be whitelisted.

As discussed in some implementations virtual sprite device may be exposed and or emulated as a PCI or PCIe virtual device. In such implementations virtual sprite device may need to be enumerated by the operating system as a PCI or PCIe device. In some examples TMSL may be loaded and the unverified virtual sprite device may be exposed prior to the operating system enumerating PCI or PCIe devices. In other examples TMSL may be loaded after the operating system has enumerated PCI or PCIe devices and the unverified virtual sprite device may be exposed as a hot plug device that invokes an operating system device manager to rescan a PCI or PCIe bus.

Returning now to the discussion of virtual sprite device and virtual sprite memory device region virtual sprite device and virtual sprite memory device region may have access to isolated display buffer and access controlled region . Virtual sprite device may be implemented via a sprite engine of a graphics processor for example and may provide a sprite an image that may overlay frame buffers. As discussed a sprite may provide an image that copies or emulates a presentation to a user and may be used herein may present the same data to the user via a separate and secure graphics pipeline i.e. a sprite pipeline . As shown in the data to be presented to the user may be sensitive data . In general sensitive data may include any data that may need to be protected from malware such as for example usernames and passwords financial account information or the like. Sensitive data may be received at system or generated internally via system . For example sensitive data may include financial data received via a network such as the Internet. Or for example sensitive data may be keystroke data received via a keyboard or virtual keyboard or the like received at the device and displayed to the user such as a username password or credit card number or the like.

The process for protecting sensitive data may be invoked in response to sensitive data being received at isolated display buffer or in response to another triggering event. Usage of isolated display buffer may be triggered by any suitable event such as for example the identification of data coming from a protected process being associated with a hardware protected environment or a protected process registering for protection with TMSL . In general a process e.g. a software program associated with sensitive data may be previously registered by TMSL as a protected e.g. trusted process. Such a registration may include determining via TMSL whether the process is a whitelisted process or another verification technique. The protected process may include any suitable process such as for example a user mode process a process related to a financial transaction an online financial transaction another online transaction or the like.

In response to the reception of sensitive data at isolated display buffer one or more APIs may be invoked into or via windows manager to receive information such as for example coordinates or other graphical information associated with place holder display buffer associated with the protected process. As discussed such an operation or operations may be typical in providing data from a display buffer to a graphics pipeline for display to a user. As discussed in the described techniques place holder display buffer may include only non sensitive data or even fake data or the like such that any malware attacking the data will not receive sensitive data for example such that sensitive data may be protected. Further as discussed to display sensitive data to the user via display device a separate graphics pipeline may be used. In general APIs may include any suitable APIs such as for example DirectX APIs available on Microsoft Windows.

Sensitive data in isolated display buffer may be transferred to virtual sprite memory region via virtual sprite device for example. As discussed virtual sprite device may be a trusted whitelisted program such that there is little or no threat that the access to isolated display buffer is being performed by malware. Sensitive data in virtual sprite memory region may be transferred to access controlled region via virtual sprite device for example. In other examples sensitive data may be transferred to access controlled region via TMSL . In either event as sensitive data may have been delivered to graphics memory space via a protected graphics pipeline e.g. a sprite pipeline .

Sensitive data may be transferred or provided to display device via any suitable technique from access controlled region of graphics memory space for display as display of sensitive data . In general display device may include any display device such as for example a monitor either integrated with system or provided separately and communicatively coupled e.g. via wired or wireless connection to other components of system to receive sensitive data for display.

As discussed some implementations may include disabling a blitter BLT engine and enabling monitoring of GTT via the operating system of system . Upon completion of the secure presentation of display data monitoring of GTT may be disabled and the blitter engine may be enabled. Further upon completion of the secure presentation of display data access controlled region and or isolated display buffer may be disabled and returned for general usage by system .

In general the operations discussed with respect to and elsewhere herein may secure display output data. Further as discussed although any malware present in system may access place holder display buffer it may not access isolated display buffer .

As will be discussed in greater detail below system or other system discussed herein may be used to perform some or all of the various functions discussed below in connection with or the operations previously discussed with respect to .

Process may be utilized as a computer implemented method for securing display output data. Process may begin at block REGISTER A PROCESS AS A PROTECTED PROCESS VIA A TRUSTED MEMORY SERVICE LAYER where a process may be registered via a trusted memory service layer as a protected process. Registering a process may include determining whether the process is a whitelisted process for example. The protected process may include any suitable process such as for example a process related to a financial transaction an online financial transaction another online transaction or the like.

Processing may continue from operation to operation MARK A PORTION OF A PROCESS ADDRESS SPACE AS AN ISOLATED DISPLAY BUFFER AND ANOTHER PORTION OF THE PROCESS ADDRESS SPACE AS A PLACE HOLDER BUFFER where a portion of a process address space may be marked as an isolated display buffer and another portion of the process address space may be marked as a place holder buffer. The isolated display buffer may be protected and only accessed via a trusted memory view managed via the trusted memory service layer for example. The place holder buffer may be unprotected e.g. open to the operating system various programs and processes and potentially malware for example.

Processing may continue from operation to operation MARK A PORTION OF A GRAPHICS MEMORY SPACE AS AN ACCESS CONTROLLED GRAPHICS MEMORY REGION where a portion of a graphics memory space may be marked as an access controlled graphics memory region. The access controlled graphics memory region may be protected and only accessed via a trusted memory view managed via the trusted memory service layer for example.

Processing may continue from operation to operation PROVIDE A VIRTUAL SPRITE DEVICE AND AN ASSOCIATED VIRTUAL SPRITE MEMORY REGION where a virtual sprite device and an associated virtual sprite memory region may be provided. The virtual sprite device may be registered and provided via the trusted memory service layer for example. The virtual sprite device may access the isolated display buffer and or the access controlled graphics memory region for example. The associated virtual sprite memory region may be a memory mapped input output MMIO memory space and may have a 1 1 correspondence or mapping to the access controlled graphics memory region for example.

Processing may continue from operation to operation INVOKE AN APPLICATION PROGRAMMING INTERFACE VIA A WINDOWS MANAGER TO RECEIVE INFORMATION ASSOCIATED WITH THE PLACE HOLDER BUFFER where one or more application programming interfaces APIs may be invoked via a window manager to receive information associated with the place holder buffer. The information associated with the place holder buffer may include coordinates or other graphical information for example. In the situation where a malware attack is in progress the malware may attack data held in the place holder buffer which may include only non sensitive data or even fake data or the like.

Processing may continue from operation to operation TRANSFER THE SENSITIVE DATA IN THE ISOLATED DISPLAY BUFFER TO THE VIRTUAL SPRITE DEVICE MEMORY REGION where the sensitive data in the isolated display buffer may be transferred to the virtual sprite device memory region. The isolated display buffer may be secured along a sprite graphics pipeline for secure presentation to a user for example.

Processing may continue from operation to operation TRANSFER THE SENSITIVE DATA IN THE VIRTUAL SPRITE DEVICE MEMORY REGION TO THE ACCESS CONTROLLED GRAPHICS MEMORY REGION where the sensitive data in the virtual sprite device memory region may be transferred to the access controlled graphics memory region. The sensitive data may be transferred via the virtual sprite device and or the virtual sprite device memory region for example.

Processing may continue from operation to operation PROVIDE THE SENSITIVE DATA IN THE ACCESS CONTROLLED GRAPHICS MEMORY REGION TO A DISPLAY DEVICE where the sensitive data in the access controlled graphics memory region may be transferred to a display device. The sensitive data may be displayed to the user for example. As discussed the user may view a display of the sensitive data without witnessing any difference between the display of the sensitive data presented via the sprite pipeline and a display the user would have seen if a standard graphics pipeline were used to present the data to the user.

Some additional and or alternative details related to process may be illustrated in one or more examples of implementations discussed in greater detail below with regard to and or .

In the illustrated implementation system may include modules the like and or combinations thereof. For example modules may include windows manager process address space and sprite pipeline the like and or combinations thereof. Windows manager may be configured to receive information associated with place holder buffer . As discussed the information associated with place holder buffer may include non sensitive or fake data or the like. Process address space may be configured to include isolated display buffer for handling sensitive data and place holder display buffer for example. Sprite pipeline may include virtual sprite device virtual sprite memory region access controlled region trusted memory service layer or combinations thereof. Sprite pipeline may also include graphics translation table implemented via graphics driver and graphics memory space for example. Sprite pipeline may be configured to transfer sensitive data from isolated memory buffer to virtual sprite memory region and further to access controlled region via a path protected from potential malware attacks. Sprite may transfer sensitive data to display device for display to a user as display of sensitive data . Although system as shown in may include one particular set of blocks or actions associated with particular modules these blocks or actions may be associated with different modules than the particular module illustrated here.

Process may be utilized as a computer implemented method for cross layer cross channel residual prediction. Process may begin at block MARK ISOLATED DISPLAY BUFFER AND PLACE HOLDER BUFFER where a portion of process address space may be marked as isolated display buffer and another portion of process address space may be marked as place holder buffer . Isolated display buffer may be protected and only accessed via a trusted memory view managed via trusted memory service layer TMSL for example. The place holder buffer may be unprotected e.g. open to the operating system various programs and processes and potentially malware for example.

Processing may continue from operation to operation REGISTER A PROCESS AS A PROTECTED PROCESS where a process may be registered via TMSL as a protected process. Registering a process may include determining via a predetermined whitelist managed via a TMSL whether the process is a whitelisted process for example. The protected process may include any suitable process such as for example a process related to a financial transaction an online financial transaction another online transaction or the like.

Processing may continue from operation to operation MARK ACCESS CONTROLLED GRAPHICS MEMORY where a portion of graphics memory space may be marked as access controlled graphics memory region . Access controlled graphics memory region may be protected and only accessed via a trusted memory view managed via the TMSL for example.

Processing may continue from operation to operation PROVIDE VIRTUAL SPRITE DEVICE AND MEMORY REGION where virtual sprite device and associated virtual sprite memory region may be provided. Virtual sprite device may be registered and provided via the TMSL for example. Virtual sprite device may access isolated display buffer and or access controlled region for example. Associated virtual sprite memory region may be a memory mapped input output MMIO memory space and may have a 1 1 correspondence or mapping to access controlled graphics memory region for example.

Processing may continue from operation to operation TRANSFER SENSITIVE DATA TO VIRTUAL SPRITE MEMORY REGION where sensitive data in isolated display buffer may be transferred to virtual sprite memory region . Isolated display buffer may be secured along sprite pipeline for secure presentation to a user for example.

Processing may continue from operation to operation TRANSFER SENSITIVE DATA TO ACCESS CONTROLLED GRAPHICS MEMORY where sensitive data in virtual sprite memory region may be transferred to access controlled region . Sensitive data may be transferred via virtual sprite device and or virtual sprite memory region for example.

Processing may continue from operation to operation PROVIDE SENSITIVE DATA TO DISPLAY DEVICE where sensitive data in access controlled region may be transferred to display device . Sensitive data may be displayed to a user for example as display of sensitive data . As discussed the user may view display of sensitive data without witnessing any difference between display of sensitive data presented via sprite pipeline and a display of data the user would have seen if a standard graphics pipeline were used to present the data to the user.

Process may be utilized as a computer implemented method for securing display output data. Process may begin at block LOAD A TRUSTED MEMORY SERVICE LAYER where trusted memory service layer TMSL may be loaded. TMSL may be loaded during a boot up of system or upon opening a secure application platform or the like for example. TMSL may include a virtual machine extension root mode component for example.

Processing may continue from operation to operation EXPOSE VIA THE TRUSTED MEMORY SERVICE LAYER AN UNVERIFIED VIRTUAL SPRITE DEVICE where an unverified virtual sprite device may be exposed via or by TMSL . The unverified sprite device may be exposed by TMSL in any suitable manner. For example TMSL may be configured to hook and or emulate port access to allow customized haling of PCI or PCIe and such capability may be utilized to expose the unverified sprite device.

Processing may continue from operation to operation LOAD AN UNVERIFIED VIRTUAL SPRITE DEVICE DRIVER ASSOCIATED WITH THE UNVERIFIED VIRTUAL SPRITE DEVICE where an unverified virtual sprite device driver associated with the unverified virtual sprite device may be loaded. The unverified virtual sprite device driver may be loaded using any suitable techniques such as for example loading the unverified virtual sprite device driver via the operating system of system .

Processing may continue from operation to operation DETERMINE VIA THE TRUSTED MEMORY SERVICE LAYER WHETHER THE UNVERIFIED VIRTUAL SPRITE DEVICE DRIVER IS INCLUDED ON A PROVISIONED WHITELIST where it may be determined via TMSL whether the unverified virtual sprite device driver is included on a provisioned whitelist. As discussed TMSL may manage a whitelist of trusted and or secure programs and or code. TMSL may determine whether the unverified virtual sprite device driver may be included on the whitelist. As discussed if the unverified virtual sprite device driver is included on the whitelist the unverified virtual sprite device driver may be deemed secure. If it is not on the whitelist the unverified virtual sprite device driver may be deemed unknown and may not be allowed to be registered loaded or operated or the like.

Processing may continue from operation to operation IF THE UNVERIFIED VIRTUAL SPRITE DEVICE DRIVER IS INCLUDED ON THE PROVISIONED WHITELIST REGISTER THE UNVERIFIED VIRTUAL SPRITE DEVICE where if the unverified virtual sprite device driver is deemed to be included on the provisioned whitelist the virtual sprite device may be registered by TMSL allowed to operate provided associated virtual memory space and or have access to various physical memory views for example.

Using such techniques a secure sprite pipeline may be set up or configured on system . As discussed the secure sprite pipeline may be an alternative pipeline to the standard graphics pipeline and may provide security for sensitive data against malware attacks directed at the output display data of system .

While implementation of example processes and processes discussed with respect to may include the undertaking of all blocks shown in the order illustrated the present disclosure is not limited in this regard and in various examples implementation of processes and may include the undertaking only a subset of the blocks shown and or in a different order than illustrated.

In addition any one or more of the blocks of and processes discussed with respect to may be undertaken in response to instructions provided by one or more computer program products. Such program products may include signal bearing media providing instructions that when executed by for example a processor may provide the functionality described herein. The computer program products may be provided in any form of computer readable medium. Thus for example a processor including one or more processor core s may undertake one or more of the blocks shown in .

As used in any implementation described herein the term module refers to any combination of software firmware and or hardware configured to provide the functionality described herein. The software may be embodied as a software package code and or instruction set or instructions and hardware as used in any implementation described herein may include for example singly or in any combination hardwired circuitry programmable circuitry state machine circuitry and or firmware that stores instructions executed by programmable circuitry. The modules may collectively or individually be embodied as circuitry that forms part of a larger system for example an integrated circuit IC system on chip SoC and so forth.

As shown central processing units may implement windows manager operating system and application programming interfaces APIs graphics processing units may include sprite engine sprite pipeline may include trusted memory service layer TMSL virtual sprite device and virtual sprite memory region and memory stores may include process address space and graphics memory space which may include access controlled region which is not shown for the sake of clarity. Further as shown graphics driver may be implemented via central processing units and or graphics processing units .

As will be appreciated the modules illustrated in may include a variety of software and or hardware modules and or modules that may be implemented via software and or hardware. For example virtual sprite device may be implemented as software via central processing units and or graphics processing units . Further the shown memory stores may be shared memory for central processing units and or graphics processing units for example. Also system may be implemented in a variety of ways. For example system excluding display device may be implemented as a single chip or device having a graphics processor a quad core central processing unit on board cache and a memory controller input output I O module not shown . In other examples system again excluding display device may be implemented as a chipset.

For example trusted memory service layer may be implemented via central processing units virtual sprite device may be implemented via sprite engine of graphics processing units process address space may be implemented via memory stores graphics memory space may be implemented via memory stores windows manager may be implemented via the central processing units the graphics translation table not shown in may be implemented via graphics driver and graphics driver may be implemented via one of central processing units or graphics processing units .

Central processing units may include any suitable implementation including for example microprocessor s multicore processors application specific integrated circuits chip s chipsets or the like. Further graphics processing units may include any suitable implementation including for example processor s multicore processors application specific integrated circuits programmable logic devices graphics cards integrated graphics general purpose graphics processing unit s or the like. In addition memory stores may be any type of memory such as volatile memory e.g. Static Random Access Memory SRAM Dynamic Random Access Memory DRAM etc. or non volatile memory e.g. flash memory etc. and so forth. In a non limiting example memory stores may be implemented by cache memory. As discussed in various examples system may be implemented as a chipset or as a system on a chip. Operating system may include any suitable operating system such as for example a Microsoft Windows based operating system.

In various implementations system includes a platform coupled to a display . Platform may receive content from a content device such as content services device s or content delivery device s or other similar content sources. A navigation controller including one or more navigation features may be used to interact with for example platform and or display . Each of these components is described in greater detail below.

In various implementations platform may include any combination of a chipset processor memory storage graphics subsystem applications and or radio . Chipset may provide intercommunication among processor memory storage graphics subsystem applications and or radio . For example chipset may include a storage adapter not depicted capable of providing intercommunication with storage .

Processor may be implemented as a Complex Instruction Set Computer CISC or Reduced Instruction Set Computer RISC processors x86 instruction set compatible processors multi core or any other microprocessor or central processing unit CPU . In various implementations processor may be dual core processor s dual core mobile processor s and so forth.

Memory may be implemented as a volatile memory device such as but not limited to a Random Access Memory RAM Dynamic Random Access Memory DRAM or Static RAM SRAM .

Storage may be implemented as a non volatile storage device such as but not limited to a magnetic disk drive optical disk drive tape drive an internal storage device an attached storage device flash memory battery backed up SDRAM synchronous DRAM and or a network accessible storage device. In various implementations storage may include technology to increase the storage performance enhanced protection for valuable digital media when multiple hard drives are included for example.

Graphics subsystem may perform processing of images such as still or video for display. Graphics subsystem may be a graphics processing unit GPU or a visual processing unit VPU for example. An analog or digital interface may be used to communicatively couple graphics subsystem and display . For example the interface may be any of a High Definition Multimedia Interface Display Port wireless HDMI and or wireless HD compliant techniques. Graphics subsystem may be integrated into processor or chipset . In some implementations graphics subsystem may be a stand alone card communicatively coupled to chipset .

The graphics and or video processing techniques described herein may be implemented in various hardware architectures. For example graphics and or video functionality may be integrated within a chipset. Alternatively a discrete graphics and or video processor may be used. As still another implementation the graphics and or video functions may be provided by a general purpose processor including a multi core processor. In further embodiments the functions may be implemented in a consumer electronics device.

Radio may include one or more radios capable of transmitting and receiving signals using various suitable wireless communications techniques. Such techniques may involve communications across one or more wireless networks. Example wireless networks include but are not limited to wireless local area networks WLANs wireless personal area networks WPANs wireless metropolitan area network WMANs cellular networks and satellite networks. In communicating across such networks radio may operate in accordance with one or more applicable standards in any version.

In various implementations display may include any television type monitor or display. Display may include for example a computer display screen touch screen display video monitor television like device and or a television. Display may be digital and or analog. In various implementations display may be a holographic display. Also display may be a transparent surface that may receive a visual projection. Such projections may convey various forms of information images and or objects. For example such projections may be a visual overlay for a mobile augmented reality MAR application. Under the control of one or more software applications platform may display user interface on display .

In various implementations content services device s may be hosted by any national international and or independent service and thus accessible to platform via the Internet for example. Content services device s may be coupled to platform and or to display . Platform and or content services device s may be coupled to a network to communicate e.g. send and or receive media information to and from network . Content delivery device s also may be coupled to platform and or to display .

In various implementations content services device s may include a cable television box personal computer network telephone Internet enabled devices or appliance capable of delivering digital information and or content and any other similar device capable of unidirectionally or bidirectionally communicating content between content providers and platform and display via network or directly. It will be appreciated that the content may be communicated unidirectionally and or bidirectionally to and from any one of the components in system and a content provider via network . Examples of content may include any media information including for example video music medical and gaming information and so forth.

Content services device s may receive content such as cable television programming including media information digital information and or other content. Examples of content providers may include any cable or satellite television or radio or Internet content providers. The provided examples are not meant to limit implementations in accordance with the present disclosure in any way.

In various implementations platform may receive control signals from navigation controller having one or more navigation features. The navigation features of controller may be used to interact with user interface for example. In embodiments navigation controller may be a pointing device that may be a computer hardware component specifically a human interface device that allows a user to input spatial e.g. continuous and multi dimensional data into a computer. Many systems such as graphical user interfaces GUI and televisions and monitors allow the user to control and provide data to the computer or television using physical gestures.

Movements of the navigation features of controller may be replicated on a display e.g. display by movements of a pointer cursor focus ring or other visual indicators displayed on the display. For example under the control of software applications the navigation features located on navigation controller may be mapped to virtual navigation features displayed on user interface for example. In embodiments controller may not be a separate component but may be integrated into platform and or display . The present disclosure however is not limited to the elements or in the context shown or described herein.

In various implementations drivers not shown may include technology to enable users to instantly turn on and off platform like a television with the touch of a button after initial boot up when enabled for example. Program logic may allow platform to stream content to media adaptors or other content services device s or content delivery device s even when the platform is turned off. In addition chipset may include hardware and or software support for 8.1 surround sound audio and or high definition 7.1 surround sound audio for example. Drivers may include a graphics driver for integrated graphics platforms. In embodiments the graphics driver may comprise a peripheral component interconnect PCI Express graphics card.

In various implementations any one or more of the components shown in system may be integrated. For example platform and content services device s may be integrated or platform and content delivery device s may be integrated or platform content services device s and content delivery device s may be integrated for example. In various embodiments platform and display may be an integrated unit. Display and content service device s may be integrated or display and content delivery device s may be integrated for example. These examples are not meant to limit the present disclosure.

In various embodiments system may be implemented as a wireless system a wired system or a combination of both. When implemented as a wireless system system may include components and interfaces suitable for communicating over a wireless shared media such as one or more antennas transmitters receivers transceivers amplifiers filters control logic and so forth. An example of wireless shared media may include portions of a wireless spectrum such as the RF spectrum and so forth. When implemented as a wired system system may include components and interfaces suitable for communicating over wired communications media such as input output I O adapters physical connectors to connect the I O adapter with a corresponding wired communications medium a network interface card NIC disc controller video controller audio controller and the like. Examples of wired communications media may include a wire cable metal leads printed circuit board PCB backplane switch fabric semiconductor material twisted pair wire co axial cable fiber optics and so forth.

Platform may establish one or more logical or physical channels to communicate information. The information may include media information and control information. Media information may refer to any data representing content meant for a user. Examples of content may include for example data from a voice conversation videoconference streaming video electronic mail email message voice mail message alphanumeric symbols graphics image video text and so forth. Data from a voice conversation may be for example speech information silence periods background noise comfort noise tones and so forth. Control information may refer to any data representing commands instructions or control words meant for an automated system. For example control information may be used to route media information through a system or instruct a node to process the media information in a predetermined manner. The embodiments however are not limited to the elements or in the context shown or described in .

As described above system may be embodied in varying physical styles or form factors. illustrates implementations of a small form factor device in which system may be embodied. In embodiments for example device may be implemented as a mobile computing device having wireless capabilities. A mobile computing device may refer to any device having a processing system and a mobile power source or supply such as one or more batteries for example.

As described above examples of a mobile computing device may include a personal computer PC laptop computer ultra laptop computer tablet touch pad portable computer handheld computer palmtop computer personal digital assistant PDA cellular telephone combination cellular telephone PDA television smart device e.g. smart phone smart tablet or smart television mobile internet device MID messaging device data communication device and so forth.

Examples of a mobile computing device also may include computers that are arranged to be worn by a person such as a wrist computer finger computer ring computer eyeglass computer belt clip computer arm band computer shoe computers clothing computers and other wearable computers. In various embodiments for example a mobile computing device may be implemented as a smart phone capable of executing computer applications as well as voice communications and or data communications. Although some embodiments may be described with a mobile computing device implemented as a smart phone by way of example it may be appreciated that other embodiments may be implemented using other wireless mobile computing devices as well. The embodiments are not limited in this context.

As shown in device may include a housing a display an input output I O device and an antenna . Device also may include navigation features . Display may include any suitable display unit for displaying information appropriate for a mobile computing device. I O device may include any suitable I O device for entering information into a mobile computing device. Examples for I O device may include an alphanumeric keyboard a numeric keypad a touch pad input keys buttons switches rocker switches microphones speakers voice recognition device and software and so forth. Information also may be entered into device by way of microphone not shown . Such information may be digitized by a voice recognition device not shown . The embodiments are not limited in this context.

Various embodiments may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements may include processors microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application programming interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints.

One or more aspects of at least one embodiment may be implemented by representative instructions stored on a machine readable medium which represents various logic within the processor which when read by a machine causes the machine to fabricate logic to perform the techniques described herein. Such representations known as IP cores may be stored on a tangible machine readable medium and supplied to various customers or manufacturing facilities to load into the fabrication machines that actually make the logic or processor.

While certain features set forth herein have been described with reference to various implementations this description is not intended to be construed in a limiting sense. Hence various modifications of the implementations described herein as well as other implementations which are apparent to persons skilled in the art to which the present disclosure pertains are deemed to lie within the spirit and scope of the present disclosure.

In one example a computer implemented method for securing display output data may include registering a process as a protected process via a trusted memory service layer. A portion of a process address space may be marked as an isolated display buffer associated with the protected process and another portion of the process address space may be marked as a place holder display buffer associated with the protected process. A portion of a graphics memory space may be marked as an access controlled graphics memory region. A virtual sprite device and an associated virtual sprite memory region may be provided. In response to the reception of sensitive data into the isolated display buffer an application programming interface may be invoked via a windows manager to receive information associated with the place holder display buffer associated with the protected process. The sensitive data in the isolated display buffer may be transferred to the virtual sprite device memory region. The sensitive data in the virtual sprite device memory region may be transferred to the access controlled graphics memory region. The sensitive data in the access controlled graphics memory region may be provided to a display device.

In a further example of a computer implemented method for securing display output data the trusted memory service layer may be loaded. An unverified virtual sprite device may be exposed via the trusted memory service layer. An unverified virtual sprite device driver associated with the unverified virtual sprite device may be loaded via an operating system. It may be determined via the trusted memory service layer whether the unverified virtual sprite device driver is included on a provisioned whitelist. If the unverified virtual sprite device driver is included on the provisioned whitelist the unverified virtual sprite device may be registered as the virtual sprite device via the trusted memory service layer. An isolated display buffer trusted memory view may be created via the trusted memory service layer such that the isolated display buffer trusted memory view allows access to the isolated display buffer only via a registered program and such that the virtual sprite device is a registered program. An access controlled graphics memory region trusted memory view may be created via the trusted memory service layer such that the access controlled graphics memory region trusted memory view allows access to the access controlled graphics memory region only via a registered program and such that the virtual sprite device is a registered program. The sensitive data may be received into the isolated display buffer. Usage of the isolated display buffer may be selectively triggered based on identification of data coming from the protected process being associated with a hardware protected environment or the protected process registering for protection with the trusted memory service layer. A blitter engine may be disabled and monitoring of the graphics translation table may be enabled via the operating system. The virtual sprite device may be implemented via a sprite engine of a graphics processor and the trusted memory service layer may be implemented via a central processing unit. Marking the portion of the graphics memory space as the access controlled graphics memory region may include accessing a graphics translation table via a graphics translation table physical memory view implemented via the trusted memory service layer such that the graphics translation table is configured to translate virtual graphics memory addresses to physical graphics memory addresses. The virtual sprite device may be a registered program having access to the isolated display buffer and the access controlled graphics memory region. The trusted memory service layer may be loaded and the unverified virtual sprite device may be exposed prior to the operating system enumerating Peripheral Component Interconnect Express devices. The trusted memory service layer may be loaded after the operating system enumerates Peripheral Component Interconnect Express devices and such that exposing the unverified virtual sprite device includes exposing the unverified virtual sprite device as a hot plug device to invoke an operating system device manager to rescan a Peripheral Component Interconnect Express bus. The information associated with the place holder display buffer may include coordinates of the place holder display buffer. The protected process may include a process related to an online financial transaction. The place holder display buffer may be open to the operating system and the isolated display buffer may be isolated from the operating system. The graphics memory space may include a memory mapped input output MMIO memory space. Malware may access the place holder display buffer but not the isolated display buffer. The trusted memory service layer may include a virtual machine extension root mode component.

In another example a system for securing display output data on a computer may include a display device one or more processors one or more memory stores a process address space including a place holder display buffer a windows manger and a sprite pipeline including a trusted memory service layer a virtual sprite device and an associated virtual sprite memory region. The display device may be configured to display data. The one or more processors may be communicatively coupled to the display device. The one or more memory stores may be communicatively coupled to the one or more processors. The sprite pipeline may be configured to register a process as a protected process via the trusted memory service layer mark a portion of the process address space as an isolated display buffer associated with the protected process mark a portion of a graphics memory space as an access controlled graphics memory region receive sensitive data in the isolated display buffer transfer the sensitive data in the isolated display buffer to the virtual sprite device memory region transfer the sensitive data in the virtual sprite device memory region to the access controlled graphics memory region and provide the sensitive data in the access controlled graphics memory region to the display device.

In a further example of a system for securing display output data on a computer the system may include one or more graphics processors and an operating system. The one or more graphics processors may be communicatively coupled to the one or more processors and the one or more graphics processors may include a sprite engine. The operating system may be implemented via the one or more processors. The sprite pipeline may be further configured to expose via the trusted memory service layer an unverified virtual sprite device determine via the trusted memory service layer whether an unverified virtual sprite device driver is included on a provisioned whitelist if the unverified virtual sprite device driver is included on the provisioned whitelist register via the trusted memory service layer the unverified virtual sprite device as the virtual sprite device create via the trusted memory service layer an isolated display buffer trusted memory view such that the isolated display buffer trusted memory view allows access to the isolated display buffer only via a registered program and such that the virtual sprite device is a registered program create via the trusted memory service layer an access controlled graphics memory region trusted memory view such that the access controlled graphics memory region trusted memory view allows access to the access controlled graphics memory region only via a registered program and such that the virtual sprite device is a registered program receive the sensitive data into the isolated display buffer selectively trigger usage of the isolated display buffer based on one of identification of data coming from the protected process being associated with a hardware protected environment or the protected process registering for protection with the trusted memory service layer. The operating system may be configured to load the trusted memory service layer load the unverified virtual sprite device driver associated with the unverified virtual sprite device disable a blitter engine and enable monitoring of the graphics translation table and enumerate Peripheral Component Interconnect Express devices wherein the trusted memory service layer is loaded and the unverified virtual sprite device is exposed prior to the operating system enumerating Peripheral Component Interconnect Express devices and wherein the unverified virtual sprite device is exposed as a hot plug device to invoke an operating system device manager to rescan a Peripheral Component Interconnect Express bus. The sprite pipeline may be configured to mark the portion of the graphics memory space as the access controlled graphics memory region by accessing a graphics translation table via a graphics translation table physical memory view implemented via the trusted memory service layer such that the graphics translation table is configured to translate virtual graphics memory addresses to physical graphics memory addresses. The information associated with the place holder display buffer may include coordinates of the place holder display buffer. The protected process may include a process related to an online financial transaction. The place holder display buffer may be open to the operating system and the isolated display buffer may be isolated from the operating system. The graphics memory space may include a memory mapped input output MMIO memory space. Malware may access the place holder display buffer but not the isolated display buffer. The trusted memory service layer may include a virtual machine extension root mode component. The virtual sprite device may be a registered program having access to the isolated display buffer and the access controlled graphics memory region. The trusted memory service layer may be implemented via the one or more processors the virtual sprite device may be implemented via the sprite engine the process address space may be implemented via the one or more memory stores the graphics memory space may be implemented via the one or more memory stores the windows manager may be implemented via the one or more processors the graphics translation table may be implemented via a graphics driver and the graphics driver may be implemented via at least one of the one or more processors or the one or more graphics processors

In a further example at least one machine readable medium may include a plurality of instructions that in response to being executed on a computing device causes the computing device to perform the method according to any one of the above examples.

In a still further example an apparatus may include means for performing the methods according to any one of the above examples.

The above examples may include specific combination of features. However such the above examples are not limited in this regard and in various implementations the above examples may include the undertaking only a subset of such features undertaking a different order of such features undertaking a different combination of such features and or undertaking additional features than those features explicitly listed. For example all features described with respect to the example methods may be implemented with respect to the example apparatus the example systems and or the example articles and vice versa.

