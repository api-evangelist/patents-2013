---

title: Transitioning between iterations in agile software development
abstract: A computer-implemented method of managing work items associated with agile software development includes displaying a first group of incomplete work items associated with a current iteration of an agile software development project. In response to a first user input, a first incomplete work item of the first group is transferred from the current iteration to a subsequent iteration of the agile software development project. A determination is made that no incomplete work items remain associated with the current iteration. The current iteration is closed and the subsequent iteration is activated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09129240&OS=09129240&RS=09129240
owner: VERSIONONE, INC.
number: 09129240
owner_city: Alpharetta
owner_country: US
publication_date: 20131015
---
This present application claims priority to and is a continuation of U.S. patent application Ser. No. 12 247 939 filed Oct. 8 2008 now U.S. Pat. No. 8 561 012 which is incorporated by reference herein in its entirety.

The disclosed embodiments relate generally to managing agile software development and more particularly to transitioning between iterations in agile software development.

Agile software development refers to software development methodologies in which software is developed incrementally in steps referred to as iterations. Iterations typically are measured in weeks and may vary in length from one week or less to one month or more.

Examples of agile software development methodologies include Scrum Extreme Programming XP Crystal Lean Development AgileUP and Dynamic Systems Development Method DSDM . Agile software development methods also have been referred to as lightweight methods. Methodologies may have their own vocabulary. For example an iteration may be referred to as a sprint or a timebox depending on the methodology. Agile software development is distinguishable from the waterfall model of sequential software development.

Software for implementing agile development methodologies and for tracking and reporting on projects that use agile methodologies can help developers to realize fully the benefits such as flexibility and rapid cycle times offered by these methodologies. Accordingly there is a need for robust agile development management software that is convenient to use.

In some embodiments a computer implemented method of managing work items associated with agile software development includes displaying a first group of incomplete work items associated with a current iteration of an agile software development project. In response to a first user input a first incomplete work item of the first group is transferred from the current iteration to a subsequent iteration of the agile software development project. A determination is made that no incomplete work items remain associated with the current iteration. The current iteration is closed and the subsequent iteration is activated.

In some embodiments a system for managing work items associated with agile software development includes memory a display one or more processors and one or more programs stored in the memory and configured for execution by the one or more processors. The one or more programs include instructions to display a first group of incomplete work items associated with a current iteration of an agile software development project instructions to transfer in response to a first user input a first incomplete work item of the first group from the current iteration to a subsequent iteration of the agile software development project instructions to determine that no incomplete work items remain associated with the current iteration instructions to close the current iteration and instructions to activate the subsequent iteration.

In some embodiments a computer readable storage medium stores one or more programs configured to be executed by a computer system to manage work items associated with agile software development. The one or more programs include instructions to display a first group of incomplete work items associated with a current iteration of an agile software development project instructions to transfer in response to a first user input a first incomplete work item of the first group from the current iteration to a subsequent iteration of the agile software development project instructions to determine that no incomplete work items remain associated with the current iteration instructions to close the current iteration and instructions to activate the subsequent iteration.

Reference will now be made in detail to embodiments examples of which are illustrated in the accompanying drawings. In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the embodiments.

Work item planning includes identifying work to be performed during the software development process. For example features to be included in the software being developed are specified and software defects to be fixed during development are identified. Depending on the agile methodology being used features also may be referred to as stories backlog items or requirements. In general a work item is any item for which the agile development management software platform can track progress such as time spent working on the item. Estimates for the time that work items require for completion e.g. the time to complete features or to fix defects may be entered during the work item planning process. Furthermore groups of work items may be defined. For example a feature group may be defined to include a plurality of features. Work estimates for the features within a feature group may be added together to provide an overall work estimate for the feature group. The work estimate for a group of work items e.g. a feature group thus may provide a roll up of the work estimates for the individual work items e.g. features in the group.

Release planning includes assigning identified work items e.g. features and defects to particular planned software releases. For example certain features may be included in an initial release with additional features to be added in subsequent releases. Similarly fixing various defects may be scheduled across multiple releases. More generally release planning may include assigning identified work items to levels or nodes in a project hierarchy. The project hierarchy may include projects sub projects releases teams and other internal organizations clients or customers and vendors.

Iteration planning includes assigning work items to iterations. There may be multiple iterations performed to prepare a particular software release iteration planning thus involves specifying what work will be performed in which iterations. For example features and defects are assigned to particular iterations. Within each iteration tasks and tests corresponding to the features and defects are defined. A task is a unit of work performed as part of delivering a feature. In some embodiments a task is defined such that it takes no more than 3 days to perform. A test is an acceptance criterion that a feature must satisfy. Estimates for the time required to complete tests and tasks may be entered. In some embodiments the estimates for tasks and tests are independent of the estimates for their features. Tasks and tests are examples of work items.

The actual time spent working on the work items e.g. on the features and defects and their corresponding tasks and tests during an iteration is tracked and compared against the estimates. Progress and status reports may be displayed graphically. For example a dashboard user interface may display multiple graphical reports. Possible graphical reports include burndown charts velocity charts burn up charts Gantt charts parking lot reports scope change defect trending test case status and defect actuals. A burndown chart illustrates remaining work vs. time. Velocity refers to the estimated work per iteration on a project. Scope change refers to a change in requirements such as the addition or deletion of features and defects. Reports may be generated for a specified level or node in the project hierarchy e.g. for a specified project sub project release team or other internal organization client or customer and or vendor. 

The operations in the development process flow are presented sequentially in for purposes of illustration. However the operations need not be performed sequentially. For example the planning operations and may be updated dynamically throughout the agile development process. Similarly tracking may be performed dynamically and may prompt subsequent planning changes. Furthermore multiple operations may be combined into a single operation and additional operations may be added to the flow .

At a high level the agile software development process has various assets associated with it. Nodes in the project hierarchy such as projects sub projects releases teams clients and vendors can be considered assets as can iterations. Work items such as features and defects are assets as are tasks and tests. In general work items include any asset tracked by the agile development management software platform. Feature groups are assets. Assets may be associated with i.e. related to other assets. In some embodiments for example tasks and tests are associated with corresponding features and defects which in turn may be associated with corresponding iterations. In another example features in a particular feature group are associated with the feature group.

An asset includes various attributes. In some embodiments each kind of asset e.g. project iteration feature group feature task etc. has a specified set of associated or related attributes. Types of attributes include text strings numerical values values calculated according to a formula synthetic attributes and associated related assets. A first asset associated with i.e. related to a second asset thus is considered an attribute of the second asset. An attribute may be automatically included e.g. hard coded or created for a particular installation in agile development management software or may be customized i.e. user defined .

Attention is now directed to user interfaces for agile development management software. In some embodiments user interfaces are shown in a browser window. In some embodiments user interfaces are shown by a stand alone application.

Agile development management software can display groups of assets of a particular type. For example groups of assets associated with work item planning release planning or iteration planning may be displayed.

The displayed assets in the group are associated with a particular project hierarchy node displayed for example in a project selection window .

Assets may be added to the group for example by selecting an add story i.e. add feature link or an add defect link . In general a user interface for displaying a group of assets may include multiple links or icons for adding multiple respective kinds of assets or may include a single link or icon for adding assets. In some embodiments selection of a link or icon for adding assets results in the display of a separate user interface for adding assets not shown .

Assets displayed in the group also may be edited for example by selecting an edit link e.g. corresponding to a respective asset. In some embodiments selection of an edit link or corresponding icon results in the display of a separate user interface for editing assets.

The displayed assets include a set of attributes selected for display such as title ID owner status priority estimate and project . Some of the attributes are also assets such as project . Some of the values for the attributes are blank for example no owner status priority or estimate is shown for a number of assets including feature .

Assets to be displayed in the group may be filtered according to one or more attributes using filters .

A subset of the displayed attributes includes user input fields to accept edits to attribute values. For example a user may select a priority from a drop down box and may enter a work or size estimate e.g. an estimate of time in a text input box .

Attention is now directed to accessing and displaying user interfaces for viewing an asset s attributes and related assets. like is a schematic screenshot of a user interface displaying a group of assets associated with an agile software development process in accordance with some embodiments. Specifically the user interface of displays a group of assets associated with iteration planning as indicated by selection of an iteration planning tab . The iteration planning group includes features e.g. Enter RMA and defects e.g. Inventory Levels Off in Warehouse as indicated by features icons and defects icons . The displayed assets in the group are associated with a particular iteration . The displayed assets in the group also are associated with a particular project hierarchy node also referred to as a project hierarchy level displayed for example in the project selection window . The project hierarchy node corresponds to a project entitled Call Center which includes multiple software releases e.g. Release 1.0 and Release 2.0 and has multiple teams e.g. Team A and Team B working on releases. Each release and each team may be selected as a project hierarchy node in the project selection window . In some embodiments in response to selection of a particular project hierarchy node the displayed group of assets is updated to display assets associated with the selected project hierarchy node. For example in response to selection of a particular release or team the displayed group of assets is updated to display assets associated with iteration planning for the selected release or team.

Assets to be displayed in the group may be filtered according to one or more attributes using filters . Assets may be added to the group by for example selecting an add backlog item link or an add defect link .

The displayed assets in the group include a set of attributes such as title ID owner status estimate detail estimate and to do . The estimate and detail estimate attributes provide estimates of quantities of work associated with assets while the to do attribute provides estimates of quantities of work remaining to be done for assets. As discussed with regard to some of the attributes may be assets associated with a displayed asset in the group i.e. may be related assets .

In some embodiments an asset displayed in the group may be edited by selecting a link corresponding to the asset which results in display of a separate user interface UI for editing the asset. For example selection of the plan backlog item link for the enter RMA asset results in display of a window . The window displays attributes of the enter RMA asset such as ID title project iteration feature group description and estimate. In some embodiments the attributes are displayed in a list.

The window also displays related assets associated with the enter RMA asset . In this example the related assets include tasks and tests associated with the enter RMA asset which is a feature. Attributes of the related assets e.g. title ID owner and detail estimate are displayed.

The related assets may be edited by selecting a corresponding link. For example related asset Enter RMA Using Order Number may be edited by selecting an edit link . In some embodiments in response to selection of the edit link a UI for editing the related asset is displayed in the window along with the attributes and related assets . The UI includes user input fields e.g. and to display and receive edits to attributes of the related asset . In some embodiments the UI includes drop down menus e.g. to select values for attributes of the related asset . In some embodiments the user may enter values directly into the user input fields. Edits may be applied by selecting the OK link or canceled by selecting the cancel link . In some embodiments upon selection of the OK link display of the UI is ceased and displayed attribute values for the edited related asset are updated in response to the edits. The user then may select another edit link associated with another related asset resulting in display of another UI within the window for displaying and editing the newly selected related asset. In some embodiments multiple UI s for displaying and editing multiple respective related assets may be open simultaneously within the window and may be accessed simply by scrolling within the window .

In some embodiments a new related asset may be added via the window . For example a new task or test for the enter RMA asset may be added by selecting the add task link or add test link . In some embodiments selection of the add task link or add test link results in display within the window of a user interface analogous to UI for which the user input fields e.g. and are blank. The user may enter attribute values for the new task or test through the user input fields. In some embodiments the user may specify attribute values via drop down menus e.g. . In some embodiments creation of the new task or test is completed by selecting the OK icon or canceled by selecting the cancel icon . In some embodiments upon selection of the OK icon display of the UI for creating the new related asset is ceased and the new related asset is displayed among the related assets .

The window thus provides a single integrated interface through which a user may view multiple levels of information for an asset in addition to performing edits. For example the user may view attributes of the asset itself and of related assets and may edit or create related assets. The integrated interface allows the user to perform these tasks without having to browse through a succession of windows.

Agile development management software can provide user interfaces for transitioning between iterations by closing a current iteration and activating a subsequent iteration as illustrated in in accordance with some embodiments.

The UI displays a group of incomplete work items associated with the current iteration . For example the group may include features i.e. stories e.g. Enter RMA and defects e.g. Inventory Levels Off in Warehouse scheduled to be completed or resolved in the current iteration . Various attributes e.g. Title Owner Status Estimate and To Do are displayed for the work items in the group . The work items displayed in the group may be filtered using one or more filters . Each work item in the group is incomplete because it has a non zero amount of work remaining to be done as indicated by the To Do attribute . The Status attribute also provides an indication that the work items in the group are incomplete. The UI displays instructions telling the user to disposition the incomplete work items in the group by closing them or moving them to a subsequent iteration. Because incomplete work items remain in the group the user is not yet provided with the option to close the current iteration and activate the subsequent iteration .

The UI also displays a group of complete i.e. closed work items including various attributes and of the work items in the group . The zero To Do values Accepted Status and strikethrough display of the titles as used in some embodiments all indicate that the work items in the group are complete. The user may reopen a respective work item in the group by selecting a reopen link e.g. by clicking on the link in response to which the respective work item is removed from the group and added to the group the respective work item is now considered to be incomplete. In some embodiments selection of the reopen link results in display of a user interface for editing attributes of the respective work item e.g. for providing a To Do value .

A field in the UI corresponds to the subsequent iteration . The user may move an incomplete work item in the group to the subsequent iteration by dragging and dropping the work item onto the field . For example the user may perform a drag and drop operation to move the Enter RMA feature to the subsequent iteration . As a result as shown in Enter RMA is no longer displayed in the group indicating that Enter RMA is no longer associated with the current iteration and thus is not scheduled to be completed in the current iteration . Instead Enter RMA is now associated with the subsequent iteration and is scheduled to be completed in the subsequent iterations . In some embodiments the field may be replaced by an icon link or other indicator associated with the subsequent iteration . Other methods of moving a work item to a subsequent iteration are possible such as selecting an appropriate command from a menu not shown .

In addition to moving an incomplete work item to a subsequent iteration the UI enables the user to close incomplete work items. The user may desire to close a work item for example if the work item actually has been completed but the status of the work item has not yet been updated in the agile development management software to reflect its completion. To close a work item the user selects a close story link or close defect link . For example in some embodiments selection of the close defect link for the Inventory Levels Off in Warehouse defect results in display of the UI in accordance with some embodiments. The UI displays various attributes e.g. and of the Inventory defect and includes drop down menu selectors and for updating the Status and Resolution of the Inventory defect . For example the Status may be updated to Accepted and the Resolution to Fixed indicating that the Inventory defect was successfully resolved during the current iteration . In response to user selection of the Close Defect button the user is returned to the UI in which the Inventory defect is no longer displayed in the group of incomplete work items and instead is displayed in the group of complete work items. In some embodiments closing a work item automatically sets its To Do attribute to zero as shown in for the Inventory Defect . In response to user selection of the Cancel button the user is returned to the UI and the Inventory defect is still displayed in the group of incomplete defects.

In some embodiments the Close Defect button in the UI is not displayed until the Status and or Resolution have been updated to indicate that the Inventory defect has been resolved. Alternatively selection of the Close Defect button automatically updates relevant attributes e.g. Status Resolution and or To Do to indicate that the defect has been resolved allowing the user to close the defect without updating any attributes of the defect . In other embodiments the UI is not present instead execution of a close work item command e.g. selection of a close work item link such as the close defect link or close story link in the UI results in the work item being moved from the group to the group e.g. as illustrated for the Inventory defect in and its attributes being automatically updated to reflect that it has been closed e.g. Status is changed to Accepted and To Do is zeroed out .

While the UI has been described with regard to closing a defect a similar UI may be accessed e.g. by selecting a Close Story link for closing a feature or other incomplete work item associated with the current iteration .

An incomplete work item in the group may include a plurality of constituent work items some of which may be complete and some of which may be incomplete. For example an incomplete feature or defect in the group may include constituent tasks and or tests some of which are complete and some of which are incomplete. The incomplete work item may be split into two separate work items referred to as the original work item and the new work item with the constituent work items divided between them such that all complete constituent work items are associated with the original work item and all incomplete constituent work items are associated with the new work item. The new work item then may be moved e.g. automatically to the subsequent iteration to allow the current iteration to be closed.

In the UI the user may split the Add Shipping Notes work item by selecting the drop down menu selector and then selecting the Split command from the resulting drop down menu . In response a UI for splitting the Add Shipping Notes work item is displayed in accordance with some embodiments. The UI displays an original backlog item and a new backlog item . Prior to splitting the work item a group of constituent work items associated with the work item e.g. tasks and tests to be performed to complete the work item are displayed for the original backlog item . Some of the constituent work items in the group e.g. and are complete as indicated by the zero values of their To Do attributes others and are incomplete as indicated by the non zero values of their To Do attributes . Because the work item has not yet been split no constituent work items are associated with the new backlog item as indicated by the No Results message .

To split the work item the user selects the Split button . In response as illustrated in the incomplete constituent work items previously displayed in the group are moved to the new backlog item and displayed in a group of constituent work items associated with the new backlog item . The complete constituent work items previously displayed in the group are not moved they remain associated with the original backlog item and are displayed in a group of constituent work items associated with the original backlog item . In the example of both the new and original backlog items have the same title Add Shipping Notes . Because all constituent work items of the original backlog item now have zero To Do attributes the To Do attribute of the original backlog item is automatically updated to zero indicating that it is complete. In some embodiments the split operation automatically updates other attributes of the original backlog item e.g. Status and or Resolution to indicate that the original backlog item is complete.

If the user decides not to implement this split the user may select the Cancel button and return to the UI as shown in . Alternatively to implement this split the user may select the OK button . In response to selecting the OK button the user is returned to the UI as shown in . As a result of the split operation Add Shipping Notes is no longer listed as an incomplete work item under Remaining Stories and Defects. Instead the post split original backlog item is listed in the group of complete work items. The new backlog item is not displayed in the UI because it is not associated with the current iteration it was automatically associated with the next iteration as a result of the split operation.

In some embodiments the UI is omitted. Instead a work item is automatically split into the original backlog item and new backlog item in response to selection of the Split command resulting in a direct transition from to .

In the UI a message indicates that no incomplete work items remain associated with the current iteration . When the agile development management software e.g. agile development management module as executed by the computer determines that no incomplete work items remain associated with the current iteration a Close Iteration button is displayed in the UI and a message informs the user that the current iteration can be closed. In response to user selection of the Close Iteration button the current iteration is closed and the next iteration is activated such that the next iteration replaces the current iteration as the currently active iteration e.g. as the iteration against which progress on associated work items may be recorded in the agile development management software . Display of work items associated with the current iteration is ceased and the UI is updated to display work items associated the iteration as shown in in accordance with some embodiments. Specifically a group of incomplete work items associated with the iteration is displayed. The group includes Enter RMA which was moved to the iteration from the previous iteration and the new backlog item for Add Shipping Notes which was split from the previous iteration as well as other work items and that have been associated with the iteration e.g. that were assigned to the iteration during the iteration planning process . No group of complete work items is displayed because no work items associated with the iteration have been completed yet as indicated by the message . The field in the UI is now associated with the iteration Month D 1st Half that follows the iteration Month C 2nd Half and allows the user to move work items from the iteration to the iteration .

In some embodiments instead of displaying the Close Iteration button the current iteration is automatically closed and the subsequent iteration is automatically updated in response to the determination that no incomplete work items remain associated with the current iteration and display of the UI is automatically updated as illustrated in .

The UI H and K L thus provides the user with flexibility when transitioning between iterations the user may close incomplete work items move them forward to a subsequent iteration or split them into complete and incomplete portions and move the incomplete portions forward all from a single user interface. By not displaying the Close Iteration button until no incomplete work items for the iteration remain the UI ensures that no incomplete work items are ignored when closing an iteration. This aspect of the UI is particularly useful because user selection of one or more filters may result in some incomplete work items not being displayed in the group creating a risk that these work items might be ignored.

A first group of incomplete work items e.g. group associated with a current iteration of agile software development e.g. iteration is displayed . In some embodiments the first group of incomplete work items includes features e.g. Enter RMA and defects e.g. Inventory Levels Off in Warehouse associated with the current iteration.

In some embodiments while the first group is being displayed a second group of complete work items e.g. group associated with the current iteration is simultaneously displayed . In some embodiments while the first group is being displayed an indicator e.g. field corresponding to a subsequent iteration is displayed.

In response to a first user input a first incomplete work item of the first group is transferred from the current iteration to the subsequent iteration of agile software development. In some embodiments the first user input includes dragging and dropping the first incomplete work item from the first group onto the indicator corresponding to the subsequent iteration e.g. drag and drop operation . In some embodiments display of the first incomplete work item in the first group is ceased . For example in in response to the drag and drop operation the Enter RMA feature is no longer displayed.

In some embodiments in response to a second user input e.g. user selection of the Close Defect link and or the Close Defect button a second incomplete work item of the first group e.g. the Inventory defect is closed and the second work item is removed from the first group. In some embodiments display of the second work item in the first group is ceased and the second work item is displayed in the second group e.g. in the group . In some embodiments the second work item is a defect associated with the second iteration and closing the second work item includes updating a status of the defect e.g. Status or Resolution to indicate that the defect has been resolved. In some embodiments the second incomplete work item is a feature associated with the second iteration and closing the second incomplete work item includes updating a status of the feature e.g. Status to indicate that the feature has been implemented. In some embodiments closing the second work item includes automatically updating one or more attributes of the second work item to indicate that no work remains to be done.

In some embodiments in response to a third user input e.g. user selection of the Split command and or the Split button and OK button a third incomplete work item e.g. Add Shipping Notes that includes one or more incomplete constituent work items and one or more complete constituent work items is divided into a new work item e.g. new backlog item and an original work item e.g. original backlog item . The new work item includes the one or more incomplete constituent work items and the original work item includes the one or more complete constituent work items. The new work item is associated with the subsequent iteration and the original work item is associated with the current iteration. In some embodiments a status of the original work item indicates that no work remains to be done for the original work item.

In some embodiments the third incomplete work item is a feature or defect associated with the current iteration. In some embodiments the one or more incomplete constituent work items and or the one or more complete constituent work items include a task and or a test associated with the feature or defect.

A determination is made that no incomplete work items remain associated with the current iteration. The current iteration is closed and the subsequent iteration is activated .

In some embodiments a close iteration icon e.g. button is displayed in response to the determination that no incomplete work items remain associated with the current iteration. User selection of the close iteration icon is detected in response to which the current iteration e.g. iteration is closed and the subsequent iteration e.g. iteration is activated. Furthermore in some embodiments in response to detecting user selection of the close iteration icon display of work items associated with the current iteration is ceased and work items associated with the subsequent iteration are displayed e.g. as illustrated in .

The method thus provides a user friendly flexible and robust way to transition between iterations in agile software development the user may move close and or split work items through a single interface. While the method includes a number of operations that appear to occur in a specific order it should be apparent that the method can include more or fewer operations which can be executed serially or in parallel. An order of two or more operations may be changed and two or more operations may be combined into a single operation. For example the order of operations and may be varied and one or more of operations and may be omitted.

The server system includes a server and a database . Server serves as a front end for the server system . Server sometimes called a front end server provides an interface between the server system and the client systems . In some embodiments the functions of server may be divided or allocated among two or more servers.

The server system stores data relating to the agile development process including asset data . The asset data includes attributes for respective assets. An exemplary data structure for asset data is illustrated in described below.

It should be appreciated that the server system including the server and the database may be implemented as a distributed system of multiple computers. However for convenience of explanation the server system is described herein as being implemented on a single computer which can be considered a single logical system.

A user interfaces with the server system at a client system or device hereinafter called the client system for ease of reference . The client system includes a computer or computer controlled device such as a personal digital assistant PDA cellular telephone or the like. The computer typically includes one or more processors not shown memory which may include volatile memory not shown and non volatile memory such as a hard disk drive and a display . The computer may also have input devices such as a keyboard and a mouse not shown .

In some embodiments a user may interact with the server system via an agile development user interface presented on the display . Examples of user interfaces are illustrated in . In some embodiments the agile development user interface may be a web based user interface. That is the user interface includes one or more web pages. It is noted that a single web page can contain multiple frames each of which may appear when displayed by a browser application to be a distinct web page. The web page s may be written in the Hypertext Markup Language HTML Extensible Markup Language XML or any other suitable language for preparing web pages and may include one or more scripts for interfacing with the server system . For example the web page s may include a JavaScript application that interfaces with the server system via an application programming interface API . The JavaScript application receives asset data and reporting data from the server system manages the rendering of that data at the client and also performs the client side aspects of other tasks such as receiving user input for transitioning between iterations and transmitting user requests to the server system .

In some other embodiments the agile development user interface may be a part of a stand alone application that is run on the client system . The standalone application may interface with the server system via an application programming interface API .

The agile development management system may perform the method in accordance with some embodiments. In some embodiments performance of various operations in the method may be divided between the client system and server system . Alternatively the method may be performed entirely at the client system .

Instead of using a client sever model the agile development management software may be installed and used on a single computer system combining the functionalities of the server system and client system . For example the method may be performed entirely on a single computer system.

In some embodiments the agile development management module includes a local database for storing data sent by the server e.g. asset data and reporting data an asset display module for displaying assets e.g. via UI UI or UI and for displaying an asset s attributes and related assets e.g. via window or UI an asset editing module for updating attribute values e.g. in accordance with data entered via user input fields an iteration transitioning module for transitioning between iterations e.g. via UIs and a reporting module for displaying reporting and a server interface module for interfacing with server computer . In some embodiments the iteration transitioning module asset display module and or asset editing module correspond to instructions for performing all or a portion of the operations in the method . In some embodiments the server interface module includes a cache for storing data to be transmitted to the server.

In some embodiments the agile development management module may be a script based module embedded in a web page served from the server system . The web page may be rendered by a client application such as a web browser at the client computer . When the web page is rendered the agile development management module is executed thereby providing a web based interface to the server system . The script based agile development management module may be written in JavaScript AJAX ECMAScript Perl or any other suitable scripting language.

In some other embodiments the agile development management module may be a standalone application stored in memory of the client computer .

Each of the above identified elements in may be stored in one or more of the previously mentioned memory devices. Each of the above identified modules corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

In some embodiments the asset data includes work items associated with respective iterations. In some embodiments the agile development management database includes database management software for performing one or more operations in the method . In some embodiments the application interface includes a presentation layer for rendering user interfaces e.g. accessed by a client system .

Each of the above identified elements in may be stored in one or more of the previously mentioned memory devices. Each of the above identified modules corresponds to a set of instructions for performing a function described above. The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

Although shows a server computer is intended more as a functional description of the various features which may be present in a set of servers than as a structural schematic of the embodiments described herein. In practice and as recognized by those of ordinary skill in the art items shown separately could be combined and some items could be separated. For example some items shown separately in could be implemented on single servers and single items could be implemented by one or more servers.

The agile development management database stores data in various tables. For example an Asset Type table includes an entry for each kind of asset such as feature group feature defect task or test. An Attribute Definition table defines the attributes associated with each kind of asset listed in the Asset Type table. A Synthetic Attribute table references formulas used to calculate synthetic attributes. For example if a work estimate or degree of completion is defined as a roll up of estimates or degrees of completion for other assets the roll up may be specified in a Synthetic Attribute table. An Attribute Security Check table contains references to operations used to determine whether a user may access or modify particular attributes. For attributes that are associated assets a Relation Definition table defines relationships between assets. In addition a Many to Many Relation Definition table may contain relationship information for assets in many to many relationship with other assets. Other tables may specify business rules for various assets.

Attribute values for particular assets are stored in asset tables as illustrated in in accordance with some embodiments. In some embodiments a table corresponds to a particular type of asset such as feature group feature defect task or test. The asset table includes a row for each respective asset stored in the table. Each row includes fields that contain values for attributes of the respective asset as defined in the Attribute Definition table. For example the attribute fields may include title asset ID project iteration estimate to do and various other attributes e.g. progress degree of completion status resolution etc. . The asset table also includes fields to specify other attributes that are associated i.e. related assets. For example if a respective asset is a feature or defect fields may specify tasks and tests associated with the feature or defect for example by providing the asset IDs of the tasks and tests.

The tables thus include information to allow the agile development management application interface to respond to a request from a client computer when a user seeks to create display and modify assets. The interface can access the asset tables e.g. by writing to or querying the tables in response to requests from the client computer .

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.

