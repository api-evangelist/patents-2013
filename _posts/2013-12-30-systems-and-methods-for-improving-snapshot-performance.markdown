---

title: Systems and methods for improving snapshot performance
abstract: Techniques for improving snapshot performance are disclosed. In one embodiment, the techniques may be realized as a method for improving snapshot performance comprising initiating change block tracking for each unit of storage associated with each of a plurality of virtual machines, creating backup images of each unit of storage associated with each of the plurality of virtual machines, quiescing each of the plurality of virtual machines, and creating snapshots of each unit of storage associated with each of the plurality of virtual machines. The techniques may include identifying one or more changed blocks in at least one of the backup images using the change block tracking, editing the at least one of the backup images by replacing the identified one or more changed blocks using corresponding blocks from at least one snapshot of the snapshots, and releasing the at least one snapshot based upon a determination that editing has completed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09377964&OS=09377964&RS=09377964
owner: Veritas Technologies LLC
number: 09377964
owner_city: Mountain View
owner_country: US
publication_date: 20131230
---
The present disclosure relates generally to data backup and more particularly to techniques for improving snapshot performance.

The use of virtual machines requires an ability to scale backup processes to accommodate multiple virtual machines on a single platform. To ensure a consistent backup of a plurality of virtual machines on a platform may require a resource intensive process including quiescing all virtual machines snapshotting all virtual machines snapshotting one or more storage devices and creating backup images by reading consistent data of the snapshots. Snapshots may not be released until backup images are created. This may increase a duration of time that a snapshot is maintained. A hypervisor may maintain a delta of the changed data for a virtual disk while a snapshot of the virtual disk is maintained. When a snapshot is released a hypervisor may merge the delta of changed data back into the virtual disk. This merge process may be a resource intensive operation e.g. have significant I O Input Output demands . If multiple virtual machines are present multiple snapshots may be maintained until backup images are complete. This may increase the duration that each snapshot is maintained and may increase a size of a delta of changed virtual disk data maintained. Thus when multiple snapshots are released for multiple virtual machines a merge process for corresponding deltas of changed virtual disk data may have significant resource impact e.g. I O and CPU usage .

In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with current data backup technologies.

Techniques for improving snapshot performance are disclosed. In one embodiment the techniques may be realized as a method for improving snapshot performance comprising initiating change block tracking for each unit of storage associated with each of a plurality of virtual machines creating backup images of each unit of storage associated with each of the plurality of virtual machines quiescing each of the plurality of virtual machines creating snapshots of each unit of storage associated with each of the plurality of virtual machines and identifying using at least one computer processor one or more changed blocks in at least one of the backup images using the change block tracking. The method may also include editing the at least one of the backup images by replacing the identified one or more changed blocks using corresponding blocks from at least one snapshot of the snapshots and releasing the at least one snapshot based upon a determination that editing of the at least one backup image has completed and produced a consistent backup image wherein release of the at least one snapshot is independent of release of any other of the snapshots.

In accordance with other aspects of this particular exemplary embodiment quiescing of each of the plurality of virtual machines may be instantiated independently.

In accordance with further aspects of this particular exemplary embodiment the method may further comprise taking a storage snapshot for at least one of the units of storage after initiating change block tracking for the at least one of the units of storage.

In accordance with additional aspects of this particular exemplary embodiment the storage snapshot may provide a single snapshot allowing restoration of all of the plurality of virtual machines.

In accordance with additional aspects of this particular exemplary embodiment the consistent backup image may be a crash consistent backup image.

In accordance with additional aspects of this particular exemplary embodiment the consistent backup image may be an application consistent backup image.

In accordance with additional aspects of this particular exemplary embodiment the snapshot creation may be configured to be instantiated as each virtual machine of the plurality of virtual machines is quiesced and is independent of a state of other virtual machines of the plurality of virtual machines.

In accordance with additional aspects of this particular exemplary embodiment editing of the at least one backup image may be configured to be performed independently of editing of any of the other of the backup images.

In accordance with additional aspects of this particular exemplary embodiment the unit of storage may comprise a virtual hard drive.

In accordance with additional aspects of this particular exemplary embodiment at least one unit of storage associated with each of the plurality of virtual machines may comprise physical storage.

In accordance with additional aspects of this particular exemplary embodiment the techniques may be realized as at least one non transitory processor readable storage medium storing a computer program of instructions configured to be readable by at least one processor for instructing the at least one processor to execute a computer process for performing the method.

In another embodiment the techniques may be realized as an article of manufacture for improving snapshot performance. The article of manufacture may comprise at least one non transitory processor readable storage medium and instructions stored on the at least one medium. The instructions may be configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to initiate change block tracking for each unit of storage associated with each of a plurality of virtual machines create backup images of each unit of storage associated with each of the plurality of virtual machines quiesce each of the plurality of virtual machines create snapshots of each unit of storage associated with each of the plurality of virtual machines and identify one or more changed blocks in at least one of the backup images using the change block tracking. The instructions may be configured to cause the processor to operate so as to edit the at least one of the backup images by replacing the identified one or more changed blocks using corresponding blocks from at least one snapshot of the snapshots and release the at least one snapshot based upon a determination that editing of the at least one backup image has completed and produced a consistent backup image wherein release of the at least one snapshot is independent of release of any other of the snapshots.

In accordance with additional aspects of this particular exemplary embodiment the snapshot creation may be configured to be instantiated as each virtual machine of the plurality of virtual machines is quiesced and may be independent of a state of other virtual machines of the plurality of virtual machines.

In accordance with additional aspects of this particular exemplary embodiment editing of the at least one backup image may be configured to be performed independently of editing of any of the other of the backup images.

In yet another embodiment the techniques may be realized as a system for improving snapshot performance comprising one or more processors communicatively coupled to a network. The one or more processors may be configured to initiate change block tracking for each unit of storage associated with each of a plurality of virtual machines create backup images of each unit of storage associated with each of the plurality of virtual machines quiesce each of the plurality of virtual machines create snapshots of each unit of storage associated with each of the plurality of virtual machines and identify one or more changed blocks in at least one of the backup images using the change block tracking. The processors may be configured to edit the at least one of the backup images by replacing the identified one or more changed blocks using corresponding blocks from at least one snapshot of the snapshots and release the at least one snapshot based upon a determination that editing of the at least one backup image has completed and produced a consistent backup image wherein release of the at least one snapshot may be independent of release of any other of the snapshots.

In accordance with additional aspects of this particular exemplary embodiment quiescing of each of the plurality of virtual machines may be instantiated independently.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise taking a storage snapshot for at least one of the units of storage after initiating change block tracking for the at least one of the units of storage.

In accordance with additional aspects of this particular exemplary embodiment snapshot creation may be configured to be instantiated as each virtual machine of the plurality of virtual machines is quiesced and is independent of a state of other virtual machines of the plurality of virtual machines.

In accordance with additional aspects of this particular exemplary embodiment editing of the at least one backup image may be configured to be performed independently of editing of any of the other of the backup images.

In accordance with additional aspects of this particular exemplary embodiment at least one of each the units of storage associated with each of a plurality of virtual machines may comprise physical storage.

The present disclosure will now be described in more detail with reference to exemplary embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to exemplary embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client systems and to network . Client systems and may be able to access information on server A or B using for example a web browser or other client software not shown . Such a client may allow client systems and to access data hosted by server A or B or one of storage devices A N B N and or N .

Networks and may be local area networks LANs wide area networks WANs the Internet cellular networks satellite networks or other networks that permit communication between clients servers and other devices communicatively coupled to networks and . Networks and may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and may utilize one or more protocols of one or more clients or servers to which they are communicatively coupled. Networks and may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as one network it should be appreciated that according to one or more embodiments networks and may each comprise a plurality of interconnected networks.

Storage devices A N B N and or N may be network accessible storage and may be local remote or a combination thereof to server A or B. Storage devices A N B N and or N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices A N B N and or N may be used for backup or archival purposes.

According to some embodiments clients and may be smartphones PDAs desktop computers a laptop computers servers other computers or other devices coupled via a wireless or wired connection to network . Clients and may receive data from user input a database a file a web service and or an application programming interface.

Servers A and B may be application servers archival platforms backup servers network storage devices media servers email servers document management platforms enterprise search servers or other devices communicatively coupled to network . Servers A and B may utilize one of storage devices A N B N and or N for the storage of application data backup data or other data. Servers A and B may be hosts such as an application server which may process data traveling between clients and and a backup platform a backup process and or storage. According to some embodiments servers A and B may be platforms used for backing up and or archiving data. One or more portions of data may be backed up or archived based on a backup policy and or an archive applied attributes associated with the data source space available for backup space available at the data source or other factors.

According to some embodiments clients and or may contain one or more portions of software for snapshot performance improvement such as for example snapshot improvement module . As illustrated one or more portions of snapshot improvement module may reside at a network centric location. For example server A may be a server a firewall a gateway a backup server or other network element that may perform one or more actions to improve snapshot performance. According to some embodiments network may be an external network e.g. the Internet and server A may be a gateway or firewall between one or more internal components and clients and the external network.

A traditional backup of a plurality of virtual machines may require all virtual machines to be quiesced e.g. pausing a state of running processes and flushing any writes to disk . After all virtual machines are quiesced then snapshots may be made of the virtual storage of all of the virtual machines on a platform e.g. a server . A snapshot of underlying physical storage may be made as well. Backup images may be generated of the virtual storage of the virtual machines e.g. virtual disks such as .vmdks using the snapshots. After generation of the backup images for all of the virtual machines the snapshots may be released. However generation of a backup image may take a significant amount of time during which a snapshot may be maintained. When multiple backup images are required for a plurality of virtual machines on a platform the time a snapshot is maintained may increase significantly. Once a snapshot is released any Input Output I O that is queued to a temporary delta file during the snapshot may be written to the virtual disk. The resulting backlog of I O may significantly increase I O and CPU usage and may significantly degrade performance.

According to some embodiments snapshot improvement module may reduce a duration required for a snapshot when backing up a platform having a plurality of virtual machines. For example snapshot improvement module may allow snapshots to be created and released independently for each virtual machine thus decreasing the amount of time a snapshot is held. Specifically snapshot improvement module may allow a creation of a snapshot for a first virtual machine to be instantiated while other virtual machines on a platform are still being quiesced and creation of snapshots for the other virtual machines have not yet been instantiated.

Snapshot improvement module may also allow for creation of a backup image prior to quiescing an snapshotting a virtual machine. Because creation of a backup image takes a significant amount of time and is one of the longer steps in a traditional backup process creating a backup image prior to creation of a snapshot may greatly reduce an amount of time a snapshot is held. This may reduce an amount of I O queued in a delta file.

Because of the changes snapshot improvement module may take several steps to be able to ensure creation of an application consistent backup image e.g. a backup image in which application data is not lost . Snapshot improvement module may start a backup process of a plurality of virtual machines by instantiating change block tracking for one or more underlying units of storage e.g. a volume a virtual disk or a physical disk supporting one or more of the virtual machines to be backed up. According to some embodiments change block tracking may produce a bitmap or a list of changed blocks.

After change block tracking has been instantiated snapshot improvement module may create a backup image for each unit of virtual storage associated with the virtual machines to be backed up.

After a backup image has been created for the storage associated with a virtual machine e.g. the corresponding virtual disks snapshot improvement module may initiate quiescing of the virtual machine. Once the virtual machine is quiesced a snapshot of the virtual machine may be taken.

After generation of the snapshot snapshot improvement module may edit a backup image of the virtual machine to ensure consistency. Editing of the backup image to ensure consistency may include using change block tracking to identify blocks of a backup image that have changed. Identified changed blocks may be replaced with blocks from a corresponding snapshot for the virtual machine. According to some embodiments editing of a backup image may be deferred and copies of blocks from a corresponding snapshot may be stored for later editing. If data identifying changed blocks in a backup image is available e.g. change tracking and data providing consistent blocks to replace the change blocks is available e.g. stored in the backup image stored in the snapshot or stored separately from the snapshot or the backup image editing of the backup image may be deferred. Replacing blocks in a backup image with blocks from a corresponding snapshot may ensure that a backup image is both crash and application consistent. Once a backup image for a virtual machine has been edited to ensure consistency or consistent data and data identifying changed blocks has been stored snapshot improvement module may release a snapshot of the storage of the virtual machine. Thus editing of a backup image to ensure consistency may only include replacing changed blocks with consistent data from a corresponding snapshot. Because a backup image was written prior to the creation of a snapshot and the snapshot may be held only for the duration of the editing of the backup image the snapshot may be held for a significantly shorter period of time. Because backup images for each virtual machine may be created independently and snapshots may be created and released independently each snapshot may only be held for the time it takes to ensure the consistency of a backup image regardless of the state of backup images for other virtual machines. Thus the release of a snapshot may not be delayed until the backup images of all the other virtual machines is completed. Because of these efficiencies snapshots may be held for a significantly shorter period of time and this may significantly reduce an amount of I O queued in a delta file.

According to some embodiments snapshot improvement module may generate a snapshot of physical storage after initiating change block tracking. This may provide a single snapshot allowing for movement of all virtual machines across platforms. This may also ensure that a backup image is crash consistent prior to editing of the backup image which may also ensure that a backup image is crash consistent and application consistent .

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. For example snapshot improvement module may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

Referring to there is shown a snapshot performance improvement module in accordance with an embodiment of the present disclosure. As illustrated the snapshot performance improvement module may contain one or more components including change block tracking module backup image module snapshot module image editing module and error logging and reporting module .

The description below describes network elements computers and or components of a system and method for improving snapshot performance that may include one or more modules. As used herein the term module may be understood to refer to computing software firmware hardware and or various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . It is noted that the modules are exemplary. The modules may be combined integrated separated and or duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and or by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and or other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and or may be included in both devices.

Change block tracking module may generate a bitmap a list or other data structure indicating which blocks of storage have been changed. Change block tracking module may be used to track modifications to underlying physical storage during a period from when a backup image of a virtual disk using that storage is created until a snapshot of the virtual disk is created. Information from change block tracking module may be used to identify blocks modified in a corresponding backup image file that need to be updated from a snapshot.

Backup image module may generate a backup image of virtual storage e.g. a virtual disk associated with one or more virtual machines. Backup image module may generate a backup image of virtual storage associated with a virtual machine prior to snapshotting of the virtual machine.

Snapshot module may quiesce a virtual machine and generate a snapshot of virtual storage of the virtual machine.

Image editing module may correct inconsistent data in a backup image of a virtual machine unit of storage due to the generation of a backup image prior to quiescing and snapshotting a virtual machine. Image editing module may use data from change block tracking module to determine which blocks of a backup image have been modified and are thus inconsistent. Image editing module may identify a corresponding snapshot and may use consistent data from the corresponding snapshot to overwrite the blocks in the backup image that have been changed. After a backup image has been modified to ensure consistency e.g. application consistency or in some embodiments crash consistency snapshot module may release the corresponding snapshot. In some embodiments consistent data and data identifying changed blocks may be stored and snapshot module may release the corresponding snapshot prior to editing of the corresponding backup image.

Error logging and reporting module may produce logs reports or other information associated with improving snapshot performance.

Referring to there is depicted a method for improving snapshot performance in accordance with an embodiment of the present disclosure. At block the method may begin.

At block change block tracking may be initiated for one or more underlying units of storage e.g. a volume a virtual disk or a physical disk supporting one or more of the virtual machines to be backed up. According to some embodiments change block tracking may produce a bitmap or a list of changed blocks.

At block an optional process may be performed. According to some embodiments a snapshot of physical storage may be generated after initiating change block tracking. This may provide a single snapshot allowing for movement of all virtual machines across platforms. This may also ensure that a backup image is crash consistent prior to editing of the backup image which may also ensure that a backup image is crash consistent and application consistent .

At block a backup image may be created for each unit of virtual storage e.g. the corresponding virtual disks associated with the virtual machines to be backed up.

At block quiescing of a virtual machine may be initiated. Once the virtual machine is quiesced a snapshot of the virtual machine may be taken. Initiation of quiescing and snapshotting of virtual machines may be independent of each other and may depend upon when a backup image for a particular virtual machine is complete. According to some embodiments in Initiation of quiescing and snapshotting of virtual machines may occur at a same time.

According to some embodiments at block creation of a snapshot may be detected. After generation of the snapshot is complete the process may continue at block . If a snapshot has not been completed the process may return to block .

At block a backup image of the virtual machine may be augmented to ensure consistency. Augmenting the backup image to ensure consistency may include using change block tracking to identify blocks of a backup image that have changed. Blocks in a snapshot image of a virtual machine which correspond to those identified as changed in the backup image may be saved. For example blocks from a corresponding snapshot image may be added to a backup image. In some embodiments identified changed blocks in a backup image may be replaced with blocks from a corresponding snapshot for the virtual machine. In some embodiments editing of a backup image may be deferred until later. A consistent backup image may be ensured if there is data identifying blocks changed in a backup image e.g. via change block tracking and stored copies of blocks providing consistent data for the changed blocks. In some embodiments a backup image with stored consistent data may be edited later e.g. after release of a corresponding snapshot . Replacing blocks in a backup image with blocks from a corresponding snapshot may ensure that a backup image is both crash and application consistent.

At block once a backup image for a virtual machine has been edited to ensure consistency or copies of consistent data have been stored snapshot improvement module may release a snapshot of the storage of the virtual machine. Releasing of a snapshot of a virtual machine may be independent of a status of other virtual machines and snapshots for other virtual machines. Once a snapshot for a virtual machine storage unit is released a delta file of queued I O transactions may be merged into the storage unit e.g. virtual disk for the virtual machine.

At block it may be determined whether all snapshots for a backup process are complete. If additional snapshots are being created the method may return to block if no additional snapshots are being created the method may end at block .

At this point it should be noted that improving snapshot performance in accordance with the present disclosure as described above typically involves the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in a snapshot performance improvement module or similar or related circuitry for implementing the functions associated with improving snapshot performance in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with improving snapshot performance in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of a particular implementation in a particular environment for a particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

