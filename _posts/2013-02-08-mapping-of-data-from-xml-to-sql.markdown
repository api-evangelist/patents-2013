---

title: Mapping of data from XML to SQL
abstract: A method, an apparatus and a computer program product for converting an XML encoded dataset into a minimal set of SQL tables and provided. In the method, a hierarchical structure in the XML encoded dataset is identified. A node element set for the XML encoded dataset is determined, wherein each node element in the node element set is a discrete level of the hierarchical structure of the dataset. One or more nodes of the XML encoded dataset are determined, each node being an instance of a node element. A unique node identifier is allocated to each node. Then, an SQL node table containing one or more records is generated, each record corresponding to a respective one of the allocated node identifiers. An SQL ancestry table is optionally generated to define the inter-relationships among nodes of the identified hierarchical structure of the XML encoded dataset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08738667&OS=08738667&RS=08738667
owner: Timebase Pty Limited
number: 08738667
owner_city: Sydney
owner_country: AU
publication_date: 20130208
---
This application is a continuation of U.S. application Ser. No. 13 473 207 filed May 16 2012 which is a continuation of U.S. application Ser. No. 12 073 511 filed Mar. 6 2008 now U.S. Pat. No. 8 204 913 which is a continuation of U.S. application Ser. No. 10 233 991 filed on Sep. 3 2002 now U.S. Pat. No. 7 363 310 which claims the benefit of U.S. Provisional Application No. 60 317 038 filed on Sep. 4 2001. Each one of these applications is incorporated herein by reference in their entirety.

The present invention relates generally to electronic documents and in particular to the storage maintenance and publication of complex text based datasets.

International Publication No. WO 98 34179 PCT AU98 00050 in the name of Time Base Pty Ltd and published on 6 Aug. 1998 and counterpart U.S. Pat. No. 6 233 592 issued on 15 May 2001 to Schnelle et al. are incorporated herein by cross reference. In these documents an electronic publishing system is disclosed that provides a sparse multidimensional matrix of data using a set of flat file records. In particular the computer implemented system publishes an electronic publication using text based data. Predefined portions of the text based data are stored and used for the publication. At least one of the predefined portions is modified and the modified version is stored as well. The predefined portion is typically a block of text greater in size than a single word but less than an entire document. Thus for example in the case of legislation the predefined portion may be a section of the Act. Each predefined portion and the modified portion s are marked up with one or more links using a markup language preferably SGML or XML The system also has attributes each being a point on an axis of a multidimensional space for organising the predefined portions and the modified portion s of the text based data. This system is simply referred to as the Multi Access Layer Technology or MALT system hereinafter.

Australian Patent Application No. 65470 00 filed on 12 Oct. 2000 in the name of TimeBase Pty Ltd Canadian Patent Application No. 2323245 filed on 12 Oct. 2000 in the name of TimeBase Pty Ltd New Zealand Patent Application No. 507510 filed on 12 Oct. 2000 in the name of TimeBase Pty Ltd and U.S. patent application Ser. No. 09 689 927 filed on Oct. 12 2000 in the names of Lessing et al. are incorporated herein by cross reference.

U.S. patent application entitled Resilient Data Links filed on 18 Jul. 2001 in the names of Schnelle and Nolan is also incorporated herein by cross reference. In this document a method an apparatus and a computer program product for providing one or more resilient links in an electronic document are described. The methodology disclosed is referred to as MALTlink hereinafter.

Large or complex text based datasets are typically hierarchical in nature. In the storage maintenance and publication of such data it is common to use a markup language capable of describing such hierarchies. XML is one such markup language that is more commonly used particularly in the print electronic or online publishing industries and for government or public records or technical documentation. XML data is stored typically either in flat text files encoded in ASCII Unicode or other standard text encoding or in a native XML database.

The flat text files may be part of a document management system. Such a document management system may be based on a relational database. Document management systems deal with a document as a whole and are able to store relevant data about each document. However document management systems are typically not designed to operate on data XML elements within such documents. Consequently a document management system does not typically operate on all or even a substantial number of the XML elements contained in flat text files on which the document managing system is operating. An XML database in contrast operates on all XML elements of the XML data that the XML database is storing and consequently XML databases must manage large amounts of data and detail. As a result document management systems have a limited usefulness resulting from a lack of precision and XML databases are overwhelmed by the multiplicity of XML elements that are to be managed.

Attempts have been made to transform XML data into a set of SQL relational database tables. SQL is a database technology that provides a user with powerful query functionality and powerful data management tools. SQL possesses the stability of a mature technology whereas XML databases are still a relatively immature technology and thus possess a degree of instability. SQL is a fast and efficient technology and a wide choice of software and hardware manufacturers offer or support SQL databases.

Tree mapping techniques are typically used to convert XML data into relational databases. Conventional tree mapping techniques however often attempt to capture all of the document hierarchy. This is almost never necessary and can result in substantial size and performance penalties in the resulting SQL tables. Such tree mapping techniques typically result in a far larger number of SQL tables than is necessary.

As an example consider the XML fragment shown in . A classical approach to conversion is to represent the element tree with one table per element type possibly with an added table to store the tree structure. A correct and possibly even reversible outcome results. However the performance and management advantages which prompted the conversion in the first place can be diminished or even lost entirely because of the size and complexity of the resulting tables.

Thus a need exists for providing an efficient method for converting an XML document to a set of SQL tables.

According to a first aspect of the invention there is provided a computer implemented method for converting an XML encoded dataset into a minimal set of SQL tables including the steps of 

converting an XML encoded dataset associated with each identified hierarchical structure wherein for each identified hierarchical structure said converting step includes the further steps of 

determining a node element set for said identified hierarchical structure of said XML encoded dataset wherein each node element in said node element set is a discrete level of said identified hierarchical structure of said dataset 

determining one or more nodes of said XML encoded dataset each node being an instance of a node element 

generating an SQL node table containing one or more records each record corresponding to a respective one of said allocated node identifiers.

According to a second aspect of the invention there is provided an apparatus for converting an XML encoded dataset into a minimal set of SQL tables the apparatus including 

a device for converting an XML encoded dataset associated with each identified hierarchical structure the device including 

According to another aspect of the invention there is provided a computer program product including a computer readable medium having recorded thereon a computer program for implementing the method described above.

A method an apparatus and a computer program product for converting an XML document into a set of SQL tables are described. In the following description numerous details are set forth. It will be apparent to one skilled in the art however that the present invention may be practised without these specific details. In other instances well known features are not described in detail so as not to obscure the present invention.

Where reference is made in any one or more of the accompanying drawings to steps and or features which have the same reference numerals those steps and or features have for the purposes of this description the same function s or operation s unless the contrary intention appears.

A method of conversion should preferably produce an SQL rendition of an XML dataset that preserves document order hierarchy and other links and relationships which are deemed necessary. The required links and relationships may be all of the links and relationships inherent in the XML data or only a subset of these required to support a particular application such as Web publishing. Such a method of conversion should also limit the number of tables and records and the amount of real time processing required by downstream applications to the minimum consistent with the required functionality.

In the embodiments of the invention the granularity of the conversion of an XML document to an SQL table is matched to the requirements of those applications that access the SQL output. To this end the large scale structure of the data is mapped into a set of nodes and properties. Structure below this level is simply pre processed into a form suitable for direct use by end applications including 

The actual pre processing that is performed is dependent upon the accessing application. If an accessing application performs all the processing such as may occur with an XML editor no pre processing is required. Alternatively the data may be rendered into HTML or XHTML for web publishing or the data may be converted into MS Word for word processing. The data may even be converted into multiple formats XML XHTML Word Adobe Acrobat Postscript for printing etc.

The conversion process consists of determining all hierarchical structures present in the dataset under consideration and for each identified hierarchical structure the following steps are performed 

The fundamental underlying principle of the conversion strategy and what sets the strategy apart from other XML to SQL conversion systems is the concept of operating at a node level rather than operating on a base element level of the dataset to be converted. A node is a distinguished structural unit of the dataset. A dataset is a set of data possessing complex structure that may be rendered in a number of various formats. Such formats may include an XML document or SQL tables. A node is a discrete unit of data within which an internal structure may be pre processed to maximize performance of downstream applications. Typically a node is introduced by one of a set of specified XML tags the node element set .

A node may be associated with a predefined portion described in the aforementioned MALT system. Dividing a dataset into a number of nodes removes the need for downstream applications to assemble the required data usually a node from various elements. The conversion of data to an appropriate format such as XHTML or HTML for web applications means the webserver if that is the downstream application does not need to convert the XML data for browser clients that cannot accept XML directly or where the publisher decides not to provide a browser even if it is XML capable with XML data for security reasons. Such a situation may result as XML data may incorporate more features than HTML and a publisher may not want a customer to be able to recreate the XML dataset.

The levels within the structure of the information that are regarded as functionally significant by the creators and end users of the dataset must be identified. Inspection of the example indicates that 

The selection of a suitable terminal node element is significant as documented in the International Publication No. WO 98 34179 PCT AU98 00050 and U.S. Pat. No. 6 233 592 pertaining to the MALT system. A good rule of thumb is to take the element that is most often cited by users when referring to a single atom of information within the dataset. In the example of legislation the most often cited element is usually a section. For multiple document types in a single dataset the definition of nodes may be more or less complex depending on the degree to which the document types are comparable.

A principal determinant of the complexity of the nodes is the record structure adopted for each record associated with a predefined portion. For example consider a dataset consisting of multiple document type definitions DTDs for legislation a first DTD for old style textual legislation and a second DTD for new style legislation that incorporates examples and graphics. The document types are sufficiently similar to allow the application of a common node element set for example chapter part section. A further example is a dataset consisting of multiple DTDs for case law a first DTD for reports and a second DTD for practice notes. The documents need only be sufficiently similar to allow the application of the same node element set and conversion strategy for all documents in the dataset. In the case law example a suitable node element set might be jurisdiction year court casereport pracnote judgment. The common elements shared by the different document types enable a relatively simple definition of node elements to be applied to disparate sets of data. In such situations the definition of nodes may not be too complex as the document types share common features. A principal determinant is the choice of a terminal node element. The levels of the hierarchy that constitute the remainder of the node element set are also associated with predefined portions. Thus there may be multiple predefined portions in a single XML dataset.

When dealing with multiple predefined portions in a single dataset each terminal portion is duplicated when it changes in any degree. Non terminal higher level portions typically contain no variable content except for a title any other variable content being delegated to terminal sub portions. While the title itself may be regarded as a degenerate sub portion it is usually more efficient to add special handling of titles to the conversion process e.g. by reserving a separate table for title fields .

With no variable content and title changes handled separately the only substantive change which can apply to a non terminal portion apart from creation and deletion is a structural change. For example a legislative part may be converted into a chapter or moved from one chapter to another. In this case the entire portion including all contained sub portions must be duplicated at the new location in the hierarchy.

One table of nodes may possibly be used for two or more document types in the following circumstances 

In certain cases multiple document types may preferably or even desirably be represented in multiple node tables. Such situations might include 

An optimal node definition produces a set of nodes with comparable internal structure. For example the nodes defined for all have a label property. The nodes are desirably defined so that the number of non initial content blocks is kept to a minimum.

The dataset in the example of has only one content block namely the note at the end of Part A. While belonging to the part the note follows sections and A which are sub nodes in their own right. The note in section is not a content block because the note is not preceded by a sub node. Rather the note forms part of the initial content of that section.

Once a node set is established each data node and non initial content block is assigned an arbitrary node ID. This ID is typically an integer with the following properties 

Simple properties are those which can take at most one value per node. These properties can be derived from three sources 

Thus in the example all of the paragraph and elements and any internal markup are pre processed into content blocks and so do not have to be dealt with in real time. Note that initial content and other block content undergoes identical conversion but must be appropriately flagged in the content SQL table see below .

For each document type or group of equivalent document types a corresponding node table has one record per node and the following fields 

The minimum number of SQL tables required to represent an XML encoded dataset is one. However utilising a single table would require a large number of columns many of which would be sparsely populated. It is known that relational databases perform sub optimally in such situations. Accordingly it is preferable to convert an XML dataset into a single SQL node table and a minimum set of ancillary SQL tables. Presenting the data in multiple tables allows the data to be accessed in multiple ways often resulting in improved performance. Presenting the data in a minimum set of compact tables simplifies the management of the data. A single sparsely populated table can be unwieldy and cumbersome. For this reason an exemplary embodiment typically utilises content and ancestry tables.

Converting each element in a dataset to a corresponding table as it is currently done by IBM Oracle Microsoft and Sybase results in an overly complex product 

The pre processed content both initial and block is stored in a content table with the following fields 

A node may have more than one associated record in the content table . For example node id is associated with Part A of the legislation XML fragment of . There are two records in the content table having a node id of 310. The first record indicates that the node id has a first associated block id with content part A intro . The second record indicates that node id contains a second associated block id with content note at end of part A .

The node IDs specify document order but do not preserve the document hierarchy. This function is performed by the ancestry table. While in theory only parent information need be saved it is usually more efficient to explicitly generate all ancestry relationships including self . In this manner SQL queries that drive data retrieval are simpler and more efficient. There are only two fields in the ancestry table 

While simple properties can be stored in the node table complex properties have to be handled separately. Complex properties can occur more than once per node e.g. a set of see also links and can possess sub properties e.g. a set of chapter titles which have corresponding start and end dates . There is typically one table per complex property with the following fields 

While the conversion can be driven entirely automatically the best results are achieved when the mapping is matched to the needs of specific applications. To this end the user can supply the following 

A strategy and software to be known as MALTmap have been described for converting arbitrary XML data into SQL tables. Unlike conventional tree mapping techniques MALTmap is designed to produce an optimal SQL table set with a minimum of tables and records. In this way the performance and management benefits of using SQL are maximized.

The method of converting XML data into SQL tables is preferably practised using a general purpose computer system such as that shown in wherein the processes described above with respect to may be implemented as software such as an application program executing within the computer system . In particular the steps of a method of converting XML data into SQL tables are effected by instructions in the software that are carried out by the computer. The instructions may be formed as one or more code modules each for performing one or more particular tasks. The software may also be divided into two separate parts in which a first part performs the processes described above with respect and a second part manages a user interface between the first part and the user. The software may be stored in a computer readable medium including the storage devices described below for example. The software is loaded into the computer from the computer readable medium and then executed by the computer. A computer readable medium having such software or computer program recorded on it is a computer program product. The use of the computer program product in the computer preferably effects an advantageous apparatus for the processes described above with respect to .

The computer system comprises a computer module input devices such as a keyboard and mouse output devices including a printer and a display device . A Modulator Demodulator Modern transceiver device is used by the computer module for communicating to and from a communications network for example connectable via a telephone line or other functional medium. The modem can be used to obtain access to the Internet and other network systems such as a Local Area Network LAN or a Wide Area Network WAN .

The computer module typically includes at least one processor unit a memory unit for example formed from semiconductor random access memory RAM and read only memory ROM input output I O interfaces including a video interface and an I O interface for the keyboard and mouse and optionally a joystick not illustrated and an interface for the modem . A storage device is provided and typically includes a hard disk drive and a floppy disk drive . A magnetic tape drive not illustrated may also be used. A CD ROM drive is typically provided as a non volatile source of data. The components to of the computer module typically communicate via an interconnected bus and in a manner which results in a conventional mode of operation of the computer system known to those in the relevant art. Examples of computers on which the described arrangements can be practised include IBM PC s and compatibles Sun Sparcstations or alike computer systems evolved therefrom.

Typically the application program is resident on the hard disk drive and read and controlled in its execution by the processor . Intermediate storage of the program and any data fetched from the network may be accomplished using the semiconductor memory possibly in concert with the hard disk drive . In some instances the application program may be supplied to the user encoded on a CD ROM or floppy disk and read via the corresponding drive or or alternatively may be read by the user from the network via the modem device . Still further the software can also be loaded into the computer system from other computer readable media. The term computer readable medium as used herein refers to any storage or transmission medium that participates in providing instructions and or data to the computer system for execution and or processing. Examples of storage media include floppy disks magnetic tape CD ROM a hard disk drive a ROM or integrated circuit a magneto optical disk or a computer readable card such as a PCMCIA card and the like whether or not such devices are internal or external of the computer module . Examples of transmission media include radio or infra red transmission channels as well as a network connection to another computer or networked device and the Internet or Intranets including email transmissions and information recorded on websites and the like.

The method of converting XML data into SQL tables may alternatively be implemented in dedicated hardware such as one or more integrated circuits performing the processes or sub processes described above with reference to . Such dedicated hardware may include one or more microprocessors and associated memories.

It is apparent from the above that the arrangements described are applicable to any industry that has a need for XML encoded text based data. Examples are the electronic publishing industry document management requirements engineering documents journal articles manuals software and other online help.

The foregoing describes only some embodiments of the present invention and modifications and or changes can be made thereto without departing from the scope and spirit of the invention the embodiments being illustrative and not restrictive.

