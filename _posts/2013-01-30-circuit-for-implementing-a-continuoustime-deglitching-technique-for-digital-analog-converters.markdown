---

title: Circuit for implementing a continuous-time deglitching technique for digital analog converters
abstract: A processor and a circuit implementing a continuous-time deglitching technique for a digital-to-analog converter are disclosed. The circuit includes a digital-to-analog converter having a differential current output, an operational amplifier having an inverting input coupled to a first output of the differential current output and a non-inverting input coupled to a second output of the differential current output, and a transistor coupled to the second output and the output of the operational amplifier. The operational amplifier is configured to operate the transistor to adjust the voltage potential of the second output to substantially match the voltage potential of the first output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08786478&OS=08786478&RS=08786478
owner: NVIDIA Corporation
number: 08786478
owner_city: Santa Clara
owner_country: US
publication_date: 20130130
---
The present invention relates to digital to analog converters DACs and more particularly to deglitching techniques for smoothing DAC output.

When a given DAC is updated to a new digital input code the output of the DAC changes to try and generate the new analog signal. The internal components of the DAC include a plurality of switches i.e. field effect transistors . The effects of switching digital circuits within the DAC to change the analog output signal may cause glitches to occur. Glitches may appear at the DAC output as spikes in voltage. Glitches may be caused by two different mechanisms. First glitches can arise due to capacitive coupling of components within the DAC circuit during transitions of the digital elements. Second glitches can arise due to asynchronous operation of the components e.g. some FETS may turn off slower than the FETs turn on due to mismatches in the rise time and fall time of the FETS and or routing of signals to the FETs . Deglitching techniques have been implemented in some analog circuits to alleviate the effects of glitching. One common technique is to implement a sample and hold circuit coupled to the output of the DAC.

However the conventional sample and hold technique shown in has some associated issues. First the switch must be driven by a voltage level much higher than the analog signal in order to ensure proper operation of the switch . Second a charge injection due to the operation of the switch is still present i.e. capacitive discharge of the transistor may still cause glitches at the input of the Op Amp . Third the Op Amp may introduce noise at the output of the Op Amp . Thus there is a need for addressing this issue and or other issues associated with the prior art.

A processor and a circuit implementing a continuous time deglitching technique for a digital to analog converter are disclosed. The circuit includes a digital to analog converter having a differential current output an operational amplifier having an inverting input coupled to a first output of the differential current output and a non inverting input coupled to a second output of the differential current output and a transistor coupled to the second output and the output of the operational amplifier. The operational amplifier is configured to operate the transistor to adjust the voltage potential of the second output to substantially match the voltage potential of the first output.

The object of the continuous time deglitching technique described below is to ensure minimal voltage difference or ideally no voltage difference on the switching node when the unit cell is switched on and off by suppressing charge sharing between the parasitic capacitors associated with the switched current source and the DAC output.

In one embodiment the DAC is an N bit current steering DAC with differential output. One side of the differential output the non inverting DAC output i.e. V is associated with a non inverting current output i.e. I generated based on the N bit digital input signal. The other side of the differential output the inverting DAC output i.e. is associated with an inverting current output i.e. generated based on an inverted version of the N bit digital input signal. The inverted version of the N bit digital input signal is an N bit value where each bit of the inverted version of the N bit digital input signal is set by inverting a corresponding bit of the N bit digital input signal. In other words the sum of the non inverting current output and the inverting current output of the DAC is constant for every N bit digital input signal. It will be appreciated that voltage potential at the non inverting DAC output i.e. V and the inverting DAC output i.e. are based on the load coupled to the DAC output based on the current output by the DAC . In one embodiment DAC may be a 10 bit current steering DAC with differential output.

The continuous time deglitching technique comprises coupling the non inverting DAC output i.e. V to the inverting input of Op Amp and coupling the inverting DAC output i.e. to the non inverting input of Op Amp . The output of the Op Amp is coupled to the gate of an NMOS transistor . The drain of the NMOS transistor is coupled to the inverting DAC output i.e. and the source of the NMOS transistor is coupled to GND. In operation the Op Amp and the NMOS transistor cause the voltage potential on the inverting DAC output to track the voltage potential on the non inverting DAC output. In an alternative embodiment the continuous time deglitching technique comprises coupling the non inverting DAC output i.e. V to the non inverting input of Op Amp and coupling the inverting DAC output i.e. to the inverting input of Op Amp . It will be appreciated that in either embodiment the Op Amp is implemented as a comparator between the voltage potential of the non inverting DAC output and the inverting DAC output.

Unlike the sample and hold technique illustrated in the continuous time deglitching technique implemented in the circuit doesn t include a switch i.e. FET between the output of the DAC and the analog output signal. Removing switch alleviates issues caused by capacitive discharge of the switch in the conventional sample and hold technique. In addition the noise of the Op Amp does not contribute to the output signal in the deglitching technique because the output signals are only connected to the high impedance inputs of the Op Amp not driven by the output of the amplifier such as with the sample and hold technique employed by the circuit shown in .

The DAC outputs a current I proportional to the N bit digital input on the non inverting DAC output. The voltage potential on the non inverting DAC output V that results is based on the impedance of the load coupled to the non inverting DAC output. Similarly the DAC outputs a current proportional to the inverted version of the N bit digital input on the inverting DAC output. The voltage potential on the inverting DAC output V that would result if not for Op Amp and NMOS transistor is based on the impedance of the load coupled to the inverting DAC output. Thus without Op Amp and NMOS transistor the voltage potential of the differential DAC outputs is dependent on the loads coupled to the differential outputs and would likely be very different causing transient voltages to appear on the DAC outputs when switching between different N bit digital input signals. The Op Amp and the NMOS transistor causes the voltage potential of the inverting DAC output to track the voltage potential of the non inverting DAC output.

As used herein the transistors are coupled directly to a signal if the signal is coupled to the transistor without any intervening logic and the transistors are coupled indirectly to a signal if the signal is coupled to the transistor with intervening logic. Intervening logic may be any type of discrete logic or electrical components such as resistors or capacitors. For example the first PMOS transistor may be connected to the supply voltage indirectly through additional circuit elements that comprise a current source. In another example the first PMOS transistor may be connected to the supply voltage indirectly as a component of a current source sub circuit that is coupled to both the supply voltage and the bias voltage. Similarly the bias voltage may be buffered using an op amp not shown within each unit cell before being connected to the gate of the first PMOS transistor.

DAC is described above for illustrative purposes only. It will be appreciated that other configurations of DAC are contemplated as within the scope of the present disclosure. As long as the DAC includes a non inverting output and an inverting output then the continuous time deglitching technique described above may be implemented to alleviate glitch energy in the non inverting output of the DAC.

It should be noted that while various optional features are set forth herein in connection with the continuous time deglitching technique such features are for illustrative purposes only and should not be construed as limiting in any manner. In one embodiment the circuit described above may be implemented in one or more units of a parallel processing unit.

In one embodiment the PPU includes an input output I O unit configured to transmit and receive communications i.e. commands data etc. from a central processing unit CPU not shown over the system bus . The I O unit may implement a Peripheral Component Interconnect Express PCIe interface for communications over a PCIe bus. In alternative embodiments the I O unit may implement other types of well known bus interfaces.

The PPU also includes a host interface unit that decodes the commands and transmits the commands to the grid management unit or other units of the PPU e.g. memory interface as the commands may specify. The host interface unit is configured to route communications between and among the various logical units of the PPU .

In one embodiment a program encoded as a command stream is written to a buffer by the CPU. The buffer is a region in memory e.g. memory or system memory that is accessible i.e. read write by both the CPU and the PPU . The CPU writes the command stream to the buffer and then transmits a pointer to the start of the command stream to the PPU . The host interface unit provides the grid management unit GMU with pointers to one or more streams. The GMU selects one or more streams and is configured to organize the selected streams as a pool of pending grids. The pool of pending grids may include new grids that have not yet been selected for execution and grids that have been partially executed and have been suspended.

A work distribution unit that is coupled between the GMU and the SMs manages a pool of active grids selecting and dispatching active grids for execution by the SMs . Pending grids are transferred to the active grid pool by the GMU when a pending grid is eligible to execute i.e. has no unresolved data dependencies. An active grid is transferred to the pending pool when execution of the active grid is blocked by a dependency. When execution of a grid is completed the grid is removed from the active grid pool by the work distribution unit . In addition to receiving grids from the host interface unit and the work distribution unit the GMU also receives grids that are dynamically generated by the SMs during execution of a grid. These dynamically generated grids join the other pending grids in the pending grid pool.

In one embodiment the CPU executes a driver kernel that implements an application programming interface API that enables one or more applications executing on the CPU to schedule operations for execution on the PPU . An application may include instructions i.e. API calls that cause the driver kernel to generate one or more grids for execution. In one embodiment the PPU implements a SIMD Single Instruction Multiple Data architecture where each thread block i.e. warp in a grid is concurrently executed on a different data set by different threads in the thread block. The driver kernel defines thread blocks that are comprised of k related threads such that threads in the same thread block may exchange data through shared memory. In one embodiment a thread block comprises 32 related threads and a grid is an array of one or more thread blocks that execute the same stream and the different thread blocks may exchange data through global memory.

In one embodiment the PPU comprises X SMs X . For example the PPU may include 15 distinct SMs . Each SM is multi threaded and configured to execute a plurality of threads e.g. 32 threads from a particular thread block concurrently. Each of the SMs is connected to a level two L2 cache via a crossbar or other type of interconnect network . The L2 cache is connected to one or more memory interfaces . Memory interfaces implement 16 32 64 128 bit data buses or the like for high speed data transfer. In one embodiment the PPU comprises U memory interfaces U where each memory interface U is connected to a corresponding memory device U . For example PPU may be connected to up to 6 memory devices such as graphics double data rate version 5 synchronous dynamic random access memory GDDR5 SDRAM .

In one embodiment the PPU implements a multi level memory hierarchy. The memory is located off chip in SDRAM coupled to the PPU . Data from the memory may be fetched and stored in the L2 cache which is located on chip and is shared between the various SMs . In one embodiment each of the SMs also implements an L1 cache. The L1 cache is private memory that is dedicated to a particular SM . Each of the L1 caches is coupled to the shared L2 cache . Data from the L2 cache may be fetched and stored in each of the L1 caches for processing in the functional units of the SMs .

In one embodiment the PPU comprises a graphics processing unit GPU . The PPU is configured to receive commands that specify shader programs for processing graphics data. Graphics data may be defined as a set of primitives such as points lines triangles quads triangle strips and the like. Typically a primitive includes data that specifies a number of vertices for the primitive e.g. in a model space coordinate system as well as attributes associated with each vertex of the primitive. The PPU can be configured to process the graphics primitives to generate a frame buffer i.e. pixel data for each of the pixels of the display . The driver kernel implements a graphics processing pipeline such as the graphics processing pipeline defined by the OpenGL API.

An application writes model data for a scene i.e. a collection of vertices and attributes to memory. The model data defines each of the objects that may be visible on a display. The application then makes an API call to the driver kernel that requests the model data to be rendered and displayed. The driver kernel reads the model data and writes commands to the buffer to perform one or more operations to process the model data. The commands may encode different shader programs including one or more of a vertex shader hull shader geometry shader pixel shader etc. For example the GMU may configure one or more SMs to execute a vertex shader program that processes a number of vertices defined by the model data. In one embodiment the GMU may configure different SMs to execute different shader programs concurrently. For example a first subset of SMs may be configured to execute a vertex shader program while a second subset of SMs may be configured to execute a pixel shader program. The first subset of SMs processes vertex data to produce processed vertex data and writes the processed vertex data to the L2 cache and or the memory . After the processed vertex data is rasterized i.e. transformed from three dimensional data into two dimensional data in screen space to produce fragment data the second subset of SMs executes a pixel shader to produce processed fragment data which is then blended with other processed fragment data and written to the frame buffer in memory . The vertex shader program and pixel shader program may execute concurrently processing different data from the same scene in a pipelined fashion until all of the model data for the scene has been rendered to the frame buffer. Then the contents of the frame buffer are transmitted to a display controller for display on a display device.

The PPU may be included in a desktop computer a laptop computer a tablet computer a smart phone e.g. a wireless hand held device personal digital assistant PDA a digital camera a hand held electronic device and the like. In one embodiment the PPU is embodied on a single semiconductor substrate. In another embodiment the PPU is included in a system on a chip SoC along with one or more other logic units such as a reduced instruction set computer RISC CPU a memory management unit MMU a digital to analog converter DAC and the like.

In one embodiment the PPU may be included on a graphics card that includes one or more memory devices such as GDDR5 SDRAM. The graphics card may be configured to interface with a PCIe slot on a motherboard of a desktop computer that includes e.g. a northbridge chipset and a southbridge chipset. In yet another embodiment the PPU may be an integrated graphics processing unit iGPU included in the chipset i.e. Northbridge of the motherboard.

As described above the work distribution unit dispatches active grids for execution on one or more SMs of the PPU . The scheduler unit receives the grids from the work distribution unit and manages instruction scheduling for one or more thread blocks of each active grid. The scheduler unit schedules threads for execution in groups of parallel threads where each group is called a warp. In one embodiment each warp includes 32 threads. The scheduler unit may manage a plurality of different thread blocks allocating the thread blocks to warps for execution and then scheduling instructions from the plurality of different warps on the various functional units i.e. cores DPUs SFUs and LSUs during each clock cycle.

In one embodiment each scheduler unit includes one or more instruction dispatch units . Each dispatch unit is configured to transmit instructions to one or more of the functional units. In the embodiment shown in the scheduler unit includes two dispatch units that enable two different instructions from the same warp to be dispatched during each clock cycle. In alternative embodiments each scheduler unit may include a single dispatch unit or additional dispatch units .

Each SM includes a register file that provides a set of registers for the functional units of the SM . In one embodiment the register file is divided between each of the functional units such that each functional unit is allocated a dedicated portion of the register file . In another embodiment the register file is divided between the different warps being executed by the SM . The register file provides temporary storage for operands connected to the data paths of the functional units.

Each SM comprises L processing cores . In one embodiment the SM includes a large number e.g. 192 etc. of distinct processing cores . Each core is a fully pipelined single precision processing unit that includes a floating point arithmetic logic unit and an integer arithmetic logic unit. In one embodiment the floating point arithmetic logic units implement the IEEE 754 2008 standard for floating point arithmetic. Each SM also comprises M DPUs that implement double precision floating point arithmetic N SFUs that perform special functions e.g. copy rectangle pixel blending operations and the like and P LSUs that implement load and store operations between the shared memory L1 cache and the register file . In one embodiment the SM includes 64 DPUs 32 SFUs and 32 LSUs .

Each SM includes an interconnect network that connects each of the functional units to the register file and the shared memory L1 cache . In one embodiment the interconnect network is a crossbar that can be configured to connect any of the functional units to any of the registers in the register file or the memory locations in shared memory L1 cache .

In one embodiment the SM is implemented within a GPU. In such an embodiment the SM comprises J texture units . The texture units are configured to load texture maps i.e. a 2D array of texels from the memory and sample the texture maps to produce sampled texture values for use in shader programs. The texture units implement texture operations such as anti aliasing operations using mip maps i.e. texture maps of varying levels of detail . In one embodiment the SM includes 16 texture units .

The PPU described above may be configured to perform highly parallel computations much faster than conventional CPUs. Parallel computing has advantages in graphics processing data compression biometrics stream processing algorithms and the like.

In one embodiment the continuous time deglitching technique is implemented in a digital phase locked loop PLL in the PPU . illustrates a PLL implemented in PPU in accordance with one embodiment. The PLL includes digital logic that receives a clock input signal CLK . The digital logic tracks the phase of a divided clock signal and generates a digital input code for the DAC . In one embodiment the digital logic includes a plurality of dividers i.e. SDIV FDIV and MDIV for generating a clock output signal CLK that is locked in phase with the clock input signal and may be a different frequency based on the configuration of the dividers of the clock input signal. The digital input code generated by the digital logic causes DAC to output a differential output signal analog current that is coupled to a voltage controlled oscillator VCO . Again although not shown explicitly the differential output signal may be converted from a current level to a voltage level before being transmitted to the VCO . The VCO generates a clock output signal that is routed to a feedback loop in the digital logic block . In one embodiment the PLL includes PLL bypass logic such as a multiplexor that enables the clock input signal to be passed through to the clock output signal.

The digital logic receives the clock input signal at a first divider unit SDIV . The first divider unit may divide the clock by a certain integer e.g. 1 2 or 4 to generate a reference clock signal having a frequency that is a fraction of the input clock signal frequency. The reference clock signal is passed to a frequency detector and a phase detector . The frequency detector and the phase detector also receive the VCO clock output CLK within the feedback loop. The VCO clock output is fed to an N bit counter inside the frequency detector and the output of the counter is updated at the rising edge of the reference clock. At the same time the counter value is evaluated and compared with a pre defined value such that the pre defined value and the value of the counter should be equal in a frequency lock state. The phase detector detects any phase difference between the VCO clock output and the reference clock signal. Any difference in either frequency or phase that is detected between the VCO clock output and the reference clock signal is summed to produce an error signal that is transmitted to a filter . The filter is a low pass filter that removes high frequency disturbances in the error signal. In other words short term error is ignored to avoid thrashing the VCO clock output. The filter is clocked by a version of the VCO clock output that is generated by a second divider FDIV . Thus the filter operates at a slower frequency than the VCO clock output such that the value of the error is changed over a larger timespan than every clock cycle. The filtered error signal is transmitted to a sigma delta unit that accumulates the filtered error signal and adjusts the digital input code for the DAC . The unit is clocked by a version of the VCO clock output that is generated by a third divider MDIV . Thus the unit operates at a slower frequency than the VCO clock output such that the accumulated error is changed over a larger timespan than every clock cycle and independently of the frequency of the filter .

As shown in the differential output of DAC in PLL may be coupled to an Op Amp and NMOS transistor to implement the continuous time deglitching technique described above. The non inverting output of the DAC may then be connected to the input of the VCO . In this manner the PLL is more stable than conventional PLLs due to the absence of large glitch energy being discharged over the non inverting output of the DAC . It will be appreciated that the configuration of PLL is shown for illustrative purposes and that alternative configurations of PLL are within the scope of the present disclosure. In addition the use of DACs is not limited to PLLs within a processor and other types of applications requiring DACs may be implemented with the continuous time deglitching technique described above.

The system also includes input devices a graphics processor and a display i.e. a conventional CRT cathode ray tube LCD liquid crystal display LED light emitting diode plasma display or the like. User input may be received from the input devices e.g. keyboard mouse touchpad microphone and the like. In one embodiment the graphics processor may include a plurality of shader modules a rasterization module etc. Each of the foregoing modules may even be situated on a single semiconductor platform to form a graphics processing unit GPU .

In the present description a single semiconductor platform may refer to a sole unitary semiconductor based integrated circuit or chip. It should be noted that the term single semiconductor platform may also refer to multi chip modules with increased connectivity which simulate on chip operation and make substantial improvements over utilizing a conventional central processing unit CPU and bus implementation. Of course the various modules may also be situated separately or in various combinations of semiconductor platforms per the desires of the user.

The system may also include a secondary storage . The secondary storage includes for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive a compact disk drive digital versatile disk DVD drive recording device universal serial bus USB flash memory. The removable storage drive reads from and or writes to a removable storage unit in a well known manner.

Computer programs or computer control logic algorithms may be stored in the main memory and or the secondary storage . Such computer programs when executed enable the system to perform various functions. The memory the storage and or any other storage are possible examples of computer readable media.

In one embodiment the architecture and or functionality of the various previous figures may be implemented in the context of the central processor the graphics processor an integrated circuit not shown that is capable of at least a portion of the capabilities of both the central processor and the graphics processor a chipset i.e. a group of integrated circuits designed to work and sold as a unit for performing related functions etc. and or any other integrated circuit for that matter.

Still yet the architecture and or functionality of the various previous figures may be implemented in the context of a general computer system a circuit board system a game console system dedicated for entertainment purposes an application specific system and or any other desired system. For example the system may take the form of a desktop computer laptop computer server workstation game consoles embedded system and or any other type of logic. Still yet the system may take the form of various other devices including but not limited to a personal digital assistant PDA device a mobile phone device a television etc.

Further while not shown the system may be coupled to a network e.g. a telecommunications network local area network LAN wireless network wide area network WAN such as the Internet peer to peer network cable network or the like for communication purposes.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

