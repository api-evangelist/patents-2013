---

title: Universal data storage system that maintains data across one or more specialized data stores
abstract: In an embodiment, a method comprises receiving an input defining organization of one or more universal data elements; generating a universal schema that defines organization of the one or more universal data elements based on the input; associating the universal schema with a specialized plug-in, wherein the specialized plug-in maps the one or more universal data elements with data elements in one or more specialized databases maintained by a specialized data store; receiving, from a computer, a request to receive data stored in the specialized data store and comprising parameters based on the universal schema; transforming the request using the specialized plug-in to produce a specialized query; sending the specialized query to the specialized data store to execute the specialized query; receiving a specialized result set from the specialized data store; sending, to the computer, a result set based on specialized result set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430539&OS=09430539&RS=09430539
owner: Netflix, Inc.
number: 09430539
owner_city: Los Gatos
owner_country: US
publication_date: 20131212
---
The present disclosure relates to maintaining data in a distributed database system and relates more specifically to techniques for maintaining a universal data storage system that manages data in one or more specialized data stores.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Different types of databases can organize data differently. For example one database may store its data in a single file. Another database may be a file server that stores millions of files that drastically vary in size. Another database may use a schema to determine how to save data in a space efficient way. Another database may store its data as a string. Others may vary with respect to maximum table size or minimum latency time. Each database may have advantages that a particular user may find useful for particular problem.

Some users try to anticipate the features that will be most important to them for a given solution and select a familiar database that they think will best satisfy their problem. However as a user s system grows the user may switch to a different database and or use more than one type of database. To use the features of a different second database a user may first need to learn the details and complexities of using the second database and copy data from the first database to the second. However copying data between databases is time consuming and prone to error. For example a one database may store each value in the database as a text string in a single file which is fundamentally different than another database that stores data in a plurality of files and formats based on a proprietary schema and syntax. Accordingly to copy data stored from one database to another a user may be required to develop complex proprietary software.

After transferring data to a new database a user may need to a different set of commands to interface with the new database. For example if a user copies data from a Structured Query Language SQL database to a non SQL based database then then the user may need to learn a completely new set of commands to interface with the new database. Even among databases that are SQL based databases schemas and SQL syntax can be different. Furthermore the result returned by the second database may be in a different format.

While each of the drawing figures illustrates a particular embodiment for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

A computer may be one or more physical computers virtual computers and or computing devices. As an example a computer may be one or more server computers virtual machine instances or virtual machine computing elements such as virtual processors storage and memory data centers storage devices desktop computers laptop computers mobile devices and or any other special purpose computing devices. Any reference to a computer herein may mean one or more computers unless expressly stated otherwise.

A database may be an organized collection of data defined by one or more schemas. An example of a database includes a flat file database a file system and or a relational database.

A database schema may define how a database is structured and the data structures and or data elements in a database. A database schema may define tables fields relationships views indexes packages procedures functions queues triggers data types sequences materialized views synonyms database links directories credentials for authorizing users to perform one or more operations and or any other data that defines a database.

A type of database may be a database that has a particular interface data structure file structure storage system schema format protocol and or any other particular technical feature or property. As an example two databases may be the same type of databases if both databases have the same interface data structure file structure storage system schema format protocol and or any other uniform technical aspect. Two databases may be different types of databases if the databases differ based on interface data structure file structure schema format protocol and or any other particular technical feature or property. Thus a relational database may be a different type of database than a file system a SQL database may be a different type of database than a non SQL database and a SQL database that that stores data in a single flat file may be a different type of database than a SQL database that stores data in multiple files.

A data store may be a data repository that maintains one or more databases. As an example a data store may include an interface to maintain one or more databases. Additionally a data store may comprise one or more processes executed on a computer. As an example a data store may include one or more processes that receive requests process the requests and store data in and or return data from one or more databases the data store maintains.

A specialized data store means a data store that maintains data in one or more databases each of which is the same type of database. As an example a SQL data store may be a specialized data store if each of the databases maintained by the SQL data store is the same type of SQL database.

A universal data store may be a data store that manages or maintains one or more databases maintained at least in part by a plurality of specialized data stores of the same or different types. As an example a universal data store may maintain two databases the data in the first database may be stored in a first specialized database maintained by a first specialized database the data in the second database may be stored in a second specialized database maintained by a second specialized database.

A universal database may be a database managed or maintained by a universal data store which stores data in one or more specialized databases. As an example a universal database may include two tables. The data in the first table may be maintained by a specialized database in a first specialized data store. The data in the second table may be maintained by a specialized database in a second specialized data store.

 Getting data from a universal database may mean getting data from the one or more specialized databases that include the data for the universal database.

 Storing data in a universal database may mean storing data in the one or more specialized databases that include the data for the universal database.

A universal schema may be a database schema for a universal database. A universal schema may define the data structures in a universal database. A universal schema may specify which data in a universal database is stored and or maintained in which specialized database s and or which specialized data store s . A universal schema may specify the type of each specialized database and or data store that maintains data in a universal database. Additionally or alternatively as discussed in detail below a universal schema may specify one or more plug ins and or one or more triggers to use.

A request based on a universal schema or a universal request may be a request received by a request that specifies data to be stored and or retrieved based on the data structures defined in the universal schema. For purposes of illustrating a clear example assume that a universal schema identifies a table with a first column called Column  and a second column called Column . A request based on the universal schema may request the data in Column  for each record with a particular value stored in Column .

A result based on a universal schema or a universal result may be a result that identifies data based on a universal schema. For purposes of illustrating a clear example assume that a universal schema identifies a table named Table 1 with a first column named Column  and a second column name Column . A result that is based on the universal schema may include data that may be identified as either in belonging to Table 1 and specifically Column  or Column  .

A specialized query may be one or more operations to be executed by a specialized data store. A specialized query may be generated by a universal data store to store or retrieve data in a specialized database.

A specialized result may be a result that is generated by a specialized data store and or specialized database.

A plug in may be a set of one or more configuration files and or operations that define rules and or instructions for a universal data store to transform universal requests to a specialized query for a specialized data store. Additionally a plug in may define how specialized results from a specialized data store should be transformed into a universal result. As an example a plug in may be one or more scripts and or one or more executable files that implement a protocol. The protocol may include a method for each type of universal request such as a request to create read update and or delete a universal database a table in a universal database and or data in a universal database and transform. Accordingly each method in the protocol may transform a type of universal request into a specialized query for a specialized data store. Additionally or alternatively the protocol includes a method for transforming data retrieved from a specialized data store into a universal result. Additionally or alternatively a protocol may include one or more configuration files that define how a universal schema maps to a database schema for a specialized database in a specialized data store. As an example a plug in may map universal databases tables columns and entries to SQL based databases tables columns and entries. As another example a plug in may map universal databases tables columns and entries to a file system directory sub directories file names and data stored in a files.

A trigger may be one or more instructions operations and or commands that are performed in response to one or more conditions. For example a trigger may include a condition that is satisfied if a universal request performs a particular operation or includes a particular parameter. Additionally or alternatively a trigger may include a condition that is satisfied if a universal request is based on a particular universal schema. Additionally or alternatively a trigger may include a condition that is satisfied in a universal result includes particular data or quantity of data. As an example if a universal result includes an image then a trigger that converts the image to a particular format may be executed. As another example if the size of the universal result is greater than a particular threshold then a trigger that compresses the universal result may be executed.

A built in trigger may be a trigger that is defined by a universal data store and is available to for any universal database user to use. For example a universal data store may include a built in trigger that copies data to a second specialized database in response to receiving a request that causes data to be stored in a first specialized database.

A custom trigger may be a trigger that is created by a user and is uploaded to a universal data store through a client computer. For example a user may upload a custom trigger to a universal data store that causes results to be formatted in a particular format in response to a request for data from a universal database that the user manages and that includes a particular parameter.

In an embodiment a method comprises receiving a first input defining organization of one or more universal data elements generating a first universal schema that defines organization of the one or more universal data elements based on the first input associating the first universal schema with a first specialized plug in wherein the first specialized plug in maps the one or more universal data elements with data elements in one or more specialized databases maintained by a first specialized data store receiving from a first computer a first request to receive data stored in the first specialized data store and comprising parameters based on the first universal schema transforming the first request using the first specialized plug in associated with the first universal schema to produce a specialized query sending the specialized query to the first specialized data store to execute the specialized query receiving a first specialized result set from the first specialized data store sending to the first computer a result set based on specialized result set. In an embodiment the method comprises receiving the first request from the first computer in an HTTP request sending the result set to the first computer using an HTTP response. In an embodiment the method comprises transforming the first specialized result set to produce the result set using the first specialized plug in wherein the result set is formatted based on the first universal schema.

In an embodiment the method comprises associating a first universal schema with a second specialized plug in transforming the first request using the first specialized plug in associated with the first universal schema to produce a first specialized query to retrieve a first set of results from the first specialized data store wherein the first specialized query comprises one or more instructions that are compatible with the first specialized data store transforming the first request using the second specialized plug in associated with the first universal schema to produce a second specialized query to retrieve a second set of results from a second specialized data store wherein the second specialized query comprises one or more instructions that are compatible with the second specialized data store wherein the second specialized query is different than the first specialized query receiving the first specialized result set from the first specialized data store based on the first specialized query receiving a second specialized result set from the second specialized data store based on the second specialized query transforming the first specialized result set to a first universal result set wherein the first universal result set is based on the first universal schema transforming the second specialized result set to a second universal result set wherein the second universal result set is based on the first universal schema joining the first universal result set and the second universal result set to produce the result set which is a universal result set that is based on the first universal schema.

In an embodiment a method comprises receiving an input defining organization of one or more universal data elements generating a universal schema that defines organization of the one or more universal data elements based on the input associating the universal schema with a first specialized plug in wherein the first specialized plug in defines how the one or more universal data elements are organized in a first specialized data store receiving a command to copy data in the first specialized data store to a second specialized data store associating the universal schema with a second specialized plug in wherein the second specialized plug in defines organization of the one or more universal data elements in the second specialized data store generating a first request to receive a set of data from the first specialized data store transforming the first request using the first specialized plug in to produce a first specialized query sending the first specialized query to the first specialized data store to execute the first specialized query receiving a specialized result set from the first specialized data store transforming the specialized result set using the first specialized plug in to produce a universal result set wherein the universal result set is formatted based on the universal schema generating a second specialized query using the second specialized plug in to store the universal result set in the second specialized data store sending the second specialized query to the second specialized data store.

Universal data store is a universal data store that is executed on universal data store server computer . Universal data store is communicatively coupled to client computer specialized data store and specialized data store through universal data store server computer .

Universal data store may maintain one or more universal databases according to the methods discussed herein. For example in universal data store computer is a universal data store that maintains two universal databases defined by two universal schemas universal schema and universal schema . The data in the universal databases are maintained across one or more specialized data stores specialized data store and specialized data store .

In universal data store and universal schema repository plug in repository trigger repository and transformer are illustrated on universal data store server computer . However universal data store and each of its components may be distributed across more than one computer and or one or more remote networks. In an embodiment each of the functional units of universal data store may be implemented using any of the techniques described herein in connection with for example the universal data store may comprise a general purpose computer configured with one or more stored programs which when executed cause performing the functions described herein for the universal data store or a special purpose computer with digital logic that is configured to execute the functions or digital logic that is used in other computing devices.

A universal schema repository may store one or more universal schemas. For example in universal schema repository includes universal schema and universal schema . Universal schema defines a first universal database maintained by universal data store . Universal schema defines a second universal database maintained by universal data store .

A plug in repository may store one or more plug ins. For example in plug in repository includes plug in and plug in . Plug in may define one or more rules and or instructions to transform a universal request into a specialized query that may be executed by specialized data store . Plug in may define one or more rules and or instructions to transform specialized results received from specialized data store to a universal result based on a universal schema. Additionally plug in may define the type s of specialized database s that plug in may be useful for.

A trigger repository may store one or more triggers. For example trigger repository includes trigger . Trigger may be either a built in trigger or a custom trigger.

As discussed herein transformer may transform universal requests into specialized queries and or specialized results into universal results using one or more plug ins from plug in repository . Additionally or alternatively and as discussed herein transformer may execute one or more triggers in trigger repository if conditions for the one or more triggers are satisfied.

In an embodiment transformer may associate a universal schema in universal schema repository with a plug in in plug in repository . For purposes of illustrating a clear example assume the following facts 

Accordingly transformer may update universal schema to indicate that transformer should use plug in for universal requests or specialized results related to the universal database that universal schema defines. Additionally or alternatively transformer stores a mapping between a universal schema and one or more plug ins. Additionally or alternatively transformer dynamically determines which plug in to use for each request and or each result.

A universal data store may receive and respond to universal requests from one or more client computers over a protocol such as Hypertext Transfer Protocol HTTP or any subset of HTTP such as Hypertext Transfer Protocol Secure HTTPS . For example a universal data store may receive create read update and or delete CRUD requests to create read update and or delete one or more universal databases and or data in the one or more universal databases through a web service such as a Representational State Transfer REST application programming interface API or Simple Object Access Protocol SOAP API. Additionally a universal data store may perform one or more complex operations such as joins or triggers. Additionally or alternatively a universal data store may copy data maintained in a first specialized data store to a second specialized data store.

In an embodiment a REST API is based at least in part on the HTTP operations POST GET PUT and DELETE. Each of the four operations may be associated with a CRUD request Create may be associated with POST Read may be associated with GET Update may be associated with PUT and Delete may be associated with DELETE. Accordingly in an embodiment a universal data store may perform one or more CRUD operations and or methods in response to a universal request with a Uniform Resource Locator URL and an HTTP operation.

A universal data store may receive a request to create update and or delete a universal database. illustrates a process for creating updating and or deleting a universal database in an example embodiment. For purposes of illustrating a clear example may be described with reference to but using the particular arrangement illustrated in is not required in other embodiments.

In step a universal data store receives a request to create update or delete a universal database from a client computer. For example universal data store may receive a POST request over HTTP from a user through client computer . The request may define a new universal database named Shop Customers and a table named Customers with two columns named Customer Name and Customer Number. The request may indicate the values in the column Customer Name are strings and the values in the column Customer Number are integers. The request may also specify the specialized data store that should maintain the data in the universal database 172 . The request may identify the specialized data store may name 172 by the Internet Protocol IP address of specialized data store and or the type of databases maintained by specialized data store .

In step the universal data store generates a specialized query. For example universal data store forwards the request to transformer . For purposes of illustrating a clear example assume that plug in indicates that it is a plug in for the same type of databases that specialized data store maintains. Accordingly transformer may determine to use plug in and may call a method in plug in passing the request received in step as a parameter. For purposes of illustrating a clear example assume that specialized data store maintains a SQL based database. Accordingly transformer may use plug in to transform the request into a specialized query that includes one or more SQL based queries to generate a specialized database in specialized data store with a table and two columns as defined in the request.

Among other things plug in may mangle the names of the objects in the request. For purposes of illustrating a clear example assume the request to create the universal database includes a user identifier . Instead of returning a specialized query that creates a database with the name Store Customers plug in may return a specialized query that creates a database with the name Store Customers . Furthermore assume that the specialized database requires that each character in an object name is a lower case character. Accordingly instead of returning a specialized query that creates a database with the name Store Customers plug in may return a specialized query that creates a database with the name s tore c ustomers . 

In step the universal data store executes the specialized query creates updates or deletes a specialized database and generates a specialized result. For example transformer may send the specialized query to specialized data store to be executed. Accordingly specialized data store generates the specialized database and a table according to the specialized query.

In step the universal data store determines whether the specialized query was successfully executed. For example specialized data store sends a specialized result to transformer that indicates whether the specialized query was successfully executed. Transformer uses plug in to evaluate the specialized result. If transformer using the plug in determines that the specialized query was successfully executed then control proceeds to step . Otherwise control proceeds to step .

In step the universal data store generates updates or deletes a universal schema. For example universal data store may create universal schema . Universal schema may define a universal database named Store Customers with a table named Customers with two columns named Customer Name and Customer Number. Universal schema may define the types of values in each column. For example universal schema may define the values in the column Customer Name as character strings and the values in the column Customer Number integers. Universal schema may include the IP address or other connection information for specialized data store . Universal schema may define the type of databases maintained by the specialized data store . Universal schema may include a reference to use plug in .

In step the universal data store sends a result to the client computer. For example if transformer through the plug in determines that the query was executed successfully then universal data store may return a successful response to client computer according an HTTP protocol such as success code . Otherwise universal data store may return a failed response to client computer according to an HTTP protocol such as error code .

Steps similar to step through step may be used to update or delete a universal database. For example universal data store may receive a PUT request with the user identifier to update the name of the first column Customer Name to Customer Company Name. Additionally or alternatively universal data store may receive a DELETE request with the user identifier to delete the table named Customers. In either example universal data store may use transformer to transform the request into a query for specialized data store using plug in and send the query to specialized data store . Specialized data store may return a result to transformer . Transformer may use plug in to evaluate the results of the query. If the query results indicate the query was successful universal data store may update or delete universal schema accordingly and return a successful response such as code to client computer . Otherwise universal data store may return failed response such as code to client computer .

A universal data store may receive universal request to create read update and or delete data in a universal database. illustrates a process for receiving a request to create read update or delete data from a universal database in an example embodiment. For purposes of illustrating a clear example may be described with reference to but using the particular arrangement illustrated in is not required in other embodiments.

In step a universal data store receives a universal request from a client computer. For purposes of illustrating a clear example assume the following facts 

Accordingly universal data store may receive a GET request over HTTP from a user using client computer for the names of the clients in the table named Customers stored in the universal database named Shop Customers . Additionally or alternatively the request may include an identifier that identifies universal schema .

In step the universal data store transforms the universal request to produce a specialized query. For example transformer may determine to use plug in based on the reference to plug in in universal schema . Additionally or alternatively transformer may determine to use plug in based on a method similar to the methods described in step of . Accordingly transformer may call a method in plug in passing the request received in step as a parameter. Plug in may return a specialized query that includes one or more SQL based queries to return the data requested.

As discussed above with regard to plug in may mangle the names of the objects in the request. For example the specialized query may include the specialized data base name s hop c ustomers. 

In step the universal data store sends the specialized query to the specialized data store. For example transformer may send the specialized query to specialized data store .

In step the universal data store receives a specialized result from the specialized data store. For example specialized data store executes the specialized query sent in step and sends a specialized result to transformer . For purposes of illustrating a clear example assume the specialized result includes the names Bob and Jim. The specialized result may be based on a database schema stored and maintained in the specialized database and or specialized data store . Accordingly the specialized result may include the specialized database name table name and column name s hop c ustomers c ustomers and c ustomer n name .

In step the transformer transforms the specialized result into a universal result. Accordingly transformer uses plug in to transform the specialized result into a universal result based on universal schema . Additionally the universal result may be encoded into format that is capable of communication over HTTP and capable of interpretation by a browser such as JavaScript Object Notation JSON Shop Customers Customers Customer Name Bob Jim . However the universal result need not be in JSON format. The universal result may be in any format such as Extensible Markup Language and or any other standardized or proprietary format.

In step the universal data store sends the universal result to the client computer. For example universal data store may send the universal result produced in step to remote client computer over HTTP. However universal data store may send the universal result over one or more other protocols such as HTTPS Secure Shell or any other standard or proprietary protocol.

Steps similar to step through step may be used to create update and or delete data from a universal database. For example universal data store may receive a POST request to create or insert data in a universal database. The request may include parameters that correspond to data in universal schema 

Also for example universal data store may receive a PUT request to update data in a universal database. The request may include parameters that correspond to data in universal schema 

Also for example universal data store may receive a DELETE request to remove or delete data from a universal database. The request may include parameters that correspond to data in universal schema 

A universal data store may perform additional transformations on universal results before sending the universal results to a client computer. For example a universal data store may transform the strings in a universal format from ASCII encoded characters to 16 bit Unicode Transformation Format encoded characters. Also for example a client computer may request the universal data store join results from a first universal result and a second universal result. The joined first and second universal result may be a product of one or more universal requests.

In step a universal data store receives a request with parameters based on a universal schema from a client computer to join results from two tables each with data stored in a different specialized data store. For example universal data store may receive request from a user using client computer with the following parameters 

In step the universal data store transforms the universal request to produce a first specialized query for the first data store using a first plug in identified in the universal schema. For example transformer using plug in which is associated with the first table in universal schema may transform the request into a first specialized query to be executed by specialized data store . The first specialized query may request both the customer number and the customer name where the customer number matches 54321 .

In step the universal data store transforms the request to produce a second specialized query for the second data store using a second plug in identified in the universal schema. For example transformer using plug in which is associated with the second table in universal schema may transform the request into a second specialized query to be executed by specialized data store . The second specialized query may request both the customer number and the customer photo where the customer number matches 54321 .

In step the universal data store sends the first specialized query to the first specialized data store and the second specialized query to the second specialized data store. For example transformer may send the first specialized query to specialized data store . Transformer may send the second specialized query to the specialized data store .

In step the universal data store receives a first specialized result from the first specialized data store and a second specialized result from the second specialized data store. For example specialized data store and specialized data store may execute the specialized queries sent in step respectively. Accordingly specialized data store may send the first specialized results to transformer which include a customer number and a customer name 54321 and Bob . Specialized data store may send the specialized results to transformer which include the photo named 54321.png . Accordingly transformer receives both the first specialized result and the second specialized result.

In an embodiment universal schemas may specify that one or more columns in one or more tables are indexed. Accordingly specialized databases may have one or more columns in one or tables that are indexed. For example transformer may use plug in to generate a specialized query for specialized data store to index data in the column that corresponds to the Customer Number column in the universal database. If a universal database stores data in a specialized database that is a file system indexed columns in the universal database may correspond to directories sub directories and file names the data in columns in the universal database that are not indexed may be stored in a file.

In step the universal data store transforms the first specialized result into a first universal result and the second specialized result into a second universal result. For example transformer may transform the first specialized result into a first universal result using one or more of the methods discussed above. Transformer may transform the second specialized result into a second universal result using one or more of the methods discussed above. The image in the second universal result may be a textual representation of the binary data that comprises 54321.png encoded into JSON format. Additionally or alternatively the second universal result may include data that represents image 54321.png in a Portable Pixel Map format either in binary or plain text.

In step the universal data store joins the first universal result and the second universal result. For example transformer may join the first universal result and the second universal result generated in step into a combined universal result in JSON format based on the customer identifier 54321 to produce a joined universal result.

In step the universal data store sends the joined universal result to the remote client computer. For example universal data store sends the joined universal result in step to client computer over HTTP.

In step the universal data store receives a universal request from a client computer. For purposes of illustrating a clear example assume universal data store receives a universal request based on universal schema and that the universal request includes the parameter XML .

In step the universal data store processes the universal request to produce a universal result. For example universal data store may processes the universal request according to one or more of the methods discussed above which produces a universal result in JSON format.

In step the universal data store determines whether a trigger should be applied to the universal result. If so then control proceeds to step . Otherwise control proceeds to step . In the current example after generating the universal result transformer may determine that the universal request was based on universal schema and that the universal request includes the parameter XML . According control proceeds to step .

In step the universal data store applies the trigger. For example transformer executes trigger and transforms the universal result format from JSON into the proprietary XML format.

In step the universal data store sends the universal result to the client computer. For example universal data store sends the universal result to client computer .

Accordingly in response to receiving a universal request to store data in the universal database defined by universal schema transformer may execute trigger causing the data in the universal request to be replicated in specialized data store .

Transformer need not immediately execute trigger . Instead transformer may store a job in a job queue. The job may comprise the universal results to be replicated and a reference to trigger . Transformer may perform the job when the job reaches the top of the job queue and or transformer is not otherwise busy performing other transformations.

The job queue may be a priority queue that orders jobs based on an assigned priority. In the current example trigger replicates data which may not be a critical operation necessitating a high priority. Accordingly trigger may include data that specifies a lower priority and a job that references trigger may be assigned the lower priority. Additionally or alternatively a universal request may include a priority. Accordingly a job that is created in response to a universal request may be assigned the priority indicated in the universal request.

Transformer may enqueue one or more universal requests into the job queue. Additionally each request enqueued in the job queue may be assigned a priority. Additionally or alternatively transformer may maintain a separate job queue for universal requests that is separate from the job queue for triggers.

Steps similar to the steps illustrated in may be used for built in triggers. For example instead of universal data store receiving a custom trigger in step universal data store may receive a request to execute a built in trigger stored in trigger repository upon one or more specified conditions. In response to a universal request that satisfies the conditions universal data store may perform step through step as discussed above using the built in trigger.

A universal data store may support copying data from a specialized database in a first data store to another database in a different data store. illustrates a process for copying data from a first specialized data store to a second specialized data store maintains databases that are a different type than the databases maintained by the first specialized data store in an example embodiment. For purposes of illustrating a clear example may be described with reference to and the following structure and operations but neither the particular arrangement illustrated in nor the following structure or operations are required in other embodiments 

Turning now to in step a universal data store receives a universal request to copy data from a first specialized data store to a second specialized data store. For example universal data store may receive a universal request to copy the data form the universal database described by universal schema into a database maintained by specialized data store .

In step the transformer generates and sends a specialized query to receive the data maintained by the first specialized data store. For example transformer using plug in may generate a specialized query to retrieve the data in the universal database that is maintained by specialized data store using one or more of the methods discussed above.

In step the transformer receives a specialized result from the first specialized data store and transforms the result into a universal result. For example transformer may receive the data requested in step and transform the data into a universal result using plug in and one or more of the methods discussed above.

In step the transformer generates and sends a specialized query to store the universal result in the second specialized data store. For example transformer may use one or more of the methods discussed above to create a new database maintained by specialized data store using plug in update universal schema and or generate universal schema . Transformer may also use one or more of the methods discussed above to transform the universal request into a specialized query to store the universal result in the new database maintained by specialized data store .

For purposes of illustrating a clear example the steps in are illustrated as if all the data in a first database is retrieved from a first data store before storing the data in a second database in a second data store. Alternatively the data in the first database may be retrieved in segments. As each segment is retrieved the transformer transforms and stores the segment in the second database maintained by the second data store incrementally. Accordingly step and step may be executed at least in part in parallel.

For large databases copying data from a first specialized database maintained by a first data store to a second database maintained by a second data store may take a considerable time. Meanwhile requests to store new data in the first database be received and executed. Accordingly using one or more of the methods discussed above a trigger may be used to replicate new data stored in the first database to the second database in the second data store.

Steps similar to the steps illustrated in may be used to copy data from a first database into a second database that is the same type of database as the first database. For example using one or more of the methods discussed above data from a first database may be stored in a second database maintained by the same data store. Additionally or alternatively using one or more of the method discussed above data from a first database maintained by a first data store may be stored in a second database maintained by a second data store even if the first data store and the second data store maintain the same type of databases.

Universal schema may reference each specialized data store used to maintain the data for universal database . For purposes of illustrating a clear example assume that specialized data store maintains the data for universal database . Accordingly universal schema may maintain a reference to specialized data store specialized data store reference .

Specialized data store may be a data store that maintains column oriented databases. For example specialized data store may maintain specialized database which may include column and column . Specialized database may define a column family that groups column and column together column family which may correspond to universal table in universal database .

Universal schema may reference each plug in in plug in repository that transforms a universal request based on universal schema and or universal database into a specialized query to store and or retrieve data in a specialized data store. For purposes of illustrating a clear example assume plug in may transform universal requests into specialized queries for specialized data store . Accordingly universal schema may maintain a reference to plug in plug in reference .

In an embodiment using one or more of the methods discussed herein in response to a universal request to create universal table with column and column plug in may transform the universal request into a specialized query which when executed by specialized data store causes specialized data store to create column and column in specialized database . The specialized query may also indicate that column and column are in the same column family column family .

In an embodiment using one or more of the methods discussed herein in response to a universal request to retrieve data from universal table based on values in column plug in may transform the universal request into a specialized query. The specialized query when executed by specialized data store may cause specialized data store to retrieve specialized results from column and column based on values in column . The retrieved specialized results may be based on the columns within column family column and column . Plug in may transform the specialized results based on column and column into universal results based on universal table column and column .

In an embodiment a user may use one or more of the methods discussed herein to store data in specialized databases that the user is not familiar with or would otherwise not know how to interface with. For example a user may be familiar with SQL based databases but not non SQL based databases or even a particular type of SQL based databases. However a user may specify in a universal request that the user wants to store data in a non SQL based database using a plug in that is already stored in the universal plug in repository. Furthermore the user may receive universal data regardless of the one or more specialized databases the requested data is stored in. Accordingly a user may start using and taking advantage of a particular database in a particular data store without learning a proprietary query language or a different results format.

In an embodiment a developer may use one or more of the methods discussed herein to write software that sends universal requests to and receives universal results from a universal data store even though the data is maintained in more than one type of database in more than one specialized data store. In an embodiment a developer may use uniform end points to perform one or more of the operations discussed herein on data maintained by more than one specialized data store. Accordingly in an embodiment even as the complexity of a developer s software grows which may cause data to be maintained in more than one specialized data store the developer need not be aware of the more than one specialized databases. Furthermore in an embodiment the application need not be programmed to interface directly with a specialized data store and or specialized database. Accordingly in an embodiment using one or more of the methods discussed herein a developer may create an application that leverages the benefits of more than one specialized database.

In an embodiment using one or more of the methods discussed herein a universal data store may perform a join of data maintained in two different specialized data stores without a requester being aware the data joined was stored in more than one specialized data store and or specialized database. In an embodiment the result of a join may cause a trigger to be executed without a requester being aware that the data joined was stored in more than one specialized data store and or specialized database because the trigger is performed on the joined universal result.

In an embodiment a user may use one or more of the methods discussed above to copy data from a first specialized database to a second specialized database that is a different type of database than the first database. The user need not create complex proprietary software to copy data from the first specialized database to the second specialized database.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

1. A method comprising receiving a first input defining organization of one or more universal data elements generating a first universal schema that defines organization of the one or more universal data elements based on the first input associating the first universal schema with a first specialized plug in wherein the first specialized plug in maps the one or more universal data elements into data elements a specialized database in a first specialized data store receiving from a first computer a first request to receive data stored in the first specialized data store and comprising parameters based on the first universal schema transforming the first request using the first specialized plug in associated with the first universal schema to produce a specialized query sending the specialized query to the first specialized data store to execute the specialized query receiving a first specialized result set from the first specialized data store sending to the first computer a result set based on specialized result set wherein the method is performed by one or more second computers.

2. The method of clause 1 comprising receiving the first request from the first computer in an HTTP request sending the result set to the first computer using an HTTP response.

3. The method of clause 1 2 wherein the first request is a write request that includes a payload and the method comprises storing the payload in the first specialized data store according to the first specialized plug in.

4. The method of clause 1 3 wherein the first request is an update request that includes a payload and the method comprises storing the payload in the first specialized data store according to the first specialized plug in.

5. The method of clause 1 4 wherein the first request is a delete request and the method comprises deleting data from the first specialized data store according to the first specialized plug in.

6. The method of clause 1 5 wherein the first request is a read request the first specialized data store includes a specialized schema that defines organization in the first specialized data store of one or more data elements that correspond to the one or more universal data elements and the first specialized result set is formatted based the specialized schema and the method comprises transforming the first specialized result set to produce the result set using the first specialized plug in wherein the result set is formatted based on the first universal schema.

7. The method of clause 1 6 comprising receiving a second input defining how one or more second universal data elements are organized generating a second universal schema that defines how the one or more second universal data elements are organized associating the second universal schema with a second specialized plug in wherein the second specialized plug in defines how the one or more universal data elements are organized in a second specialized data store receiving a second request with parameters based on the first universal schema to receive data stored in the second specialized data store transforming the second request using the second specialized plug in associated with the second universal schema to produce a second specialized query sending the second specialized query to the second specialized data store to execute the second specialized query receiving a second specialized result set from the second specialized data store transforming the second specialized result set to produce a second universal result set using the second specialized plug in wherein the second universal result set is formatted based on the second universal schema sending the second universal result set to the remote client computer that the second request was received from.

8. The method of clause 1 7 comprising receiving a second input defining how one or more second universal data elements are organized generating a second universal schema that defines how the one or more second universal data elements are organized associating the second universal schema with a second specialized plug in wherein the second specialized plug in defines how the one or more universal data elements are organized in a second specialized data store receiving the first request with parameters based on the first universal schema and the second universal schema to receive data stored in the first specialized data store and the second specialized data store transforming the first request to produce a second specialized query using the second specialized plug in sending the second specialized query to the second specialized data store to execute the second specialized query receiving a second specialized result set from the second specialized data store transforming the first specialized result set to a first universal result set using the first specialized plug in wherein the first universal result set is formatted based on the first universal schema transforming the second specialized result set to a second universal result set using the second specialized plug in wherein the second universal result set is formatted based on the second universal schema joining the first specialized result set and the second specialized result set to produce the result set.

9. The method of clause 1 8 comprising receiving second input defining one or more operations to perform on a universal result set if the first request includes a particular parameter receiving the first request with the particular parameter transforming the first specialized result set to the universal result set using the first specialized plug in performing the one or more operations on the universal result set to produce the result set.

10. The method of clause 1 9 comprising receiving an instruction to replicate new data sent to the first specialized data store to a second specialized data store wherein the first specialized data store and the second specialized data store are a same type of data store determining that the first request is not a read request and in response sending the specialized query to the second specialized data store.

11. The method of clause 1 10 comprising receiving an instruction to replicate new data sent to the first specialized data store to a second specialized data store wherein the first specialized data store is a different type of data store than the second specialized data store and in response associating the first universal schema with a second specialized plug in wherein the second specialized plug in defines how the one or more universal data elements are organized in the second specialized data store determining that the first request is not a read request and in response transforming the first request using the second specialized plug in associated with the first universal schema to produce a second specialized query sending the second specialized query to the second specialized data store to execute the second specialized query.

12. The method of cause 1 11 comprising associating the first universal schema with a second specialized plug in transforming the first request using the first specialized plug in associated with the first universal schema to produce a first specialized query to retrieve a first set of results from the first specialized data store wherein the first specialized query comprises one or more instructions that are compatible with the first specialized data store transforming the first request using the second specialized plug in associated with the first universal schema to produce a second specialized query to retrieve a second set of results from a second specialized data store wherein the second specialized query comprises one or more instructions that are compatible with the second specialized data store wherein the second specialized query is different than the first specialized query receiving the first specialized result set from the first specialized data store based on the first specialized query receiving a second specialized result set from the second specialized data store based on the second specialized query transforming the first specialized result set to a first universal result set wherein the first universal result set is based on the first universal schema transforming the second specialized result set to a second universal result set wherein the second universal result set is based on the first universal schema joining the first universal result set and the second universal result set to produce the result set which is a universal result set that is based on the first universal schema.

13. The method of clause 1 12 comprising associating the first universal schema with the first specialized plug in which defines one or more methods for transforming a universal request into one or more specialized queries that create read update and delete one or more data items in the first specialized data store.

14. A method comprising receiving an input defining organization of one or more universal data elements generating a universal schema that defines organization of the one or more universal data elements based on the input associating the universal schema with a first specialized plug in wherein the first specialized plug in defines how the one or more universal data elements are organized in a first specialized data store receiving a command to copy data in the first specialized data store to a second specialized data store associating the universal schema with a second specialized plug in wherein the second specialized plug in defines organization of the one or more universal data elements in the second specialized data store generating a first request to receive a set of data from the first specialized data store transforming the first request using the first specialized plug in to produce a first specialized query sending the first specialized query to the first specialized data store to execute the first specialized query receiving a specialized result set from the first specialized data store transforming the specialized result set using the first specialized plug in to produce a universal result set wherein the universal result set is formatted based on the universal schema generating a second specialized query using the second specialized plug in to store the universal result set in the second specialized data store sending the second specialized query to the second specialized data store wherein the method is performed by one or more second computers.

15. A non transitory computer readable data storage medium storing one or more sequences of instructions which when executed cause one or more processors to perform any of the methods recited in clauses 1 10.

16. A computer program product including instructions which when implemented on one or more processors carries out any of the methods recited in clauses 1 10.

17. A computing device having a processor configured to perform any of the methods recited in clauses 1 10.

