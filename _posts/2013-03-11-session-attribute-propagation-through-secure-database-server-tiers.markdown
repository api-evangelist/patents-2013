---

title: Session attribute propagation through secure database server tiers
abstract: Mechanisms are provided for handling a database client request. An encrypted database client request (DCR) is received, by an unsecure access local agent, from a client computing device as part of a session between the client computing device and a database data processing system. The unsecure access local agent retrieves a database session information (DSI) address corresponding to the session and generates a first unique identifiable key (UIK) based on a portion of the encrypted DCR. The unsecure access local agent generates a DSI mapping data structure that maps the first UIK to the DSI address. A secure access local agent of the database data processing system processes the encrypted DCR using the DSI mapping data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043593&OS=09043593&RS=09043593
owner: International Business Machines Corporation
number: 09043593
owner_city: Armonk
owner_country: US
publication_date: 20130311
---
The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for propagating session attributes through secure database server tiers.

Modern managed information environments are injecting ever increasing levels of security capabilities. At one time cryptographic operations for safeguarding data were both time and computationally expensive. As a result they were typically reserved for highly sensitive government and financial contexts. As processor speed rises and memory capacities increase the ability to perform cryptographic operations once only reserved to specialized expensive hardware is now commonplace in many applications. Conventional off the shelf applications embed cryptographic capabilities into software because it no longer creates a processing bottleneck to do so.

Further as network capacities continue to rise with increasing use of broadband e.g. cable modem Internet access and increasing popularity of WiFi capability e.g. 802.11b g n wireless the sheer quantity of data transmitted heightens the awareness that unencrypted transmissions so called plaintext run an increasing risk of divulging sensitive information. There is an emerging tendency to encrypt most or all data during transmission because there are minimal perceived drawbacks to doing so. Accordingly data in transit between a source and a destination is often encrypted.

In one illustrative embodiment a method in a data processing system comprising a processor and a memory for handling a database client request is provided. The method comprises receiving by an unsecure access local agent of the data processing system an encrypted database client request DCR from a client computing device as part of a session between the client computing device and the data processing system. The method further comprises retrieving by the unsecure access local agent a database session information DSI address corresponding to the session. In addition the method comprises generating by the unsecure access local agent a first unique identifiable key UIK based on a portion of the encrypted DCR. Furthermore the method comprises generating by the unsecure access local agent a DSI mapping data structure that maps the first UIK to the DSI address and processing by a secure access local agent of the data processing system the encrypted DCR using the DSI mapping data structure.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

The illustrative embodiments provide mechanisms for propagating session attributes through secure database server tiers. As mentioned above encrypted transmissions of data are ever increasing and are especially prevalent with regard to database accesses. That is database accesses may be either secured encrypted or unsecured unencrypted . The terms secure and unsecure as they are used herein to refer to the local agents are meant to identify whether or not the local agent works in conjunction with a cryptographic engine for encrypting decrypting data where unsecured access local agents operate with regard to plaintext or unencrypted data while secure access local agents operate in conjunction with a cryptographic engine and encrypted data. Monitoring of accesses to a database are different depending upon whether the database accesses are secured or unsecured.

An example of a database access monitoring mechanism for secured database accesses is described in commonly assigned and co pending U.S. Patent Application Publication No. 2010 0131758 entitled Nondestructive Interception of Secure Data in Transit published May 27 2010. With the mechanisms of the 758 U.S. patent application Publication client requests are received via a network at an interface in an encrypted manner. A cryptographic operation is invoked at the database server tier to decrypt received database client requests DCRs and encrypt database server responses DSRs . The secure access local agent LA referred to in the 758 U.S. patent application Publication as a database monitor agent intercepts plaintext DCRs and DSR data after the decryption or before encryption by a cryptographic operation without disrupting the main flow of the data between the database server and the client computing device. The secure access local agent LA forwards intercepted plaintext DCR and DSR data to an external database monitor for further analysis.

A typical database environment often employs a data level security mechanism . Such a data level security mechanism focuses on the data access transactions to and from the database rather than a privilege or access control list at an invoking application . The data level security mechanism may include an external database security monitor a database monitor agent or a combination of these effectively defining the data level security mechanism database monitor .

As indicated above security of the data in the database is paramount. Accordingly a database monitor intercepts and scrutinizes the data access transactions either by intercepting the transactions over a network connection to an interface or by the database agent as transactions . For performance reasons it is often sought to capture the access transactions on the network connection prior to the interface to offload security processing from the host . However as will be discussed further below certain contexts also employ the database monitor agent also referred to herein as secure access local agent LA on the host .

As discussed above many database management systems encrypt data access transactions to avoid exposure of sensitive data items while in transit from the an application GUI to the database . Data access responses may be similarly covered. However the database monitor secure access local agent LA operates on plaintext unencrypted data. Accordingly the database monitor identifies an interception point . . . generally corresponding to the transition of ciphertext to plaintext and captures the plaintext transaction for scrutiny. Depending on the encryption employed by the particular DBMS the interception point may occur in one of several places. In the case of DBMS IPC interception i.e. port read watching shown as interception point the interception point is triggered by a port read to read data passed from the interface to the port via arrow . The communication comes encrypted from the interface and the service process SVC decrypts the data by calling the cryptographic operation . It then passes the unencrypted data to the DBMS which is where the actual interception occurs discussed further below.

When the cryptographic operation for decryption is invoked from the interface an interprocess communication IPC mechanism is employed to intercept the database access transaction at the interface from the network connection typically by a port read on a socket shown in interception zone . The interception point is a predetermined port employed by the DBMS for receiving database access transactions and is effected by watching or establishing an intercept triggered on the predetermined port. In this manner operating system OS calls to read the ports corresponding to database transactions result in the database monitor reading the port scrutinizing the data and passing it along as intended to the DBMS .

The interception occurs in zone when a dynamically linked list DLL invocation to the cryptographic operation is employed. A call signature corresponding to the decryption operation is superseded by inserting a database monitor call signature prior to the decryption operation at interception point in zone . The DLL processing satisfies the linkage with the monitor signature before the originally intended signature of the cryptographic operation . The database monitor invokes the cryptographic operation scrutinizes the transaction subsequently returns control.

In an end to end encryption scheme the DBMS process itself includes the invocation to the decryption operation via a static linkage. In this instance the instructions in the executable image the memory resident machine epodes are examined to identify the invocation to the decryption operation typically a stack call. The instructions are replaced with instructions to defer control to the database monitor which then invokes the decryption operation and scrutinizes the transaction .

An example of a database access monitoring mechanism for unsecured database accesses is described in U.S. Pat. No. 7 426 512 issued to Ron Ben Natan on Sep. 16 2008. As described in the 512 patent a local client sends an access attempt to an interprocess communication IPC mechanism. An IPC intercept mechanism intercepts the access attempt and forwards it to an unsecure access local agent LA which determines by interrogating the IPC mechanism a database instruction corresponding to the local access attempt. The unsecure access local agent LA then transmits the determined database instruction to the external data security device for analysis and further operations by a database monitor. The external data security device also receives remote access attempts via a network switch tap.

A user initiates access to the database in the form of a user request or database client request DCR which passes through the network for delivery to the DB access gateway as an incoming request . A data security device is connected via a switch or other connectivity device such as a tap router or bridge on the path from the network to the host . The data security device includes a DB monitor for receiving user requests sent through the switch . The DB monitor receives and analyzes the incoming user request as a tapped access attempt which the DB monitor analyzes according to a predetermined security or access policy. The data security device then passes the tapped access attempt to the access gateway AG as an incoming request .

Typically the database server expects a substantial portion of DB traffic user requests to arrive remotely via the network and thus pass scrutiny under the data security device . However a portion of database access attempts emanate locally from a local client executing on the host as local access attempts . The local access attempts arrive at the access gateway via an Interprocess Communication IPC mechanism . Such local access attempts do not pass through the switch and therefore may otherwise be operable to elude scrutiny of the data security device .

This shortcoming is substantially overcome by employing an IPC intercept for intercepting the local access attempt and transporting the intercepted access attempt to a local agent LA . The local agent LA determines by interrogating the IPC mechanism a database instruction corresponding to the local access attempts . The local agent LA then transmits the determined database instruction to the data security device for analysis and further operations by the DB monitor . In this manner the data security device receives all local and remote access attempts to the DB server to more fully analyze monitor and guard against access attempts which may be undesirable.

It should be noted that the unsecure access local agent LA in this case has access to database session information DSI . Database session information DSI is information defining the establishment of the session between the client computing device and the database server. Examples of such DSI data comprises operation system user of the database client process database client process identifier terminal identifier database client IP address and database client and database server ports. DSI data may be important data to analyze for purposes of intrusion detection. DSI information is available to the unsecure access local agent LA because the inter process communication IPC mechanism uses operating system OS level standard application programming interfaces APIs and OS process identifiers are available to the unsecure access local agent. Since the OS process identifier is available the DSI information can be retrieved using standard OS calls.

While secure databases obviously provide greater security of the data stored therein the drawback of secure access local agent operations such as described in the 758 U.S. patent application Publication is that database session information DSI is not available to the database monitor agent or the database security monitor. This is because DSI is a data structure which does not participate in the execution flow of the processes within the database host server and is available only at the operating system level tier which is at a different level tier from the database monitor agent and database security monitor. While unsecured database local agent operations are able to have access to DSI data since the local agent receives access attempts only from local clients local to the database server host and may operate at a same tier level as the operating system and IPC APIs the unsecured database local agent operations are less secure than the secured database local agent.

Moreover the unsecured database local agent generally cannot be used with secure database accesses because they are encrypted. That is in the case of secure database accesses the DCR and DSR which may be intercepted by the unsecure access local agent LA are encrypted and cannot be analyzed by an external security device ESD when they are forwarded by the unsecure access local agent LA to the ESD. While the DCR and DSR are encrypted the DSI data that is accessible by the unsecured local agent LA collected from the operating system level is not encrypted. Similarly with the secure access local agent LA the DSI data is not available at the point of invocation of the cryptographic operation and cannot be transferred to the ESD by the secure access local agent LA for further analysis however the DCR and DSR are not encrypted due to interception after decryption DCR and before encryption DSR by the cryptographic operation and can be forwarded to the ESD for further analysis.

The illustrative embodiments provide a mechanism by which these local agents LA and LA can be utilized together to allow DSI and decrypted DCR data to be provided to an external security device ESD for further analysis. The illustrative embodiments map decrypted data intercepted at the cryptographic tier of a database server host to database session attributes on the database server host at runtime. This allows DSI data to be available to the secure access local agent LA when it otherwise would not be available to the secure access local agent LA as discussed above and solves the problem associated with the database session identification information for secure database access being made available to the ESD for intrusion detection analysis and operations when the DCR and DSR are encrypted.

With the mechanisms of the illustrative embodiments database accesses are secure and thus DCR and DSR are encrypted. However the unsecure access local agent LA is used to intercept the encrypted DCR and the non encrypted i.e. plaintext DSI data and then map the encrypted DCR data with the plaintext DSI data. The illustrative embodiments operate based on the observation that encryption keys used for data encryption are unique for each database session e.g. each SSL handshake and thus the same database plaintext data from different sessions would result in different encrypted data due to the unique encryption keys used for each database session. Thus a long enough binary string extracted from encrypted data is sufficiently random and unique in order to use it as a unique identifiable key UIK in multithreaded database session processing. Therefore encrypted DCR data intercepted at the interprocess communication IPC tier of the unsecure access local agent LA integrated with the IPC mechanisms can be mapped with unsecure DSI information using such a UIK which in turn may be mapped to a session identifier SI . The SI is a handle which identifies a session cryptographic context at the cryptographic level tier.

As a result the secure access local agent LA which intercepts secure DCRs and invokes the cryptographic operations to decrypt the encrypted DCR data to generate plaintext DCR data can retrieve the plaintext DSI data by virtue of the mapping generated by the unsecure access local agent LA . Thus the unsecure access local agent LA extracts the unique identifiable key UIK from the DCR. The unsecure access local agent LA stores the UIK and DSI data in a DSI mapping data structure and makes it available to the secure access local agent LA . The secure access local agent LA extracts the UIK from the DCR passed to it and performs a lookup operation in the DSI mapping data structure based on the UIK to identify the corresponding DSI data. As a result the DSI data becomes available for the database session on the secure access local agent LA tier. The secure access local agent LA may then forward the plaintext DSI data and the plaintext DCR data to the external secure device ESD .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium s having computer usable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Thus the illustrative embodiments may be utilized in many different types of data processing environments. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

As shown in in a similar manner as described above with regard to the unsecured local agent LA receives database access requests from a local client via the interprocess communication IPC mechanism which is software providing low level inter process communication APIs. As explained previously the IPC intercept intercepts such database access requests and forwards them to the unsecure access local agent LA for processing.

The unsecure access local agent LA is referred to as being unsecure in that it is not configured to invoke or implement the cryptographic functions for decrypting a database client request DCR or encrypting a database server response DSR to a DCR and may in fact be integrated with the IPC and IPC intercept . The unsecure access local agent LA is further augmented when compared to the local agent in to include logic for receiving DCRs from clients that are not local to the database server host and may be external to the database server host such as database client . Such DCRs may be received via one or more data networks including routing mechanisms such as switches routers etc. not shown . As such in order to ensure the security of the data in the database such DCRs and the corresponding DSRs sent back from the database server host are encrypted. Thus the database is a secure database in which cryptographic processes provided by cryptographic engine for example are used to protect the data being transmitted to and from the database server host .

The unsecured local agent LA is not configured to invoke the cryptographic engine and thus is not able to convert received encrypted DCRs into plaintext decrypted DCRs for processing. Thus the unsecured local agent LA cannot perform functions on the encrypted DCRs for purposes of providing decrypted DCRs to the backend database or to an external security device for further analysis and security operations such as logging the access to the database performing operations to block allow such requested access modifying the data returned in the DSR from the database or the like.

However in accordance with the illustrative embodiments the unsecured local agent LA comprises additional logic for extracting or generating a unique identifiable key UIK based on the encrypted DCR. This logic takes a subset of the encrypted data in the DCR as the UIK. That is because the encryption keys used for each session with the database are considered unique to that session a suitably long enough subset of the data in the DCR will be unique to that session. In other words if two different sessions submitted the same exact request to the database server host at least by virtue of the unique encryption decryption keys used for each session the encrypted DCRs are different.

The UIK may be extracted or generated in a number of different ways. Simply extracting a portion of the encrypted DCR at a designated location within the DCR may be used as a basis for extracting the UIK from the DCR. The UIK may have various sizes and thus may be a different subset of the encrypted DCR depending upon the particular implementation. For example in one illustrative embodiment the UIK may be an 8 byte subset or portion of the encrypted DCR. Thus the UIK is an encrypted pattern of data extracted from an encrypted DCR and is unique to the particular session between the client computing device and the database server host .

The UIK that is extracted from the encrypted DCR by the unsecured local agent LA is correlated with the database session information DSI for the session between the client computing device and the database server host . This correlation is made between the UIK and the DSI address which points to the actual DSI data for the session stored in the DSI data storage . The mapping of UIK to DSI address is stored by the unsecure access local agent LA in an entry in a DSI mapping data storage . Thus the DSI mapping data storage allows one to map an encrypted DCR as identified by the UIK with unencrypted DSI data in the DSI data storage for the session.

It should be appreciated that in the description of it is assumed that client computing devices such as database client implement a known handshake operation for setting up a session between the database client computing device and the database server host . As part of this handshake operation database session information DSI is collected and stored in a DSI data store for each of the sessions with each of the client computing devices. As noted above this DSI data may include such information as operating system user of the database client process database client process id terminal id database client IP address database server ports or other information defining the connection between the client computing device and the database server host . This data is collected at the operating system level and thus is generally not available to the cryptographic or security level of the database server host at which the cryptographic engine and secure access local agent LA operate.

Returning again to the operation of the unsecure access local agent LA the unsecure access local agent LA since it is unable to invoke or intercept invocations of the cryptographic processes of the cryptographic engine cannot perform the decryption of the encrypted DCR. To the contrary the database server calls the secure access local agent LA and provides the received encrypted DCR to the secure access local agent LA . The secure access local agent LA is similar to the local agent in but is augmented to include logic for extracting a UIK from the encrypted DCR and performing a lookup operation in the DSI mapping data storage based on the UIK to obtain the DSI address for the unencrypted plaintext DSI data. Thus the secure access local agent LA invokes the cryptographic processes of the cryptographic engine to decrypt the received encrypted DCR to generate a decrypted DCR in a manner generally known in the art.

At substantially a same time as the cryptographic processes are being invoked by the database server the secure access local agent LA intercepts the invocation and extracts the UIK from the encrypted DCR in a similar manner as was done by the unsecure access local agent LA . Thus both the unsecure access local agent LA and the secure access local agent LA implement the same logic for extracting the UIK from the encrypted DCR. As a result the UIK extracted by unsecure access local agent LA and the UIK extracted by the secure access local agent LA should be identical thereby allowing the lookup of DSI address information in the DSI mapping data storage .

Based on the extracted UIK that is extracted by the secure access local agent LA the secure access local agent LA performs a lookup operation in the DSI mapping data storage and retrieves the DSI address corresponding to the UIK. Thus by virtue of the decryption of the encrypted DCR performed by the cryptographic engine and the retrieval of the DSI address from the DSI mapping data storage based on the extracted UIK the secure access local agent LA has access to both the decrypted DCR and the unencrypted DSI data in the DSI data storage pointed to by the retrieved DSI address. Hence the secure access local agent LA forwards the decrypted DCR to the database so that the requested data may be retrieved from the database and a corresponding database server response DSR may be returned to the database client in a manner generally known in the art assuming that such a DSR is not blocked by security mechanisms due to intrusion detection or the like.

In addition the secure access local agent LA forwards the decrypted DCR and plaintext DSI data to the external security device ESD for further analysis and security operations. That is the ESD may process the DCR and DSI data to determine if any security policies established from the database system are violated by the DCR. Many times in order to make such determinations it is important to have the DSI data which gives information about the client computing device the type of connection being used and the like that may have a bearing on whether a security policy is violated or not. For example a database may store a table SECRET INFORMATION that has an associated security policy that the table can only be accessed by a user Alice and only from a computer with Internet Protocol address 192.168.1.175 for example. That is the ESD may have a rule that is of the type If user is not Alice or client ip address is not 192.168.1.175 then issue alert. 

The security operations that may be performed may include for example allowing the database system to return the requested data in a DSR or blocking the return of the requested data if a violation of a security policy occurs. Moreover the security operations may be more advanced and may anonymize data returned to the database client modify the returned data before being returned to the database client redirect the data to another location log the database client request in a log data structure along with information about any security policy violations send notifications to authorized individuals should a security policy violation occur or the like. Any suitable security operation that may be performed based on whether or not a security policy is violated or not may be used without departing from the spirit and scope of the illustrative embodiment.

Thus to summarize the operations described above when an encrypted DCR is received by the database server host it is received by the unsecure access local agent LA which extracts a UIK and correlates the UIK with the DSI address for the session and generates an entry in the DSI mapping data structure of the DSI mapping data storage for mapping the UIK to the DSI address. The encrypted DCR is passed to the secure access local agent LA which again generates the UIK performs a lookup of the UIK in the DSI mapping data structure to retrieve the DSI address and invokes the cryptographic engine to decrypt the DCR. The secure access local agent LA then provides the decrypted DCR and DSI to the ESD and provides the decrypted DCR to the database . This allows the DSI data to be made accessible to the ESD via the secure access local agent LA when it otherwise would not be available in prior art mechanisms.

As mentioned above one of the primary features of the illustrative embodiments is the ability to extract a unique identifiable key UIK from the encrypted database client request DCR . is an example diagram illustrating the extraction of a unique identifiable key UIK from an encrypted database client request DCR and the mapping of the UIK with the database session information DSI address for a current session in accordance with one illustrative embodiment. In element represent the encrypted database client request DCR packet having a string of symbols representing the encrypted data. In the particular example shown the portion of the string 17 03 01 00 36 is part of the transport layer security TLS and indicates that the data is encrypted. In addition in accordance with the TLS protocol the header offset is 5 bytes indicating that the start of the encrypted data is at byte of the data packet. In this particular example the key is selected to be an 8 byte key that is extracted from the first 8 bytes of the encrypted data. This corresponds to the portion of the data packet .

Thus the UIK is extracted by the unsecure access local agent LA from the DCR data packet for use in mapping with the DSI address. It is assumed for purposes of this example that the DSI data that is collected comprises the following 

The unsecure access local agent LA generates an entry in a DSI mapping data structure DSI MAP that maps the UIK DSI address pair 0x5a31720a71c4b65c 0x8057779 .

Element in represents the pseudocode that may be implemented by the secure access local agent LA when decrypting the DCR retrieving the DSI address and providing the decrypted DCR and DSI data to the ESD. As shown in element of the secure access local agent LA initializes the decryption of the encrypted DCR and retrieves the DSI from the DSI MAP data structure and maps the DSI address to the current session information SI . Thereafter the secure access local agent LA pushes the DSI data and the plaintext DCR to the ESD if the DSI is available and it is the first time the DSI data is being correlated with SI information such correlation need only be performed the first time and this correlation may be reused in subsequent operations . If the DSI is not available then only the plaintext DCR is sent to the ESD.

The secure access local agent generates the UIK based on the encrypted DCR step and performs a lookup of the UIK in the DSI mapping data structure to identify the corresponding DSI address step . The DSI address is retrieved from the DSI mapping data structure based on the matching UIK step and the DCR is decrypted step . The decrypted DCR and the plaintext DSI data is output to the external security device step . The external security device then performs analysis and security operations based on the decrypted DCR and DSI step . The operation then terminates.

Thus the illustrative embodiments provide mechanisms for propagating session attributes in the database session information through a secure database server to an external security device. The illustrative embodiments overcome the problems associated with such session attributes not being available to the security tier or level of a secure database server in known architectures. The illustrative embodiments permit the secure access local agent to access these session attributes and provide them to the external security device along with the decrypted database client request.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash basic input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a server data processing system may be for example an IBM eServer System p computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed. An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and for example.

A bus system such as bus or bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as modem or network adapter of may include one or more devices used to transmit and receive data. A memory may be for example main memory ROM or a cache such as found in NB MCH in .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

