---

title: Live Upgrade
abstract: A method and corresponding system upgrades a live computer system. The method begins with migrating a copy of data from a first system to a communicatively coupled second system at a first time. Next, at one or more subsequent times, a copy of changed data is migrated from the first system to the second system until a threshold is reached. Finally, in response to reaching the threshold, a copy of the remaining changed data is migrated from the first system to the second system. A further embodiment of the method comprises: disabling access to the first system during the migration of data at the first time, enabling and maintaining access to the first system at the one or more subsequent times during the migration of the copy of changed data, and disabling access to the first system during the migration of the copy of the remaining changed data. In this manner, the system being upgraded is still highly available throughout the upgrade process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582510&OS=09582510&RS=09582510
owner: Dassault Systemes Americas Corp.
number: 09582510
owner_city: Waltham
owner_country: US
publication_date: 20130530
---
The invention generally relates to the field of computer programs and systems and specifically to the field of performing system upgrades.

The advent of computer programs and systems has greatly changed the manner in which business is conducted. Many sophisticated and complex computer systems have been developed to assist businesses and consumers. These systems however do not remain stagnant and such systems typically require upgrades.

A method and corresponding system according to an embodiment of the present invention are directed to upgrading a computer system. An embodiment of the invention begins by migrating a copy of data from a first computing data processing system to a communicatively coupled second computing data processing system at a first time. After this initial migration a copy of changed data is migrated from the first system to the second system at one or more subsequent times until a threshold is reached. In response to reaching the threshold a copy of the remaining changed data is migrated from the first system to the second system.

An embodiment of the invention may further comprise writing a subset of the migrated data to the second system in an untransformed manner. In other words the data is written in a manner that is free of requiring transformation. Yet another embodiment of the invention comprises installing one or more applications in a manner allowing for communication with the second system. Such an embodiment may further comprise transforming a subset of the migrated data using one or more respective handlers supplied by the one or more installed applications and writing the transformed data to the second system. According to an alternative embodiment of the invention the handlers may use a database to track the data transformation.

In an embodiment of the invention access to the first system is disabled during the migration of the copy of data at the first time. Further in such an embodiment access to the first system is enabled and maintained at the one or more subsequent times when the copy of the changed data is being migrated from the first system to the second system. Yet further still access to the first system may be disabled during the migration of the copy of the remaining changed data from the first system to the second system.

According to an embodiment of the invention the first system and the second system may be communicatively coupled unidirectionally such that the first system has no visibility into the second system. An embodiment of the invention may further comprise pointing one or more clients to the second system after migrating the copy of the remaining changed data from the first to the second system in response to reaching the threshold. In yet another embodiment of the invention the first system is deleted after the copy of the remaining changed data is migrated from the first system to the second system. Further still an embodiment of the invention may comprise performing kernel upgrades of the second system.

According to an embodiment of the invention the changed data is data that has been altered and data that has been added to the first system since a prior time data was migrated from the first system to the second system. In a further embodiment of the present invention the threshold is an amount of changed data on the first system.

A further embodiment of the invention is directed to an upgrading system. The system may comprise a first system a second system communicatively coupled to the first system and a processor. In such an embodiment the processor may be configured to migrate a copy of data from the first system to the second system at a first time. The processor may be further configured to migrate a copy of changed data at one or more subsequent times. This migration may proceed until a threshold is reached. In response the reaching the threshold the processor may be configured to migrate a copy of the remaining changed data from the first system to the second system.

In further embodiments of the system the processor is configured to write a subset of the migrated data in an untransformed manner. According to another embodiment of the upgrading system the processor is configured to install one or more applications in a manner allowing for communication with the second system. In yet another embodiment the processor is configured to transform a subset of the migrated data using one or more respective handlers supplied by the one or more installed applications. In a further embodiment the processor is further configured to write the transformed data to the second system.

In yet another embodiment of the upgrading system the processor is configured to disable access to the first system while migrating the copy of the data from the first system to the second system at the first time. The processor may also be configured to enable and maintain access to the first system at the one or more subsequent times when a copy of changed data is being migrated. Yet further still according to an embodiment of the invention the processor may be configured to disable access to the first system when the copy of the remaining changed data is being migrated from the first system to the second system.

According to an embodiment of the upgrading system the changed data is data that has been altered and data that has been added to the first system since a prior time data was migrated from the first system to the second system. In an alternative embodiment of the present invention the processor is configured to point one or more clients to the second system and delete the first system after the copy of the remaining changed data is migrated from the first system to the second system.

Yet another embodiment of the present invention is directed to a cloud computing implementation for upgrading a system. Such an embodiment is directed to a computer program product executed by a server in communication across a network with one or more clients. The computer program product comprises a computer readable medium which comprises program instructions which when executed by a processor causes migrating a copy of data from a first system to a communicatively coupled second system at a first time at one or more subsequent times migrating a copy of changed data the changed data being migrated from the first system to the second system until a threshold is reached and in response to reaching the threshold migrating a copy of remaining changed data from the first system to the second system.

Enterprise computer software systems typically require upgrades to include such things as further product features. However performing upgrades may require system downtime and thus prevent consumer use of the system. Further system downtime may discourage users from upgrading systems. Thus an embodiment of the invention addresses the need to upgrade an existing enterprise software system and minimize the overall downtime of the system. Among other reasons it is important to minimize the downtime caused by system upgrades in order to satisfy customer expectations as well as Service Level Agreements SLAs .

While upgrade times may vary they are often correlated to the amount of data that is stored in the system. Thus as the use of systems increases and such systems store more data the downtime that upgrades require will likely increase.

An embodiment of the invention alleviates the downtime caused by upgrading these systems. While the term data is used throughout this application data may refer to an object which is simply a defined unit of data. Further data as referred to throughout the application may refer to the structure of an object. For example data may comprise the various attributes that a given object may store. The structure of data objects may be referred to generically as metadata i.e. data about data. In enterprise systems there may be a large variety of data structures and oftentimes upgrading a system may involve changing these data structures or adding entirely new data structures. Further complicating system upgrades is the fact that such changes may be done on a client by client basis which may result in requiring customized upgrading processes for each client.

An embodiment of the invention solves the problem of upgrading metadata systems. In complex metadata systems the relationship of data to each other is governed by highly complex structures that may change from release to release. The data structure complexity is dictated by the need to model complex physical and logical data. These structure changes are frequently due to evolving modeling requirements and performance considerations. An embodiment of the invention allows for upgrading these structures while minimizing system downtime.

After migrating a copy of data at a first time at one or more subsequent times a copy of changed data is migrated from the first system to the second system until a threshold is reached . For example according to an embodiment of the method after the initial copy and migration of data the method continues to migrate data to the second system that is changing or being added to the first system. Because this process may occur over an extended period of time there may be multiple occurrences of migrating changed data. As stated the process of migrating changed data proceeds until a threshold is reached.

In an embodiment of the invention the threshold refers to the amount of changed data on the first system. This threshold may be set based on any number of factors including the historical amount of changed data. Further the threshold may also refer to the elapsed time of the upgrade process and or the time of day when the process is occurring. For example if the system must be upgraded by a certain time the process may continue until a time is reached where it is necessary to finalize the upgrade. Further it may be advantageous to define the threshold in terms of off peak versus peak hours. To illustrate changes to data in the first system are likely the result of users one may assume that there are few users utilizing the first system during off peak hours and thus the threshold may be reached at these off peak times. Further still the threshold may be defined as a combination of the described factors and or any other considerations as are known in the art.

In response to reaching the threshold the next step of the method is to migrate a copy of the remaining changed data from the first system to the second system . After migrating the remaining changed data all of the data from the first system should be migrated to the second system.

The method begins by disabling access to the first system and migrating a copy of data from the first system to the second system . While migrating the copy of data one or more subsets of this data may be transformed . In an embodiment of the invention only data that requires transformation will be transformed while other data may be migrated without being transformed. After transforming the data the transformed data and the non transformed data is written to the second system . The details and process of transformation is described hereinbelow in relation to . At this time access is enabled to the first system . The sub process of the method limits downtime of the first system to the initial copy of the data on the first system. After the initial copy access to the first system is enabled. Therefore while performing the system upgrade the user experience is that of a highly available system.

After migrating transforming and writing the data from the first system to the second system the next step of the method is to migrate a copy of changed data from the first system to the second system transform a subset of this data if necessary and write the changed data to the second system . The step occurs at a time subsequent to step . As described above because access to the first system is enabled after the initial migration of data at step new data is likely being added to the first system and data existing on the first system is likely being altered. These changes to the data on the first system must be reflected in the second system. Hence the step where at a subsequent time the changed data is copied migrated transformed where necessary and written to the second system.

After copying migrating transforming and writing the changed data to the second system the next step in the method is to determine if the threshold is met . The threshold is a point where it is determined that the process should finish the upgrade. The threshold may be defined in any manner as is known in the art. In an example embodiment of the method the threshold is the amount of changed data on the first system. If after checking the threshold it is determined that the threshold is not met the method returns to step where changed data on the first system is copied migrated transformed and written to the second system. This loop of copying migrating transforming and writing and checking the threshold continues until the threshold is reached.

In response to reaching the threshold access is disabled to the first system and the remaining changed data is migrated transformed and written from the first system to the second system . At this point the second system comprises the up to date data that was on the first system. After migrating the remaining changed data access is enabled and clients are pointed to the second system and the method ends .

In this manner the method upgrades the first system by creating and upgrading a mirror of the first system using an iterative process as described. The method provides a manner in which a system can be upgraded with limited down time. As described according to an embodiment of the method access to the first system is only disabled during the initial migration and the final pass to migrate the remaining changed data .

Further coupled to the processor are applications . Any number of applications may be coupled to the processor . The applications may be executed by the processor and made available to users. Example applications include Computer Aided Design CAD applications Computer Aided Engineering CAE applications and or other application modeling tools. In an embodiment of the invention the applications provide various handlers. As will be described in detail hereinbelow the various handlers may be executed by the processor and configured to transform data from the system to be upgraded .

Coupled to the processor the applications and the ADK is the upgrade module . The upgrade module may be embodied by hardware software and or a combination thereof. The upgrade module may be executed in whole or in part by the processor . In an embodiment of the invention the upgrade module is configured to change the administrative definitions that define the data models schema that govern the various applications . These administrative definitions refer to the definition of data structures of the various schema of the applications . Throughout this application the terms model schema and metadata may be used interchangeably to refer to data about data i.e. data describing the structure of data as used by the various applications 

The upgrade module may be configured to embody the methods and or as described herein. The upgrade module may be configured to perform upgrades at various system levels. For example the upgrade module may perform kernel upgrades which may comprise changing database level definitions i.e. database schema. The upgrade module may also be configured to perform kernel platform level changes which comprises changing how data is organized. Further the upgrade module may change application level definitions. Application level changes can be as simple as adding additional data to existing objects for example adding an attribute to a type or they may comprise changing the structure of how the data is organized. As described herein where the structure of data is changed handlers supplied by the respective applications may be used to transform data from the original N system and present it to the N 1 system .

The upgrading system further comprises a database which may be referred to as a TagDB. The database is communicatively coupled to the upgrade module and the processor . According to an embodiment of the invention the database is used by the processor the upgrade module the applications and respective handlers supplied by the applications to track the process of transforming data from the system to be upgraded . The database may be any database as is known in the art and may be structured in any way as to facilitate the process of upgrading the system to be upgraded . For example in an embodiment of the invention the database is a not only structured query language NoSQL type database.

The upgrade system further comprises an original system i.e. the system to be upgraded which throughout this application may be referred to as the N system. The system to be upgraded comprises a variety of data used by the applications that facilitates and or results from use of the applications by users. For example if a given application is a CAD application the system may comprise data defining a CAD model generated by a user through use of the application . The N system would store this data in a particular structure which is referred to as the metadata of the application which is governed by the particular schema of the application

Communicatively coupled to the system is the system which will be the resulting upgraded system. The systems and are communicatively coupled to the processor . The systems and may be accessed through use of various modules including the upgrade module and the ADK module to perform the system upgrade according to principles of the current invention. Further the systems and may be communicatively coupled unidirectionally such that the first system has no visibility into the second system or vice versa.

Described hereinbelow is an example use of the system to upgrade the system . An example method of upgrading the system utilizing the upgrading system may begin with any number of initial setup procedures. One such procedure may comprise disabling administrative changes on the system to be upgraded . Administrative changes may refer to the metadata i.e. the rules describing the structure of the data stored on the system . The ability to make administrative changes may be left off throughout the upgrade process. However the ability to create instant data may still be allowed throughout the upgrade process. Instant data may refer to altered and new data but not data defined by a new data structure as changes to data structures may be disabled throughout the upgrade process.

Other initial procedures comprise configuring the N 1 system to connect back to the N system . This connection may be accomplished in any way as is known in the art including through use of a HTTP hypertext transfer protocol and or a HTTPS secure HTTPS protocol. The initial procedure may further comprise copying data from the N system to the N 1 system . This data may be copied using any method as is known in the art including using a file system snap utility. Another initial procedure that may be part of the method of upgrading the system using the upgrade system may include performing kernel upgrades on the N 1 system .

Further initial procedures may comprise installing applications with their schema upgrades. These applications with schema upgrades may be installed on a tenant by tenant basis. These schema metadata updates refer to changes in the structure of data. For example in the case of a modeling tool application a schema change may include adding an attribute or modifying a policy of a particular data structure. The applications may be installed on any system or component such that the applications are in installed in a manner allowing for communication with the N 1 system . In an example embodiment the applications are installed on the N 1 system which may have the effect of upgrading metadata definitions in the N 1 system. After installing the applications with their respective schema upgrades where desired the initial set up procedure may further comprise configuring application handlers for data types that require transformation. Configuring handlers may be as simple as configuring respective handlers such that when a handler encounters a particular data structure it transforms the data structure in a particular manner so as to comply with the schema upgrades. While handlers may be configured to transform data other handlers which may be referred to as default handlers may be configured to handle data that does not require transformation. This may include identifying data that does not require transformation facilitating the transfer and update of data that does not require transformation and writing this data to the N 1 system . Another initial procedure may comprise configuring the database for use by the upgrade module and the respective handlers supplied by the applications 

After one or more of the initial set up procedures the upgrade may be performed. As described above the initial process includes copying the data on the N system and migrating this data to the N 1 system . After the initial copy the upgrade module and the ADK which may be executed by the processor work in conjunction to perform the upgrade of the N system . In this manner as data is being added to and altered on the N system these data changes are being reflected on the N 1 system through use of the upgrade module ADK applications handlers and processor .

In an example embodiment of the upgrade process in the first iteration of the upgrade an initial transformation of all closures is captured. A closure refers to a set of objects related to one another in this manner a closure refers to the scope of the objects. Throughout this application the terms data and objects may be used interchangeably.

In this first iteration all data needing transformation is processed. This involves a query by the ADK to the N system to determine all data that requires transformation. While such data is already on the N 1 system because of the original copy and migration done as an initial procedure rather than access this data on the N 1 system to transform the data that requires transformation the handlers supplied by the respective applications instead delete this non transformed data on the N 1 system and access the data that requires transformation on the N system . Then this data requiring transformation is migrated transformed and then written to the N 1 system .

After the first iteration of the upgrade process the upgrade method via the ADK queries the N system to determine any data that has changed since the last time the system was queried. From this point only data that has changed on the N system is migrated transformed where necessary and written to the N 1 system . Further any transformed data that requires updating that is stored on the N 1 system is deleted. The corresponding data on the N system is migrated transformed and written to the N 1 system . This may be advantageous as it may be faster to transform migrate and write data that requires transformation rather than update transformed data that requires updating on the N 1 system . In an alternative embodiment rather then deleting the transformed data that requires updating on the N 1 system the data on the N 1 system is simply upgraded.

This iterative process of accessing the N system and updating the data on the N 1 system to reflect changes made to the data on the N system continues until a threshold is reached. This threshold may refer to the amount of differences between the data on the N system and the N 1 system i.e. the size of the delta. Further the threshold may alternatively be a time deadline and or a combination of delta and time. After reaching a threshold all of the remaining changed data on the N system is migrated transformed where necessary and written to the N 1 system and the process is complete.

In a further embodiment of the system the processor is configured to disable access to the N system during the initial copy and initial data migration. Further the processor may be configured to enable and maintain access to the N system after the initial migrate and copy and during the iterative process of migrating transforming and writing data to the N 1 system to reflect changes to the data on the N system . Yet further still the processor may be configured to disable access to the N system during the migration of the remaining changed data that occurs in response to reaching the threshold.

According to an alternative embodiment of the invention the processor may be further configured to point clients to the N 1 system after the upgrade is complete. An alternative embodiment may further comprise deleting the N system after the upgrade is completed.

Further in an embodiment of the invention the system may be shared by any number of tenants. Accordingly the upgrade of the N system may be done on a tenant by tenant basis. Further such an upgrade procedure may comprise installing applications on a tenant by tenant basis such that each application may conform to the needs of respective tenants.

The next step in the process is to determine if there is more to do . This inquiry asks whether there are more objects that require transformation. If there are more objects that require transformation the method returns to step and calls an application handler to calculate another closure and the steps are repeated for the closure that requires transformation. This process continues until all the objects and relationships that have been identified as newer than check date in step have been properly transformed and or migrated to the new system. When it is determined that there are no more objects that need to be transformed and or migrated it is determined at step there is not more to do.

Upon making the determination that there is no more to do the next step of the method is to determine if there is a small delta . A delta may refer to the number of objects in the original system that are different from objects in the new system. It may be considered a small delta when the number of objects in the original system that need to be upgraded reaches some threshold. While the illustrated method looks for a small delta other indicators could also be used alone or in combination with a delta. For example an embodiment of the method may also consider the time of day when the upgrade is being performed. As is described herein the system being upgraded may be unavailable during the initial data migration and also during the final pass. Thus it may be advantageous to perform the final sweep in relation to time for example where few people are using and attempting to access the system to be upgraded.

If at step it is determined that there is not a small delta then the method returns to step where it repeats the above described steps. At step after finding objects and relationships newer then check date check date is updated to reflect this most recent inquiry and the method proceeds as described hereinabove. If a small delta is reached the method stops . After reaching the small delta an alternative embodiment of the method performs one or more tasks to finalize the upgrade. According to such an embodiment after reaching a small delta access is disabled to the system being upgraded and the final remaining data that needs to be upgraded is migrated transformed where necessary and written to the N 1 system. Further embodiments may additionally run final acceptance tests and baseline index processes. For example prior to making the N 1 system live automated and or manual tests may be performed to verify that the N 1 system is in an acceptable state. Further still embodiments may point clients to the N 1 instance of the system and delete the original instance of the system and the database used to track data transformation.

In closure represents a closure B in a first system that is to be upgraded. In the illustrated closure the wires such as the wires X Y and Z refer to relationships and the blocked letters A B C and D refer to objects. The transformation B is illustrated in the second system . In the second system and the respective closure the intermediate object B is removed and B s data is now stored in relationship M. In light of this transformation the tag database is updated with entry to reflect the changes. In an embodiment of the invention the grouping of objects involved in the transformation is known as a source closure and the transformed set of objects may be referred to as a target closure.

According to an embodiment of the invention the applications such as the applications may register handlers for each object type that requires transformation. Further in an embodiment of the invention there may be a default handler for data types that do not require transformation. A default handler may simply return a closure containing a single object. In another embodiment the handler computes a closure for any object that is modified since the last iteration.

According to an embodiment of the invention multiple handlers may cooperate in a closure with multiple types. In such a cooperative effort each handler may produce the same result when any object in the closure changes. For example if X changes in a given closure a respective handler will produce B B X Y Z and similarly if Y changes another respective handler will produce B B X Y Z. When handlers are cooperating they may be configured to choose and agree on a consistent naming convention for closure identification. In an embodiment of the present invention the closure identifiers are kept unique and consistent over time. One such possible convention may be to the use the physical identifier of the central object in the closure.

When a particular handler is computing a closure a graph of the objects and relationships and their respective properties is determined in memory. A possible convention for tracking such transformations may be to use actual physical identifiers PIDs when re using objects relationship and use symbolic names when generating new objects relationships.

As described herein a database such as a NoSQL database which may be embodied by the database may be used to record transformations and resulting PIDs. When storing the transformation according to an embodiment of the invention the transformation has two parts. An identifier ID which is a stable name chosen by the respective handler performing the upgrade and a PID list which is a list of actual or symbolic PIDs that make up the transformation. Further according to an embodiment of the invention a timestamp may be appended to the ID to indicate the most recent object used in building the closure. Utilizing a timestamp may allow for construction of only one transformation even if multiple objects have changed. Further according to an embodiment of the invention if the timestamp is earlier than a stored timestamp it can be assumed that the closure has already been processed.

In addition to storing transformations an embodiment of the invention may further comprise storing a PID mapping. Using a stored PID mapping may facilitate looking up previous PIDs and deleting corresponding objects where necessary. In such a mapping when new objects are created new PIDs will be recorded.

It should be understood that the example embodiments described above may be implemented in many different ways. In some instances the various methods and machines described herein may each be implemented by a physical virtual or hybrid general purpose computer or a computer network environment such as the computer environment .

Embodiments or aspects thereof may be implemented in the form of hardware firmware or software. If implemented in software the software may be stored on any non transient computer readable medium that is configured to enable a processor to load the software or subsets of instructions thereof. The processor then executes the instructions and is configured to operate or cause an apparatus to operate in a manner as described herein.

Further firmware software routines or instructions may be described herein as performing certain actions and or functions of data processors. However it should be appreciated that such descriptions contained herein are merely for convenience and that such actions in fact result from computing devices processors controllers or other devices executing the firmware software routines instructions etc.

It also should be understood that the flow diagrams block diagrams and network diagrams may include more or fewer elements be arranged differently or be represented differently. But it further should be understood that certain implementations may dictate the block and network diagrams and the number of block and network diagrams illustrating the execution of the embodiments be implemented in a particular way.

Accordingly further embodiments may also be implemented in a variety of computer architectures physical virtual cloud computers and or some combination thereof and thus the data processors described herein are intended for purposes of illustration only and not as a limitation of the embodiments.

While this invention has been particularly shown and described with references to example embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.

For example the foregoing describes first and second systems as any of computer based computing processing data processing and database systems and the like and or any combinations thereof.

