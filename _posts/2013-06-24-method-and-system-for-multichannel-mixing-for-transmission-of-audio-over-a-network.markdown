---

title: Method and system for multi-channel mixing for transmission of audio over a network
abstract: A method and system for providing remote access to multi-channel audio by periodically polling channels of audio produced by, e.g., an application program by calling an Application Programming Interface (API). A method performs the polling to retrieve audio data from multiple channels and to mix the multiple channels into a mixed multichannel audio that is communicated to a remote computing device. The method transmits a sample minimum duration of audio data retrieved from all channels during at polling interval to provide low latency transmission of audio to remotely connected computing devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09282420&OS=09282420&RS=09282420
owner: Calgary Scientific Inc.
number: 09282420
owner_city: 
owner_country: CA
publication_date: 20130624
---
The present application claims priority to U.S. Provisional Patent Application No. 61 663 722 filed Jun. 25 2012 entitled Method and System for Multi Channel Mixing for Transmission of Audio over a Network the disclosure of which is incorporated herein by reference in its entirety.

Ubiquitous remote access to services application programs and data has become commonplace as a result of the growth and availability of broadband and wireless network access. However there exist application programs that were not designed for remote network access over e.g. the Internet. These application programs range from older mainframe applications that have been traditionally accessed by terminals to single user applications designed to be executed on a local computing device. Further such applications were not designed to be executed on the variety of computing devices that exist today. For example many applications are developed to be executed on a specific computing architecture making it impossible for them to be used by smart phones tablet devices etc.

In addition there has been a push toward a cloud computing model i.e. providing applications and data as services over a network. Cloud computing has several benefits in that services may be provided quickly and easily as computing resources can be dedicated and removed based on needs. In the cloud computing model end users access cloud based applications through e.g. a web browser or other light weight desktop or mobile app where the applications may be any type of application and or data executed and or are stored on a remote server. The goal of cloud computing is provide end users an experience as if the applications and data were installed and accessed locally on an end user computing device.

However while there are many benefits to providing remote access to applications there exist features of applications such as multi channel audio which cannot be remotely provided to end users in certain remote access environments.

A method and system for providing remote access to multi channel audio by periodically polling channels of audio produced by e.g. an application program by calling an Application Programming Interface API . A method performs the polling to retrieve audio data from multiple channels and to mix the multiple channels into a mixed multichannel audio that is communicated to a remote computing device. The method transmits a sample minimum duration of audio data retrieved from all channels during a polling or call interval to provide low latency transmission of audio to remotely connected computing devices.

In accordance with aspects of the disclosure there is provided a method of communicating mixed multichannel audio associated with a source to a remote client computing device as single channel audio using a remote access server. The method may include determining a source depleted time for each channel of the multichannel audio 

determining if there is audio data present on all channels at the source determining a sample minimum amount of audio that is present for all of the channels mixing the sample minimum amount of audio for each of the channels of the multichannel audio into the single channel audio and communicating the single channel audio to the remote client computing device.

In accordance with other aspects of the present disclosure there is provided an apparatus for communicating mixed multichannel audio associated with a source to a remote client computing device as single channel audio. The apparatus may include a memory that stores computer executable instructions a processor that executes the computer executable instructions to such that the apparatus performs determining a source depleted time for each channel of the multichannel audio determining if there is audio data present on all channels at the source determining a sample minimum amount of audio that is present for all of the channels mixing the sample minimum amount of audio for each of the channels of the multichannel audio into the single channel audio and communicating the single channel audio to the remote client computing device.

In accordance with yet other aspects of the present disclosure there is provided a tangible computer readable medium containing computer executable instructions that executed by a processor of a computing device causes the processor to execute a method of communicating mixed multichannel audio associated with a source to a remote client computing device as single channel audio from a remote access server. The executable instructions may case the computer to determine a source depleted time for each channel of the multichannel audio determine if there is audio data present on all channels at the source determine a sample minimum amount of audio that is present for all of the channels mix the sample minimum amount of audio for each of the channels of the multichannel audio into the single channel audio and communicate the single channel audio to the remote client computing device.

These and other objects and advantages may be provided by the embodiments of the disclosure including some implementations exemplified in the description and figures.

Unless defined otherwise all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art. While implementations of the disclosure will be described for providing remote access to multi channel audio produced by e.g. an application program by mixing the multiple channels into a mixed multichannel audio a single audio channel that is communicated to a remote computing device.

When the API is called an audio chunk may be returned for each of the multiple channels of audio A B C . . . N producing audio. If a particular channel or channels have not produced audio then no audio chunks are returned for those channels. An audio mixer may receive audio from the multiple channels of audio A B C . . . N and mix the audio together in accordance with audio mixing logic to create mixed multichannel audio . The audio mixer may be implemented via hardware and or software may include a plurality of channel inputs for receiving the multiple channels of audio A B C . . . N. Each channel may be manipulated to control one or more aspects of the received audio stream such as tone loudness or dynamics etc.

The audio mixing logic is described in further detail with regard to and may include both hardware and or software for controlling the processing of audio received by the mixer . For example the audio mixing logic may instruct the mixing of the audio by the audio mixer in accordance with certain requirements. The requirements may include but are not limited to sending audio to a remote client computing device as quickly as it is received in order to achieve low latency or sending as much audio that is available to achieve a minimum feasible transmission. The mixing logic may be programmed with other information such as a number of channels A B C . . . N a length of the mixer output sample and a number output samples per second in order to instruct the processing of the incoming audio to the audio mixer .

The mixed multichannel audio may be communicated by the server remote access program A to the remote client computing device over a communication network . The communication network may be any communication connection as will be described with regard to . In addition although illustrates only one remote client computing device there may be plural remote client computing devices that simultaneously and or collaboratively are connected to the server remote access program A and receiving mixed multichannel audio . Further as will be described the client computer may be any computing device such as a desktop computing device a tablet computing device a notebook computing device a handheld wireless communication device etc.

At a call audio is performed on all channels at predetermined intervals of time. In accordance with aspects of the present disclosure the API may be called by a polling method called GetNextChunk which is called at e.g. regular intervals of 15 ms. The intervals may be determined in accordance with the latency of the network or other factors to provide delivery of audio to the client computer at a predetermined level of quality. At for a first interval n a source depleted time is recorded on all channels. The source depleted time is the time at which there will be no more audio data on a particular channel. The time may be an elapsed running time or a clock time.

At for intervals n 1 2 3 4 etc. the source depleted time is updated for all channels. Next at it is determined if all channels have audio data. For example in response to the call made by GetNextChunk an audio chunk may be returned for each source channel having produced audio data since a last call by GetNextChunk. If no audio data has been produced by a channel an IsEmpty property of GetNextChunk is set to true for that channel.

At if all channels have audio data then a sample minimum duration of all channels is taken. For example the minimum duration may be the least duration of audio data produced by one of the multiple channels. At the audio data on all of the channels for the minimum duration amount of time is mixed and sent to the remote client computing device. For example the audio mixer may mix audio data from the multiple channels of audio A B C . . . N into the mixed multichannel audio which is then communicated to the client computer over the network .

If however at all channels do not have data then it is determined at whether the source depleted time has elapsed for any of the channels. If not then at the process waits for the next call interval and returns to when the next call interval begins. If however at the source depleted time has elapsed on a channel then it is determined if the remaining channels have data. If so then the sample minimum duration of all channels having audio data is taken at and the audio data is mixed and sent to the client computer at . Thus even though all channels did not have data there is still previously retrieved data on at least one of the channels to communicate to the client computer.

However if it the remaining channels do not have data then the process flows to where it waits for the next call interval at . In such a circumstance there may be a hiccup in the audit transmission as there is no audio data to be transferred to the client computer in the current interval.

At time 15 ms call interval 2 a call to GetNextChunk retrieves an additional 20 ms of audio data for channel A. Channel B provides no additional audio data at call interval 2 and IsEmpty is set to true. As a result the source depleted time for channel A is updated to be 40 ms and the source depleted time for channel B remains 75 ms and . The minimum duration of all channels is 20 ms therefore an additional 20 ms of audio is mixed and sent to the client computer as mixed multichannel audio .

At time 30 ms call interval 3 a call to GetNextChunk retrieves no audio data from both channels A and B. As such the source depleted time for channel A is 40 ms and the source depleted time for channel B is 75 ms and . At call interval 3 all channels do not have data and the source depleted time will not yet have elapsed for any of the channels A and B . This is because the source depleted time for channel A does not elapse until 40 ms. As such no audio data is mixed and sent to the client computer rather processing waits for the call interval 4 . However as shown in there the mixed multichannel audio only until time equal to 40 ms. As such the mixed multichannel audio runs out of data 5 ms before the onset of call interval 4. In this circumstance a user at the client computer will experience a short period of silence.

At time 45 ms call interval 4 a call to GetNextChunk again results in no audio data being returned on either of channels A and B. As such the source depleted time for channel A has elapsed i.e. is 5 ms and the source depleted time for channel B is 35 ms and . During call interval 4 all channels do not have data and the source depleted time has elapsed for channels A . Channel B has remaining audio data and the sample minimum duration of all channels is 35 ms which is the amount sent to the client computer as mixed multichannel audio .

Thus illustrates the operations for two channels of audio that are mixed as multichannel audio delivered to a remote client computing device connected to a remote access program over a network.

Additionally or alternatively to the operation described with regard to the GetNextChunk method may call an API unregister a particular channel with the mixer . For example a channel may not produce data for some period of time however will produce data at a later period in time. For example in a timing diagram of the channel B did not return audio data at call intervals 2 4 and channel A did not return audio data at call intervals . It is possible that either or both may return audio data at a later call interval. However if a particular channel will no longer produce audio data it may be unregistered with the mixer such that the mixture no longer expends resources poling the channel.

With reference to there is illustrated an example non limiting system for providing mixed multichannel audio via a computer network according to the present disclosure. The system comprises the client computer which may be a wireless handheld device such as for example an IPHONE an ANDROID device a BLACKBERRY or other any other mobile device connected via the communication network such as for example the Internet to the server computer A. Other client computers may be connected to the communication network such as desktop computers laptop notebook computers thin client devices tablet computers virtual computers etc. that are either wired or wirelessly connected to the communication network . It is noted that the connections to the communication network may be any type of connection for example Wi Fi IEEE 802.11x WiMax IEEE 802.16 Ethernet 3G 4G etc. The server computer A and the client computer may be implemented using hardware such as that shown in the general purpose computing device of .

The server computer A may be connected to a Local Area Network LAN or a second LAN not shown . An optional database may be connected to the LAN such that it is accessible by the server computer A. The LANs may be omitted and the server computer A may be directly connected to the computer network with the database being directly connected to the server computer A.

The application program A may execute on the server computer A. The application program A may be any application and in accordance with aspects of the present disclosure application provides multi channel audio as part of its execution.

According to some implementations remote access to the application program A may be enabled by for example executing a server remote access program A on the processor A of the server computer A and a respective client remote access program executed on a processor of the client computer . The server remote access program A may be performed by executing executable commands stored in the memory A of the server computer A while the client remote access program is performed by executing executable commands stored in memory of the client computer . The server remote access program A communicates with the application program A. An example of the server remote access program is PUREWEB available from Calgary Scientific Inc. of Calgary Alberta Canada.

The client remote access program communicates with a user interaction program B and such as for example a web browser for displaying data such as for example audio data image data video data etc. In accordance with aspects of the present disclosure the client remote access application may access the server remote access program A via a Uniform Resource Locator URL . A user interface of the user interaction program may be implemented using for example Hyper Text Markup Language HTML . User input data for interacting with the application program A may be receive using for example a graphical display with a touch screen .

The server remote access program and the client remote access program may be implemented using standard programming languages and communication is enabled using standard communication technologies such as for example Hyper Text Transfer Protocol HTTP virtual private networks VPN and secure socket layers SSL which are well known to those skilled in the art. Provision of the server remote access program and the client remote access program enable implementations of aspects of the disclosure as a retrofit to existing technologies on the server side as well as on the client side.

Turning now to there is illustrated additional details of the system . As shown the system may have a tiered infrastructure where a client tier and a server tier communicate information data messages etc. between each other. The server tier may communicate information data messages etc. with an application tier . As illustrated the application program A may reside on different machine or may be accessible via a different network infrastructure than the server remote access application A. In the client tier the server tier and the application tier provide an infrastructure for communication during a session between a client in the client tier and an application program e.g. A in the application tier .

In the client tier the user interaction program may be a web browser a SILVERLIGHT application a FLASH application or a native application that interfaces with the client remote access application . The client remote access application communicates with the server remote access application A in the server tier . Data commands and other information may be exchanged between the client remote access application and the server remote access application to enable the user interaction program to interact with one or more of application programs A.

With reference to the server tier includes the server remote access application A which initially communicates with a connect application in the application tier . The connect application may take one or more arguments that includes an indication of an application e.g. application program A in order to begin the execution of the application program A on the server computing device. The connect application may include two components an API hooking library not shown and the API as a Remoting DLL . An example of the API hooking library is the Easy Hook library available at easyhook.codeplex.com releases. The API hooking library operates to inject the API into an address space of the application program A. After the DLL injection is complete the connection between the application program A and the connect application is closed.

Thereafter as shown in the application program A is able to communicate with the server remote access application B via the API and vice versa. Thus the API when injected into the application program A provides a mechanism for server remote access program B to interact with the application program A to pull audio data with the without a need to change the source code of the application program A. As noted above the API will communicate sound to the server remote access application B which is communicated to the connected client computing devices for output to the user.

In some implementations the application tier and server tier of B and may be implemented within a cloud computing environment to provide remote access to the application programs A. As described above cloud computing is a model for enabling network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be provisioned and released with minimal interaction. The cloud computing model promotes high availability on demand self services broad network access resource pooling and rapid elasticity. In such an environment the application programs A may be accessed by the client computing devices through a client interface such as a client remote access application . As in the above the application programs A may be put in the cloud without a need to change the source code.

With reference to there is illustrated an example non limiting system for providing mixed multichannel audio via a computer network according to the present disclosure. The system includes a second server computer B in addition to the server computer A. With regard to the system like numerals denote like elements shown in A B and as such they will not be discussed again below.

The second application program B may execute on the second server computer and may be any application and in accordance with aspects of the present disclosure applications that provide multi channel audio as part of it execution. Remote access to the second application program B may be enabled for example by executing the second server remote access program B on the processor B of the second server computer B and a respective client remote access program executed on a processor of the client computer . The second server remote access program B may be performed by executing executable commands stored in the memory B of the second server computer B. The second server remote access program B communicates with the second application program B. Alternatively one of the first and the second server remote access programs A and B may be omitted and the other may communicate with one or both of the first and second application programs A and B. The client remote access application may access the server remote access program B via a Uniform Resource Locator URL .

According to some implementations remote access to the application program A may be enabled by the server remote access program A and a respective client remote access program N executed on a processor N of the client computer N. The client remote access program N is performed by executing executable commands stored in memory N of the client computer N. The client remote access application N may access the server remote access program A via a Uniform Resource Locator URL .

In some implementations the client computing devices N may participate in a collaborative session. For example one of the application program A or the second application program B may enable the server A or the second server B to collaboratively interact with the client remote access applications N. As such each of the participating client computing devices N may present a synchronized view of the display of the application program A or the second application program B. This enables each of the participants in the collaborative session utilizing the client computing devices N to interact with and control the application program A or the second application program B. Mixed multichannel audio associated the application program A or the second application program B is also synchronized and provided to each of the participating client computing devices N.

Numerous other general purpose or special purpose computing system environments or configurations may be used. Examples of well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems network personal computers PCs minicomputers mainframe computers embedded systems distributed computing environments that include any of the above systems or devices and the like.

Computer executable instructions such as program modules being executed by a computer may be used. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Distributed computing environments may be used where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules and other data may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects described herein includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as random access memory RAM non volatile such as read only memory ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Computing device may have additional features functionality. For example computing device may include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage .

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by device and includes both volatile and non volatile media removable and non removable media.

Computer storage media include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM electrically erasable program read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may contain communications connection s that allow the device to communicate with other devices. Computing device may also have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed subject matter. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs may implement or utilize the processes described in connection with the presently disclosed subject matter e.g. through the use of an application programming interface API reusable controls or the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and it may be combined with hardware implementations.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

