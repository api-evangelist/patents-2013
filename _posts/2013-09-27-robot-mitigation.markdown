---

title: Robot mitigation
abstract: Computer systems, such as a client and a server operably interconnected via a network, are subject to stress on computational resources due to an abundance of automated-user traffic. To improve resource functionalities and control the resources available to automated-agents, value information of valuable assets is encrypted such that a client must perform an algorithm for calculating a decryption key in order to view the unencrypted content. Wherein the encryption is tuned in such a way that any computational delay caused by the encryption is imperceptible to a human-user and largely perceptible to an automated-agent such that the need to determine if a user is an automated-user or a human-user is irrelevant.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09444795&OS=09444795&RS=09444795
owner: Amazon Technologies, Inc.
number: 09444795
owner_city: Seattle
owner_country: US
publication_date: 20130927
---
The presence of automated agents on computer networks is becoming common practice for use in conducting repetitive tasks that bombard websites platforms and system resources. Web scraping data extraction indexing and the like are common place techniques for mining information from websites using programs that simulate human user interaction over a network. A website hosted on server receives traffic or hits each time it is accessed by a user whether that is a human user or an automated agent and each webpage associated with the website contains information that is capable of being viewed and used by the human user and the automated agent. Servers are increasingly receiving website traffic from these automated agents where sometimes upwards of 50 80 of hits are coming from automated agents. As automated agent traffic requires central processing unit processing and general use of computing resources in the same way human user traffic does resource capacity is increased by each hit received from an automated agent and bandwidth can be consumed by each additional server hit causing delay and failure for the human user. Various technical measures and practices exist for excluding or hindering automated agents from accessing website content by implementing techniques such as blocking an Internet protocol IP addresses disabling web services blocking automated agents based on excessive traffic monitoring attempting to learn automated agent behavior implementing reverse Turing test using Completely Automated Public Turing test to tell Computers and Humans Apart CAPTCHA or other human interaction proofs. Conventional techniques however are often prone to misapplication such as by inhibiting legitimate access thereby causing a poor user experience.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include robot mitigation efforts to cause an increase in computational resources e.g. central processing unit CPU cycles required for automated agents to access content on webpages. Automated agents also referred to as automated users intelligent agents robots scrapers indexers or bots generally refer to a computer program configured to accomplish an automated task. Web scraping and indexing techniques can include different levels of automation and sophistication that enable automated agents to collect content from static and dynamic webpages.

Examples of common web scraping methods include expression matching Hypertext Transfer Protocol HTTP request posting retrieving content generated by client side scripts using Document Object Model DOM parsing data mining using HyperText Markup Language HTML parsers to parse HTML pages retrieving metadata and the like using semantic annotation recognition etc.

Imposing limitations on an automated agent using economics such as computational economics makes it such that there is additional cost incurred on the client side to retrieve information from the webpage. Such imposed limitations may be configured to cause additional cost that will be minimal to a human user accessing the website via a client web browser as human users will find any delay imperceptible considerably undetectable or detectible but de minimis e.g. below some specified threshold considered to be acceptable whereas an automated agent will be required to do work to come up with a specific result in order to retrieve the information. Driving such work to the automated agent increases the computational resources required to gain access to content and may cause the automated agent to be dis incentivized to accessing the website and may direct the automated agent to interacting with an application programming interface API instead of the website.

Example embodiments presented herein disclose methods and systems for driving up the computational costs for an automated agent to traverse a webpage in efforts to scrape and or index the webpage content. Where encryption is computationally inexpensive to perform on the server side and decryption is computationally expensive to perform on a client side where requiring client side decryption is relatively imperceptible to a human user of the client and relatively costly for the automated agent client. An example technique for increasing client side efforts that impose high computational requirements on automated systems but only take a short time frame to complete for example 20 100 milliseconds for the human user is barely if at all noticeable. However for the automated agent that is coded with the task of cataloging a webpage every short time frame per catalog item on the webpage will amount to a significant amount of effort and time such that the automated agents will be dis incentivized from continuing to interact directly with the website in order to scrape the content and generally will be able to make fewer web page requests per time period due to the additional time required to process each page. The time frames can be shorter or longer than the example above perhaps by several magnitudes depending on the state of computational abilities of systems used by robots and or users.

For the purpose of maintaining values and information related to variable objects on an electronic marketplace a system providing a website e.g. a server hosting the website may be equipped to handle the amount of traffic that comes from not just a human user but also an automated agent that is continuously and constantly accessing the website to index the values and information. Such a mass of traffic causes inefficiencies and failures that are costly on the server. In example embodiments a server can generate a webpage requested by a client that includes encrypted content unencrypted content and executable instructions that when executed cause the client to perform an algorithm for calculating a decryption key for the encrypted content and provide that content to the client with the unencrypted content upon proper decryption.

The encryption algorithms can be publically available algorithms that have a high computation rate. For example the algorithm can be embedded into script that is included with the webpage to be executed to do the actual decryption. In example embodiments the encryption algorithm may be used as a method of retrieving or calculating a decryption key such that the webpage can be downloaded with the encrypted content and the necessary script such as JavaScript to decrypt the encrypted content as the webpage loads. As this process will be unproductive and costly to an automated agent the server can provide the automated agent with a more efficient method of retrieving content by directing the automated agent to an application programming interface API that can be controlled by the server administrator or owner that will enable better control of hardware resources that can be dedicated to the API to interact with the automated agents.

In some such example embodiments the server administrator can provide a web API that is open to automated agents to a certain extent for example a query limit could be placed on the automated agent and after the limit is reached the automated agent could pay for additional queries. In such example embodiments the automated agent would create an account with the API and have access to structured data content such that the automated agent would be incentivized to interact directly with the API for efficiency and economic justifications.

Example embodiments can relate to commercial websites that include content related to electronic marketplaces where valuable metrics such as prices user reviews user purchases availability of products statistics user information and other variables or measures of data and objects available on the electronic marketplace or website with user metrics or valuable information. Alternative example embodiments may include non commercial websites and databases that include metrics data information and the like that are relevant content to be encrypted. The variable objects can include differentiable properties or derivatives of the objects such that the data values or information may be measured or determined as a function of how they change as different properties or inputs relating to that object change. For example the price of an item or object may vary according to the amount of items available at any given time if the number of items is consistently decreasing the price of the item may be varied based on different metrics. For example a price may be increased if the number of items is decreased or a price may be decreased as the number of items decreases depending for example on the business metrics associated with the item buyers and or sellers. Alternative metrics and or properties may be used as required or desired.

In various embodiments the communication system is illustrated as applications configured on a user device and operably interconnect to a server apparatus via a network such as the Internet . In the instant example embodiment the user device is configured to run a client for initiating communication with the server via the Internet. The client could also be an automated agent such as a bot using a device to interact with the server via the Internet .

The server can be implemented in a hardware apparatus for example a computer or computer system and may be implemented as a software application running on the computer or computer system. In alternative example embodiments one or more clients may be operably interconnected to one or more servers or clusters via a network or intermediary networks and may similarly communicate with other destination devices coupled to the network or intermediary networks.

The user devices and can include a desktop personal computer workstation laptop personal digital assistant PDA cell phone or any Wireless Application Protocol WAP enabled device or any other computing device configured to interface directly or indirectly to the Internet . The client may run a network interface application or software application which can be for example a browsing program to enable users to locate and access information provided by a server. Such a server can be a web server where the browsing application is primarily configured for use of the World Wide Web but could also access information in private networks or files in file systems. The client could also run a WAP enabled browser executing on a cell phone PDA other wireless device or the like. The network interface application can allow a user of client to access process and view information and documents available to it from servers in the system such as the server .

A human user and or an automated agent can control e.g. via user input and or automated instructions a respective client to send a request message to a server with a request for a specific resource content information or the like using HTTP. The request messages and are electronic request messages submitted over the Internet via the respective clients and are provided to the server for processing. The server can be configured to process a request in many ways and respond to the request for example by providing the content of the resource or a message disclosing an error or other action if the server will not or is not able to provide to content. For example 1xx to 5xx response status codes used in HTTP responses to specify one of five classes of response.

The server may respond to the web clients in the same or different manner or a combination of the two. The server can send a response message to web clients where in this example the response messages and include the requested data such as the webpages and . A user using the user device could for example view the webpage and see a variable object such as a price of an item where the price is listed as 9.99.

A computer or computer system can act as both a client and a server at the same or different times and is able to both request and respond to communications. In various embodiments the web browser or web crawler can be located on a user device such as a workstation personal computer mobile device or other device configured to run a client.

For example a client being a web browser running on a user side device may request content from an application running on a server side device that hosts the content. The client submits a request message to the server and the server returns a response message to the client where the server s response message is configured to carry information such as the status of the request the requested content and or additional information content or action per the communication. Alternative exemplary embodiments may disclose a client being executed on a remote server e.g. via the Silk browser model .

The web server can use or be operably interconnected with web services such as a recommendation service an advertisement service or other services that may be required or desired services such as a Web Service API. The web server can further communicate or be operably interconnected to an item database which could be a web service reside on the web server or reside on a separate database server or set of servers. The item database can be configured to store or retrieve data for content included on websites hosted by the web server for providing said content to a client communicating with the web server.

Various embodiments can include the web server also being operably interconnected with an application programming interface API that can specify methods for software components to interact with each other. The API enables one application to communicate with at least one remote application over the Internet or other such private or public network based on a set of instructions. The API can be located on the same or a different server as the system providing the website . The API can include one or more procedural libraries including for example sets of instructions for data structures classes routines variables and other such sets of functions that enable interaction with specific software components or instructions for specific tasks. Example embodiments may enable an automated agent to circumvent the computational requirements discussed throughout by directing the automated agent to interact directly with the API. The API can instruct an automated agent to interact with the server in a specified fashion prescribed by the API specification.

As the automated agent is running on a network node or computer the computer s computational resources is at stake when the automated agent is required to satisfy certain requirements for example such as receiving an executable program execute the program and return the results. As the computer s central processing unit CPU or processor performs these calculations and logic functions or directs resources to do so the computer s performance will suffer with respect to the number and difficulty of the computations required. As instructions are executed on the CPU resources are used as a finite number of resources are available additional computation cost that is imposed on the computer will lead to less efficiency and more delay. The extraneous computational work caused to the automated agent will limit the capabilities of the computer and cause resource problems related to time or clock cycles bandwidth hardware space CPU space memory space etc. These limitations will in turn lead to limitations being placed on the automated agent that halts or delays the automated agent from excessive scraping use.

Enabling and or directing automated agents to interact directly with an API allows the API to describe prescribe the expected behaviors and provide for the actual implementation libraries for such set of rules.

Some such embodiments can allow the server administrator to charge for access to the API. For example the server could restrict access to the API unless the automated agent is authenticated where the authentication can take many forms such as a user name and password or more commonly used in the presence of automated agents a token sent by the automated agent with the request. Upon receipt of the request and token the server authenticates the automated agent and responds to the request.

In situations where an identifier of the client has been recorded as an automated agent when the client sends a request to the server the server can respond in multiple ways one of which is HTTP server code such a redirect code to direct the client to another resource or website such as an API. Other exemplary embodiments allow for the server in response to a request to return a different webpage other than the webpage requested that would direct an automated agent to the API or provide a directive via a meta tag in the header of the HTML document that will provide hints or directives to the client.

In the area of APIs related to website development examples of a web API or web service define request messages and the structure of response messages enabling data and or content to be shared among applications and the like. A web API may be defined as a set of Hypertext Transfer Protocol HTTP request messages and the response message structure can be defined in an Extensible Markup Language XML type format JavaScript Object Notation JSON and or design paradigms such as Representational State Transfer REST while other currently known or hereinafter developed protocols and or design models relating and or applicable to the instant invention. Information on an API can be released for general use or such information on the API can be protected or concealed from general use making it application specific a combination of the two is similarly possible.

In various embodiments the web browser will display and or render a webpage which is at least one document or page associated with a website that is primarily accessible via a web address such as a Uniform Resource Locator URL .

The website s URL may be entered directly into the web browser s address bar in order to request a webpage from the webserver. Mechanisms for utilizing the webpage can include standard tools proprietary tools or a combination of the two. Some such exemplary tools include a back button and a forward button enable a user to access previously viewed webpages associated with the website. A home button enables a user to maneuver to the main page of the website. A search bar is provided as a function on example embodiments of a website in order to receive input terms or variables associated with the user s requests.

In the example embodiment the webpage includes a search for the term books in the search bar . In this example embodiment the search request entered into the web browser was sent as a request message to a web server such as the web server in and the web browser awaits a response message from the web server. Upon receiving a response message from the web server the web browser can render or display the response as provided by the response message. In the instant example the web browser displays the requested information for the search term Books. Three search requests are rendered on the webpage including Book A Book B and Book C . Each of the three search requests has a corresponding price associated with the book where Book A is priced at 7.99 Book B is priced at 4.99 and Book C is priced at 6.99. The instant example embodiment further illustrates the additional content associated with each of the three search requests where Books A B and C have corresponding ratings and reviews .

Web browser includes a web page that displays the requested content being masked content of variable objects where the requested content is shown as encrypted information or content of the variable object e.g. the prices . Web browser includes a web page that has completed rendering all objects such as the unmasked variable objects 

As the browser downloads the webpage it parses the HTML which tells the browser whether the browser needs to download other images scripts styles etc. builds the Document Object Model DOM and renders the webpage on the display screen of the user device. If the browser encounters a script such as JavaScript code the browser will pause the HTML parsing and execute the script before continuing to build the DOM and render the webpage.

The variable object decryption key is a key such as a cryptography key that provides a parameter that determines the output of an algorithm for example the key provides the information necessary to transform ciphertext into plaintext during decryption.

Valuable assets such as the prices ratings reviews or any other content associated with the webpage that is desired to be hidden or made more difficult for an automated agent to mine or index the content. In the example embodiment such valuable assets can be encrypted on the server side according to embodiments presented herein and can be provided to the web browser as a variable object such as variable objects which are the encrypted plaintext of prices 

JavaScript can be used to program functions to be embedded or referenced in HTML pages. As JavaScript is configured to run locally on a user s browser the browser can execute the JavaScript code to render or display the requested data. In alternative example embodiments the web browser is configured to render the webpage content according to the HTML instructions of the webpage or according to a JavaScript script embedded within the HTML or called or referenced as a file within the HTML of the webpage. Other such scripting languages and or calls currently known or hereinafter developed can similarly be used or interchanged in accordance with embodiments presented herein.

Alternative example embodiments include web browsers consisting of split architecture where some portion of the processing is performed on the web server and some portion of the processing is performed locally on a device running the web browser. The client browser is generally configured to complete the entirety of the processing at the web browser with the option to turn off any or all server side processing.

Returning to an embodiment of the process includes encrypting the variable objects with the generated key. Various example embodiments include receiving a pre encrypted variable object or one of multiple variable objects. The pre encrypted variable objects may or may not be received from the same or a different third party source from which a pre generated key was received. Returning to an embodiment of the process includes masking the variable objects on the webpage based on the encryption algorithm. The variable objects can be embedded in a secret field such that the content or value of the variable object cannot be seen for example the value could be a modern hash or a long stream of integers that is different from the value of the content. Returning to an embodiment of the process includes incorporating the code used for computing the generated key on the webpage. Alternative embodiments of the process may include providing the script to be parsed in order to decrypt the generated key on the webpage for use in decrypting the encryption algorithm. Returning to an embodiment of the process includes unmasking the variable objects on the webpage after successful decryption. Alternative embodiments of the process may include providing the variable object to the client for use in unmasking the variable object on the webpage after the successful decryption.

In alternative example embodiments where the client is a web crawler operated by an automated agent such as the client as illustrated and described in connection with the client could be directed to or opt to interact directly with an application programming interface API instead of interacting with a system hosting the website. In some such example embodiments the server would forgo the decryption process altogether or simply provide the decryption key without the need for solving a computational problem such that the automated agent can receive the content in a more efficient manner. In alternative example embodiments the automated agent could receive the unencrypted content in the form of structured data.

Various exemplary embodiments can encrypt desired content on the server side and generate a unique key per webpage that is requested and rendered. The unique key is then used to encrypt the data and the algorithmic choice for deciphering the unique key can be chosen based on the magnitude of cost to the server to encrypt the content versus the magnitude of cost to the client to decrypt the content. The algorithmic choice can be generated dynamically in response to a request for content. For example based on the amount of content requested where when more content is requested an algorithm with a high magnitude of computational resources requirements will be embedded in the HTML of the web document thereby causing the client to perform additional work. In some embodiments the server administrator or other authoritative party may update or tune the computational problem being provided to the client such that the problem is made more difficult as technology improves or for the purpose of making the process more computationally expensive or time consuming for automated agents.

Example embodiments of algorithms to be executed by a client in order to decrypt variable objects encrypted on the server side or provided in a pre encoded fashion could include a hash function problem which requires a keyed hash message authentication code HMAC requires calculating a message authentication code MAC using a cryptographic hash function and a secret cryptographic key. One technical advantage achieved by a problem such as the problem is that the server can generate the problem with minimal computational resources relative to the resources required by the client statistically speaking to solve the problem. For example the correct value for Rand can be generated as a random number a number from a sequence or otherwise with minimal computational resources. However because a hash function is effectively a one way function without prior access to the value for Rand a client may on average perform a large number of operations before a correct value for Rand is found.

Alternative example embodiments could include a public key cryptography problem such as RSA which is an algorithm for public key cryptography that involves the factoring of large integers. Examples of RSA can include the known product of two large prime numbers along with an auxiliary value as the public key for the two prime numbers. As with the problem the problem provides technical advantages due to the difference in computational resources needed to generate a private key relative to those required on average to determine a private key given a public key.

Alternative example embodiments could include a particular type of mathematical system making use of exponents that is often used with cryptography. Such a discrete logarithm problem is known as a difficult problem when the numbers involved are very large causing expensive computational efforts. However as with the problems and generation of the problem is in terms of required computational resources computationally much easier to generate than to solve. Alternative computational problems may include problems that are computationally inexpensive to use for encrypting data on a server side device and magnitudes more computationally expensive for decrypting the data on a client side device. For example a discrete logarithm problem using a finite field defined by the algebraic properties of an elliptic curve may be used.

Alternative computational tasks may include a problem having been generated based on a first algorithm with a first time complexity and a second algorithm with a second time complexity that is asymptotically larger than the first. For example there is some N for which T is greater than T for all n greater than N. T is the time complexity of the second algorithm and T is the time complexity of the first algorithm both measured on either an average case basis or worst case basis. In some embodiments the limit of T T approaches infinity as n approaches infinity.

In some embodiments a brute force attack may be required in order to decrypt the key. For example where the response to the request message provides a portion of the key or a partial key and requires the client to use a brute force attack in order to decrypt the key. Further use of asymmetric cryptography could be employed that does not require brute force attack for encryption but requires a client to compute n computations where n is a tunable number in order to decrypt the key. Other embodiments may provide information related to the key such as the number of bytes for the key a prefix and or additional properties which then requires the client to solve for the key in totality based on the provided information.

Alternative example embodiments may include different encryption schemes such as public key encryption or private key encryption or other currently known or hereinafter developed methods of content encryption can be implemented according to exemplary embodiments presented herein. Similarly different cryptographic key types may be used as desired. Alternative computational mechanisms algorithms and cryptographic methods herein known or hereinafter developed may be used to encrypt or conceal the content requested by the user.

Further example embodiments could include a computational task provided to an automated agent can include providing an algorithm that is non polynomial. For example a set or property of problems for which no polynomial time algorithm is known or for which no polynomial time algorithm exists such as problems that are provably difficult and problems that are provably unsolvable.

Further example embodiments can include an algorithm to create a random salt per page for example a unique data element that can be placed in the middle of a document that requires computation for every single webpage that is requested and loaded.

In addition while the present disclosure uses various problems that require more CPU cycles on average to solve than to generate which are provided for the purpose of illustration problems may be created to tax other types of computational resources such as memory. For instance a script with a webpage may encode multiple recursive uses of a function where the number or recursions is configured such that the memory resources needed to solve the problem would not be problematic for a typical client but would be problematic for a robot that may be accessing many more webpages in a given time period. As an explicit example the NFibonacci number may be required to encrypt a price on a webpage. A script may use a recursive function for determining the NFibonacci number. A value for N a positive integer may be selected based on assumptions of memory for clients so that for clients associated with human operators the memory taken to determine the number will not cause a problem but for a robot accessing multiple pages in a short time memory may cause performance issues. A script may further include code for prime factorization algorithms such as trial division wheel factorization Pollard s rho algorithm an algebraic group factorization algorithm such as Pollard s p 1 algorithm Williams p 1 algorithms and Lenstra s elliptic curve factorization algorithm Fermat s factorization method Euler s factorization method a special number field sieve Dixon s algorithm continued fraction factorization quadratic sieve rational sieve general number field sieve Shanks square forms factorization the Schnorr Seysen Lenstra algorithm Shor s algorithm and the like.

Example embodiments can include each price or variable object being encrypted using a different key and or a single key may be used to decrypt all content on the requested webpage. Alternative example embodiments may use a variation of a single key to decrypt some objects on the webpage and a different variation or wholly different key may be used to decrypt other objects on the same or different webpage. Different keys and types of encoding may be implemented for encrypting content on the same or different webpages. For example symmetric cryptography and asymmetric cryptography can be used in order to encrypt the content.

Unless otherwise clear from context when stated that a website has certain characteristics or performs certain operations it is intended to refer to the underlying system that serves the website and not necessarily the collection of documents and other resources that make up the website. The system hosting the website may include multiple different devices and servers such as a web server an application server a database server a storage server and the like.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein the term data store refers to any device or combination of devices configured to store access and retrieve data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some even a majority of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices that may form a distributed system.

The data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices that can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and configured to support a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members used in the above conjunctive phrase at least one of A B and C and at least one of A B and C refers to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C to each be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

