---

title: System and method for fuse enablement of a secure client hosted virtualization in an information handling system
abstract: A client hosted virtualization system includes a processor to execute code, a non-volatile memory, and a switch. The memory includes code to implement a basic input/output system (BIOS) for the CHVS, and code to implement a virtualization manager. The virtualization manager is operable to initialize the CHVS, authenticate a virtual machine image associated with a virtual machine, and launch the virtual machine on the CHVS. The switch is operable to select one of a first state and a second state. The processor operates to execute the BIOS code when the switch is in the first state and to execute the virtualization manager code when the switch is in the second state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898465&OS=08898465&RS=08898465
owner: Dell Products, LP
number: 08898465
owner_city: Round Rock
owner_country: US
publication_date: 20130807
---
This application is a continuation of U.S. patent application Ser. No. 13 104 686 entitled System and Method for Fuse Enablement of a Secure Client Hosted Virtualization in an Information Handling System filed on May 10 2011 which is a continuation in part of U.S. patent application Ser. No. 12 790 547 filed on May 28 2010 now U.S. Pat. No. 8 458 490 issued on Jun. 4 2013 entitled System and Method for Supporting Full Volume Encryption Devices in a Client Hosted Virtualization System David Konetski et al. the disclosures of which are hereby expressly incorporated by reference in their entirety.

The present disclosure generally relates to information handling systems and more particularly relates to fuse enablement of a secure client hosted virtualization in an information handling system.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is an information handling system. An information handling system generally processes compiles stores or communicates information or data for business personal or other purposes. Technology and information handling needs and requirements can vary between different applications. Thus information handling systems can also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information can be processed stored or communicated. The variations in information handling systems allow information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems can include a variety of hardware and software resources that can be configured to process store and communicate information and can include one or more computer systems graphics interface systems data storage systems and networking systems. Information handlings systems can also implement various virtualized architectures.

The following description in combination with the Figures is provided to assist in understanding the teachings disclosed herein. The description is focused on specific implementations and embodiments of the teachings. This focus is provided to assist in describing the teachings and should not be interpreted as a limitation on the scope or applicability of the teachings. Other teachings can be used in this application. The teachings can also be used in other applications and with different types of architectures such as distributed computing architectures client server architectures or middleware server architectures and associated resources.

In the embodiments described below an information handling system can include any instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or use any form of information intelligence or data for business scientific control entertainment or other purposes. For example an information handling system can be a personal computer a PDA a consumer electronic device a network server or storage device a switch router wireless router or other network communication device or any other suitable device and can vary in size shape performance functionality and price. The information handling system can include memory volatile e.g. random access memory etc. nonvolatile read only memory flash memory etc. or any combination thereof one or more processing resources such as a central processing unit CPU a graphics processing unit GPU hardware or software control logic or any combination thereof. Additional components of the information handling system can include one or more storage devices one or more communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse a video graphic display or any combination thereof. The information handling system can also include one or more buses operable to transmit communications between the various hardware components. Portions of an information handling system may themselves be considered information handling systems.

An information handling system can implement a secure client hosted virtualization CHV architecture with a CHV manager that resides in secure memory of the information handling system and that receives secure updates from a managed backend. The CHV manager can launch one or more virtual machines on the information handling system. The CHV architecture can support I O port assignment and I O security policy implementation for the virtual machines. The CHV architecture can also provide a secure interface to security resources of the information handling system to provide pre boot authentication platform hardware and software authentication secure biometric user authentication and other trusted computing features for the virtual machines. The CHV manger can support task oriented devices such that each virtual machine obtains the functionality of the task oriented devices. The CHV manager also can support storage using full volume encryption FVE mechanisms and provide access to common storage devices for multiple virtual machines.

Chipset is connected to and supports processor allowing processor to execute machine executable code. In a particular embodiment not illustrated information handling system includes one or more additional processors and chipset supports the multiple processors allowing for simultaneous processing by each of the processors and permitting the exchange of information among the processors and the other elements of information handling system . Chipset can be connected to processor via a unique channel or via a bus that shares information among processor chipset and other elements of information handling system .

Memory is connected to chipset . Memory and chipset can be connected via a unique channel or via a bus that shares information among chipset memory and other elements of information handling system . In particular a bus can share information among processor chipset and memory . In another embodiment not illustrated processor is connected to memory via a unique channel. In another embodiment not illustrated information handling system can include separate memory dedicated to each of the one or more additional processors. A non limiting example of memory includes static random access memory SRAM dynamic random access memory DRAM non volatile random access memory NVRAM read only memory ROM flash memory another type of memory or any combination thereof.

Graphics interface is connected to chipset . Graphics interface and chipset can be connected via a unique channel or via a bus that shares information among chipset graphics interface and other elements of information handling system . Graphics interface is connected to a video display . Other graphics interfaces not illustrated can also be used in addition to graphics interface if needed or desired. Video display can include one or more types of video displays such as a flat panel display or other type of display device.

I O interface is connected to chipset . I O interface and chipset can be connected via a unique channel or via a bus that shares information among chipset I O interface and other elements of information handling system . Other I O interfaces not illustrated can also be used in addition to I O interface if needed or desired. I O interface is connected via an I O interface to one or more add on resources . Add on resource is connected to a storage system and can also include another data storage system a graphics interface a network interface card NIC a sound video processing card another suitable add on resource or any combination thereof. I O interface is also connected via I O interface to one or more platform fuses and to a security resource . Platform fuses function to set or modify the functionality of information handling system in hardware. Security resource provides a secure cryptographic functionality and can include secure storage of cryptographic keys. A non limiting example of security resource includes a Unified Security Hub USH a Trusted Platform Module TPM a General Purpose Encryption GPE engine another security resource or a combination thereof.

Disk controller is connected to chipset . Disk controller and chipset can be connected via a unique channel or via a bus that shares information among chipset disk controller and other elements of information handling system . Other disk controllers not illustrated can also be used in addition to disk controller if needed or desired. Disk controller can include a disk interface . Disk controller can be connected to one or more disk drives via disk interface . Such disk drives include a hard disk drive HDD or an optical disk drive ODD such as a Read Write Compact Disk R W CD a Read Write Digital Video Disk R W DVD a Read Write mini Digital Video Disk R W mini DVD another type of optical disk drive or any combination thereof. Additionally disk controller can be connected to disk emulator . Disk emulator can permit a solid state drive to be coupled to information handling system via an external interface . External interface can include industry standard busses such as USB or IEEE 1394 Firewire or proprietary busses or any combination thereof. Alternatively solid state drive can be disposed within information handling system .

Network interface device is connected to I O interface . Network interface and I O interface can be coupled via a unique channel or via a bus that shares information among I O interface network interface and other elements of information handling system . Other network interfaces not illustrated can also be used in addition to network interface if needed or desired. Network interface can be a network interface card NIC disposed within information handling system on a main circuit board such as a baseboard a motherboard or any combination thereof integrated onto another component such as chipset in another suitable location or any combination thereof. Network interface includes a network channel that provide interfaces between information handling system and other devices not illustrated that are external to information handling system . Network interface can also include additional network channels not illustrated .

Information handling system includes one or more application programs and Basic Input Output System and Firmware BIOS FW code . BIOS FW code functions to initialize information handling system on power up to launch an operating system and to manage input and output interactions between the operating system and the other elements of information handling system . In a particular embodiment application programs and BIOS FW code reside in memory and include machine executable code that is executed by processor to perform various functions of information handling system . In another embodiment not illustrated application programs and BIOS FW code reside in another storage medium of information handling system . For example application programs and BIOS FW code can reside in HDD in a ROM not illustrated associated with information handling system in an option ROM not illustrated associated with various devices of information handling system in storage system in a storage system not illustrated associated with network channel in another storage medium of information handling system or a combination thereof. Application programs and BIOS FW code can each be implemented as single programs or as separate programs carrying out the various features as described herein.

CHV manager operates from the platform level to initialize CHV system on power up to launch virtual machines and and to manage input and output interactions between virtual machines and and client platform hardware . In this respect CHV manager functions similarly to a combination of a platform BIOS and a virtual machine manager or hypervisor. As such CHV manager is stored in a non volatile memory not illustrated of client platform hardware such as a firmware ROM embedded on the system board that is separate from the mass storage device used to store the images for virtual machines and and that retains the code stored thereon when client system is powered. In a particular embodiment CHV manager provides that the launching of virtual machines and is secure using digital signatures to verify the authenticity of the virtual machine images for virtual machines and . For example client system can include hardware extensions with security capabilities to ensure secure launch and execution of virtual machines and such as Trusted Execution Technology TXT or other hardware extension technology. In a particular embodiment CHV manager operates with GPE to fully encrypt virtual machines and in storage. By operating CHV manager from the platform level client system is secure from malicious software or virus attacks that might otherwise affect the operations of client system . Moreover by encrypting virtual machines and CHV system provides a tamper resistant storage method for the images of virtual machines and .

In an optional embodiment virtual machine hypervisor can be operated at protection level to launch virtual machines and . Note that one of CHV manager or virtual machine hypervisor is selected to launch virtual machines and and that where one of the CHV manager or the virtual machine hypervisor is operating to manage the virtual machines the other is not operating to manage the virtual machines. When launched virtual machines and each include associated user data and associated user preference information and associated applications and and associated operating systems and respectively. Thus each virtual machine and is isolated from the others operates as an individual information handling system on client system and shares the resources of client platform hardware . The operating CHV manager or virtual machine hypervisor functions to manage the access of each of virtual machines and to the resources of client platform hardware . Virtual machines and can include anti virus software not illustrated that is tailored to the associated OSs and thus providing an additional layer of security to the operations of CHV system .

The configuration of client platform is determined by the particular devices and architecture of client platform hardware and the content of trusted platform firmware and CHV manager . The devices and architecture of client platform hardware is determined at the time of manufacture of client system . The content of trusted platform firmware and CHV manager is installed on a non volatile memory storage device not illustrated in client platform hardware at the time of manufacture. In a particular embodiment the manufacturer or a user of client platform determines that the client platform is intended for use as a client hosted virtualization platform and initiates a hardware function to toggle an element of fuse switch bank to enable CHV manager . For example the manufacturer can provide client platform with CHV manager enabled by toggling the element of fuse switch bank prior to shipment to the user. In another example the manufacturer can provide client platform with BIOS enabled by shipping the client platform to the user with the element of fuse switch bank intact such that client platform boots using BIOS . Here the manufacturer can provide a way for the user to toggle the element of fuse switch bank to enable CHV manager . For example the user can be presented with an option to enable CHV manager the first time client platform is turned on or client platform can include a BIOS option to enable the CHV manager.

In a particular embodiment toggling the element of fuse switch bank permanently enables CHV manager . Here each time client platform is booted trusted platform firmware performs low level system boot activities and then passes control to CHV manager . An example of permanently enabling CHV manager can include writing to a particular bit or set of bits in a write once device such as by blowing a hardware fuse in fuse switch bank that permanently provides for a boot path that passes control to CHV manager locking a boot block writing to a programmable ROM such as an EPROM or a flash device providing another type of hardware switch or a combination thereof. Another example can include providing a particular bit or set of bits in fuse switch bank in a platform ROM not illustrated that is not re writable. In the case of blowing a hardware fuse the hardware fuse can be blown at the time of manufacture of client system or by a user of client system at a later date. In the case of providing bits in a platform ROM the bits can be provided at the time of manufacture of client system . In another embodiment toggling the element of fuse switch bank can be performed by a software function. For example a hardware hash can be erased a state authentication certificate can be authenticated by TPM another software function can be performed or a combination thereof.

In another embodiment client platform includes a mechanism to selectively override the permanent enablement of CHV manager such that when client platform is booted BIOS performs low level system boot activities and then passes control to virtual machine hypervisor . For example the particular bit or set of bits in fuse switch bank can reside in a re writeable non volatile memory such that client platform can be reprogrammed to disable CHV manager . In another example a boot option provided by trusted platform firmware can prompt a user of client platform as to whether to boot to CHV manager control or to virtual machine hypervisor control. In yet another example a hardware jumper a hardware switch or a BIOS settable switch can be provided whereby in a first position client platform boots using BIOS and in a second position the client platform enables CHV manager .

When control of client system is passed to the CHV manager CHV manager launches service OS to establish the controlled virtualization environment including launching virtual machines and and controlling the elements of client platform hardware . Service OS supports I O port assignment between virtual machines and and client platform hardware and provides a secure interface to TPM USH and GPE for pre boot authentication platform hardware and software authentication secure biometric user authentication and other trusted computing features for the virtual machines. Service OS also supports task oriented devices and FVE storage for virtual machines and and provides access to common storage devices. Policy manager implements security policies between virtual machines and and the devices of client platform hardware . Because the content of trusted platform firmware and CHV manager resides on the non volatile memory storage device the trusted platform firmware code and the CHV manager code is executed securely within platform level and the basic operation of client system is less susceptible to attack from malicious program code viruses worms or other corrupting programs and client system embodies a secure CHV architecture.

If the information handling system has a BIOS boot option enabled the YES branch of decision block is taken and a decision is made as to whether or not the BIOS boot option has been selected in decision block . If not the NO branch of decision block is taken the boot process runs the CHV manager in block and the method ends in block . If the BIOS boot option is selected the YES branch of decision block is taken the boot process proceeds to boot in BIOS in block and the method ends in block . For example a user of client platform may select a boot option to boot client platform with BIOS and client platform can then boot using BIOS and can then launch virtual machine hypervisor or another conventional operating system on the bare system.

The content of trusted platform firmware and CHV manager is alterable by reprogramming the non volatile memory storage device permitting revision control of the contents of trusted platform firmware and CHV manager . For example firmware code associated with the devices of client platform hardware such as drivers application programming interfaces APIs or user interfaces UIs in trusted platform firmware or the BIOS code associated with BIOS can be periodically updated or modified. Similarly CHV manager code associated with service OS drivers or update manager or policy profile data associated with policy manager can be periodically updated or modified. Here the fact that trusted platform firmware and CHV manager are stored in the non volatile memory storage device ensures a level of security related to the ability to perform updates.

In another embodiment update manager functions in cooperation with TPM to provide an encryption and authentication capability with regard to updates to trusted platform firmware and CHV manager . Here the capability to perform an update is enabled by a locked platform feature where the key to unlock the feature is associated with a public key infrastructure PKI . Updates to trusted platform firmware or to CHV manager include key information. When update manager receives an update to trusted platform firmware or to CHV manager update manager provides the key information to TPM to authenticate the update. If the update is authenticated then update manager proceeds to implement the update. If the update is not authenticated the update manager does not implement the update. In a particular embodiment updates to trusted platform firmware or to CHV manager are also encrypted and TPM decrypts authenticated updates prior to being implemented by update manager .

CHV update system communicates with client system through network interface which is connected to network . In a particular embodiment CHV update system determines when a trusted platform firmware or a CHV manager in client system is in need of an update and CHV update system pushes the needed update to firmware or to CHV manager and an update manager not illustrated in CHV manager performs the update to client system . In another embodiment client system periodically polls CHV update system to determine if updates are available for firmware or for CHV manager . If an update is available then client system pulls the available update for firmware or for CHV manager and the update manager performs the update to client system .

CHV update system functions to create and maintain the updates for client system . As such the components that make up firmware and CHV manager are stored and maintained in a current state in CHV update manager . Thus the operating code for firmware and CHV manager is maintained and updated with new capabilities fixes to defective capabilities patches to insecure capabilities other updates or a combination thereof. For example a development team not illustrated can maintain the operating code for a service OS storing modified images in service OS image can store virus definitions for an anti virus capability of the service OS in virus definitions database and can store drivers associated with the various hardware components of client system in drivers database . CHV update manager combines the contents of service OS image virus definitions database and drivers database to provide updates for firmware and CHV manager and encodes the updates with PKI infrastructure to provide a secure update for client system . Client image compiler receives the secure update from CHV update manager and combines the secure update with updated virtual machine images from virtual machine image database and with updated user profiles from user profile database to create a client image for client system . Client image compiler stores the client image in client image database to be pushed to or pulled from client system .

Policy manager enforces granular control of access to Ethernet NIC WiFi NIC USB port and other I O resources. Policy manager permits certain types of access requests and denies other access requests and permits conditional access to the various resources of client platform hardware . As such I O policy information and can provide for unrestricted access blocked access or conditional access depending on the resource on the user of the respective virtual machine or on the content included in the access request on the target of the access request or on other conditions as needed. For example I O policy information may dictate that virtual machine has unrestricted access to Ethernet NIC may not access USB port and has conditional access to WiFi NIC such that only access to a corporate WiFi network is permitted. Other examples include permitting access to USB port only when the device connected to the USB port is an authenticated storage device or when the device connected to the USB port is a human interface device such as a mouse or a keyboard. I O policy information and can also provide for user consent each time a resource is accessed and for logging of file transfers to and from the resource. The content transferred into and out of the respective virtual machines and can also be filtered such that inbound transfers can be checked for malware or viruses and outbound transfers can be checked to prevent data leaks.

Pre boot authentication provides a way to authenticate CHV system prior to the launch of virtual machines and such that only authenticated users gain access to the devices and resources of CHV system . illustrates an embodiment of a method of providing pre boot authentication in CHV system . Here BIOS generates a pre boot authentication request to pre boot authentication module . Pre boot authentication module includes a sequestered operating environment that prompts the user for authentication. The user provides the authentication information via authentication device . Pre boot authentication module verifies the authenticity of the authentication information and if the authentication information is verified generates an authentication object and generates a pre boot authentication response that sends the authentication object to BIOS . BIOS generates an authentication object store that stores the authentication object in SMRAM . Upon completion of the authentication object store BIOS passes execution to CHV manager .

When CHV manager launches virtual machine the user of virtual machine needs the authentication object in order to gain access to the devices and resources of CHV system . To obtain the authentication object authenticator generates an authentication request to BIOS in system management mode SMM . In response to a first authentication request the BIOS generates an authentication object transfer sending the authentication object from SMRAM to secure post office box module in CHV manager . CHV manager then generates an authentication response to send the authentication object from secure post office box module to authenticator thus providing virtual machine with authenticated access to the devices and resources of CHV system . Secure post office box module retains the authentication object for subsequent authentication requests such as authentication request generated by authenticator in virtual machine in response to which CHV manager generates the authentication response to send the authentication object to authenticator . In another embodiment not illustrated SMRAM retains the authentication object and provides the authentication object to secure post office box module for each subsequent authorization request. In another embodiment not illustrated SMRAM and secure post office box module can represent a common secure memory space for CHV system thus eliminating the need for the authentication object transfer between SMRAM and secure post office box module .

When one or more of virtual machines and have need of the service of task oriented device they generate a task oriented device transaction from device drivers and that is received by device driver interface . The task oriented device transaction preferably includes a header and data. The header identifies the type of transaction the source of the transaction other information about the transaction instructions for the execution of the transaction or a combination thereof. For example where task oriented device is an encryption decryption engine or security processor the header can include an encryption key identifier a decryption algorithm identifier an action identifier other information used by an encryption decryption engine or security processor or a combination thereof. The data includes the information to be processed by task oriented device . Device driver interface generates a task oriented device request that is received by CHV task manager . The task oriented device request includes the header and data from the task oriented device transaction.

CHV task manager operates to identify the source of the task oriented device request to determine a priority and to place a prioritized task oriented device request into the virtual machine transaction queue or associated with the particular virtual machine or that generated the task oriented device transaction. The prioritized task oriented device request includes the header and the data from the task oriented device transaction a task identifier field and a priority field. When a particular prioritized task oriented device request reaches the head of the particular virtual machine transaction queue the virtual machine transaction queue issues a current task oriented device request to CHV device driver . CHV device driver generates an issued task oriented device transaction to task oriented device .

Task oriented device performs the requested task identified in the issued task oriented device request and issues a task oriented device response to CHV device driver . CHV device driver forwards the task oriented device response to CHV task manager . CHV device task manager matches the task oriented device response with the associated prioritized task oriented device request to determine the virtual machine or that issued the associated task oriented device transaction and forwards the task oriented device response to device driver interface for response to the associated virtual machine or .

When one or more of virtual machines or issue a storage request the virtual machine generates a storage transaction from storage drivers or that is received by storage driver interface . Device driver interface determines if the storage transaction is intended for FVE storage device or for an unencrypted storage device not illustrated . If the storage transaction is intended for FVE storage device device driver interface forwards the storage request to GPE driver which in turn forwards the storage request to GPE . If the storage request is a write request then GPE encrypts a data portion of the storage request in accordance with information in a header portion of the storage request and stores the encrypted data on FVE storage device . If the storage request is a read request then GPE issues the storage request to FVE storage device and FVE returns encrypted data to GPE . GPE decrypts the encrypted data based upon information in the header portion of the storage request and forwards decrypted data to GPE driver . GPE driver forwards the decrypted data to storage driver interface which returns the decrypted data to the requesting virtual machine or .

When referred to as a device a module or the like the embodiments described above can be configured as hardware. For example a portion of an information handling system device may be hardware such as for example an integrated circuit such as an Application Specific Integrated Circuit ASIC a Field Programmable Gate Array FPGA a structured ASIC or a device embedded on a larger chip a card such as a Peripheral Component Interface PCI card a PCI express card a Personal Computer Memory Card International Association PCMCIA card or other such expansion card or a system such as a motherboard a system on a chip SoC or a stand alone device . The device or module can include software including firmware embedded at a device such as a Pentium class or PowerPC brand processor or other such device or software capable of operating a relevant environment of the information handling system. The device or module can also include a combination of the foregoing examples of hardware or software. Note that an information handling system can include an integrated circuit or a board level product having portions thereof that can also be any combination of hardware and software.

Devices modules resources or programs that are in communication with one another need not be in continuous communication with each other unless expressly specified otherwise. In addition devices modules resources or programs that are in communication with one another can communicate directly or indirectly through one or more intermediaries.

Although only a few exemplary embodiments have been described in detail above those skilled in the art will readily appreciate that many modifications are possible in the exemplary embodiments without materially departing from the novel teachings and advantages of the embodiments of the present disclosure. Accordingly all such modifications are intended to be included within the scope of the embodiments of the present disclosure as defined in the following claims. In the claims means plus function clauses are intended to cover the structures described herein as performing the recited function and not only structural equivalents but also equivalent structures.

