---

title: Dynamic application security verification
abstract: Disclosed are various embodiments for performing security verifications for dynamic applications. An instance of an application is executed. During runtime, it is determined whether the application is accessing dynamically loaded code from a network site. In one embodiment, the access may be detected via the use of a particular application programming interface (API). In another embodiment, the access may be detected via the loading of downloaded data into an executable portion of memory. A security evaluation is performed on the dynamically loaded code, and an action is initiated responsive to the security evaluation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09591003&OS=09591003&RS=09591003
owner: Amazon Technologies, Inc.
number: 09591003
owner_city: Seattle
owner_country: US
publication_date: 20130828
---
Mobile applications are typically obtained through an application marketplace that features the offerings from a multitude of developers. Customers may utilize the application marketplace for a variety of reasons. For example a customer s mobile device may be preconfigured to utilize a particular application marketplace thereby making obtaining applications via the particular application marketplace the easiest option. In some cases the customer s mobile device may be preconfigured such that applications may only be obtained via the particular application marketplace. Ultimately customers may prefer to utilize an application marketplace due to a perception that applications obtained via the marketplace are relatively safer. In other words customers may perceive that the proprietor of the application marketplace is trustworthy and therefore the applications offered via the application marketplace are trustworthy.

The present disclosure relates to security verification for mobile applications. Customers may perceive that applications offered via an application marketplace are safe and that the proprietor of the application marketplace has vouched for the security of the offered applications. Thus it is in the interest of the proprietor to perform security verifications upon the applications that are offered. However security evaluation for some applications may be a challenging proposition. While some applications are monolithic allowing their code to be evaluated in their entirety before customer use other applications may be dynamic with portions of code being downloaded after application is installed in the customer s device. In other words the proprietor of the application marketplace never has the opportunity to evaluate the subsequently downloaded code for security risks.

As a non limiting example an application may be offered that appears to be a game involving salamanders in a blender. The application may seem to innocuously request various security permissions on the customer s device. However once the application is executed on the customer s device the application may download and execute malicious code in the background that gathers and transmits passwords credit card numbers and other private information unbeknownst to the customer. One na ve solution to this issue is to block any application having dynamic code from being offered by the application marketplace. While obviating the security risks such a solution ignores the many benefits afforded to developers through the use of dynamic code. For example the use of dynamic code may provide more flexibility and faster release times for developers. Otherwise for every minor code tweak the developer would be required to submit a new version of the application for consideration by the application marketplace.

Various embodiments of the present disclosure provide approaches to perform security verifications on dynamic applications. Code obtained by a dynamic application is identified. In one embodiment applications are written using an application programming interface API that distinguishes obtained code from obtained data. In another embodiment applications are sandboxed and the execution environment of the sandbox tracks whether obtained data is stored in an executable code area of system memory or a data area of system memory. Once the obtained code is ascertained the code may be evaluated for security risks or compared to code that has previously been evaluated. In some cases the detected security issues may be automatically repaired or the application may be disabled and or removed from the application marketplace.

With reference to shown is one example of a client device rendering a user interface upon a display according to one embodiment. The user interface is generated by the game application involving salamanders in a blender discussed in the aforementioned example. According to the principles of the present disclosure a security verification service has detected that the game application has loaded executable code that seeks to improperly record private information from the client device . Consequently the security verification service has modified the application to neutralize the security risk. A user interface component rendered upon the user interface informs users that the application has been modified to address the security risk. Subsequently the user may be able to continue using the application after the malware portion has been neutralized. Although the user interface component is shown in the example of in other examples the application may be modified blocked terminated and so on without a user notification being provided. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Turning now to shown is a networked environment according to various embodiments. The networked environment includes a computing environment a computing environment and one or more client devices in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks cable networks satellite networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a hosted computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include an application marketplace system a security verification service a sandboxed environment and other applications services processes systems engines or functionality not discussed in detail herein. The application marketplace system is executed to facilitate distribution of applications from a plurality of developers. In one embodiment the application marketplace system is managed by a single entity referred to herein as the proprietor. The application marketplace system may employ a security verification service to perform security evaluations upon the applications . When the security verification service confirms that an application includes no security risks the application may be offered by the application marketplace system .

The security verification service may be executed to perform these evaluations. To this end the security verification service may employ various tools to determine whether an application contains a security risk. For example the security verification service may detect whether the application communicates with known malicious servers the security verification service may detect signatures of known malicious code in the application or the security verification service may detect known behavior or patterns of behavior from the application that is malicious. In some embodiments the security verification service may employ third party tools that perform other types of content or code inspection. In some embodiments the security verification service may be configured to repair or otherwise modify the application to eliminate or otherwise neutralize detected security risks.

Where an application is monolithic or self contained the security evaluations may be relatively straightforward. Various examples of security evaluations are disclosed in U.S. patent application Ser. No. 13 926 211 filed on Jun. 25 2013 and entitled ANALYZING SECURITY OF APPLICATIONS which is incorporated herein by reference in its entirety. However where an application is a dynamic application that loads code obtained from an external site the security evaluations may be more challenging as the code of the application may change after the application is downloaded to a client device .

In one embodiment the security verification service as a part of an application ingestion process may execute an application instance within a sandboxed environment . The sandboxed environment in this situation may correspond to a virtualized environment that emulates a client device . Alternatively the sandboxed environment may correspond to an execution environment that monitors code execution and restricts application access to data and or system services. The sandboxed environment may include executable code memory and data memory . As the application instance executes within the sandboxed environment the security verification service may detect dynamically loaded code that is obtained by the application instance from an external network site . Accordingly the security verification service may perform a security evaluation on the dynamically loaded code . Although the security verification service that is resident in the computing environment has been described it is understood that portions of the security verification service may be executed in the client devices as well. Additionally at least a portion of the security verification service may instead be implemented in network devices within the network e.g. firewalls load balancers routers and so on.

The data stored in the data store includes for example application marketplace data applications dynamically loaded code data previous security evaluations security evaluation configuration data and potentially other data. The application marketplace data includes data supporting the functionality of the application marketplace system including a plurality of offerings of applications . Each of the offerings may be associated with titles descriptions prices device compatibility information screenshots customer reviews customer ratings download statistics device privileges requested by the application and or other information. The offerings may also be associated with an indication of a security verification level for the application . Applications that could not be fully verified via a security evaluation may be associated with a relatively lower security verification level as compared to applications that are fully evaluated.

The applications correspond to the packages or code implementing an application offered via the application marketplace system . The applications may be mobile applications e.g. for smartphones tablets electronic book readers etc. or desktop applications e.g. for desktop computers laptop computers etc. as the case may be. The applications may be associated with signatures fingerprints checksums version information and or other information that can be used to verify the source integrity and or version of the application . The applications may correspond to native or monolithic applications application marketplace supplied containers for dynamic applications customer supplied containers for dynamic applications and or other types of applications.

The dynamically loaded code data may include versions or packages of dynamically loaded code that have been processed by the security verification service . In some embodiments the dynamically loaded code data may include signatures fingerprints checksums version information and or other information that can be used to verify the source integrity and or version of the dynamically loaded code . The previous security evaluations correspond to the results of previous security evaluations performed by the security verification service on various versions of dynamically loaded code . The security evaluation configuration data may include data that configures detection of malicious code repair of malicious code and or other actions performed or initiated by the security verification service .

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a hosted computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data may be stored in a data store that is accessible to the computing environment . The components executed on the computing environment for example include an external network site and other applications services processes systems engines or functionality not discussed in detail herein. The external network site is operated by an entity different from the proprietor of the application marketplace system and is configured to serve dynamically loaded code to instances of applications that are executing in the client devices and or the computing environment . The external network site may be operated by the developer of the application or a third party. In some cases the external network site may be operated by or compromised by malicious users who seek to deploy malware via the dynamically loaded code .

The client device is representative of a plurality of client devices that may be coupled to the network . The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client device may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays electrophoretic ink E Ink displays LCD projectors or other types of display devices etc.

The client device may be configured to execute various applications such as a marketplace client application a sandboxed environment application instances a security verification client service and or other applications. The marketplace client application may be executed in a client device for example to access network content served up by the computing environments and or other servers thereby rendering a user interface on the display . Specifically the marketplace client application is employed for a user at the client device to interact with the application marketplace system . The marketplace client application may facilitate searching for applications purchasing applications downloading applications installing applications and or other actions relative to the application marketplace system and to the client device . In some cases the marketplace client application may for example correspond to a browser a mobile application etc. and the user interface may correspond to a network page a mobile application screen etc.

In various embodiments application instances may execute separately in the client device or within a sandboxed environment . The sandboxed environment is employed to monitor dynamically loaded code that is downloaded and loaded into memory by the application instances . As with the sandboxed environment of the computing environment the sandboxed environment of the client device may include executable code memory and data memory . The sandboxed environment of the client device may or may not incorporate emulation and or virtualization if not the sandboxed environment may merely be a layer that may prevent the application instances from accessing resources of the client device directly.

The security verification client service corresponds to client executed portions of the security verification service . Since the dynamically loaded code for the application instances may change at runtime it may be beneficial to perform at least a portion of the security evaluation of the dynamically loaded code in the client device . For example the security verification client service may verify the version of the dynamically loaded code to ensure that a previous security evaluation has been performed. The security verification client service may also include repair functionality to attempt to repair any security risks detected for the dynamically loaded code . In some examples at least a portion of the security verification client service may be implemented by network devices in the network e.g. firewalls load balancers routers and or other devices.

The client device may be configured to execute applications beyond the marketplace client application the sandboxed environment the application instances and the security verification client service such as for example browsers mobile applications email applications social networking applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin developers or other users provide applications to the application marketplace system . The application marketplace system may determine the type of application that is submitted for consideration. Where the applications are native or monolithic the security verification service may perform a security evaluation on the applications and in response to detected security risks may reject repair flag etc. applications that include detected security risks.

Where the applications are dynamic applications the security verification service may take various approaches to security evaluation. In a first set of approaches an application is executed within the sandboxed environment as an application instance and the security verification service monitors whether the application instance requests or attempts to access dynamically loaded code from an external network site . When the application instance requests or attempts to access the dynamically loaded code the security verification service may analyze the dynamically loaded code for security risks.

If possible the security verification service may attempt to modify or repair issues that correspond to detected security risks. Further the security verification service may modify flag or suspend the offering of the application in the application marketplace system in response to detecting a security risk. The security verification service may store checksums signatures fingerprints profiles etc. of the dynamically loaded code in the dynamically loaded code data to allow for its identification in the future. Additionally the security verification service may store the result of the security evaluation in the previous security evaluations .

In a second set of approaches the dynamic application may be downloaded to and installed in the client device . The application may be executed as an application instance separately or within a sandboxed environment of the client device . When the application instance requests or attempts to access the dynamically loaded code the security verification client service may analyze the dynamically loaded code for security risks. The security verification client service may report the results of the security evaluation to the security verification service .

Performing a security evaluation in the client device may be relatively expensive in terms of processor usage memory usage and or battery consumption. In some embodiments in lieu of a security evaluation performed in the client device the security verification client service may transmit the dynamically loaded code or a uniform resource locator URL corresponding to a source of the dynamically loaded code to the security verification service for evaluation within the computing environment . Alternatively the security verification client service may determine a checksum fingerprint signature or other version identifier of the dynamically loaded code and then query the security verification service to determine the results of a previous security evaluation if available. In one embodiment certificate pinning may be utilized to verify the signatures of data obtained from the external network site . If a previous security evaluation is not available the security verification service and or the security verification client service may perform a security evaluation on the newly obtained dynamically loaded code and the results may then be stored as a previous security evaluation .

The security verification client service may be configured to perform repair functionality to address security issues discovered by the security verification client service and or the security verification service . The security verification client service may repair replace or delete the offending dynamically loaded code so as to eliminate security risks. This may result in breaking the operation of the application instance but it may be more desirable for the application instance to be broken than to continue with the detected security risk. In some cases the security verification client service may choose to terminate the application instance . When security risks are detected and or eliminated the user at the client device may be informed of the results.

As a non limiting example of detection and elimination of a security risk the security verification client service may detect that the application instance seeks to transmit data to www.malicioususers.site corresponding to a site known to be associated with malicious users. In order to repair the application instance the security verification client service may change the domain name resolution for the application instance to be NXDOMAIN thereby preventing resolution of the domain name to the actual network address of the malicious site. Alternatively firewall rules for the client device may be configured to block communication to the network host associated with the domain name. Blocking communication to the offending network host may or may not affect the end user functionality for the application instance but the security risk is neutralized.

Determining whether the application instance seeks to access dynamically loaded code may be done in several ways. For example the application marketplace system may require that applications that obtain remote data use certain application programming interface API calls as a condition of being offered by the application marketplace system . To enforce this condition the security verification service may detect whether the application is configured to contact external network sites without using the particular API calls and if so refusing consideration of the application . The API calls may distinguish obtaining mere data from obtaining data that includes dynamically loaded code . When an application instance at runtime makes an API call for code the security verification client service and or the security verification service may then be configured to perform a security evaluation on the dynamically loaded code that is obtained.

Additionally the security verification service and or the security verification client service may be configured to detect when data is loaded into executable code memory as opposed to data memory . For example the security verification service and or the security verification client service may trace and label data downloaded by the application via the network through the use of the sandboxed environment . Data that is loaded into data memory may be restricted to non executable while data that is loaded into executable code memory may be executed. The detection may occur via the use of the sandboxed environment which may be configured to track into which areas of memory downloaded data is loaded. In response to data being loaded into executable code memory by the application instance the security verification service and or the security verification client service may perform a security evaluation on the data. In one embodiment the application may be restricted by the sandboxed environment from loading executable code into memory except by way of a particular API call.

In some cases code may be detected via an analysis of the downloaded data. However most techniques are architecture specific. For example specific analyses may be performed to detect x86 code ARM code hypertext markup language HTML 5 code and so on.

In another embodiment the sandboxed environment of the client device may be configured to route all external data requests or external data requests identified as requests for dynamically loaded code made by the application instances via a proxy service provided by the security verification service . Thus the security evaluation may be performed by the security verification service on the server side in the computing environment rather than in the client device . Proxying the data requests may have various advantages including caching of the dynamically loaded code in the dynamically loaded code data and potential download speed improvements.

The results of the security evaluation may dictate an action that is initiated by the security verification service and or the security verification client service . In some cases the severity of the detected security risks may vary. For low level risks the application marketplace system may simply flag the offering of the application rather than removing it entirely. In some cases a privilege level for the application may be specified based upon the level of security evaluation performed on the application and or the level of security risks detected in the application . The privilege level may configure what privileges are afforded to the application instance in the client device .

In some cases the proprietor of the application marketplace system may elect to whitelist certain applications or vendors of applications such that security evaluations are avoided. Such applications or vendors thereof may be trusted by the proprietor such that additional security evaluations under the auspices of the application marketplace system are regarded as unnecessary. Such applications may be signed with a certificate and the signature may be verified to determine the source.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the application marketplace system according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application marketplace system as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application marketplace system receives an application . The application may be uploaded by a developer or other user. Alternatively the application may be downloaded to the data store by the proprietor of the application marketplace system . In box the application marketplace system determines the type of the application whether the application is a native standalone application or a dynamic application . For example the application marketplace system may employ the security verification service to determine whether the application makes API calls associated with downloading dynamically loaded code .

In box the application marketplace system determines whether the application is a dynamic application . A dynamic application may be self declared as such by a developer or an application may be determined to be dynamic by reports of application runtime behavior from client devices by API analysis by running the application in a sandboxed environment or by another approach. If the application is a dynamic application the application marketplace system continues to box and employs a dynamic application security evaluation approach.

This approach may involve continued verification procedures after the application is accepted into the application marketplace system as its behavior may change with code updates. It is understood that a dynamic application security evaluation approach may also include the security evaluations performed under the native application security evaluation approach as dynamic applications typically include some native code such as a container that may be evaluated for security risks. Thereafter the application marketplace system continues to box . If the application is not a dynamic application the application marketplace system continues from box to box and employs a native application security evaluation approach. The application marketplace system then continues to box .

In box the application marketplace system creates modifies or removes an offering of the application based at least in part on the security evaluation results. For example an application verified to have no security risks may be added to the application marketplace. Alternatively an application that is determined to include security risks may be modified to remove the security risks if possible or may be removed from the application marketplace entirely. In some cases an offering may be associated with a flag indicating potential security problems. In one embodiment an offering may be flagged to indicate that it is a dynamic application subject to further verification procedures. Such flags may include textual warnings icons and or other indicia. The offering may indicate a privilege level granted to the application based at least in part on a level of security verification that has been performed. Thereafter the portion of the application marketplace system ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the security verification service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the security verification service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments. Some or all of the tasks shown in may instead or additionally be performed by the security verification client service in the client device .

Beginning with box the security verification service executes an application as an application instance . In box the security verification service determines that the application accesses dynamically loaded code at runtime. For example the application may make an API call corresponding to dynamic code use the application may load downloaded data to executable code memory the application may download data that includes recognizable executable code and so on.

In box the security verification service obtains dynamically loaded code that is requested from an external network site . In one embodiment the security verification service may proxy a request for the dynamically loaded code on behalf of the client device . In another embodiment the security verification service may initiate its own request for the dynamically loaded code from the external network site . In yet another embodiment the security verification client service may actually obtain the dynamically loaded code from the external network site but then transmit a version identifier to the security verification service .

In box the security verification service determines a version of the dynamically loaded code . For example the security verification service may determine a fingerprint code signature checksum etc. associated with the dynamically loaded code . In box the security verification service determines whether a previous security evaluation exists for the version of the dynamically loaded code . For example the security verification service may compare a fingerprint of the dynamically loaded code to a library of fingerprints in the dynamically loaded code data associated with previously analyzed code. If a previous security evaluation exists the security verification service moves from box to box and obtains the results of the previous security evaluation from the data store . The security verification service then continues to box . If no previous security evaluation for the particular version exists the security verification service moves instead from box to box and performs a security evaluation on the dynamically loaded code . In some embodiments the security verification service may receive the results of a security evaluation from the client device . The security verification service continues to box .

In box the security verification service determines whether a security risk is detected for the version of the dynamically loaded code . If no security risk is detected the application is verified and may continue executing. Thereafter the security verification service ends. If a security risk is detected the security verification service proceeds from box to box and initiates one or more actions in response to the security risk. The results of the security evaluation may be communicated to an entity associated with the application marketplace. For example the security verification service may modify flag or remove an offering of the application in the application marketplace.

The security verification service may repair or modify the application to eliminate the security risk. The security verification service may cause the client device to terminate execution of the application and or uninstall the application . In some cases the security verification service may alter the configuration of the sandboxed environment to eliminate the security risk. For example network filtering rules may be updated to block traffic to a malware network site in the sandboxed environment or the contacts accessible to the application via the sandboxed environment may be replaced with dummy contacts. Thereafter the portion of the security verification service ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the security verification service the application marketplace system the sandboxed environment and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the client device according to an embodiment of the present disclosure. The client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may also be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the marketplace client application the sandboxed environment the application instances the security verification client service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

Referring now to both it is understood that there may be other applications that are stored in the memories and are executable by the respective processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memories and are executable by the respective processors . In this respect the term executable means a program file that is in a form that can ultimately be run by the processors . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memories and run by the processors source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memories and executed by the processors or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memories to be executed by the processors etc. An executable program may be stored in any portion or component of the memories including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memories are defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memories may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processors may each represent multiple processors and or multiple processor cores and the memories may each represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interfaces may be appropriate networks that facilitate communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interfaces may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processors may be of electrical or of some other available construction.

Although the security verification service the application marketplace system the sandboxed environment the marketplace client application the application instances the security verification client service and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the application marketplace system and the security verification service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of depict a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the security verification service the application marketplace system the sandboxed environment the marketplace client application the application instances and the security verification client service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

