---

title: Optimized resource allocation for virtual machines within a malware content detection system
abstract: According to one embodiment, a computerized method comprises operations of instantiating a first virtual machine instance and a second virtual machine instance to run concurrently with the first virtual machine instance. The first virtual machine instance provides a first virtual operating environment while the second virtual machine instance is adapted to share the resources allocated to the first virtual machine instance. The second virtual machine instance is further adapted to allocate additional resources upon conducting a Copy-On Write operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495180&OS=09495180&RS=09495180
owner: FireEye, Inc.
number: 09495180
owner_city: Milpitas
owner_country: US
publication_date: 20130510
---
Embodiments of the disclosure relate to the field of data security. More specifically one embodiment of the disclosure relates to a system apparatus and method that optimizes the allocation of resources used by multiple virtual machine instances operating within a malware content detection system.

Over the last decade malicious software malware has become a pervasive problem for Internet users. In some situations malware is a program or file that is embedded within downloadable content and designed to adversely influence or attack normal operations of a computer. Examples of different types of malware may include bots computer viruses worms Trojan horses spyware adware or any other programming that operates within an electronic device e.g. computer tablet smartphone server router wearable technology or other types of electronics with data processing capability without permission by the user or an administrator.

For instance content may be embedded with objects associated with a web page hosted by a malicious web site. By downloading this content malware causing another web page to be requested from a malicious web site may be unknowingly installed on the computer. Similarly malware may also be installed on a computer upon receipt or opening of an electronic mail email message. For example an email message may contain an attachment such as a Portable Document Format PDF document with embedded executable malware. Also malware may exist in files infected through any of a variety of attack vectors which are uploaded from the infected computer onto a networked storage device such as a file share.

Over the past few years various types of security appliances have been deployed at different segments of a network. These security appliances use virtual machines to uncover the presence of malware embedded within ingress content propagating over these different segments. However given that each virtual machine VM needs to be allocated a large amount of memory for its virtual operations conventional security appliances are limited as to the number of concurrently operating VMs for malware analysis due to the substantial and additional costs for increased memory.

Various embodiments of the disclosure relate to a malware content detection MCD system and a corresponding method for optimizing the number and configuration of virtual machine instances being concurrently executed for any given level of resources. This virtual machine VM optimization technique is directed to provisioning multiple VM instances that are based on the same software profile and are adapted to concurrently analyze the suspicious content for malware. This software profile includes information that is used for virtualization of an operating environment targeted to receive the suspicious content e.g. guest operating system OS type and or version application type s and version s virtual device s etc. . The software profile is used to create the virtual operating environment for the VM instance.

The VM instances are instantiated as VM clones namely VM instances that are adapted to share system resources upon creation such as system memory and virtual disk space for example. These resources are allocated for virtualization of an operating environment having a particular software profile set to a prescribed virtual operating state. Hence at instantiation the VM clones associated with the particular software profile are placed into the same virtual operating state.

However during execution and upon requiring resources different than those allocated a VM clone may conduct a Copy On Write COW operation which causes allocation of different resources for use exclusively by that VM clone. At this time the VM clone now becomes a unique VM instance although it may continue to use the shared resources other than the resource allocated for exclusive use through the COW operation. Hence by VM instances sharing resources associated with the same software profile a greater number of VM instances may be used concurrently i.e. running at least in a partially overlapping manner for malware analysis with minimal impact on memory capacity as only the different non shared resources need to be allocated.

As an illustrative example a first VM clone is instantiated by allocating resources e.g. memory virtual disk space etc. that support the running of the VM clone according to a particular software profile e.g. guest OS Windows 7 application s Internet Explorer version 9 starting at a prescribed virtual operating state e.g. after guest OS and web browser initialization . All other subsequent VM clones which are instantiated while the first VM clone is running and based on the same particular software profile are adapted to share identical resources allocated for the first VM clone. Hence all of the VM clones are placed into an identical virtual operating state at instantiation.

During execution and upon requiring additional resources besides the allocated shared resources the first VM clone conducts a Copy On Write operation whereby additional resources are allocated e.g. allocate one or more memory pages different than memory pages being part of the shared resources that will be used exclusively by the VM instance that originated from the first VM clone. The same operations are applicable for other VM clones during execution.

More specifically according to one embodiment of the invention the VM optimization technique utilizes a VM profile database that comprises a number of VM disk files. Each VM disk file includes profile information that describes the configuration of the VM disk file. For example the profile information may identify a particular software profile supported by the VM disk file which may include the type and or version of a guest OS along with at least one or more images of applications and or their corresponding version numbers . The VM disk file further includes VM state information that may be the results of a VM snapshot to capture the state disk data and a configuration of the VM at a specific point in time i.e. at a prescribed virtual operating state .

When two or more VM instances based on the same software profile are needed to conduct dynamic analysis on suspicious content from different data flows for example the VM disk file supporting that software profile is selected from which these VM clones are instantiated. Contrary to current VM deployment the VM clones share the same resources during execution and utilize Copy On Write functionality to customize their configuration so that the resultant VM instances may run concurrently while minimizing the amount of memory needed for support of these multiple VM instances.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but is not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit wireless receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

The term content generally refers to information transmitted as one or more messages where each message s may be in the form of a packet a frame an Asynchronous Transfer Mode ATM cell or any other series of bits having a prescribed format. The content may be received as a data flow namely a group of related messages within ingress data traffic.

Herein content may include one or more types of data such as text software images audio metadata and or other digital data. One example of content may include web content or any data traffic that may be transmitted using a Hypertext Transfer Protocol HTTP Hypertext Markup Language HTML protocol or may be transmitted in a manner suitable for display on a Web browser software application.

Another example of content includes electronic mail email which may be transmitted using an email protocol such as Simple Mail Transfer Protocol SMTP Post Office Protocol version 3 POPS or Internet Message Access Protocol IMAP4 . A further example of content includes an Instant Message which may be transmitted using Session Initiation Protocol SIP or Extensible Messaging and Presence Protocol XMPP for example. Yet another example of content includes one or more files that are transferred using a data transfer protocol such as File Transfer Protocol FTP for subsequent storage on a file share.

The term malware is directed to software that produces an undesired behavior upon execution where the behavior is deemed to be undesired based on customer specific rules manufacturer based rules any other type of rules formulated by public opinion or a particular governmental or commercial entity or an indication of a potential exploit in a particular software profile. This undesired behavior may include a communication based anomaly or an execution based anomaly that 1 alters the functionality of an electronic device executing an application software in a malicious manner 2 alters the functionality of an electronic device executing that application software without any malicious intent and or 3 provides an unwanted functionality which is generally acceptable in other context.

The term transmission medium is a communication path between two or more systems e.g. any electronic devices with data processing functionality such as for example a security appliance server mainframe computer netbook tablet smart phone router switch bridge or brouter . The communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

In general a virtual machine VM instance is a simulation of an electronic device abstract or real that is usually different from the electronic device conducting the simulation. VM instances may be based on specifications of a hypothetical computer or emulate the computer architecture and functions of a real world computer. A VM instance can be one of many different types such as for example hardware emulation full virtualization para virtualization and or operating system level virtualization virtual machines.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of a communication system deploying a plurality of malware content detection MCD systems N 1 e.g. N 3 communicatively coupled to a management system via a network is shown. In general management system is adapted to manage MCD systems . For instance management system may be adapted to cause malware signatures generated as a result of malware detection by any of MCD systems to be shared with one or more of the other MCD systems including for example where such sharing is conducted on a subscription basis.

Herein according to this embodiment of the invention first MCD system is an electronic device that is adapted to i intercept data traffic that is routed over a communication network between at least one server device and at least one client device and ii monitor in real time content within the data traffic. More specifically first MCD system may be configured to inspect content received via communication network and identify suspicious content. The incoming content is identified as suspicious when it is assessed with a certain level of likelihood that at least one characteristic identified during inspection of the content indicates the presence of malware.

Thereafter the suspicious content is further analyzed within a virtual machine VM execution environment to detect whether the suspicious content includes malware. The VM execution environment may comprise multiple VM instances supporting the same software profile especially where the suspicious content is detected within multiple data flows within data traffic directed to the same targeted operating environment. These VM instances are instantiated as VM clones namely VM instances with read only access to shared resources that are allocated to support a particular software profile at a prescribed virtual operating state. Hence all of the VM clones support the same software profile and are placed in an identical state at initial runtime.

However as one of the VM clones executes and requires modification of the resources e.g. write to particular memory page that VM instance performs Copy On Write operations to create additional resources that are accessible only to that VM. Hence as an illustrative example the total amount of allocated memory needed to support the multiple VM instances is minimized to be equal to the amount of shared system resources allocated to support the software profile along with the additional resources exclusively required by each of the multiple VM instances.

According to this embodiment of communication system first MCD system may be a web based security appliance that is configured to inspect ingress data traffic identify whether content associated with the data traffic may include malware and if so conduct a deeper analysis of the content. This deeper analysis is conducted in the VM instances within the VM execution environment to detect undesired behaviors that would be present if the data traffic were actually processed by an electronic device. The particulars of this analysis are described below.

The communication network may include a public computer network such as the Internet in which case an optional firewall represented by dashed lines may be interposed between communication network and client device . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks.

The first MCD system is shown as being coupled with the communication network behind the firewall via a network interface . The network interface operates as a data capturing device referred to as a tap or network tap that is configured to receive data traffic propagating to from the client device and provide content from the data traffic to the first MCD system .

In general the network interface receives and copies the content that is received from and provided to client device normally without an appreciable decline in performance by the server device the client device or the communication network . The network interface may copy any portion of the content for example any number of data packets.

In some embodiments the network interface may capture metadata from data traffic intended for client device where the metadata is used to determine whether the data traffic includes any suspicious content as well as the software profile for such content. The metadata may be associated with the server device and or the client device . In other embodiments a heuristic module described herein may determine the software profile by analyzing the content associated with the data traffic.

It is contemplated that for any embodiments where the first MCD system is implemented as an dedicated appliance or a dedicated computer system the network interface may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication network to non disruptively tap data traffic propagating through firewall and provide a copy of the data traffic to the heuristic module . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. firewall router switch or other network device or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to copy traffic from virtual networks.

Referring still to first MCD system may include a heuristic engine a heuristics database a scheduler a storage device an analysis engine and a reporting module . In some embodiments the network interface may be contained within the first MCD system . Also heuristic engine scheduler and or analysis engine may be software modules executed by a processor that receives the suspicious content performs malware analysis and is adapted to access one or more non transitory storage mediums operating as heuristic database storage device and or reporting module . In some embodiments the heuristic engine may be one or more software modules executed by a processor and the scheduler and the analysis engine may be one or more software modules executed by a different processor where the two processors are possibly located at geographically remote locations and communicatively coupled for example via a network.

In general the heuristic engine serves as a filter to permit subsequent malware analysis only on a portion of incoming content which effectively conserves system resources and provides faster response time in determining the presence of malware within analyzed content. As an ancillary benefit by analyzing only the portion of incoming content that may have exploits i.e. portions of content that may be exploited by malware a greater number of VMs may be supported to run concurrently with each other.

As illustrated in the heuristic engine receives the copy of incoming content from the network interface and applies heuristics to determine if any of the content is suspicious . The heuristics applied by the heuristic engine may be based on data and or rules stored in the heuristics database . Also the heuristic engine may examine the image of the captured content without executing or opening the captured content.

For example the heuristic engine may examine the metadata or attributes of the captured content and or the code image e.g. a binary image of an executable to determine whether a certain portion of the captured content matches or has a high correlation with a predetermined pattern of attributes that is associated with a malicious attack. According to one embodiment of the disclosure the heuristic engine flags content from one or more data flows as suspicious after applying this heuristic analysis.

Thereafter according to one embodiment of the invention the heuristic module may be adapted to transmit at least a portion of the metadata or attributes of the suspicious content which identify attributes of the client device to the analysis engine . Such metadata or attributes are used to identify the VM instance needed for subsequent malware analysis and formulate software profile information for requesting a corresponding VM clone. In another embodiment of the disclosure the analysis engine may be adapted to receive one or more messages e.g. data packets from the heuristic engine and analyze the message s to identify the software profile information associated with the needed VM instance.

For instance as an illustrative example the suspicious content under test may include an email message that was generated under control of Windows 7 Operating System using a Windows Outlook 2007 version 12. The email message further includes a Portable Document Format PDF attachment in accordance with Adobe Acrobat version 9.0. Upon determining that the email message includes suspicious content heuristic engine provides software profile information to identify a particular type of VM instance needed to conduct dynamic analysis of the suspicious content. According to this illustrative example the software profile information would include 1 Windows 7 Operating System OS 2 Windows Outlook 2007 version 12 and 3 PDF support through Adobe Acrobat version 9.0.

The analysis engine supplies the software profile information to the scheduler which conducts a search as to whether any of the VM disk files within storage device feature a software profile supporting the above identified OS and one or more applications. If so and if a VM instance based on the software profile is already running the scheduler uses the same image used initially to create the VM instance to create a VM clone. Hence the VM instance and the VM clone are members of the same VM family. In accordance with the illustrated example described above the VM clone would support execution of a virtual device that is adapted to receive open and process the email attachment. The VM clone is uploaded to the analysis engine to analyze the suspicious content.

However if the storage device feature a software profile supporting the above identified OS and one or more applications but there is no corresponding VM instance currently running the scheduler obtains an image associated with that software profile from VM provisioning logic described below . This image may be subsequently used for VM clone generation. Of course it is contemplated that if the storage device does not feature a software profile supporting the above identified OS application s and no corresponding VM instance is currently running the scheduler may simply ignore the VM request or may receive an VM image from the VM provisioning logic that is based on a similar software profile. For example the scheduler may receive a VM instance based on the same OS but a different version of a targeted application. Alternatively the scheduler may receive the same OS along with an application different from the targeted application but having similar functionality e.g. different type of browser etc. . As another alternative the scheduler may receive a different OS with a similar architecture.

The scheduler may retrieve and configure a VM clone to mimic the pertinent performance characteristics of the client device . In one example the scheduler may be adapted to configure the characteristics of the VM clone to mimic only those features of the client device that are affected by the data traffic copied by the network interface . The scheduler may determine the features of the client device that are affected by the content by receiving and analyzing the data traffic from the network interface . Such features of the client device may include ports that are to receive the content certain device drivers that are to respond to the content and any other devices coupled to or contained within the client device that can respond to the content.

In another embodiment of the disclosure the heuristic engine may determine the features of the client device that are affected by the data traffic by receiving and analyzing the content from the network interface . The heuristic engine may then transmit the features of the client device to the scheduler and or analysis engine .

For instance according to one embodiment of the disclosure it is contemplated that the heuristic engine may be adapted to transmit the metadata identifying the client device to the analysis engine where such metadata is used to identify the desired software profile. Alternatively the analysis engine may be adapted to receive one or more data packets of a data flow from the heuristic engine and analyze the one or more data packets to identify the software profile. In yet other embodiment of the disclosure the scheduler may be adapted to receive software profile information in the form of metadata or data packets from the network interface or from the heuristic module directly.

The storage device may be configured to store one or more VM disk files forming a VM profile database where each VM disk file is directed to a different software profile for a VM instance. In one example the VM profile database may store a VM disk file associated with a single VM instance that can be configured by the scheduler to mimic the performance of a client device on the communication network . Alternatively as shown in the VM profile database may store a plurality of VM disk files where each VM disk file includes information associated with a distinct family of running VMs. Hence these VM disk files are provided to simulate the performance of a wide variety of client devices .

The analysis engine is adapted to execute multiple VM instances including as one or more VM clones to simulate the receipt and or execution of different data flows of suspicious content by the client device as well as different operating environments. Furthermore the analysis engine analyzes the effects of such content upon the client device . The analysis engine may identify the effects of malware by analyzing the simulation of the effects of the content upon the client device that is carried out on each VM instance. Such effects may include unusual network transmissions unusual changes in performance and the like. This detection process is referred to as a dynamic malicious content detection.

The analysis engine may flag the suspicious content as malware according to the observed behavior of the VM instance. The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information identify what message s e.g. packet s of the suspicious content may contain malware. Additionally the server device may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

Referring now to a second exemplary embodiment of MCD system is shown where the software profile for VM instantiation is not determined through analysis of suspicious content e.g. metadata data packets binary etc. by the network interface heuristic engine or analysis engine . Rather the software profile is uploaded by the user and or network administrator in order to control instantiation of VM clones that share resources and operate at a particular operating state.

More specifically a user interface allows the user or network administrator hereinafter referred to as user administrator to introduce objects of the suspicious content in accordance with one or more prescribed software profiles . The software profile s may be preloaded or selected by the user administrator in order to generate one or more VM instances based on operations of the scheduler and storage device as described above. The VM instances perform dynamic analysis of the objects to uncover undesired behavior during virtual execution of these objects within the VM instances.

Referring now to a detailed block diagram of the MCD system according to one embodiment of the invention is shown. Herein the MCD system comprises the storage device coupled to a controller data processing circuitry via a transmission medium . Controller is configured to manage and or control one or more virtual machine VM instances N 1 operating within analysis engine . Information associated with VM instances is stored in storage device in a form of VM disk files N M 1 .

Herein controller may be implemented as part of a VM monitor or manager VMM also referred to as a hypervisor for managing or monitoring VM instances which may be hosted by a host operating system OS . The VM instance s may be hosted by a guest OS. The host OS and the guest OS may be the same type of operating systems or different types of operating systems e.g. Windows Linux Unix Mac OS iOS etc. or different versions thereof.

It is contemplated that multiple VM instances 1 i N may concurrently perform malware analysis on a first content. According to one embodiment of the disclosure each of these multiple VM instances may be based on substantially similar software profiles e.g. VMs with same OS and or application types but different OS version number VMs with same OS and one or more application types with different version numbers etc. . Additionally these multiple VM instances may concurrently perform malware analysis on a second content. Thus content may be analyzed in one VM instance for a plurality of VM families. Such analysis provides a mechanism to check software vulnerability in different OS and application versions including patched versions. Of course it is further contemplated that content may be analyzed in accordance with a single VM family featuring multiple VM instances.

As shown in each VM disk file e.g. VM disk file comprises read only information including i profile information and ii state information along with a persistent event log . Event log is adapted to persistently store certain events or activities associated with undesired behaviors for suspicious content during execution of VM clone and any other VM instances based on the software profile .

Herein as illustrated profile information includes information directed to identified items forming the software profile within VM disk file from which a corresponding VM clone is instantiated. Examples of items within the software profile may include but are not limited or restricted to a particular OS type version type s version s of application s an amount of requisite memory for a VM instance corresponding to the VM disk file and or information for particular virtual devices capable of being supported by the corresponding VM instance.

State information includes states based on a snapshot of the OS application s and or virtual device s after initialization and upon placement into a particular virtual operating state. The state information enables each of the VM clones to be placed into an identical prescribed virtual operating state from which additional resources are allocated as the VM clone transitions into a VM instance.

According to one embodiment of the invention when suspicious content is received for dynamic analysis as opposed to static analysis conducted by heuristic engine scheduler of controller is configured to identify and select one or more VM instances to closely simulate a targeted operating environment in which the suspicious content is to be analyzed. The targeted operating environment is identified by software profile information e.g. particular versions of OS and application images along with information directed to the virtual device states .

More specifically the scheduler comprises VM provisioning logic and VM resource logic . VM provisioning logic is responsible for creating VM clones and monitoring the number of VM instances concurrently utilized within the MCD system to ensure that the number of VM instances do not exceed a predetermined VM threshold. The predetermined VM threshold is based on a predetermined amount of resources e.g. amount of memory that may be allocated for use by concurrently operating VMs. For example when the VM instances are based on a small number M of software profiles e.g. less than 10 software profiles a greater number of VM instances may be supported by the MCD system i.e. VM threshold would have a first value . The reason is that given the low number of software profiles needed many of these VM instances are instantiated as VM clones which share a substantial portion of the same resources allocated for use by other VM instance s . Likewise when the VM instances are based on a larger number of different software profiles e.g. M 15 a lesser number of VM instances may be supported i.e. VM threshold would have a second value less than the first value . Once the VM threshold is reached the malware analysis testing may be delayed and the incoming content queued until the number of VMs falls below the VM threshold. At that time the VM provisioning logic is permitted to continue provisioning VM clones.

For VM clone generation when suspicious content is to be dynamically analyzed the VM provisioning logic initially determines whether a VM instance having a particular software profile corresponding to the targeted operating environment for the suspicious content is running. The VM instance may be currently operating as a VM clone based on the particular software profile or formerly operated as the VM clone i.e. additional resources have been allocated for that VM instance . If the VM instance having the particular software profile is running the VM provisioning logic instantiates a VM clone and no further allocation of resources is necessary at this time. Otherwise the VM provisioning logic allocates resources in accordance with the VM disk file 1 i M associated with the particular software profile.

VM resource logic operates as the centralized logic within the MCD system for responding to resource requests allocating resources and restoring state and monitoring the allocation of such resources. More specifically the VM resource logic is adapted to maintain locations in memory for additional resources allocated for Copy On Write operations performed by each VM instance including clones. More specifically each VM clone for a given software profile shares the same allocated resources. As the VM clone requires additional resources VM resource logic allocates the requisite resources e.g. certain memory page s to that VM clone. Upon resource allocation the VM resource logic stores addressing information associated with the allocated resource along with an identifier assigned to that VM instance within a memory allocation table.

Upon receipt of one or more VM images corresponding to a particular software profile by the analysis engine the scheduler launches a VM clone in which a monitoring module is running therein. The monitoring module is configured to monitor activities and behavior of suspicious content and to determine if the incoming content includes malware and whether the particular software profile features any vulnerabilities that are being exploited by malware. In addition monitoring module maintains a persistent communication channel with event log of controller to communicate certain events or activities of suspicious content during execution of VM clone .

In response to detecting certain undesired behaviors during processing of suspicious content the replay logic now identifies the presence of malware within the content and potential exploits in the particular software profile. Thereafter monitoring module is configured to send a message via the communication channel to event log where the message may be forwarded via transmission medium for persistently recordation as part of event log . The message may include information identifying an event triggered by the suspicious content . Event log records events that have been selectively monitored and detected by monitoring module including undesired behaviors. The recordation of the events may be prompted in response to a particular action or inaction e.g. file creation registry access DLL loading process execution power management such as sleep . The recorded events may be subsequently analyzed by analysis engine based on a set of rules or policies to determine whether suspicious content includes malware or has a high likelihood of including malware.

Referring to block diagrams illustrating Copy On Write COW operations conducted for each family of VM clones and VM clones within a particular family is shown. Herein as shown in a first family of VM clones is instantiated according to a first software profile while a second family of VM clones is instantiated according to a second software profile. In other words the first family of VM clones comprises a set of VM clones namely one or more VM clones such as VM clones and which are adapted to access shared resources within system resources . The shared resources include data within a predetermined area of system resources that provides data for virtualization of a particular OS prescribed applications hardware devices e.g. ports etc. directed to a first software profile. The shared resources are at least partially used by VM clones and for dynamic analysis of suspicious content for malware.

As VM clone 1 VM instance runs and requires additional or altered resources than provided by shared resources VM clone 1 is allocated additional resources which may be accomplished by conducting write operations into one or more pages of system resources that are different from memory pages associated with shared resources as shown in . The memory pages can be subsequently accessed by VM clone 1 during malware analysis. Furthermore as VM clone i VM instance runs and requires additional or altered resources than provided by shared resources VM clone i is allocated additional resources by conducting write operations into one or more pages of system resources that are different from memory pages associated with shared resources as also shown in .

Referring back to a second family of VM clones has a similar configuration where second family of VM clones comprises at least two VM clones and each having access to shared resources within the system resources where shared resources are different than shared resource . The shared resources include data within a predetermined area within system resources that provides data for virtualization of a particular OS prescribed applications hardware devices e.g. ports etc. associated with a second software profile different than the first software profile e.g. different OS type .

Referring to an exemplary diagram of a flowchart partially illustrating operations for instantiating a VM clone is shown. Prior to conducting the malware detection analysis ingress content is received by the MCD system block . Upon determining that this content constitutes suspicious content block the software profile information associated with the operating environment targeted for the ingress suspicious content e.g. OS type version application type s version s virtual devices is determined block . According to one embodiment of the disclosure the software profile information may be determined by analysis of the payload for data packets formulating the suspicious content. Alternatively the software profile information may be obtained from the browser signature or the like.

Thereafter a determination is made whether there is at least one VM disk supporting a software profile corresponding to the determined software profile information block . If so one or more VM clones based on the software profile may be provisioned by VM provisioning logic block provided that the VM threshold is not reached block . If the VM threshold is reached the VM clone is not provisioned a warning or error report message may be generated by display by the user administrator and the content may be temporarily buffered until the number of provisioned VM clones falls below the VM threshold block .

However if there is no VM disk supporting the particular software profile a secondary determination is made as to whether the software profile information includes information that is correlated to software profile by one or more of the VM disk files block . For instance according to one embodiment of the disclosure software profile information is correlated to software profiles in one or more of the VM disks if at least an OS and version number identified in the software profile information matches a software profile within the VM disk file s . According to other embodiment of the disclosure the software profile information corresponds to a software profiles if the software profile information includes i an OS identified in the software profile within one of the VM disk files independent of version type ii an OS identified in the software profile within one of the VM disk files along with requisite applications regardless of version type iii an OS identified in the software profile within one of the VM disk files along with applications having the same functionality as requisite applications. The correspondence level needed may be set by an administrator user.

If the OS is not provided and or there is no support for the identified OS an error report may be provided to the user administrator block . However if the secondary determination detects that the OS is supported by the MCD system for example VM clones may be generated for all of the software profiles directed to this particular OS type provided that the VM threshold is not reached blocks . The VM threshold may be computed in a variety of ways. If the VM threshold is exceeded an error report is generated block . Otherwise the VM clones are generated and supplied to the analysis engine where one of the VM clones will be executed as part of the replay logic.

As an example the VM threshold may be computed by analyzing the amount of memory allocated for VM operations e.g. 20 GB divided by a the sum of first predetermined memory sizes e.g. 1 GB allocated for each VM clone associated with a different software profile and b a sum of second predetermined memory sizes e.g. 100 MB for each additional VM clone associated with one of the software profiles of a . As an illustration the MCD system could support twenty 20 VM clones each associated with a different software profile ten 10 VM clones associated with different software profiles and 100 additional VM clones associated with these different software profiles or five 5 VM clones associated with different software profiles and 150 additional VM clones associated with these different software profiles.

Referring now to exemplary flowcharts directed to Copy On Write operations concurrently conducted by multiple VM clones is shown. Upon receiving a first VM clone by the analysis engine the first VM clone is loaded into the replay logic and executed to analyze suspicious content that caused instantiation of the first VM clone blocks and . The analysis is conducted in order to detect undesired behavior caused by malware within the suspicious content.

During execution of the first VM clone in response to a write operation that would alter data within one or more memory pages of the shared resources the VM resource logic allocates additional resources for receipt of the data to be written blocks and . Thereafter the first VM clone performs a Copy On Write COW operation to store the data to be written within the additional resources block . Now given slightly different functionality e.g. access to the shared resources except for above described one or more memory pages the first VM clone is now referred to as a first VM instance. The first VM instance has exclusive access to the additional resources storing the written data. If the first VM clone instance has not completed execution and analysis of the suspicious content the VM resource logic continues to allocate additional resources for use by the first VM clone instance as needed block .

Concurrently with operations performed by the first VM clone as denoted by label A and shown in the analysis engine receives a second VM clone which is also loaded into the replay logic and executed to analyze suspicious content blocks and . The second VM clone is directed to the same software profile as the first VM clone and the suspicious content may be extracted from a different data flow than the suspicious content analyzed by the first VM clone.

During execution of the second VM clone in response to a write operation that would also alter data within one or more memory pages of the shared resources the VM resource logic allocates other additional resources for receipt of the data to be written blocks and . Thereafter the first VM clone performs a Copy On Write COW operation to store the data to be written within the other additional resources block . Now having functionality different from its instantiated state e.g. access to the shared resources except for the noted memory page s the second VM clone is now referred to as a second VM instance.

Hereafter the second VM instance has exclusive access to the other additional resources storing the written data. If the second VM clone instance has not completed execution and analysis of the suspicious content the VM resource logic continues to allocate additional resources for use by the second VM clone instance as needed block . The process may continue for additional VM clones based on the same software profile as used for instantiation of the first VM clone and the second VM clone.

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. For instance in lieu of or in addition to the MCD system of a malware analysis described above may be conducted within firewall or other components within the communication network that is adapted to conduct dynamic malware analysis through the optimized use of VMs.

Also one of the embodiments of the invention may be directed to a computerized method comprising 1 instantiating by the controller a first virtual machine instance for which resources are allocated the first virtual machine instance to provide a first virtual operating environment and 2 instantiating by the controller a second virtual machine instance running concurrently with the first virtual machine instance the second virtual machine instance sharing the resources allocated to the first virtual machine instance and being allocated additional resources upon conducting a Copy On Write operation. The first virtual machine instance may be based on a first software profile where the first software profile includes information used for virtualization of the first virtual execution environment e.g. a specific version of an operating system being executed by the first virtual machine instance information associated with a specific version of an application being executed by the first virtual machine instance etc. . The second virtual machine instance may be based on the first software profile and may be instantiated while the first virtual machine instance is running.

According to this embodiment the first virtual machine instance may be configured for analyzing whether content from a first data flow targeted to operate on a client device having the first software profile has malware and the second virtual machine instance may be configured for analyzing whether content from a second data flow targeted to operate on the client device and different from the first data flow has malware.

After instantiation of a plurality of virtual machine instances including the first virtual machine instance and the second virtual machine instances the computerized method may further comprise 1 determining whether instantiation of a third virtual machine instance exceeds a threshold where the threshold represents a predetermined number of concurrently operating virtual machine instances and 2 instantiating the third virtual machine instance if a sum of the plurality of virtual machine instances does not exceed the threshold or refraining from instantiating the third virtual machine instance if the sum of the plurality of virtual machine instances exceeds the threshold. The threshold may be equal to a first value when a first prescribed number of the plurality of virtual machine instances are virtual machine clones being virtual machine instances operating in an initial operating state upon creation. Alternatively the threshold may be equal to a second value that is less than the first value when a second prescribed number of the plurality of virtual machine instances are virtual machine clones where the second prescribed number is less than the first prescribed number.

Another one of the embodiments may include a non transitory computer readable medium including software that when executed by one or more hardware processors performs operations comprising 1 instantiating a first virtual machine instance for which resources are allocated the first virtual machine instance to provide a first virtual operating environment and 2 instantiating a second virtual machine instance running concurrently with the first virtual machine instance the second virtual machine instance sharing the resources allocated to the first virtual machine instance and being allocated additional resources upon conducting a Copy On Write operation.

Yet another of these embodiments may include a malware content detection MCD system which comprises 1 a network port adapted to receive incoming content 2 an analysis engine configured to analyze the incoming content in a virtual environment including one or more VM instances adapted to execute on a processor so as to process the incoming content in the virtual environment each VM instance being associated with a software profile 3 a VM provisioning logic configured to generate one or more VM clones and monitor the number of VM instances including the VM clones concurrently in use to assure the number does not exceed a threshold and 4 a VM resource logic configured to allocate resources for each VM instance in response to a resource request.

For this MCD system the VM resource logic comprises an allocation table configured to track allocation of resources to each of the VM instances. The VM resource logic is further configured to allocate the resources to each corresponding VM clone upon generation by the VM provisioning logic. As a result each VM clone within the same VM family share the same allocated VM resources until such time as the VM clone seeks to modify such resources. Thereafter if the VM clone seeks to modify any of the allocated resources the VM clone is now considered to be a unique VM instance but remains within the VM family by continuing to share at least a portion of the allocated resources with other VM clone s and or VM instance s within the VM family. The VM resource logic allocates an additional resource to the resultant VM instance to replace the resource that was sought to be modified so as to enable the resultant VM instance to proceed with modifying the additional resource.

