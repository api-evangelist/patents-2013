---

title: Methods and apparatus to distinguish between parent and child webpage accesses and/or browser tabs in focus
abstract: Methods and apparatus to distinguish between parent and child webpage accesses and/or browser tabs in focus are disclosed. An example implementation includes identifying an HTTP request; retrieving Page Info data from a browser; electronically detecting if the Page Info data and the HTTP request identify a same Internet resource; electronically classifying the HTTP request as a parent call when the Page Info data and the HTTP request identify the same Internet resource; and electronically classifying the HTTP request as a child call when the Page Info data and the HTTP request identify different Internet resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09332056&OS=09332056&RS=09332056
owner: The Nielsen Company (US), LLC
number: 09332056
owner_city: New York
owner_country: US
publication_date: 20130729
---
This patent is a continuation of U.S. patent application Ser. No. 12 895 288 entitled METHODS AND APPARATUS TO DISTINGUISH BETWEEN PARENT AND CHILD WEBPAGE ACCESSES AND OR BROWSER TABS IN FOCUS filed on Sep. 30 2010 and granted as U.S. Pat. No. 8 499 065 on Jul. 30 2013 which is herebyr incorporated herein by reference in its entirety.

The present disclosure pertains to Internet usage monitoring and more specifically to methods and apparatus to distinguish between parent and child webpage accesses and or browser tabs in focus.

Companies that advertise their products or services on the Internet have an interest in determining how users consume their advertisements. Internet monitoring can be achieved in a number of ways. For example monitoring can be performed at the client side to monitor user activities. Alternatively monitoring can be performed at the server side to track and or count served webpages.

Internet monitoring systems may be implemented in various configurations based on the data that is intended to be collected. For example a server hosting a server based Internet monitoring system tracks how users interact with that server. The resulting server based monitoring data includes detailed information about how users utilize the server but will not provide data on how the users interact with other servers. Proxy server based Internet monitoring systems track how a group of users interact with a plurality of servers hosting various websites. For example an Internet service provider that manages a proxy server to serve web pages may utilize the proxy server to monitor what websites users utilizing the proxy visit while using the Internet service. Client side Internet monitoring systems monitor the Internet activity of a specific user who is operating a browser on a client computer. In such client side Internet monitoring systems monitoring data that is collected by the system can be very detailed due to higher levels of available processing power the ability to monitor system calls and or applications e.g. a browser a word processing program being run locally on the client computer the ability to track interactions with input devices e.g. mouse clicks and or movements keystrokes on a keypad etc. the ability to detect access to cached content e.g. a previously loaded webpage accessed from memory rather than from a fresh request to the Internet and or the ability to identify the user associated with the client device. Client side monitoring thereby allows a wide range of web sites to be monitored while adding the ability to associate web usage data with specific users groups of users and or demographic and allows collecting of more parameters and or accurate monitoring data.

A browser is used to view Internet content on a client computer. To obtain web content the browser sends an HTTP Hypertext Transfer Protocol request for the web content to a server at an Internet address specified by a Universal Resource Locator URL . The server sends a response containing the web content and or links to the web content to the browser. The browser then proceeds to render the content for presentation e.g. display to the user. The user may then interact with the browser and or the content being rendered. The browser can be any Internet browsing application. For example the browser may be Microsoft Internet Explorer Mozilla Firefox Apple Safari Google Chrome etc. Additionally or alternatively the user may utilize multiple browsers simultaneously to view multiple web pages. Further the browser may not be a standard Internet browser as listed above rather the browser may be integrated into another application on the user s computer.

Users typically view content which may include one or more webpages in a browser for a given time period. This period is known as a browsing session. Browsing sessions can be any duration. For example a user may use their browser to check a weather forecast on a first webpage during a browsing session that may only last a few minutes or even a matter of seconds. If instead the user accesses the weather on the first webpage and then reads a long article or series of articles on one or more other webpages the duration of the browsing session may be many minutes or even over an hour. In the examples illustrated herein a browsing session is defined as the time period that the browser was running irrespective of how many webpages are accessed during the time period. The user may start the browsing session by for example starting the browser and may terminate the browsing session by for example exiting the browser.

Client side monitoring of Hypertext Transfer Protocol HTTP traffic generated by a user is performed in order to determine the user s web usage habits and can be beneficial to media monitoring and advertising companies. HTTP monitoring data typically includes the identity of web pages viewed by the user and an indication of the time s that the user viewed the web pages e.g. a timestamp s .

Previously web pages were viewed in a linear fashion. In other words users traversed from a single web page in a first domain e.g. www.amazon.com to another single web page in a second domain e.g. www.nielsen.com e.g. by clicking on a link typing a Universal Resource Locator URL into an address bar etc. Determining the URL of a page viewed by a user could be accomplished by monitoring the web traffic e.g. the initial request generated by the browser over HTTP in response to a user request etc. Each new page traversal signified the end of the viewing duration of the previous page. Additionally or alternatively durations of time may be assigned to web pages based on timestamps of HTTP requests.

Web page complexity has increased to facilitate richer and or more interactive experiences for viewers. The traditional web page referred to herein as a parent call represented a text html call which included text and contained additional image references both advertisements and pictures . Technologies such as Flash Javascript and i frames have made it easier for publishers to embed elements e.g. videos maps music players other widgets etc as well as to update content in one area of the page instead of refreshing the entire page both instances referred to herein as child calls . In addition the proliferation of i frames within site design while allowing web page designers to embed the equivalent of a mini page within a defined area have led to an increase in text html calls which make it more difficult to identify the parent call using HTTP traffic alone. Web page elements e.g. graphics video audio text etc. displayed as part of a single web page may not originate from the same website that the user is viewing. For example a single webpage retrieved via the parent call may display its own content simultaneously with content retrieved from one or more other webpages retrieved via the child calls . The generation of such composite web pages results in additional web traffic e.g. multiple HTTP requests when a single web page is accessed. For example in an email portal such as Gmail yahoo or hotmail in addition to displaying a electronic mail many additional web page elements may be returned such as advertisements and widgets e.g. news feeds weather displays etc. Each widget may have a separate data source different from the data source of the email portal. For example a weather widget may gather weather data from a weather provider s site. In previous monitoring methods HTTP traffic would be credited to the weather provider a child call even though the user was viewing the data through the widget provided by the email portal a parent call .

Browsers typically provide information on the Universal Resource Locator URL of the page presently being accessed in the browser s Page Info interface. In addition to the URL the Page Info interface may contain additional information about the page being presented such as for example an application type of the content being presented a rendering mode of the content being presented an encoding of the content being presented a last modified data of the content being presented etc. The user may access the Page Info interface manually by clicking a Page Info control within the browser. The browser may then display the Page Info to the user by means of a dialog box. Of course any other means of displaying information to the user may be implemented by the browser such as for example the Page Info may be displayed as a web page within the browser the Page Info may be displayed within a system tray notification etc. Alternatively the Page Info interface may be accessed programmatically for example by means of an Application Programming Interface API .

In example methods apparatus and articles of manufacture disclosed herein Internet usage monitoring is accomplished by monitoring the Page Info interface of the browser the active tab of the browser and other sources of monitoring information e.g. HTTP traffic data mouse keyboard info focus status of the browser etc. thereby achieving a more granular and accurate collection of usage data than possible in prior known methods.

In addition to advancements in web page complexity new features have been implemented in web browsers that increase the challenges of successfully monitoring user activity at the browser. In previous methods the browser window was only checked to see whether it was in focus on the user s desktop. For example if a user was viewing a web page in a browser and also had a document open in another application some prior methods would only credit time to the web page while the browser application was in focus i.e. the browser was the active window. Recently many browsers have begun using a feature called tabbed browsing. In a tabbed browser multiple web pages can be displayed in respective tabs within the browser application. Only one tab is viewed at a time. However the tab web page currently being viewed does not necessarily correspond to the last web page that was requested e.g. the user can easily switch between tabs to view web pages stored in memory e.g. cached web pages without sending a request to the Internet . Further web content requested from the Internet may not be displayed to the user. For example it is possible to setup multiple home pages in a browser each home page associated with a separate tab. When the browser is initialized each home page may be requested from the Internet but the user may only actually view the content in a first home page associated with one of the tabs and not switch to the content associated with a second tab. Because of this multi tab functionality properly crediting websites with durations of viewing times becomes difficult. By monitoring the Page Info interface of the active tab of the browser example methods apparatus and articles of manufacture disclosed herein properly credit viewing time to the correct web site.

In particular the Page Info interface of the browser is accessed to determine the parent call identifying the webpage that the user is viewing. In the above email portal weather widget example the parent call identifies the email portal and the child call identifies is the weather widget. By crediting only a parent call with a page view monitoring data can be more closely correlated to what the user is intending to view. The Page Info interface of the browser contains many different properties that help credit viewing to the proper site. Some of the items included in the Page Info interface of the browser are an address of the site being viewed e.g. a URL a type of the site being viewed a referring URL a last modified date meta tags of the site being viewed etc.

The HTTP traffic column is populated with HTTP traffic data showing the HTTP traffic at the time of the event. In the illustrated example detection of an event e.g. HTTP traffic causes the generation of the timestamp. Thus the timestamps may be thought of as a timestamp of the detected event e.g. an HTTP request identified in the traffic column . As shown in the illustrated example at 0 00 the user requested data from cnn.com. In response to the user s request for data from cnn.com the browser additionally requested advertisement data from adfusion.com and news data from svcs.cnn.com. The close proximity in time of the timestamps indicates that these requests were all part of the same transaction. Thus although the user is likely to have requested the cnn.com webpage initially the following requests were likely automatic requests driven by the cnn.com webpage itself. Although a specific set of web sites are shown in the transaction log to illustrate a prior method any web sites could be included in the transaction log because the contents of the transaction log are dependent upon the activity of the user and the contents of requested web pages.

The user interaction column is used to store user interaction data e.g. a flag setting indicating whether the user was interacting with the computer at the time of the recorded event. A determination of whether a user was interacting with the computer at the time of the recorded event may be based upon whether any keyboard or mouse events e.g. keystrokes mouse movements track ball movements mouse clicks etc. have occurred within a time window associated with the event e.g. in the 3 seconds preceding the event . In the example shown at 0 05 seconds a weather application was started. Because in this example there was no user interaction since 0 00 the recorded value of the user interaction at time 0 05 is No . Thus it can be concluded that the weather application was started in the background while the user s attention was on the cnn.com content.

The application focus column stores application focus data identifying the application that was in focus on the computer at the time of the event. In the example shown at time 0 00 the monitored browser was in focus. Further at time 1 05 the application focus changed to a text editor application. At that time the user may have been interacting with the text editor while the browser was no longer in focus. At time 2 10 the browser came back into focus e.g. web content rendered by the browser was presented to the user . In the example shown the application focus stores the name of the application in focus.

The application source column stores application source data indicating the source of the HTTP traffic e.g. the application that sent the corresponding request for the HTTP traffic. In the illustrated example at time 0 00 the application source is the browser. At 0 05 a weather application e.g. a widget requested data from weather.com while cnn.com was displayed in the browser and the application source was consequently stored as the weather application. Additionally there may be events that do not have an application source. For example at 1 05 the user changed the application focus to a text editor application. At the time of this event there was no HTTP traffic and therefore no application source data is recorded in the application source column .

In the example of the monitoring data collection server is a site to which the browser monitor reports data. In the illustrated example the collection site is a neutral third party site that does not provide the monitored content from server to client devices and or is not involved with delivering content from the content servers to the client device . The monitoring data collection site may be associated with an audience measurement and or web analytics company. The monitoring data collection site may receive data in any fashion. In the illustrated example monitoring data is transmitted from the browser monitor to the monitoring data collection site by File Transfer Protocol FTP communication. Any other system or protocol for transmitting data may additionally or alternatively be used. For example the data may be transmitted by an HTTP GET request wherein the request includes the collected data or some other data transfer or transmission protocol. The monitoring data collection site may process the monitoring data before storing the data or it may store the data as it is received.

The network of the illustrated example is the Internet. However any other network could be used. For example some or all of the network may be a company s intranet network. Although the network of the illustrated example operates based on the HTTP and IP protocols the network may additionally or alternatively use any other protocol to enable communication between devices on the network.

The user computer of the illustrated example is a personal computer. However any other type of computing device could be used to implement the computer such as for example a mobile e.g. cellular phone a personal digital assistant PDA Internet appliance etc. The user of the illustrated example is a panelist who has agreed to participate in a study. Although the example system of is a panelist based system other non panelist and or hybrid panelist systems may be employed. In the panelist system of the illustrated example demographic information is obtained from the user when the user joins and or registers for the panel. The demographic information may be obtained from the user via a telephone interview by having the user complete an online survey etc.

The network interface is an interface that allows applications running local to the computer to communicate with external sites via the network . In the illustrated example the network interface is a wired Ethernet port. However any other type of network interface may be used. For example a WiFi 802.11x wireless network port a Bluetooth network adapter or a cellular modem may be used. Additionally or alternatively there may be multiple network interfaces in any combination of types.

The browser monitor monitors user activity on the computer and more specifically monitors user interaction with the browser . In the illustrated example the browser monitor is an application executed on the computer . The application is downloaded on the computer upon receiving user consent. The consent may be obtained via the registration process e.g. when the user is interviewed to join the panel when the user completes an online survey to join the panel etc. The application may be downloaded via the Internet or sent to the user via a compact disc CD or a digital versatile disc DVD a Blueray disc or any other computer readable mediums storing the machine readable instructions constitutes the application. However alternative architectures or implementations may also be employed such as for example embedding the browser monitor in the browser e.g. a browser plug in JavaScript etc. monitoring browser activity from a remote site such as the monitoring data collection site etc.

In the illustrated example browser presents web content to the user. The example browser of is a tabbed browser. Tabbed browsers allow the user to download multiple web pages and select between the pages using tabs. For example the user is presented with a first web page on a first tab a second web page on a second tab etc. Only one of the web pages is displayed i.e. active at a given time i.e. the page associated with the active tab . The other pages inactive pages associated with the inactive tabs are stored or cached for later viewing. The tab associated with the currently displayed web content is known as the active browser tab while tabs associated with currently non displayed web content are known as inactive browser tabs . In the illustrated example the browser is Mozilla Firefox . However any other tabbed browser may also be used such as for example Microsoft Internet Explorer Apple Safari Google Chrome etc. At any given time there may be one or any number of browser tabs instantiated in a browser. The browser tabs that are associated with content but are not currently displayed and or selected are considered inactive browser tabs .

While the example of illustrates only one client device multiple client devices each monitored by a separate browser monitor are present. The client devices may be associated with different panelists households locations and or groups of panelists e.g. a family . Similarly while illustrates one collection site more than one collection server may be employed and or the collection server may be organized into hierarchical and or geographic regions.

The example user interaction data column of is stored as a Boolean value e.g. Yes No True False I O etc. . However any type of data may be stored as user interaction data such as for example the time since the last user interaction the type of the last user interaction a record of keystrokes or mouse clicks since the last event etc.

The application focus column of stores the name of the application in focus. However additional information may also be stored in the application focus column and or any other column s that may be added to such as for example the location of the application on the display of the computer how much processor time the application is consuming files opened by the application etc.

The application source column identifies the application to which HTTP traffic is being sent e.g. in response to a request for a webpage. However additional information may also be stored in the application source column and or in any other column s that may be added to such as for example a process identifier for the application a name of the executable that the HTTP traffic was sent to an identifier for a network interface used to receive the HTTP traffic etc.

The example browser active tab column indicates the active tab of the browser at the time of the event logged in the corresponding row as indicated by the timestamp column . For example at time 0 00 the user had selected a first tab e.g. Tab of the browser to view cnn.com. At time 0 35 the user opened a second tab within the browser to view msn.com. Further at time 2 10 the user brought the browser into focus after having previously switched the focus to the text editor as shown at time 1 05 . Analysis of the browser active tab data reveals that at time 2 10 the user also brought the first tab into focus within the browser. Accordingly the time periods from 0 00 to 0 35 and 2 10 to 4 00 can be properly credited to cnn.com whereas previous methods may have miscredited the presentation time period from 2 10 to 3 00 because the records would have indicated that the last page viewed was msn.com. In the illustrated example the browser active tab is determined by querying an Application Programming Interface API of the browser. The API returns data identifying the active tab. However any other implementation may additionally or alternatively be used. For example JavaScript code may be inserted into a webpage displayed by the browser which facilitates detection of the active tab or a plug in may be installed into the browser which facilitates detection of the active tab.

The browser Page Info address field allows the browser monitor to more clearly identify the site that the user was viewing at the time of the event. For example at time 0 00 the user initially requested cnn.com through the browser. Based on the data from cnn.com the browser additionally requested data from adfusion.com and svcs.cnn.com. For example the content from cnn.com may have included advertisements from adfusion.com and an RSS Really Simple Syndication feed from svcs.cnn.com. By analyzing the browser Page Info address field the browser monitor can determine whether the site being viewed correlates to the HTTP traffic and can allocate recorded viewing time accordingly.

The computer interaction data gatherer gathers data related to user interactions with the computer . In the illustrated example the computer interaction data includes events associated with the mouse and keyboard e.g. mouse clicks mouse movements keystrokes trackball movements track pad movements etc. as well as information about whether the browser was in focus. However any other data of interest may be gathered such as for example a list of other applications that are being executed software versions of applications installed on the computer focus status of other applications that are being executed etc. In the illustrated example events are collected by monitoring operating system events e.g. via a keyboard or mouse hook . However any other methods of monitoring operating system events may additionally or alternatively be used such as for example monitoring operating system files or memory using an operating system API etc.

The HTTP traffic data gatherer gathers HTTP traffic data sent and or received by the user computer . In the illustrated example the HTTP traffic data gatherer gathers clickstream data by monitoring the network interface for HTTP requests and responses. Alternatively HTTP traffic data may be gathered directly from the browser via a browser plug in that records HTTP traffic. The example HTTP traffic data gatherer filters HTTP traffic based on a library of terms of interest so that only items matching a specific type e.g. messages including an HTTP reply are recorded. However the HTTP traffic data gatherer may alternatively be configured to collect record all HTTP traffic or may use some other sort of filter. In the illustrated example HTTP traffic data includes any message from one computer to another. Such messages often include a Universal Resource Locator URL . Additionally the HTTP traffic data may include data identifying the originating software application. For example the HTTP traffic data may indicate that the originating software application is a word processing application requesting updates from a server via an HTTP request. In that case the HTTP traffic data gatherer of some examples will disregard the HTTP traffic as it does not relate to user interaction with a browser.

The example data storer of is implemented by a processor e.g. the processor of executing instructions but it could alternatively be implemented by an Application Specific Integrated Circuit ASIC Digital Signal Processor DSP Field Programmable Gate Array FPGA or other circuitry. The data storer receives monitoring data from the browser information data gatherer the computer interaction data gatherer and the HTTP traffic data gatherer and stores the data in the data store . The data store may be implemented by any device and or medium for storing data such as for example solid state memory flash memory magnetic media such as a hard disk drive random access memory optical media such as a compact disc CD or a digital versatile disc DVD etc. Furthermore the data stored in the data store may be in any data format such as for example binary data comma delimited data tab delimited data structured query language SQL structures etc.

The example data processor of is implemented by a processor executing instructions but it could alternatively be implemented by an ASIC DSP FPGA or other circuitry. The data processor parses the data stored in the data store by the data storer to determine which websites were viewed and how long each of the web sites were viewed. In the illustrated example the data processor uses HTTP traffic data mouse and keyboard data application focus data and active tab data to determine what web site a user was presented and how long the web site was presented. Further the data processor may store additional data in the data store such as for example classification data and or crediting data as will be discussed in connection with . Although the example of illustrates the data processor as a component of the browser monitor in other examples the data processor may be a component of the data collection site .

The example data communicator of is implemented as an Ethernet interface. However any other method of implementing the data communicator could alternatively be used. For example the data communicator may represent a TCP IP stack. The data communicator communicates with the monitoring data collection site to report the monitoring data collected by the browser monitor .

While an example manner of implementing the example browser monitoring system has been illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example browser information data gatherer the computer interaction data gatherer the HTTP traffic data gatherer the data storer the data processor and or more generally the example browser monitor of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example browser information data gatherer the computer interaction data gatherer the HTTP traffic data gatherer the data storer the data processor and or more generally the example browser monitor could be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc. When any of the appended apparatus claims are read to cover a purely software and or firmware implementation at least one of the example browser information data gatherer the computer interaction data gatherer the HTTP traffic data gatherer the data storer and or the data processor are hereby expressly defined to include a tangible computer readable medium such as a memory DVD CD etc. storing the software and or firmware. Further still the example browser information data gatherer the computer interaction data gatherer the HTTP traffic data gatherer the data storer and or the data processor of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer readable instructions stored on a tangible computer readable medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively the example processes of may be implemented using coded instructions e.g. computer readable instructions stored on a non transitory computer readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals.

Upon the start of the browser monitor multiple operations are performed in parallel with each other. The browser information data gatherer monitors the browser for events block . The browser events that the browser information data gatherer monitors for can be any events associated with the browser such as for example a change in the Page Info address field a change in the browser active tab etc. The data storer then stores the monitored browser events in the data store block . Control then proceeds to block where the browser information data gatherer continues to monitor for browser events.

The computer interaction data gatherer monitors the computer for computer events block . The computer events that the computer interaction data gatherer monitors for can be any computer interaction events associated with the computer . In the illustrated example computer interaction is detected by monitoring operating system events such as mouse clicks and keystrokes e.g. via a keyboard hook an operating system API etc. . Additionally or alternatively monitoring computer interaction may include monitoring the user via a web camera or microphone to for example identify the user operating the computer. This is particularly useful for monitoring computers that are used by more than one person e.g. a family PC . The data storer then stores the monitored computer interaction events in the data store block . Control then proceeds to block where the computer interaction data gatherer continues to monitor for computer interaction events.

The HTTP traffic data gatherer monitors the network interface for HTTP traffic block . The HTTP traffic that the HTTP traffic data gatherer monitors for can be any HTTP traffic received and or requested by the network interface . For example the HTTP traffic data gatherer may filter the HTTP traffic such that only HTTP requests are monitored. Additionally or alternatively the HTTP traffic data gatherer may monitor all HTTP traffic at the network interface . The data storer stores the monitored HTTP traffic in the data store block . Control then proceeds to block where the HTTP traffic data gatherer continues to monitor for HTTP traffic.

The data processor of the browser monitor waits for a trigger event block . The trigger event may be any sort of trigger event such as for example the expiration of a timer the detection of a browser event being stored in the data store as shown in block the detection of a computer interaction event being stored in the data store as shown in block and or the detection of HTTP traffic being stored in the data store as shown in block . The data processor then determines if the browser is running block . In the illustrated example determining if the browser is running is implemented by polling the computer interaction data gatherer which may return a list of active applications. Alternatively the data processor may query the data store to determine if the browser is running e.g. based on computer interaction events stored in the data store in block . If the browser is not running control returns to block to wait for another trigger event. Alternatively the data processor may wait for a period of time before monitoring for another trigger event e.g. 50 milliseconds 500 milliseconds 1 second 2 seconds etc. to prevent the browser monitor from utilizing an excessive amount of processor resources. As a further alternative if the browser monitor is implemented to begin upon the starting of the browser a determination that the browser is not running in block may indicate that the browsing session has been terminated. Accordingly the data processor may begin the processes shown in and the data collection process shown in may be terminated.

If the browser is running block the data processor determines if the browser is in focus block . The focus state of the browser shows whether the application window of the browser is the active window of the computer e.g. as compared to another application . In the illustrated example the data processor determines if the browser is in focus by reviewing computer interaction events stored in the data store . In particular the data processor may look at computer interaction events that pertain to a change in the active window of the computer . Alternatively the data processor may poll the computer interaction data gatherer to request the application that is presently in focus. If the browser is not in focus the data processor stores a timestamped record of the event in the enhanced transaction log . For example in the text editor was brought into focus at time 1 05. The event record stored in this case may only contain the timestamp and application that was in focus. Additionally or alternatively any other field of the enhanced transaction log of may also be populated with data related to the event.

If the browser is in focus the data processor proceeds to determine whether there has been user interaction e.g. via the user interaction data within the past 3 seconds to determine if the triggering event was user initiated block . The data processor of the illustrated example determines whether there was user interaction by querying recent computer interaction data events from the data store e.g. events that were stored in the data store in block . The data processor may use any duration of time to determine if there was recent user activity. For example the data processor may use a duration of 5 seconds 1 second etc. Further the duration of time may be dynamic and may change over time. After completion of block control proceeds to block .

Next the data processor determines the URL of the latest HTTP traffic data block . The data processor determines the URL of the latest HTTP traffic data by querying the data store for recent HTTP traffic data and may decode the HTTP traffic to determine the source e.g. by decoding the header of the HTTP message . Control then proceeds to block where the data processor determines the application source of the latest HTTP traffic data block . The application source of the HTTP traffic is the application on the computer that was transmitting or receiving the HTTP traffic e.g. a web browser an email client a newsreader a weather application etc. . The data processor may determine if the application source was a browser by referencing the application source against a list of known browsers. Further the data processor may also determine if the application source was from an approved browser. For example the HTTP traffic may be directed towards a browser that does not support features required for accurately monitoring user activity tabbed browsing the inability to respond to requests for Page Info data or an incompatible browser version. Any of these inadequacies may result in a browser not being approved. If a browser was the source the data processor determines the active tab of the browser block . The data processor may determine the active tab of the browser by querying browser events stored in the data store e.g. events that were stored by the Data Storer in block . Alternatively the data processor may poll the browser information data gatherer to retrieve the currently active tab of the browser. After gathering and storing the browser active tab data control then proceeds to block .

Next the data processor determines the browser Page Info address field e.g. the browser Page Info address field . The data processor determines the Address Field by querying the latest Page Info data from the data store e.g. Page Info data that was stored by the Data Storer in block . Control then proceeds to block where the data processor stores the timestamped event in the Enhanced Transaction Log within the Data Store . The timestamped event includes data that was determined in blocks .

The example data classification process begins when the browser monitor is instructed to classify the data stored in the data store . The example data classification process may be started periodically e.g. every 30 minutes every 24 hours every week etc. or it may also be started aperiodically e.g. when the data store reaches a specified amount of data when receiving a request for a data upload from the monitoring data collection site when a browsing session is terminated etc. Although is described as being performed by the browser monitor in some examples it is performed by the collection site .

The data processor begins the data classification process by loading an event record block . The event record may be in the form of a row of data from the Enhanced Transaction Log . The data processor then determines if there was any HTTP traffic e.g. HTTP traffic associated with the event. If there was no HTTP traffic then the data processor classifies the event as a non browser event block . A non browser event is an event that occurred in association with an application different from the browser. For example in the record at time 2 10 is a non browser event because there was no HTTP traffic data at the time of the event.

Next the data processor determines if browser Page Info address field is consistent with the HTTP traffic data block by looking for text similarities. For example if the HTTP traffic data exactly matches the browser Page Info address field then the two items are consistent. Additionally or alternatively the data processor may determine if the top level domain of the HTTP traffic data substantially matches the browser Page Info address field as a measure of whether the two items are consistent. If the Universal Resource Locator URL from the Page Info address field is consistent with the HTTP traffic data then there is a possibility that the event record should be classified as a parent call. If there is no correlation between the HTTP traffic data and the Page Info address field of the event record e.g. HTTP traffic data indicates that the traffic was associated with weather.com while the Page Info address field indicates that the displayed page was yahoo.com then the event record is classified as a child call block .

In order to further classify an event record as either a parent or child call the user interaction data of the event record is analyzed to determine if there was user interaction at the time of the event block . If there was user interaction at the time of the event there still exists a possibility that the event should be classified as a parent call. If there was no user interaction at the time of the event then the event is classified as a child call block .

Next the data processor analyzes the application focus data to determine whether or not the browser was in focus at the time of the event by evaluating the application focus data block . If the browser was in focus there still exists a possibility that the event record should be classified as a parent call. If the browser was not in focus then the event record is classified as a child call block .

The data processor analyzes the event record to determine if the browser tab was active by evaluating the browser active tab data block . If the tab was not active block the event should be classified as a child call block . If the browser tab was active block then there still exists a possibility that the event record should be classified as a parent call.

Next the data processor determines whether the browser was the application source by evaluating the application source data block . If the browser is the application source block then the event record is classified as a parent call block . If the browser is not the application source block the event record is classified as a child call block .

Irrespective of whether the event is a parent call child call or non browser event blocks and the data processor stores the events in the data store via the data storer . After storing the record the data processor determines if there are more records to be analyzed block . If more records exist control returns to block where the data processor loads the next event record block . If no additional records exist for analysis e.g. all records have been analyzed block the event classification process terminates.

The example crediting process begins when the browser monitor is instructed to credit time to parent calls stored in the data store . The example crediting process may be started periodically e.g. every 30 minutes every 24 hours every week etc. and or it may be started aperiodically e.g. when the data store reaches a specified threshold amount of data when receiving a request for a data upload from the monitoring data collection site when a browsing session is terminated when the classification process terminates etc. 

The data processor begins the crediting process by loading event records from the data store block . The data processor then finds a first parent call or non browser event record block . In the example illustrated in the first parent call is the request to cnn.com at time 0 00. The data processor then finds a second parent call or non browser event record block . The second parent call or non browser event record occurs after the first event. The second parent call or non browser event record may also be the termination of the event records e.g. there are no more parent calls or non browser events . Typically the browsing session will end with a non browser event as the user terminates the browser and the application focus changes to another application. In the example illustrated in the second parent call is the request to msn.com at time 0 35. Next the data processor determines the time difference between the first and second event records block . In the preceding example the time difference between the first and second parent calls is 35 seconds. The amount of time difference between the first and second event records varies based on the user s behavior and is based on the timestamps e.g. the timestamp of the event records.

Next the data processor determines if the first event is a parent call. If the first event is a parent call then the difference in time calculated at block is credited to the URL of the parent call e.g. the URL defined by the browser Page Info address field block . If the first event is not a parent call e.g. a non browser event then the calculated difference in time is credited to the non browser event block . Irrespective of whether the credit is given to a URL or a non browser event the crediting information is stored in the data store by the data storer .

The data processor then converts the second event into the first event block . This allows the data processor to sequentially identify parent calls or non browser events. Next the data processor determines if more parent calls or non browser events exist in the event records block . If more parent calls or non browser events exist control returns to block where the next parent call or non browser event is labeled as the second parent call or non browser event. Again the second parent call or non browser event occurs after the first parent call or non browser event. If there are no more parent calls or non browser event records in the log e.g. the end of the event records has been reached the network communicator transmits the crediting information to the monitoring data collection site . Additionally or alternatively the network communicator may also transmit any other data stored in the data store . Further the network communicator may transmit the data stored in the data store at any point in the processes shown in . Alternatively the classification process and the crediting process may be performed at the monitoring data collection site . If so block is implanted in conjunction with wherein the collected event records are transmitted to the monitoring data collection server . After the network communicator transmits the crediting information to the monitoring data collection site block or if the process is performed at the collection server when no more events exist block the crediting process terminates.

The system of the instant example includes a processor such as a general purpose programmable processor. For example the processor can be implemented by one or more Intel microprocessors from the Pentium family the Itanium family or the XScale family. Of course other processors from other families are also appropriate.

The processor is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is typically controlled by a memory controller not shown .

The computer also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

One or more input devices are connected to the interface circuit . The input device s permit a user to enter data and commands into the processor . The input device s can be implemented by for example a keyboard a mouse a touchscreen a track pad a trackball isopoint a remote and or a voice recognition system.

One or more output devices are also connected to the interface circuit . The output devices can be implemented for example by display devices e.g. a liquid crystal display a cathode ray tube display CRT a printer and or speakers . The interface circuit thus typically includes a graphics driver card.

The interface circuit also includes a communication device e.g. the network interface such as a modem or network interface card to facilitate exchange of data with external computers via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The computer also includes one or more mass storage devices for storing software and data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives and digital versatile disk DVD drives. The mass storage device may implement the data store .

The coded instructions of may be stored in the mass storage device in the local memory in the volatile memory in the non volatile memory and or on a removable storage medium such as a CD or DVD .

In addition although certain example methods apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all apparatus methods and articles of manufacture fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents.

