---

title: Application compatibility checking in a distributed computing environment
abstract: In various embodiments, methods and systems for maintaining compatibility between applications, based on feature-set constraints are provided. A distributed computing system provides Platform as a service (PaaS) including a software framework in a service model of cloud computing. A known compatibility baseline is established for features of a first application and a second application. The known compatibility baseline inherently includes a baseline set of unenumerated features of the applications. It is determined that the first application is compatible with second application based on comparing an explicit enumeration of added features or removed features in a feature set of the applications. The added features or removed features are tracked after the baseline set of unenumerated features is defined. The determination whether the first application and the second application are compatible is communicated for processing the first application and/or the second application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342298&OS=09342298&RS=09342298
owner: Microsoft Technology Licensing, LLC
number: 09342298
owner_city: Redmond
owner_country: US
publication_date: 20130314
---
Generally a distributed computing system is hosted in cloud computing systems across various nodes and is intended primarily to share resources to achieve efficiency in a converged infrastructure of shared services. The distributed computing system may support for example Platform as a service PaaS that provides a computing platform e.g. hardware architecture and software framework and a solution stack e.g. operating system web server database and programming language in a service model of cloud computing. In this service model the consumer creates the software using tools and or libraries from the provider. The consumer also controls software deployment and configuration settings. The provider provides the networks servers storage and other services. This model may also include multiple developers working on different applications with interdependencies. An application component e.g. feature may have a dependency with another application component running on the software framework or an application component may have a dependency on a software framework component. Compatibility checks between the applications and between applications and the software framework are necessary before deployment and upgrades. In addition the service model provides for frequent changes in detailed features in the application which augments the complexity assuring compatibility.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used in isolation as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention provide a method for maintaining compatibility between applications based on feature set constraints. A known compatibility baseline is identified for a first application and a second application. The known compatibility baseline is associated with a baseline set of unenumerated features of the applications. The known compatibility baseline may be determined based on compatibility testing. Determining compatibility between applications signals a compatibility baseline between the applications without explicit enumeration of features in the applications. It is determined that the first application is compatible with second application based on comparing an explicit enumeration of added features or removed features in a feature set of the applications. The added features or removed features are tracked after the baseline set of unenumerated features is defined. The determination whether the first application and the second application are compatible is communicated for processing the first application and or the second application.

The subject matter of embodiments of the invention is described with specificity herein to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather the inventors have contemplated that the claimed subject matter might also be embodied in other ways to include different steps or combinations of steps similar to the ones described in this document in conjunction with other present or future technologies. Moreover although the terms step and or block may be used herein to connote different elements of methods employed the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.

For purposes of this disclosure the word including has the same broad meaning as the word comprising. In addition words such as a and an unless otherwise indicated to the contrary include the plural as well as the singular. Thus for example a feature is satisfied where one or more features are present. Also the term or includes the conjunctive the disjunctive and both a or b thus includes either a or b as well as a and b .

For purposes of a detailed discussion below embodiments of the present invention are described with reference to a cloud computing distributed system with an application and an software framework however it is understood that the application and software framework are used for exemplary purposes and a compatibility check process described herein may be used for maintaining compatibility between different types of applications. Further while embodiments of the present invention may generally refer to the components described herein it is understood that an implementation of the techniques described may be extended to other components performing the steps described.

Typically a cloud computing distributed system acts to store data and or run applications in a distributed manner. For instance Platform as a service PaaS provides a computing platform e.g. hardware architecture and software framework and a solution stack e.g. operating system web server database and programming language in a service model of cloud computing. In this service model the consumer creates service applications using tools and or libraries from the provider. The consumer may also control service application deployment and configuration settings. The provider provides the networks servers storage and other services that include service applications running with service applications of the consumer. Applications of the distributed computing system may include nodes and virtual machines that are allocated to run one or more portions of applications. When more than one separate application is being supported by the nodes the nodes may be partitioned into virtual machines that concurrently run the separate applications respectively in individualized computing environments that support the resources and or operating system specific to each application. As used herein application may refer to software frameworks operating systems service applications roles and any combinations and variations thereof. It should be understood and appreciated by those of ordinary skill in the art that other suitable structures of cloud computing distributed systems may be used and that embodiments of the present invention are not limited to those applications across virtual machines described herein.

At a high level applications may be developed for different types of environments including a cloud computing distributed system where applications are built within a particular software framework. A software framework e.g. .NET software framework offered by the Microsoft Corporation of Redmond Wash. may refer to an abstraction in which software providing generic functionality may be selectively changed by additional user written code thus providing application specific software. The software framework may be a universal reusable software platform used to develop applications products and solutions. The software framework may include a large library that provides language interoperability. The software framework may include support programs compilers code libraries and application programming interfaces API and tool sets that bring all different components to enable development of a project or solution.

In developing applications for a software framework programmers may produce applications by combining their own source code with the software framework and other libraries. For example developers may utilize an application component e.g. application feature that receives messages from the software framework component e.g. software framework feature . In this regard the applications may need a required feature from the software framework and the software framework provides that particular feature. Component types may include user interface user process service agent service interface and security. For example a user interface component may function to provide a data display and acquire and validate user input the user interface supported by both application feature e.g. user defined classes and the software framework feature e.g. predefined classes .

Further the software framework may provide components that are used by application components to accomplish a range of common programming tasks including tasks such as string management data collection database connectivity and file access. For example the software framework may include classes that expedite and optimize the development process and provide access to system functionality. The software framework components and associated application components may be altered to provide updated versions of the application. In embodiments the software framework may support extensibility in that the framework may be extended by the user usually by selectively overriding or specialized by user code to provide specific functionality. Extensions may be provided to improve and maintain products and solutions through addition of new functionality or through modification of existing functionality. Extending the software framework may affect the custom driven applications running on the software framework.

By way of example the software framework components may be extended to further support specialized development scenarios thus creating dependencies for one or more applications associated with the particular component. Applications using software framework components may call a component for the application to execute in an intended manner. During application development and testing the application is observed to confirm compatibility between the application and the software framework. It is contemplated within embodiments of the present invention that components may include service components e.g. workflow service or service bus provided by the software framework and required by the application that may also be updated and maintained. As such a variety of techniques may be utilized to update inter dependent components of the software framework and or applications and similarly to confirm compatibility between them.

As an application evolves over time the application may assume certain environmental dependencies with other applications and or the software framework to function properly. As such the changes in the components of the application and or the software framework may be tracked to maintain compatibility as both the application and the software framework evolve to updated versions. In addition in a distributed computing system for example a cloud computing distributed system supporting PaaS configuration changes are based on customer needs and deployments occur at a rapid rate that is different from traditional formalized software development version controls. Traditional software development version controls may be characterized as major or minor releases that simply rely on version numbers without feature enumeration and lack support for breaking behavior changes. Distributed computing systems with software frameworks and associated applications which are frequently and selectively changed to provide specific functionality call for a compatibility check process that provides a seamless way of maintaining the compatibility between applications in order to perform upgrades to the application and or software framework for example.

Embodiments of the present invention introduce technology within the distributed computing system to upgrade applications based on a compatibility check process using feature set constraints of the applications. As used herein features refer to a prominent or characteristic application behavior that impacts the compatibility of the application with other applications. Feature may be used interchangeably with component when describing an application or the software framework. The distributed computing system is not meant to be limited to any particular configuration of the application infrastructure but broadly refers to any compilation of devices e.g. network devices computing devices power supply devices that may integrated within a fabric . For example the distributed computing system may be located within a data center managed by a cloud computing service provider e.g. WINDOWS AZURE cloud computing offered by the Microsoft Corporation of Redmond Wash. where implementing the compatibility check process allows for upgrading applications of a customer using the distribution computing system. The compatibility check process uses feature set constraints of the applications in that the feature changes of each application tracked from a known compatibility baseline of the applications are compared to determine compatibility of updated versions of the applications. In other words the compatibility check process is based in an exemplary aspect on the number of explicit changes in the applications over time not actual dependencies of all features. In this regard the compatibility check process does not necessitate explicit enumeration of all features in the applications which otherwise would be a tedious task. In embodiments maintaining the compatibility between applications may include a determination of a change type associated with an updated version of the application which dictates whether a feature is enumerated as added or removed from the feature set.

In operation by way of example an application may include a plurality of application features and a software framework may include a plurality of software framework features. The application and the software framework are compatible which creates a known compatibility baseline from which maintaining the compatibility between the applications may begin. As the application and the software framework evolve from the known compatibility baseline each may add new features which may be tracked. The set of features may be referred to as feature set constraints associated with the particular application or software framework. The feature set constraints may be used to determine compatibility capitalizing on the fact that each release of the application or software framework is substantially similar to the previous release. Thus the feature set constraints of the application and the software framework from the known compatibility baselines include added features or removed features relative to the baseline. In this regard the explicit set of all features in the application or software framework is not required to determine compatibility enumerating a set of all features e.g. application behaviors may also prove difficult as not all compatibility features may be anticipated in advance. Instead the compatibility of the application with the software framework may simply be determined if one feature set is contained within the feature set of the other.

Accordingly in a first aspect of the present invention one or more computer readable media storing computer useable instructions that when used by one or more distributed computing systems cause the one or more distributed computing systems to perform a method for maintaining compatibility between applications based on feature set constraints. The method includes identifying a first application that is compatible with a second application based on a baseline set of features associated with the first application and the second application. The method also includes determining based on comparing an explicit enumeration of added features or removed features in a feature set of the first application and a feature set of the second application that the first application is compatible with the second application wherein the added features or removed features are tracked after a known compatibility baseline is defined based on the baseline set of unenumerated features. The method further includes communicating a determination that the first application and the second application are compatible.

In a second aspect of the present invention one or more computer readable media storing computer useable instructions that when used by one or more computing devices cause the one or more computing devices to perform a method for maintaining compatibility between applications based on feature set constraints. The method includes identifying a first application that is compatible with a second application based on a baseline set of unenumerated features associated with the first application and the second application. The method also includes determining based on an explicit enumeration of changes in a feature set of the first application and a feature set of the second application whether the first application is compatible with the second application. The changes are tracked after a known compatibility baseline is defined for the baseline set of features. The first application is compatible with the second application when the feature set of the first application comprises the feature set of the second application. The method further includes communicating a compatibility determination for the first application and the second application.

In a third aspect of the present invention a system maintaining the compatibility between a first application and a second application based on feature set constraints is provided. The system includes an application development component configured for communicating one or more applications each with an explicit enumeration of one or more feature changes. The one or more feature changes are tracked after a known compatibility baseline is defined for the baseline set of features. The explicit enumeration identifies the known compatibility baseline. The application development component is further configured for receiving a compatibility check determination for at least one application from the one or more application. The system also includes a deployment component configured for receiving a communication of the one or more applications. The deployment component is further configured for determining based on the explicit enumeration of one or more feature changes in the one or more applications whether a first application is a compatible with a second application. The first application is compatible with the second application based on matching the known compatibility baseline of the first application and the second application. The deployment component is further configured for determining that the feature set of the first application comprises the feature set of the second application. When the feature set of the second application is at least in part a subset of the first application the first application is compatible with the second application. The deployment component is also configured for communicating a compatibility determination for the first application and the second application.

Having briefly described an overview of embodiments of the present invention an exemplary operating environment in which embodiments of the present invention may be implemented is described below in order to provide a general context for various aspects of the present invention. Referring initially to in particular an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device . Computing device is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing device be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.

The invention may be described in the general context of computer code or machine useable instructions including computer executable instructions such as program modules being executed by a computer or other machine such as a personal data assistant or other handheld device. Generally program modules including routines programs objects components data structures etc. refer to code that perform particular tasks or implement particular abstract data types. The invention may be practiced in a variety of system configurations including hand held devices consumer electronics general purpose computers more specialty computing devices etc. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.

With reference to computing device includes a bus that directly or indirectly couples the following devices memory one or more processors one or more presentation components input output ports input output components and an illustrative power supply . Bus represents what may be one or more busses such as an address bus data bus or combination thereof . Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy. For example one may consider a presentation component such as a display device to be an I O component. Also processors have memory. We recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop hand held device tablets mobile computing platforms client devices etc. as all are contemplated within the scope of and reference to computing device. 

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computing device and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media.

Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Computer storage media excludes signals per se.

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

Memory includes computer storage media in the form of volatile and or nonvolatile memory. The memory may be removable non removable or a combination thereof. Exemplary hardware devices include solid state memory hard drives optical disc drives etc. Computing device includes one or more processors that read data from various entities such as memory or I O components . Presentation component s present data indications to a user or other device. Exemplary presentation components include a display device speaker printing component vibrating component etc.

I O ports allow computing device to be logically coupled to other devices including I O components some of which may be built in. Illustrative components include a microphone joystick game pad satellite dish scanner printer wireless device etc.

With additional reference to a block diagram depicting an exemplary distributed computing system suitable for use in embodiments of the invention described. Generally the distributed computing system illustrates an environment in which the compatibility check using feature set constraints is enabled. In particular embodiments of the present invention provide systems and methods for using the tracked feature changes of applications with known compatibility baselines to determine compatibility between the applications. Among other components not shown the distributed computing system generally includes a cloud computing distributed system a fabric controller a node having a virtual machine VM running application A and application B a deployment component having a compatibility check module and an application development component A and application development component B all in communication with one another via a network . The network may include without limitation one or more local area networks LANs and or wide area networks WANs . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. Accordingly the network is not further described herein.

Any number of fabric controllers nodes virtual machines applications and deployment components may be employed in the distributed computing system within the scope of embodiments of the present invention. Some components may comprise a single device interface or multiple devices interfaces cooperating in a distributed environment. For instance the fabric controller may comprise multiple devices and or modules arranged in a distributed environment that collectively provide the functionality of the fabric controller described herein. Additionally other components modules not shown also may be included within the distributed computing system .

It should be understood that this and other arrangements described herein are set forth only as examples. Other arrangements and elements e.g. machines interfaces functions orders and groupings of functions etc. can be used in addition to or instead of those shown and some elements may be omitted altogether. Further many of the elements described herein are functional entities that may be implemented as discrete or distributed components or in conjunction with other components and in any suitable combination and location. Various functions described herein as being performed by one or more entities may be carried out by hardware firmware and or software. For instance various functions may be carried out by a processor executing instructions stored in memory.

With continued reference to cloud computing distributed system is part of a distributed computing system that acts to store data or run applications in a distributed manner. For instance the fabric controller and the collective referred to as application infrastructure e.g. node VM and application instances of the cloud computing distributed system function to run one or more portions of an application e.g. A and B . In particular the fabric controller is configured to deploy manage monitor and maintain applications. Generally the fabric controller manages all the resources in the cloud computing distributed system . An allocator not shown of the fabric controller may decide where new applications and restored applications should run choosing physical servers to optimize hardware utilization. The fabric controller may depend on configuration information of each application to make determinations on deployment of applications. The configuration information may include information on the type and number of roles instances that should be deployed. In embodiments an agent not shown on node may be configured to act as an intermediary in communications between the fabric controller and service application components.

The fabric controller may work with the deployment component in deploying applications on the cloud computing distributed system. The deployment component may be configured to facilitate the deployment of applications to the cloud computing distributed system . The deployment component may deploy new versions of applications that are compatible with other applications to be deployed or already running in the cloud computing distributed system . The deployment component may interface with a software development kit SDK running on a computing device of an application developer e.g. A or B or a cloud integrated development environment IDE not shown to upload new versions of applications for deployment. The deployment component manages several interrelated processes and procedures from application uploading to migration and from provisioning to version tracking for installing updates. In particular the deployment component may include a compatibility check module configured for determining whether two applications are able to run with each other. For example compatibility check module may check to see if a particular application runs on a software framework. The compatibility check module may receive a first application and a second application and match a known compatibility baseline for the first application and a second application. The compatibility module may then check the compatibility of the first application and the second application based of the feature set constraints of the applications as described below. The feature changes in the feature set of the applications may be tracked by an application developer and published as part of the deployment or compatibility check of the application.

The node in the cloud computing distributed system hosts portions or the application infrastructure e.g. VM A and B . Generally when one or more applications are being supported by nodes the nodes may be partitioned into virtual machines with a plurality of role instances that concurrently run the one or more applications. Each role may have a designated function for example a web role or a worker role. VM may run to support the different applications e.g. a software framework operating system a web application a database system a gaming application . Each of these applications may be developed by different application developers associated with an application development component e.g. A and B . The application development component may facilitate the development of an application solution that meets the customer requirements. Application development may include physical software design from detailed application requirements. The application development component may utilize an SDK associated with the cloud computing distributed system to build and test applications prior to uploading the applications to the cloud computing distributed system. In embodiments the application development component may utilize a cloud based IDE that provides comprehensive facilities for application development. Generally the application development component manages application development which includes computer programming the process of writing and maintaining the source code but in a broader sense of the term it includes all that is involved between the conception of the desired application through to the final manifestation of the software ideally in a planned and structured process.

In developing applications the application development component may manage tracking the feature changes between a predecessor version and a successive version. An application may be associated with different types of feature changes including additive changes major breaking changes and minor breaking changes. Each change may be tracked using different methods. It is contemplated within embodiments of the present invention that the application development component may facilitate tracking and designating changes as either additive changes major breaking changes or minor breaking changes. An additive change may provide a new feature to the application and may not be intended to break any features. In this regard application B provides a new feature e.g. F1 and application A may use this feature. The application developer of A and B may publish this feature set constraint as an additive change.

A major breaking change refers to a change in a feature that alters the compatibility for a substantial number of applications when the applications attempt to run with the changed application. As such major changes may be designated or published as a new baseline feature set. For example application A has a baseline feature set e.g. AXBX which has been used to track several different added and removed features.

The application A feature set constraint that may be published with the most recent version of application A may be AX F1 F2 F3 where AXBX. The application developer of B e.g. software framework developer decides to make another change e.g. D1 F4 C2 and the change is determined to be a major breaking change because it alters compatibility for a substantial number of applications. For example likely breaking all applications dependent on the features provided in BX. Advantageously the application developer of B may publish a new baseline feature set e.g. BX for application B. Since BX is a new baseline feature set its relation to the AX or BX are unknown. Applications must then reestablish a baseline compatibility by testing after any needed modification and publish an assertion that a given application is now compatible with the new baseline i.e. AXBX .

In contrast a minor breaking change refers to a change in a feature that does not change the compatibility of a substantial number of applications when the applications attempt to run with the changed application. As such advantageously minor changes may be designated and published as removed features in the feature set. In this regard application developers of applications that run with the changed application may opt into the removed features of the changed application.

In addition to tracking the determination an additive change a major breaking or a minor breaking change the application development component may also handle testing configurations of the application that have known minor incompatibilities. Verifying a minor incompatibility allows an application developer associated with an application that depends on the changed application to publish an enumerated required feature set based on testing the minor changes. In embodiments the application development component may also support compatibility testing for applications associated with a new baseline set for a major breaking change in an application.

It is contemplated within embodiments of the present invention that a long form feature set constraint may include a detailed description of the changes that act as a guide for targeted application compatibility verification. A feature set constraint may be published in a short form associated with a reference table that includes a long form of each enumerated short form entry. Further the application development component may maintain feature set constraints in a defined syntax shared by other similarly placed application. The feature set constraints use the format described herein and the feature sets may be used to determine compatibility. It should be understood that the exact syntax may vary from the exemplary syntax described herein as variations and combinations of the feature set constraints provided are contemplated within the scope of embodiments of the present invention.

The feature set constraints identify a known baseline compatibility for the application e.g. AX or BX and explicitly enumerate feature changes of the application tracked from the known compatibility baseline. As discussed the application development component may identify both additions and deletions between versions. In addition the application development component may publish the version changes as feature set constraints associated with the particular application versions. It is contemplated within embodiments of the present invention that the known compatibility baseline may be redefined based on a recalibration standard. For example after tracking changes for applications overtime the known compatibility baseline may be redefined based on a predefined threshold from which the explicit enumeration of changes then begins. The predefined threshold may be a period in the evolution of the application for example a software life cycle reset policy or on schedule with a major release cadence of an application e.g. a software framework in an exemplary aspect. In addition the known compatibility baseline may also be a duplicate of known compatibility baseline for a separate infrastructure or vendor. In this regard an application developer may immediately determine the compatibility for their application.

The application development component may also work with the deployment component to perform a compatibility check using the feature set constraints defined by an application between an application and a target application to confirm the applications are compatible. The feature set constraints of the applications are compared in order to determine if one feature set is contained within the other or equal to each other making the applications compatible. Compatibility checking may be performed using an SDK at the application development component where the application is uploaded to the cloud computing distributed system and compared via the compatibility check module to another application. The application development component may receive a target application for which a first application may be compared to for compatibility. It is contemplated within embodiments of the present invention that an interface at the SDK may be utilized to upload an application to perform a compatibility check identify a target application for the compatibility and receive communication of the determination of whether or not the applications are compatible. In embodiments the application may then proceed to deploy and upgrade the application in the cloud computing distributed system upon a determination that the applications are compatible.

Turning now to showing an application infrastructure for maintaining compatibility between applications in a distributed computing system is provided in accordance with aspects of the present invention. For exemplary purposes application A and application B are shown running together on virtual machines VM VM and VM each VM running different versions of the applications. Application A versions include and application B versions include each respectively associated with A1 A2 A3 and B1 B2 B3 as shown in Table 1. Further for discussion purposes let application A depend on application B and never the reverse and B has no dependencies. For example A is a web application running on B a software framework. In this regard application A may be associated with a set of required features and application B associated with a set of provided features.

Application A and B each include features. A feature may refer particularly to application behaviors that affect compatibility. In this regard it may be difficult to identify every application behavior that would be relevant for compatibility with another application when the application is released. Even if this were possible explicit enumeration of every feature may result in a compatibility matrix that is not scalable in particular in a distributed computing environment where several applications are developed with different teams of developers. As such the compatibility of A and B i.e. A and B need not be based on an actual explicit set of features in a feature set but rather a simple determination that one feature set comprises another set or in other words one feature set is a subset of the other feature set.

Initially a known compatibility baseline of A and B may be determined. The known compatibility baseline may be identified at the initial release of A and or B on VM . In operation the known compatibility baseline may be based on a compatibility testing process. Compatibility testing is performed between the applications to evaluate their compatibility with each other. Compatibility testing may also include certification testing. For example an application developer may run a complete suite of tests on a new operating environment to get the application certified for the software framework databases or platform. Any variations of compatibility testing and combinations thereof are contemplated within the scope of embodiments of the present invention.

Determining compatibility between applications through compatibility testing provides strong empirical evidence that all the required features of application A are provided by application B . In this regard a compatibility baseline is determined without explicit enumeration of individual features in A or B . The known compatibility baseline may be published by application developer of A tagged as AXBX. The initial assertion that AX is a subset of BX is based on the known compatibility baseline in that even though the explicit features of AX or BX are unknown their compatibility i.e. A runs on B supports this assertion. Thus an application e.g. A that runs on a software framework e.g. B may be published with a tag AX where BX as its feature set constraint. Application developer of B may simply publish a tag BX because B has no dependencies as stated earlier.

Each version of application A and B past the known compatibility baseline may track changes in the feature set as shown in Table 2A and 2B. In embodiments the application A and the feature set and the application B and the feature set are input into a compatibility check component for determining compatibility between A and B.

Accordingly by way of example to determine the compatibility of a version of A and a version of B the compatibility check component evaluates the features of A against the features of B. The compatibility check is based on the tracking of feature changes in applications. The compatibility check component may check if A and B are compatible by evaluating whether the features required by a given version of A are included in the features provided by a given version of B as shown. It is contemplated that the feature sets may be tracked using set theory constraints as shown in Tables 2A and 2B. The language of constraints takes advantage of the fact that each release of a component is mostly similar to the previous release. Thus the set constraints include a statement of the known compatibility baselines with a set of additions and removals relative to the baseline.

With reference to VM running A and B when the application developer of A develops the application the application developer may determine that a new feature F2 is needed on B for A to work. Basically A does not run on B . The application developer of A may request the application developer of B to add the F2 feature into a release. Adding this new feature in embodiments of the present invention requires that the application developer via an application development component to explicitly tag the new B with the feature F2 and any other features added. In this regard A may be published with a tag AX F2 where AXBX that is a subset of B tag BX F2 E2 where E2 is another feature added to the B application release.

Similarly the application developer of A may request a feature F3 added to B . The application developer of B may identify an incompatibility that requires removal of the F1 feature in order to introduce F3. F1 is a feature that had not been explicitly tracked but part of the A and B known compatibility baseline. The application developer of B may publish B with a tag BX F1 F2 F3 E2 E3 that explicitly tracks the addition of F3 and the removal of F1. Again compatibility checks may simply be based on comparing feature set constraints of B and A published with a tag AX F1 F2 F3 where AXBX . Advantageously with embodiments of the present invention from release to release the application developer of versions of A and the application developer of versions of B negotiate the addition and removal of features without having an agreement on the full feature set of the applications. To this point the feature F1 becomes a feature to track only after it is explicitly removed and not prior because F1 belonged in the known compatible baseline. The final compatibility determinations based on comparing tracked feature set changes are shown below.

Turning now to a flow diagram is provided that illustrates a method for maintaining compatibility between applications. At block a first application that is compatible with a second application is identified based on a baseline set of features associated with the first application and the second application. The first application may be dependent on the second application where the first application is associated with a required feature set and the second application is associated with a provided feature set. At block it determined based on comparing an explicit enumeration of added features or removed features in a feature set of the first application and a feature set of the second application that the first application is compatible with the second application wherein the added features or removed features are tracked after a known compatibility baseline is defined for the baseline set of features. The baseline set of features are associated with the known compatibility baseline determined based on performing a compatibility test between the first application and the second application. At block a determination that the first application and the second application are compatible is communicated. In embodiments communicating the determination that the first application and the second application are compatible may trigger a deployment procedure for the first application or the second application onto the distributed computing system.

Turning now to a flow diagram is provided that illustrates a method for maintaining compatibility between applications. At block a first application that is compatible with a second application based on a baseline set of unenumerated features associated with the first application and the second application is identified. At block whether the first application is compatible with a second application is determined based on an explicit enumeration of changes in a feature set of the first application and a feature set of the second application whether the first application is compatible with the second application. At block the first of two steps in determining whether a first application is compatible with a second application the known compatibility baseline of the first application is matched with the known compatibility baseline of the second application. The changes are tracked after a known compatibility baseline is defined for the baseline set of features. At block it is determined that the feature set of the first application is compatible with the second application when the feature set of the first application comprises the feature set of the second application. The feature set of the second application is at least in part a subset of the first application. At block a determination that the first application and the second application are compatible is communicated.

Embodiments of the present invention have been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which the present invention pertains without departing from its scope.

From the foregoing it will be seen that this invention in one well adapted to attain all the ends and objects hereinabove set forth together with other advantages which are obvious and which are inherent to the structure.

It will be understood that certain features and sub combinations are of utility and may be employed without reference to other features or sub combinations. This is contemplated by and is within the scope of the claims.

