---

title: Continuous upgrading of computers in a load balanced environment
abstract: The present invention is directed towards methods and systems for performing maintenance on computers included in a group of load balanced computer. A maintenance agent identifies a computers in the group as requiring maintenance, and a second computer as having up-to-date maintenance and a load level below a limit. The load balancer may assign a request to the second computer responsive to the identification. Responsive to a determination that spare capacity from the plurality of computers available to receive requests is above the threshold and that the first computer is idle, the maintenance agent may remove, for maintenance, the first computer from the plurality of computers available to receive requests. The maintenance agent may identify the first computer as having up-to-date maintenance responsive to the maintenance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09264296&OS=09264296&RS=09264296
owner: Citrix Systems, Inc.
number: 09264296
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20130808
---
This present application is a continuation of U.S. patent application Ser. No. 13 100 936 Continuous Upgrading Of Computers In A Load Balanced Environment filed May 4 2011 now allowed which claims the benefit of and priority to U.S. Provisional Patent Application No. 61 332 172 entitled CONTINUOUS UPGRADING OF COMPUTERS IN A LOAD BALANCED ENVIRONMENT filed May 6 2010 which are both incorporated by reference in their entirety.

The methods and systems described herein relate generally to updating computers. In particular the methods and systems relate to updating or maintaining computers in a load balanced environment.

Typically maintenance of computers included in a load balancing scheme includes the removal of those computers from the load balancing scheme. Removal of the computers from the load balancing scheme or environment often includes forcing or requesting that all pending processing requests in a computer cease. In some instances load balanced computers may receive a processing request from a load balancer server at any given time. Thus removing a computer may require that the load balancer server stop issuing processing requests. The time it can take to terminate the processes running on a computer can be significant.

In some instances maintaining load balanced computers can be accomplished using a maintenance window that causes the load balanced service to be unavailable at particular points in time and sometimes force or cause the termination of any pending requests. Typically these maintenance windows are artificially created by an administrator and involve forcing the termination of all services so that maintenance can be performed on all computers in the group at the same time. Using a maintenance window to maintain load balanced computer may not be suitable for all workloads. Further there are drawbacks to using maintenance windows such as the inability to terminate a request. Furthermore service unavailability may be undesirable i.e. for an environment that needs a system that is operative twenty four hours a day seven days a week. In some embodiments utilization patterns of a service may be unpredictable resulting in difficulty in scheduling a maintenance window. A compromise such as providing a short maintenance window may be inadequate for handling a large group of computers. Still other drawbacks may include difficulty or inability in handling certain exceptions and or a requirement that a maintenance window starts and ends during non working hours.

Still another method can include manually removing computers from a group of load balanced computers. Drawbacks to this method include the risk involved with an unanticipated need for a longer period of time to perform maintenance. There exists a need for a method of maintaining load balanced computers that avoids the drawbacks of present methods.

In certain aspects described herein are methods and systems for automating a maintenance event rollout to a group of load balanced computers. The methods and systems in some embodiments may not need additional computing resources and can limit the risk that the load balanced group will become under provisioned at any point in time. In some instances the methods and systems described herein may maximize all aspects of the load balancing maintenance process by reducing the number of computers subject to load balance to a minimum number increasing the number of maintenance pending computers that can be removed from the group to a highest number increasing user experience by not requiring the termination of user resources and or substantially reducing the risk that requests may fail due to an overloaded computer. The methods and systems disclosed further address the drawbacks of using a maintenance window by using a method that removes a load balanced computer from a group of load balanced computers and applies scheduled and needed modifications to that computer. In some aspects a maintenance agent selects computers marked as maintenance pending removes them from the group of load balanced computers applies updates and modifications to the computers marks them as fully maintained and launches them back into the group of load balanced computers.

In one aspect the disclosure is related to a method for updating a plurality of computers in a load balanced environment. A maintenance agent may identify to a load balancer a first computer as requiring maintenance the first computer identified from a plurality of computers available to receive requests from the load balancer. The maintenance agent may identify to the load balancer a second computer as having i up to date maintenance and ii a load level below a predetermined load limit the second computer identified from the plurality of computers. The load balancer may assign a request to the second computer responsive to the identification that the second computer has a load level below the predetermined load limit and that the first computer requires maintenance. The load balancer may determine that spare capacity from the plurality of computers available to receive requests is above a threshold. The load balancer may determine that the first computer is idle. Responsive to the determination that i the spare capacity from the plurality of computers available to receive requests is above the threshold and ii the first computer is idle the maintenance agent may remove for maintenance the first computer from the plurality of computers available to receive requests. The maintenance agent may identify the first computer as having up to date maintenance responsive to the maintenance.

In some embodiments the load balancer determines the threshold based on utilization of the plurality of computers. The maintenance agent may detect that the first computer is due for at least one of a patch update disk image update program installation or removal a service update a security check storage maintenance memory or cache clean up configuration update physical component repair and data corruption repair. The load balancer may be configured to preferably assign a request to a computer having up to date maintenance rather than a computer requiring maintenance. The load balancer may assign a request to the first computer if the second computer has a load level above the predetermined load limit and the first computer has a load level below the predetermined load limit.

In some embodiments the load balancer allows the first computer to complete processing of requests assigned to the first computer the requests assigned prior to identification that the first computer lacks up to date maintenance. The maintenance agent may request maintenance and processing status of at least one computer from the plurality of computers. The maintenance agent may update a maintenance status of the first computer in a table tracking maintenance status of at least some of the plurality of computers and tagging on the first computer the maintenance status of the first computer the maintenance status indicating that maintenance is not up to date. In certain embodiments the maintenance agent may modify a load balancing policy of a plurality of policies that the load balancer uses to assign a request. The maintenance agent may determine responsive to the threshold determination whether to remove a third computer identified as requiring maintenance from the plurality of computers for maintenance.

In another aspect the present disclosure is related to a system for updating a plurality of computers in a load balanced environment. The system includes a load balancer and a maintenance agent in communication with the load balancer. The maintenance agent executes on a computing device. The maintenance agent may identify a first computer as requiring maintenance the first computer identified from a plurality of computers available to receive requests from the load balancer. The maintenance agent may identify a second computer as having i up to date maintenance and ii a load level below a predetermined load limit the second computer identified from the plurality of computers. The load balancer may assign a request to the second computer responsive to the identification that the second computer has a load level below the predetermined load limit and that the first computer requires maintenance. In some embodiments the maintenance agent removes the first computer from the plurality of computers for maintenance responsive to a determination that i spare capacity from the plurality of computers available to receive requests is above a threshold and ii the first computer is idle and identifies the first computer as having up to date maintenance responsive to the maintenance.

In some embodiments the load balancer determines the threshold based on utilization of the plurality of computers. The maintenance agent may detect that the first computer is due for at least one of a patch update disk image update program installation or removal a service update a security check storage maintenance memory or cache clean up configuration update physical component repair and data corruption repair. The load balancer may be configured to preferably assign a request to a computer having up to date maintenance rather than a computer requiring maintenance. The load balancer may assign a request to the first computer if the second computer has a load level above the predetermined load limit and the first computer has a load level below the predetermined load limit.

In some embodiments the load balancer allows the first computer to complete processing of requests assigned to the first computer the requests assigned prior to identification that the first computer lacks up to date maintenance. The maintenance agent may request maintenance and processing status of at least one computer from the plurality of computers. The maintenance agent may perform one of update a maintenance status of the first computer in a table tracking maintenance status of at least some of the plurality of computers and tag on the first computer the maintenance status of the first computer the maintenance status indicating that maintenance is not up to date. In certain embodiments the maintenance agent modifies a load balancing policy of a plurality of policies that the load balancer uses to assign a request. The maintenance agent may determine responsive to the threshold determination whether to remove a third computer identified as requiring maintenance from the plurality of computers for maintenance.

For purposes of reading the description of the various embodiments of the present invention below the following descriptions of the sections of the specification and their respective contents may be helpful 

In one embodiment the computing environment can include an appliance installed between the server s and client machine s . This appliance can mange client server connections and in some cases can load balance client connections amongst a plurality of backend servers.

The client machine s can in some embodiment be referred to as a single client machine or a single group of client machines while server s may be referred to as a single server or a single group of servers . In one embodiment a single client machine communicates with more than one server while in another embodiment a single server communicates with more than one client machine . In yet another embodiment a single client machine communicates with a single server .

A client machine can in some embodiments be referenced by any one of the following terms client machine s client s client computer s client device s client computing device s local machine remote machine client node s endpoint s endpoint node s or a second machine. The server in some embodiments may be referenced by any one of the following terms server s local machine remote machine server farm s host computing device s or a first machine s .

In one embodiment the client machine can be a virtual machine C. The virtual machine C can be any virtual machine while in some embodiments the virtual machine C can be any virtual machine managed by a hypervisor developed by XenSolutions Citrix Systems IBM VMware or any other hypervisor. In other embodiments the virtual machine C can be managed by any hypervisor while in still other embodiments the virtual machine C can be managed by a hypervisor executing on a server or a hypervisor executing on a client .

The client machine can in some embodiments execute operate or otherwise provide an application that can be any one of the following software a program executable instructions a virtual machine a hypervisor a web browser a web based client a client server application a thin client computing client an ActiveX control a Java applet software related to voice over internet protocol VoIP communications like a soft IP telephone an application for streaming video and or audio an application for facilitating real time data communications a HTTP client a FTP client an Oscar client a Telnet client or any other set of executable instructions. Still other embodiments include a client device that displays application output generated by an application remotely executing on a server or other remotely located machine. In these embodiments the client device can display the application output in an application window a browser or other output window. In one embodiment the application is a desktop while in other embodiments the application is an application that generates a desktop.

The server in some embodiments executes a remote presentation client or other client or program that uses a thin client or remote display protocol to capture display output generated by an application executing on a server and transmits the application display output to a remote client . The thin client or remote display protocol can be any one of the following protocols the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash.

The computing environment can include more than one server A N such that the servers A N are logically grouped together into a server farm . The server farm can include servers that are geographically dispersed and logically grouped together in a server farm or servers that are located proximate to each other and logically grouped together in a server farm . Geographically dispersed servers A N within a server farm can in some embodiments communicate using a WAN MAN or LAN where different geographic regions can be characterized as different continents different regions of a continent different countries different states different cities different campuses different rooms or any combination of the preceding geographical locations. In some embodiments the server farm may be administered as a single entity while in other embodiments the server farm can include multiple server farms .

In some embodiments a server farm can include servers that execute a substantially similar type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. UNIX LINUX or SNOW LEOPARD. In other embodiments the server farm can include a first group of servers that execute a first type of operating system platform and a second group of servers that execute a second type of operating system platform. The server farm in other embodiments can include servers that execute different types of operating system platforms.

The server in some embodiments can be any server type. In other embodiments the server can be any of the following server types a file server an application server a web server a proxy server an appliance a network appliance a gateway an application gateway a gateway server a virtualization server a deployment server a SSL VPN server a firewall a web server an application server or as a master application server a server executing an active directory or a server executing an application acceleration program that provides firewall functionality application functionality or load balancing functionality. In some embodiments a server may be a RADIUS server that includes a remote authentication dial in user service. In embodiments where the server comprises an appliance the server can be an appliance manufactured by any one of the following manufacturers the Citrix Application Networking Group Silver Peak Systems Inc Riverbed Technology Inc. F5 Networks Inc. or Juniper Networks Inc. Some embodiments include a first server A that receives requests from a client machine forwards the request to a second server B and responds to the request generated by the client machine with a response from the second server B. The first server A can acquire an enumeration of applications available to the client machine and well as address information associated with an application server hosting an application identified within the enumeration of applications. The first server A can then present a response to the client s request using a web interface and communicate directly with the client to provide the client with access to an identified application.

The server can in some embodiments execute any one of the following applications a thin client application using a thin client protocol to transmit application display data to a client a remote display presentation application any portion of the CITRIX ACCESS SUITE by Citrix Systems Inc. like the METAFRAME or CITRIX PRESENTATION SERVER MICROSOFT WINDOWS Terminal Services manufactured by the Microsoft Corporation or an ICA client developed by Citrix Systems Inc. Another embodiment includes a server that is an application server such as an email server that provides email services such as MICROSOFT EXCHANGE manufactured by the Microsoft Corporation a web or Internet server a desktop sharing server a collaboration server or any other type of application server. Still other embodiments include a server that executes any one of the following types of hosted server applications GOTOMEETING provided by Citrix Online Division Inc. WEBEX provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office LIVE MEETING provided by Microsoft Corporation.

Client machines can in some embodiments be a client node that seeks access to resources provided by a server . In other embodiments the server may provide clients or client nodes with access to hosted resources. The server in some embodiments functions as a master node such that it communicates with one or more clients or servers . In some embodiments the master node can identify and provide address information associated with a server hosting a requested application to one or more clients or servers . In still other embodiments the master node can be a server farm a client a cluster of client nodes or an appliance.

One or more clients and or one or more servers can transmit data over a network installed between machines and appliances within the computing environment . The network can comprise one or more sub networks and can be installed between any combination of the clients servers computing machines and appliances included within the computing environment . In some embodiments the network can be a local area network LAN a metropolitan area network MAN a wide area network WAN a primary network comprised of multiple sub networks located between the client machines and the servers a primary public network with a private sub network a primary private network with a public sub network or a primary private network with a private sub network . Still further embodiments include a network that can be any of the following network types a point to point network a broadcast network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network a wireline network or a network that includes a wireless link where the wireless link can be an infrared channel or satellite band. The network topology of the network can differ within different embodiments possible network topologies include a bus network topology a star network topology a ring network topology a repeater based network topology or a tiered star network topology. Additional embodiments may include a network of mobile telephone networks that use a protocol to communicate among mobile devices where the protocol can be any one of the following AMPS TDMA CDMA GSM GPRS UMTS or any other protocol able to transmit data among mobile devices.

Illustrated in is an embodiment of a computing device where the client machine and server illustrated in can be deployed as and or executed on any embodiment of the computing device illustrated and described herein. Included within the computing device is a system bus that communicates with the following components a central processing unit a main memory storage memory an input output I O controller display devices A N an installation device and a network interface . In one embodiment the storage memory includes an operating system software routines and a client agent . The I O controller in some embodiments is further connected to a key board and a pointing device . Other embodiments may include an I O controller connected to more than one input output device A N.

Embodiments of the computing machine can include a central processing unit characterized by any one of the following component configurations logic circuits that respond to and process instructions fetched from the main memory unit a microprocessor unit such as those manufactured by Intel Corporation those manufactured by Motorola Corporation those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor such as those manufactured by International Business Machines a processor such as those manufactured by Advanced Micro Devices or any other combination of logic circuits. Still other embodiments of the central processing unit may include any combination of the following a microprocessor a microcontroller a central processing unit with a single processing core a central processing unit with two processing cores or a central processing unit with more than one processing core.

While illustrates a computing device that includes a single central processing unit in some embodiments the computing device can include one or more processing units . In these embodiments the computing device may store and execute firmware or other executable instructions that when executed direct the one or more processing units to simultaneously execute instructions or to simultaneously execute instructions on a single piece of data. In other embodiments the computing device may store and execute firmware or other executable instructions that when executed direct the one or more processing units to each execute a section of a group of instructions. For example each processing unit may be instructed to execute a portion of a program or a particular module within a program.

In some embodiments the processing unit can include one or more processing cores. For example the processing unit may have two cores four cores eight cores etc. In one embodiment the processing unit may comprise one or more parallel processing cores. The processing cores of the processing unit may in some embodiments access available memory as a global address space or in other embodiments memory within the computing device can be segmented and assigned to a particular core within the processing unit . In one embodiment the one or more processing cores or processors in the computing device can each access local memory. In still another embodiment memory within the computing device can be shared amongst one or more processors or processing cores while other memory can be accessed by particular processors or subsets of processors. In embodiments where the computing device includes more than one processing unit the multiple processing units can be included in a single integrated circuit IC . These multiple processors in some embodiments can be linked together by an internal high speed bus which may be referred to as an element interconnect bus.

In embodiments where the computing device includes one or more processing units or a processing unit including one or more processing cores the processors can execute a single instruction simultaneously on multiple pieces of data SIMD or in other embodiments can execute multiple instructions simultaneously on multiple pieces of data MIMD . In some embodiments the computing device can include any number of SIMD and MIMD processors.

The computing device in some embodiments can include a graphics processor or a graphics processing unit. The graphics processing unit can include any combination of software and hardware and can further input graphics data and graphics instructions render a graphic from the inputted data and instructions and output the rendered graphic. In some embodiments the graphics processing unit can be included within the processing unit . In other embodiments the computing device can include one or more processing units where at least one processing unit is dedicated to processing and rendering graphics.

One embodiment of the computing machine includes a central processing unit that communicates with cache memory via a secondary bus also known as a backside bus while another embodiment of the computing machine includes a central processing unit that communicates with cache memory via the system bus . The local system bus can in some embodiments also be used by the central processing unit to communicate with more than one type of I O device A N. In some embodiments the local system bus can be any one of the following types of buses a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. Other embodiments of the computing machine include an I O device A N that is a video display that communicates with the central processing unit . Still other versions of the computing machine include a processor connected to an I O device A N via any one of the following connections HyperTransport Rapid I O or InfiniBand. Further embodiments of the computing machine include a processor that communicates with one I O device A using a local interconnect bus and a second I O device B using a direct connection.

The computing device in some embodiments includes a main memory unit and cache memory . The cache memory can be any memory type and in some embodiments can be any one of the following types of memory SRAM BSRAM or EDRAM. Other embodiments include cache memory and a main memory unit that can be any one of the following types of memory Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM Ferroelectric RAM FRAM or any other type of memory. Further embodiments include a central processing unit that can access the main memory via a system bus a memory port or any other connection bus or port that allows the processor to access memory .

One embodiment of the computing device provides support for any one of the following installation devices a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device a bootable medium a bootable CD a bootable CD for GNU Linux distribution such as KNOPPIX a hard drive or any other device suitable for installing applications or software. Applications can in some embodiments include a client agent or any portion of a client agent . The computing device may further include a storage device that can be either one or more hard disk drives or one or more redundant arrays of independent disks where the storage device is configured to store an operating system software programs applications or at least a portion of the client agent . A further embodiment of the computing device includes an installation device that is used as the storage device .

The computing device may further include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 SNA DECNET broadband connections e.g. ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET wireless connections or some combination of any or all of the above. Connections can also be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET SONET SDH Fiber Distributed Data Interface FDDI RS232 RS485 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g CDMA GSM WiMax and direct asynchronous connections . One version of the computing device includes a network interface able to communicate with additional computing devices via any type and or form of gateway or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS or the Citrix Gateway Protocol manufactured by Citrix Systems Inc. Versions of the network interface can comprise any one of a built in network adapter a network interface card a PCMCIA network card a card bus network adapter a wireless network adapter a USB network adapter a modem or any other device suitable for interfacing the computing device to a network capable of communicating and performing the methods and systems described herein.

Embodiments of the computing device include any one of the following I O devices A N a keyboard a pointing device mice trackpads an optical pen trackballs microphones drawing tablets video displays speakers inkjet printers laser printers and dye sublimation printers or any other input output device able to perform the methods and systems described herein. An I O controller may in some embodiments connect to multiple I O devices A N to control the one or more I O devices. Some embodiments of the I O devices A N may be configured to provide storage or an installation medium while others may provide a universal serial bus USB interface for receiving USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. Still other embodiments include an I O device that may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

In some embodiments the computing machine can connect to multiple display devices A N in other embodiments the computing device can connect to a single display device while in still other embodiments the computing device connects to display devices A N that are the same type or form of display or to display devices that are different types or forms. Embodiments of the display devices A N can be supported and enabled by the following one or multiple I O devices A N the I O controller a combination of I O device s A N and the I O controller any combination of hardware and software able to support a display device A N any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices A N. The computing device may in some embodiments be configured to use one or multiple display devices A N these configurations include having multiple connectors to interface to multiple display devices A N having multiple video adapters with each video adapter connected to one or more of the display devices A N having an operating system configured to support multiple displays A N using circuits and software included within the computing device to connect to and use multiple display devices A N and executing software on the main computing device and multiple secondary computing devices to enable the main computing device to use a secondary computing device s display as a display device A N for the main computing device . Still other embodiments of the computing device may include multiple display devices A N provided by multiple secondary computing devices and connected to the main computing device via a network.

In some embodiments the computing machine can execute any operating system while in other embodiments the computing machine can execute any of the following operating systems versions of the MICROSOFT WINDOWS operating systems such as WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE WINDOWS XP and WINDOWS VISTA the different releases of the Unix and Linux operating systems any version of the MAC OS manufactured by Apple Computer OS 2 manufactured by International Business Machines any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system. In still another embodiment the computing machine can execute multiple operating systems. For example the computing machine can execute PARALLELS or another virtualization platform that can execute or manage a virtual machine executing a first operating system while the computing machine executes a second operating system different from the first operating system.

The computing machine can be embodied in any one of the following computing devices a computing workstation a desktop computer a laptop or notebook computer a server a handheld computer a mobile telephone a portable telecommunication device a media playing device a gaming system a mobile computing device a netbook a device of the IPOD family of devices manufactured by Apple Computer any one of the PLAYSTATION family of devices manufactured by the Sony Corporation any one of the Nintendo family of devices manufactured by Nintendo Co any one of the XBOX family of devices manufactured by the Microsoft Corporation or any other type and or form of computing telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the methods and systems described herein. In other embodiments the computing machine can be a mobile device such as any one of the following mobile devices a JAVA enabled cellular telephone or personal digital assistant PDA such as the i55sr i58sr i85s i88s i90c i95c1 or the im1100 all of which are manufactured by Motorola Corp the 6035 or the 7135 manufactured by Kyocera the i300 or i330 manufactured by Samsung Electronics Co. Ltd the TREO 180 270 600 650 680 700p 700w or 750 smart phone manufactured by Palm Inc any computing device that has different processors operating systems and input devices consistent with the device or any other mobile computing device capable of performing the methods and systems described herein. In still other embodiments the computing device can be any one of the following mobile computing devices any one series of Blackberry or other handheld device manufactured by Research In Motion Limited the iPhone manufactured by Apple Computer Palm Pre a Pocket PC a Pocket PC Phone or any other handheld mobile device.

Referring now to one embodiment of an environment comprising a plurality of servers may be suitably managed by a load balancing system. This environment may illustrate aspects of interfaces connections components and communications that can be suitably adapted for use by a load balancing system. The plurality of servers may comprise a farm or server farm where each server can include a network side interface and a farm side interface . The network side interface can be in communication with one or more clients or a network . The network can be a WAN LAN or any other embodiment of a network such those networks described above.

Each server has a farm side interface connected with one or more farm side interface s of other servers in the farm . In one embodiment each farm side interface is interconnected to other farm side interfaces such that the servers within the farm may communicate with one another. On each server the farm side interface communicates with the network side interface . The farm side interfaces can also communicate designated by arrows with a persistent store and in some embodiments with a dynamic store . The combination of servers the persistent store and the dynamic store when provided are collectively referred to as a farm . In some embodiments a server communicates with the persistent store and other servers communicate with the server to access information stored in the persistent store.

The persistent store may be physically implemented on a disk disk farm a redundant array of independent disks RAID writeable compact disc or any other device that allows data to be read and written and that maintains written data if power is removed from the storage device. A single physical device may provide storage for a plurality of persistent stores i.e. a single physical device may be used to provide the persistent store for more than one farm . The persistent store maintains static data associated with each server in farm and global data used by all servers within the farm . In one embodiment the persistent store may maintain the server data in a Lightweight Directory Access Protocol LDAP data model. In other embodiments the persistent store stores server data in an ODBC compliant database. For the purposes of this description the term static data refers to data that do not change frequently i.e. data that change only on an hourly daily or weekly basis or data that never change. Each server uses a persistent storage subsystem to read data from and write data to the persistent store .

The data stored by the persistent store may be replicated for reliability purposes physically or logically. For example physical redundancy may be provided using a set of redundant mirrored disks each providing a copy of the data. In other embodiments the database itself may be replicated using standard database techniques to provide multiple copies of the database. In further embodiments both physical and logical replication may be used concurrently.

The dynamic store i.e. the collection of all record tables can be embodied in various ways. In one embodiment the dynamic store is centralized that is all runtime data are stored in the memory of one server in the farm . That server operates as a master network node with which all other servers in the farm communicate when seeking access to that runtime data. In another embodiment each server in the farm keeps a full copy of the dynamic store . Here each server communicates with every other server to keep its copy of the dynamic store up to date.

In another embodiment each server maintains its own runtime data and communicates with other servers when seeking to obtain runtime data from them. Thus for example a server attempting to find an application program requested by the client may communicate directly with every other server in the farm to find one or more servers hosting the requested application.

For farms having a large number of servers the network traffic produced by these embodiments can become heavy. One embodiment alleviates heavy network traffic by designating a subset of the servers in a farm typically two or more as collector points. Generally a collector point is a server that collects run time data. Each collector point stores runtime data collected from certain other servers in the farm . Each server in the farm is capable of operating as and consequently is capable of being designated as a collector point. In one embodiment each collector point stores a copy of the entire dynamic store . In another embodiment each collector point stores a portion of the dynamic store i.e. it maintains runtime data of a particular data type. The type of data stored by a server may be predetermined according to one or more criteria. For example servers may store different types of data based on their boot order. In other embodiments the type of data stored by a server may be configured by an administrator using an administration tool. In these embodiments the dynamic store is distributed amongst two or more servers in the farm .

Servers not designated as collector points know the servers in a farm that are designated as collector points. A server not designated as a collector point may communicate with a particular collector point when delivering and requesting runtime data. Consequently collector points lighten network traffic because each server in the farm communicates with a single collector point server rather than with every other server when seeking to access the runtime data.

Each server can operate as a collector point for more than one type of data. For example server can operate as a collector point for licensing information and for loading information. In these embodiments each collector point may amass a different type of run time data. For example to illustrate this case the server can collect licensing information while the server collects loading information.

In some embodiments each collector point stores data that is shared between all servers in a farm . In these embodiments each collector point of a particular type of data exchanges the data collected by that collector point with every other collector point for that type of data in the farm . Thus upon completion of the exchange of such data each collector point and possesses the same data. Also in these embodiments each collector point and also keeps every other collector point abreast of any updates to the runtime data.

Browsing enables a client to view farms servers and applications in the farms and to access available information such as sessions throughout the farm . Each server includes an ICA browsing subsystem to provide the client with browsing capability. After the client establishes a connection with the ICA browser subsystem of any of the servers that browser subsystem supports a variety of client requests. Such client requests include 1 enumerating names of servers in the farm 2 enumerating names of applications published in the farm 3 resolving a server name and or application name to a server address that is useful the client . The ICA browser subsystem also supports requests made by clients running a program neighborhood application that provides the client upon request with a view of those applications within the farm for which the user is authorized. The ICA browser subsystem forwards all of the above mentioned client requests to the appropriate subsystem in the server .

In one embodiment each server in the farm that has a program neighborhood subsystem can provide the user of a client with a view of applications within the farm . The program neighborhood subsystem may limit the view to those applications for which the user of the client has authorization to access. Typically this program neighborhood service presents the applications to the user as a list or a group of icons.

The functionality provided by the program neighborhood subsystem can be available to two types of clients 1 program neighborhood enabled clients that can access the functionality directly from a client desktop and 2 non program neighborhood enabled clients e.g. legacy clients that can access the functionality by running a program neighborhood enabled desktop on the server.

Communication between a program neighborhood enabled client and the program neighborhood subsystem may occur over a dedicated virtual channel that is established on top of an ICA virtual channel. In other embodiments the communication occurs using an XML service. In one of these embodiments the program neighborhood enabled client communicates with an XML subsystem such as the XML service described in connection with below providing program neighborhood functionality on a server .

In one embodiment the program neighborhood enabled client does not have a connection with the server with a program neighborhood subsystem . For this embodiment the client sends a request to the ICA browser subsystem to establish an ICA connection to the server in order to identify applications available to the client . The client then runs a client side dialog that acquires the credentials of a user. The credentials are received by the ICA browser subsystem and sent to the program neighborhood subsystem . In one embodiment the program neighborhood subsystem sends the credentials to a user management subsystem for authentication. The user management subsystem may return a set of distinguished names representing the list of accounts to which the user belongs. Upon authentication the program neighborhood subsystem establishes the program neighborhood virtual channel. This channel remains open until the application filtering is complete.

The program neighborhood subsystem then requests the program neighborhood information from the common application subsystem associated with those accounts. The common application subsystem obtains the program neighborhood information from the persistent store . On receiving the program neighborhood information the program neighborhood subsystem formats and returns the program neighborhood information to the client over the program neighborhood virtual channel. Then the partial ICA connection is closed.

For another example in which the program neighborhood enabled client establishes a partial ICA connection with a server consider the user of the client who selects a farm . The selection of the farm sends a request from the client to the ICA browser subsystem to establish an ICA connection with one of the servers in the selected farm . The ICA browser subsystem sends the request to the program neighborhood subsystem which selects a server in the farm . Address information associated with the server is identified and returned to the client by way of the ICA browser subsystem . The client can then subsequently connect to the server corresponding to the received address information.

In another embodiment the program neighborhood enabled client establishes an ICA connection upon which the program neighborhood virtual channel is established and remains open for as long as the ICA connection persists. Over this program neighborhood virtual channel the program neighborhood subsystem pushes program neighborhood information updates to the client . To obtain updates the program neighborhood subsystem subscribes to events from the common application subsystem to allow the program neighborhood subsystem to detect changes to published applications.

Referring to a block diagram depicts an embodiment of a system for providing a plurality of application programs which may be part of a load balanced environment. This system may illustrate aspects of interfaces connections components and communications suitably adapted for use by a load balancing system. The system includes the client and a plurality of servers . A first server functions as a content server. A second server provides web server functionality and a third server provides functionality for providing access to application files and acts as an application server or a file server. The client can download content from the content server the web server and the application server over the network . In one embodiment the client can download content e.g. an application from the application server over the client application server communication channel .

In one embodiment the web browser on the client uses Secure Socket Layer SSL support for communications to the content server and or the web server . SSL is a secure protocol developed by Netscape Communication Corporation of Mountain View Calif. and is now a standard promulgated by the Internet Engineering Task Force IETF . The web browser can connect to the content server and or the web server using other security protocols such as but not limited to Secure Hypertext Transfer Protocol SHTTP developed by Terisa Systems of Los Altos Calif. HTTP over SSL HTTPS Private Communication Technology PCT developed by Microsoft Corporation of Redmond Wash. and the Transport Level Security TLS standard promulgated by the IETF. In other embodiments the web browser communicates with the servers using a communications protocol without encryption such as the HyperText Transfer Protocol HTTP .

The client can additionally include an application client for establishing and exchanging communications with the application server over the client application server communication channel . In one embodiment the application client is a GUI application. In some embodiments the application client is an Independent Computing Architecture ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to below as ICA client . Other embodiments of the application client include a Remote Display Protocol RDP client developed by Microsoft Corporation of Redmond Wash. an X Windows client a client side player interpreter or simulator capable of executing multimedia applications email Java or .NET code. Moreover in one embodiment the output of an application executing on the application server can be displayed at the client via the ICA client . In some embodiments the application client is an application client such as the application streaming client described in greater detail in connection with .

The client searches the web service directory for a web service. In one embodiment the search is a manual search. In other embodiments the search is an automatic search. The web service directory may also provide a service based view such as white and yellow pages to search for web services in the web service directory. In another embodiment the web service directory supports a hierarchical browsing based on a structured service name and service kind for GUI applications. In one embodiment the web service directory executes on a server independent of the content server such as a directory server. In other embodiments the web service directory executes on multiple servers.

In some embodiments the content server enables the client to select web services based on additional analysis or information by providing this information or analysis in the web service directory . Examples of service information that the web service directory can list includes but is not limited to the name of the business offering the service the service type a textual description of the service one or more service access points SAPs the network type the path to use e.g. TCP or HTTPS and quality of service QoS information. Moreover service information can be client device type or user e.g. role specific. Thus service selection can be based on one or more of the above attributes.

In one embodiment the service type denotes a programming interface that the client uses to access the web service. For instance the service type can state that the service is encoded by an interface description language such as Web Services Description Language WSDL .

The service access point or SAP is a unique address for an application. The SAPS enable the computer system to support multiple applications at the client and each server . For example the application server may support an electronic mail i.e. e mail application a file transfer application and or a GUI application. In one embodiment these applications would each have a SAP that is unique within the application server . In one embodiment the SAP is a web or Internet address e.g. Domain Name System DNS name IP port or Uniform Resource Locator URL . Thus in one embodiment the SAP identifies the address of the web server as part of the address for an application stored on the web server . In some embodiments the SAP identifies the address of a publishing server plug in as part of the address for an application stored on the web server as described below. In one embodiment the SAP is an accessPoint from the UDDI registry.

To prepare an item for publishing in the web service directory the content server includes a web publishing tool . In one embodiment the web publishing tool is a software module. In other embodiments the web publishing tool is another server that may be externally located from or internally located in the content server .

In one embodiment the web server delivers web pages to the client . The web server can be any server capable of providing web pages to the client . In another embodiment the web server is an Enterprise Information Portal e.g. corporate Intranet or secured business to business extranet . Enterprise portals are company web sites that aggregate personalize and serve applications data and content to users while offering management tools for organizing and using information more efficiently. In some companies portals have replaced traditional desktop software with browser based access to a virtual workplace.

The web server can also include a publishing server plug in to enable the publishing of graphical user interface GUI applications. More specifically the publishing server plug in translates a new web service entry URL into a GUI application service so that the GUI can be accessed via the web service directory . In one embodiment the publishing server plug in is a Common Gateway Interface CGI script which is a program designed to accept and return data that conforms to the CGI specification. The program can be written in any programming language such as C Perl Java or Visual Basic. In another embodiment the publishing server plug in is a Java Server Page JSP . Using the publishing server plug in to facilitate the publishing of remote GUI applications the client can thereby access the web service not through a programming interface or a web page but through a full GUI interface such as with Citrix s ICA or Microsoft s RDP.

The application server hosts one or more applications that are available for the client . Examples of such applications include word processing programs such as MICROSOFT WORD and spreadsheet programs such as MICROSOFT EXCEL both manufactured by Microsoft Corporation of Redmond Wash. financial reporting programs customer registration programs programs providing technical support information customer database applications or application set managers.

In some embodiments one or more communication links are established over different networks. For example the client content server communication channel can belong to a first network e.g. the World Wide Web and the client web server communication channel can belong to a second network e.g. a secured extranet or Virtual Private Network VPN .

In one embodiment the web publishing tool stores information about an application that the web publishing tool is currently publishing in the web service directory in a persistent mass storage . In one embodiment the information is a URL for the dynamic publishing server plug in . The persistent mass storage may be a magnetic disk or magneto optical drive. In one embodiment the persistent mass storage is a database server which stores data related to the published application in one or more local service databases. The persistent mass storage may be a component internally located in or externally located from any or all of the servers .

In other embodiments the content server or the web server communicate with a server in the farm to retrieve the list of applications. In one of these embodiments the content server or the web server communicate with the farm instead of with the persistent mass storage .

Referring now to systems and methods are depicted for load balancing based on metrics determined and or collected by a load balancer from a device or service. These metrics may be collected via a network management protocol such as a Simple Network Management Protocol SNMP . The load balancer provides a load monitor to monitor the load of one or more server computers or services . In one embodiment a user may configure one or more load monitors based on metrics selected from a custom metric table which includes metrics or objects obtained via a network management protocol query. In another embodiment a user may configure one or more load monitors based on metrics or parameters collected by the appliance. In some embodiments the user configures one or more load monitors based on metrics selected from the custom metric table and the collected metrics. In response to the user s selection the load balancer determines the load of the one or more computers and load balances client requests to the computers using any type of load balancing technique.

Referring now to an embodiment of a load balancer for load balancing one or more services is depicted. In brief overview a load balancer which may be configured on an appliance or other device may have one or more virtual servers or vServers A N configured to provide load balancing to one or more services deployed on or provided by one or more servers . In various embodiments although vServers are referenced by way of illustration the systems and methods described may use any type of processes or processing units. A vServer A is associated with configured to or bound to a service A or a group of services A N. The load balancer has one or more load monitors A N to monitor a status operation and or performance of the services A N. A load monitor is associated with configured to or bound to a service A or a group of services A N. The load monitors A B provide information to the vServers A N to determine which of the services A N should receive a request received by a vServer . A load monitor and or vServer may use collected metrics and or device provided metrics to determine a load across a plurality of services A N and to load balancing incoming client requests. The load balancer also includes a configuration interface to receive information identifying user selected or user defined metrics to be used by the load monitors and or vServers for load balancing the plurality of services A N.

The load balancer may include any type and form of load monitor A N also referred to as monitoring agent for monitoring any operational or performance characteristic or metric of a service server or device . A load monitor may include software hardware or any combination of software and hardware. The load monitor may include any application program script service daemon process task thread or set of executable instructions. In one embodiment the load monitor operates or executes in kernel space of the load balancing device . In another embodiment the load monitor operates or executes in user or application space of the load balancer . In some embodiments a first portion of the load monitor operates in kernel space while a second portion of the load monitor operates in application layer or space of a load balancing appliance or device .

In one embodiment the load monitor communicates with a service . In some embodiments the load monitor monitors or communicates with a service on a predetermined frequency such as every 1 msec or 1 sec. A user may configure or specify the predetermined frequency via the configuration interface . In other cases another appliance or system may configure or specify the predetermined frequency via the configuration interface . In yet another embodiment the load monitor monitors or communicates with a service responsive to one or more events such as receipt of a request response or a network packet. In one embodiment a load monitor monitors or communicates with a service responsive to one or more policies of a policy engine.

In some embodiments a load monitor may use a request reply messaging mechanism or protocol with the service or server . In other embodiments a load monitor may have a custom or proprietary exchange protocol for communicating with a service server or device. In one embodiment a load monitor may use the protocol of the service to monitor or communicate with the service . As such in some embodiments the load monitor uses the HTTP protocol to monitor or communicate with a web service A. In yet other embodiments the load monitor uses a TCP or ICMP protocol for monitoring a service . In some embodiments the load monitor uses a network management protocol to monitor or query a status or metric of a service server or device. In one embodiment the load monitor uses a Simple Network Management Protocol SNMP . In another embodiment the load monitor uses a common management information protocol CIMP .

In some embodiments one load monitor monitors a plurality of services A N or servers A B. In other embodiments a plurality of load monitors A N monitor a single service A or server A. In still other embodiments multiple load monitors may each monitor a plurality of services A N or servers A N. In one embodiment multiple load monitors may each monitor a service . In yet another embodiment a load monitor A may monitor one or more other load monitors B N.

In some embodiments the one or more load monitors are associated with one or more services . In one embodiment a user specifies or configures a load monitor for one or more service via the configuration interface . For example a user via the configuration interface may issue a command to bind the monitor to a service . In other embodiments the load monitor is associated with a vServer . In one embodiment a user specifies or configures via the configuration interface a load monitor for a vServer . In yet another embodiment a use specifies or configures via the configuration interface a vServer for one or more services A N. For example a user may bind a vServer to a service .

In some embodiments the one or more load monitors may monitor an appliance vServer network service client server device or any other network resource. In one embodiment a user specifies a type of network service to associate with the one or more monitoring agents . In another embodiment a user customizes a monitoring agent. For example a user may implement or otherwise provide a script for monitoring a service. In still another embodiment a generic monitoring agent is used. In some embodiments a monitor agent is configurable to use a predetermined monitor script or status message based on a type of protocol or type of service

In yet another embodiment the one or more monitoring agents determine the response time of the one or more network services for responding to a request of one of the following types ping transport control protocol tcp tcp extended content verification hypertext transfer protocol http http extended content verification hypertext transfer protocol secure https https extended content verification user datagram protocol domain name service and file transfer protocol. In some embodiment a monitoring agent checks for predetermined status codes in responses from the service . In other embodiments the monitoring agent checks for predetermined string patterns in a response from the service .

In some embodiments the one or more load monitors or monitoring agents are protocol specific agents. For example an agent may determine availability for a network service of a particular protocol type. In some embodiments a monitoring agent determines a response time of a server or network service to a TCP request. In one of these embodiments the agent uses a TCP ICMP echo request command to send a datagram to the network service receive a datagram from the network service in response and determine a response time based on the roundtrip time of the datagram. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content. In one embodiment the monitoring agent verifies that the response did not include an error.

In other embodiments a monitoring agent determines availability of a network service to a UDP request. In one of these embodiments the agent uses a UDP echo command to send a datagram to the network service receive a datagram from the network service in response and determine a response time based on the roundtrip time of the datagram. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content and did not contain errors.

In still other embodiments the monitoring agent determines availability of a network service to an FTP request. In one of these embodiments the monitoring agent sends an FTP command such as a get command or a put command to the network service and determines a time needed by the network service to respond to the command. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as contents of a file requested by a get command and did not contain errors.

In yet other embodiments the monitoring agent determines availability of a network service to an HTTP request. In one of these embodiments the monitoring agent sends an HTTP command such as a get request for a uniform resource locator URL or a file to the network service and determines a time needed by the network service to respond to the request. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as the content of a web page identified by a URL. In some embodiment the monitor agent checks for a predetermined status code. In other embodiments the monitoring agent checks for a predetermined string pattern in an HTTP response.

In further embodiments the monitoring agent determines availability of a network service to a DNS request. In one of these embodiments the monitoring agent sends a DNS request such as a dnsquery or nslookup for a known network address to the server or network service and determines a time needed by the server or network service to respond to the request. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as the domain name of a computing device associated with the known network address. In one embodiment monitoring agent verifies the response did not have an error.

In some embodiments the load balancer via a monitoring agent identifies and collects metrics based on network traffic and information traversing a network node. The load balancer or agent may store the collected metrics in any type and form of data storage mechanism in memory and or disk storage. In one embodiment the load balancer stores the metrics in a table. In another embodiment the load balancer stores the metrics in a database. In yet another embodiment the load balancer stores the metrics in an object or data structure. In still other embodiments the load balancer stores collected metrics in multiple tables and or data storage mechanisms. In one embodiments the collected metrics may be arranged or organized in any manner in the multiple tables.

In some embodiments the monitoring agent determines one or more metrics from network packets received and transmitted by the load balancer . In one embodiment the monitoring agent determines a number and or type of connections to one or more services or server . In another embodiment the monitoring agent determines a number of packets transmitted to a service or server . In other embodiments the monitoring agents determines a number of packets received from or transmitted by a service or server . In some embodiments the monitoring agent determines a response time from a service or service. In one embodiments the monitoring agent determines an average response time. In another embodiment the monitoring agent determines a number or percentage of loss packets. In other embodiments the monitoring agent determines a number of errors received from a service or server.

In some embodiments the monitoring agent determines a bandwidth of a connection to a service or a server . In one embodiment the monitoring agent determines the bandwidth of a connection based on a response time and or packet loss. In another embodiment the monitoring agent determines the bandwidth of a connection based on a number of bytes transferred or communicated to and or form a service or server . In one embodiment the monitoring agent determines the bandwidth based on a number of bytes received from a service or server over a predetermined time period such as per second. In another embodiment the monitoring agent determines the bandwidth based on a number of bytes transmitted to a service or server over a predetermined time period. In some embodiments the monitoring agent determines the bandwidth based on a number of bytes transmitted to and received from a service or server over a predetermined time period.

In some embodiments the load balancer via a monitoring agent identifies and collects metrics provided by a service server or device. These metrics may also be referred to as custom metrics or a custom metric table. The load balancer or agent may store the service or device collected metrics in any type and form of data storage mechanism in memory and or disk storage. In one embodiment the load balancer stores the metrics in a table. In another embodiment the load balancer stores the metrics in a database. In yet another embodiment the load balancer stores the metrics in an object or data structure. In some embodiments the load balancer stores the custom metrics in the same data storage mechanism as the collected metrics . In other embodiments the load balancer stores the metrics in a different storage mechanism as the collected metrics . In still other embodiments the load balancer stores device provided metrics in multiple tables and or data storage mechanisms. In one embodiments the device provided metrics may be arranged or organized in any manner in the multiple tables. For example the load balancer may maintain a metrics table for each service device or application.

In one embodiment the load monitor uses a network management protocol such as SNMP to query a server or device for one or more objects identifiers and data for the objects of the object identifiers. By way of example only and not in any way limiting the load monitor uses an SNMP architecture to provide management information bases MIBs which specify management data of a device or device subsystem such as a service using a hierarchical namespace containing object identifiers A N for managed objects. In some embodiments a MIB is a collection of information that is organized hierarchically. MIBs may be accessed using a network management protocol such as SNMP. An MIB includes managed objects identified by object identifiers A N. In one embodiment a managed object sometimes called a MIB object an object or a MIB is one of any number of characteristics or metrics of a managed device appliance or system. In some embodiments a managed objects includes one or more object instances which correspond to or referred to as variables.

In one embodiment the MIB hierarchy may be depicted as a tree with a nameless root the levels of which are assigned by different organizations. In some embodiments the top level MIB object IDs may belong to different standards organizations while lower level object IDs are allocated by associated organizations. The MIB and or objects A N may be arranged constructed or organized for management across any of layers of the OSI reference model. In some embodiments the MIB and or objects A N provide managed data and information on applications such as databases email and web services. Furthermore the MIB and or objects A N may define for any area specific or appliance specification information and operations such as for any type of service server or device load balanced or managed by the load balancer .

In the example embodiment of SNMP the SNMP communication model is based on a manager and an agent with a data of management information and management objects A N. In one embodiment the manager provides an interface between appliance and the managed system. The agent provides the interface between the manager and the device system application component element or resource being managed. As illustrated in the load balancer may include a manager which requests and obtains object identifiers and values from an agent such as the agent on a server . In the example of SNMP a manager communicates a GET or GET NEXT message to request information for a specific object. The agent in response to the manager s request issues a GET RESPONSE message to the manager with the information requested or an error message. The manager may transmit a SET message to request a change to a value of a specific variable or object . The agent may issue a TRAP message to inform the manager of an event such as an alarm or error on a service .

Although generally described in an embodiment of an SNMP network management protocol the load balancer and or load monitor may use any type and form of network management protocol and communication model to obtain identifiers and values of information such as objects or variables from another device for a managed system sub system or service . For example the load balancer may use any of the following protocols and or communication models Remote monitoring RMON AgentX Simple Gateway Monitoring Protocol SGMP Common management information protocol CMIP Common management information service CMIS or CMIP over TCP IP CMOT .

Furthermore although a MIB is generally described in reference to a manager agent communication model for an example network management protocol such as SNMP the MIB may include any type and form of data storage of object identifiers variables parameters or other identifiers of metrics. The MIB may be either protocol dependent or protocol independent. For example the MIB may comprise a table of metrics for a device or service that can be queried via any type and form of API.

The managed objects or variables provided via the network management protocol may provide any type and form of metrics or operational characteristics of the service server or device to be used by the appliance for load balancing or any other function of the load balancer . In one embodiment the device provided metrics may include any of the metrics collected by the load balancer as described above. In another embodiment the device provided metrics may include any type and form of information on any resource usage of the managed device service or system. In one embodiment the metrics include CPU memory and or disk usage of the device and or service . In other embodiments the metrics may include information on a number of connections sessions or clients of the service . In some embodiments the metrics include any information on any thresholds of the service or server such as a threshold identifying a maximum number of sessions or clients. In yet another embodiment the metrics include any information on a type of protocol of the service . In other embodiments the metrics include any information on any alarms or errors of the service .

In some embodiments each load monitor includes the load balancer collected metrics . For example the metric table may be implicitly bound to each monitor by default. In other embodiments a user associates or binds a custom metric table to a monitor . In yet another embodiment a user associates or binds a custom metric table and appliance collected table to a monitor . In yet other embodiments a user may associate or bind any combination of one or more collected metric tables and custom metric tables to one or more load monitors .

In some embodiments a user via the configuration interface may configure or specify for a load monitor one or more object identifiers A N to obtain values for and store in the metrics . For example the user may specify a user defined metric . In other embodiments the load balancer or load monitor obtains a list of one or more object identifiers A N from a device such as server or service . In yet another embodiment the load balancer includes one or more metric tables with predetermined OIDS A N for a known device. For example the load balancer may include a metric table for any one or more of the following appliances or devices any version of the NetScaler device manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. 2 any of the appliances such as BIGIP or WebAccelerator manufactured by F5 Networks Inc. of Seattle Wash. 3 any of the AppDirector or AppXcel devices manufactured by Radware Ltd of Mahwah N.J. 4 any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif.

The load balancer vServer and or load monitor computes calculates or otherwise determines a load for each service based on any of the metrics from the collected metrics and or device provided metrics . The load balancer may use a weight A N and a threshold A N for each of the metrics used in the determination of the load . In one embodiment the load balancer establishes a weight and or a threshold . In other embodiments a user establishes a weight and or a threshold . For example in some cases if a user does not specify a weight for a plurality of metrics the load balancer equally weights each metric. In one example embodiment the load balancer determines the load for each service as follows Sum weight of metric established ceiling value of metric obtained value of metric established ceiling value of metric Sum weights 

In some embodiments a metric value may be based on a range of 0 100 or absolute range. In other embodiments a metric value may not be based on a range of 0 100 or is otherwise relative to the type of metric and possible range of values. For example a metric identifying a number of connections may have a ceiling or predetermined maximum value of 10 000. In one of these embodiments the appliance establishes a ceiling value or predetermined upper limit for the metric value. In another of these embodiments a user via the configuration interface establishes a ceiling value or predetermined upper limit for the metric value. In further embodiments the established ceiling value may comprise a value less than the actual maximum value for the metric or upper limit of the range value. For example a user may specify or configure a relative range value based on a desired operational or performance range of a metric.

In some embodiments if a metric of a service exceeds a user or load balancer provided threshold the service may be excluded from the load determination or otherwise from a load balancing decision. In other embodiments if all the metrics of a service exceeds their corresponding thresholds the service may be excluded from the load determination or otherwise from a load balancing decisions. In yet another embodiment even if a service exceeds the threshold s for one or more of the metrics the service may be considered in the load determination or otherwise for load selection. In some cases a client session may be identified as persistent or sticky to a vServer or service . In these cases if a request for the client s sessions is received by the load balancer the load balancer may provide the request to a vServer or service although a metric for the vServer or service has been exceeded.

In still other embodiments if a threshold of a metric of a service or virtual server has been exceeded the load balancer may in response to the threshold being exceeded redirect the client making the request to another resource. In one embodiment the load balancer may transmit a URL to the client comprising the address of a server or service such that the client may bypass the load balancer and access the server or service directly. In one embodiment the load balancer may transmit a URL to the client comprising the address of a second load balancer or another device. In still another embodiment the load balancer may redirect the client request to a second load balancer device service or server on behalf of the client.

In some embodiments if a threshold of a metric of a service or virtual server has been exceeded the load balancer may in response to the threshold being exceeded direct a client request to a second virtual server or service. In one embodiment a second virtual server may be a backup to a primary virtual server. Upon detection of the threshold being exceeded the appliance may spillover requests and connections to a second virtual server.

Although the load is generally discussed in view of the above equation the load balancer may use any type and form of load calculation weighted or not weighted. In some embodiments the load balancer determines the load using an average of metric values. In other embodiments the load balancer determines the load using any derivative value of a metric. In another embodiment the load balancer determines the load using any statistical measure of a metric. In still another embodiment the load balancer determines the load using any function or computation of a metric. In yet other embodiments the load balancer may determine a load for each metric. In these embodiments the load balancer may aggregate compare or otherwise compute an load based on any type and form of aggregation of a metric s contribution to a load of a service.

In some embodiments a user configures multiple monitors for a service . In these embodiments the load on the service is a sum of the load of all the monitors. In one embodiment the sum of the load from multiple monitors is weighted. The load balancer may assign a monitoring a weight. A weight may comprise an integer decimal or any other numeric indicator. In some embodiments a user may configure via the configuration interface the weight corresponding to a monitor . In some embodiments all monitors may be assigned equal weight. In other embodiments a plurality of monitors may each be assigned different weights. The weights may be assigned to the monitors based on any criteria indicating relative importance including without limitation the appliance or user determination of the relative importance or value of the monitor in view of the service reliability of the monitoring mechanism and the frequency of monitoring.

In one embodiment a monitoring agent may be assigned a weight based on the relative importance of the service monitored by the appliance. For example if most user requests in an environment are HTTP requests a monitoring agent monitoring HTTP availability of a server might be assigned a weight of 10 while a monitoring agent monitoring FTP availability of a server might be assigned a weight of 3. Or for example if an administrator placed a high priority on UDP applications a monitoring agent monitoring UDP availability of a server may be assigned a weight of 20 while a DNS monitoring agent may be assigned a weight of 5.

In some embodiments an load balancer may compute a sum of the weights of the monitoring agents currently reporting a network service as operational. For example if five monitoring agents each assigned a weight of 30 are monitoring a network service and three of the five monitoring agents report the network service as available the load balancer may determine the sum of the monitoring agents currently reporting the network service as operational to be 90. Or for example if only two monitoring agents one with a weight of 20 and the other with a weight of 40 are reporting a server as available the load balancer may compute the sum of the monitoring agents currently reporting a server as operational to be 60.

The load balancer also includes a configuration interface providing any type and form of interface mechanism for a user application or system to communicate with the load balancer . In one embodiment the configuration interface includes a command line interface B. In another embodiment the configuration interface includes a graphical user interface A. In some embodiments the configuration interface includes an application programming interface API or development toolkit for an application program or script to communicate with the load balancer .

In some embodiments the load balancer displays the configuration interface via a display of the load balancer . In other embodiments a configuration terminal or device connects to or communicates with the load balancer and displays the configuration interface . For example the configuration device or terminal may connect to the load balancer via a port and IP address of the load balancer . The load balancer may provide a web service listening on the port and IP address to serve a page to the user. The served page may provide a user interface for configuring the load balancer . In other embodiments the configuration terminal may connect and communicate with the load balancer via any type and form of connection including a monitor port serial port or USB connection.

Via the configuration interface the load balancer may receive information identifying user selected metrics to use in determining the load for one or more services. In one embodiment the user identifies or selects a metric from a plurality of collected metrics . In another embodiment the user identifies or selects a metric from a plurality of device provided metrics . In some embodiments the user selects one or more metrics from the collected metrics and one or more metrics from the device provided metrics . The load balancer may also receive via the configuration interface information identifying a user s selection or designation of a weight for a metric. For example a user may provide a value of a weight for a metric. In some embodiments the load balancer receives information identifying a user provided value for a threshold .

In operation the load balancer may use user selected metrics and user provided weights and thresholds for determining the load . In another embodiment the load balancer may use any load balancer established metrics from the collected metrics for determining the load. In one embodiment a user establishes a weight and or a threshold for an load balancer provided metric. So although the metric may not be user selected in some embodiments the user may control or configure the weights and or thresholds for the metrics . In other embodiments the load balancer may use any combination of user selected metrics and load balancer established metrics for determining the load. In another embodiment the load balancer may use any combination of user provided weights and or thresholds and load balancer provided weights and or thresholds for any metric used for determining the load .

Referring now to an embodiment of steps of a method for load balancing one or more services is depicted. In some embodiments the load balancer may load balance one or more services using collected metrics and device provided metrics . In other embodiments the load balancer load balances one or more services based on user selected metrics weights and or thresholds. In brief overview at step of method multiple metrics are identified for load balancing a plurality of services A N by the load balancer . At step in some embodiment the load balancer receives user defined metrics to collect or monitor for a service . At step the appliance receives user selected metrics from the set of identified metrics. The user may also identify weights and or thresholds for the metric. At step the load balancer determines a load for each of the services based on the user selected metric information. At step the load balancer receives a client request to access a service. At step based on the load determination the load balancer determines a service from the plurality of services to transmit or forward the client request. At step the load balancer transmits the client s request to the load balancer selected service.

In further details at step the load balancer identifies metrics to collect and monitor for load balancing one or more services A N. In one embodiment the load balancer provides or identifies one or more appliance collected metrics . For example a table may identify metrics collected by the load balancer . In another embodiment the load balancer provides one or more predetermined tables of device provided metrics such as for an appliance of Citrix F5 Cisco or Radware. In other embodiments the load balancer identifies one or more metrics to collect via a network management protocol in an object or variable database such as an MIB for SNMP. In one embodiment the load balancer provides a preconfigured or preinstalled MIB for a predetermined device or service such as an application.

In some embodiments the load balancer queries a device or service to determine available metrics to collect and or monitor. For example in one embodiment the load balancer queries a device or service for available object identifiers A N. In another embodiment the load balancer uses a network management protocol such as SNMP to query for the identification of objects in a MIB . In yet another embodiment a user via the configuration interface identifies one or more object identifiers A N to collect and or monitor from a device or service such as an application.

In some embodiments at step a user specifies or defines a metric for the load balancer to collect and or monitor for a service . For example the user may specify via the configuration interface an object identifier in a MIB . In other embodiments a user may configure or implement a load monitor to collect and or monitor a user defined or specified metric. In yet another embodiment a user such as a network administrator may configure specify or implement one or more object identifiers in a MIB deployed on a server . In some embodiments the user may implement an application program script service or other set of executable instructions to collect metrics on the server and store values for the metrics in the MIB on the server . For example the user may execute a program or script to monitor metrics of a service on the server and update the MIB with the collected values. The manager on the load balancer may query the agent on the server for information and or values of the metrics stored in the server s MIB for the service .

At step the load balancer receives information identifying a selection by a user of one or more metrics identified via the load balancer . In some embodiments a user via the configuration interface selects one or more metrics provided via the load balancer to use for load balancing a server . In one embodiment the load balancer provides for selection by the user via the configuration interface any one or more of the collected metrics or device provided metrics . A user may configure the load balancer via a command line interface B or graphical user interface A to use one or more user selected metrics for determining a load or otherwise for load balancing services A N by the load balancer .

In one embodiment the load balancer receives information identifying that the user selected one or more collected metrics . In another embodiment the load balancer receives information identifying that the user selected one or more device provided metrics . In yet another embodiment the load balancer receives information identifying that the user selected one or more collected metrics and one or more device provided metrics .

Furthermore via the configuration interface the load balancer may receive information identifying a user s designation or establishment of a weight for a metric. In one embodiment the load balancer receives a user s identification of a weight for a user selected metric . In another embodiment the load balancer receives a user s identification of a weight for a load balancer established metric . In other embodiments the load balancer may receive information identifying a user s designation or establishment of a threshold for a metric. In one embodiment the load balancer receives a user s identification of a threshold for a user selected metric . In another embodiment the load balancer receives a user s identification of a threshold for an appliance established metric .

At step the load balancer determines a load for each of the one or more services. In one embodiment a load monitor collects and or monitors one or more of the user selected metrics for a service. In another embodiment the load monitor collects and or monitors collected metrics . In some embodiments a load monitor collects metrics via a network management protocol such as SNMP. In yet another embodiment multiple load monitors A N collect and or monitor metrics for a service . In one embodiment although a user selected one or more metrics for collecting and or monitoring a service the load balancer collects and monitors any one or more load balancer established metrics such as number of connections response time bandwidth and number of packets for the service .

In some embodiments a vServer determines the load for each service via metric information collected and monitored by a load monitor . In another embodiment the load monitor determines the load for the service being monitored. The load balancer and or load monitor may determine the load using a user selected metric weighted by a user designated weight . In some embodiments the load balancer and or load monitor determines the load using a plurality of user selected metrics weighted by user designated weights . In yet another embodiment the load balancer and or load monitor determines the load using a user selected metric and user identified weight and a load balancer established metric and a load balancer established weight . In further embodiments the load balancer determines the load by summing a weighted load for each metric user and or appliance used for the service .

For the embodiment of multiple monitors A N per service the load balancer may determine the load for the service by assigning a weight to each monitor and computing weighted load across all the monitors . In other embodiments the load balancer and or load monitor determines a load for a service at a predetermined frequency such as every 1 msec. or every 1 sec.

In some embodiments a load monitor determines that a metric for a service has reached or exceed a threshold . In other embodiments a load monitor determines that a metric for a service is within a threshold . In one embodiment the load monitor uses a load balancer established or provided threshold for a metric. In another embodiment the load monitor user a user specified or configured threshold .

At step the load balancer receives a request from a client to access a service. In one embodiment a virtual server or vServer intercepts or otherwise receives a request from the client. In some embodiments the virtual server transparently intercepts the client s request to a service or server . In other embodiments a client transmits the request to the vServer . In another embodiment the vServer determines from the request that the request is for one or more services under management by the load balancer . In one embodiment the vServer intercepts or receives the request via a SSL VPN connection between the client and the load balancer .

At step the load balancer determines which of the services to direct the client request based on determination of the load for each service . In one embodiment the vServer directs the request responsive to one or more load monitors . In some embodiments a vServer directs forwards or otherwise transmits the request to a service with the least or smallest load. In one embodiment the vServer directs forwards or otherwise transmits the request to a service with one of the lower determined loads. In some embodiments the vServer directs forwards or otherwise transmits the request to the service previously handling requests from the client . In one embodiment the vServer transmits the request to the previously used service if the load of the service is within a predetermined threshold. In some embodiments the vServer transmits the request to the first available service in a list with a determined load within a predetermined threshold.

In another embodiment a vServer directs forwards or otherwise transmits the request to a service using a round robin technique or weighted round robin. In yet another embodiment the vServer directs the request to a service based on one or more metrics such as appliance collected metrics or device provided metrics . For example in some embodiments the vServer directs the request to a service based on one or more of the following least response or round trip time least number of connections least number of packets and least bandwidth. In yet other embodiments the vServer directs the request to a service based on one or more device provided metrics such as CPU memory and disk resource usage. In another example the vServer directs the request to a service based on service resource usage on the server such as system resource usage by an application or session of the application.

In some embodiments a vServer may not direct a request to a service in which a metric for the service has exceeded a threshold such as a user configured threshold . In other embodiments a vServer may not direct to a request to a service if more than one threshold of the metrics for the service has been exceeded. In yet another embodiment a vServer may direct a request to a service if a metric threshold has been reached or exceeded. For example if one metric threshold of a plurality of thresholds has been exceeded then the vServer may still direct the request to the service if the other metric thresholds have not been reached.

In still other embodiments the load balancer may determine from load monitoring that a metric of a first vServer A has reached a threshold . In response to the determination the load balancer may spillover management of the services A N to a second virtual server or vServer B. In one embodiment the second virtual server B may be a backup server. In some embodiments the second virtual server B is established in response to detecting the first virtual server A has reached one or more thresholds. In another embodiment the second virtual server B may be established and running on the load balancer .

At step the load balancer transmits the client request to the service determined by the appliance at . In one embodiment the load balancer transmits the client request in a manner transparent to the service such that the request appears to have been sent from the client instead of the load balancer . For example the load balancer may act as a transparent or intercepting proxy for the client . In other embodiments the load balancer acts as a non transparent proxy and transmits the request to the service on the client s behalf. In some embodiment the vServer transmits the request to a service . In other embodiments a backup vServer transmits the request to the service. In yet other embodiments a second vServer transmits the request to the service.

Referring now to systems and methods for load balancing a plurality of devices are depicted. The load balancer described herein may be deployed to load balance a plurality of services and load balancing devices. A first load balancer may communicate with a second load balancer A of the same type via a predetermined metric exchange protocol MEP . The first load balancer obtains via the MEP protocol metrics to use for determining a load for the second load balancer A. Other devices of a different type than the first load balancer may be deployed in the network to perform local load balancing such as for a server farm. These devices may not communicate via the MEP protocol of the first load balancer . Instead these other device may provide metrics via a network management protocol such as a Simple Network Management Protocol SNMP . Using the techniques described in conjunction with the first load balancer obtains metrics from these heterogeneous devices via the network management protocol. With metrics obtains via the MEP protocol from devices of the same type and metrics obtained via a network management protocol from device of a different type the load balancer may uses these combined metrics to determine a load across these heterogeneous devices and to direct request to one of the devices based on the load.

Referring now to an example embodiment of a network environment for load balancing heterogeneous devices including servers and local or other load balancing devices is depicted. In brief overview a network environment includes a plurality of different types of load balancing devices and servers. The load balancer is configured as a global load balancing device to load balance the plurality of load balancing devices and servers. Each of the load balancing devices may perform local load balancing to one or more services A N. For example a first set of load balancer A N of the same type may perform local load balancing of services or servers on a first network . These load balancers A B may be of the same type of the global load balancer . Or in some cases local load balancers A N are designed and constructed to communicate metrics and other information via a metric exchange protocol . A second type of load balancer A N may perform local load balancing for one or more services A N on a second network . These load balancers A N may be of a different type than the first type of load balancers A N and or the global load balancer . The load balancer A N may operate or execute one or more virtual servers or vServers A N. Load balancer A N may not be designed to communicate via the MEP protocol of load balancer A N. Instead these load balancers A N may provide metrics via a network management protocol such as SNMP. The global load balancer may also perform load balancing for one or more services or servers such as a server farm . Each of the servers or services may be of a different type such as an HTTP service and an FTP service.

In view of the plurality of load balancers servers and services may be deployed in a hierarchical fashion. The first load balancer may be at the top of the hierarchy to manage a plurality of other load balancers A N A N and servers. In one case the load balancer manages one or more servers or service A N directly. In another case the load balancer manages one or more appliances A N A N which in turn manages one or more servers or services A N. A load balancer managed by the first load balancer may manage a second load balancer which in turns manages one or more services or servers.

By way of example in view of various load balancing products the global load balancer may be any of the product embodiments referred to as NetScaler manufactured by Citrix Systems Inc. The load balancer A N may also be a NetScaler device configured to perform local load balancing of one or more services A N. As the load balancer A N are of the same type as the global load balancer these devices are designed and constructed to communicate via a predetermine protocol or and or communication model referred to as metric exchange protocol. The load balancer A N may be configured to provide metric information at a predetermined frequency to load balancer . One or more of the load balancers A N may comprise another type of load balancing device such as a BigIP load balancing device manufactured by F5 Networks Inc. Another one or more of the appliances A N may comprise a different type of load balancing device such as the AppDirector appliance manufactured by Radware LTD. In some cases one or more of the load balancers A N may comprise a Cisco load balancing device. In other cases one or more of the appliances A N may comprise a Nortel load balancing device. Any one or more of these load balancers A N may not be designed or constructed to communicate with load balancer via the MEP protocol .

Instead of using MEP each of these different load balancers A N may provide metric information via a network management protocol such as SNMP. As illustrated in these load balancers may include an agent for providing object identifiers A N via an MIB . Further to this example embodiment and as discussed in conjunction with the load balancer using a manager agent communication model may query any of these load balancers A N via a network management protocol to identify collect and monitor objects identified via the MIB . In some cases the load balancer may use SNMP to communicate with one or more load balancers A N. In other cases the load balancer may use another type of network management protocol to communication another one or more of the load balancers A N. In still another case the load balancer may use a third type of network manager protocol to communicate with a further set of one or more load balancers A N.

Load balancers A N may be considered homogenous or the same type of appliance or device as load balancer . In one embodiment the load balancers A N are of the same product family as the load balancer . In another embodiment the load balancer A N is a version of the same device of the load balancer . In one case the load balancers and A N are manufactured by the same company. In some embodiments the load balancers A N and load balancer are configured designed and constructed to communicating using a predetermined protocol and or communication model. In one embodiment the load balancers A N and load balancer are configured designed and constructed to use a proprietary or custom protocol and or communication model.

Load balancers A N may be considered heterogenous or a different type of appliance or device as load balancer . In one embodiment the load balancers A N are manufactured by a different company than load balancer . In some embodiments the load balancers A N and load balancer are not specifically designed to communicate using a predetermined protocol and or communication model. In one embodiment the load balancers A N and load balancer are not configured designed and constructed to use a proprietary or custom protocol and or communication model. In some cases the load balancers A N use a network management protocol instead of using a proprietary protocol for providing metrics to other devices applications or services.

Referring now to an embodiment of the load balancer for identifying collecting and monitoring metrics obtained from heterogeneous network devices and servers with a plurality of protocols is depicted. The load balancer may have one or more virtual servers A N configured constructed or designed to provide load balancing of the plurality of devices over one or more networks . The load balancer may use one or more load monitors A N to monitor the load of each of the heterogeneous devices. In one embodiment the load balancer monitors the load of appliances A N. The load balancer and or load monitor uses the MEP protocol to obtain metrics from one or more of the load balancers A N. In another embodiment the load balancer monitors the load of load balancers A N. In other embodiments the load balancer monitors the load of one or more servers . In still another embodiment the load balancer monitors the load among servers in a server farm . The load balancer may use one or more network management protocols to obtain metrics from server server farm and load balancers A N.

The load balancer collects metrics via the MEP protocol and network management protocols from a wide variety of heterogeneous devices such as load balancers A N and servers and homogenous devices A N. The load balancer stores the metrics in a GSLB Global Server Load Balancing or global metrics table comprising any type and form of data storage element such as a file database object or data structure in memory and or on disk. The vServers and or load monitors use one or more of the metrics from the GSLB metrics to provide global load balancing of servers server farms virtual servers and load balancing devices.

The load balancer may collect and monitor metrics obtained via a MEP protocol from one or more load balancer A N and store them in a MEP based metrics table A N. In one embodiment the load balancer uses a first type or first version of a MEP protocol to obtain metrics from a first load balancer A and stores the metrics in a first table A. In another embodiment the load balancer uses a second type or second version of a MEP protocol to obtain metrics from a second load balancer N and stores the metrics in a second table N.

The load balancer may collect and monitor metrics from load balancers A N using any type and form of network management protocol NMP and store the metrics in a NMP based metrics table A N. In one embodiment the load balancer uses a SNMP protocol and communication model to obtains metrics from a second type of load balancer A and stores the metrics in a NMP based metric table A. In some embodiments the load balancer uses a second type of network management protocol such as CIMP to obtain from a second or third type of load balancer N and stores the metrics in a NMP based metric table N. In some embodiments load balancer A is a different type of device than load balancer N but both devices support the same network management protocol for providing metrics.

The load balancer may also collect and monitor metrics from a server and or server arm using any type and form of network management protocol NMP and store the metrics in a NMP based metrics table A N . In one embodiment the load balancer uses the same network management protocol such as SNMP for obtaining metrics from a server as used for obtaining metrics from one of the appliances A N. In another embodiments the load balancer uses a different type of network management protocol for obtaining metrics from the server than is used by the load balancer for obtaining metrics from an load balancer .

The load balancer may store metrics for the GSLB metrics in a separate table for each device. For example the load balancer may store metrics for a first load balancer A in a first metrics table A and metrics from a second load balancer B in a second metrics table A. The load balancer may store metrics from a server in a server metrics tables A . In another embodiment the load balancer stores metrics from a server farm to a metrics table N for the server farm.

The load balancer may store metrics for the GSLB metrics in a separate table for each type of protocol. For example the load balancer may store all MEP based metrics from a plurality of load balancer A N in a first metrics table. In some embodiments the load balancer stores a first type or version of MEP protocol based metrics in a first table A and a second type or version of an MEP protocol in a second table N. The load balancer may store all SNMP based metrics from one or more load balancers A N in a second metrics table. In another example the load balancer may store metrics from a second type of network management protocol from one or more load balancers A N to a third metrics table.

The GSLB metrics may comprise any type and form of data statistics status or information related to or associated with the operational and or performance characteristics of the load balancer a server or server farm . The global metrics may comprise any type and form of data statistics status or information related to the network of the load balancer and or server or server farm . The global metrics may comprise any type and form of data statistics status or information related to the services A N load balanced by the load balancer A N A N. In some embodiments the global metrics comprises operational and or performance data on any client and or server connected to the load balancer A N A N. In one embodiment the load balancer A N A N determines operational and or performance information about any client or server it is connected to or servicing and creates metrics on these clients and or server . In this embodiment the load balancer A N A N may provide these metrics to the global load balancer .

In some embodiments the operational and or performance characteristic provides a metrics includes information on any of the following for an appliance or server 1 load 2 numbers and types of connections 3 resource usage 4 resource availability 5 number of requests outstanding 6 number of requests transmitted 7 number of clients servicing 8 response time information including average and historical response times 9 errors status performance or bandwidth of a connection and 10 number of sessions and states or status thereof. In another embodiment the metrics includes information on any IP or network layer information of the load balancer A N A N or the connections of the load balancer A N A N or of the clients and or servers serviced by the load balancer A N A N. For example the information provided via metrics may include a routing table of the load balancer A N A N for performing network address translation such as for an SSL VPN connection.

Via the configuration interface a user may select one or more metrics from the global metrics to use for load monitoring and determining the load . The load balancer may receive information identifying a user selection of one or more metrics from the global metrics . The load balancer may receive a user selection of one or more MEP based metrics of a first type of appliance. The load balancer may receive a user selection of one or more NMP based metrics of a second type of appliance. The load balancer may also receive a user selection of one or more NMP based metrics for any server or server farm. The user may select any combination of metrics from the global metrics to configure the load balancer to perform load balancing of heterogeneous devices according to the user selected metrics.

In one embodiment the load balancer uses load balancer established metrics in combination with any one or more of the user selected metrics for load balancing. For example the load balancer may collect and monitor the number of connections response time bandwidth and numbers of packets for any load balancer or server and use these metrics with any user selected metrics for load balancing. Via the configuration interface and as also discussed in conjunction with the load balancer may receive information from the user identifying designating or establishing weights and or thresholds for any load balancer established metrics and or user selected metrics.

Referring now to an embodiment of steps of a method for performing global load balancing among heterogeneous devices is depicted. In brief overview at step the load balancer identifies a plurality of metrics from heterogeneous devices to use for load balancing by the load balancer . At step the load balancer obtains metrics from one or more homogenous load balancers A N or load balancers of the same type as the first load balancer . At step the load balancer obtains metrics from heterogeneous devices such as load balancers A N and or servers via a network management protocol such as SNMP. At step the load balancer determines a load of one or more of the plurality of appliances servers and or service managed by the load balancer based on the metrics collects at step and step . At step the load balancer receives a client request to access a service. At step the load balancer determines based on the load one of the load balancer A N A N or one of the servers to which to direct the client request. At step the load balancer transmits the request to the device appliance or service selected in accordance with the determined load.

In further details at step the load balancer identifies metrics to collect and monitor for load balancing one or more load balancers A N A N servers or services A N. In one embodiment the load balancer provides or identifies one or more appliance collected metrics as described in conjunction with . For example a table may identify metrics collected by the load balancer . In another embodiment the load balancer provides one or more predetermined tables of appliance provided metrics or such as for an appliance of Citrix F5 Cisco or Radware. In other embodiments the load balancer identifies one or more metrics to collect via a network management protocol in an object or variable database such as an MIB for SNMP. In one embodiment the load balancer provides a preconfigured or preinstalled MIB for a predetermined load balancer A N A N server or service .

In some embodiments the load balancer queries a load balancer A N A N server or service to determine available metrics to collect and or monitor. For example in one embodiment the load balancer queries an appliance server or service for available object identifiers A N. In another embodiment the load balancer uses a network management protocol such as SNMP to query for the identification of objects in a MIB . In yet another embodiment a user via the configuration interface identifies one or more object identifiers A N to collect and or monitor from a load balancer A N A N server or service . In some embodiments the user via the configuration interface identifies one or more of the global metric to collect and or monitor from any one of the heterogeneous device under management.

At step the load balancer collects and or monitors metrics A N from one or more load balancers A N via a MEP protocol . In some embodiments the load balancers A N are of the same type or homogenous with the load balancer . In one embodiment the load balancer collects and or monitors metrics established determined or otherwise selected by the load balancer . In another embodiment the load balancer collects and or monitors metrics established determined or otherwise selected by a user. In some embodiments the load balancer uses a first type or version of the MEP protocol to collect metrics from a first load balancer A and a second type or version of the MEP protocol to collect metrics from a second load balancer N.

One or more load monitors or monitoring agents A N of the load balancer may be configured constructed or implemented to identify collect and or monitor metrics via MEP protocol from one or more load balancer A N. A first load monitor A may collect and monitor metric values from a first load balancer A. A second load monitor N may collect and monitor metric values from a second load balancer N. A third load monitor may collect and monitor metric values from the first and second load balancer A N. A load monitor A N may collect and or monitor metrics on any type of schedule or predetermined frequency. In some embodiments the load monitor collects metrics responsive to the detection of an event.

At step the load balancer collects and or monitors metrics A N from one or more load balancers A N servers or a server farm any type and form of network management protocol. In some embodiments the load balancers A N are a different type or heterogeneous with the load balancer . In other embodiments one or more of the load balancers A N are of a different type or heterogeneous with one or more of the other load balancers A N. In one embodiment the load balancer collects and or monitors metrics established determined or otherwise selected by the load balancer . In another embodiment the load balancer collects and or monitors metrics established determined or otherwise selected by a user. In some embodiments the load balancer uses a first type or version of a network management protocol such as SNMP to collect metrics from a first load balancer A and a second type or version of a network management protocol SNMP or CIMS to collect metrics from a second load balancer N.

One or more load monitors or monitoring agents A N of the load balancer may be configured constructed or implemented to identify collect and or monitor metrics via a network management protocol from one or more load balancers A N. A first load monitor A may collect and monitor metric values from a first load balancer A. A second load monitor N may collect and monitor metric values from a second load balancer N. A third load monitor may collect and monitor metric values from a server or server farm . In other embodiments multiple monitors A N may collect and or monitor metrics from a plurality of load balancers A N and or servers . A load monitor A N may collect and or monitor any of the metrics A N on any type of schedule or predetermined frequency. In some embodiments the load monitor collects metrics A N responsive to the detection of an event.

At step the load balancer determines a load for each of the one or more devices A N A N servers server farm or services. In some embodiments a vServer determines the load for each service via metric information collected and monitored by a load monitor . In another embodiment the load monitor determines the load for an appliance server or service being monitored.

The load balancer vServer and or load monitor may determine the load using a user selected metric weighted by a user designated weight . In some embodiments the load balancer and or load monitor determines the load using a plurality of user selected metrics weighted by user designated weights . In yet another embodiment the load balancer and or load monitor determines the load using a user selected metric and user identified weight and a load balancer established metric and a load balancer established weight . In further embodiments the load balancer determines the load by summing a weighted load for each metric. For the embodiment of multiple monitors A N per service the load balancer may determine the load for an appliance server or service by assigning a weight to each monitor and computing weighted load across all the monitors . In yet another embodiment the load balancer may determine the load for an appliance server or service by assigning a weight to each of the appliance service or service.

In some embodiments a load monitor determines that a metric for an appliance server or service has reached or exceeded a threshold . In other embodiments a load monitor determines that a metric for an appliance server or service is within a threshold . In one embodiment the load monitor uses an appliance established or provided threshold for a metric . In another embodiment the load monitor uses a user specified or configured threshold .

At step the load balancer receives a request from a client to access a service. In one embodiment a virtual server or vServer of the load balancer intercepts or otherwise receives a request from the client. In some embodiments the virtual server transparently intercepts the client s request to a service or server . In other embodiments a client transmits the request to the vServer . In another embodiment the vServer determines from the request that the request is for one or more services under management by the load balancer . In one embodiment the vServer intercepts or receives the request via a SSL VPN connection between the client and the load balancer .

At step the load balancer determines which of the load balancers A N servers or services A N to direct the client request based on determination of the load for each of the load balancers A N servers or services A N. In one embodiment the vServer directs the request responsive to one or more load monitors . In some embodiments a vServer directs forwards or otherwise transmits the request to an load balancer A N A N server or service with the least or smallest load. In one embodiment the vServer directs forwards or otherwise transmits the request to a load balancer A N A N server or service with one of the lower determined loads. In some embodiments the vServer directs forwards or otherwise transmits the request to the s a load balancer A N A N server or service previously handling requests from the client . In one embodiment the vServer transmits the request to the previously used an load balancer A N A N server or service if the load for the load balancer A N A N server or service is within a predetermined threshold. In some embodiments the vServer transmits the request to the first available a load balancer A N A N server or service in a list with a determined load within a predetermined threshold.

In another embodiment a vServer directs forwards or otherwise transmits the request to a load balancer A N A N server or service using a round robin technique or weighted round robin. In yet another embodiment the vServer directs the request to a load balancer A N A N server or service based on one or more metrics such as appliance collected metrics or device provided metrics . For example in some embodiments the vServer directs the request to a load balancer A N A N server or service based on one or more of the following least response or round trip time least number of connections least number of packets and least used bandwidth. In yet other embodiments the vServer directs the request to a load balancer A N A N server or service based on one or more device provided metrics such as CPU memory and disk resource usage. In another example the vServer directs the request to a load balancer A N A N server or service based on resource usage on or of a load balancer A N A N server or service.

In some embodiments a vServer may not direct a request to a load balancer A N A N server or service in which a metric for the service has exceeded a threshold such as a user configured threshold . In other embodiments a vServer may not direct to a request to a load balancer A N A N server or service if more than one threshold of the metrics for the load balancer A N A N server or service has been exceeded. In yet another embodiment a vServer may direct a request to a load balancer A N A N server or service even if a metric threshold has been reached or exceeded. For example if one metric threshold of a plurality of thresholds has been exceeded then the vServer may still direct the request to the load balancer A N A N server or service if the other metric thresholds have not been reached.

In still other embodiments the load balancer may determine from load monitoring that a metric of a first GSLB vServer A has reached a threshold . In response to the determination the load balancer may spillover management of the load balancer A N A N servers or services to a second GSLB virtual server or vServer B. In one embodiment the second virtual server B may be a backup GSLB server. In some embodiments the second GSLB virtual server B is established in response to detecting the first GSLB virtual server A has reached one or more thresholds. In another embodiment the second GSLB virtual server B may be established and running on the load balancer .

At step the load balancer transmits the client request to the load balancer A N A N server or service identified by the load balancer at . In one embodiment the load balancer transmits the client request in a manner transparent to the load balancer A N A N server or service such that the request appears to have been sent from the client instead of the load balancer . For example the load balancer may act as a transparent or intercepting proxy for the client . In other embodiments the load balancer acts as a non transparent proxy and transmits the request to the load balancer A N A N server or service on the client s behalf. In some embodiment the vServer transmits the request to the load balancer A N A N server or service. In other embodiments a backup vServer transmits the request to the load balancer A N A N server or service. In yet other embodiments a second vServer transmits the request to the load balancer A N A N server or service

Although the systems and methods of are generally discussed in the context of global server load balancing these systems and methods may be used for local load balancing. The load balancer may use metrics obtained from heterogeneous devices servers or services using a plurality of protocols to load balance one or more services or servers. Using the techniques described herein the load balancer is configurable and flexible to obtain metrics from any network resource system sub system application service device etc using either a metric exchange protocol supported by the appliance and or a more general network management protocol supported by the network resource. Additionally the load balancer is configurable to allow users to select any combination of available metrics from these heterogeneous network resources to perform load monitoring and load balancing of one or more services.

Embodiments of the methods and systems described herein can provide for automation of a maintenance event rollout to a group of load balanced computers. These methods and systems may be suitable for various load balanced environments including but not limited to those described above in connection with . In certain embodiments the methods for performing maintenance on computers can limit the risk that a load balanced group of computers will become under provisioned at any point in time. This may be achieved by employing opportunistic maintenance for example maintenance performed when the load on a computer is low and or when spare capacity from other computers is available and maintenance performed on one or more select computers at a time.

Illustrated in is one embodiment of a system for performing maintenance on computers in a load balanced environment. In brief overview the system environment includes a computer farm comprising a plurality of computers A N and a computer farm management system . The management system may comprise one or more servers appliances or any other type of computing devices over a network. In an illustrative embodiment the management system may include one or more load balancers and maintenance agents . A load balancer of this system may comprise features from embodiments of load balancers described above in connection with and A C. For example a virtual server executing on an appliance may be configured to provide load balancing functionality for managing a plurality of computers.

In some embodiments the system includes at least one maintenance agent . The maintenance agent may be constructed and or configured for updating one or more computers of the computer farm. The maintenance agent may update a computer by way of transmitting a patch disk image configuration or installation file to a computer. The computer may apply or execute the update based on instructions from the maintenance agent . In some embodiments an update file may self install upon receipt at the computer . In some embodiments the maintenance agent may communicate with an agent on a computer to convey and or install an update. A maintenance agent may also transmit an agent to a computer to perform an update on the computer. A maintenance agent may in some embodiments be a mobile agent that roams from computer to computer to propagate an update.

In certain embodiments the maintenance agent includes a coordinating service that monitors one or more computers and tracks updates available or mandatory for these computers. The maintenance agent may communicate with one or more computers A N using any proprietary custom or standard protocol for example SNMP. In one embodiment the maintenance agent communicates with a computer via a control connection with the computer which may be temporary low bandwidth and or secured where appropriate.

The maintenance agent may include hardware or any combination of hardware and software configured to provide the functionalities described herein. For example the maintenance agent may include a program application service daemon sub routine logic or other instructions executing on hardware for monitoring and or implementing updates to a computer. The maintenance agent may include one or more components residing or executing on a plurality of computing devices. For example the maintenance agent may have a management module residing on a network appliance and a plug in or client side interface residing on a computer that requires maintenance from time to time. In certain embodiments the maintenance agent may be a component of a load balancer or share some of the same resources e.g. hardware as a load balancer . In one illustrative embodiment the maintenance agent is a service provided by a virtual machine executing on a computing device.

The maintenance agent may perform any type or form of maintenance update to a computer for example hardware software or otherwise. A maintenance agent may provide patches hotfixes upgrades to an operating system or software to a computer. A maintenance agent may install or uninstall any type or form of software patches upgrades etc to a computer. For example a maintenance agent may determine that the virus description files of an anti virus program is out of date. The maintenance agent may search for download and or install an update to the virus description files. In certain embodiments the maintenance agent may scan for unauthorized installation or modification of programs and may uninstall disable or quarantine these programs or alert a user or administrator of these programs. Similarly a maintenance agent may detect data corruption or defective programs and may attempt to repair isolate uninstall disable or quarantine the affected programs or files or alert a user or administrator of these occurrences.

A maintenance agent may install disk images including disk delta changes to a computer. For example a maintenance agent may update a software configuration of a computer by applying a disk delta file to an existing disk image e.g. base image of the computer. In some virtualization environments for example a maintenance agent may perform maintenance by updating a base disk image of a computer for hosting or providing a virtualization environment. Such base image updates may reduce risk to maintenance failures in computers. The use of base image updates may further allow an administrator to revert or rollback to an earlier version of a base image if a problem is detected. In yet other embodiments a maintenance agent may update a computer with new or modified hibernation files such as a hibernation file for quick boot up to provide specific applications.

In one embodiment a maintenance agent may reprogram a field programmable gate array FPGA or implement any other hardware changes to a computer. A maintenance agent may for example be a robotic entity that replaces repairs or upgrades parts of a computer. A maintenance agent may further provide diagnostic health and other scanning or monitoring services for one or more computers. A maintenance agent may perform any other type of maintenance such as disk defragmentation reclaim unused memory pages perform a desktop clean up check for OS or program updates remove temporary files perform a virus spyware malware scan perform disk or file backup synchronize local directories and databases with central services etc.

In some embodiments the maintenance agent may monitor and or communicate with a computer via the load balancer or an agent of the load balancer . For example a collection or monitoring agent of a load balancer may determine if a computer is due for maintenance or provide information to the maintenance agent that indicates if a computer is due for maintenance. In some embodiments a computer may issue an alert to the maintenance agent indicating that the computer requires maintenance and or repair. In yet other embodiments the maintenance agent communicates directly with a computer to determine if the computer is due for maintenance. The maintenance agent may receive information and or instructions from any other source indicating that a computer is due for maintenance. For example an administrator may indicate to the maintenance agent that a group of computers is due for servicing. A central service may provide a patch or directive emergency routine or otherwise to update a computer. Third parties such as software and hardware vendors may communicate an update or a fix directly to a monitored computer or to the maintenance agent for distribution and or installation.

Referring again to each of the computers may be any embodiment of the computing device computer server appliance or any network device described above in connection with . The plurality of computers A N may be clustered grouped and or managed as one or more computer farms or load balanced groups. Some of the computers may host or provide services that differ from some other computers and may be grouped accordingly. In some embodiments the plurality of computers A N comprises homogenous devices. In other embodiments the plurality of computers A N comprises heterogeneous devices such as those described above in connection with .

Each of the computers may host or provide one or more services such as a web application virtualized environment such as a remote desktop session database virtual machines etc. A load balancer may receive a request for a service and may direct or assign the request to one or more of the computers for example as described above in connection with . Accordingly a computer may be processing zero one or more requests at any one time. A processing load is associated with each computer based on the number and type of request s the computer is processing. The processing load may be represented or determined by one or more metrics such as the metrics discussed above in connection with .

When a computer is not processing any requests the computer may be referred to as idle . In some embodiments some level of load may exist on a computer e.g. from residual processes overhead processes or self maintenance processes even though the computer is not presently processing any requests assigned by a load balancer. In some of these embodiments the computer may be identified as idle because it is not processing any load balancer assigned requests. In certain embodiments when a computer is not running any critical processes or that existing processes may be terminated moved or saved for completion at a later time such as without significant degradation or loss of service level the computer may be referred to as idle. A computer is sometimes referred to as idle if its processing load is below a predetermined threshold e.g. to account for overhead processes. A computer may be identified as idle if it is in one or the following modes or states standby hibernation sleep powered down low power and inactive. In some embodiments a computer may be identified as idle due to a lower processing load relative to another computer. A computer may in some circumstances be identified as idle when it is providing non critical redundancy processing in parallel with another computer servicing the same request.

In some embodiments a computer may be described as offline if the computer is in one of the following modes or states standby hibernation sleep powered down low power and inactive. An offline computer may sometimes be included in the pool of load balanced computers. In other embodiments an offline computer may be excluded from the pool of load balanced computers. In yet another embodiment an offline computer refers to a computer that does not belong to a load balanced group of computers. In some embodiments the maintenance agent may select an offline computer for maintenance. Where an offline computer is to be removed from a pool of load balanced computers for maintenance the load balancer may first determine if the removal may affect availability of a service in accordance with the methods and systems discussed herein. In some cases an offline computer may be made available for accepting requests in order to increase service availability.

The load balancer may monitor the spare capacity or processing load of at least some of the plurality of computers A N. In some embodiments the load balancer may monitor or track the processing load or utilization of the plurality of computers. These may be performed using any of the systems and methods described above in connection with . The load balancer may determine spare capacity based on the utilization of the plurality of computers. In some embodiments spare capacity may be determined as the number or fraction of load balanced computers available to receive a request. Spare capacity may be determined as the number of up to date computers available to receive a request. The utilization of the plurality of computers may be determined based on the processing load and or other metric s from the plurality of computers. Utilization may for example be measured or quantified against a scale showing accumulated CPU utilization across the computers. The utilization may in some embodiments be a count fraction or percentage of the computers that are not idle.

The utilization may be a count fraction or percentage of computers having a processing load above a certain threshold level. The utilization may be an indication of the amount of certain types of resources e.g. processors memory bandwidth ports consumed by load balanced computers in processing assigned requests or otherwise. The utilization of the computer farm may be scaled or measured against historical records such as peak usage of computer resources over a period of time e.g. over a cyclical period identified from a recognizable usage pattern . The utilization of a computer farm may be a fraction or percentage of computers or resources available to the load balancer e.g. excluding computers that are inoperative or removed for maintenance.

The maintenance agent may remove one or more computers for maintenance upgrade servicing repair or replacement. In order to avoid possible service unavailability or degradation the maintenance agent or an administrator may determine a level of utilization that can support predicted or projected usage levels. Alternatively the maintenance agent or an administrator may determine the amount of spare capacity from the load balanced group of computers that can support predicted or projected usage levels. Although the discussion that follows may generally and illustratively refer to utilization instead of spare capacity it is understood that either concept may be used to gauge service availability and determine if a computer may be removed for maintenance for example.

In certain embodiments the maintenance agent or an administrator may determine a level of utilization that can further support some level of unanticipated usage demand. This level of utilization may be set as a threshold below which a computer may be removed from the computer farm for maintenance for example. This level of utilization may be selected such that there is low or minimal risk of service unavailability from the remaining pool of load balanced computers. This level of utilization may be determined from statistical analysis of historical data trends and anticipated needs. This level of utilization may be dynamically determined in real time or substantially in real time. Therefore as computers are removed and or when actual or predicted usage levels change in time this safe level of utilization or threshold may be recalculated or adjusted by the maintenance agent.

The maintenance agent may remove a computer for maintenance if actual present utilization is below the threshold. In certain embodiments the maintenance agent can remove a computer for maintenance if utilization of the load balanced pool of computers after the removal is expected to be below the threshold. In some embodiments the load balancer determines this safe level of utilization. The load balancer may permit the maintenance agent to remove a computer if actual utilization is below this threshold. The load balancer may permit the maintenance agent to remove a computer if utilization of the load balanced pool of computers after the removal is expected to be below the threshold. Similarly a threshold may be set for spare capacity above which there is low or minimal risk of service unavailability from the remaining pool of load balanced computers. The load balancer may compare actual spare capacity of the load balanced computers to this threshold to determine whether to remove a computer for maintenance.

In certain embodiments the load balancer removes a computer for maintenance by the maintenance agent according to the utilization or spare capacity of the load balanced computers. The maintenance agent and or the load balancer may remove a group of computers from the land balanced pool of computers A N based on the utilization or spare capacity of the load balanced computers. In some embodiments the utilization spare capacity and or corresponding threshold may be determined for a group or subclass of computers in the load balanced pool of computers A N for example computers providing a certain type of service and or having a similar configuration in hardware and or software. In various embodiments the threshold is determined based on the available or spare capacity of the load balanced group of computers to handle requests.

As discussed above the maintenance agent may receive a directive or communication that one or more computers are due for maintenance. In some embodiments the communication comprises a request or advertisement for an update or new installation. The maintenance agent may determine that one or more computers are due for maintenance based on monitoring or communicating with the one or more computers A N. The maintenance agent may mark or otherwise identify the status of each of such computers as requiring maintenance servicing repair upgrade or update. The maintenance agent may mark or otherwise identify each of such computers as having out of date or outdated configuration or maintenance.

Similarly the maintenance agent can identify or mark a computer as having up to date maintenance servicing configuration and or repair. Such a computer may sometimes be described as not requiring maintenance not due for maintenance fully maintained updated or up to date. In certain embodiments the maintenance agent may mark a computer by tagging a status identifier against an identifier of the computer such as in a list table directory database or logfile which may be maintained in the maintenance agent or at a central location e.g. on a server . The maintenance agent may mark a computer by updating a field of the computer s configuration status or setting. The maintenance agent may mark a computer by assigning the computer to a group or class e.g. a group of computers requiring maintenance.

In various embodiments the maintenance agent and or the load balancer may identify determine and or mark a computer as requiring maintenance or having up to date maintenance. The maintenance agent may identify to the load balancer whether a computer requires maintenance or has up to date maintenance e.g. via the maintained information in the list table directory database or logfile. The maintenance agent may convey this information by identifying the group to which a computer is assigned e.g. up to date or requiring maintenance. In some embodiments the load balancer requests maintenance status from the computers e.g. as updated in the computer s configuration status or settings. The load balancer may also request the maintenance status of any computer or group of computer from the maintenance agent .

The load balancer may assign a request to a computer of the plurality of computers A N based at least in part on any of the methods discussed above in connection with . The load balancer may be configured to prefer one or more computers over other computers in assigning a request. The preference may be based on any one or more of the level of load on a computer the level of load on a computer relative to another computer a metric of the computer the number of active requests assigned to the computer a state or status of the computer a group to which the computer belongs and user specified preference or administrator specified preference.

In some embodiments the load balancer may prefer to assign a request to an up to date computer instead of to a computer requiring maintenance. The load balancer may prefer to assign a request to an up to date computer with a level of load below a predetermined threshold level instead of to a computer requiring maintenance. Such an up to date computer may include a computer that is in an offline state e.g. in sleep hibernation power down low power inactive mode or offline. A computer in an offline state may be part of the pool of available computers for load balancing. In some embodiments a computer in an offline state may be excluded from the pool of available computers for load balancing. The load balancer may in some circumstances or embodiments prefer to assign a request to a computer that is not offline. For example a request may be processed more promptly if assigned to a computer that is not offline.

In some embodiments assignment of the request is in accordance with an opportunistic approach that avoids service outage or unavailability. For example the load balancer may prefer to assign a request to a computer requiring maintenance rather than a computer that is up to date if the latter computer has a processing load above a predetermined threshold. The load balancer may prefer to assign a request to a computer requiring maintenance rather than a computer that is up to date if the latter computer has a processing load at or near the predetermined threshold. The load balancer may decide not to assign a request to an up to date computer if assigning the request may raise its processing load above the predetermined threshold. In yet other embodiments the load balancer may decide to assign a request to a computer even if assigning the request may raise its processing load above the predetermined threshold. The load balancer may prefer to assign a request to a computer requiring maintenance and having a processing load below a first predetermined threshold rather than a computer that is up to date and having a processing load at near and or above a second predetermined threshold. In certain embodiments the first and second predetermined thresholds may be configured to be the same value or a different value.

A threshold may be predetermined for each computer computer type computer group service and or load type that the computer provides. In some other embodiments the load balancer may prefer to assign a request to a computer identified as idle and requiring maintenance rather than a computer that is up to date for various reasons. The load balancer may prefer to assign a request to a computer identified as requiring maintenance rather than another computer identified as requiring maintenance due to particular characteristics of each computer such as individual capabilities capacity state status a predetermined order of preference assigned group computer type time from the last maintenance number of previous attempts at performing maintenance the amount type importance and or duration of maintenance to be performed and its present relation to a pre assigned maintenance window.

In some embodiments some of these factors may result in or have an influence on the load balancer s preference or decision to assign a request to a computer identified as requiring maintenance rather than another computer identified as up to date. Some of these factors may result in or have an influence on the load balancer preferring to assign a request to a computer rather than another computer both with the same maintenance status and or load levels. In certain embodiments some of these factors may result in or have an influence on the load balancer preferring to assign a request to a computer identified as up to date rather than another computer identified as requiring maintenance. In some embodiments some of these factors may result in or have an influence on the load balancer preferring to assign a request to a computer having some processing load rather than another computer identified as idle.

In some embodiments an administrator may use a task scheduler module of the management system to configure certain operations of the maintenance agent. The task schedule may provide a user interface for an administrator. The user interface may include aspects or features of a command line interface and or a graphical user interface. An administrator may select or provide maintenance updates or tasks to propagate to one or more computers. Certain maintenance updates or tasks may be assigned to particular computer groups including computer groups within a larger group of load balanced computers A N. The user interface may further provide status and reporting features for various tasks and processes such as a maintenance roll out.

An administrator may specify via the user interface a maintenance window for performing a maintenance update or task on a computer or a group of computers. Groups of computers may be specified or defined according to an application or service that these computers provide. These groups may be referred to as application silos or worker groups. In some embodiments a maintenance window specifies a period of time during which the maintenance agent may try to remove a computer from the load balanced group for maintenance. In certain embodiments a maintenance window specifies a period of time during which no requests may be sent to a computer so that the computer may be maintained when it is idle i.e. is drained of processing load from requests . A maintenance window may specify a period of time during which requests being processed on a computer are moved or terminated so that maintenance on the computer may be performed when it is idle. A maintenance window for a computer may specify a period of time during which new requests are preferably assigned to other computers so that the computer may be maintained when it becomes idle. A maintenance window may comprise a duration of any predetermined or arbitrary length of time such as an hour a day or a week.

In some embodiments the maintenance agent automatically sets a maintenance window for a computer when a maintenance update or task is issued advertised due or requested. An administrator or the maintenance agent may set a plurality of maintenance windows for a particular maintenance update or task. For example additional maintenance windows may be set if maintenance was not successful during a first maintenance window. The plurality of maintenance windows may be scheduled over any period of time for example over several days. The maintenance agent may find no opportunity to remove the computer from the load balanced group for maintenance for example due to a processing load that was not fully drained high number of requests or an unsuccessful application of a patch. In some embodiments the maintenance agent automatically sets additional maintenance windows when maintenance was not completed successfully within a first window. In other embodiments the maintenance agent or administrator may set several windows upfront or over a period of time in response to a maintenance update or task which is issued advertised due or requested. This reflects an opportunistic process of removing a computer for maintenance when the computer is idle and or when there is spare capacity in the system.

In some embodiments a maintenance update or task may be performed while a computer is processing a request or otherwise not idle. For example the maintenance task may include a virus scan that can run in the background. In some virtualization environments a patch such as a virtual disk patch or a virtual application package may be issued for distribution to a plurality of virtual machines hosted by one or more computers. Some patches may be applied to the virtual machines or computers while a request is being processed e.g. when a user session is in progress . For example some of the updates may involve publishing a new application to a user or updating an existing component that is not currently used for processing any requests. In some of these cases the maintenance agent may not have to set a maintenance window for a respective task or update wait for the computer to become idle and or remove the computer from a load balanced group. Accordingly the maintenance agent may recognize such tasks or updates and perform the maintenance while minimizing impact to a load balanced configuration of computers.

Illustrated in is one embodiment of a method for updating or performing maintenance on computers in a load balanced environment. An automated maintenance routine carried out by a maintenance agent or load balancer executing on a computer that can access each of the computers included in the group of load balanced servers selects a group of maintenance pending computers Step . The maintenance agent then removes the selected computers from the load balancing group Step and applies the necessary modifications and updates to the selected computers Step . The maintenance agent then marks the updated computers as fully maintained Step and loads the fully maintained computers into the load balancing scheme Step .

Further referring to and in more detail in one embodiment the maintenance agent selects a group of maintenance pending computers Step . In some embodiments computers that are included in a load balanced group of computers can be marked as fully maintained or maintenance pending. Marking a computer can include inserting a status value into a table that tracks the status of each computer. In another embodiment each computer can include metadata a file or other piece of data that can be configured to state either fully maintained or maintenance pending. In still another embodiment a status monitor can monitor the status of each computer in the load balanced group. When in this embodiment the maintenance agent issues a request for a listing of each computer marked as maintenance pending the status monitor can respond to the maintenance agent s request with a list of all the computers having a status of maintenance pending. In one aspect the number of computers selected by the maintenance agent can depend on the utilization of the rest of the load group and system administration policies. When in some embodiments the group utilization is too high the maintenance process may wait until enough spare capacity becomes available before attempting to maintain unused computers.

In some embodiments a load balancer can be aware of the status of each computer in the group of load balancing computers and can prefer to choose those computers having the status fully maintained over those computers having the status maintenance pending. In this embodiment if these computers can handle new requests a load balancer that enforces the load balancing scheme can select loaded fully maintained computers before unloaded maintenance pending computers. The load balancer can in some embodiments make this choice up to a configurable load limit that can be calculated based on computer utilization rules such as the number of requests CPU utilization etc. Load balancing that is accomplished according to these policies can result in a group of maintenance pending load balanced computers that can be fully drained e.g. they do not process any computing requests. This can occur when the group of load balanced servers are not under peak capacity.

The load balancer can retain and manage the selected maintenance pending computers in the group of load balanced computers. For example the load balancer may want to maintain increase or maximize availability of a service including availability from maintenance pending computers. In another instance the maintenance agent may remove the selected maintenance pending computers from the group of load balanced computers Step . Removing these computers from the group can include instructing the load balancer to stop issuing requests to a select group of computers in the group of load balanced computers. In other embodiments removing the computers from the group can include not making the computers available to the load balancer.

In virtualization environments the maintenance performed can be maintenance that includes changing the base disk image version of the group of load balanced computers. For example in provisioning services patch updates may be distributed in the form of base image updates. In some embodiments patch updates may be implemented in the form of delta disk images representing changes relative to a base image configured in a machine or virtual machine. The methods described herein can facilitate such maintenance which can increase resiliency by allowing administrators to revert to previous image versions when problems are detected. The ability to roll back of an image may reduce the risks of maintenance failure.

The maintenance agent can then apply the necessary modifications Step and mark the computers as fully maintained Step . In some embodiments applying the necessary modifications can include maintaining updating or otherwise installing applications and services on the servers. In other embodiments applying the necessary modifications can include applying patches and performing security checks on the computers. Still other embodiments may include reimaging the computers by replacing or updating a disk image or virtual disk image. Marking the computers as fully maintained can be done by entering in an entry into a table list or database indicating that a particular computer is fully maintained. In other embodiments marking the computers can include modifying a file or metadata of the computers from maintenance pending to fully maintained. 

Upon marking each of the computers as fully maintained the maintenance agent then loads each computer back into the load balancing scheme Step . Launching or loading the computers back into the load balancing group can include placing the computers back on a network where the load balancer can access the computers. In other embodiments launching or loading the computers can include removing any restrictions from the load balancer where the restrictions can include a mechanism for preventing the load balancer from issuing requests to the computers. In one embodiment the load balancer can load the maintained or just patched computers. In this embodiment the load balancer can then let the remaining maintenance pending computers drain their request queue so that those computers can be maintained. By selecting a new group of maintenance pending computers just as the now fully maintained computers are launched back into the group the maintenance agent can permit all computers in the group to perform maintenance routines.

Illustrated in is another embodiment of a method for performing maintenance on computers in a load balanced environment. The various steps in may incorporate any embodiment of the steps and features discussed above in connection with . A maintenance agent identifies to a load balancer a first computer as requiring maintenance Step . The first computer may be identified from a plurality of computers available to receive requests from the load balancer. The maintenance agent identifies to the load balancer a second computer as having up to date maintenance and a load level below a predetermined load limit Step . The second computer may be identified from the plurality of computers. The load balancer may assign a request to the second computer responsive to the identification that the second computer has a load level below the predetermined load limit and that the first computer requires maintenance Step . The load balancer may also determine that a number of computers from the plurality of computers identified as having up to date maintenance is above a threshold Step . The load balancer may determine that the first computer is idle Step . Responsive to the determination that i the spare capacity from the plurality of computers available to receive requests is above the threshold and ii the first computer is idle the maintenance agent may remove the first computer from the plurality of computers for maintenance Step . The maintenance agent may identify the first computer as having up to date maintenance responsive to the maintenance Step .

Further referring to and in more detail the maintenance agent identifies to a load balancer a first computer as requiring maintenance Step . The first computer may be identified from a plurality of computers available to receive requests from the load balancer. In some embodiments the maintenance agent identifies the computer from a specified group of computers the group associated with an application type a service type a computer type or a user classification for example. The maintenance agent may request maintenance and or processing status of one or more computers from the plurality of computers. In some embodiments the maintenance agent may identify a first computer as requiring maintenance based in part on the requested status.

The maintenance agent may determine that the computer is due for any type of maintenance update or task such as those discussed above in connection with . For example and in some embodiments the maintenance agent may detect or determine that the first computer is due for at least one of a patch update disk image update program installation or removal a service update a security check storage maintenance memory or cache clean up configuration update physical component repair and data corruption repair. The maintenance agent may detect that the computer is not up to date based on certain aspects of its configuration or maintenance. For example the maintenance agent may determine that a computer is not up to date based on a review of the computer s maintenance records. The maintenance agent may detect that a patch installed on the computer has been recalled or is outdated.

The maintenance agent may in some embodiments receive a request from a computer for maintenance. The maintenance agent may receive a notification that a maintenance update for a computer is available. The maintenance agent may receive instructions from an administrator or a task scheduler to perform maintenance on the computer. In certain embodiments the maintenance agent may refer to a directory logfile record or database to determine if a computer requires maintenance. The maintenance agent may retrieve information such as configuration or status information from a computer which indicates or helps determine whether the computer requires maintenance. The maintenance agent may convey any of these information to the load balancer .

In various embodiments the load balancer receives a maintenance status of a computer from one or more of the computer a maintenance agent a task manager a directory logfile record database and an administrator. The maintenance agent or the load balancer may mark a computer as requiring maintenance. The marking may be performed via any of the methods and means described above for example in connection with . For example the maintenance agent may identify or mark a computer by updating a maintenance status of the first computer in a table tracking maintenance status of at least some of the plurality of computers and or tagging on the first computer the maintenance status of the first computer the maintenance status indicating that maintenance is not up to date.

In some embodiments the maintenance agent may perform any of the identification or marking on one or more of the plurality of computers available to receive requests from the load balancer. The maintenance agent may operate on the computers sequentially and or in parallel. In some embodiments the maintenance agent may target a particular group or groups of computers from a load balanced pool for determining which computers require maintenance.

In certain embodiments the maintenance agent in communication with the load balancer may allow a computer identified as requiring maintenance to complete processing of requests assigned to the first computer. These requests may be assigned prior to identification that the first computer lacks up to date maintenance. The maintenance agent may further allow other processes executing on the computer to complete or drain out. In some embodiments the maintenance agent instructs the computer to facilitate or accelerate completion of a process running on the computer. The maintenance agent may also save migrate or terminate a process running on the computer. In some embodiments an existing process is allowed to execute unaffected on the computer.

Referring again to the maintenance agent identifies to the load balancer a second computer as having up to date maintenance and a load level below a predetermined load limit Step . The second computer may be identified from the plurality of computers. The maintenance agent may identify such a computer using any of the means and features described above in connection with B and step . For example the maintenance agent may identify the maintenance status and or load level of the computer via a monitoring agent executing on the computer. The maintenance agent may determine that a computer is up to date based on a previous completed maintenance event and or that no new notification of an available or mandatory update was issued.

In some embodiments the maintenance agent may identify a computer as up to date because it was not identified as requiring maintenance in step . Conversely the maintenance agent may determine by default that a computer requires maintenance unless it is specifically identified as up to date. The maintenance agent determine whether a computer is up to date or requires maintenance based on any of the operations described in step . In some embodiments the determination of whether a computer is up to date or requires maintenance is performed separately and or independently of a determination of the load level. In certain embodiments both determinations of maintenance status and load level are done at the same time or within a certain acceptable time frame.

The maintenance agent may receive or determine the load level of the computer and compare this against a load limit. The maintenance agent may for example determine the load level of the computer via the load balancer. The maintenance agent may determine the load limit or threshold for the computer according to one or more policies for example maintenance and load balancing policies. The maintenance agent may determine the load limit dynamically for example adjusting this limit according to the number of available computers spare capacity in the load balanced pool a configuration of the computer or the load type on the computer. The maintenance agent may retrieve the load limit from a directory or other database maintained centrally or by the load balancer for example. The maintenance agent may dynamically compare the processing load of the computer against the load limit. The load balancer and or the maintenance agent may determine a processing load for the computer averaged over a period of time for comparison against the load limit or threshold. An average processing load may be determined in response to temporal fluctuations in the load levels of the computer.

The maintenance agent may determine if the computer has sufficient spare capacity e.g. for accepting a new request or a request of a certain type. The maintenance agent may determine if the computer is preferred over another computer for receiving a request. The maintenance agent may determine that the processing load of the computer is below the load limit for the computer. In some instances the maintenance agent may determine that the processing load is at or above the load limit for the computer. The load balancer may determine that a computer having a load level below its load limit is preferred over another computer having a load level below its respective load limit for receiving a request. In some embodiments the maintenance agent may determine that a computer identified as having i up to date maintenance and ii a load level below a predetermined load limit is a preferred computer for assigning a new request. The maintenance agent may convey any of these information and or preferences to the load balancer .

In some embodiments the load balancer may assign a request to the second computer responsive to the identification that the second computer has a load level below the predetermined load limit and that the first computer requires maintenance Step . The load balancer may be configured to preferably assign a request to a computer having up to date maintenance rather than a computer requiring maintenance. The load balancer may prefer to assign a request to a computer having up to date maintenance rather than a computer requiring maintenance. The load balancer may assign a request to the up to date computer based on the determination that the up to date computer has a load level below the predetermined load limit. The load balancer may assign a request to the up to date computer based on a determination that another available computer is not up to date. The load balancer may predispose assignment of new requests to up to date computers having spare capacity or a low processing load. The load balancer may predispose assignment of new requests away from computers that are not up to date.

In some embodiments the load balancer assigns a request to the computer that is due for maintenance if the up to date computer has a load level above the latter computer s predetermined load limit. The load balancer may assign a request to the computer that is due for maintenance if that computer has a load level below its predetermined load limit. In some of these embodiments the load balancer may assign the request to the computer that is due for maintenance if that computer has spare capacity. The load balancer may assign a request to the computer that is due for maintenance if no other up to date computers have load levels below their respective load limits. The load balancer may also account for other factors such as the request type and the configuration of each computer in determining which computer to assign a request.

The load balancer may determine that spare capacity from the plurality of computers available to receive requests is above a threshold Step . The load balancer may determine that the utilization of the plurality of computers available to receive requests is below a certain threshold. In some embodiments the load balancer may determine that the number of computers from the plurality of computers identified as having up to date maintenance is above a threshold. The load balancer may determine that the number of computers e.g. up to date computers having spare capacity is above a threshold. In certain embodiments the load balancer may determine that the risk of service outage degradation or unavailability is low such as in relation to removing a computer from the load balanced pool. In some other instances however the load balancer may determine that the risk of service outage degradation or unavailability is significant or high. For example the load balancer may determine that spare capacity from the plurality of computers is below a threshold or that the utilization of the plurality of computers is high or above a threshold.

In some embodiments the load balancer determines the threshold based on certain utilization aspects of the plurality of computers. For example the load balancer may determine the threshold based on a statistical analysis of load or a utilization pattern of the load balanced computers. The load balancer may determine the threshold dynamically based on changing parameters such as the number of available computers in the load balanced pool the number of computers requiring maintenance and the type of requests received and or being processed. In some embodiments the load balancer averages the utilization or spare capacity over a period of time and compares the result to the threshold.

Referring to Step the load balancer may determine that the first computer is idle. The load balancer may monitor the load level of some or all computers in the plurality of computers. The load balancer may monitor the load level of some or all computers in particular groups of computers in the load balanced pool. The load balancer may detect that the load level of a computer such as the computer requiring maintenance is low trivial or insignificant. In certain embodiments the load balancer may determine that all assigned requests to the computer are processed or completed. In some instances the load balancer may determine that the computer is in a low power inactive hibernation sleep power saving stand by mode or state. In some cases the load balancer may determine that the processing load from requests assigned to the computer have been drained. Responsive to the threshold determination the maintenance agent or load balancer may determine whether to remove a computer identified as requiring maintenance from the plurality of computers for maintenance.

Responsive to the determination that the spare capacity from the plurality of computers available to receive requests is above the threshold and the first computer is idle the maintenance agent may remove the first computer from the plurality of computers for maintenance Step . Based on the circumstances the maintenance agent and or load balancer may remove a computer from the plurality of computers for maintenance. The computer may be removed opportunistically based on the state of the computer and or the spare capacity of the load balanced group. The computer may be removed if there is low risk of service outage or degradation. The computer may be removed if the computer is idle or not processing any assigned request. The computer may be removed during any of one or more maintenance windows scheduled for the computer. Further the computer may be removed based on any one or more of the determinations described in step and or step .

By removing the computer the load balancer may exclude or prevent the computer from receiving a new request. In some embodiments the load balancer may remove the computer from an assigned computer group. The load balancer may change a configuration of the computer to remove it from the load balanced pool. The load balancer may mark the computer as unavailable for load balancing or remove the computer from a list of computers available to receive requests.

In some embodiments the computer farm management system or the load balancer updates the utilization or spare capacity of the load balanced pool. The update may occur responsive to the removal of the computer. The computer farm management system the load balancer and or the maintenance agent may update one or more policies responsive to the removal. For example the maintenance agent may modify a load balancing policy of a plurality of policies that the load balancer uses to assign a request. The one or more policies may be updated based on the updated utilization or spare capacity of the load balanced pool.

Further and in some embodiments responsive to the threshold determination the maintenance agent or load balancer may determine whether to remove a third or additional computer identified as requiring maintenance from the plurality of computers for maintenance. The maintenance agent or load balancer may determine that the load balanced group has sufficient spare capacity or service availability to operate without another computer.

The load balancer may in some embodiments determine that a maintenance update or task due for the computer can be performed without affecting ongoing processes on a computer. In such a case the load balancer may ignore one or more requirements for removing a computer for maintenance. For example the computer may not have to idle or be maintained within a scheduled window. In some embodiments the load balancer may determine not to remove the computer from the load balanced pool. The maintenance agent may perform maintenance or selected portions thereof while the computer is part of the load balanced pool and or servicing a request.

The maintenance agent may identify the first computer as having up to date maintenance responsive to the maintenance Step . Subject to successful completion of maintenance on the computer the maintenance agent may identify the computer as up to date. The maintenance agent may update the maintenance status of the computer in a database directory or logfile. The maintenance agent may mark the maintained computer as up to date according to the different embodiments described above in connection with and B. Upon completion of maintenance the maintenance agent may indicate to the load balancer that the computer can be added back to the load balanced pool for receiving requests. In some embodiments the load balancer may evaluate examine or test the maintained computer prior to deploying the computer for load balancing. In certain embodiments the load balancer may identify the up to date computer as a preferred computer for receiving requests. The load balancer may assign an up to date computer to a different group for example responsive to a change in configuration on the computer.

In some embodiments the maintenance on the computer may be incomplete or unsuccessful. The maintenance agent and or load balancer may return the computer to the load balanced pool for example based on increased load on the load balanced pool. The maintenance agent may restore the state of a computer for example in the case of an unsuccessful or defective maintenance or patch. In some embodiments the maintenance agent may schedule the computer for incremental maintenance or re application of a patch. In detecting a patch or installation failure the maintenance agent may for example revert back to a previous patch installation or disk image version. The maintenance agent and load balancer may in some circumstances e.g. due to incomplete maintenance determine that the computer should remain offline or be excluded from the load balanced pool. The maintenance agent may perform additional maintenance or remedial work before the computer can be assigned an up to date status.

Using the methods and systems described the process of providing maintenance to one or more computers in a load balanced environment may be automated or substantially automated. It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. The systems and methods described above may be implemented as a method apparatus or article of manufacture using programming and or engineering techniques to produce software firmware hardware or any combination thereof. In addition the systems and methods described above may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. The term article of manufacture as used herein is intended to encompass code or logic accessible from and embedded in one or more computer readable devices firmware programmable logic memory devices e.g. EEPROMs ROMs PROMs RAMs SRAMs etc. hardware e.g. integrated circuit chip Field Programmable Gate Array FPGA Application Specific Integrated Circuit ASIC etc. electronic devices a computer readable non volatile storage unit e.g. CD ROM floppy disk hard disk drive etc. . The article of manufacture may be accessible from a file server providing access to the computer readable programs via a network transmission line wireless transmission media signals propagating through space radio waves infrared signals etc. The article of manufacture may be a flash memory card or a magnetic tape. The article of manufacture includes hardware logic as well as software or programmable code embedded in a computer readable medium that is executed by a processor. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

Having described certain embodiments of methods and systems for redirecting an access request from one virtual machine to another virtual machine it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the invention may be used.

