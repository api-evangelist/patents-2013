---

title: Service bridges
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for service bridges. In one aspect, a method includes a host operating system performs operations comprising: receiving, using one or more service bridges that execute in the host operating system, a plurality of requests from the one or more virtual machines, wherein each service bridge is associated with a different virtual machine of the one or more virtual machines, and wherein each request is a request to interface with one or more external services; modifying, using a respective service bridge, each request to be processed by the one or more external services; and providing each modified request from the respective service bridge to the one or more external services, where the respective service bridge communicates with the one or more external services over a network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448830&OS=09448830&RS=09448830
owner: Google Inc.
number: 09448830
owner_city: Mountain View
owner_country: US
publication_date: 20130314
---
This specification relates to service bridges and in particular service bridges communicating with virtual machines.

Cloud computing is network accessible computing in which typically large collections of servers housed in data centers or server farms provide computational resources and data storage as needed to remote end users. Some cloud computing services allow end users to run user provided server software applications e.g. e commerce server application web server or file server in the cloud. Some other cloud computing services provide access to software applications such as word processors and other commonly used applications to end users who interface with the applications through web browsers or other client side software. Users electronic data files are usually stored in the server farm rather than on the users computing devices. Maintaining software applications and user data on the server farm may simplify management of end user computing devices. Some cloud computing services allow end users to execute software applications in virtual machines.

The system described can implement service bridges between virtual machines and external services. Service bridges can be a mechanism for managing access of a collection of virtual machines to external resources and services. Service bridges can be proxies e.g. metadata services that enable communication between the virtual machines and the external services. For example service bridges can add and manage authentication protocols without requiring cooperation from a virtual machine. Service bridges can also provide access to otherwise inaccessible services like a private data store. Service bridges can translate requests to be compatible with protocols of the request s destination. Service bridges can also forward requests to accurate destinations.

In general one aspect of the subject matter described in this specification can be embodied in methods that include the actions of a method performed by data processing apparatus the method comprising operating one or more virtual machines on the data processing apparatus wherein the one or more virtual machines are hosted by a host operating system that executes on the data processing apparatus wherein the host operating system performs operations comprising receiving using one or more service bridges that execute in the host operating system a plurality of requests from the one or more virtual machines wherein each service bridge is associated with a different virtual machine of the one or more virtual machines and wherein each request is a request to interface with one or more external services modifying using a respective service bridge each request to be processed by the one or more external services and providing each modified request from the respective service bridge to the one or more external services where the respective service bridge communicates with the one or more external services over a network.

Implementations can include one or more of the following features. The configuring occurs through an Application Program Interface API . One or more requests in the plurality of requests are not compatible with any of the one or more external services. Each of the one or more distinct virtual machines does not have a direct connection to an external network. The modifying comprises translating each request to conform to a compatible protocol for the one or more external services. The modifying further comprises obtaining an address from a name database where the name database includes at least a plurality of addresses associated with the one or more external services assigning the obtained address as a destination address of the request. Further comprising in response to providing each request receiving a response to the request from the one or more external services identifying a service bridge based on the response where the response includes an address of a virtual machine and where the service bridge is identified from a database of associations between service bridges and virtual machines modifying using the identified service bridge the response to be processed by the virtual machine and providing the response to the virtual machine. Modifying the response comprises translating a protocol of the response to a compatible protocol for the respective virtual machine. Modifying the response further comprises obtaining an address from a name database where the name database includes at least a plurality of addresses associated with the one or more virtual machines assigning the obtained address as a destination address of the response. Each request in the plurality of requests is received by a virtual network adapter at the respective virtual machine where the virtual network adapter interfaces between the respective virtual machine and the corresponding service bridge using packetized data. Each request in the plurality of requests is received by a paravirtualized socket at the respective virtual machine where the paravirtualized socket adapter interfaces between the respective virtual machine and the corresponding service bridge using a shared memory ring buffer. The network is an external network. Each service bridge is generated during creation of the corresponding virtual machine. Further comprising receiving using the one or more service bridges a second plurality of requests from the one or more external services wherein each request in the second plurality of requests is a request to interface with the one or more virtual machines modifying using the respective service bridge each request in the second plurality of requests to be processed and providing each modified request from the respective service bridge to the one or more virtual machines. Further comprising performing cryptographic and authentication operations using the host operating system to prevent each of the virtual machines from overriding the cryptographic and authentication operations. Each service bridge is accessible to one or more users selected by an administrator.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. The virtual machines do not require an external connection e.g. a connection to the Internet to communicate with external services. Service bridges can modify requests sent and received from virtual machines and external services to minimize software requirements of the virtual machines and external services. In other words the service bridges can act as a communication abstraction that enables the virtual machines and external services to communicate. For example by using service bridges the virtual machines can communicate with the external services even if the virtual machines and external services respective communication protocols are different. Service bridges can provide up to date addresses of virtual machines and external services even if the virtual machines and external services change locations. For example a virtual machine can change address by migrating to a different host machine. Service bridges can also configure virtual machines dynamically. For example a user can provide virtual machine configurations through an Application Program Interface API e.g. by executing API calls in a script. Host operating systems can quickly communicate with virtual machines using Transmission Control Protocol TCP or paravirtualized socket support to reduce latency. Service bridges can also be used as a layer to provide access to otherwise inaccessible services. For example the service bridge can allow access to only certain tables of a private database. Service bridges can also manage a virtual machine s identity and authentication information thereby allowing authentication to be performed by common services available in a host operating system of the virtual machine.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

Each host machine executes a host operating system or other software that virtualizes the underlying host machine hardware and manages concurrent execution of one or more virtual machines e.g. a virtual machine monitor or hypervisor . For example the host operating system is managing virtual machine VM and VM while host OS is managing a single VM . VMs can be migrated from one host machine to another host machine. In addition a single VM can be managed by multiple host machines. Each VM includes a simulated version of the underlying host machine hardware or a different computer architecture. The simulated version of the hardware is referred to as virtual hardware e.g. virtual hardware and . Software that is executed by the virtual hardware is referred to as guest software. In some implementations guest software cannot determine if it is being executed by virtual hardware or by a physical host machine. If guest software executing in a VM or the VM itself malfunctions or aborts other VMs executing on the host machine will not be affected. A host machine s microprocessor s can include processor level mechanisms to enable virtual hardware to execute software applications efficiently by allowing guest software instructions to be executed directly on the host machine s microprocessor without requiring code rewriting recompilation or instruction emulation.

Each VM e.g. VMs and is allocated a set of virtual memory pages from the virtual memory of the underlying host operating system and is allocated virtual disk blocks from one or more virtual disk drives for use by the guest software executing on the VM. For example host operating system allocates memory pages and disk blocks to VM and VM and host operating system does the same for VM . In some implementations a given VM cannot access the virtual memory pages assigned to other VMs. For example VM cannot access memory pages that have been assigned to VM . A virtual disk drive can be persisted across VM restarts. Virtual disk blocks are allocated on physical disk drives coupled to host machines or available over the internal network for example. In addition to virtual memory and disk resources VMs can be allocated network addresses through which their respective guest software can communicate with other processes reachable through the internal network or the Internet . For example guest software executing on VM can communicate with guest software executing on VM or VM . In some implementations each VM is allocated one or more unique Internet Protocol IP version 4 or version 6 addresses. Other address schemes are possible.

A VM s guest software can include a guest operating system e.g. guest operating systems and which is software that controls the execution of respective guest software applications e.g. guest applications and within the VM and provides services to those applications. For example a guest operating system could be a variation of the UNIX operating system. Other operating systems are possible. Each VM can execute the same guest operating system or different guest operating systems. In further implementations a VM does not require a guest operating system in order to execute guest software applications. A guest operating system s access to resources such as networks and virtual disk storage is controlled by the underlying host operating system.

By way of illustration and with reference to virtual machine when the guest application or guest operating system attempts to perform an input output operation on a virtual disk initiate network communication or perform a privileged operation for example the virtual hardware is interrupted so that the host operating system can perform the action on behalf of the virtual machine . The host operating system can perform these actions with a process that executes in kernel process space user process space or both.

The kernel process space is virtual memory reserved for the host operating system s kernel which can include kernel extensions and device drivers for instance. The kernel process space has elevated privileges sometimes referred to as supervisor mode that is the kernel can perform certain privileged operations that are off limits to processes running in the user process space . Examples of privileged operations include access to different address spaces access to special functional processor units in the host machine such as memory management units and so on. The user process space is a separate portion of virtual memory reserved for user mode processes. User mode processes cannot perform privileged operations directly.

In various implementations a portion of VM network communication functionality is implemented in a communication process e.g. communication processes . In some implementations the communication process executes in the user process space e.g. user process space of a host operating system e.g. host operating system . In other implementations the communication process can execute in the kernel process space e.g. kernel process space of the host operating system or be implemented in hardware. There can be a single communication process for all VMs executing on a host machine or multiple communication processes one for each VM executing on a host machine. In yet further implementations some portion of the communication process executes in the user process space and another portion executes in the kernel process space. The communication process communicates with a directory service e.g. VM registry service in order to establish a virtual network pair VNP between two VMs.

Each VM is associated with a corresponding service bridge. For example service bridge is associated with VM service bridge is associated with VM service bridge is associated with VM and service bridge is associated with VM . A service bridge can communicate with its associated VM and vice versa during or after the VM s creation. For example while a VM is being created the VM can retrieve data from its associated service bridge. In some implementations instead of each VM being associated with a corresponding service bridge two or more VMs can share a service bridge.

In some implementations multiple service bridges can be associated with a single VM. For example a VM can have first service bridge assigned to service incoming HTTP requests and a second service bridge assigned to provide access to a high availability database service. These two service bridges can communicate using different protocols and apply different levels of authentication and balancing.

Service bridges can communicate with one or more external services on behalf of VMs. That is the service bridges can send requests to the one or more external services or vice versa. The one or more external services can include a distributed database service an advertising exchange computing resources or a name database for example. Communication with the one or more external services can occur over an internal or an external network e.g. the Internet. In some implementations the communication uses Transmission Control Protocol TCP . The one or more external services can operate in virtualized or non virtualized environments. In some implementations an external service operating in a non virtualized environment is implemented on one or more computers located in one or more locations.

The service bridge includes a processor that generates and processes incoming and outgoing messages. The processor places messages in queues to manage traffic. The processor can read and write messages from each message queue. Generally messages include a source address and a destination address. If a message is added to the VM facing outgoing message queue or the network facing outgoing message queue the service bridge can redirect the message to the destination address in the message when the message is in the front of the respective queue. If a message arrives on a VM facing incoming message queue the service bridge can process the message which will be described below and add the message in the network facing outgoing message queue if applicable. If a message arrives on a network facing incoming message queue the service bridge can process the message and add the message in the VM facing outgoing message queue if applicable. In some implementations the queues determine a destination address of the respective message.

In some implementations the VM facing side of the service bridge is bound to a stable Internet Protocol IP address while the network facing side of the bridge can have a dynamic IP address. The service bridge can communicate to resources e.g. servers located outside of the host machine through a network adapter of the host machine e.g. an Ethernet adapter. For example the resources can be one or more external services can be located on an external network as described above in reference to . The service bridge can process a message using a protocol translator that enables communication between the VM and one or more external services. The protocol translator can detect a protocol of the message and translate the message into a different protocol. For example if the VM sends a message with a first protocol the protocol translator can detect the first protocol by comparing a header of the message to header formats of multiple protocols that are stored on the service bridge. The protocol translator can then determine the protocol used by a destination of the message e.g. by querying a database that associates destinations with their respective communication protocols. The destination of the message can be an external service. The protocol translator translates the message from the first protocol into the protocol of the destination. For example the protocol translator can retain the payload of the message and modify the headers of the message to conform to the protocol of the destination. Translating messages will be described further below in reference to .

The service bridge can process the message with other operations. The service bridge can use a cryptographic engine to encrypt or decrypt the message e.g. using a cryptographic key before sending the message to an external service. The service bridge can use a virus scanner to scan data payload of the message for viruses. In some implementations the service bridge includes a load balancer that manages requests and responses to the requests e.g. through the message queues described above. The service bridge can use an authenticator to add one or more flags that authenticate the message as coming from the VM . By keeping the cryptographic engine the virus scanner and the authenticator transparent to the VM the VM is unable to opt out of these operations by accident or malice allowing an administrator to enforce policies which cannot be overridden by the VM .

The system receives requests from one or more virtual machines operating on a host operating system step . Each request can be a request meant for an external service. For example a request can be to retrieve data from an external database or to send data to an advertisement exchange.

The system uses one or more service bridges operating on the host operating system to receive the requests. Each service bridge can be configured by an administrator of the host operating system and made available to administrators for a set of virtual machines. The host administrator can choose which services are made available to particular VM administrators. For example in a multi tenant environment VMs belonging to administrator A can have read access to database R while VMs belonging to administrator B can have read access to database R and read write access to database S. The administrator can choose to reduce access to the service bridge for a particular VM configured by the host administrator. For example administrator B can choose to instantiate a VM that does not have access to database R.

The administrator is responsible for creation deletion and management of the virtual machine. For example the administrator can configure the specifications of the virtual machine e.g. operating system type processor type or memory amount. The administrator can also identify e.g. through Application Program Interface API calls to the service bridge which external services the virtual machine will communicate with.

In some implementations the administrator configures the virtual machine through an Application Program Interface API operating on the service bridge. As described above the administrator can be an individual VM or an administrator of the service as a whole. An administrator of the service can establish limits and controls on available service bridges. In alternative implementations the API operates on the VM. The API can include operations based on Representational State Transfer REST . The API can include synchronous LIST INSERT UPDATE and DELETE operations. These operations enable the administrator to quickly and dynamically configure the VM. For example an administrator can send using a computer a LIST command to the service bridge to obtain a list of potential configurations e.g. a version of a database to use or a type of software to enable. The service bridge can send a response to the administrator with the list of potential configurations. Based on the response the administrator can send an INSERT command along with configurations selected by the administrator to the service bridge. The service bridge can process the command and configure the VM based on the administrator selections. Similarly the administrator can update and delete VM configurations using the UPDATE and DELETE commands respectively. In some implementations the administrator can approve whitelisted users to have read only access to the VM.

The system modifies using a respective service bridge each request to be processed by a corresponding external service step . In some implementations the request is not compatible with the external service. For example the external service and the virtual machine may use different data communication protocols. The respective service bridge can modify the request by translating the protocol of the request to a compatible protocol for the corresponding external service. For example the VM may form the request with a first database protocol but the external service operates on a second database protocol. The respective service bridge can translate the request to conform to the second database protocol as described above in reference to .

In some implementations the request can have a compatible protocol with the external service but the request does not include a destination address for the external service. For example the request can include the identity of the external service but does not include an address of the external address. The service bridge can obtain the address from a name database based on the identity of the external service. The name database maintains an up to date directory of associations between addresses and external services and associations between addresses and virtual machines. The name database can reside on the same internal network as the host machine. In some implementations if an external service or a virtual machine migrates or changes address for any other reason the name database is updated. In some other implementations a VM publishes its address to the name database when the VM is created. After obtaining the address the service bridge can modify e.g. assign a destination address in the request so the request can be routed to the external service.

The system provides each request from the respective service bridge to the corresponding external service step . The request can be sent using standard communication protocols e.g. TCP User Datagram Protocol UDP non IP protocols like Infiniband remote direct memory access RDMA or higher level protocols like remote procedure call RPC over a network.

In some implementations the service bridge receives a response to the request from the corresponding external service. Similar to modifying the request the service bridge can modify the response before sending the response to the respective virtual machine. For example the service bridge can translate the response to conform to a protocol of the respective virtual machine. The service bridge can also forward the response to an address of the respective VM. In some implementations the response does not include an accurate destination address of the virtual machine. This can occur if the VM has migrated locations. In this case the service bridge can obtain the address from the name database and modify the response with the obtained address so the response will reach the respective VM. The service bridge can then provide the response to the VM. For example the service bridge can communicate to the respective VM using TCP or a paravirtualized socket as described below in reference to .

In some implementations the service bridge communicates with the VM using TCP through the network interface . Other data communication protocols can be used however. In some implementations the network interface is a virtual Ethernet interface. The service bridge can form a TCP stream that the VM can process. The service bridge can use TCP protocols to break down the TCP stream into one or more IP packets and communicate those packets to the VM . In other words because VMs can simulate isolated environments communicating using TCP requires both the VM and the service bridge to abide by standard protocols. On the other hand communicating using TCP will not require modification to the service bridge .

In some implementations an optimized version of TCP is used. TCP can benefit systems that are not physically close to each other by addressing issues inherent in a network environment. However communicating using TCP can be optimized if systems are assumed to be physically close to each other. For example TCP includes a reliable transmission functionality that ensures a packet is delivered over a network. However here because the VM is on the same host machine as the service bridge TCP s reliable transmission error checking and other functionality optimized for a network environment can be simplified for a single system environment to reduce latency. For example some TCP functionality e.g. TCP s sliding window optimization can be removed while other TCP functionality can be stripped down e.g. using fewer parity bits for error checking.

In some implementations the service bridge communicates to the VM using a paravirtualized socket . Using a paravirtualized socket is a virtualization technique that presents a software interface between virtual machines and a host operating system. A paravirtualized socket can remove latency issues introduced by using a protocol like TCP. For example a paravirtualized socket can require much less hardware emulation e.g. no virtual network interfaces are required and can reduce the number of slow transitions out of the VM s context thus improving the efficiency of the communication. The paravirtualized socket can also allow the service bridge and the VM to communicate without requiring network error checking and network error recovery.

In some implementations the service bridge can send packets e.g. a response to the VM by injecting a packet from the service bridge to the VM through the paravirtualized socket . For example the service bridge can send and receive data from the VM using a shared memory ring buffer. In some implementations a shared memory buffer is a special section of memory that is mapped into both the VM and the operating system of the host machine . A ring buffer allows the VM and service bridge to both be reading and writing at the same time with a minimum of copying. In some implementations to ensure compatibility the kernel of the VM creates packets encapsulating the data from the shared memory ring buffer to mimic a protocol such as TCP.

In some implementations the service bridge injects the packet by generating a packet encapsulated with data that mimics packet structure of a communication protocol e.g. structure of a TCP packet and sending the packet to the kernel of the VM .

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language resource in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending resources to and receiving resources from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. advertisement hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

