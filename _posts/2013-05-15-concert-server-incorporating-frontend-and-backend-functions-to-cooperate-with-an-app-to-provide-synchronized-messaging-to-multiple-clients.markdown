---

title: Concert server incorporating front-end and back-end functions to cooperate with an app to provide synchronized messaging to multiple clients
abstract: In a communications system, a controller communicates to multiple client devices, each subject to a different latency, in an application in which the multiple client devices need to react substantially simultaneously to a command from a server. A controller front-end in a server provides an abstract environment for the acceptance, initiation, and processing of messages. The framework provides a scaffold which handles reception of messages and makes them available to the specific application business logic as events to be processed. A back-end enables synchronized command execution, abstracted database table definition, creation of generalized table access, selective message transmission, and the like. By providing the back-end and front-end foundation framework, the present subject matter provides the foundational components in the system so that development of mobile applications is simplified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09143564&OS=09143564&RS=09143564
owner: 
number: 09143564
owner_city: 
owner_country: 
publication_date: 20130515
---
This patent application claims priority of Provisional Patent Application 61 648 593 filed May 18 2012 Provisional Patent Application 61 670 754 filed Jul. 12 2012 Provisional Patent Application 61 705 051filed Sep. 24 2012 Provisional Patent Application 61 771 629 filed Mar. 1 2013 Provisional Patent Application 61 771 646 filed Mar. 1 2013 Provisional Patent Application 61 771 690 filed Mar. 1 2013 and Provisional Patent Application 61 771 704 filed Mar. 1 2013 the disclosures of which are each incorporated by reference herein in its entirety.

The present subject matter relates to a method and system incorporating front end and back end functions which facilitate the interaction of third party apps with a synchronized messaging system communicating with multiple clients for providing an enhanced concert experience.

One form of a live event is a concert in a venue. The venue may accommodate on the order of thousands or tens of thousands of audience members. The prior art has taken initial steps in providing an enhanced concert experience. Initially concerts were accompanied by light shows and the like. New limited forms of interaction are provided which include communication from a central concert transmitter to portable user devices such as smartphones in an audience.

An important part of maintaining the continuing popularity and economic viability of an operating system or an operating environment is providing the ability for interaction with third party applications or apps. One such system communicates with multiple portable devices in a concert audience. Prior systems would not have been conducive to the use of apps providing a shared experience to audience members in a venue. Providing a shared experience requires that audience members receive communications in a synchronized manner. Had the prior art contemplated the provision of shared experiences implementation would have been difficult since portable user devices are inherently subject to clock variations. Additionally latency varies between devices on different cell phone carrier networks and even within the same cell phone carrier network. The internal time of day clock value can differ between adjacent devices by as much as several minutes. Additionally the clock drift experienced by an individual device can be noticeable over timeframes as short as tens of minutes. This inherent difficulty does not affect the limited interactions previously provided. Typical mobile device transmissions have included email Facebook data or web browsing. Such transmissions are not subject to ineffectiveness due to non synchronization between various user devices.

Since an app writer working apart from the system could not account for time differences between devices there can be no assurance that signals will be received at multiple user devices substantially concurrently to provide an experience that is in fact shared. Apps essentially could not be provided which could perform a function in which the portable interactive devices need to react simultaneously i.e. within a time window of preselected width.

In past systems messages have not been constructed in a form within a framework to remove impediments to synchronization. For example prior systems to the extent that they have provided synchronization have had features which do not lend themselves to allowing a new portable interactive device to join a network by performing a minimal number of operations.

Interaction of a sort has been provided between a concert server and portable interactive devices held by audience members. U.S. Pat. No. 8 090 878 discloses a more complicated method and system for synchronizing many clients to one central server. In this arrangement the central server must download client software to each electronic device to be synchronized. The client software allows the electronic device to perform data synchronization with the server. After the synchronization is complete the client software may be removed from the electronic device. Downloading the client software to each client device is a cumbersome process. After the client software is removed from each electronic device synchronization is no longer provided.

United States Published Patent Application Number 20100074278 discloses a network element which synchronizes a number of clocks within a system and supports multiple independent timing domains. The network element must act as a master clock to which other clocks are slaved. The network cannot account for initial time differences among the clocks.

United States Published Patent Application Number 20100129065 discloses a content request storage and configuration system provided for attendees of live events or performances which associates pieces of content with one or more keywords and configures the content for the benefit of a user. Content owners load content into the system or link content elsewhere to the system and optionally designate a set of actions to be taken. This system is directed toward the gathering of information by the content owner rather than to providing shared content to users.

Briefly stated in accordance with the present subject matter a method and system incorporating front end and back end functions facilitate the interaction of third party apps with a synchronized messaging system communicating with multiple clients for providing an enhanced concert experience. The apps are simplified in comparison to apps which would be required in the absence of the present subject matter.

The present subject matter operates so that the devices will respond substantially simultaneously to a command from a server to implement functions of the app without the app having to account for differing sources of latency. The operation may be repeated continually in order to provide dynamic response to changing conditions and to accommodate new devices coming online in the network.

A controller front end foundation in the server provides an abstract environment for the acceptance initiation and processing of messages. The framework provides a scaffold which handles reception of messages and makes them available to the specific application business logic as events to be processed. A back end enables synchronized command execution abstracted database table definition creation of generalized table access selective message transmission and the like.

By providing both the back end and front end foundation framework the present subject matter provides the foundational components in the system so that development of mobile applications is simplified.

One application of the present subject matter is to produce simultaneous outputs from a plurality of client devices. One example of a plurality of client devices is a group of portable interactive devices e.g. cell phones each having a display. A composite display distributed over the plurality of devices may be designed so that an optical effect in a venue is achieved. For example a central system could command that every device display a band logo. Alternatively different displays could be commanded at the same time for subgroups of devices. The present subject matter provides for synchronization of responses of the portable interactive devices so that the desired effect is achieved.

In addition a developer app may be installed on each interactive device to provide additional forms of interaction between audience members and the central server . The developer app may come from virtually any source. However it is the usual practice in this market that the developer app will be a third party app. The term third party is used to describe the operational context of the developer app as opposed to describing the writer of the application. As discussed in further detail with respect to below the present subject matter provides a framework for conducting front end and back end operations in the system software so that developer apps may be readily interfaced with the present system. The developer apps need not be capable of handling problems such as variable latencies as further discussed below. The present subject matter facilitates the use of simplified apps thus making the current system more attractive to app writers. This in turn leads to greater usefulness of the system length of the product life cycle and enhanced financial return to system operators.

The venue may include a stage audience area a control room and a media system which may be located in the control room . The media system receives audio video and intelligence from sources and may be operated to perform control room functions such as mixing selecting and processing. A video program is shown on a display .

The media system is used to couple outputs from a video source a sound source and other intelligence source . The video source may comprise one or more television cameras . In the present illustration a media source includes the video source sound source and other intelligence source . The sound source comprises audio output from a live performance provided by a performer or performers coupled by transducers such as microphones. Alternatively one or more of the video source the sound source and other intelligence source may comprise sources of streaming content prerecorded content stored data or currently processed content from any source. These sources may be local remote or both.

In one preferred form the display is a screen that comprises a backdrop for the stage . The display could comprise an array of screens over which the video program is distributed. In another form often used in arenas the display could comprise a display unit which includes a plurality of monitors on one support with each monitor facing in a different direction. Examples of the display unit are available under the trademark Jumbotron .

The media system is operated by a VJ 70. The VJ 70 may comprise one or more personnel or a programmed computer. It is not essential that the control room be located at the venue . The media system provides content to a concert network controller . The concert network controller may both receive and transmit information. The concert network controller provides an input to a display link which is coupled by a patch panel to the display unit .

The concert network controller may also comprise a Wi Fi hotspot providing and receiving signals to and from an audience area . As further described below content may be provided both to and from audience members . The concert network controller may also interact with remote participants .

The concert network controller is preferably wirelessly connected to an event server which can provide communications between remote participants and the concert network controller . The event server is coupled to a content editor which interacts with a staging server . The staging server may be coupled to the remote participants by a network for example the Internet . The Internet may utilize Network Time Protocol NTP servers . The event server the content editor and the staging server are collectively referred to as a communications server .

Communications will be provided between a target system and a source system. In the present description source system is a device that wishes to send a message to a target system. The target system is a device that is configured to receive sent messages in its operating system via a network connection sub system. Systems may include portable interactive devices or the central server . The business logic running on the device can operate as the target or the source system at any moment. Operating as a source system or target system for a particular messaging transaction does not preclude operating as the other system for a different messaging transaction simultaneously.

In a nominal application thousands of portable user devices may communicate with the concert network controller . The communication will provide interaction for intended uses of the system . This alone could strain resources and require expensive T1 access lines of a quality exceeding that of the commercial grade DSL capacity normally utilized within a concert venue. Providing such capacity would be both expensive and impractical. Additionally users have the option to operate their portable user devices in order to access the Internet and to access cell phone services. It is important to limit bandwidth usage requirements per portable user device so that a large number of portable user devices can be accommodated in one venue . This can be accomplished by disabling access to applications that are not part of the entertainment functions of the system . For purposes of the present description the applications contributing to functioning of the system are referred to as business logic.

Latencies can range from a time period approximating zero up to several seconds or minutes or more. In the present system a firing time is selected so that portable interactive devices will react to the signal from the communications networks at the same time. The reactions occur simultaneously. More specifically the reactions occur within a time window of preselected width. A nominal value for the width of a window could be 0.1 second. Implementation of a selectable firing time is further discussed below.

The platform supports transmission of command execution messages to both remote participants and the at venue participants . The at venue participants utilize mono cast Internet Protocol IP and multi cast User Datagram Protocol UDP to transmit messages over the captive Wi Fi network which requires the deployment of a stand alone Wi Fi network suitably architected for the venue. Handling the potentially hundreds of thousands of remote users is generally not possible since it is common for venues to provide consumer grade DSL Internet connections. The large load that such a large number of users would place on the main venue server namely the event server would also be untenable. Instead all messages destined for external participants are handled by a separate staging server that need not be installed in or resident at the venue itself. The staging server may instead be resident at an external service provider which can dynamically scale to match the required external participant user load. The external service can comprise cloud service from providers such as Rackspace or Amazon AWS.

When sending messages to internal users the event server will send one additional message to the staging server specially structured so the staging server will subsequently send that message to all registered external participants. In this way single messages from the event server can be broadcast to an arbitrary number of external users without placing any additional burden on the at venue infrastructure.

As seen in the portable interactive devices query the communications server for any new commands which have been issued during a current operating cycle. illustrates sending a command to show the preselected display at the firing time. As seen in each portable interactive device tracks time via a central clock . Each portable interactive device monitors the central clock so that it will fire at the end of a preselected time span after it receives the command A . Preferably there is a central clock within each portable interactive device . As seen in each portable interactive device executes the command to display the band logo.

At block each portable interactive device receives and recognizes time offsets from each NTP host server . This is important since latency will vary from one communications path to another. On the Internet time transfer delays are a function of variable parameters such as the level of server traffic and network bottlenecks. NTP is designed to compensate for some but not all network time delays between the host servers and each client portable interactive device . Across local area network NTP can give accuracy as good as a few milliseconds. Latency may be measured in a number of different ways. A given portable interactive device may send a time tagged signal to each NTP host server . To compute latency the portable interactive device may compare its own clock time to Internet time when a response is received. Other techniques are available.

At block the acceptability of the deviation is measured. For example the acceptable deviation could be defined by an offset time included in the signal sent to the portable interactive devices in . Alternatively a maximum acceptable latency could be predefined and included in the basic application installed on the portable interactive device . If the deviation is not acceptable operation returns to block where offset time is again measured. If the deviation is acceptable operation proceeds to block at which commands are obtained from the central server . This corresponds to the steps illustrated in above.

At block the portable interactive device compares current time with the firing time. If the current time is later than the firing time a failure is detected. Operation proceeds to block where a failure message with latency is sent to the central server and the device is entered into the failsafe mode at block . At block the device monitors current time to determine if the firing time has been reached. When the current time equals the firing time at block the command is performed. Operation returns to block where the portable interactive device will look for the next command at the communications server in a next operating cycle.

As seen in operation is launched at block . At block Internet status is checked. If there is no connection operation proceeds to block . The controller enters the above described failsafe mode. When the Internet connection is available operation proceeds to block where the central server receives time offset signals from each NTP host server . Acceptability of the deviation is compared at block to a preselected acceptable level. If the deviation is not acceptable operation returns to block to see if operation may proceed with an acceptable latency.

If the deviation is acceptable operation proceeds to block . At that point the central server waits for commands from the control room . After a command is received the command is sent to the communications server at block . Operation then returns to block where the central server waits for a command during a next operating cycle.

The above method and system provide a framework including both the back end and front end foundational components. Mobile application developers are free to devote their creativity to new applications and they do not have to create applications that require information about a context to which the developers do not have access. This context is the system in which portable users devices have latencies that may differ from latency of other user devices and in which the latency of an individual portable user device may change with time. The information is the timing information necessary to cause the portable user devices to respond to a command within one clock cycle.

The front end framework is provided by the coupling of the user devices to the concert controller . Processing in order to compensate for the varying latencies of user devices is performed inside the concert controller or central server . In this manner the developer app will not need to deal with the problem of latency. The back end framework couples signals from other sources to the interactive user devices . Sources accessed by the back end framework include stored content as may be selected by a VJ 80 or content assembled by the concert controller uploaded from portable user devices . The back end program steps may interact directly with the front end or perhaps more typically may comprise a program called from an intermediate program that mediates front end and back end activities.

The system has a back end that enables application development teams to utilize functions of business logic deployment the aforementioned synchronized command execution abstracted database table definition and creation generalized table access supporting all Create Retrieve Update Delete CRUD operations selective message transmission based on role physical location age device type capability custom registration historical demographic retrieval or other parameters. The deployment infrastructure allows dynamic deployment of new functions without requiring a server restart. Synchronized command execution automatically places a future command execution timestamp on each outgoing message to be handled by the client side library.

In addition both mono cast and multi cast message groupings can be created depending on the specific needs of the application. A final hurdle for any application is the client side software to handle the client side business logic and render the results. The front end foundation provides an abstract environment for the acceptance initiation and processing of messages. The framework provides a scaffold which handles reception of messages and makes them available to the specific application business logic as events to be processed. The application developer is free to concentrate on the business of implementing the functionality rather than decoding incoming messages worrying about time synchrony or preparing to send a new message.

For example the TAPI is sometimes referred to as a front end interface for telephone services. A program s TAPI requests are mapped by Microsoft s TAPI Dynamic Link Library programs an intermediate set of programs to a back end program or driver that makes the more detailed series of requests to the telephone hardware in the computer.

As another example a front end application might interface directly with users and forward requests to a remotely located back end program in another computer to get requested data or perform a requested service. Relative to the client server computing model a front end is likely to be a client and a back end to be a server.

The developer app may use a Representational State Transfer REST Application Program Interface API to hook into the messaging topological and demographic data provided by the concert controller to deploy new and unique developer apps . A RESTful API is an API that complies with the following constraints applied to the architecture while leaving the implementation of the individual components free to design 

There are several major hurdles preventing the general adoption of synchronous event driven applications in the mobile space. First among these is the inherent clock drift and time delta between different devices even those on the same carrier s network and in the same location. Mobile devices can be as much as several minutes off between adjacent devices. Additionally the clock drift experienced by an individual device can be noticeable over timeframes as short as tens of minutes. While this does not affect typical mobile device operations such as email Facebook or web browsing it will completely destroy the shared experience when commands are not executed concurrently by user devices . To counter the clock synchronization problem the platform library automatically computes clock deltas between all participating devices against a common master clock and maintains very close synchronism for the duration of the event. This auto negotiation is managed by the library itself without any work needing to be done by consuming applications. Dependent upon close clock synchronization is the ability of commands to be executed simultaneously at a designated time in the future by all participating devices or by all devices in a selected subgroup. To support this requirement all command execution objects in the platform implement a common execute method that adds the contained command to an internal queue of commands that are scheduled to be executed at the scheduled time. The framework provides additional methods to remove repeat or change a given command as well as a call back so that the system can be notified when a given command has been executed. Another major hurdle is the central distribution of messages. An individual mobile device does not have the computing capacity to manage and maintain communications between potentially several tens of thousands of devices active at any given venue.

In accordance with the present subject matter the message structures of may be implemented in new ways. Preparation of messages requires construction and de construction of objects with several types of operating parameters many of which are irrelevant to the operation of business logic. Creation and transmission of messages within the application space can be accomplished without requiring knowledge of the message construction or de construction process.

Message aware applications are provided with high level objects implementing a standard interface for accessing per message and common message parameters. This interface behaves as a familiar access method on the object providing interrogation of messages for fields such as individual names fields setting of named fields interrogating and setting of common fields access to error conditions or other fields which may be included among fields through .

Once constructed the framework provides a simple mechanism to initiate transmission of the message to a set of targets. Ways of defining sets of targets are further described below. The framework further provides simplified access to received messages. In the communications server messages are placed into an outgoing transmission queue received messages are placed into the incoming queue and delivered to the appropriate business logic as defined by the message.

The controller only framework includes provision to segregate client portable interactive devices and other devices into arbitrary groupings based on any provided metric. The grouping may be based on types of hardware accessible information regarding users or other indicators. Standard metrics include device role e.g. primary controller Jumbotron OCS or client gender age location within a venue device type e.g. iOS Android or HTML5 device family e.g. iPhone 3G iPhone5 iPad or the like and randomly selected set members.

The framework allows the creation collection and persistence of arbitrary metrics for use as segregation criteria. Individual devices can be added or removed from any grouping as desired. Groups are independent and can overlap in any manner desired. Once defined the grouping can be used as targets for specific commands. Once received by portable interactive devices commands are queued and executed according to the timing of the individual received message. Portable interactive devices register simple handlers for each type of command expected which are then invoked at the appropriate time and without business logic intervention. Client device business logic is provided with all message information including per message specific data to affect the desired operation. Business logic can implement any type of operation without regard to how and when the message was received. Messages received by portable interactive devices after the assigned execution time are returned by the framework to the originator for off line analysis.

Specific time messages are executed at a specific moment in time as indicated as part of the sent message. This is the most common form of message in the present system and enables the synchronized execution of commands. The stated time of execution is relative to the standard clock . Each device has its offset from this standard clock and executes the command at that appointed time. Messages received or processed after their assigned execution are logged and sent back to the sender with diagnostic information.

The present system creates a relationship between the time at which a command is issued and the time at which the command will be executed. When constructed messages can be assigned time dependent execution values of upon receipt upon receipt with priority a time in the future after receipt or a specific time. The point in time in the future beyond receipt may be set by data provided with the message. Received messages are each time stamped upon arrival and executed at the future time.

In one illustration in which latencies range from 0 to 15 seconds the system may be programmed to command a firing time that is 20 seconds later than the time at which a command is provided from the central server . A portable interactive device for which a latency of 15 seconds has been measured can be commanded to respond 5 seconds after a command is received. A portable interactive device for which a latency of 9 seconds has been measured can be commanded to respond 11 seconds after a command is received. The portable interactive devices will use their internal clocks to count to a firing time.

The system presented provides support for the following areas clock drift message transmission message construction command execution command timing device family segregation data access configuration and capabilities.

Devices present within a given environment may deviate from a standard clock by many seconds even those connected via the same cellular tower or other technology. While sufficient for most device centric operations it is insufficient for the closely time synchronized operations possible within the system environment. To counter this inherent time difference the system framework provides a standard clock with low latency access mechanisms and a background correction process to keep the device clock within a certain configurable window.

Device operating systems do not typically expose low level access to the system clock to effect an actual change to the time setting. In the present system knowing the value of the time delta between the standard clock and the device clock obviates the need to change a time setting.

As the clock on each device is inaccurate even over the period of several hours the system foundation will resynchronize the delta periodically to keep within a pre determined maximum time delta. A more precise delta requires the re synchronization of the clock on a more rapid schedule to ensure minimal drift. This time delta is configurable within the framework and is transmitted to participating devices upon registration or upon change of the value at the central location.

Simplified access is provided to data stored by the back end. Business logic is isolated from database mechanisms and can request specific data as needed. The data access framework supports the creation of arbitrary data elements groupings commands etc. for later reference by name. This can be used to send a specific complex or often used command or to define a grouping of devices.

The system framework supports configurable items that are transmitted to the affected devices automatically upon registration event start change to the item or on demand. Standard items are maximum clock drift video effect fade period and device family parameter limits such as frames sec camera and screen resolution.

When transmitted any device specific items are included to ensure the business logic is able to properly operate on the different platforms.

The system framework has a capabilities database for known devices. The database is continually updated with new devices. Capabilities allow the devices to fail gracefully when a command parameter is unable to be executed due to physical device limitations. The capabilities framework provides default sensible behavior for features unavailable on a given platform.

While the foregoing written description of the present subject matter enables one of ordinary skill to make and use what is considered presently to be the best mode thereof those of ordinary skill will understand and appreciate the existence of variations combinations and equivalents of the specific embodiment method and examples herein. The present subject matter should therefore not be limited by the above described embodiment method and examples but by all embodiments and methods within the scope and spirit of the present subject matter.

