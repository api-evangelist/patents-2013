---

title: Application provided browser plugin
abstract: An application may be installed on a user device. Installing the application may include receiving and storing an executable application, a plugin, and an application manifest. The application manifest may include a path corresponding to the plugin and one or more rules associated with the plugin. A webpage may be requested from the web server. The webpage may be parsed to determine that the webpage includes an instruction to use the plugin. It may be determined that the application includes the plugin. The path corresponding to the plugin may be obtained from the application manifest. The webpage may be presented using the plugin.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223557&OS=09223557&RS=09223557
owner: Amazon Technologies, Inc.
number: 09223557
owner_city: Reno
owner_country: US
publication_date: 20130508
---
Plugins are software components that may extend or enhance functionality supported by a larger software application. For example a plugin associated with a web browser may support functionality that the web browser may not otherwise be capable of supporting such as presenting certain types of content to a user.

Systems methods and computer readable media in accordance with various embodiments of the present disclosure may provide users with the capability to install application provided browser plugins. Plugins are software components that may extend or enhance functionality supported by a larger software application. A plugin may be independently developed by third party developers. Further plugins may be loaded at runtime. Applications that accept plugins may need to be specifically designed to provide an interface to allow for the plugin. Additionally applications may not know of the existence of the plugins at the time of the distribution of the application. Any plugin in accordance with the application programming interface API of the application may be accepted by the application even if the application is unaware of the plugin. In some embodiments a plugin may declare that it handles certain content types through exposed file information. If the browser encounters such content type the browser may load the associated plugin. In some embodiments the browser may set aside space within the browser content for the plugin to render itself and stream data to it. The plugin may then be responsible for rendering the data.

A wide variety of types of plugins may be provided that support various types of functionality. For example a plugin for a web browser may provide the web browser with capabilities that the web browser may not otherwise be able to support such as the ability to present content to a user using a high definition media interface HDMI . As another non limiting example a plugin for a web browser may expose one or more application programming interfaces APIs of an application to the web browser to enable the browser to support functionality similar to that supported by the application. A web browser plugin may also augment or facilitate digital rights management between the web browser and an application. For example if an application requires a user to log in and verify his or her identity the plugin may allow the web browser to access the authentication credentials used by the application to avoid the user having to sign in again separately from the application.

Some computing devices may not permit users to install application provided browser plugins due to security restrictions performance issues or stability issues. The systems methods computer readable media and techniques described herein may be utilized to provide plugins downloaded in association with applications to an execution environment such as an execution environment associated with a mobile device e.g. a smartphone tablet etc. . By bundling plugins with applications security parameters associated with the applications may also be applied to the plugins.

Various methods may be used to determine the applicability of the plugin to the webpage including permissions specified by the plugin developer the webpage domain regular expressions matching of the webpage URL whether the user is logged into the webpage or the like. In some embodiments an application may be downloaded or received by a user device. The application may include one or more plugins. In response to the download or receipt of the application by the user device an entry may be created and stored by the plugin manager of the web browser based at least in part on an application manifest associated with the application. An application manifest may be a document that defines the structure and content of an application. Prior to loading a webpage a browser executing on the user device may determine whether any plugins associated with the webpage are available. In some embodiments a webpage may be written in HTML. A plugin may be denoted in the HTML through one or more tags such as an embed tag or an object tag. In some embodiments the browser may check one or more application manifests to determine if any plugins are available.

In another example the browser may determine whether a permission level associated with the plugin is designated as public or private. If the permission level is indicated as public the web browser may obtain the plugin and load the webpage using the plugin. If the permission level is indicated as private the web browser may determine whether the webpage is associated with an application where the plugin resides. If the webpage is associated with the application the web browser may obtain the plugin. If the webpage is not associated with the application the web browser may be denied access to the plugin and the webpage may be loaded without the plugin. In some embodiments access to the plugin may be managed by a plugin manager. Access to the plugin may also be controlled with an access control list. For example access to the plugin may be controlled by an access control list based on the webpage address.

In some embodiments the web browser may be modified so that the browser checks one or more locations outside of its own directory space to attempt to locate plugins. In some embodiments the need to separately identify and install plugins may be reduced or eliminated because the plugins are downloaded or received in connection with the download or receipt of the application.

In some embodiments application providers e.g. developers may submit applications to be made available for download from the application store server and installation on one or more user devices . The application store server may permit application providers to upload applications e.g. application and any associated documentation or information. The application may include one or more plugins that may be stored in a directory space of the application on a user device to which the application is downloaded.

In some embodiments the application store may receive applications e.g. application from application developers or companies over one or more networks . The network s may include but are not limited to any one or more different types of suitable communications networks such as cable networks the Internet wireless networks cellular networks or other private and or public networks. Further the network s may include any type of medium over which network traffic may be carried including but not limited to coaxial cable twisted pair wire optical fiber hybrid fiber coaxial HFC microwave terrestrial transceivers a radio frequency communication medium a satellite communication medium or any combination thereof.

In an embodiment a user may select an application e.g. the application for download from the application store using a user device . The user device may download and install the application . In some embodiments the application may include one or more plugins . In some embodiments the user device may obtain the application with plugins through an alternate mechanism such as a website an ftp site or the like.

One or more web browsers may be provided on the user device for accessing one or more webpages. One or more plugin managers may be provided in association with the web browser . Prior to loading a webpage the plugin manager may determine whether a plugin is available for the webpage. If available the plugin manager may determine whether the browser may access the identified plugin . The plugin manager may obtain the plugin from the application and enable the web browser to use the plugin to present the webpage with augmented functionality provided by the plugin .

Those of ordinary skill in the art will appreciate that any of the components of the architecture may include alternate and or additional hardware software or firmware components beyond those described or depicted without departing from the scope of the disclosure. More particularly it should be appreciated that software firmware or hardware components depicted or described as forming part of any of the user device s the application store server s and or the application store database s and the associated functionality that such components support are merely illustrative and that some components may not be present or additional components may be provided in various embodiments. While various program modules e.g. software modules have been depicted and described with respect to various illustrative components of the architecture it should be appreciated that the functionality described as being supported by the program modules may be enabled by any combination of hardware software and or firmware.

It should further be appreciated that each of the above mentioned modules may in various embodiments represent a logical partitioning of supported functionality. This logical partitioning is depicted for ease of explanation of the functionality and may not be representative of the structure of software firmware and or hardware for implementing the functionality. Accordingly it should be appreciated that the functionality described as being provided by a particular module may in various embodiments be provided at least in part by one or more other modules. Further one or more depicted modules may not be present in certain embodiments while in other embodiments additional modules not depicted may be present and may support at least a portion of the described functionality and or additional functionality. Further while certain modules may be depicted and described as sub modules of another module in certain embodiments such modules may be provided as independent modules.

Those of ordinary skill in the art will appreciate that the illustrative networked architecture depicted in is provided by way of example only. Numerous other operating environments system architectures and device configurations are within the scope of this disclosure. Other embodiments of the disclosure may include fewer or greater numbers of components and or devices and may incorporate some or all of the functionality described with respect to the illustrative architecture depicted in or additional functionality.

The data storage may store program instructions that are loadable and executable by the processor s as well as data manipulated and generated by the processor s during execution of the program instructions. The program instructions may be loaded into memory as needed for execution. Depending on the configuration and implementation of the user device the memory may be volatile memory memory that is not configured to retain stored information when not supplied with power such as random access memory RAM and or non volatile memory memory that is configured to retain stored information even when not supplied with power such as read only memory ROM flash memory and so forth. In various implementations the memory may include multiple different types of memory such as various forms of static random access memory SRAM various forms of dynamic random access memory DRAM unalterable ROM and or writeable variants of ROM such as electrically erasable programmable read only memory EEPROM flash memory and so forth.

The user device may further include additional data storage such as removable storage and or non removable storage including but not limited to magnetic storage optical disk storage and or tape storage. Data storage may provide non volatile storage of computer executable instructions and other data. The memory and or the data storage removable and or non removable are examples of computer readable storage media CRSM .

The user device may further include network interface s that facilitate communication between the user device and other devices of the illustrative system architecture e.g. the application store server s or application software via the network s . The user device may additionally include one or more input output I O interfaces and optionally associated software components such as device drivers that may support interaction between a user and a variety of I O devices such as a keyboard a mouse a pen a pointing device a voice input device a touch input device a display speakers a camera a microphone a printer and so forth.

Referring again to the data storage various program modules applications or the like may be stored therein that may comprise computer executable instructions that when executed by the processor s cause various operations to be performed. The memory may have loaded from the data storage one or more operating systems S that may provide an interface between other application software e.g. dedicated applications a browser application a web based application a distributed client server application etc. executing on the user device and the hardware resources of the user device . More specifically the O S may include a set of computer executable instructions for managing the hardware resources of the user device and for providing common services to other application programs e.g. managing memory allocation among various application programs . The O S may include any operating system now known or which may be developed in the future including but not limited to any mobile operating system desktop or laptop operating system mainframe operating system or any other proprietary or open source operating system.

The data storage may further include one or more database management systems DBMS for accessing retrieving storing and or manipulating data stored in one or more datastores. The DBMS may use any of a variety of database models e.g. relational model object model etc. and may support any of a variety of query languages.

The data storage may additionally include various other program modules that may include computer executable instructions for supporting a variety of associated functionality. For example the data storage may include one or more applications one or more plugins one or more web browsers and one or more plugin managers .

The application may include computer executable instructions that in response to execution by the processor s cause operations to be performed including executing functionality supported by the application facilitating the loading of plugins in a web browser modifying of one or more paths associated with the plugins and the like.

The plugins may include computer executable instructions that in response in response to execution by the processor s cause operations to be performed including presenting content in a particular manner to a user scanning for viruses displaying content associated with specified file types and other functionality. In some embodiments the functionality provided by the plugin may augment the functionality provided by the web browser to enhance a user experience associated with the web browser in relation to a particular application .

The web browser may be invoked by one or more applications executable on the user device e.g. application and may be used to display or otherwise present content to a user of the user device . In some embodiments the web browser may initiate retrieval of one or more plugins . In some embodiments the web browser may retrieve code e.g. webpage from a remote server. The web browser may invoke the identified plugin based on the retrieved code.

Within the data storage one or more modules may be stored. As used herein the term module may refer to a functional collection of instructions that may be executed by the one or more processors . For ease of description and not by way of limitation separate modules are described. However it is understood that in some implementations the various functions provided by the modules may be merged separated and so forth. Furthermore the modules may intercommunicate or otherwise interact with one another such that the conditions of one affect the operation of another.

In some embodiments the user device may have a database or other storage structure of applications available on the device . The database may be populated using data extracted from application manifests associated with the applications . The database may permit a registration or accounting of available plugins via the applications . A plugin manager may determine the existence of plugins by parsing the application manifest files and or the database of application data. The plugin manager may determine whether a plugin exists at runtime generally in response to a request to load a webpage.

At block the user device may install the received application . The installed application may include the plugin within its directory space. In some embodiments the plugin manager may be notified about the new plugin . For example the plugin manager may receive a message responsive to the detection of the new plugin . The plugin manager may add the information regarding the new plugin in a list a registry or a similar structure for maintaining plugin data.

At block a request to access a webpage may be received. For example a web browser executing on the user device may receive a request to access a webpage from a user. In some embodiments the user may manually type in a web address or click on a hyperlink.

At block a plugin manager associated with the web browser may determine if any plugins are applicable to the webpage. The plugin manager may identify one or more plugins associated with the webpage. In some embodiments the plugin manager may determine the applicability of the plugin to the webpage including permissions specified by the plugin developer the webpage domain regular expressions matching of the webpage URL whether the user is logged into the webpage or the like. In some embodiments the plugin manager may determine whether a permission level or setting associated with the plugin is set to public or private. A public setting may indicate that any website may load or otherwise utilize the plugin . A private setting may indicate that only a pre determined website may load or otherwise utilize the plugin .

At block the plugin may be retrieved from the previously installed application . In some embodiments the web browser or one or more parameters associated with the web browser may be modified so that the web browser determines whether any plugins are available. In some embodiments a user may have configured settings so that any available plugin is retrieved from the respective applications automatically. The configured settings associated with the installed application may governed by the permissions associated with the installed application thereby reducing any further user interaction. In some embodiments the web browser or another process executing on the user device may determine based at least in part on an application manifest associated with the application the existence of the plugin the location of the plugin and an entry point associated with the plugin .

In some embodiments an entry indicating the location of an application manifest may be added to the plugin manager at the time of installation of the application . In some embodiments the plugin manager may dynamically determine at run time whether any application has any plugins available by looking at all application manifests on the user device . In some embodiments the web browser may request information associated with the application such as application metadata. The operating system may retrieve the application manifest associated with the application and provide the plugin manager with the application manifest.

The plugin manager may parse the application manifest to identify a path associated with the location of the plugin and obtain the plugin from the location designated by the path. In some embodiments the path may indicate a set of directories within the directory space of the application for the plugin manager to check. In some embodiments the plugin manager may check multiple directory spaces including directory spaces associated with the web browser and the application .

At block the process may facilitate presentment of the webpage to the user based at least in part on the plugin . In some embodiments the plugin may provide functionality leveraging the functionality of the application in the context of the web browser . For example the plugin may provide the web browser with the ability to present content through the webpage with the similar performance functionality of the application . The plugin may provide the user with a hybrid user experience of a website and the application . In some embodiments the plugin may be compiled JAVA code compiled C code compiled C or other standard environment for the user device .

In some embodiments the plugin may provide additional or enhanced functionality such as improved scrolling smoother performance or the like by leveraging the functionality of the application . For example the plugin may permit the web browser to access a cache of the application to avoid duplicative download of data.

If an entry does not exist in the application manifest for the plugin then at block a new entry may be created in the application manifest indicating the location of the plugin . If the entry exists then at block a determination may be made as to whether the existing path in the application manifest is accurate. If the path is accurate the process may terminate. If the path is not accurate then at block the existing entry in the application manifest may be modified to reflect a current location of the plugin . The location of the plugin may be specified with an absolute path according to the file system of the user device or the location of the plugin may specified as a relative path that is relative to the location of the application .

In some embodiments proximate to the installation of an application that includes a plugin a plugin manager may receive or obtain the application manifest associated with the application and parse the application manifest to obtain the relative path of the plugin . The plugin manager may maintain a registry or similar accounting of available plugins . In response to obtaining the relative path of the plugin the plugin manager may create an entry for the registry or similar accounting based at least in part on the relative path of the plugin . The plugin manager may later determine whether a plugin exists at runtime by checking the registry.

At block a determination may be made as to whether the plugin satisfies one or more validation rules. In some embodiments the validation rules may determine the applicability of the plugin to the webpage. The validation rules may be permissions specified by the plugin developer indicating webpages that may access the plugin . In some embodiments the validation rules may specify webpage domain that may access the plugin or may include regular expressions matching of the webpage URL. In some embodiments the validation rules may determine whether a user is logged into the webpage. In some embodiments the validation rules may be maintained and managed by a plugin manager . The plugin manager may utilize an access control list to manage access to the plugin . An access control list may be a list of permissions associated with an object e.g. plugin . The access control list may specify which users or webpages are granted access to the plugin .

In some embodiments if the plugin does satisfy the validation rules then at block the plugin manager may facilitate retrieval of the plugin from the application . If the plugin does not satisfy the validation rules then at block the plugin manager may deny access to the plugin .

For example the validation rules may determine that a permission level associated with the plugin is set to public. If the permission level associated with the plugin is set to public then the plugin may be available for any webpage to access. If the permission level is set to public then the web browser may retrieve the plugin without any further determination.

If the permission level is not set to public e.g. the permission level is set to private then a determination may be made as to whether the website to be loaded by the web browser is associated with the application . In some embodiments a plugin may only be available for use with a website that is associated with an application . For example a user may download a content streaming application e.g. Netflix application to his or her user device . If the user attempts to access the content streaming website e.g. www.netflix.com using the user device the Netflix application may have a plugin that is available for use by the web browser to enhance content streaming capabilities of the web browser . In some embodiments if the permission level associated with the plugin is set to private the plugin may only be available for use by the content streaming website e.g. www.netflix.com and may not be accessible by any other website. If the website is associated with the application then the web browser may retrieve the plugin . If the website is not associated with the application then the web browser may be denied access to the plugin .

In some embodiments the plugin may be associated with multiple applications. For example if numerous applications are associated with each other e.g. same application developer a single plugin may be available for all of the associated applications. This may require the user to download the application that is bundled with the plugin . Once the initial application is downloaded subsequent associated applications may direct the web browser to the initial application with the plugin . In some embodiments the plugin may be stored in a shared directory space that is accessible by other applications. In some embodiments the web browser may be directed to the directory space for retrieval of the plugin .

The operations and processes described and shown above may be carried out or performed in any suitable order as desired in various implementations. Additionally in certain implementations at least a portion of the operations may be carried out in parallel. Furthermore in certain implementations less than or more than the operations described may be performed.

Certain aspects of the disclosure are described above with reference to block and flow diagrams of systems methods apparatuses and or computer program products according to various implementations. It will be understood that one or more blocks of the block diagrams and flow diagrams and combinations of blocks in the block diagrams and the flow diagrams respectively can be implemented by computer executable program instructions. Likewise some blocks of the block diagrams and flow diagrams may not necessarily need to be performed in the order presented or may not necessarily need to be performed at all according to some implementations.

These computer executable program instructions may be loaded onto a special purpose computer or other particular machine a processor or other programmable data processing apparatus to produce a particular machine such that the instructions that execute on the computer processor or other programmable data processing apparatus create means for implementing one or more functions specified in the flow diagram block or blocks. These computer program instructions may also be stored in a computer readable storage media or memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable storage media produce an article of manufacture including instruction means that implement one or more functions specified in the flow diagram block or blocks. As an example certain implementations may provide for a computer program product comprising a computer readable storage medium having a computer readable program code or program instructions implemented therein said computer readable program code adapted to be executed to implement one or more functions specified in the flow diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational elements or steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions that execute on the computer or other programmable apparatus provide elements or steps for implementing the functions specified in the flow diagram block or blocks.

Accordingly blocks of the block diagrams and flow diagrams support combinations of means for performing the specified functions combinations of elements or steps for performing the specified functions and program instruction means for performing the specified functions. It will also be understood that each block of the block diagrams and flow diagrams and combinations of blocks in the block diagrams and flow diagrams can be implemented by special purpose hardware based computer systems that perform the specified functions elements or steps or combinations of special purpose hardware and computer instructions.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain implementations could include while other implementations do not include certain features elements and or operations. Thus such conditional language is not generally intended to imply that features elements and or operations are in any way required for one or more implementations or that one or more implementations necessarily include logic for deciding with or without user input or prompting whether these features elements and or operations are included or are to be performed in any particular implementation.

Many modifications and other implementations of the disclosure set forth herein will be apparent having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore it is to be understood that the disclosure is not to be limited to the specific implementations disclosed and that modifications and other implementations are intended to be included within the scope of the appended claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

