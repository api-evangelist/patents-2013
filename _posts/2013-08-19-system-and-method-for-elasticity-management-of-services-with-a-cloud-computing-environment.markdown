---

title: System and method for elasticity management of services with a cloud computing environment
abstract: A system and method for elasticity management of services for use with a cloud computing environment. In accordance with an embodiment, a cloud platform enables provisioning of enterprise software applications within a cloud environment, including packaging enterprise applications as service definition packages (SDP), and instantiating the services using service management engines (SME). In an embodiment, an elasticity manager can be used to determine the health of the services, and to take appropriate actions, including detecting events, issuing alerts and/or notifying the orchestration engine to manage the service lifecycle, e.g., to respond to an increased demand for particular services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424024&OS=09424024&RS=09424024
owner: ORACLE INTERNATIONAL CORPORATION
number: 09424024
owner_city: Redwood Shores
owner_country: US
publication_date: 20130819
---
This application claims the benefit of priority to U.S. Provisional Patent Application titled SYSTEM AND METHOD FOR ELASTICITY MANAGEMENT OF SERVICES WITH A CLOUD COMPUTING ENVIRONMENT Application No. 61 799 249 filed Mar. 15 2013 U.S. Provisional Patent Application titled SYSTEM AND METHOD FOR PROVIDING A CLOUD COMPUTING ENVIRONMENT Application No. 61 698 467 filed Sep. 7 2012 U.S. Provisional Patent Application titled SYSTEM AND METHOD FOR PROVIDING A CLOUD COMPUTING ENVIRONMENT Application No. 61 748 658 filed Jan. 3 2013 and U.S. Provisional Patent Application titled SYSTEM AND METHOD FOR PROVIDING A CLOUD COMPUTING ENVIRONMENT Application No. 61 766 819 filed Feb. 20 2013 each of which above applications are herein incorporated by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Embodiments of the invention are generally related to cloud computing and in particular to systems and methods for elasticity management of services with a cloud computing environment.

The term cloud computing is generally used to describe a computing model which enables on demand access to a shared pool of computing resources such as computer networks servers software applications and services and which allows for rapid provisioning and release of resources with minimal management effort or service provider interaction.

A cloud computing environment sometimes referred to as a cloud environment or a cloud can be implemented in a variety of different ways to best suit different requirements. For example in a public cloud environment the underlying computing infrastructure is owned by an organization that makes its cloud services available to other organizations or to the general public. In contrast a private cloud environment is generally intended solely for use by or within a single organization. A community cloud is intended to be shared by several organizations within a community while a hybrid cloud comprise two or more types of cloud e.g. private community or public that are bound together by data and application portability.

Generally a cloud computing model enables some of those responsibilities which previously may have been provided by an organization s own information technology department to instead be delivered as service layers within a cloud environment for use by consumers either within or external to the organization according to the cloud s public private nature . Depending on the particular implementation the precise definition of components or features provided by or within each cloud service layer can vary but common examples include 

The above examples are provided to illustrate some of the types of environment within which embodiments of the invention can generally be used. In accordance with various embodiments the systems and methods described herein can also be used with other types of cloud or computing environments.

Described herein is a system and method for elasticity management of services for use with a cloud computing environment. In accordance with an embodiment a cloud platform enables provisioning of enterprise software applications within a cloud environment including packaging enterprise applications as service definition packages SDP and instantiating the services using service management engines SME . In an embodiment an elasticity manager can be used to determine the health of the services and to take appropriate actions including detecting events issuing alerts and or notifying the orchestration engine to manage the service lifecycle e.g. to respond to an increased demand for particular services.

As described above a cloud computing environment cloud environment or cloud can be implemented in a variety of different ways to best suit different requirements for example public cloud private cloud community cloud or hybrid cloud. A cloud computing model enables some of those responsibilities which previously may have been provided by an organization s own information technology department to instead be delivered as service layers within a cloud environment for use by consumers either within or external to the organization according to the cloud s public private nature .

Described herein are a variety of hardware and or software components and features which can be used in delivering an infrastructure platform and or applications to support cloud computing environments. In accordance with various embodiments the system can also utilize hardware and software such as Oracle Exalogic and or Exadata machines WebLogic and or Fusion Middleware and other hardware and or software components and features to provide a cloud computing environment which is enterprise grade enables a platform for development and deploying applications provides a set of enterprise applications built on modern architecture and use cases and or provides flexible consumption choices.

In accordance with an embodiment the cloud computing environment can be implemented as a system that includes one or more conventional general purpose or specialized digital computers computing devices machines microprocessors memory and or computer readable storage media for example the computer hardware software and resources provided by Oracle Exalogic Exadata or similar machines.

As further shown in in accordance with an embodiment the cloud computing environment can include a shared enablement and managing infrastructure which is described in further detail below and which provides enablement and management tools that can be used to support the various service layers.

The example shown in is provided as an illustration of a type of cloud computing environment in which embodiments of the invention can generally be used. In accordance with various embodiments the systems and methods described herein can also be used with different and or other types of cloud or computing environments.

As described above in accordance with an embodiment the cloud computing environment can also include a shared enablement and management infrastructure. For example as shown in the shared enablement and management infrastructure can include one or more identity management data integration replication e.g. Oracle GoldenGate virtual assembly builder system provisioning tenant management and or enterprise manager components .

As further shown in in accordance with an embodiment the shared enablement and managing infrastructure can also include other components such as virus scan secure file transfer HTTP routing whitelist notifications secure backup integration gateway and or usage billing components.

The example shown in is provided as an illustration of some of the types of components which can be included in a cloud computing environment or within a shared enablement and management infrastructure. In accordance with other embodiments different and or other types or arrangements of components can be included.

In accordance with an embodiment the cloud computing environment can include a PaaS platform component PaaS platform which enables provisioning of enterprise software applications within a cloud environment.

Generally installing and configuring enterprise applications for an organization s on premise or private cloud environment can involve a considerable amount of administrative work including challenges faced by an administrator when trying to scale their environment horizontally to meet increased workload demands. In accordance with an embodiment the PaaS platform component can be easily extended to host new enterprise application suites when desired and to thereafter scale the quantity of instantiated runtimes according to increases in load.

As shown in in accordance with an embodiment the PaaS platform can include one or more service definition package SDP service management engine SME virtual assembly VA PaaS administration server service domain including one or more service apps for use by one or more cloud accounts or tenants and or cloud elasticity manager components. Each of these components together with other components and features are described in further detail below.

In accordance with an embodiment the following terms are used herein. In accordance with other embodiments different and or other terms can be used.

In accordance with an embodiment the VAB deployer can be provided by functionality components or products such as Oracle Virtual Assembly Builder OVAB . The VAB deployer e.g. the OVAB Deployer can then be used by the PaaS platform to manage those VMs that will host the servicing applications. In accordance with other embodiments other means of providing assembly builder functionality or components can be used.

In accordance with an embodiment the PaaS administration server can be implemented as a WebLogic WLS server application together with e.g. Glassfish modules embedded therein to provide cloud platform functionality. A service domain including a service app and service console can be provided for housing those enterprise applications such as the Fusion Middleware applications that will ultimately service user requests. In accordance with an embodiment the service domain components may be instantiated multiple times as part of provisioning requests.

In accordance with an embodiment provider server types that will be used by the PaaS administration server and the service domain examples of which can include LDAP database and Web Tier providers can be provided in pools that are not provisioned by the administration server since these are external services that are registered with the cloud environment. In accordance with an embodiment the PaaS platform can make use of a single load balancer provider to forward all incoming e.g. Web requests that are directed to the services. For example each service can be associated with a virtual host name that will be registered with the load balancer provider during service provisioning and the PaaS platform can include a pool of database providers which those services can utilize. When a service is later provisioned all external references to a database service are then resolved to point to one or more instances in the database provider pool.

In accordance with an embodiment SDPs can be downloaded over the Internet or can be provided by other means. Each SDP contains custom code that can be injected into the PaaS platform for use in supporting e.g. elasticity and provisioning together with an assembly e.g. an OVAB assembly that contains the topology and configuration of a set of virtual appliances that will comprise a running instance of the enterprise application service once the assembly is deployed onto a set of VMs. Each of the service types providers that the PaaS administrator interacts with can be registered with the system in this manner. Other provider service types such as external services can be generally pre installed.

When a request is made from a PaaS platform module to instantiate an assembly or a single appliance in the case of a scale up request the VAB deployer application e.g. OVAB Deployer can then interact with the VM manager e.g. OVM Manager to fulfill the request. By delegating the infrastructure virtualization responsibilities to the VM manager and the VAB deployer in this manner the PaaS platform can be abstracted from the target deployment platform.

As shown in a service domain can include multiple tenants that are configurable using the service console. Multi tenancy like virtualization is a density optimization that allows the use of less resources to support more clients and similar to virtualization should be transparent to the applications themselves. Although multi tenancy involves the use of shared resources the sharing need not be part of the logical model of the applications. These models are referred to as using multitenant and dedicated resources.

Separately applications may also share resources in a way that is part of the logical model of the applications. For example two applications may purposely access a shared database because they intend to operate on the same data. These models are referred to as using shared and unshared resources.

In accordance with an embodiment some service types may support both dedicated and multitenant uses based on their particular configuration. Other service types may support either only dedicated use or only multitenant use. Service types that are able to support multiple tenants on the same runtime can provision their runtimes in a multitenant manner during the instantiation process based on the configuration of the service type. A single instantiated service runtime that has been marked as multitenant capable will be reused for a finite number of additional service provisioning requests as determined by the service type and based on its configuration. Generally it is left to the service application to support this tenancy mode service applications that are not multitenant will only be able to support a single account for each service instance.

Once a service has been instantiated from its VM assembly end users can then interact with the system and the instantiated services in the same manner as they would interact with an on premise version of that service.

In accordance with an embodiment a configuration management component can use a configuration layer to persist account specific configuration and other files to an account store which then enables the various services and other components of the CPAS to access and manipulate account specific data.

In accordance with an embodiment an account management module also provides the ability to manage accounts for a CPAS domain. This can be exposed through the use of a command line REST or other identity management application program interface API . Each account can have multiple users. In accordance with an embodiment the users can either be managed in an identity store managed by the PaaS platform or alternatively can be provided from an external e.g. corporate LDAP or from another means of user identification.

In accordance with an embodiment users can access the cloud account manager through an administration interface . The account and configuration data can also be stored on a file system or other means of storage that is accessible from all nodes of a CPAS cluster.

In accordance with an embodiment an SDP generally has the following characteristics it can be easily created for a particular enterprise application component it can be deployed to various virtualization technologies e.g. OVM Amazon KVM or VirtualBox it can be deployed to non virtualized environments e.g. laptop mode and it includes support for pre provisioned service types or providers.

As shown in in accordance with an embodiment each SDP can include a binary a metadata e.g. the SDP name service type version vendor or virtualization support metadata such as indicating whether the SDP supports OVAB EC2 or Native and one or more plugins that enable the SDP to be used within a PaaS platform or cloud environment. In accordance with an exemplary embodiment each SDP can also include 

The above description of an exemplary embodiment of SDP contents is provided as an illustration of some of the types of information which can be included in an SDP. In accordance with other embodiments different and or other types of information can be included in an SDP.

In accordance with an embodiment for a PaaS system administrator to provide support for a particular enterprise application or other software component as a service type the system administrator can download an SDP for the particular service type and install the SDP to the PaaS platform.

In accordance with an embodiment installing an SDP will install e.g. the OVAB assembly into the OVAB repository appropriate SME plugins will be registered with the cloud platform and metric gatherers alerts and actions will be installed in the PaaS platform. After the system administrator installs the SDP a cloud account administrator can then use the cloud account administration interface to request for a service of that type. A service is the realization of a particular service type.

For example in the context of Fusion Middleware components each version of a Fusion Middleware component can have a separate SDP. When a cloud account administrator service administrator wants to upgrade to a new version of a Fusion Middleware component they can select a new version of the SDP. For example to be able to support SOA suite 11g and SOA suite 12.1.3 there can be separate SDPs for these two versions of the SOA suite product.

An SDP can also be packaged as other file formats depending on the particular implementation. As shown in In accordance with an embodiment when an SDP installed into a PaaS platform domain it is subsequently consumed by the SDP Manager which is responsible for obtaining a list of SDPs that are available to be installed the local system downloading an SDP if necessary and installing the parts of the SDP into the right places maintaining a list of those SDPs that have been installed and if necessary uninstalling an SDP by uninstalling all of its parts from the places where they are were previously installed.

In accordance with an embodiment the SDP manager supports multiple versions of a given SDP e.g. SOA and SOA in addition to patching of an existing version of an SDP. Generally when an SDP is patched as described in further detail below this will only affect the installed components related to the SDP in the PaaS infrastructure it will not affect the services of that service type.

In accordance with an embodiment the SDP manager isolates the PaaS system from the format of the SDP file. No other parts of the PaaS platform architecture need be aware of the precise SDP file format. The SDP manager can interface with other system components by installing an SME plugin to the CPAS which can then take responsibility for replicating the SME plugin to other CPAS instances in the cluster installing the VAB assembly e.g. an OVAB assembly into the VAB deployer e.g. OVAB Deployer interfacing with other tools such as Enterprise Manager to provide a customized console interface for the service if the service provides one and installing configuration data for the service into the CPAS.

Subsequently during realization of a service the service can be realized as an instance of those service types defined by the SDP and installed as assemblies in the VAB repository.

At step one or more service definition packages are provided for use with the platform component wherein each service definition package includes an application binary component and a metadata.

At step the one or more service definition packages are parsed to determine service characteristics and requirements for a particular enterprise application component that determine how that particular enterprise application component is deliverable as a service type within the platform component.

At step corresponding enterprise application components are provisioned as service types into the platform component for use within the cloud environment.

Generally described in accordance with an embodiment a Service Management Engine SME provides a generic means to plug any service type into the system. For example an SME takes care of all of the service specific provisioning lifecycle management and monitoring support for a service type or provider type. The orchestration engine OE as described in further detail below being service agnostic depends completely on the SME to handle all service related actions.

In accordance with an embodiment within a PaaS platform domain there can be several different classes of SMEs. For example provider SMEs can be provided to handle different providers that are supported in the PaaS platform domain. Examples of the types of providers that can be supported include Database Web Tier and Identity Management providers. In accordance with an embodiment a provider SME is configured to point to an existing external service within the enterprise by creating a provider type from the provider SDP. The provider SME is also responsible for all actions such as schema management that may be required as part of association and dissociation with the service being created. Provider SMEs are generally not configured to handle provisioning unprovisioning or management of the external service pointed to by the provider type although provider SMEs could be configured to do so.

In accordance with an embodiment service SMEs can be added to the PaaS platform domain using an SDP. For example a service SME can be dynamically incorporated into the PaaS platform domain by installing an appropriate SDP. In accordance with an embodiment the SDP manager handles the installation registration of service SMEs bundled in SDPs with the PaaS platform domain. The set of registered service SMEs then become the service types that are available to cloud account administrators to create services.

In accordance with an embodiment each service type supported in the PaaS platform domain maps to a specific service SME. A service SME handles all service related activities such as spanning creation monitoring management patching upgrade and deletion for that service. In accordance with an embodiment the contract that is implemented by an SME is referred to as a Service Management Interface SMI which defines the support for monitoring patching and upgrade of the service.

In accordance with an embodiment the orchestration engine interacts with the provider and service SMEs to create a service in a PaaS platform domain. The orchestration engine choreographs the creation of service however all service level activities are handled by SMEs. In the example shown in when OVAB is used as a virtualization provider all interaction with the OVAB Deployer is handled by a Virtualization API e.g. an OVAB client API . In accordance with an embodiment the orchestration process can then proceed as follows 

The above description of an orchestration process using OVAB Deployer as a means of deploying assemblies a SOA service and SOA SME as an example SME and association with database and load balancer providers is provided to illustrate an exemplary orchestration process. In accordance with other embodiments different and or other types of e.g. VAB deployer SME and providers can be used.

At step one or more service management engines are provided in communication with an orchestration engine which are used to provision services as service types including one or more provisioning lifecycle management and monitoring of the service types.

At step particular service types are determined to be provisioned for use within the cloud environment.

At step service management engines are used to parse a configuration of the platform component itself and or a service definition package and to provision services as one or more different service types according to the configuration of the platform component and or the contents of the service definition package.

At step corresponding service management engines are configured within the platform component to support those particular service types.

In accordance with an embodiment the orchestration engine OE enables service creation provider dependency resolution association of services and providers and generally the end to end life cycle management of the services in the PaaS platform. In particular the orchestration engine coordinates all of the interactions among various components in the PaaS platform domain while creating or managing a service enables the pluggability of SMEs for various service types in the platform and aids in provisioning the service by selecting appropriate SMEs from among those available in the platform. The orchestration engine also helps in managing the configuration of providers such as DB Providers IDM Providers and LB Providers.

In accordance with an embodiment the orchestration engine as part of creating a service ensures that all of the dependencies of the service such as its provider dependencies are satisfied by selecting appropriate providers provider SMEs and coordinating the association between the providers and service. The act of association can be performed during pre provisioning and or post provisioning phases. The act of installing and configuring an SME can be performed by the SDP manager as part of registering a pre packaged service type or a customized service type. The orchestration engine helps expose the deployment plan configuration which can be configured by the cloud account administrator through the console during the act of provisioning the service.

In accordance with an embodiment the orchestration engine recognizes a set of phases and tasks that match the requirements of the PaaS platform for its service creation action and other life cycle related activities. The orchestration engine is also designed to be extensible and to allow the configuration of phases and tasks in all actions that are managed by the orchestration engine.

Provisioning and managing a service in a virtualized environment is often a time consuming action and generally needs to be performed in an asynchronous fashion. The system must also be able to handle any transient or retryable failures and continue with the provisioning activity. In accordance with an embodiment the administrator can query or monitor any of these asynchronous activities on demand. A unique identifier can also be provided for actions such as provision unprovision etc. in order to determine display and record the progress status of all initiated actions.

In accordance with an embodiment the orchestration engine also helps to retry a task or rollback an action based on the resiliency of the task where the task or phase can have markers annotations to indicate the resiliency level and any compensating act.

In accordance with an embodiment the orchestration engine acts as a gateway for all service management monitoring scaling actions that could be initiated by other containers in the PaaS platform domain or by the administrator. For example the elasticity engine as described in further detail below communicates with the orchestration engine to manage monitor and scale services based on a service s QoS configuration. The orchestration engine can also play a role in service maintenance actions such as patching and upgrade which can be performed in an active system in a rolling fashion that helps avoid down time of the service. Such actions may require disassociating or re associating services in a phased manner.

In accordance with an embodiment services created by a cloud account administrator are visible and accessible only to that particular cloud account tenant and are isolated from other cloud accounts in the PaaS platform domain. In accordance with an embodiment such isolation can be provided by the orchestration engine with the help of a cloud account management module. Storing and managing service configuration status and accessibility are achieved by having separate cloud account data stores. Both multitenant and dedicated tenancy models can be supported within a platform domain. The orchestration engine based on the preference provided in the service metadata selects an appropriate provider type that supports the required tenancy level. Similarly multitenant and dedicated tenancy models can be supported for services based on multitenant service runtimes or on a dedicated service runtime per service.

In accordance with an embodiment SMEs can be registered with the orchestration engine such that multiple SMEs for a given family of service e.g. database can be present in the system. It is also possible to configure a default SME for a particular service family on a per cloud account basis.

As shown in in accordance with an embodiment the virtualization features for CPAS are primarily built around the VAB deployer e.g. OVAB Deployer with VAB assemblies e.g. OVAB Assemblies being the unit of provisioning. In accordance with other embodiments the CPAS can support alternative virtualization solutions.

In accordance with an embodiment the orchestration and service management components can interface with the virtualization layer through a virtualization service plugin and a virtualization API that abstracts the basic virtualization operations supported. In accordance with an embodiment that uses OVAB this API can be an OVAB Deployer interface which allows OVAB Deployer to perform the tasks of assembly creation. Products such as OVAB support virtualization providers such as OVM in addition to computer hardware machines such as ExaLogic. Products such as OVAB Deployer also provide an SPI that allows the development of plugins to support additional virtualization technologies such as EC2. In accordance with an embodiment the orchestration engine SME can upload and deploys assemblies through the OVAB Virtualization API in addition to managing their lifecycle.

To support developer demo scenarios in accordance with an embodiment the system can also implement a limited solution that can run on native OS processes i.e. with no virtualization . This capability can be implemented by providing a physical plugin that implements a portion of the Virtual Assembly Service API.

At step one or more service definition packages are received for use with the platform component wherein each service definition package defines for a particular enterprise application component how that particular enterprise application component is deliverable as a service type within the platform component.

At step the process determines within the service definition package a virtual assembly that defines a topology and a configuration for a set of virtual appliances.

At step particular service types are determined to be provisioned for use within the cloud environment and corresponding service management engines configured within the platform component to support those particular service types.

At step the process communicates with a plurality of service management engines to control the flow of service creation provider dependency resolution association of services and providers and life cycle management of services within the cloud environment.

As shown in in accordance with an embodiment the cloud elasticity manager including an environment manager can use metric gatherers and alerts to determine the health of services running in an environment. Once the state of the environment is determined the cloud elasticity manager can take appropriate actions . In accordance with an embodiment the metric gatherers alerts and actions can be provides as HK2 contracts such that the set of metric gatherers alerts and actions are extensible.

In accordance with an embodiment a metric gatherer is an object that collects and maintains metric data about a service periodically. For example a metric gatherer may periodically collect heap statistics such as used memory and committed memory. Another metric gatherer can periodically gather metrics about CPU usage. Generally the metric gatherers provide information about the state of some resource usage. Metrics can also be provided by external monitoring tools and need not be metric gatherer objects. In accordance with an embodiment the cloud elasticity manager allows any Java bean component to provide metrics data for use in generating alerts.

In accordance with an embodiment an alert object periodically checks the health of a service in an environment by analyzing metric data gathered by one or more metric gatherers over a period of time. For example an alert may examine the CPU usage for the past 10 minutes to determine if the environment is under stress. After the alert determines the state of the service or environment it can execute some action such as sending an email logging a message sending an event or scaling up or scaling down a service. In accordance with an embodiment an alert can take multiple actions.

In accordance with an embodiment the cloud elasticity manager can include a unified Expression Language EL engine that allows alerts to be specified as EL expressions. EL expressions can also use metric gatherers and alerts in their expressions. In accordance with an embodiment the cloud elasticity manager also allows external EL Resolver objects to be registered which allows other types of objects such as MBeans or POJOs to be used in an expression.

Metric gatherers alerts and actions typically require some configuration data. For example a metric gatherer may require some configuration data that specifies the duration of time metric data should be kept. Similarly alerts may require some configuration data that specifies the threshold value. In accordance with an embodiment the cloud elasticity manager relies on the cloud account manager to persist such configuration data. Again configuration data can be based on HK2 thereby allowing easy extensibility.

At step the orchestration engine determines particular service types to be provisioned for use within the cloud environment and configures corresponding service management engines within the platform component to support those particular service types.

At step the elasticity manager determines health of services within the platform component and takes appropriate actions including detecting events issuing alerts and or notifying the orchestration engine to manage the service lifecycle.

At step one or more metric gatherer object periodically collects and maintains metric data about a service resource usage while one or more alert object periodically checks the health of a service in an environment by analyzing metric data gathered by one or more metric gatherers over a period of time.

At step the elasticity manager is configured to manage the service lifecycle to respond to requirements including increased demand for particular services.

In accordance with an embodiment an update is defined to be a change which has to be made to the system. Examples of updates include an application of a security patch upgrade of a component or changing of a configuration value. Depending on the type of update some updates may require a downtime while other updates may not require a downtime. The system can take both of these situations into account.

In accordance with an embodiment updates can include hard updates an update which requires a service downtime e.g. patches to middleware operating system OS updates etc. or a service reboot and soft updates an update which does not require system downtime e.g. some configuration changes .

Soft updates avoid a downtime but at the expense of service stability. To this extent it is important that the system administrator categorizes updates properly. It is also important that all services are updated to keep the environment homogeneous and that maintenance windows are restricted to ensure that all of the services are updated properly.

In accordance with an embodiment a maintenance window is defined as a time frame when updates will be applied to a particular service. A different maintenance window can be different for different services. Generally one or more of the following actions will happen during the maintenance window depending on the update type lockout the service typically only for hard update backup the service apply and or all of OS updates perform system configuration changes apply patches for an enterprise application e.g. Fusion Middleware components perform service configuration changes e.g. tune threads IO timeouts etc. perform updates to other non standard components reboot service VMs perform health check and or open up a service for public access.

For a soft update not all of the above steps may be necessary. However soft updates are still preferably applied when the service access is at a minimum e.g. during the night . Although some updates may not require a restart or reboot of service runtimes it is generally recommended that the VMs hosting the service are rebooted to provide a clean state.

In accordance with an embodiment an upgrade of a service is similar to a hard update except that one or more of the components will be undergoing a major change which may involve one or more of the following installation of a software component with a different version minor version upgrade of a software component or configuration migration.

In accordance with an embodiment a service may be upgraded if the components being upgraded provide the necessary tooling and the ability to automate the migration scenario.

In accordance with an embodiment a repository is assumed to be available as a local or mounted file system on the service runtimes. A repository can be used to hold all of the components patches configuration files scripts etc. which will be required during the maintenance window. For example the repository can hold artifacts for different versions of service e.g. 

As shown in in accordance with an embodiment prior to a maintenance window the repository is updated with the necessary components e.g. patches Puppet manifests or shell scripts. Updates can be driven using a configuration tool such as Puppet or a tool or component that provides similar functionality. In accordance with an embodiment if a service does not have Puppet or the appropriate configuration tool installed the patching infrastructure will install configuration tool and will apply manifests made available in the repository.

A service administrator may also choose a different automation framework for handling updates. All updates should be transactional and should be capable of being rolled back in case of failures.

In accordance with an embodiment the system administrator then defines a maintenance window for use by the service update logic . In accordance with an embodiment the cloud administration console can be used to define the maintenance window. The system administrator then configures information such as the service name and version of SDP for the services to be patched whether the maintenance window is a hard or soft window the length of the maintenance window typically 60 mins for hard updates the time frame for scheduling the updates typically a week for hard updates and any other parameters which qualify the appropriate time for updates.

In accordance with an embodiment the service update logic will then assign a default time slot for each service. Email notifications can be sent to service administrators in case of hard updates notifying them of a system downtime. In accordance with an embodiment a service administrator has an option to choose amongst three time slots when his her service will incur a downtime and update.

At update time the update is requested by the service update logic and the information in the repository is used to patch or update a service from its original configuration to a modified configuration .

At step one or more service definition packages are provided for use with the platform component wherein each service definition package defines for a particular enterprise application component how that particular enterprise application component is deliverable as a service type within the platform component.

At step a service update logic is provided for modifying the one or more service definition packages within a maintenance window according to one or more patches or updates associated with the service definition packages.

At step a repository is provided as one of a local or a mounted file system at service runtime and that includes patch configuration file script and or other components which are used by the service update logic during the maintenance window to modify the service definition packages.

At step a service s characteristics and or requirements are modified or updated dynamically by reconfiguring the platform component itself and or by mounting a disk volume that corresponds to the service s service definition packages and modifying its file system contents directly.

The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer computing device machine or microprocessor including one or more processors memory and or computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art.

In some embodiments the present invention includes a computer program product which is a non transitory storage medium or computer readable medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs microdrive and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.

