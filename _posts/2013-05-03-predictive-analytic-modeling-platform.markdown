---

title: Predictive analytic modeling platform
abstract: Methods, systems, and apparatus, including computer programs encoded on one or more computer storage devices, for training a predictive model. In one aspect, a method includes receiving over a network predictive modeling training data from a client computing system. The training data and multiple training functions obtained from a repository of training functions are used to train multiple predictive models. A score is generated for each of the trained predictive models, where each score represents an estimation of the effectiveness of the respective trained predictive model. A first trained predictive model is selected from among the trained predictive models based on the generated scores. Access to the first trained predictive model is provided to the client computing system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08706659&OS=08706659&RS=08706659
owner: Google Inc.
number: 08706659
owner_city: Mountain View
owner_country: US
publication_date: 20130503
---
This application is a continuation application of and claims priority to pending U.S. patent application Ser. No. 12 780 751 filed on May 14 2010 entitled Predictive Analytic Modeling Platform . The disclosure of the foregoing application is incorporated herein by reference in its entirety.

Predictive analytics generally refers to techniques for extracting information from data to build a model that can predict an output from a given input. Predicting an output can include predicting future trends or behavior patterns or performing sentiment analysis to name a few examples. Various types of predictive models can be used to analyze data and generate predictive outputs. Typically a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output respectively. The amount of training data that may be required to train a predictive model can be large e.g. in the order of gigabytes or terabytes. The number of different types of predictive models available is extensive and different models behave differently depending on the type of input data. Additionally a particular type of predictive model can be made to behave differently for example by adjusting the hyper parameters or via feature induction or selection.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving over a network predictive modeling training data from a client computing system. The training data and multiple training functions obtained from a repository of training functions are used to train multiple predictive models. A score is generated for each of the trained predictive models where each score represents an estimation of the effectiveness of the respective trained predictive model. A first trained predictive model is selected from among the trained predictive models based on the generated scores. Access to the first trained predictive model is provided to the client computing system. Other embodiments of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

These and other embodiments can each optionally include one or more of the following features. Using the training data to train each of the predictive models and generating a score for each of the trained predictive models can include partitioning the training data into k partitions performing k fold cross validation and generating a cross validation score for each of the trained predictive models that indicates the accuracy of the trained predictive model where k is an integer greater than 1. Providing access to the first trained predictive model can include providing access to the first trained predictive model trained with all k partitions of the training data.

Input data data identifying the first trained predictive model and a request for a predictive output can be received. In response the predictive output can be generated using the first predictive model and the input data. The multiple training functions can include two or more training functions for training predictive models of a same type where each predictive model is trained with a different training function. The multiple training functions can include two or more training functions for training predictive models of a same type where each predictive model is trained with a different hyper parameter configuration.

Providing access to the first trained predictive model can include providing a universal resource locator URL to the client computing system that identifies the first trained predictive model as an addressable resource. A training request can be received over the network over an HTTP connection at a universal resource locator URL address.

Generating a score for each of the trained predictive models can include generating an estimate of resource usage costs for each of the trained predictive models and generating the score based at least in part on the estimates. The training data includes at least a gigabyte of training data. In another example the training data includes at least a terabyte of training data. The multiple trained predictive models can include without limitation a Na ve Bayes model a Perceptron model a Support Vector Machine model a linear regression model a logistic regression model and or a k nearest neighbor model.

In general another aspect of the subject matter described in this specification can be embodied in methods that include the actions of uploading predictive modeling training data over a network to a server system. An address to access a trained predictive model trained using the training data and selected from multiple predictive models based on an estimation of an effectiveness of each of the trained predictive models in modeling the training data is received from the server system. Input data and a request for a predictive output is sent to the address to access the trained predictive model. In response to the request the predictive output generated by the trained predictive model based on the input data is received. Other embodiments of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

In general another aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving over a network multiple sets of predictive modeling training data from a first set of multiple client computing systems. For each set of predictive modeling training data the training data and multiple training functions obtained from the repository are used to train multiple predictive models. A score is generated for each of the trained predictive models where each score represents an estimation of the effectiveness of the respective trained predictive model. A trained predictive model is selected from among the multiple trained predictive models based on the generated scores. Multiple trained predictive models are thereby generated. Access to the multiple trained predictive models is provided to a second set of multiple client computing systems. Other embodiments of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

These and other embodiments can each optionally include the following feature. Data can be received from a first client computing system included in the first set of multiple client computing systems indicating that permission is granted to a second client computing system included in the second set of multiple client computing systems for the second client computing system to access the trained predictive model that was trained using training data received from the first client computing system.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. A predictive model can be selected for a client computing system based on an exploration of multiple different predictive models. An optimal type of predictive model for the particular type of input data that will be supplied by the client computing system can thereby be selected. The training selection and prediction operations can occur remote from the client computing system i.e. over a network or in the cloud and therefore can be performed in a way that avoids expending client side resources both computing resources and human resources. Large volumes of training data can be used to train a predictive model for example in the order of gigabytes or terabytes. Access to the trained predictive model can be integrated into a client s application for example a web based application. Requests to the trained predictive model for a predictive output can be automated within the client s web based application. A predictive modeling server system that performs the training selection and prediction operations remote to the client computing system can from time to time or continually update the server system and improve the training selection and or prediction operations. For example new training functions hyper parameter searching feature induction or selection procedures can be applied to existing training data sets to provide improved models for existing training data. The client computing system can thereby be provided with access to an improved trained predictive model without any additional client side expenditure of resources. Additional sources of knowledge e.g. similar training data can be integrated into training without additional client side support.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

A client computing system may require a trained predictive model that can receive input data from the client computing system and generate a predictive output. To train a particular predictive model can require a significant volume of training data for example gigabytes. The client computing system may be unable to efficiently manage such a large volume of data. Further selecting and tuning an effective predictive model from the variety of available types of models can require skill and expertise that an operator of the client computing system may not possess.

The system described here allows training data to be uploaded from the client computing system to the predictive modeling server system over the network . The server system front end can receive store and manage large volumes of data using the data center . One or more computers in the data center can run software that uses the training data to estimate the effectiveness of multiple types of predictive models and make a selection of a trained predictive model to be used for data received from the particular client computing system . The selected model can be trained and the trained model made available to the client computing system . The client computing system can transmit prediction requests over the network. The selected trained model executing in the data center receives the prediction request input data and request for a predictive output and generates the predictive output . The predictive output can be provided to the client computing system over the network .

Advantageously when handling large volumes of training data and or input data the processes can be scaled across multiple computers at the data center . The predictive modeling server system can automatically provision and allocate the required resources using one or more computers as required. An operator of the client computing system is not required to have any special skill or knowledge about predictive models. The training and selection of a predictive model can occur in the cloud i.e. over the network thereby lessening the burden on the client computing system s processor capabilities and data storage and also reducing the required client side human resources.

The term client computing system is used in this description to refer to one or more computers which may be at one or more physical locations that are being served by the predictive modeling server system. The client computing system can include one or more computers that provide training data to the predictive modeling server system in order to receive access to a trained predictive model. However the client computing system can also include clients of the client . For example if the client computing system provides a service such as a web based application an end user client computer i.e. a computer used by a customer of the client can send a request for a predictive output to the predictive modeling server system directly in which instance the end user client computer is included in the description of the client computing system.

The data center is capable of handling large volumes of data e.g. on the scale of terabytes or larger and as such can serve multiple client computing systems. For illustrative purposes three client computing systems are shown however scores of client computing systems can be served by such a predictive modeling server system .

From the perspective of the client computing system training and use of a predictive model is relatively simple. The training and selection of the predictive model tuning of the hyper parameters and features used by the model to be described below and execution of the trained predictive model to generate predictive outputs is all done remote to the client computing system without expending client computing system resources. The amount of training data provided can be relatively large e.g. gigabytes or more which is often an unwieldy volume of data for a client.

The predictive modeling server system will now be described in more detail with reference to the flowchart shown in . is a flowchart showing an example process for serving a client computing system using the predictive analytic platform. Training data is received from the client computing system Step . For example the client computing system can upload the training data to the predictive modeling server system over the network . The training data can be in any convenient form that is understood by the modeling server system to define a set of records where each record includes an input and a corresponding desired output. By way of example the training data can be provided using a comma separated value format or a sparse vector format. In another example the client computing system can specify a protocol buffer definition and upload training data that complies with the specified definition.

For illustrative purposes the process and system will be described using an example that is typical of how predictive analytics are often used. In this example the client computing system provides a web based online shopping service. The training data includes multiple records where each record provides the online shopping transaction history for a particular customer. The record for a customer includes the dates the customer made a purchase and identifies the item or items purchased on each date. The client computing system is interested in predicting a next purchase of a customer based on the customer s online shopping transaction history.

Various techniques can be used to upload a training request and the training data from the client computing system to the predictive modeling server system . In some implementations the training data is uploaded using an HTTP web service. The client computing system can access storage objects using a RESTful API to upload and to store their training data on the predictive modeling server system . In other implementations the training data is uploaded using a hosted execution platform e.g. AppEngine available from Google Inc. of Mountain View Calif. The training data can be large e.g. many gigabytes. The predictive modeling server system can include a data store e.g. the training data store operable to store the received training data.

The predictive modeling server system includes a repository of training functions for various predictive models which in the example shown are included in the predictive model store . Some examples of types of predictive models include without limitation regression models e.g. linear regression logistic regression classification and regression tree models multivariate adaptive regression spline models and other machine learning models e.g. Na ve Bayes k nearest neighbors Support Vector Machines Perceptron . Multiple predictive models which can be all or a subset of the available predictive models are trained using some or all of the training data Step . In the example predictive modeling server system a model training module is operable to train the multiple predictive models.

A training function is applied to the training data to generate a set of parameters. These parameters form the trained predictive model. For example to train or estimate a Na ve Bayes model the method of maximum likelihood can be used. A given type of predictive model can have more than one training function. For example if the type of predictive model is a linear regression model more than one different training function for a linear regression model can be used with the same training data to generate more than one trained predictive model.

For a given training function multiple different hyper parameter configurations can be applied to the training function again generating multiple different trained predictive models. Therefore in the present example where the type of predictive model is a linear regression model changes to an L1 penalty generate different sets of parameters. Additionally a predictive model can be trained with different features again generating different trained models. The selection of features i.e. feature induction can occur during multiple iterations of computing the training function over the training data. For example feature conjunction can be estimated in a forward stepwise fashion in a parallel distributed way enabled by the computing capacity of the predictive modeling server system i.e. the data center.

Considering the many different types of predictive models that are available and then that each type of predictive model may have multiple training functions and that multiple hyper parameter configurations and selected features may be used for each of the multiple training functions there are many different trained predictive models that can be generated. Depending on the nature of the input data to be used by the trained predictive model to predict an output different trained predictive models perform differently. That is some can be more effective than others.

The effectiveness of each of the trained predictive models is estimated Step . For example a model selection module is operable to estimate the effectiveness of each trained predictive model. In some implementations cross validation is used to estimate the effectiveness of each trained predictive model. In a particular example a 10 fold cross validation technique is used. Cross validation is a technique where the training data is partitioned into sub samples. A number of the sub samples are used to train an untrained predictive model and a number of the sub samples usually one is used to test the trained predictive model. Multiple rounds of cross validation can be performed using different sub samples for the training sample and for the test sample. K fold cross validation refers to portioning the training data into K sub samples. One of the sub samples is retained as the test sample and the remaining K 1 sub samples are used as the training sample. K rounds of cross validation are performed using a different one of the sub samples as the test sample for each round. The results from the K rounds can then be averaged or otherwise combined to produce a cross validation score. 10 fold cross validation is commonly used.

In some implementations the effectiveness of each trained predictive model is estimated by performing cross validation to generate a cross validation score that is indicative of the accuracy of the trained predictive model i.e. the number of exact matches of output data predicted by the trained model when compared to the output data included in the test sub sample. In other implementations one or more different metrics can be used to estimate the effectiveness of the trained model. For example cross validation results can be used to indicate whether the trained predictive model generated more false positive results than true positives and ignores any false negatives.

In other implementations techniques other than or in addition to cross validation can be used to estimate the effectiveness. In one example the resource usage costs for using the trained model can be estimated and can be used as a factor to estimate the effectiveness of the trained model.

In some implementations the predictive modeling server system operates independently from the client computing system and selects and provides the trained model as a specialized service. The expenditure of both computing resources and human resources and expertise to select the untrained predictive models to include in the predictive model store the training functions to use for the various types of available predictive models the hyper parameter configurations to apply to the training functions and the feature inductors all occurs server side. Once these selections have been completed the training and model selection can occur in an automated fashion with little or no human intervention unless changes to the server system are desired. The client computing system thereby benefits from access to a trained model that otherwise might not have been available to the client computing system due to limitations on client side resources.

Referring again to each trained model is assigned a score that represents the effectiveness of the trained model. As discussed above the criteria used to estimate effectiveness can vary. In the example implementation described the criterion is the accuracy of the trained model and is estimated using a cross validation score. Based on the scores a trained predictive model is selected Step . In some implementations the trained models are ranked based on the value of their respective scores and the top ranking trained model is chosen as the selected predictive model. Although the selected predictive model was trained during the evaluation stage described above training at that stage may have involved only a sample of the training data or not all of the training data at one time. For example if k fold cross validation was used to estimate the effectiveness of the trained model then the model was not trained with all of the training data at one time but rather only K 1 partitions of the training data. Accordingly if necessary the selected predictive model is fully trained using the training data e.g. all K partitions Step for example by the model training module . A trained model i.e. fully trained model is thereby generated for use in generating predictive output e.g. trained model . The trained model can be stored by the predictive modeling server system . That is the trained model can reside and execute in a data center that is remote from the client computing system .

Access to the trained model is provided to the client computing system Step rather than the trained model itself. In some implementations providing access to the trained model includes providing an address to the client computing system that the system can use to access the trained model for example the address can be a URL Universal Resource Locator . If the client computing system desires to access the trained model to receive a predictive output the client computing system can transmit to the URL a request that includes the input data. The predictive modeling server system receives the input data and prediction request from the client computing system Step . In response the input data is input to the trained model and a predictive output generated by the trained model Step . The predictive output is provided to the client computing system Step .

In some implementations where the client computing system is provided with a URL to access the trained model input data and a request to the URL can be embedded in an HTML document e.g. a webpage. In one example JavaScript can be used to include the request to the URL in the HTML document. Referring again to the illustrative example above when a customer is browsing on the client computing system s web based online shopping service a call to the URL can be embedded in a webpage that is provided to the customer. The input data can be the particular customer s online shopping transaction history. Code included in the webpage can retrieve the input data for the customer which input data can be packaged into a request that is sent in a request to the URL for a predictive output. In response to the request the input data is input to the trained model and a predictive output is generated. The predictive output is provided directly to the customer s computer or can be returned to the client computer system which can then forward the output to the customer s computer. The client computing system can use and or present the predictive output result as desired by the client. In this particular example the predictive output is a prediction of the type of product the customer is most likely to be interested in purchasing. If the predictive output is blender then by way of example an HTML document executing on the customer s computer may include code that in response to receiving the predictive output cause to display on the customer s computer one or more images and or descriptions of blenders available for sale on the client computing system s online shopping service. This integration is simple for the client computing system because the interaction with the predictive modeling server system can use a standard HTTP protocol e.g. a POST request to a URL that returns a JSON encoded output.

The customer using the customer computer can be unaware of these operations which occur in the background without necessarily requiring any interaction from the customer. Advantageously the request to the trained model can seamlessly be incorporated into the client computer system s web based application in this example an online shopping service. A predictive output can be generated for and received at the client computing system which in this example includes the customer s computer without expending client computing system resources to generate the output.

In other implementations the client computing system can use code provided by the client computing system or otherwise that is configured to make a request to the predictive modeling server system to generate a predictive output using the trained model . By way of example the code can be a command line program e.g. using cURL or a program written in a compiled language e.g. C C Java or an interpreted language e.g. Python . In some implementations the trained model can be made accessible to the client computing system by an API through a hosted execution platform e.g. AppEngine.

In the implementations described above the trained model is hosted by the predictive modeling server system and can reside and execute on a computer at a location remote to the client computing system . However in some implementations once a predictive model has been selected and trained the client may desire to download the trained model to the client computing system . The client may wish to generate and deliver predictive outputs on the client s own computing system. Accordingly in some implementations the trained model is provided to a client computing system and can be used locally by the client.

Components of the client computing system and or the predictive modeling system e.g. the model training module model selection module and trained model can be realized by instructions that upon execution cause one or more computers to carry out the operations described above. Such instructions can comprise for example interpreted instructions such as script instructions e.g. JavaScript or ECMAScript instructions or executable code or other instructions stored in a computer readable medium. The components of the client computing system and or the predictive modeling system can be implemented in multiple computers distributed over a network such as a server farm in one or more locations or can be implemented in a single computer device.

As discussed above the predictive modeling server system can be implemented in the cloud . In some implementations the predictive modeling server system provides a web based service. A web page at a URL provided by the predictive modeling server system can be accessed by the client computing system . An operator of the client computing system can follow instructions displayed on the web page to upload training data to the cloud i.e. to the predictive modeling server system . Once completed the operator can enter an input to initiate the training and selecting operations to be performed in the cloud i.e. by the predictive modeling server system or these operations can be automatically initiated in response to the training data having been uploaded.

The operator of the client computing system can access the one or more trained models that are available to the client computing system from the web page. For example if more than one sets of training data had been uploaded by the client computing system then more than one trained predictive models may be available to the particular client computing system. Representations of the available predictive models can be displayed for example by names listed in a drop down menu or by icons displayed on the web page although other representations can be used. The operator can select one of the available predictive models e.g. by clicking on the name or icon. In response a second web page e.g. a form can be displayed that prompts the operator to upload input data that can be used by the selected trained model to provide predictive output data in some implementations the form can be part of the first web page described above . For example an input field can be provided and the operator can enter the input data into the field. The operator may also be able to select and upload a file or files from the client computing system to the predictive modeling server system using the form where the file or files contain the input data. In response the selected predicted model can generate predictive output based on the input data provided and provide the predictive output to the client computing system either on the same web page or a different web page. The predictive output can be provided by displaying the output providing an output file or otherwise.

In some implementations the client computing system can grant permission to one or more other client computing systems to access one or more of the available trained predictive models of the client computing system which is described in more detail below. The web page used by the operator of the client computing system to access the one or more available trained predictive models can be used either directly or indirectly as a link to another web page by the operator to enter information identifying the one or more other client computing systems being granted access and possibly specifying limits on their accessibility. Conversely if the client computing system has been granted access by a third party i.e. a different client computing system to access one or more of the third party s trained models the operator of the client computing system can access the third party s trained models using the web page in the same manner as accessing the client computing system s own trained models e.g. by selecting from a drop down menu or clicking an icon .

In some implementations as is described in more detail below the operator of the client computing system can use a web page provided by the predictive modeling server system to browse a collection trained models that are available for use by the client computing system that were trained using training data provided by a third party i.e. by a different client computing system . The third party that provided the training data would have given permission for the third party s trained model to be included in the collection of trained models that can be browsed. The operator of the client computing system can select to license for use i.e. rent a trained model from the collection typically in exchange for a fee.

The predictive modeling server system can serve multiple client computing systems in addition to the client computing system shown as has been described above. The predictive modeling server system can therefore accumulate multiple trained models in addition to the trained model . In some implementations the predictive modeling server system can provide a marketplace for the trained models as mentioned above. That is the trained model may be used to generate a predictive output from input data that is received from a different client computing system than the client computing system that provided the training data to train the model. By way of illustrative example consider a scenario where the client computing system provides training data that includes records describing credit card holders payment histories. The predictive modeling server system trains multiple models and selects a trained model using the training data. The client computing system uses the trained model to provide input data that includes the credit card payment history of a credit card holder and a request for an output that predicts whether the credit card holder will default on a next payment. In this example the client computing system may be owned and operated by a credit card company or a crediting rating company. A different credit card company or crediting rating company may also have a need for the same type of predictive output from the same type of input data i.e. the credit card payment history of a credit card holder.

The trained model can be offered for use by other client computing systems in exchange for a fee. In one example a licensing fee is charged on a pay per use basis. In another example a flat rate licensing fee is charged for unlimited use for a specified time period. Other fee arrangements are possible and these are but a couple of examples. Before a trained model is offered for use by other client computing systems permission can be sought and granted by the owner of the client computing system that provided the training data.

The trained model can be maintained and executed by the predictive modeling server system and access to the trained model can be provided to the one or more additional client computing systems referred to as the licensee client computing systems in the same manner as access is provided to the client computing system . The licensee client computing systems provide input data and a request for a predictive output to the trained model and receive the predictive output in response. The licensee client computing systems therefore do not have access to the training data that was provided by the client computing system and therefore any private information that was used for training remains private.

Security access control to limit access to the licensees of the trained model accounting and collection of fee can be implemented using any convenient conventional technique of electronic commerce. In some implementations a catalogue of available trained models is provided which includes descriptions of the type of input data received by each model and the type of predictive output generated in response. The operator of a licensee client computing system can decide which trained model to use. In other implementations the licensee client computing system simply provides the input data and request for a predictive output of a certain type to the predictive modeling system and a trained model is automatically selected and used to generate the predictive output.

Fees generated by licensing the trained model can be paid to the owner of the predictive modeling server system the owner of the client computing system or otherwise apportioned between the two.

In other implementations a third party can operate between the predictive modeling server system and the licensee client computing systems in exchange for some or all of the fees generated by licensing the trained model. For example the third party can coordinate receiving requests for predictive outputs and the corresponding input data and providing the predictive outputs in response. The third party may market the various trained models that are available and handle the ensuing transactions when licensee client computing systems pay to use the trained models.

In some implementations a licensee client computing system provides input data and request for a predictive output and the input data is input into multiple trained models. The predictive outputs from the multiple trained models can be combined e.g. averaged to generate the predictive output provided to the licensee client computing system. A fee paid by the licensee client computing system can be apportioned to more than one party based on the particular trained models that were used.

Various implementations of the systems and techniques described here may be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and may be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here may be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well for example feedback provided to the user may be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user may be received in any form including acoustic speech or tactile input.

The systems and techniques described here may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system may be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or of what may be claimed but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

A number of embodiments have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other embodiments are within the scope of the following claims.

