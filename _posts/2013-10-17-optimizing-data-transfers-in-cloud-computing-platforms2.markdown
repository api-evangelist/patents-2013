---

title: Optimizing data transfers in cloud computing platforms
abstract: In various embodiments, methods and systems for optimizing data transfer are provided. Data transfer optimization is accomplished by a data transfer optimization server. A data transfer session is initiated. The initiation of the data transfer session comprises analyzing transfer parameters for one or more data-source devices. An optimum number of concurrent network calls is calculated for the data transfer session. The calculation is based on the data transfer parameters. At least a portion of the optimum number of concurrent network calls is allocated for executing the data transfer session. The transfer parameters are monitored for changes. The optimum number of concurrent network calls is updated for the data transfer session based on a triggering event associated with the data transfer session. Updating the optimum number of concurrent network calls comprises recalculating the optimum number of concurrent network calls based on the transfer parameters after the trigger event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09634955&OS=09634955&RS=09634955
owner: Microsoft Technology Licensing, LLC
number: 09634955
owner_city: Redmond
owner_country: US
publication_date: 20131017
---
Cloud computing platforms may offer building deployment and management functionality for different types of applications and services. In this regard existing applications may be migrated and or function from on premise systems with cloud computing platforms. However conventional data transfer techniques are not effective in facilitating data migration or periodic transfers of data between on premise systems and cloud computing platforms.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used in isolation as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention provide methods and systems for optimizing data transfer. This may be accomplished by a data transfer optimization server. A data transfer session is initiated. The initiation of the data transfer session comprises analyzing transfer parameters for one or more data source devices. An optimum number of concurrent network calls is calculated for the data transfer session. The calculation is based on the transfer parameters. At least a portion of the optimum number of concurrent network calls is allocated for executing the data transfer session. Allocating concurrent network calls may include executing the data transfer session with the allocated number of concurrent calls. The transfer parameters are monitored for changes. The optimum number of concurrent network calls is updated for the data transfer session based on a triggering event associated with the data transfer session. Updating the optimum number of concurrent network calls comprises recalculating the optimum number of concurrent network calls based on the transfer parameters after or at the triggering event. The optimum number of concurrent network calls recalculated can be used to execute the data transfer session.

The subject matter of embodiments of the invention is described with specificity herein to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather the inventors have contemplated that the claimed subject matter might also be embodied in other ways to include different steps or combinations of steps similar to the ones described in this document in conjunction with other present or future technologies. Moreover although the terms step and or block may be used herein to connote different elements of methods employed the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.

For purposes of this disclosure the word including has the same broad meaning as the word comprising. In addition words such as a and an unless otherwise indicated to the contrary include the plural as well as the singular. Thus for example the constraint of a feature is satisfied where one or more features are present. Also the term or includes the conjunctive the disjunctive and both a or b thus includes either a or b as well as a and b .

For purposes of a detailed discussion below embodiments of the present invention are described with reference to an on premise system and a cloud computing platform however the transfer of data between the on premise system and the cloud computing platform is merely exemplary and it is contemplated that the techniques described may be extended to other implementation contexts.

Typically a cloud computing platform acts to store data or run service applications in a distributed manner. A cloud computing platform may span wide geographic locations including countries and continents. The service application components e.g. tenant infrastructure or tenancy of the cloud computing platform may include nodes e.g. computing devices processing units or blades in a server rack that are allocated to run one or more portions of a tenant s service applications. When more than one separate service applications are being supported by the nodes the nodes may be partitioned into virtual machines or physical machines that concurrently run the separate service applications respectively in individualized computing environments that support the resources and or operating system specific to each service application. Further each service application may be divided into functional portions such that each functional portion is able to run on a separate virtual machine.

Administrators supporting on premise systems may migrate existing systems to a cloud computing platform. For example an administrator can migrate a relational database and the data in the tables for an SQL database application to a cloud computing platform that supports SQL databases. Further customers of the cloud computing platform datacenters often have business applications running in a private enterprise system e.g. server managed by a customer that is geographically remote from the datacenter that interact with software being run on the resources in the datacenters. In this regard these applications may require transfer of data to and from the cloud computing platform to support the operation of these applications. The transferred data may further include associated information of the data including metadata of data files.

Administrators supporting such on premise migration and data transfer face a challenge in migrating data from on premise systems because current data transfer tools and systems are not effective in facilitating the transfer of data between on premise systems and cloud computing platforms. Current data transfer tools are not built for the infrastructure of the cloud computing platform and cannot support data transfer in said platform. For example the cloud computing platform infrastructure may support data transfer to a plurality of datacenters at different geographic locations. In this regard a user using a single credential may migrate data to one or more storage systems in the cloud computing platform.

Further conventional data transfer tools fail to perform real time analysis of transfer parameters that impact the maximum throughput available for transferring data. On premise data migration to a cloud computing platform involves several different transfer parameters that may be analyzed during a data transfer session in order to set data transfer configurations for a data transfer session. For example an on premise migration may involve several different computing devices each with individual transfer parameters and the cloud computing platform includes shared datacenter resources and virtualization each of the on premise computing devices and cloud computing platform impacting the data transfer session. As such systems and methods that account for both the on premise systems and the infrastructure of cloud computing platforms may further facilitate data transfer to and from the cloud computing platform.

Generally embodiments of the present invention provide simple and efficient methods and systems for optimizing data transfer in cloud computing platforms. In particular a data transfer optimization server supports bidirectional transfer of data in a cloud computing platform. It is contemplated that techniques described herein can be used in transferring data between cloud computing platforms and also within cloud computing platforms. In an exemplary embodiment data may be transferred to or from an on premise system to a cloud computing platform. Data transfer refers to the physical transfer of data over a point to point or point to multipoint communication channel.

In embodiments data transfer can be executed using a plurality of concurrent network calls from a data transfer optimization server to the cloud computing platform to transfer data. By way of example a plurality of Hypertext Transfer Protocol HTTP network calls may be used to transfer data. HTTP is an application protocol for distributed and collaborative information systems. HTTP functions as a request response protocol in a client server computing model. HTTP includes an underlying transport layer protocol e.g. Transmission Control Protocol TCP . The data transfer optimization server may initiate multiple concurrent network calls in order to transfer data e.g. data chunks such that the data is transferred at a certain bandwidth. Bandwidth refers to the average rate of successful data transfer using the concurrent network data calls or the throughputs in bits during a data transfer session. Throughput may be expressed in other format rates e.g. Mbits s or Gbit s . The throughput for transferring a file to or from the cloud computing platform can be calculated by dividing the file size by the time it takes to transfer the file. Naturally other methods for calculating throughput are contemplated with embodiments of the present invention. The throughput may further be related to transfer parameters. Transfer parameters refer to data transfer implementation constraints that impact the maximum throughput available for data transfer. By way of example transfer parameters may include among other things local computer hardware e.g. central processing unit CPU speed and memory size local network type source file size geographic location of destination datacenter current date and time service level agreements and prioritization.

Embodiments of the present invention may be supported by the data transfer optimization server. The data transfer optimization server is configured to support the interfacing between the on premise system and the cloud computing platform and also to support real time analysis of the data transfer session. The data transfer optimization server interface with the cloud computing platform may be supported in part by an application programming interface API that specifies how software components of the data transfer optimization server interacts with software components of the cloud computing platform. For example an API library that includes specifications for routines data structures object classes and variables may support the interaction between the data transfer optimization server and the cloud computing platform. These APIs include configuration specifications for the cloud computing platform such that the data transfer optimization server may communicate with the cloud computing platform infrastructure. For example a credentialing routine may be integrated in the data transfer optimization component to support usernames and passwords to access particular storage accounts. Similarly particular data transfer optimization functions such as increasing and decreasing concurrent network calls or pausing and resuming data transfer sessions as described in more detail herein may be supported at both the data transfer optimization server and the cloud computing platform by APIs for communicating messages of actions taken during the data transfer session. Any other variations and combinations thereof are contemplated with embodiments of the present invention.

Further real time analysis of the data transfer session and transfer parameters in embodiments of the present invention may be performed using a plurality of different algorithms. In one embodiment an optimum number of concurrent network calls may be calculated and based on a triggering event the optimum number of concurrent network calls can be recalculated to maintain the data transfer session at an optimum number of concurrent network calls for the transfer parameters at that time. Generally the optimum number of concurrent network calls may be associated with threshold criteria of each of the transfer parameters that adds or subtracts a concurrent number of network calls when a selected transfer parameter meets or fails to meet a threshold criterion. As such the optimum number of concurrent network calls can be dependent on transfer parameters of the data transfer session.

Another embodiment may calculate the optimum number of concurrent network calls but allocate a portion of the optimum number of network calls e.g. a default number of concurrent network calls that executes the data transfer and then periodically measure the average data transfer rate of the data transfer session while the data transfer session uses a different number of concurrent network calls. At each period the number of concurrent network calls may be increased until the number of concurrent network calls executing the data transfer session matches the calculated optimum number of concurrent network calls. The number of concurrent network calls corresponding to the highest recorded average data transfer rate may then be used for the transfer session.

In addition a data transfer session having a plurality of files may be assigned a number of concurrent network calls that get distributed to the set of files. Each file may receive a number of concurrent network calls to transfer the particular file in proportion to the size of the individual file. In this regard a larger file receives more concurrent network calls compared to a smaller file each relative to the total number of concurrent network calls available for the data transfer session. Further embodiments of the present invention may include a graphical user interface GUI having interface features that graphically represent among other things the data transfer session information and data transfer parameters. The interface may additionally support functionality such as pausing and resuming data transfer sessions in accordance with embodiments of the present invention.

Accordingly in a first aspect of the present invention a system for performing a method for optimizing data transfer sessions is provided. The system includes a data transfer optimization server configured for initiating a data transfer session. Initiating the data transfer session comprises analyzing transfer parameters for one or more data source devices. The data transfer optimization server is further configured for calculating an optimum number of concurrent network calls for the data transfer session based on the transfer parameters. The data transfer optimization server is also configured for allocating at least a portion of the optimum number of concurrent network calls that execute the data transfer session. The data transfer optimization server is configured for monitoring the transfer parameters for changes in the transfer parameters. The data transfer optimization server is also configured for updating the optimum number of concurrent network calls for the data transfer session based on a triggering event associated with the data transfer session. Updating the optimum number of concurrent network calls comprises recalculating the optimum number of concurrent network calls based on the transfer parameters at or after the triggering event.

In a second aspect of the present invention one or more computer readable media storing computer useable instructions that when used by one or more computing devices cause the one or more computing devices to perform a method for optimizing data transfers. The method includes initiating a data transfer session. The data transfer session is associated with a default number of concurrent calls. Initiating the data transfer comprises analyzing transfer parameters for one or more data source devices. The method also includes calculating an optimum number of concurrent network calls for the data transfer session based on the transfer parameters. The method further includes allocating the default number of concurrent network calls for the data transfer session. The method also includes upon a triggering event identifying a target number of concurrent calls between the default number of concurrent calls and the optimum number of concurrent calls the target number of concurrent calls is used during at least a portion of the data transfer session.

In a third aspect of the present invention a method for optimizing data transfer between private enterprise systems and cloud computing platforms is provided. The method includes initiating a data transfer session associated with a default number of concurrent calls. Initiating the data transfer comprises analyzing transfer parameters for one or more data source devices. The method includes calculating an optimum number of concurrent network calls for the data transfer session based on the transfer parameters calculating the optimum number of concurrent network calls includes comparing each value associated with each of the transfer parameters of each of the one or more data source devices to a threshold criteria and configuring the sum of the default number of concurrent calls and an added number of network calls based on a selected transfer parameter meeting or exceeding the threshold criteria as the optimum number of concurrent network calls. The method also includes allocating the default number of concurrent network calls that execute the data transfer session allocating the default number of concurrent network calls for the data transfer session which comprises determining the size of each individual file to be transferred from the one or more data source devices and assigning a number of concurrent network calls to each individual file in proportion to the size of the individual file. The number of concurrent network calls is assigned from the default number of concurrent network calls. The method also includes identifying a target number of concurrent network calls for the data transfer session. Identifying the target number of concurrent network calls comprises performing the following two or more times recording an average bandwidth of the data transfer session for a predefined period and increasing an allocated number of concurrent network calls by adding to the default number of concurrent network calls. The method further includes when the allocated number of concurrent network calls has been increased to match the optimum number of concurrent network calls evaluating each recorded average bandwidth and a number of concurrent network calls for each recorded average bandwidth to identify a highest average bandwidth recorded. The method includes allocating the target number of concurrent network calls for executing the data transfer session. The target number of concurrent network calls is the number of concurrent networks calls that corresponds to the highest average bandwidth recorded. The method also includes displaying a graphical user interface GUI comprising graphical representations of the data transfer parameters.

Having briefly described an overview of embodiments of the present invention an exemplary operating environment in which embodiments of the present invention may be implemented is described below in order to provide a general context for various aspects of the present invention. Referring initially to in particular an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device . Computing device is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing device be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.

The invention may be described in the general context of computer code or machine useable instructions including computer executable instructions such as program modules being executed by a computer or other machine such as a personal data assistant or other handheld device. Generally program modules including routines programs objects components data structures etc. refer to code that perform particular tasks or implement particular abstract data types. The invention may be practiced in a variety of system configurations including hand held devices consumer electronics general purpose computers more specialty computing devices etc. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.

With reference to computing device includes a bus that directly or indirectly couples the following devices memory one or more processors one or more presentation components input output ports input output components and an illustrative power supply . Bus represents what may be one or more busses such as an address bus data bus or combination thereof . Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy. For example one may consider a presentation component such as a display device to be an I O component. Also processors have memory. We recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop hand held device etc. as all are contemplated within the scope of and reference to computing device. 

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computing device and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media.

Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Computer storage media excludes signals per se.

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

Memory includes computer storage media in the form of volatile and or nonvolatile memory. The memory may be removable non removable or a combination thereof. Exemplary hardware devices include solid state memory hard drives optical disc drives etc. Computing device includes one or more processors that read data from various entities such as memory or I O components . Presentation component s present data indications to a user or other device. Exemplary presentation components include a display device speaker printing component vibrating component etc.

I O ports allow computing device to be logically coupled to other devices including I O components some of which may be built in. Illustrative components include a microphone joystick game pad satellite dish scanner printer wireless device etc.

With additional reference to a block diagram depicting an exemplary cloud computing platform operating environment suitable for use in embodiments of the invention is described. Generally the cloud computing platform operating environment illustrates an environment for optimizing data transfer in cloud computing platforms. Embodiments of the present invention also provide a system and method of optimizing data transfer sessions in a cloud computing platform based on a data optimization server that is configured based on the cloud computing platform and further monitoring data transfer parameters that impact the maximum throughput for a data transfer session. Among other components not shown the cloud computing platform operating environment generally includes a cloud computing platform a private enterprise system a data transfer optimization server all in communication with one another via a network .

With continued reference to the network may include without limitation one or more local area networks LANs and or wide area networks WANs . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. The cloud computing platform and the private enterprise system may each include several storage servers systems not shown for storing the data transferred between the two systems. Each of the systems may be linked together by the network backbone spanning across the zones. Zones may refer to particular buildings data centers and geographic regions providing a storage service. The content and volume of information stored by a storage service is not intended to limit the scope of embodiments of the present invention in any way.

In some embodiments one or more of the illustrated components modules may be implemented as stand alone applications. Any number of client computing devices data optimization servers and cloud computing platforms may be employed in the computing system within the scope of embodiments of the present invention. Each may comprise a single device interface or multiple devices interfaces cooperating in a distributed environment. For instance the data transfer optimization server may comprise multiple devices and or modules arranged in a distributed environment that collectively provide the functionality of the data optimization server described herein.

As used herein the phrase private enterprise system is not meant to be limiting but may encompass a number of applications and services systems that transfer data to and from the cloud computing platform. Additionally other components modules not shown also may be included within the cloud computing platform . For example a cloud computing platform is configured to allocate virtual machines within a data center for use by a service application. The cloud computing platform also may be a public cloud a private cloud or a dedicated cloud. The cloud computing platform may include a data center configured to host and support operation of endpoints in a particular service application. The phrase application or service as used herein broadly refers to any software or portions of software that runs on top of or accesses storage locations within the datacenter. In one embodiment one or more of the endpoints may represent the portions of software component programs or instances of roles that participate in the service application.

It should be understood that this and other arrangements described herein are set forth only as examples. Other arrangements and elements e.g. machines interfaces functions orders and groupings of functions can be used in addition to or instead of those shown and some elements may be omitted all together. Further many of the elements described herein are functional entities that may be implemented as discrete or distributed components or in conjunction with other components and in any suitable combination and location. Various functions described herein as being performed by one or more entities may be carried out by hardware firmware and or software. For instance various functions may be carried out by a processor executing instructions stored in memory.

The cloud computing platform acts to store data or run service applications in a distributed manner. For instance the cloud computing platform functions to run one or more portions of a tenant s service applications. In particular cloud computing platform is configured to deploy manage monitor and maintain service applications. The cloud computing platform may include components that receive or transfer data to other storage components within or outside the cloud computing platform. For example the cloud computing platform may support an SQL database application which is periodically updated with data from a private enterprise system or the cloud computing platform may transfer data to another datacenter within the cloud computing platform supporting fault recovery agreements of tenant applications. Any and all such variations and combinations of data to and from the cloud computing platform are contemplated within the scope of embodiments of the present invention.

In addition the cloud computing platform infrastructure allows for additional functionality not typically provided on individual computing devices or networks of computing devices. In particular interfacing with a cloud computing infrastructure may include particular software components that are different from conventional data transfer tools. For example a cloud computing system may include storage servers in a plurality of geographic regions each associated with a single user account. In this regard a user may on a cloud computing platform have access to each of the storage devices even though they are geographically dispersed. Developing an interface that supports the configuration of the cloud computing platform is provided with optimizing data transfer sessions in that the data transfer session are fully supported by the infrastructure of the cloud computing platform for example via an graphical user interface and APIs that support messages for executing functionality in accordance with embodiments of the present invention 

In addition the cloud computing platform provides for shared resources that allow for dynamic management of component programs of a service application. In particular virtual machines instances may be deployed and similarly other resources may vary in usage as such having implications on performance e.g. data transfer sessions . A service model further acts to guide a cloud computing platform in coordinating activities between the deployed service applications and service application components upon deployment to distributed locations throughout the distributed system. The service model can include a description of the business prioritization and service level agreements for applications and services in the cloud computing platform . Although various differing types of functions have been described it should be understood and appreciated by those of ordinary skill in the art that other suitable functions of the cloud computing platform may be used and that embodiments of the present invention are not limited to the functionality described herein.

With continued reference to the private enterprise system includes a client computing device that may include any type of computing device such as the computing device described with reference to for example. A plurality of client computing devices may be associated with the private enterprise system . It is contemplated that the client computing device data is transferred via a data transfer optimization server using techniques described herein. For example the data on the client computing device may be accumulated from a plurality of client computing devices of the private enterprise system and transferred. Further an entire legacy system having a plurality of applications and or services may also include data that is transferred to the client cloud computing platform . Also the client computing device may be used directly by users to operate applications running the cloud computing platform such that data on one or more computing devices are transferred periodically using the data transfer optimization server. Any and all such variations and combinations of data from the private enterprise system transferred to the cloud computing platform are contemplated within the scope of embodiments of the present invention. It is further contemplated that the private enterprise may be an on premise system of computing devices a datacenter or another cloud computing platform transferring data to or from a destination cloud computing platform.

The data transfer optimization server of is generally configured to automatically and dynamically optimize concurrent network calls that are used to transfer data. Data may generally include chunks of data files of varying sizes that are to be physically transferred to a single location or multiple locations. The data transfer optimization server may be implemented in different arrangements for example as a standalone system or within the private enterprise system or even within the cloud computing platform. Any number of variations and combinations of the implementations of the data transfer optimization server are contemplated within embodiments of the present invention.

The data transfer optimization server further generates a graphical user interface GUI for executing the functions associated with the data transfer optimization server. In particular the GUI shows real time data transfer status. The GUI is a portion of the data transfer optimization server with which a user interacts. The GUI may be associated with an application not shown that is part of the data transfer optimization server . The application is a program designed to assist with the performance of the data transfer optimization method described herein. The data transfer optimization server may generate and display GUI to support functions of data transfer optimization server .

With reference to an exemplary illustration of the GUI of the data transfer optimization server is shown. The GUI can include an initialization icon a pause icon and a resume icon as graphical representations for initiating a data transfer session pausing the data transfer session and resuming the data transfer session respectively. The initialization icon may also be configured to generate an interface for taking additional actions with reference to the data transfer session. For example changing the priority of the particular data transfer from high to normal or low. A refresh icon may be used to get the most up to date information about interface elements and also execute a triggering event that affects the data transfer session. Other types of functionality described with methods of the present invention may further be facilitated by interface elements on the GUI.

The GUI may also include several different portions in the interface that provide different types of information about the data transfer. For example a first portion may include information about downloads at different stages e.g. downloading completed active and inactive downloads . A second portion may include the data transfer parameters e.g. network card speed the local network type e.g. wireless or wired the hardware of the client computing device e.g. CPU and memory total size of source files a priority indication a geographic location of the destination data center the geographic location of the client computing device the current date and time for at the location of the date center and current date and time of the destination of the data center that are associated with each individual data transfer session. A third portion of the interface may include information about individual files associated with each data transfer session. The individual files may also have values for different types of transfer parameters as shown at the fourth portion of the interface. It is contemplated that the particular layout presented in is merely exemplary other arrangements of interface features that perform the functions described herein are contemplated with embodiments of the present invention.

Turning now to a flow diagram is provided that illustrates a method for optimizing data transfer sessions in cloud computing platforms. At block a data transfer session is initiated. The data transfer session may be between a private enterprise system having the one or more data source devices or one or more data target devices and a cloud computing platform having one or more data source devices or one or more data target devices. An initiated data transfer session may further be paused and resumed. Initiating pausing and resuming a data transfer session may be facilitated by a graphical user interface GUI the GUI further supports other functionality in accordance with embodiments of the present invention.

Initiating the data transfer session comprises analyzing transfer parameters for one or more data source devices. In embodiments the data transfer includes at least two of the following a network card connection speed a local network type a hardware of the one or more data source devices comprising a computer processing unit CPU speed and memory size a total size of source files to be transferred a priority associated with data transfer sessions and or each of the source files a geographic location of the one or more data target devices a geographic location of the data source device a current date and time of the geographic location of the one or more data source devices and a current date and time of the geographic location of the one or more data target devices. The transfer parameters may have a theoretical maximum throughput however in practice the actual effective throughput can be lower. For example other factors that limit actual performance from a network perspective may include higher layer protocol overhead data packet retransmissions caused by line noise or interference and lost packets in congested intermediate network nodes. Further device interfaces where one bus transfers data via another can limit the throughput to the slower interface. Moreover deliberate business prioritization policies and service level agreement in a service model may further limit the maximum throughput. It is further contemplated that all of above listed transfer parameters may be analyzed and utilized in particular embodiments.

At block an optimum number of concurrent network calls for the data transfer session is calculated. The optimum number of concurrent network calls can be calculated based on the transfer parameters. The optimum number of concurrent network calls refers generally to the maximum supported number of concurrent network calls for a data source device. Calculating the optimum number of concurrent network calls comprises at least in part determining that a selected transfer parameter from the transfer parameters meets or exceeds a threshold criteria. For example a value for current date and time may be holiday such that if the current data and time is a holiday an added number of concurrent network calls assigned to this value may be added to the default number of concurrent network calls. Similarly a priority value may be low normal or high such that a high receives an added number of concurrent calls and a low subtracts an added number of concurrent calls. Any variations and combinations of threshold criteria are contemplated with embodiments of the present invention. The optimum number of concurrent network calls can then be configured as the sum of the default number of concurrent network calls and an added or subtracted number of network calls for the selected transfer parameter.

At block at least a portion of the optimum number of concurrent network calls is allocated. Allocating the concurrent network calls can execute the data transfer session. Allocating the concurrent network calls further includes determining the size of each individual file to be transferred from the one or more data source devices and assigning a number of concurrent network calls to each individual file in proportion to the size of the individual file. The number of concurrent network calls is assigned from the portion of the optimum number of concurrent network calls.

At block the transfer parameters are monitored for changes. Anyone of the transfer parameters may change in real time due to modifications in the associated infrastructure. The modification affects the transfer session as such embodiments of the present invention monitor changes and recalculate an optimum number of concurrent network calls for the data transfer session. At block the optimum number of concurrent network calls for the data transfer session is updated. The updated optimum number of concurrent network calls may be based on a triggering event. The triggering event can be a predefined period such that upon expiration of the predefined period the transfer parameters are analyzed for updating the optimum number of concurrent network calls based on the transfer parameters at or after the triggering event. At block the optimum number of concurrent network calls is recalculated and then at block at least a portion of the optimum number of network calls recalculated is allocated to execute the data transfer session.

Turning now to a flow diagram is provided that illustrates a method for optimizing data transfer in cloud computing platforms. At block a data transfer session is initiated. The data transfer session can be associated with a default number of concurrent calls. The data transfer session includes a number of default network calls determined that may be based on a default configuration and or transfer parameters of the private enterprise system. At block an optimum number of concurrent network calls is calculated for the data transfer session based on the transfer parameters. At block the default number of concurrent network calls is allocated such that the data transfer session is executed. At block upon a triggering event a target number of concurrent calls is identified between the default number of concurrent calls and the optimum number of concurrent calls. The target number of concurrent calls is used during at least a portion of the data transfer session.

Turning now to a flow diagram is provided that illustrates a method for optimizing data transfer between private enterprise systems and cloud computing platforms. At block a data transfer session is initiated. At block an optimum number of concurrent network calls for the data transfer session is calculated based on the transfer parameters. Calculating an optimum number of concurrent network calls comprises at block comparing each value associated with each of the transfer parameters of each of the one or more data source devices to a threshold criteria and at block configuring the sum of the default number of concurrent calls and an added number of network calls based on a selected transfer parameter meeting or exceeding the threshold criteria as the optimum number of concurrent network calls.

At block the default number of concurrent network calls is allocated to execute the data transfer session. Allocating the default number of concurrent network calls for the data transfer session comprises at block determining the size of each individual file to be transferred from the one or more data source devices and at block assigning a number of concurrent network calls to each individual file in proportion to the size of the individual file. The number of concurrent network calls is assigned from the default number of concurrent network calls.

At block a target number of concurrent network calls is identified for the data transfer session identifying the target number of concurrent network calls comprises performing the following two or more times at block recording an average bandwidth of the data transfer session for a predefined period and at block increasing an allocated number of concurrent network calls by adding to the default number of concurrent network calls. The default number of concurrent network calls may be increased by a predefined number of calls although other implementations are contemplated. At block a determination is made whether the number of concurrent network calls matches the optimum number of concurrent network calls. If the number of concurrent network calls and the optimum number of concurrent network calls do not match the method returns to block however if the number of concurrent network calls and the optimum number of concurrent network calls do match at block the target number of concurrent network calls for the data transfer session is allocated to execute the data transfer session. The target number of concurrent network calls is the number of concurrent networks calls that corresponds to the highest average bandwidth recorded. At block a graphical user interface GUI comprising graphical representations of the transfer parameters is displayed.

Embodiments of the present invention have been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which the present invention pertains without departing from its scope.

From the foregoing it will be seen that this invention is one well adapted to attain all the ends and objects hereinabove set forth together with other advantages obvious and inherent to the structure.

It will be understood that certain features and sub combinations are of utility and may be employed without reference to other features or sub combinations. This is contemplated by and is within the scope of the claims.

