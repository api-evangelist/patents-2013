---

title: System and method for detecting failure of storage object images on a storage system and initiating a cleanup procedure
abstract: An application may store data to a dataset comprising a plurality of volumes stored on a plurality of storage systems. The application may request a dataset image of the dataset, the dataset image comprising a volume image of each volume of the dataset. A dataset image manager operates with a plurality of volume image managers in parallel to produce the dataset image, each volume image manager executing on a storage system. The plurality of volume image managers respond by performing requested operations and sending responses to the dataset image manager in parallel. Each volume image manager on a storage system may manage and produce a volume image for each volume of the dataset stored to the storage system. If a volume image for any volume of the dataset fails, or a timeout period expires, a cleanup procedure is performed to delete any successful volume images.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152327&OS=09152327&RS=09152327
owner: NetApp, Inc.
number: 09152327
owner_city: Sunnyvale
owner_country: US
publication_date: 20130528
---
Embodiments of the present invention relate to storage systems and in particular to a system and method for managing and producing a dataset image across multiple storage systems.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD . The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of storage objects such as files and logical units LUs . A known type of file system is a write anywhere file system that does not overwrite data on disks.

The storage system may be further configured to allow many servers to access storage objects stored on the storage system. In this model the server may execute an application such as a database application that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each server may request the data services of the storage system by issuing access requests read write requests as file based and block based protocol messages in the form of packets to the system over the network.

A plurality of storage systems may be interconnected as a cluster to provide a storage system architecture configured to service many servers. In some embodiments the storage system architecture provides one or more aggregates each aggregate comprising a set of one or more storage devices e.g. disks . Each aggregate may store one or more storage objects such as one or more volumes. An aggregate may be distributed across a plurality of storage systems. The storage objects e.g. volumes may be configured to store content of storage objects such as files and logical units served by the cluster in response to multi protocol data access requests issued by servers.

Each storage system of the cluster may include i a storage server referred to as a D blade adapted to service a particular aggregate or volume and ii a multi protocol engine referred to as an N blade adapted to redirect the data access requests to any storage server of the cluster. In the illustrative embodiment the storage server of each storage system is embodied as a disk element D blade and the multi protocol engine is embodied as a network element N blade . The N blade receives a multi protocol data access request from a server converts that access request into a cluster fabric CF message and redirects the message to an appropriate D blade of the cluster.

The storage systems of the cluster may be configured to communicate with one another to act collectively to increase performance or to offset any single storage system failure within the cluster. The cluster provides data service to servers by providing access to a shared storage comprising a set of storage devices . Typically servers will connect with a storage system of the cluster for data access sessions with the storage system. During a data access session with a storage system a server may submit access requests read write requests that are received and performed by the storage system.

Each server typically executes numerous applications requiring the data services of the cluster. For example data for a particular application may be stored as a dataset on a particular storage system of the cluster. The dataset may comprise a plurality of storage objects e.g. volumes stored on the storage system. The particular application may access its dataset on the storage system to add modify or delete data of the dataset. In addition the storage system may provide a backup data service that produces a backup image of an application s dataset. The backup image of a dataset may be used for example to restore the dataset in case of data corruption of the dataset.

In current cluster storage systems however it is becoming more common for a dataset of an application to comprise a plurality of storage objects that are stored across a plurality of different storage systems. In this situation it has become more difficult to produce a successful overall image of a dataset stored across many storage systems. In particular conventionally it is difficult to coordinate and ensure that all storage systems have successfully produced their images and have not retained stale backup images from failed backup attempts. As such an effective method for managing and producing an image for a dataset stored across multiple storage systems is needed.

In the following description numerous details and alternatives are set forth for purpose of explanation. However one of ordinary skill in the art will realize that embodiments can be practiced without the use of these specific details. In other instances well known structures and devices are shown in block diagram form to not obscure the embodiments with unnecessary detail.

The description that follows is divided into four sections. Section I contains terms used herein. Section II describes a cluster storage system environment in which some embodiments operate. Section III describes a dataset image manager for managing and producing a dataset image for a dataset that is stored across multiple storage systems. Section IV describes a volume image manager for managing and producing at least one volume image for at least one volume that is stored on a storage system.

Cluster of storage systems As used herein a cluster comprises a plurality of storage systems. Each storage system in the cluster may be associated with a unique identifier storage system ID that uniquely identifies the storage system within the cluster. For example the storage system ID may comprise an IP address of the storage system.

Identified storage system As used herein an identified storage system may refer to a storage system that stores one or more volumes of a dataset.

Storage object As used herein a storage object comprises any logically definable storage element stored or contained within a cluster storage system. The cluster storage system may store a plurality of storage objects for storing data of a plurality of applications. A storage object may comprise any data container for storing data such as an aggregate volume virtual volume e.g. flexible volume file logical units LUs etc. In other embodiments storage objects comprise any other logically definable storage element stored or contained within the cluster storage system. For illustrative purposes a storage object comprising a volume is used in the embodiments described herein. In other embodiments another type of storage object other than a volume may be used in the embodiments described herein. Each storage object may be associated with a unique storage object identifier storage object ID that uniquely identifies the storage object within the cluster. For example each volume may be associated with a unique volume ID that uniquely identifies the volume within the cluster.

Identified storage object As used herein an identified storage object may refer to a storage object that is included in a dataset. For example an identified volume may refer to a volume that is included in a dataset.

Dataset As used herein a dataset may comprise data for a particular application. In some embodiments a dataset comprises a plurality of storage objects stored on a plurality of storage systems. The application may access its dataset on the storage systems to add modify or delete data of the dataset. For example an email application executing on a server may store its data to an email exchange dataset that is stored across a plurality of storage systems.

Image As used herein an image may comprise a persistent point in time PPT view or image of data of a storage object. An image may provide a read only copy of a storage object that protects against accidental deletions or modifications of data of the storage object. As such an image may comprise a persistent image of the exact state of the data of the storage object at a given point in time. For example an image may comprise a snapshot image produced using Snapshot technology provided by NetApp Inc. of Sunnyvale Calif. In other embodiments an image may be produced using other technologies. An image may comprise a data backup of the storage object that may be used for example to restore recover the data of the storage object after data has been corrupted lost or altered. As used herein a storage object image comprises an image of a storage object. As used herein a dataset image comprises an image of a dataset that comprises a plurality of storage objects the dataset image comprising a plurality of storage object images of the plurality of storage objects of the dataset. For example a dataset image may comprise a plurality of volume images of a plurality of volumes of the dataset each volume image comprising an image of one volume of the dataset.

Dataset image manager As used herein a dataset image manager may comprise an application or engine configured for managing and producing a dataset image for a dataset comprising a plurality of storage objects stored on a plurality of storage systems. The dataset image manager may manage and produce the dataset image in response to a request from an application for a dataset image of its dataset. The dataset image manager may work in conjunction with a plurality of storage object image managers executing on a plurality of storage systems to produce the dataset image. The dataset image manager may reside and execute on any computer system such as a server system storage system or a dedicated computer system box.

Storage object image manager As used herein a storage object image manager may comprise an application or engine configured for managing and producing at least one storage object image for at least one storage object stored on a storage system. The storage object image manager may manage and produce the at least one storage object image in response to a request from the dataset image manager for the at least one storage object image. The storage object image manager may reside and execute on the storage system. In the exemplary embodiments described the storage object image manager may be referred to as a volume image manager for managing and producing at least one volume image for at least one volume stored on a storage system.

Communication messages Communication messages may be sent between the various components described herein such as between an application a dataset image manager and or a volume image manager. Communication messages may be sent between such components for example through a network or data bus. As used herein the following communication messages may be used 

Dataset start request is sent from an application to a dataset image manager for beginning producing a dataset image of a dataset.

Volume start request is sent from the dataset image manager to a volume image manager of each identified storage system to begin producing one or more volume images of one or more identified volumes of the dataset stored to the storage system.

Volume start response is sent from each volume image manager to the dataset image manager to indicate that the one or more identified volumes have been suspended and producing one or more volume images of the one or more identified volumes has been initiated.

Dataset start response resume response is sent from the dataset image manager to the application to indicate that all volumes of the dataset have been suspended and producing volume images of all volumes of the dataset has been initiated.

Dataset commit request is sent from an application to the dataset image manager for completing producing the dataset image of the dataset.

Volume commit request is sent from the dataset image manager to a volume image manager of each identified storage system to complete producing one or more volume images of one or more identified volumes of the dataset stored to the storage system. In particular the volume commit request may comprise a request for each identified storage system to determine and indicate the success or failure of producing volume images of identified volumes of the dataset that are stored to the storage system.

Volume commit response is sent from a volume image manager of a storage system to the dataset image manager to indicate the success or failure of producing volume images of identified volumes of the dataset that are stored to the storage system.

Dataset commit response is sent from the dataset image manager to the application to indicate whether the dataset image of the dataset has succeeded or failed.

Volume cleanup request is sent from the dataset image manager to a volume image manager of each identified storage system to delete one or more volume images of one or more volumes stored to the storage system.

Each storage system may have a distributed architecture. For example each storage system may include separate N module network module and D module data module components not shown . In such an embodiment the N module is used to communicate with the server systems while the D module includes the file system functionality and is used to communicate with the storage devices . In another embodiment the storage system may have an integrated architecture where the network and data components are all contained in a single box or unit. The storage system may be coupled through a switching fabric not shown to other storage systems in the cluster . In this way all the storage systems of the cluster may be interconnect to form a single storage pool that may be accessed by the connected server systems .

The storage systems comprise functional components that cooperate to provide a distributed storage system architecture providing consolidated data services to the server systems . A server system may comprise a computer system that utilizes services of the cluster storage system to store and manage data in the storage devices of the storage systems . Interaction between a server system and a storage system can enable the provision of storage services. That is server system may request the services of the storage system and the storage system may return the results of the services requested by the server system by exchanging packets over the connection system . The server system may request the services of the storage system by issuing packets using file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the server system may issue packets including block based access protocols such as the Fibre Channel Protocol FCP or Internet Small Computer System Interface iSCSI Storage Area Network SAN access when accessing information in the form of blocks.

The storage system may comprise a computer system that stores data in a set of storage devices preferably on one or more writable storage device media such as magnetic disks video tape optical DVD magnetic tape and any other similar media adapted to store information including data and parity information . The storage system may implement a file system to logically organize the data as storage objects on the storage devices . A server system may execute one or more applications that submit access requests for accessing particular storage objects on the storage devices .

The network adapter comprises a plurality of ports adapted to couple the storage system to one or more server systems over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. A server system may establish a connection with a storage system through the network adapter to access the storage devices of the storage system through use of the storage adapter . In some embodiments an application executing on the server system may establish a connection with a storage system to access the storage devices .

The storage adapter is coupled with the storage devices of the storage system and cooperates with the storage operating system to access particular data on the storage devices e.g. as requested by an application executing on the server system . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the storage devices over an I O interconnect arrangement. The storage operating system portions of which are typically resident in memory and executed by the processing elements functionally organizes the storage system by inter alia invoking storage operations in support of the storage service implemented by the storage system . It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The storage system executes a storage operating system that implements a storage file system. In this sense the Data ONTAP storage operating system available from NetApp Inc. of Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system is an example of such a storage operating system implemented as a microkernel within an overall protocol stack and associated storage. The storage operating system can also be implemented as an application program operating over a general purpose operating system such as UNIX or Windows or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

The memory may store software program code such as the storage operating system that is executable by the processor s . The storage operating system may implement the storage file system to logically organize data on the storage devices as one or more storage objects and provide a logical virtual representation of how the storage objects are organized on the storage devices . As such a cluster of one or more storage systems may also organize and store one or more storage objects. As used herein a storage object comprises any logically definable storage element stored or contained within the cluster storage system . Each storage object may be associated with a unique storage object identifier storage object ID that uniquely identifies the storage object within the cluster . For example each volume may be associated with a unique volume ID that uniquely identifies the volume within the cluster. The storage operating system of a storage system also manages access to the storage objects stored on the storage devices . In some embodiments an application may establish a connection with the storage operating system to access storage devices of the storage system . The application may implement various connections having various protocols to establish a connection with the storage system such as an iSCSI or a Transport Control Protocol TCP connection.

In some embodiments each storage system in the cluster may execute a volume image manager . In these embodiments the memory may also store software program code such as the volume image manager that is executable by the processor s . In this manner the volume image manager may comprise a volume image manager engine comprising computer software and or hardware components configured for performing embodiments described herein. The volume image manager may be configured for managing and producing at least one volume image for at least one volume stored on the storage system. The volume image manager may perform embodiments described herein in response to request s from a dataset image manager . In some embodiments the memory may also store data structures such as a volume operation data structure that are used by the volume image manager for performing embodiments described herein.

The computer system comprises processor s memory a local storage a network adapter output component s and input component s coupled by a bus . The processors are the central processing units CPUs of the computer system and thus control the overall operation of the computer system . Processors may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices. The network adapter comprises a plurality of ports adapted to couple the computer system to one or more other computer systems such as servers or storage systems over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the storage system to the network.

The output component s may be of any type generally used by a computer system to provide information to an end user e.g. administrator . For example the output component could include a monitor an audio speaker or an alphanumeric display. Similarly the input component s may be of any type that allows an end user to provide input into a computer system. For example the input component may be a keyboard a mouse or a speech recognition system.

Memory can be a random access memory RAM a read only memory ROM or the like or a combination of such devices. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the embodiments described herein. Memory comprises storage locations that are addressable by the processor and adapters for storing software program code such as software described herein. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code. Such software code may include an operation system not shown and one or more applications .

In some embodiments an application stores its data to a dataset. The dataset may comprise a plurality of storage objects stored on a plurality of different storage systems . The application may access its dataset on the storage systems to add modify or delete data of the dataset. For example an email application executing on the computer system may store its data to an email exchange dataset that is stored across a plurality of different storage systems . The computer system may also execute a dataset image manager .

In these embodiments the memory may also store software program code such as the dataset image manager that is executable by the processor s . In this manner the dataset image manager may comprise a dataset image manager engine comprising computer software and or hardware components configured for performing embodiments described herein. The dataset image manager may be configured for managing and producing a dataset image for a dataset. The dataset image manager may manage and produce the dataset image in response to a request from an application for a dataset image of its dataset. The dataset image manager may work in conjunction with a plurality of volume image managers executing on a plurality of storage systems to produce the dataset image. In some embodiments the memory may also store data structures such as a configuration data structure DS and an dataset operation data structure DS that are used by the dataset image manager for performing embodiments described herein. In other embodiments the dataset image manager may reside and execute on a storage system .

Local storage is a storage device that stores data structures such the configuration DS and the dataset operation DS that are used by the dataset image manager for performing embodiments described herein. The computer system may load data stored on the local storage into memory from which they are accessed by processors .

As described herein an application may store its data to a dataset comprising a plurality of volumes stored on a plurality of storage systems. The application may require a backup image dataset image of the dataset. A resulting produced dataset image may comprise a plurality of volume images stored on a plurality of storage systems. In some embodiments the dataset image manager operates in conjunction with a plurality of volume image managers each volume image manager residing and executing on a storage system among the plurality of storage systems.

In particular the dataset image manager may manage and coordinate operations for the plurality of volume image managers by sending requests to the plurality of volume image managers for producing the dataset image. In some embodiments the dataset image manager may perform interactions and operations between the plurality of volume image managers in parallel. The plurality of volume image managers may also respond by performing requested operations and sending responses to the dataset image manager in parallel. Each volume image manager executing on a storage system may manage at least one volume image for at least one identified volume of the dataset that is stored to the storage system. The dataset image manager may store and maintain a dataset operation DS to perform embodiments herein. The volume image manager may store and maintain a volume operation DS to perform embodiments herein.

The dataset image manager may execute a dataset image method described in relation to for managing and producing the dataset image. In some embodiments the dataset image method may be viewed as comprising two phases for producing a dataset image of a dataset a start phase and a commit phase. The start phase generally relates to suspending all volumes of the dataset and initiate begin producing a dataset image of its dataset. The commit phase generally relates to managing and completing the volume images of the volumes of the dataset to produce the dataset image. Typically the start phase requires a substantially shorter time to complete relative to the commit phase. Dividing the dataset image method may provide performance and scalability advantages. For example in the start phase the dataset image manager may receive a dataset start request from an application for beginning producing a dataset image of a dataset of the application and the dataset image manager will coordinate with the plurality of volume image managers to quickly suspend fence all volumes of the dataset i.e. suspend all input output I O operations of all volumes of the dataset . After all volumes of the dataset are suspended the dataset image manager may send a resume response signal to the application. Typically each application will be configured such that it will not resume its other operations operations not related to I O operations to the volumes of its dataset until it receives the resume response. As such by dividing the dataset image method into a start phase and a commit phase the application does not need to wait for the substantially longer commit phase to complete before receiving the resume response and resuming its other operations. This may be especially important for database and other applications that are sensitive to performance latency.

Each volume image manager may execute a volume image method described in relation to for managing and producing one or more volume images. The dataset image method may manage and coordinate operations and requests for the volume image method and volume image method may respond by performing the requests. As such the volume image method may also be viewed as comprising a start phase and a commit phase for managing and producing one or more volume images.

In some embodiments producing a dataset image for a dataset is considered successful only if a volume image is successfully produced for each and all volumes of the dataset across the plurality of storage systems within a predetermined timeout period. In these embodiments if even one volume image manager on a storage system does not successfully produce a volume image for even one volume of the dataset producing the dataset image is considered a failure.

Also if all volume images of all volumes of the dataset are not successfully produced within the timeout period producing the dataset image is also considered a failure. In some embodiments either the dataset image manager and or any of the volume image managers may enforce the timeout period and cause a failure of the dataset image. In these embodiments the dataset image manager may initiate a dataset image timeout method described in relation to that is executed for monitoring and implementing the timeout period. Also each volume image manager may separately and individually monitor and implement the timeout period by initiating a volume image timeout method described in relation to .

As such the producing the dataset image may fail if producing one or more volume images fails or the timeout period expires before the entire dataset image is produced. When producing the dataset image fails either by a failed volume image or expiration of the timeout period a cleanup procedure is performed to delete one or more volume images produced and stored on one or more storage systems. In some embodiments the cleanup procedure may be used for deleting one or more volume images that were successfully produced on one or more storage systems. Since the volume images were produced for an unsuccessful data image the volume images are no longer needed and unnecessarily consumes storage resources. As such the cleanup procedure provides automated removal of unneeded volume images that were produced for an unsuccessful data image. The dataset image manager may initiate a cleanup procedure across the plurality of storage systems wherein in response each volume image manager on each storage system executes a cleanup method as described in relation to . In addition each volume image manager of each storage system may also separately and individually initiate a cleanup procedure on the storage system.

As such the embodiments described herein provide a system and method for providing an ability to create crash consistent multi volume image. The system and method may do so by suspending I O operations to the volumes during the duration of image creation for the volumes.

As shown in the dataset image manager may manage and coordinate with a plurality of volume image managers e.g. executing on the plurality of storage system e.g. for performing embodiments herein for producing a dataset image . In some embodiments each volume image manager executing on a storage system may manage and produce at least one volume image for the at least one identified volume of the dataset that is stored to the storage system . As used herein for a particular storage system an identified volume may refer to a volume of a dataset that is stored to the particular storage system . For example as shown in a first volume image manager may produce at least one volume image for at least one volume of the dataset that is stored on a first storage system a second volume image manager may produce at least one volume image for at least one volume of the dataset that is stored on a second storage system a third volume image manager may produce at least one volume image for at least one volume of the dataset that is stored on a third storage system etc.

A dataset image may comprise a plurality of volume images of a plurality of volumes that are stored on a plurality of different storage systems . In some embodiments the dataset image comprises at least one volume image for at least one volume from each of at least two different storage systems . For example as shown in the dataset image may comprise at least one volume image for at least one volume stored on a first storage system at least one volume image for at least one volume stored on a second storage system at least one volume image for at least one volume stored on a third storage system etc.

In general the dataset image method may determine the plurality of volumes that comprise a dataset as well as determine the plurality of storage systems that store the plurality of volumes. The dataset image method may then manage and produce a dataset image of the dataset by coordinating with a plurality of volume image managers executing on the plurality of storage systems . In some embodiments the dataset image method may perform interactions and operations between the plurality of volume image managers in parallel. The plurality of volume image managers may also respond by performing requested operations and sending responses to the dataset image manager in parallel. In these embodiments the plurality of volume image managers may perform operations described herein simultaneously for managing and producing the volume images in parallel to allow for faster execution of the dataset image method and production of the dataset image across the plurality of storage systems . In addition the dataset image method may initiate a dataset image timeout method described in relation to that is simultaneously executed for monitoring and implementing a dataset timeout period that may cause an abort stoppage of the dataset image method .

The method begins by storing and maintaining at a configuration data structure for storing configuration information for a plurality of volumes stored on a plurality of storage systems of a cluster storage system . shows a conceptual diagram of an exemplary configuration data structure in accordance with some embodiments. The configuration data structure may comprise a plurality of volume entries such as etc. each volume entry representing a volume stored in the cluster storage system . Each volume entry for a volume may comprise a plurality of data fields such as data fields for a volume ID e.g. VID VID etc. storage system ID e.g. SSID SSID etc. and volume information e.g. VI VI etc. .

As discussed above each volume may be associated with a unique volume ID that uniquely identifies the volume within the cluster. Also each storage system in the cluster may be associated with a unique storage system ID that uniquely identifies the storage system within the cluster. For example the storage system ID may comprise an IP address of the storage system. As such for a particular volume that is represented by a particular volume entry the data field for the volume ID may specify a volume ID associated with the particular volume and the data field for the storage system ID may specify a storage system ID of the storage system that stores the particular volume. Also the data field for the volume information may specify various information regarding the particular volume. For example the volume information may include a data size of the volume dates and times when the volume was created accessed or modified dates and times when any data images were produced for the volume etc. In other embodiments the volume information may include other information regarding the volume. In some embodiments the configuration data structure may be used by the method as a look up or mapping table to determine which storage system stores a particular volume.

The method then receives at a dataset start request from an application such as an application executing on a computer system for beginning producing a dataset image of a dataset. For example the dataset start request may comprise a dataset start application programming interface API call from the application. In some embodiments the dataset start request further specifies a plurality of volumes that comprise the dataset. For example the dataset start request may specify a plurality of volume IDs of the plurality of volumes that comprise the dataset. In these embodiments the plurality of volumes that comprise the dataset are stored across a plurality of different storage systems . For example the application may comprise an email application that stores its data to an email exchange dataset comprising a plurality of volumes stored on a plurality of storage systems . The application will typically not have knowledge or information regarding which storage systems store the volumes of the dataset and as such the dataset start request will typically not specify the storage systems storing the dataset. In some embodiments receiving the dataset start request initiates the start phase of the method .

The method then determines at a start time and dataset timeout period for the overall dataset image operation. The start time may comprise the start time for the overall dataset image operation for producing the dataset image of the dataset. For example the start time may comprise a time or approximate time when the method received the dataset start request from the application. The dataset timeout period may comprise a maximum amount of time that is allowed permitted for the overall dataset image operation to produce the dataset image before the overall dataset image operation is stopped aborted. The dataset timeout period may be defined by and start from the start time. Different values may be used for the dataset timeout period depending on different situations. For example for urgent situations where a dataset image is needed quickly the dataset timeout period may equal 5 seconds from the start time for average situations where a dataset image is needed in an average time the dataset timeout period may equal 7 seconds from the start time and for relaxed situations where a dataset image is not needed quickly the dataset timeout period may equal 20 seconds from the start time. In other embodiments other values for the time period may be used. In other embodiments the value for the time period may be user specified.

In some embodiments the dataset timeout period may be enforced by the dataset image manager and or a volume image manager executing on any storage system . The dataset image manager may implement a dataset image timeout method discussed in relation to to enforce the dataset timeout period on the plurality of storage systems storing the dataset. If the dataset timeout period expires the dataset image manager may cause the dataset image method for producing the dataset image to stop abort as well as initiate an image cleanup procedure on the plurality of storage systems storing the dataset. In addition each volume image manager may execute a volume image method discussed in relation to for producing volume images of volumes of a dataset and implement a volume image timeout method discussed in relation to to enforce the dataset timeout period on the particular storage system on which the volume image manager executes and resides. If the dataset timeout period expires the volume image manager may cause the volume image method to stop abort as well as initiate an image cleanup procedure on the particular storage system.

The method then identifies at the plurality of storage systems that store the plurality of volumes that comprise the dataset. For example the method may determine a plurality of storage system IDs of the plurality of storage systems that store the dataset. As used herein an identified storage system may refer to a storage system that stores one or more volumes of the dataset. Note that the method may receive at a dataset start request specifying a plurality of volume IDs of the plurality of volumes that comprise the dataset but the dataset start request will typically not specify the storage systems storing the dataset. In some embodiments the method identifies the plurality of storage systems that store the dataset by using the configuration data structure as a look up or mapping table. For example for each volume ID of a volume specified in the dataset start request the method may determine a matching entry in the configuration data structure having a matching volume ID and identify the storage system ID in the matching entry as the storage system that stores the volume. In this manner the method may identify a plurality of storage system IDs of the plurality of storage systems that store the dataset.

The method then produces at a plurality of groupings sometimes referred to as buckets for the plurality of volumes of the dataset. For example each grouping bucket may comprise all volumes of the dataset that are stored on a same storage system. In this manner each grouping may represent a single storage system the grouping comprising one or more volumes of the dataset that are stored on the single storage system. As such the method organizes and divides at the plurality of volumes of the dataset into a plurality of groupings.

The method then produces at a new operation ID also referred to as a token ID for producing the dataset image. The operation ID may represent an overall dataset image operation for producing the entire dataset image for the dataset. The overall dataset image operation may comprise sub operations for producing the various volume images for the volumes comprising the dataset. The operation ID may comprise a unique identifier that uniquely identifies the overall operation for producing the dataset image among other possible overall operations for producing other dataset images of other datasets. In general the operation ID may be specified in communications between the application the dataset image manager and or the plurality of volume image managers to uniquely identify the overall dataset image operation that the communication pertains to.

The method then produces at a new dataset operation data structure DS corresponding to and being associated with the new operation ID and stores various data information needed for managing and producing the dataset image to the dataset operation DS . For example the method may store the data information determined in steps through to the dataset operation DS . Such data may include the operation ID start time and dataset timeout period for the overall dataset image operation the plurality of storage system IDs of the plurality of storage systems that store the dataset and or the plurality of groupings. The data information used for managing and producing the dataset image may be organized and stored in the dataset operation DS in various manners using any organizational structure.

In the exemplary dataset operation DS of the dataset comprises a plurality of volumes VID VID VID VID VID wherein volume VID is stored on a first storage system SSID volumes VID and VID are stored on a second storage system SSID and volumes VID and VID are stored on a third storage system SSID. As such a first grouping and a first grouping entry is produced to represent the first storage system the first grouping entry specifying the storage system ID SSID and the volume ID VID a second grouping and a second grouping entry is produced to represent the second storage system the second grouping entry specifying the storage system ID SSID and the volume IDs VID and VID and a third grouping and a third grouping entry is produced to represent the third storage system the third grouping entry specifying the storage system ID SSID and the volume IDs VID and VID .

The method then calls initiates at the dataset image timeout method . The dataset image timeout method may have access to the dataset operation DS and determine the start time and dataset timeout period. Using the start time and dataset timeout period from the dataset operation DS the dataset image timeout method may implement enforce the dataset timeout period on the method for producing the dataset image as discussed in relation to .

The method then sends at a volume start request to the volume image manager of each identified storage system for suspending one or more volumes of the dataset and begin producing volume images of one or more volumes of the dataset. The method may identify which storage systems to send the volume start request using the dataset operation DS wherein the method may identify select each storage system specified in the storage system ID data field. The volume start request may comprise a volume start application programming interface API call from the dataset image manager to the volume image manager of each identified storage system .

The volume start request sent to an identified storage system may specify all volumes or at least one volume of the dataset e.g. specify all volume IDs or at least one volume ID of the dataset . In some embodiments the volume start request specifies all volumes of the dataset whereby the volume image manager of each identified storage system determines which particular volumes of the dataset are stored to its particular storage system . In other embodiments the volume start request sent to an identified storage system may specify only those volumes of the dataset that are stored on the identified storage system . In these embodiments the method may use the dataset operation DS to produce the volume start request for each identified storage system to specify only those volumes listed in the volume ID data field. As such in these embodiments the method may produce and send at a plurality of different volume start requests to a plurality of identified storage systems each volume start request being customized adapted to each particular identified storage system .

In some embodiments each volume start request further specifies the operation ID the start time and the dataset timeout period . The operation ID may be used in interactions and communications between the dataset image manager and each volume image manager to uniquely identify the overall dataset image operation. The start time and the dataset timeout period may be used by each volume image manager to individually and separately enforce the dataset timeout period.

In some embodiments the volume image manager of each storage system maintains a volume operation data structure DS for storing various data information for managing and producing one or more volume images of one or more volumes of a particular dataset. For example the volume operation DS may store the operation ID the start time and the dataset timeout period associated with the particular dataset. In addition the volume operation DS DS may store volume IDs of one or more volumes of the particular dataset that are stored on the storage system . In this manner the operation ID may be used by the volume image manager to identify an overall dataset image operation and its corresponding volume operation DS storing the various data information for the overall dataset image operation.

In some embodiments the dataset image method may perform interactions and operations between the plurality of volume image managers in parallel. In these embodiments the method may send at the plurality of volume start requests to the plurality of identified storage systems simultaneously and in parallel to allow for faster execution of the dataset image method .

In some embodiments the volume start request sent to an identified storage system comprises a request to suspend and initiate begin producing volume images of all volumes of the dataset that are stored on the identified storage system . When a storage system has successfully completed suspending all volumes of the dataset stored on the storage system and initiated producing the volume images of all volumes of the dataset stored on the storage system the volume image manager on the storage system may send a volume start response to the dataset image manager . The volume start response may comprise the operation ID of the overall dataset image operation that the response pertains to.

The method then determines at that a volume start response has been received from each identified storage system that stores one or more volumes of the dataset. A volume start response from a storage system indicates that all volumes of the dataset stored on the storage system have been suspended and producing the volume images of the volumes has been initiated which is different than an indication that the volume images of the volumes have been completed . The method may determine step by using the dataset operation DS associated with the specified operation ID. For example when a volume start response is received from a storage system the method may indicate such in the grouping entry for the storage system. In the exemplary dataset operation DS of a volume start response data field in each grouping entry indicates whether or not a volume start response has been received from the storage system. When the method determines that all grouping entries in the dataset operation DS have a volume start response data field indicating that a volume start response has been received the method may determine at that a volume start response has been received from each identified storage system and thus all volumes of the dataset have successfully been suspended.

The method then sends at a dataset start response to the application indicating that all volumes of the dataset are suspended and volume images of all volumes of the dataset has been initiated. The dataset start response may comprise a response to the dataset start request received at from the application. The dataset start response is sometimes referred to as a resume response. The resume response further specifies the operation ID of the overall dataset image operation that the response pertains to. The application will be configured such that after receiving the dataset start request it resumes its other operations operations not related to I O operations to the volumes of its dataset only after it receives the resume response. As such by dividing the dataset image method into a start phase and a commit phase the application receives the resume response after the shorter start phase and may quickly resume its other operations. In addition to resuming its other operations the application will also be configured to send a data set commit request to the dataset image manager in response to receiving the resume response.

As such the method then receives at a dataset commit request from the application for managing and completing the dataset image. For example the dataset commit request may comprise a dataset commit application programming interface API call from the application. The dataset commit request further specifies the operation ID of the overall dataset image operation that the request pertains to. In some embodiments receiving the dataset commit request at initiates the commit phase of the method .

The method then sends at a volume commit request to the volume image manager of each identified storage system that stores one or more volumes of the dataset for completing volume images of the one or more volumes and for unsuspending restarting I O operations on volumes of the dataset. Each volume image manager after receiving the volume commit request ensures to completing any ongoing volume images and then it unsuspends restarts the I O operations immediately. With the volume commit request the method also queries each volume image manager if the volume images on the storage system were successful or not. The method may identify which storage systems to send the volume commit request by using the dataset operation DS corresponding to the operation ID specified in the received dataset commit request. Using the corresponding dataset operation DS the method may identify select each storage system specified in the storage system ID data field. The volume commit request may comprise a volume commit application programming interface API call from the dataset image manager to the volume image manager of each identified storage system . Each volume commit request may further specify the operation ID that the request pertains to. Using the operation ID the volume image manager of each identified storage system may identify the corresponding volume operation DS and determine the volume IDs of those volumes the volume commit request pertains to i.e. the volumes of the dataset that are stored to the storage system .

In some embodiments the dataset image method may perform interactions and operations between the plurality of volume image managers in parallel. In these embodiments the method may send at the plurality of volume commit requests to the plurality of identified storage systems simultaneously and in parallel to allow for faster execution of the dataset image method .

In particular the volume commit request may comprise a request for each identified storage system to determine and indicate the success or failure of producing volume images of each and all volumes of the dataset that are stored to the storage system . When the volume image manager of each identified storage system determines whether producing volume images of volumes of the dataset that are stored to the storage system is a success or failure the volume image manager sends a volume commit response to the dataset image manager . In some embodiments a volume commit response from a storage system that indicates a success status indicates that a volume image has been successfully produced for each and all of one or more volumes of the dataset that are stored to the storage system . In some embodiments a volume commit response from a storage system that indicates a failure status indicates that a volume image has not been successfully produced for one or more volumes of the dataset that are stored to the storage system .

The method determines at that a volume commit response has been received from each identified storage system that stores one or more volumes of the dataset. Each volume commit response may specify the operation ID of the overall dataset image operation that the response pertains to. As each volume commit response is received from a storage system the method may store the value of the volume commit response in the grouping entry for the storage system in the dataset operation DS corresponding to the received operation ID. In the exemplary dataset operation DS of a volume commit response data field in each grouping entry indicates whether a volume commit response indicates a success or failure status.

The method aborts stops at the dataset image timeout method described in relation to . As discussed above the dataset image timeout method is simultaneously executed for monitoring and implementing the dataset timeout period that may cause an abort stoppage of the dataset image method . However if the method has proceeded to this point this indicates that the method has determined whether the dataset image is a success or failure before the dataset timeout period expired. As such the monitoring and enforcing of the dataset timeout period by the dataset image timeout method is no longer needed and can be aborted stopped.

The method then determines at whether each and all received volume commit responses indicate a success status. If so the method determines at that the overall dataset image operation is successful and the dataset image of the dataset is successfully produced. As such the method sends at a dataset commit response to the application indicating that the dataset image of the dataset has been successfully produced. The dataset commit response may comprise a response to the dataset commit request received at from the application. The dataset commit response further specifies the operation ID of the overall dataset image operation that the response pertains to. The method then ends.

If the method determines at No that each and all received volume commit responses do not indicate a success status the method determines at that the overall dataset image operation is not successful and the dataset image of the dataset is not successfully produced. In these embodiments if even a single volume commit response is received that indicates a failure status the method determines that the overall dataset image operation is not successful. In this manner successful production of volume images of each and all volumes of the dataset are needed to determine that the dataset image of the dataset is successfully produced. As such the method sends at a dataset commit response to the application indicating that the dataset image of the dataset has not been successfully produced. The dataset commit response may comprise a response to the dataset commit request received at from the application. The dataset commit response further specifies the operation ID of the overall dataset image operation that the response pertains to.

If the dataset image is not successfully produced the method then initiates at a cleanup rollback procedure for deleting one or more volume images of one or more volumes of the dataset. In some embodiments the cleanup procedure may be used for deleting one or more volume images that were successfully produced on an identified storage system. Since the volume images were produced for an unsuccessful data image the volume images are no longer needed and unnecessarily consumes storage resources. As such the cleanup procedure provides automated removal of unneeded volume images that were produced for an unsuccessful data image. In some embodiments failed volume images that were unsuccessfully produced are typically already deleted by the storage system and thus typically do not require later removal by the cleanup procedure. In other embodiments failed volume images are also deleted by the cleanup procedure.

In some embodiments the method initiates at the cleanup procedure by sending a volume cleanup request to the volume image manager of each identified storage systems that stores one or more volumes of the dataset for removing volume images of the one or more volumes. The method may use the corresponding dataset operation DS to identify select each storage system specified in the storage system ID data field. The volume cleanup request may comprise a volume cleanup application programming interface API call from the dataset image manager to the volume image manager of each identified storage system . Each volume cleanup request may further specify the operation ID that the request pertains to. Using the operation ID the volume image manager of each identified storage system may identify the corresponding volume operation DS and determine the volume IDs of those volumes the volume cleanup request pertains to i.e. the volumes of the dataset that are stored to the storage system . In response the volume image manager of each identified storage system will delete one or more volume images of the one or more volumes of the dataset that are stored to the storage system . The method then ends. Note that steps of the method may be repeated for each dataset start request received from an application.

The method begins when it is initiated at by the dataset image method for monitoring and implementing a dataset timeout period for an overall dataset image operation for producing a dataset image for a dataset see step of .

The method then determines at a start time and dataset timeout period for completing the overall dataset image operation. In some embodiments the method may access the dataset operation DS corresponding to the overall dataset image operation and determine the start time and dataset timeout period . The start time may comprise an operation start time for producing the dataset image of the dataset. The dataset timeout period may comprise a maximum amount of time that is allowed permitted for producing the dataset image of the dataset. The dataset timeout period may be defined by and start from the start time.

The method then determines at whether the dataset timeout period has expired. The method may do so by determining whether there is no more remaining time in the dataset timeout period. In some embodiments the method may do so by using the following equation remaining time dataset timeout period current time start time . In these embodiments if the method determines at that the remaining time is equal to zero the method determines that the dataset timeout period has expired. If the method determines that the dataset timeout period has not expired the method continues at step to continually monitor the remaining time.

If the method determines at Yes the dataset timeout period has expired the method then aborts stops at the dataset image method of . Since the dataset timeout period has expired the dataset image method no longer needs to be executed and may be stopped.

The method then initiates at a cleanup rollback procedure for deleting one or more volume images of one or more volumes of the dataset. The cleanup procedure may be similar to the cleanup procedure of step of the dataset image method and is not discussed in detail here. In some embodiments the cleanup procedure may be used for deleting one or more volume images that were successfully produced on an identified storage system. The method may initiate at the cleanup procedure by sending a volume cleanup request to the volume image manager of each identified storage systems that stores one or more volumes of the dataset for removing volume images of the one or more volumes. The method may use the corresponding dataset operation DS to identify select each storage system specified in the storage system ID data field. In response the volume image manager of each identified storage system will delete one or more volume images of the one or more volumes of the dataset that are stored to the storage system .

The method then sends at a dataset commit response to the application indicating that the dataset image of the dataset has not been successfully produced. The dataset commit response may comprise a response to the dataset commit request received from the application. The dataset commit response further specifies the operation ID of the overall dataset image operation that the response pertains to. The method then ends.

The method begins when it receives at a volume start request from the dataset image manager see step of . In some embodiments receiving the volume start request initiates the start phase of the method . The volume start request may comprise a request for suspending one or more volumes of the dataset and begin producing volume images of one or more volumes of the dataset that are stored to the storage system . The volume start request may specify all volumes or at least one volume of the dataset e.g. specify all volume IDs or at least one volume ID of the dataset . In some embodiments the volume start request further specifies an operation ID a start time and a dataset timeout period. The operation ID may uniquely identify an overall dataset image operation for producing a dataset image of the dataset. The start time may comprise the start time for the overall dataset image operation for producing the dataset image of the dataset. The dataset timeout period may comprise a maximum amount of time that is allowed permitted for the overall dataset image operation to produce the dataset image. The start time and the dataset timeout period may be used by a volume image timeout method described in relation to to enforce the dataset timeout period.

The method then identifies at one or more volumes e.g. identifies one or more volume IDs of the dataset that are stored to the storage system the one or more identified volumes being the volumes that the volume start request pertains to. As used herein an identified volume may refer to a volume of the dataset that is stored to the storage system on which the method executes. In some embodiments the volume start request specifies all volumes of the dataset whereby the method identifies at which particular volumes of the dataset are stored to its storage system . In other embodiments the volume start request specifies only those volumes of the dataset that are stored on the storage system . In these embodiments the method identifies at all the volumes specified in the volume start request.

The method then produces at a new volume operation data structure DS for the operation ID and stores various data information needed for managing and producing the volume images to the volume operation DS . Such data may include the operation ID start time and dataset timeout period for the overall dataset image operation and volume IDs of the one or more identified volumes. In this manner the operation ID may be used by the method to identify an overall dataset image operation and its corresponding volume operation DS storing the various data information for producing volume images for the overall dataset image operation. As such only the operation ID may be needed in communications between the volume image manager and the dataset image manager without needing to continually include other data information such as start time dataset timeout period and or volume IDs . The data information used for managing and producing the volume images may be organized and stored in the volume operation DS in various manners using any organizational structure.

The method then calls initiates at the volume image timeout method . The volume image timeout method may have access to the volume operation DS and determine the start time and dataset timeout period. Using the start time and dataset timeout period from the volume operation DS the volume image timeout method may implement enforce the dataset timeout period on the method for producing the one or more volume images as discussed in relation to .

The method suspends at each identified volume of the dataset and begins producing a volume image for each identified volume of the dataset. The method may suspend an identified volume by operating in conjunction with the storage operating system to stop all input output I O operations for the volume which stops accesses e.g. read or write requests for the volume. As such no more write requests with be performed on the identified volumes after the volumes are suspended so as to prepare the volumes for imaging. After suspending the identified volumes the method initiates procedures for producing a volume image for each identified volume. An image may comprise a persistent point in time PPT view or image of data of a storage object such as a volume. An image may provide a read only copy of a storage object that protects against accidental deletions or modifications of data of the storage object. As such an image may comprise a persistent image of the exact state of the data of the storage object at a given point in time. An image may comprise a data backup of the storage object that may be used for example to restore recover the data of the storage object after data has been corrupted lost or altered. In some embodiments the method initiates at procedures for using Snapshot technology provided by NetApp Inc. for producing a volume image for each identified volume. In other embodiments the method initiates at procedures using other technologies for producing a volume image for each identified volume.

As each identified volume is suspended and a volume image has been initiated the method updates at the volume operation DS to indicate such. The method may do so by locating the volume entry for each identified volume and updating the data field for the volume start status to indicate that the volume is suspended and producing a volume image has begun. The method then determines at that all identified volumes have been suspended and producing a volume image has begun for all identified volumes. The method may do so by determining that the volume start status for the volume entry for each and all identified volumes indicates that the volume is suspended and a volume image has begun.

When the method has successfully completed suspending all volumes of the dataset stored on the storage system and initiated producing the volume images of all volumes of the dataset stored on the storage system the method sends at a volume start response to the dataset image manager to indicate such. The volume start response may comprise the operation ID of the overall dataset image operation that the response pertains to.

The method then receives at a volume commit request from the dataset image manager see step of . In some embodiments receiving the volume commit request initiates the commit phase of the method . The volume commit request may comprise a request for completing volume images of one or more identified volumes of the dataset that are stored to the storage system . In particular the volume commit request may comprise a request for each identified storage system to determine and indicate the success or failure of producing a volume image for each and all identified volumes of the dataset that are stored to the storage system . Each volume commit request may further specify the operation ID that the request pertains to. Using the operation ID the method may identify the corresponding volume operation DS and determine the volume IDs of those volumes the volume commit request pertains to i.e. the volumes of the dataset that are stored to the storage system .

When a volume image for an identified volume is successfully produced or fails the method updates at the volume operation DS to indicate such. The method may do so by locating the volume entry for the identified volume and updating the data field for the volume commit status to indicate whether the volume image for the volume is a success or a failure.

The method then determines at whether a commit status for the volume image for each and all identified volumes has been determined yet i.e. determined as either a success or a failure . The method may do so by locating the volume entries for each and all identified volumes and determining whether each and all volume commit status data fields indicate a success or a failure. If the status for volume images of each and all identified volumes has not been determined yet at No the method continues at step .

If the status for volume images of each and all identified volumes has been determined at Yes the method aborts stops at the volume image timeout method described in relation to . As discussed above the volume image timeout method is simultaneously executed for monitoring and implementing the dataset timeout period that may cause an abort stoppage of the volume image method . However if the method has proceeded to this point and reached step this indicates that the method has completed before the dataset timeout period expired. As such the monitoring and enforcing of the dataset timeout period by the volume image timeout method is no longer needed and can be aborted stopped.

The method then unsuspends at all the identified volumes. The method may do so by operating in conjunction with the storage operating system to resume input output I O operations for all identified volumes which allows accesses e.g. read or write requests for all identified volumes. Since a volume image has succeeded or failed on each identified volume the identified volumes no longer need to be suspended to produce volume images. Note that in other embodiments the method may unsuspend at all identified volumes if any volume image fails whereby the method may unsuspend all identified volumes without waiting for the status for volume images of all identified volumes.

The method then determines at whether the commit status for the volume image for each and all identified volumes is a success. The method may do so by locating the volume entries for each and all identified volumes and determining whether each and all volume commit status data fields indicate a success. If so the method sends at a volume commit response to the dataset image manager indicating a success status. In some embodiments a volume commit response from a storage system that indicates a success status indicates that a volume image has been successfully produced for each and all of one or more volumes of the dataset that are stored to the storage system . The volume commit response may also specify the operation ID of the overall dataset image operation that the response pertains to. The method then ends.

If the method determines at No that the commit status for the volume image for each and all identified volumes is not a success the method then initiates at a cleanup rollback procedure for deleting one or more volume images of one or more identified volumes. In some embodiments the cleanup procedure may be used for deleting one or more volume images that were successfully produced on the storage system. As such the cleanup procedure provides automated removal of unneeded volume images that were successfully produced. In some embodiments failed volume images that were unsuccessfully produced are typically already deleted by the storage system and thus typically do not require later removal by the cleanup procedure. In other embodiments failed volume images are also deleted by the cleanup procedure. The method may do so by operating in conjunction with the storage operating system to delete the volume images of all identified volumes the volume images being successful or failed.

The method sends at a volume commit response to the dataset image manager indicating a failure status. In some embodiments a volume commit response from a storage system that indicates a failure status indicates that a volume image has not been successfully produced for one or more volumes of the dataset that are stored to the storage system . The volume commit response may also specify the operation ID of the overall dataset image operation that the response pertains to. In these embodiments if even a single volume image fails producing the volume images of all the identified volumes is considered failed even for any successfully produced volume images. The method then ends.

As discussed above the dataset timeout period may be enforced by the dataset image manager and or any volume image manager executing on any storage system . Each volume image manager may execute a volume image method for producing volume images of volumes of a dataset and implement a volume image timeout method to enforce the dataset timeout period on the particular storage system on which the volume image manager executes and resides. If the dataset timeout period expires the volume image manager may cause the volume image method to stop abort as well as initiate an image cleanup procedure on the particular storage system.

The method begins when it is initiated at by the volume image method for monitoring and implementing a timeout period for producing one or more volume images of an overall dataset image operation for producing a dataset image of a dataset see step of . The method then determines at a start time and a dataset timeout period. In some embodiments the method may access the volume operation DS corresponding to the overall dataset image operation and determine the start time and dataset timeout period . The start time may comprise an operation start time for producing the dataset image of the dataset. The dataset timeout period may comprise a maximum amount of time that is allowed permitted for producing the dataset image of the dataset.

The method then determines at whether a timeout period dataset timeout period or volume timeout period has expired. The method may do so by determining whether there is no more remaining time in the dataset timeout period. If the method determines at that the remaining time is equal to zero the method determines that the timeout period dataset or volume timeout period has expired.

In some embodiments the method may do so by using the following equation remaining time dataset timeout period current time start time . In other embodiments the volume image manager of each storage system determines and uses a different timeout period referred to as a volume timeout period than the dataset timeout period. The volume timeout period may comprise the dataset timeout period minus a predetermined time amount that accounts for the time needed to send the volume commit response to the dataset image manager . As such the volume timeout period may be shorter in time that the dataset timeout period to account for the time needed to send the volume commit response to the dataset image manager . In these embodiments the method may determine at whether the timeout period has expired by determining whether there is no more remaining time in the volume timeout period by using the following equation remaining time volume timeout period current time start time wherein volume timeout period dataset timeout period predetermined time amount.

In some embodiments the predetermined time amount may be based on various factors such as the performance capabilities of the storage system that executes the volume image manager physical geographical distance between the storage system that executes the volume image manager and the computer system that executes the dataset image manager etc. As such the predetermined time amount may be different for different volume image managers and storage systems . For example a first volume image manager executing on a first storage system may have a first predetermined time amount and a first volume timeout period and a second volume image manager executing on a second storage system may have a second predetermined time amount and a second volume timeout period the first and second predetermined time amounts being different and the first and second volume timeout periods being different.

If the method determines at No that the timeout period has not expired the method continues at step to continually monitor the remaining time. If the method determines at Yes the timeout period has expired the method then unsuspends at all the identified volumes. The method may do so by operating in conjunction with the storage operating system to resume input output I O operations for all identified volumes which allows accesses e.g. read or write requests for all identified volumes. The method then aborts stops at the volume image method of . Since the timeout period has expired the volume image method no longer needs to be executed and may be stopped.

The method then initiates at a cleanup rollback procedure for deleting one or more volume images of one or more identified volumes that are stored to the storage system . The cleanup procedure may be similar to the cleanup procedure of step of the volume image method and is not discussed in detail here. In some embodiments the cleanup procedure may be used for deleting one or more volume images that were successfully produced on the storage system. The method may do so by operating in conjunction with the storage operating system to delete the volume images of all identified volumes the volume images being successful or failed. The method then ends.

As discussed above the dataset image method at step and or the dataset image timeout method at step may initiate a cleanup rollback procedure if the dataset image is not successfully produced within a dataset timeout period. The cleanup procedure may be initiated on a plurality of storage systems for deleting volume images of volumes of the dataset that are stored across the plurality of storage systems . For example the cleanup procedure may be initiated by sending a volume cleanup request to the volume image manager of each storage system that stores one or more volumes of the dataset.

The method begins when it receives at a volume cleanup request from the dataset image manager . The volume cleanup request may specify the operation ID that the request pertains to. Using the operation ID the method then identifies at the corresponding volume operation DS and identifies the volume IDs of those volumes the volume cleanup request pertains to i.e. the volumes of the dataset that are stored to the storage system .

The method then deletes at one or more volume images of the one or more identified volumes of the dataset that are stored to the storage system . In some embodiments the method may delete one or more volume images that were successfully produced on the storage system. In other embodiments failed volume images that were unsuccessfully produced are typically already deleted by the storage system and thus typically do not require later removal by the method . In other embodiments failed volume images are also deleted by the method . The method may do so by operating in conjunction with the storage operating system to delete the volume images of all identified volumes the volume images being successful or failed. The method then ends.

As such even after a volume image manager successfully executes the volume image method for producing volume images of all identified volumes stored on the storage system within the timeout period in some situations the method may still delete the successful volume images produced on the storage system. This may occur for example if the timeout period expired before volume images of volumes of the dataset on another storage system were successfully produced and or volume images of volumes of the dataset on another storage system had failed thus causing the dataset image method at step and or the dataset image timeout method at step to initiate the cleanup rollback procedure on all the identified storage systems. This in turn may cause an identified storage system that successfully produced all volume images of all identified volumes within the timeout period to delete all the successful volume images due to the failure of another identified storage system.

Some embodiments may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings herein as will be apparent to those skilled in the computer art. Some embodiments may be implemented by a general purpose computer programmed to perform method or process steps described herein. Such programming may produce a new machine or special purpose computer for performing particular method or process steps and functions described herein pursuant to instructions from program software. Appropriate software coding may be prepared by programmers based on the teachings herein as will be apparent to those skilled in the software art. Some embodiments may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art. Those of skill in the art would understand that information may be represented using any of a variety of different technologies and techniques.

Some embodiments include a computer program product comprising a computer readable medium media having instructions stored thereon in and when executed e.g. by a processor perform methods techniques or embodiments described herein the computer readable medium comprising instructions for performing various steps of the methods techniques or embodiments described herein. The computer readable medium may comprise a non transitory computer readable medium. The computer readable medium may comprise a storage medium having instructions stored thereon in which may be used to control or cause a computer to perform any of the processes of an embodiment. The storage medium may include without limitation any type of disk including floppy disks mini disks MDs optical disks DVDs CD ROMs micro drives and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices including flash cards magnetic or optical cards nanosystems including molecular memory ICs RAID devices remote data storage archive warehousing or any other type of media or device suitable for storing instructions and or data thereon in.

Stored on any one of the computer readable medium media some embodiments include software instructions for controlling both the hardware of the general purpose or specialized computer or microprocessor and for enabling the computer or microprocessor to interact with a human user and or other mechanism using the results of an embodiment. Such software may include without limitation device drivers operating systems and user applications. Ultimately such computer readable media further includes software instructions for performing embodiments described herein. Included in the programming software of the general purpose specialized computer or microprocessor are software modules for implementing some embodiments.

Those of skill would further appreciate that the various illustrative logical blocks circuits applications modules algorithms techniques processes or method steps of embodiments described herein may be implemented as computer electronic hardware computer software or combinations of both. To illustrate this interchangeability of hardware and software various illustrative components blocks applications modules circuits and steps have been described herein generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the embodiments described herein.

The various illustrative logical blocks applications modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a graphics processing unit GPU a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The applications modules algorithm techniques processes or methods described in connection with embodiments disclosed herein may be embodied directly in computer hardware configured to perform the embodiments disclosed herein in software executed by a processor or in a combination of the two. In some embodiments any software application program tool module or layer described herein may comprise an engine comprising hardware software or a combination of the two configured to perform embodiments described herein. In general functions of a software application program tool module or layer described herein may be embodied directly in hardware or embodied as software executed by a processor or embodied as a combination of the two.

A software application layer or module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read data from and write data to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user device. In the alternative the processor and the storage medium may reside as discrete components in a user device.

While the embodiments described herein have been described with reference to numerous specific details one of ordinary skill in the art will recognize that the embodiments can be embodied in other specific forms without departing from the spirit of the embodiments. Thus one of ordinary skill in the art would understand that the embodiments described herein are not to be limited by the foregoing illustrative details but rather are to be defined by the appended claims.

