---

title: Modifying a document at a script processing server using a client device's state information
abstract: Before delivery to a user device, a document such as a hypertext markup language (HTML) file which includes one or more scripting elements is pre-processed by a processing server. The processing server renders the document to generate a processed document. The processing includes execution of one or more scripts in the document, including loading and initializing. This execution generates HTML fragments which are inserted into a document object model (“DOM”) tree. The processed document is sent along to the user device, which may quickly render the processed document and paint to a display or otherwise present output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645983&OS=09645983&RS=09645983
owner: Amazon Technologies, Inc.
number: 09645983
owner_city: Reno
owner_country: US
publication_date: 20130618
---
User devices may be used to access web pages electronic books eBooks audio video or other documents. These documents may include or otherwise reference elements known as widgets which may use a scripting language to provide various functionality to the user.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

Users with user devices access a wide variety of information and services. Internet merchants service providers and so forth provide various user interfaces with which the users may interact. As the sophistication of users continues to increase user interfaces continue to become more sophisticated as well. This sophistication may result in increased complexity with regard to various elements in the user interface such as user controls input processing and so forth. These elements may include web page widgets widgets or other equivalent constructs which use scripts to provide functionality. The scripts provide rich functionality which may be platform agnostic such that a variety of different user devices may use the scripts. The scripts may be considered programmatic expressions in an intermediate language which is compiled at runtime on the executing device.

A particular web page such for a web merchant may include many widgets. Traditionally these scripts have been executed on the user device by a script engine module. During execution the script is initialized and data or other resources which are called by the widget may be requested and received. Different scripts may require different lengths of time to initialize as well as availability of different resources to initialize. As a result presentation of the web page which includes widgets or other scripts may experience delays. These delays may result in an adverse user experience while the user waits for the web page to load.

Described in this disclosure are systems and techniques for using a processing server to generate a processed document which may be provided to the user device. The processing server accepts unprocessed documents which include one or more pieces of hypertext markup language HTML code or another markup language and one or more scripts. A rendering module on the processing server processes the HTML to generate a document object model DOM tree. A script engine module also on the processing server executes one or more of the scripts. The processing server is configured to act during rendering and script execution as if it was the user device. This may include simulating or constraining these operations based on hardware and software resources available on the user device passing along data identifying a particular user device or user logged into that device and so forth. As a result the execution of the script includes initialization and the corresponding setup for execution.

Execution of the script by the script engine module results in generation of one or more HTML fragments which express the functionality described by the scripts. The HTML fragments are then inserted into the DOM tree. The processed document is made up of at least the DOM tree and the HTML fragments which have been inserted therein.

The user device receives the processed document. Because the script engine module of the processing server has already executed the script and generated the associated HTML fragments the user device need not execute the script. Instead a rendering module of the user device uses the HTML fragments to provide the associated functionality on the user device. As a result the user may experience a reduction in the latency or delay in painting or presenting elements of the processed document to output devices of the user device compared to the presentation of the unprocessed document.

In some implementations the unprocessed document may include more than one script. For performance or other reasons a subset of those scripts may be executed by the processing server and provided as HTML fragments. In this implementation some scripts may be passed by the processing server and remain as scripts in the processed document for eventual execution locally on the user device. For example a first script configured to present a complex interactive user interface element may be processed into HTML fragments while a second script which is configured to accept keyboard input may be passed through into the processed document. The first script is executed on the processing server while the second script is executed on the user device. In these implementations the user device may have a script engine module as well to provide for the local execution of the scripts.

The processing server may be able to execute and initialize the scripts more quickly than the user device due to significantly greater availability to various resources. These resources may include processor computational capability memory network bandwidth priority access to the web server data storage servers and so forth. As a result the processing server is able to more quickly execute the script generate the HTML fragments and pass along the processed document which then may be presented by the user device.

Furthermore because the processing server with greater resources than the user device is available more complicated or resource intensive scripts may be used and deployed to the user devices than would otherwise be possible. For example a complex script may execute on the user device in ten seconds but may be executed and provided by the processing server in two seconds. As a result the user device in conjunction with the processing server is able to provide a user experience which would otherwise be operationally infeasible by the user device alone.

Using the techniques described in this disclosure the user experience is improved. Time to paint or otherwise present output is reduced. Documents which include scripts that would otherwise be infeasible to execute on the particular user device may still be presented. As a result users are more easily able to consume content such as web pages electronic books and so forth.

The user device includes a rendering module . The rendering module is configured to accept input such as one or more files expressed in a markup language including but not limited to hypertext markup language HTML . The rendering module takes input and provides a presented document to one or more output devices such as a display speaker haptic output device and so forth. For example in the case of visual output the rendering module takes the input and paints or otherwise provides an image for the display to output. In some implementations the user device may include a script engine module as described below.

The rendering module may be a standalone module or may be incorporated into other modules or applications such as a web browser. The rendering module may also be known as a layout engine web browser engine and so forth. One example of a rendering module is WebKit as promulgated at www.webkit.org.

The user device is configured to couple to one or more networks . The networks may include a wireless wide area network WWAN wireless local area network WLAN cabled local area network LAN personal area networks PAN and so forth. For example the network may couple to the Internet or other data service enabling the transmission of information.

The user device may be configured to send using the network one or more requests. These requests may be for a resource such as a document to be returned to the user device . A first request may include information such as a cookie which provides state information which may be of use to a service processing the first request . For example the cookie may include information about the identity of the user logged into the user device information of the last document provided to the user device and so forth. The first request may also include other information such as a uniform resource locator URL uniform resource identifier URI information about the user device and so forth. For example the first request may include information about screen resolution speaker configuration haptic output capabilities and so forth of the user device .

The user device sends the first request to another device such as a processing server . The processing server includes a processing module a rendering module and a script engine module . These modules are discussed in more detail below. The processing server is configured to act as an intermediary between the user device and a web server . In some implementations the processing server may perform other functions such as those of a load balancer proxy server caching device indexing server and so forth.

The processing module mediates the interaction between the user device and the web server . For example the processing module may accept the first request which includes the cookie from the user device and provides that information as a second request to the web server . The second request may be based at least in part on the first request . For example the second request may include the cookie as provided in the first request . The second request may differ from the first request in indicating compatibility with a particular type of rendering module script engine module modifying destination addresses and so forth.

The web server includes a web server module . The web server module is configured to receive requests and provide one or more actions based on the requests. For example the web server module may comprise the Apache HTTP server as promulgated by www.apache.org. The actions taken by the web server module may include storing data retrieving data and so forth. Responsive to receiving the second request the web server module returns one or more unprocessed documents to the processing server . As described below with regard to in some implementations the web server may receive the first request from the user device and may send the unprocessed document to the processing server rather than returning the unprocessed document to the user device .

The unprocessed document may include or is associated with one or more components. These components may include markup language files containing data expressed in one or more of extensible markup language XML voice XML VXML standard generalized markup language SGML or hypertext markup language HTML . While HTML is depicted it is understood that in other implementations other markup languages may be used in addition to or instead of HTML. The unprocessed document may include one or more other components such as cascading style sheets CSS scripts and so forth. The scripts comprise a client side script which is configured to execute on a script engine module of the user device . The script is configured to execute on the user device rather than a server such as the web server . In some implementations the script may be described as a client side script as compared to a server side script which is configured to execute on a server as part of a process of providing unprocessed documents . In some implementations the script or script may comprise JavaScript. JavaScript is promulgated by Netscape Communications of Mountain View Calif.

The processing server is configured to process the unprocessed document . The processing module accepts the unprocessed document and proceeds to process the unprocessed document using the rendering module and the script engine module . The rendering module as described above is configured to use input comprising the HTML or other markup language the CSS and so forth to provide output which is configured to be presented to the user by the user device . The rendering module executing on the processing server may be configured to operate as a headless browser which renders the markup language without presentation to the user. In one implementation the rendering module may execute on a server which does not have a user accessible display upon which the rendered content may be presented.

The script engine module executes one or more of the scripts or a portion thereof. In one implementation the script engine module may comprise PhantomJS as promulgated by www.phantomjsorg. The script engine module is configured to process the scripts into code which is executable on the device on which the script engine module is executing such as the processing server or the user device . In some implementations the rendering module and the script engine module on the processing server may be configured to render the unprocessed document in such a fashion as to mimic the behavior of the user device . For example the script engine module may initialize the script using information included in the first request such as device state data device capabilities and so forth.

The processing module based on output from the rendering module and the script engine module generates a processed document . During processing the rendering module may generate a document object model DOM tree or other user interface model from the markup language such as the HTML . At least a portion of the user interface model may be expressed using a markup language such as HTML. The user interface model may provide an interface which is neutral with regard to platform or markup language. The user interface model may allow applications or scripts to dynamically access and update one or more of the content structure or style of documents. In some implementations the user interface model may provide an application programming interface API for documents containing markup language such as HTML scripts and so forth. The terms DOM tree and HTML are used for ease of discussion and not necessarily by way of limitation. For example in other implementations the user interface model may be a data structure other than the DOM tree .

During execution of the script the script engine module generates one or more HTML fragments . These HTML fragments are configured to be used by the rendering module on the user device to present information to the user receive input from the user and so forth.

In some implementations at least a portion of the script from the unprocessed document may be left unexecuted or preserved in script form. For example a particular script may be designated for execution on the user device rather than the processing server .

The processed document is provided to the user device . The rendering module accepts the processed document and uses the previously generated DOM tree with the included HTML fragments to provide the presented document . For those scripts which have been processed and provided as HTML fragments the time to present or paint the presented document may be significantly reduced. In some implementations the user device may include a script engine module which is configured to execute the scripts which have not been pre processed such as illustrated here.

In some implementations the functions of the web server and the processing server may be combined. For example the web server may incorporate the processing module the rendering module and the script engine module .

The processing server may provide processed documents to other devices or modules such as an indexing module. An indexing module such as used by a search engine is configured to scan documents and build or update searchable data structures. Elements of unprocessed documents such as the script may be inaccessible or unparseable by these indexing modules. For example information presented as part of a user interface element using JavaScript may not be indexed by the indexing module. The indexing module may be configured to use the processing module to generate one or more of the processed documents which may then be indexed.

In this illustration time to first present the presented document is illustrated as increasing along a vertical axis. This may be the time to first paint graphical elements on the display of the user device . The output of the presented document may be ongoing that is as elements of the processed document continue to be received the presented document may be updated. The unprocessed document is depicted as requiring a time A from start of execution until first elements are output such as painted to the display or emitted by a speaker. As described above the process of executing the script may use various resources such as memory processor time calls to other devices or services and so forth.

In comparison the processed document as rendered by the rendering module of the user device exhibits a time to first presentation of B which is less than A . Because the scripts have been processed as by the processing server into the HTML fragments they are more quickly and readily used by the rendering module of the user device to provide the presented document . As a result use of the processing server may result in significant time savings in providing a first presentation of the presented document to the user. This reduction in time may improve the user experience.

At the second request is sent to one or more web servers . For example the second request may be sent using the network . The processing server the web server and other devices described herein may be owned or operated by different entities. For example a network carrier or hardware provider may operate the processing server while the web server may be operated by an online merchant.

At the one or more web servers process the second request . For example the web servers may use information in a uniform resource locator in the second requests information from the cookie and so forth to determine which of the unprocessed documents to provide.

At the web server sends the unprocessed document to the processing server . At the processing module of the processing server uses the rendering module and the script engine module to generate the processed document as described above.

At the processing server sends the processed document to the user device . The user device receives the processed document and at presents the processed document using the HTML fragments as the presented document . As described above in some implementations the processed document may include one or more scripts which have not been transformed into HTML fragments . In these implementations a script engine module which is locally stored and executed on the user device may be used to execute these scripts .

At the user device sends the first request to the web server . At the web server processes the first request . The web server may determine a destination for a response. The destination may be determined based on one or more of information which is included in the first request previously stored settings and so forth. For example the first request may include a tag or data field which indicates that the unprocessed document is to be passed along to the processing server . In another example an administrator may configure the web server to provide the unprocessed document to the processing server by default. This configuration may be dynamic or static. For example dynamic configuration may be to determine when a particular user device has repeatedly requested a page reload within a predetermined period of time and send responses associated with that device to the processing server for handling.

At the unprocessed document is sent to the processing server . At the processing module of the processing server uses the rendering module and the script engine module to generate the processed document as described above.

In the implementation depicted here at the processing server may send the processed document to the web server . The web server receives the processed document .

At the web server sends the processed document to the user device . The user device receives the processed document . At the user device presents the processed document using the HTML fragments as the presented document . As described above in some implementations the processed document may include one or more scripts which have not been transformed into HTML fragments . As above in these implementations a script engine module which is locally stored and executed on the user device may be used to execute these scripts .

Returning to in another implementation the processing server may send the processed document to the user device . The user device receives the processed document which presents the processed document as described above. In this implementation the processing server may use the destination in the first request to establish communication with the user device .

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a camera a microphone a touch sensor a button and so forth. The I O devices may also include output devices such as one or more of a display audio speakers haptic output devices and so forth. The display may comprise an electrophoretic display projector liquid crystal display interferometric display light emitting diode display and so forth. In some embodiments the I O devices may be physically incorporated with the user device or may be externally placed.

The user device may also include one or more communication interfaces . The communication interfaces are configured to provide communications with the user device the processing server the web server routers access points other servers and so forth. The communication interfaces may include devices configured to couple to one or more networks including PANs LANs WLANs WANs WWANs and so forth.

The user device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the user device .

As shown in the user device includes one or more memories . The memory comprises one or more computer readable storage media CRSM . The CRSM may be any one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the user device .

The memory may include at least one operating system OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module is configured to provide one or more user interface elements to the user with the I O devices and to accept inputs received from the I O devices . The user interface may include one or more visual audible or haptic elements. For example the user interface may be configured to provide a graphic user interface an audible user interface and so forth. The user interface may be configured to present the presented document using the I O devices .

A communication module is configured to support communication between the user devices the processing server the web server and so forth using the network . One or more application modules may include one or more of eBook readers browsers calculators word processors spreadsheets slideshow presenters drawing programs and so forth.

As described above the rendering module is configured to accept input such as one or more files expressed in a markup language and provide the presented document to one or more output devices such as a display speaker haptic output device and so forth. The rendering module may be standalone module or may be incorporated into other modules or applications such as a web browser. During operation the rendering module generates the DOM tree .

In some implementations the memory may also include a script engine module which is configured to execute on the user device . The script engine module may be used to process the scripts which are included in the processed document and have not been transformed into HTML fragments by the processing server .

Other modules may also be present. For example a digital rights management module may provide support for presenting or processing content protected using one or more digital rights management schemes.

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

As depicted here the datastore may store the cookie the processed document and so forth. Other data may also be stored. For example the other data may include user preferences configuration files and so forth.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a keyboard mouse and so forth. The I O devices may also include output devices such as indicator lights a display for use by administrative or maintenance personnel a printer and so forth. In some embodiments the I O devices may be physically incorporated with the processing server or may be externally placed.

The processing server may also include one or more communication interfaces . The communication interfaces are configured to provide communications with the user device the web server routers access points other servers and so forth. The communication interfaces may include devices configured to couple to one or more networks including PANs LANs WLANs WANs WWANs and so forth.

The processing server may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the processing server .

As shown in the processing server includes one or more memories . The memory comprises one or more CRSM. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the processing server .

The memory may include at least one OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module may be configured to provide one or more application programming interfaces web interfaces and so forth. The user interface module is configured to accept inputs and send outputs using the I O interfaces the communication interfaces or both.

A communication module is configured to support communication with the user device the web server and so forth using the network . In some implementations the communication module may support encrypted communications. For example hypertext transport protocol secured HTTPS or transport layer security TLS may be supported.

The processing module is configured to coordinate the activities of the rendering module the script engine module and so forth. The processing module may be configured to process the first requests generate the second requests and so forth. In some implementations the processing module may be configured to work in conjunction with a proxy server caching server or other device or system. In these implementations the processed documents may be stored and provided to requestors instead of the unprocessed documents .

As described above the rendering module is configured to accept input such as one or more files expressed in a markup language and provide output configured for presentation. As described above the rendering module executing on the processing server may comprise a headless browser. The rendering module may be a standalone module or may be incorporated into other modules or applications. During operation the rendering module generates the DOM tree . In some implementations a plurality of rendering modules may be present on the processing server . For example a first rendering module may be based on WebKit while a second rendering module is based on Trident as promulgated by Microsoft Corp. of Redmond Wash. while a third rendering module is based on Gecko as promulgated by the Mozilla Foundation of Mountain View Calif. Different rendering modules may be selected based on different criteria. The first request may include information about what rendering module is available locally on the user device . Based at least in part on this data the corresponding rendering module may be selected. For example the user device may use the Gecko rendering module and the processing module may select and use the corresponding Gecko rendering module on the processing server while generating the processed document .

As described above the script engine module is configured to execute one or more of the scripts or a portion thereof. The rendering module and the script engine module on the processing server may be configured to render the unprocessed document in such a fashion as to mimic the behavior of the user device . For example the rendering module and the script engine module may be configured to appear as though they are executing on the user device .

Similar to that described above with regard to the rendering module in some implementations a plurality of different script engine modules may be presented. For example script engine modules may include the Rhino JavaScript engine promulgated by the Mozilla Foundation V8 as promulgated by Google of Mountain View Calif. and so forth. Different script engine modules may be selected for use in generating the processed document . For example a data structure may associate the scripts from a particular web server or entity with a particular script engine module . In one implementation selection of the script engine module used may be based on performance such as which script engine module will generate the HTML fragments faster which uses fewer resources and so forth.

As described above by providing the HTML fragments which are inserted into the DOM tree of the processed document the user device may provide the presented document which includes elements based on script but for which the user device does not have a corresponding script engine module . For example the script may be in a version of JavaScript which is not supported by the script engine module of the user device or the user device may omit the script engine module . However the rendering module is able to process the HTML fragments allowing the presented document to include features or elements which would not otherwise be supported by the user device .

Other modules may also be present. In one implementation a language translation module may be configured to provide translation between a first human natural language of the unprocessed document and a second human natural language for the processed document . For example the web server may only provide web pages as unprocessed documents in Dutch while the processed document includes the text translated to English.

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

As depicted here the datastore may store the unprocessed document the processed document and so forth. Other data may also be stored. For example the other data may include information designating the use of a particular rendering module script engine module and so forth when generating the processed document .

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a keyboard mouse and so forth. The I O devices may also include output devices such as indicator lights a display for use by administrative or maintenance personnel a printer and so forth. In some embodiments the I O devices may be physically incorporated with the web server or may be externally placed.

The web server may also include one or more communication interfaces . The communication interfaces are configured to provide communications with the user device the processing server routers access points other servers and so forth. The communication interfaces may include devices configured to couple to one or more networks including PANs LANs WLANs WANs WWANs and so forth.

The web server may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the web server .

As shown in the web server includes one or more memories . The memory comprises one or more CRSM. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the web server .

The memory may include at least one OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module may be configured to provide one or more application programming interfaces web interfaces and so forth. The user interface module is configured to accept inputs and send outputs using the I O interfaces the communication interfaces or both.

A communication module is configured to support communication with the user device the web server and so forth using the network . In some implementations the communication module may support encrypted communications. For example hypertext transport protocol secured HTTPS or transport layer security TLS may be supported.

The web server module is configured to receive requests and provide one or more actions based on the requests. For example the web server module may comprise the Apache HTTP server as promulgated by www.apache.org. The actions taken by the web server module may include storing data retrieving data and so forth. Responsive to receiving a request such as the first request or the second request the web server module may be configured to return one or more unprocessed documents to the processing server .

Other modules may also be present. In one implementation an authentication module may be configured to authenticate a particular user or user device . For example the authentication module may inspect the cookie for identifying information and use that information to identify a corresponding user account if any exists.

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

The datastore may store the first request the second request the cookie and so forth. The datastore may also include one or more of the unprocessed documents . As described above the unprocessed documents may include markup language files like XML or HTML CSS files scripts and so forth. Other data may also be stored. For example the other data may include configuration data user account information and so forth.

While the processing server and the web server are described above in terms of a single device the same or similar functionality may be provided by one or more devices such as a server cluster virtual server and so forth. For example the processing module the rendering module the script engine module the web server module and so forth may be executed on virtual servers in a distributed computing environment accessing data such as the unprocessed documents which are stored in distributed storage servers.

Block receives the first request for a document from the user device . As described above the document may comprise markup language and one or more scripts . For example the user device may have requested a web page which includes various widgets to provide functionality such as presenting advertisements receiving user input and so forth. As described above the first request may include one or more cookies .

Block generates the second request based at least in part on the first request . For example where the processing server is acting as an intermediary the processing server may generate the second request using information such as the cookie . Where the first request includes a cookie the cookie or data based on the cookie may be included in the second request .

Block provides the second request to the web server . For example the processing server may send the second request to the web server using the network .

As described above with regard to in some implementations the user device may send the first request to the web server . The processing server the web server or both may be configured to receive address information which is indicative of the user device . For example the address information may comprise an Internet Protocol address.

Block receives the unprocessed document from the web server . As described above the unprocessed document may include one or more of HTML or another markup language CSS data script and so forth. In some implementations the unprocessed document may be associated with script . For example the unprocessed document may include a reference address network location URL and so forth which refer to a particular script .

Block renders the HTML of the unprocessed document . For example the rendering module may be configured to process the HTML or other markup language in the unprocessed document .

Block based on the rendering generates the user interface model such as the DOM tree . The user interface model is based on the markup language such as the HTML CSS and so forth. The generation of the DOM tree may be accomplished by processing the unprocessed document using a headless browser configured to render the content without presentation on a display for use by a user.

Block modifies at least a portion of the user interface model such as the DOM tree based on execution of the script . For example the script engine module may execute one or more of the one or more scripts . . . S in the unprocessed document . The scripts may comprise instructions expressed in a fashion compliant with JavaScript ECMAScript as promulgated by Ecma International and described in the ECMA 262 and ISO IEC 16262 specifications and so forth.

The execution of the script may involve initializing the script . This initialization process may set up an initial state for one or more variables used by the script may determine available resources for execution and so forth. The execution may also include retrieval of one or more elements indicated by the script . For example the script may call for various display elements user interface elements graphics controls data access elements hardware control elements and so forth which are used by the script during operation. In one implementation the retrieval may include performing one or more Asynchronous JavaScript and XML AJAX transactions.

As described above the processing server may have a plurality of different script engine modules . The processing of the scripts may include determining the rendering module the script engine module or both which produces an output compatible with or equivalent to the rendering module rendering engine module or both configured to execute on the user device .

The script engine module generates one or more markup language fragments such as the HTML fragments from execution of the one or more scripts . These markup language fragments may be inserted into the user interface model. For example the HTML fragments may be inserted into the DOM tree . In other implementations existing markup language fragments in the user interface model may be modified based at least in part on the markup language fragments.

Block stores the processed document which is made up of the user interface model and the markup language fragments. In some implementations the markup language fragments may be inserted into or otherwise incorporated within the user interface model data structure. For example the processed document may include the DOM tree and the HTML fragments . In some implementations the processed document may include one or more scripts which are configured to be executed by the script engine module executing on the user device .

As described above with regard to the processed document is configured such that a time to render on the user device is less than a time to render the unprocessed document on the user device .

Block sends the processed document to the user device . For example the processing server may use a network address associated with the first request and send the processed document using the network . As described above the user device is configured to present the processed document with one or more output devices such as the speakers display and so forth. In some implementations the user interface model alone such as the DOM tree may be sent to the user device .

As described above in some implementations address information may be received by the processing server the web server or both. The processed document may be sent to this address. For example as described above with regard to the user device may send the first request to the web server . In one implementation the web server may send the unprocessed document to the processing server receive the processed document back and provide the processed document to the user device . In another implementation the web server may send the unprocessed document to the processing server . The processing server in turn provides the processed document to the user device .

Block generates a request for a document. For example the user may have selected a control in a user interface requesting a particular web page at a URL.

Block sends the request. In one implementation as described above with regard to the request may be sent to a first server such as the processing server . The processed document may then be received from the first server. For example the first request may be sent to the processing server which in turn responds to the user device with the processed document . In another implementation as described above with regard to the request is sent to a first server such as the web server and the processed document is received from a second server such as the processing server .

Block receives a first portion of the processed document . As described above the processed document may include the user interface model and one or more markup language fragments. For example the processed document may comprise the DOM tree having one or more HTML fragments inserted therein. As described above the markup language fragments may be based at least in part on execution of one or more scripts by the script engine module . For example the HTML fragments may be based at least in part on execution of one or more portions of JavaScript.

Block presents the first portion of the processed document to one or more of a display speaker or haptic output device. For example the presented document may include various widgets which utilize JavaScript.

Another block not depicted here may receive a second portion of the processed document . This second portion may be presented to one or more of a display speaker or haptic output device. For example a large graphic file may be presented successively or after the file has been completely transferred to the user device .

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above can be eliminated or taken in an alternate order. Moreover the methods described above may be implemented as one or more software programs for a computer system and are encoded in a computer readable storage medium as instructions executable on one or more processors.

The computer readable storage medium can be any one of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. Separate instances of these programs can be executed on or distributed across separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations.

Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art and it is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

