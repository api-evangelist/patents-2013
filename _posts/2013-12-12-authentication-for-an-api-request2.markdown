---

title: Authentication for an API request
abstract: Technology for managing an API request is described. In an example implementation, an authentication service may receive a request to access a service. The authentication service may be configured to determine a proximity of a client device from which the request originated to the service. The authentication service may be further configured to grant the request based in part on the determined proximity of the client device to the service with respect to a policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09602482&OS=09602482&RS=09602482
owner: Amazon Technologies, Inc.
number: 09602482
owner_city: Seattle
owner_country: US
publication_date: 20131212
---
Network based services exist that allow customers to purchase and utilize virtual computing resources such as virtual machine instances on a permanent or as needed basis. In addition to virtual machine instances these services typically allow customers to purchase and utilize other types of computing resources for use with the virtual machine instances. For example customers may be permitted to purchase and utilize virtual data storage virtual networking resources and other types of virtual resources.

The use of third party network based services may be convenient for many customers wishing to avoid the work and expense of establishing and maintaining similar services. For example some network based services may utilize dozens of data centers around the world hundreds of thousands or even millions of server computers along with large numbers of networking components software applications and other types of resources.

Communications between network based services and customer devices may be performed in a number of ways including API application programming interface calls remote function calls or other types of network based communications. However security precautions may be desirable to prevent unauthorized devices from accessing the service or otherwise compromising the information communicated between the service and the customer devices.

The present technology may be used to manage and authenticate API Application Programming Interface requests. For example an API request may be received at an authentication service. The API request may include authentication material generated by a token service based in part on a network traversal of packets between a client device to the token service. The authentication material may be authenticated by comparing the authentication material in the API request with an authentication policy. A response to the API request may be generated based in part on a result of comparing the authentication information in the API request with the authentication policy and the authentication policy may include a network traversal restriction to restrict authentication of the authentication material based on the network traversal of the API request.

In another example a system for managing API requests may include any number of computing nodes each of which may include at least one processor and a memory. The computing node s may be configured to collectively implement a local network usable to access a service provider environment that may provide a service such as a virtual compute service storage service or the like and which may be offered by a service provider. The service provider environment may be external to the local network. The system may be implemented to include or use a first communication protocol usable from the local network to reach the virtual compute service. The system may further be implemented to include or use a second communication protocol usable by clients connected to the local network and unusable by clients external to the local network. A token service may be hosted on the local network to generate authentication material for the client to include with an API request for the virtual compute service. The client may receive the authentication material using the second protocol and may send the API request containing the authentication material to the virtual compute service using the first protocol.

In another example the technology may operate as a system for sending an API request. The system may operate as or include a token service hosted on a customer network such as a local area network LAN or wide area network WAN for example to generate authentication material for the API request based at least in part on a network traversal of packets from a client device to the token service. The token service may communicate with clients on the customer network over a communication protocol routable over the customer network and non routable over the internet or externally from the customer network. The token service may utilize a policy stored in a policy data store for determining whether or how to generate or send the authentication material for the API request based on the network traversal of the packets from the client device.

In another example the technology may operate as a system for receiving an API request. For example the system may operate as or include an authentication service to receive a request to access a service from a service provider. The authentication service may be configured to grant the request based in part on a proximity of a client device to the authentication service. The proximity of the client device may be determined according to a gateway through which the request was received a remaining TTL Time To Live value associated with the packets or any other suitable method.

In another example the technology may provide for validation of API requests. In this example acceptable authentication material may be coordinated between a remote token service and an authentication service. An API request may be received at the authentication service from a client. The API request may optionally be signed using a key such as a private key of a public private key pair and the request may further include the acceptable authentication material as provided to the client from the remote token service. The API request may be validated at the authentication service by ensuring the accuracy of the acceptable authentication material.

Customers of network based services provided by a service provider often desire to restrict where the customer s account may be used rather than allow the account to be used from any location. For example due to security concerns customers may desire to limit access to the network based services access requests from the customer s local network to the exclusion of other access requests. The network services or the service provider environment where the network services are available may be external to the local network. One example implementation for restricting access in this manner may include building or providing a service such as token service that may run on a server on the customer s local network and the token service may vend authentication material to a client device at the request of a user e.g. the customer or the employee on the local network .

The local network may communicate with the service provider environment over the internet using a first communication protocol also referred to herein as simply the first protocol . For example the first communication protocol may be used to reach a virtual compute service provided by the service provider at the service provider environment . For example the first protocol may be a routable protocol like TCP IP transmission control protocol internet protocol . The local network may communicate with client devices servers and the like connected to the local network using a second communication protocol as referred to herein as simply second protocol . For example the local network may include a router and the messages or packets for the second protocol may not be able to pass through the router. The router may be a network gateway and may operate as an internetworking device for joining together two networks i.e. the local network and the internet that use different base protocols i.e. the first protocol and the second protocol . Communications within the local network may be performed using the second protocol while communications from the local network to the internet or another network may be performed using the first protocol .

In the example of the second protocol may be a protocol that is routable within the local network and non routable outside of the local network . DHCP or a variation thereof as an example may be used to route traffic over the local network . In other words the second communication protocol may be usable by clients connected to the local network and unusable by clients external to the local network. The first protocol used for traffic routed over the internet may be the internet protocol. The first and second protocols may co exist on the local network . For example TCP IP may be layered on top of another protocol within the local network . In this example the server may communicate with the client using the second protocol and the client may use the first protocol to communicate with the router or other network devices and the client may send communications over the internet using the first protocol such as via router .

The first and or second protocols may include any suitable protocol such as existing protocols modified protocols of existing protocols and any other protocols. Some non limiting examples include various protocols and modifications thereof from what may be referred to as the internet protocol suite and which may include for example Dynamic Host Configuration Protocol DHCP Domain Name Protocol DOMAIN Routing Protocols RIP OSPF EGP and BGP File Transfer Protocol FTP Network File System Protocol NFS Telnet Protocol TELNET Trivial File Transfer Protocol TFTP Finger Protocol FINGER Simple Mail Transfer Protocol SMTP Simple Network Manager Protocol SNMP User Datagram Protocol UDP Transmission Control Protocol TCP Internet Protocol IP Address Resolution Protocol ARP Internet Control Message Protocol ICMP Internet Group Management Protocol IGMP Network Time Protocol NTP Time Synchronization Protocol TSP Internetwork Packet Exchange IPX protocol Sequenced Packet Exchange SPX protocol net protocol and or any of a number of other different protocols and variations thereof.

A token service may be hosted on a server on the local network . The token service may generate authentication material for the client to include with an API request for a virtual compute service. For example the API request may be a request to access virtual compute service resources through the service provider environment . The client may receive the authentication material from the token service using the second protocol and may send the API request containing the authentication material to the virtual compute service using the first protocol . Thus the client may receive the authentication material over the second protocol and may send or cause the API request to be sent over the first protocol such as via router .

In some instances an administrator of the local network may desire to enable users on multiple local area networks LANs the ability to reach the service provider environment . This may be accomplished using a single token service by installing a forwarding agent on the LANs. For example a forwarding agent e.g. a bridge or VLAN virtual local area network protocol with a router may receive a request for authentication material using the second protocol and may encapsulate the request in packets to be sent using the first protocol from one LAN to another LAN e.g. local network hosting the token service at which location the request may be unwrapped to be transmitted around the LAN hosting the token service using the second protocol . Once the authentication material has been generated the authentication material may be returned to the originating LAN in a reverse process for the request.

The authentication service may be hosted in the service provider environment . The authentication service may receive API requests for access to the network based services provided in the service provider environment . The authentication service may evaluate requests to determine whether to grant access to the network based services. For example the authentication service may grant access for requests including the authentication material and may deny access for requests without the authentication material. Because the authentication material may be vended and routed from the token service using the second protocol client devices not connected to the local network may be unable to obtain the authentication material and unable to access the network based services. An assumption may be made at the authentication service that if the authentication material is included in the request that the client device from which the request originated is on an authorized network i.e. local network and is authorized to access the local network .

In addition to verifying the presence and or authenticity of authentication material included in a request for access to the service provider environment the authentication service may further evaluate validity of the request by verifying user credentials decrypting contents of the request encrypted using encryption keys and so forth. For example a request may be signed using a private key of a public private key pair and the authentication service may decrypt the request using a corresponding public key from the public private key pair. The authentication material may be in an encrypted payload of the packet s comprising the request. The encryption is not limited to any particular implementation. Some non limiting examples of encryption that may be used with this technology may include asymmetric or symmetric key cryptography RSA cryptography MAC message authentication code cryptography and so forth.

The token service and the authentication service may optionally communicate to coordinate or agree on acceptable authentication material. For example the authentication material may change periodically and the token service may instruct the authentication service of what the acceptable authentication material is or will be. The token service and or the authentication service may continually update an acceptable authentication material cache for use when a client sends an API request or when an API request is received. In an alternative example the authentication service may periodically instruct the token service of what the acceptable authentication material is or will be.

In another example the authentication service and the token service may be configured to each arrive at the acceptable authentication material in the absence of coordination or other communication between the services even when the acceptable authentication material is changed. In one example the token service and the authentication service may have a shared method for generating coordinated authentication material. Further the token service may access a clock to generate the authentication material based on a current time of the clock . The authentication service may have access to a system clock that is generally synchronized with clock in order to verify the authentication material. The token service and the authentication service may utilize a same method for determining the acceptable authentication material based on the current time. Thus the token service and or the authentication service may generate or calculate acceptable authentication material when a client sends an API request or when an API request is received.

The token service may utilize a policy data store that may reside on the local network for use by the token service. Alternatively the policy data store may reside in the service provider environment for use by the authentication service . The policy data store may store a policy for use in determining whether to vend authentication material how to vend the authentication material whether to validate received authentication material and so forth depending on the context and location of use as will be described in further detail later.

The network based services offered by the service provider environment and to which the authentication service system may grant access when acceptable authentication material is received may include a virtual computing services. A user may operate one or more virtual computing instances to execute an operating system and computing applications. A user may create launch and terminate virtual computing instances as desired. The user may have some control over the geographical location of virtual computing instances to optimize latency and provide high levels of redundancy.

The user may access and manage the one or more virtual computing instances over a network connection such as a connection through the Internet for example. The user may perform various operations on the virtual computing instance s such as adding updating modifying deleting or other otherwise maintaining software or services on the virtual computing instance. These operations may be performed by the user from the client device .

The virtual computing instance may be part of a virtualization computing environment in the service provider environment which may include a virtual distributed computing system with a virtualization layer executing on a hardware layer. The hardware layer may include a plurality of physical computers servers or processing nodes. The virtualization layer e.g. hypervisor may provide a platform on which virtual computing instances may be created. In other words the virtual computing instances may execute on the hardware layer by using the platform provided by the virtualization layer.

As used herein virtual computing may refer to the use of computing resources hardware and software which may be available at a remote location from the users of the computing resources and the virtual computing resources may be accessible over a network such as the Internet . Users may be able to buy these computing resources including storage computing power and networking as a utility on demand and sometimes by the hour. Virtual computing entrusts remote services with a user s data software and computation. Use of virtual computing resources can provide a number of advantages including cost advantages and or ability to adapt rapidly to changing computing resource needs.

Web services may be associated with the virtual computing. A web service may be a software function provided at a network address over the web or the internet. Client devices may initiate requests to servers and the servers may process requests and return the appropriate responses. The client requests are typically initiated using an API application programming interface request. An example of a networked API is a programmatic interface to a defined request response message system sometimes expressed in JSON JavaScript Object Notation or XML Extensible Markup Language which is often exposed via the web by means of an HTTP Hypertext Transfer Protocol based web server.

Client side endpoint configuration can be accomplished by allowing a client to include as part of a network request e.g. an API request a desired endpoint for subsequent notifications from a server. The endpoint can be an endpoint identifier such as a Uniform Resource Identifier URI or a domain name. The URI can be a variety of types of identifiers such as Uniform Resource Locators URL or a Uniform Resource Name URN . The URI can include an IP Internet Protocol address hostname. When a web service receives the API request from a client device the web service can generate a response to the request and send the response to the endpoint identified in the request.

A service provider environment may be capable of delivery of computing and storage capacity as a service to a community of end recipients. In an example embodiment the service provider environment may be established for an organization i.e. a customer by or on behalf of the organization. That is the service provider may offer a virtual private cloud environment. In another embodiment the service provider environment may support a multi tenant environment wherein a plurality of customers may operate independently i.e. a public cloud environment . Generally speaking the service provider environment may provide the following models Infrastructure as a Service IaaS Platform as a Service PaaS and or Software as a Service SaaS . Other models may also be provided. For the IaaS model the service provider environment may offer computers as physical or virtual machines and other resources. The virtual machines may be run as guests by a hypervisor. The PaaS model may deliver a computing platform that can include an operating system programming language execution environment database and web server. Application developers may develop and run software solutions in the service provider environment without the cost of buying and managing the underlying hardware and software. The SaaS model allows installation and operation of application software in the service provider environment . In some embodiments end users may access the service provider environment using networked client devices such as desktop computers laptops tablets smartphones etc running web browsers or other lightweight client applications.

In one example a service provider environment may include any number of server computers. The server computers may provide computing resources for executing software or virtual computing instances which may also be referred to as virtual computer instances or virtual machines. A virtual machine may be an instance of a software implementation of a machine i.e. a computer that executes applications like a physical machine. In the example of virtual machine each server may be configured to execute an instance manager capable of executing the virtual computing instances. The instance manager may be a hypervisor or another type of program configured to enable the execution of multiple instances on a single server. Additionally each of the instances may be configured to execute one or more applications.

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual computing instances or virtual machines other types of instances can be utilized with the concepts and technologies disclosed herein. For instance the technologies disclosed herein can be utilized with storage resources data communications resources and with other types of computing resources. The embodiments disclosed herein might also execute all or a portion of an application directly on a computer system without utilizing virtual machine instances.

Referring now to an example implementation of the present technology is illustrated which is similar in some regards to the example of . In this example the first and second protocols described with regards to may be implemented or may optionally be omitted. For example various aspects of network traversal may be considered when implementing a policy for managing authentication and authentication material as will be described later.

A server on a customer network is configured to execute a token service for generating authentication material for use by clients in accessing an authentication service at a service provider environment over a network such as the internet via router . Access the service provider environment may be granted for example when the authentication material is validated using the authentication service and further when a key of a symmetrical or asymmetrical key pair is usable to decrypt a request for access to the service provider environment .

The customer network may be an suitable type of customer network such as one of a LAN Local Area Network WLAN Wireless Local Area Network WAN Wide Area Network MAN Metropolitan Area Network SAN Storage Area Network System Area Network Server Area Network or Small Area Network CAN Campus Area Network Controller Area Network or Cluster Area Network PAN Personal Area Network DAN Desk Area Network and so forth.

The token service may implement a policy stored in a policy data store for determining whether to generate the authentication material or for restricting access to the authentication material . For example the policy may be implemented based on a network traversal of packets to or from the token service . Network traversal as used herein may refer to a variety of characteristics relating to traversal of packets across a network from one location to another. More specifically network traversal may refer to for example a path or route taken by the packets such as may be determined from a traceroute operation for example a latency of the packets referring to an elapsed time from which the packets are sent from a source until the packets reach a destination a hop count a hop refers to one portion of the path between a source and a destination data packets may pass through routers and gateways on the way from the source to the destination and each time packets are passed to the next device a hop occurs a port over which packets are sent a network topology of a network from which the packets originate or across which the packets traverse to the destination and so forth.

In an example implementation of a hop count may be used to restrict the authentication material . For example if a maximum hop limit for a packet is 255 then packets originating on the customer network may have a hop limit set at 255 . The token service may evaluate the packets requesting authentication material arriving at the token service to determine whether a hop count of the packets has been decremented more than a maximum predetermined number of hops. If a network administrator understands that a maximum number of hops from any point on the customer network to the server is 5 for example and a packet requesting authentication material arrives at the token service with TTL time to live value of 120 the packet has passed through 135 hops and may have originated from outside the network. The token service may reject or drop the request without generating or otherwise providing the authentication material.

Time to live TTL also referred to as hop limit or hop count is a mechanism that limits the lifespan or lifetime of data in a computer or network. TTL may be implemented as a counter attached to or embedded in the data packets. Once the prescribed event count or timespan has elapsed the data packets are discarded or dropped.

As another example the token service may accept each request for authentication material and may send the packets containing the authentication material in response to each request but may set an artificially low TTL value for the packets containing the authentication material. Using the example above where the maximum number of hops from any point on the customer network to the server is 5 the token service may set the TTL value to 5 and any device that is more than 5 hops distant from the token service may be unable to receive the authentication material because the packets may be dropped before the authentication material reaches the destination i.e. when the TTL value reaches 0 .

As another variation the policy implemented by the token service may consider any number of aspects of network traversal together in managing provision of the authentication material . For example the token service may look at the remaining TTL value of packets requesting authentication material may look at a port of the server over which the packets were delivered to ensure the packets were received over an acceptable port may further set an artificially low TTL value for the packets containing the authentication material and may yet further send the packets using a protocol that is non routable outside of the customer network .

Referring to an alternative implementation is illustrated in which the server executing the token service is provided within the service provider environment . In this example clients may connect to the server over an overlay network . One example of an overlay network may be a virtual private network VPN . The overlay network may extend a private network across a public network such as the internet and may enable clients and server to send and receive data across shared or public networks as if directly connected to the private network while benefiting from the functionality security and management policies of the private network. The overlay network may establish a virtual point to point connection through the use of dedicated connections encryption and so forth.

In the example of a client resides on the customer network and may communicate with the server using a protocol that is non routable outside of the customer network and or may be within a set number of hops from the server . Therefore client may receive the authentication material from the token service and may transmit the authentication material to the authentication service over the internet via router . In contrast another client may be external to the customer network and may be unable to send or receive packets to the server due to the network protocol in use on the customer network and or due to a number of hops between client and server . As a result the client may be unable to access or receive authentication material from token service and may consequently be unable to access the service provider environment .

In one example implementation the authentication service may be operable to receive a configuration API request such as from client to configure the policy used by the authentication service in granting the request or rather to configure enforcement of the policy. For example the configuration API request may include an instruction to enable disable or modify the policy. The modified policy may be stored in the policy data store .

Referring to an example implementation for managing authentication of API requests is illustrated in accordance with the present technology. In this example the client may send a request to access a network based service. An authentication service may validate the request by authenticating the authentication material included in the request sent by the client .

In another implementation packets sent from the client to authentication service may be set to include a maximum TTL value such as a value of 255 . A policy in a policy data store for managing authentication may be maintained at authentication service . The policy may restrict authentication of API requests to packets with at least a minimal remaining TTL value. Thus for example the policy in the policy data store may define that API requests from packets with a TTL value of lower than 250 are unacceptable and are to be denied. A customer may set the TTL value threshold based on a known or at least estimated number of hops between the authentication service and client . When packets arrive requesting authentication the authentication service may check the remaining TTL value against the TTL value threshold to ensure compliance with the policy.

As another example a customer may determine an acceptable latency of packets in traversing from client to authentication service . When packets arrive the authentication service may check the latency of the packets by identifying a time stamp of when the packets were sent from client and when the packets were received. When the latency exceeds the acceptable latency the API request may be denied or dropped. When the latency is within the acceptable latency the API request may be accepted and processed to validate the authentication material credentials etc. In one example the latency may be determined using a traceroute operation as is described below.

In another example the policy enforced by the authentication service may specify that packets are to arrive over a predefined network path or route such as across routers . When a different network path is taken by the packets an API request may be dropped. The network path may be identified by performing a traceroute operation. A traceroute operation may involve sending a sequence of Internet Control Message Protocol ICMP echo request packets addressed to a destination host i.e. client from authentication service . Traceroute may operate by sending packets with gradually increasing TTL values beginning with TTL value 1 . The first router e.g. router may receive the packets and decrement the TTL value and drop the packets because the packet then has TTL value 0 . The router may then send an ICMP Time Exceeded message back to the source e.g. authentication service . The next set of packets are given a TTL value of 2 so the first router forwards the packets but the second router e.g. router drops the packets and replies with ICMP Time Exceeded. Proceeding in this way traceroute uses the returned ICMP Time Exceeded messages to build a list of routers that packets traverse until the destination e.g. client is reached and returns an ICMP Echo Reply message. The timestamp values returned for each router along the path are used to determine the delay latency values typically measured in milliseconds for each packet.

In yet another example of policy checking the authentication service may identify an IP internet protocol address of the client and any local metadata about the network location of the client that may be looked up based on the IP address of the client . The local metadata and or other information may include for example DHCP lease information traceroute output and so forth. In one example client may include with the API request network topology information related to a network topology of the network from which client is sending the request. In another example of policy checking the authentication service may send a request for network topology information from the client in response to receipt of an API request. The local network topology of the client may be stored in advance by authentication service and compared with the topology provided by client at the time of the request to ensure a match or correspondence at least within a predetermined degree of error.

Referring now to an example implementation of the present technology is illustrated in which an internet service provider ISP or any other intermediary party between the client and authentication service provides a service or provides access to the service via the authentication service to a customer at client . In this example the client may request authentication material from a token service via a server . The server may optionally send the authentication material to the authentication service on behalf of the client or may send the authentication material to the client for the client to send to the authentication service via server or some other route.

In this example the ISP may maintain a policy in a policy data store for managing the authentication material. For example the ISP may send the authentication material to client or authentication service with a low TTL value or may drop requests from the client when the TTL value is below an acceptable TTL value according to the policy. As another example the token service may drop requests for authentication material when the requests are not received via a defined port e.g. port number of the server or via a defined gateway used by the ISP . As another example the ISP may analyze the network path from client to server or the latency of packets from to determine whether to provide the authentication material. In alternative implementations the client and or authentication service may maintain a policy for managing the authentication material according to the examples described herein in addition to or in the stead of ISP maintaining the policies.

In one example the ISP or client may send API requests to the authentication service over a direct connection. A direct connection is a network service that provides an alternative to using the internet to utilize network based services. With a direct connection data that may otherwise be transported over the internet may be instead delivered through a private network connection between the service provider environment and the customer network. With a direct connection private connectivity may be established between the service provider environment and the customer network which may increase bandwidth throughput and provide a more consistent network experience than internet based connections. Network latency over the internet may vary given that the internet is constantly changing how data gets from point A to B. With a direct connection customers may control how data is routed which may provide a more consistent network experience as compared with internet based connections.

The authentication service may comprise or may be hosted on for example a server computer a virtual server image or any other system providing computing capability. Alternatively a plurality of servers may be employed that are arranged for example in one or more server banks or computer banks or other arrangements to form a distributed computing system.

The client device may access data services storage data stores reports and so forth over the network. Example client devices may include but are not limited to a desktop computer a laptop a tablet a mobile device a television a cell phone a smart phone a hand held messaging device a set top box a gaming console a personal data assistant an electronic book reader heads up display HUD glasses or any device with a display.

Various processes and or other functionality as discussed herein may be executed according to various examples. A server may for example provide some central server processing services while the client device may provide local processing services and interface processing services to interface with the services of the server. Therefore it is envisioned that the processing services as discussed herein may be centrally hosted functionality or a service application that may receive requests and provide output to other services or customer devices.

For example the services may be considered on demand computing that is hosted in a server cloud grid or cluster computing system. An application program interface API may be provided for each service to enable a second service to send requests to and receive output from the first service. Such APIs may also allow third parties to interface with the service and make requests and receive output from the service. A processor may provide processing instructions by communicating with a memory on the server. In other words the memory device may include instructions operable to be executed by the processor to perform a set of actions. The processor and or the memory may directly or indirectly communicate with a data store for storing authentication material user credentials user public keys policies and the like. The processor memory and the server may be virtualized.

Various data may be stored in the data store that is accessible to the server. The term data store may refer to any virtual device or combination of physical and virtual devices capable of storing accessing organizing and or retrieving data which may include any combination and number of data servers relational databases object oriented databases data storage devices data warehouses flat files and data storage configuration in any centralized distributed or clustered environment. The storage system components of the data store may include storage systems such as a SAN Storage Area Network a cluster storage network volatile or non volatile RAM optical media or hard drive type media. The data store may be representative of a plurality of data stores.

The client device shown in may be representative of a plurality of client devices that may be coupled to the network. The client devices may communicate with the authentication service over any appropriate network including an intranet the internet a cellular network a local area network LAN a wide area network WAN a wireless data network or a similar network or combination of networks.

The client device may include a display or display device. The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc.

The client device may be configured to execute various applications such as a browser client application and or other applications. The browser may be executed in a client device for example to access and render pages such as web pages or other network data served up by the authentication service and or other services and or servers. The client application may be executed to obtain and render for display data from the authentication service or other services and or local storage media. A client may be a hardware device which is used by the user to access the service provider environment.

In some embodiments the client application may correspond to code that is executed in the browser or plug ins to the browser. In other embodiments the client application may correspond to a standalone application such as a mobile application. The client may be configured to execute applications beyond those mentioned above such as for example mobile applications email applications instant message applications and or other applications. Users at client devices may access data such as the processed result of operating information reports through display devices or through client applications executed in the client devices.

The particularly illustrated compute service may include a plurality of server computers A D. While four server computers are shown any number may be used and large centers may include thousands of server computers. The server computers A D may provide computing resources for executing software instances A D. In one embodiment the instances A D may be virtual machines. A a virtual machine may be an instance of a software implementation of a machine i.e. a computer that executes applications like a physical machine. In the example of virtual machine each of the servers A D may be configured to execute an instance manager capable of executing the instances. The instance manager may be a hypervisor or another type of program configured to enable the execution of multiple instances on a single server. Additionally each of the instances may be configured to execute one or more applications.

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machines other types of instances can be utilized with the concepts and technologies disclosed herein. For instance the technologies disclosed herein can be utilized with storage resources data communications resources and with other types of computing resources. The embodiments disclosed herein might also execute all or a portion of an application directly on a computer system without utilizing virtual machine instances.

One or more server computers may be reserved for executing software components for managing the operation of the server computers and the instances . For example the server computer may execute a management component . A customer may access the management component to configure various aspects of the operation of the instances purchased by the customer. For example the customer may purchase rent or lease instances and make changes to the configuration of the instances. The customer may also specify settings regarding how the purchased instances are to be scaled in response to demand. An auto scaling component may scale the instances based upon rules defined by the customer. In one embodiment the auto scaling component allows a customer to specify scale up rules for use in determining when new instances should be instantiated and scale down rules for use in determining when existing instances should be terminated. The auto scaling component may consist of a number of subcomponents executing on different server computers or other computing devices. The auto scaling component may monitor available computing resources over an internal management network and modify resources available based on need.

A deployment component may be used to assist customers in the deployment of new instances of computing resources. The deployment component may have access to account information associated with the instances such as who is the owner of the account credit card information country of the owner etc. The deployment component may receive a configuration from a customer that includes data describing how new instances should be configured. For example the configuration may specify one or more applications to be installed in new instances provide scripts and or other types of code to be executed for configuring new instances provide cache logic specifying how an application cache should be prepared and other types of information. The deployment component may utilize the customer provided configuration and cache logic to configure prime and launch new instances . The configuration cache logic and other information may be specified by a customer using the management component or by providing this information directly to the deployment component .

Customer account information may include any desired information associated with a customer of the multi tenant environment. For example the customer account information can include a unique identifier for a customer a customer address billing information licensing information customization parameters for launching instances scheduling information auto scaling parameters previous IP addresses used to access the account etc. Information such as the unique identifier IP addresses used to access the account and so forth may be used in authenticating a user to the service provider environment.

A network may be utilized to interconnect the server computers A D and the server computer . The network may be a local area network LAN and may be connected to a Wide Area Network WAN so that end users may access the compute service . It should be appreciated that the network topology illustrated in has been simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein.

A service providing API response may be a service for providing a response to an API request such as to process the request to grant the request to deny the request and so forth. A statistics server may be used to monitor statistics relating to operation of the virtual computing instances relating to successful and failed authentication attempts network traversal of packets involved in authentication attempts and so forth.

Referring now to a flow diagram of a method for managing authentication material for an API request is illustrated in accordance with an example of the present technology. The method may include receiving an API request at an authentication service. The API request may optionally be signed using a private key and may include authentication material generated by a token service based in part on a network traversal of packets between a client device to the token service. The method may further include authenticating the authentication material by comparing the API request with an authentication policy or simply policy . The method may also include generating a response to the API request based in part on a result of comparing the API request with the authentication policy. The authentication policy may include a network traversal restriction to restrict authentication of the authentication material based on the network traversal of the API request.

Network traversal of the API request or the packets containing the API request and or the authentication material may refer to any of the various examples of network traversal or variations thereof described previously. In some examples the network traversal may include or refer to a network proximity. Network proximity may refer to latency between a source and a destination or to a proximity of the source and destination in terms of hops. Also network proximity may refer to a connectedness of two devices relative to one another such as where a client and a token service are proximally located on a same local network. The network traversal may include a network route such as a path taken by packets to traverse from the source to the destination. The network route may also include ports or gateways through which packets pass through to reach the destination.

In some examples this or other methods described herein may be implemented wholly or partially as computer readable program code executed by a processor and the computer readable code may be embodied on a non transitory computer usable medium.

The memory device may contain modules that are executable by the processor s and data for the modules. A data store may also be located in the memory device for storing data related to the modules and other applications along with an operating system that is executable by the processor s .

The computing device may further include or be in communication with a client device which may include a display device. The client device may be available for an administrator to use in interfacing with the computing device such as to review operation of a virtual computing instance make improvements to machine learning models and so forth.

Various applications may be stored in the memory device and may be executable by the processor s . Components or modules discussed in this description that may be implemented in the form of software using high programming level languages that are compiled interpreted or executed using a hybrid of the methods.

The computing device may also have access to I O input output devices that are usable by the computing devices. An example of an I O device is a display screen that is available to display output from the computing devices. Other known I O device may be used with the computing device as desired. Networking devices and similar communication devices may be included in the computing device . The networking devices may be wired or wireless networking devices that connect to the internet a LAN WAN or other computing network.

The components or modules that are shown as being stored in the memory device may be executed by the processor . The term executable may mean a program file that is in a form that may be executed by a processor . For example a program in a higher level language may be compiled into machine code in a format that may be loaded into a random access portion of the memory device and executed by the processor or source code may be loaded by another executable program and interpreted to generate instructions in a random access portion of the memory to be executed by a processor . The executable program may be stored in any portion or component of the memory device . For example the memory device may be random access memory RAM read only memory ROM flash memory a solid state drive memory card a hard drive optical disk floppy disk magnetic tape or any other memory components.

The processor may represent multiple processors and the memory may represent multiple memory units that operate in parallel to the processing circuits. This may provide parallel processing channels for the processes and data in the system. The local interface may be used as a network to facilitate communication between any of the multiple processors and multiple memories. The local interface may use additional systems designed for coordinating communication such as load balancing bulk data transfer and similar systems.

While the flowcharts presented for this technology may imply a specific order of execution the order of execution may differ from what is illustrated. For example the order of two more blocks may be rearranged relative to the order shown. Further two or more blocks shown in succession may be executed in parallel or with partial parallelization. In some configurations one or more blocks shown in the flow chart may be omitted or skipped. Any number of counters state variables warning semaphores or messages might be added to the logical flow for purposes of enhanced utility accounting performance measurement troubleshooting or for similar reasons.

Some of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more blocks of computer instructions which may be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which comprise the module and achieve the stated purpose for the module when joined logically together.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices. The modules may be passive or active including agents operable to perform desired functions.

The technology described here may also be stored on a computer readable storage medium that includes volatile and non volatile removable and non removable media implemented with any technology for the storage of information such as computer readable instructions data structures program modules or other data. Computer readable storage media include but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tapes magnetic disk storage or other magnetic storage devices or any other computer storage medium which may be used to store the desired information and described technology. As used herein the terms medium and media may be interchangeable with no intended distinction of singular or plural application unless otherwise explicitly stated. Thus the terms medium and media may each connote singular and plural application.

The devices described herein may also contain communication connections or networking apparatus and networking connections that allow the devices to communicate with other devices. Communication connections are an example of communication media. Communication media typically embodies computer readable instructions data structures program modules and other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. A modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared and other wireless media. The term computer readable media as used herein includes communication media.

Reference was made to the examples illustrated in the drawings and specific language was used herein to describe the same. It will nevertheless be understood that no limitation of the scope of the technology is thereby intended. Alterations and further modifications of the features illustrated herein and additional applications of the examples as illustrated herein which would occur to one skilled in the relevant art and having possession of this disclosure are to be considered within the scope of the description.

Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more examples. In the preceding description numerous specific details were provided such as examples of various configurations to provide a thorough understanding of examples of the described technology. One skilled in the relevant art will recognize however that the technology may be practiced without one or more of the specific details or with other methods components devices etc. In other instances well known structures or operations are not shown or described in detail to avoid obscuring aspects of the technology.

Although the subject matter has been described in language specific to structural features and or operations it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features and operations described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. Numerous modifications and alternative arrangements may be devised without departing from the spirit and scope of the described technology.

