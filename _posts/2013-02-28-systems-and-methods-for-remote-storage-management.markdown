---

title: Systems and methods for remote storage management
abstract: A system comprises a first storage resource, a second storage resource, a hosted application, a proxy engine, and a proxy interface. The first storage resource stores first data and uses a first program interface for communicating the first data. The second storage resource stores second data and uses a second program interface for communicating the second data. The hosted application uses application data, the first data and/or the second data including the application data. The proxy engine directs application data requests by the hosted application to the first storage resource or to the second storage resource. The proxy interface uses the first program interface to communicate with the first storage device and the second program interface to communicate with the second storage device to respond to the application data requests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389932&OS=09389932&RS=09389932
owner: Zettar, Inc.
number: 09389932
owner_city: Mountain View
owner_country: US
publication_date: 20130228
---
This application is a continuation of U.S. nonprovisional application Ser. No. 12 806 028 entitled Systems and Methods for Remote Storage Management filed Aug. 3 2010 which claims priority to U.S. provisional application Ser. No. 61 230 998 entitled A Method that Represents Different Storage Resources through a Unified and Ubiquitous Fa ade Available through a Common Programming Interface on a Computing Device filed Aug. 3 2009 by Chin Fang and U.S. provisional application Ser. No. 61 332 747 entitled A Method that Simplifies the Build up of a Private Storage Cloud Enhances an Existing One and Facilitates a Transparent Data Migration from one Storage Cloud to Another filed May 8 2010 by Chin Fang all applications of which are hereby incorporated by reference herein.

Embodiments of the present invention are directed to data storage and more particularly to management of data storage.

Remote and cloud based storage are becoming increasingly common. It is not uncommon for businesses employees and consumers to take advantage of remote storage and the ubiquitous accessibility that remote storage provides. For example the Amazon S3 service may provide ample storage with availability anywhere over the Internet.

Cloud based storage such as systems by Amazon Google Microsoft and EMC are also becoming increasingly common and are often used by business to store a variety of different information. Different cloud based storage systems may provide a variety of different functions services and benefits. Unfortunately sharing data between different services is difficult. For example different cloud based services may have different application program interfaces APIs which may not be compatible. As a result a business may be locked in to only using one service e.g. the AWS S3 service and unable to take advantage of benefits and functionality provided by other services.

In accordance with an embodiment of the invention a system comprises a first storage resource operative to store first data thereon the first storage resource using a first program interface for communicating the first data a second storage resource operative to store second data thereon the second storage resource using a second program interface for communicating the second data a hosted application operative to use application data the first data and or the second data including the application data a proxy engine for directing application data requests by the hosted application to the first storage resource or to the second storage resource and a proxy interface using the first program interface to communicate with the first storage device and the second program interface to communicate with the second storage device the proxy interface operative to respond to the application data requests by communicating via the first program interface with the first storage device or via the second program interface with the second storage device.

The proxy interface may include a graphical user interface for enabling a user to access the first storage resource and the second storage resource as a unified resource. The proxy interface may include an application program interface for enabling automatic access by the hosted application. The first storage resource may include one of local storage resource or network storage. The first program interface and the second program interface may use different storage protocols. The proxy interface may include a load balancing engine operative to balance the loads across the first storage resource and the second storage resource. The proxy interface may include a provisioning engine operative to provision additional storage resources as needed.

The first program interface may be operative for accessing the first storage resource and at least one other storage resource that uses a same protocol. The proxy interface may be operative to redirect requests by the hosted application. The system may further comprise a second hosted application operative to use second application data the first data and the second data including the second application data. The proxy interface may include a caching engine for caching at least a portion of the application data. The proxy interface may include a permission engine operative to manage data access rights. The proxy interface may include an operating system component for redirecting file system data requests. The proxy interface may include a migration engine operative to migrate data across storage resources.

In accordance with another embodiment of the invention a method comprises storing first data on a first storage resource the first storage resource using a first program interface for communicating the first data storing second data on a second storage resource the second storage resource using a second program interface for communicating the second data receiving a data request from a hosted application that uses application data the first data and the second data including the application data directing the data request to the first storage resource or to the second storage resource and using a proxy interface to communicate the data request to the first storage device or to the second storage device the proxy interface using the first program interface to communicate with the first storage device or the second program interface to communicate with the second storage device.

The method may further comprise using a graphical user interface for enabling a user to access the first storage resource and the second storage resource as a unified resource. The method may further comprise using an application program interface for enabling automatic access by the hosted application. The first storage resource may include one of local storage resource or network storage. The first program interface and the second program interface may use different storage protocols. The method may further comprise using a load balancing engine to balance the loads across the first storage resource and the second storage resource. The method may further comprise using a provisioning engine operative to provision additional storage resources as needed. The method may further comprise using the first program interface for accessing at least one other storage resource that uses a same protocol as the first storage resource. The method may further comprise redirecting requests by the hosted application. The method may further comprise receiving a second data request from a second hosted application operative to use second application data the first data and the second data including the second application data. The method may further comprise using a caching engine for caching at least a portion of the application data. The method may further comprise using a permission engine to manage data access rights. The method may further comprise using an operating system component for redirecting file system data requests. The method may further comprise using a migration engine to migrate data across storage resources.

In accordance with yet another embodiment of the invention a system comprises a first storage resource for storing first data the first storage resource using a first program interface for communicating the first data a second storage resource for storing second data the second storage resource using a second program interface for communicating the second data means for receiving a data request from a hosted application that uses application data the first data and the second data including the application data means for directing the data request to the first storage resource or to the second storage resource and means for using a proxy interface to communicate the data request to the first storage device or to the second storage device the proxy interface using the first program interface to communicate with the first storage device or the second program interface to communicate with the second storage device.

Applications that work with one service as the number of cloud based storage systems increase there is an increasing demand to utilize the full array of storage resources. For example many users wish to take advantage of the benefits of different cloud based storage solutions without being limited to a single solution e.g. only using the Amazon S3 service and not a combination of services . Unfortunately different cloud based services utilize different APIs e.g. program interfaces . Applications typically are not able to utilize multiple APIs. For example an application written to use one API may not be ported to use a different API without significant changes. As a result utilizing multiple cloud based storage solutions is not feasible.

In some embodiments systems and methods described herein may provide API to API translation thereby allowing computing systems to store data to multiple cloud based storage providers. In various embodiments modification of programs or operating systems are not necessary to achieve the translation.

In one example an application may perform a program call which may be directed to a proxy engine and proxy interface which identify the program call and utilizes the API for the desired cloud based storage. Data may be retrieved from the cloud based storage and provided to the application in a similar manner. The proxy engine and or proxy interface may utilize any API s . Those skilled in the art will appreciate that the application may not be modified or reconfigured and still take advantage of the proxy engine and or proxy interface.

In various embodiments a file system representation may be generated that displays files as if the files were locally stored. The files however may be stored locally or remotely e.g. in a cloud based storage system . Further parts of individual files may be stored on different storage devices e.g. a file may be stored in two separate cloud based storage services . The file system representation however may display the file as if the file was locally stored. If an application requests the file the proxy engine and or proxy interface may retrieve the file utilizing the correct APIs for each different storage device to retrieve and reassemble the file.

For example multiple storage resources may be available as unified browsable resource e.g. such as a web based file system representation through a graphical user interface GUI . In some embodiments the GUI allows a user to manage the files system as if the file system was a local resource. The GUI may also be used to provide the users the ability to provision resell and bill storage space and or access to the file system representation. The GUI may also provide users the ability to provision resell access and track utilization of storage resources.

A storage resource is any resource that may be used to store manage and or retrieve data. For example the storage resource may comprise direct attached storage DAS network attached storage NAS storage area network SAN cloud based storage and or remote storage accessed via a protocol such as but not limited to REST API or SOAP. Further cloud based storage is any storage resource that can be provisioned and is accessed via a data transfer protocol over a network.

A digital device is any device with a processor and memory such as a computer. A digital device is any device with a processor and memory. For example a digital device may be a desktop computer server client laptop mobile device cellular device or the like. In some examples systems and methods discussed herein may be implemented through a computer program with a graphical user interface. Although such a computer program is discussed those skilled in the art will appreciate that embodiments may be performed using any of the following either alone or in combination including but not limited to a computer program multiple computer programs firmware and or hardware. Digital devices are further described herein.

In some embodiments the user and or applications in the user application environment may interact with a POSIX API file system . The ZettarFS may allow an application that communicates with a POSIX API file system such as that used by a UNIX operating system to store data to and or retrieve data from cloud storage systems even though the cloud storage systems provide the REST API.

In various embodiments the ZettarFS is a proxy engine and or proxy interface that receives data e.g. system calls files or the like from the application and provides any necessary API functionality to enable storing data to or retrieving data from remote storage e.g. cloud based storage without requiring that the application be modified.

Each cloud storage system may be operated by a cloud service provider CSP . In this example each of the cloud storage systems provide a REST API. Those skilled in the art will appreciate that various embodiments are not limited to a single API e.g. not limited to the REST API and that the cloud storage systems may use a different API or any combination of APIs.

In various embodiments a digital device may comprise the ZettarFS the POSIX API file system and the users applications environment . For example a digital device may comprise a UNIX operating system. The UNIX operating system may provide and or implement the POSIX API. The ZettarFS may comprise software that is configured allow for communication e.g. storage of data and or retrieval of data between applications of the digital device and the cloud storage systems even if the cloud storage systems use an API e.g. REST API that is not the POSIX API. Those skilled in the art will appreciate that the ZettarFS may allow for communication to or from cloud storage systems with any type of API regardless if the one or more of the cloud storage systems 

The POSIX API file system may be any file system that utilizes the POSIX API. The users application environment may comprise one or more digital devices. The digital devices may comprise an operating system and one or more applications. Those skilled in the art will appreciate that various embodiments are not limited to a file system with the POSIX API by may be any API.

Once installed the ZettarFS may connect over a network with the cloud storage e.g. Amazon Web Services AWS Simple Storage Service S3 . The ZettarFS may present the information stored on the cloud storage to a user and or application through a unified fa ade e.g. file system representation available as a POSIX compliant local file system mounted at a desired mounting point.

The userspace is any space that is managed by a user or administrator and includes but is not limited to applications utilities and files. The application e.g. hosted application may be any application that is configured to store data retrieve data or interact with a storage device e.g. hard drive cloud based storage or the like . In the example depicted in the application provides for a command listing files in a particular directory. The userspace may also comprise the ZettarFS which may comprise a software program e.g. the ZettarFS may be an application hardware module or combination of both.

The kernel is any space that comprises or communicates with a file system and or an operating system. The VFS is any virtual file system. Those skilled in the art will appreciate that although the kernel is depicted with a virtual file system any file system may be used with various embodiments. In some embodiments the kernel comprises or communicates with multiple virtual machines. All or some of the virtual machines may be configured to run on the digital device s local storage.

In various embodiments an application in the userspace e.g. application generates system calls e.g. related to file operations . The OS kernel may receive the calls and hand them to the VFS . The VFS after determining which device driver should handle the calls provides the calls to the FUSE module i.e. a FUSE driver . The FUSE module may then communicate with the libfuse . The calls may then be broken apart as appropriate e.g. request and caching . Depending on the configuration different cloud storage backend interfaces may be used to communicate with different storage clouds. A local file storage back end may also be available.

The FUSE module may be any software or hardware configured to direct commands to and from the ZettarFS . In some embodiments the FUSE module is a driver for the kernel . In one example the application directs a command to the VFS . The FUSE module may direct the command to the ZettarFS which may then communicate with the cloud storage . Any responses from the cloud storage e.g. a listing of files and or directories of the zettarfs foo directory may be provided by the zettarfs to the VFS . The FUSE module may provide the response to the application .

The ZettarFS may comprise a libfuse a ZettarFS FUSE interface layer a cache a storage backend interfaces a local file storage and an AWS S3 module . In some embodiments the functions of the ZettarFS are transparent to the application . In one example the storage backend interfaces of the ZettarFS may direct data to the cloud based storage and or the local file storage .

The libfuse may be a component of the FUSE module . The ZettarFS FUSE interface layer may implement an interface with the libfuse . In one example the ZettarFS FUSE interface layer employs a C language binding to interface with the libfuse API. In some embodiments the ZettarFS FUSE interface layer in interaction with an operating system s virtual file system e.g. VFS and the FUSE system e.g. the FUSE module and the libfuse is capable of representing a unified API to running applications on the digital device e.g. such as the application as a complaint file system e.g. such as a POSIX compliant file system .

In some embodiments one or more components of the ZettarFS may log actions. For example one or more components may utilize the Boost Logging Library v2 and a Singleton pattern to optionally log actions. In one example an activity log may be generated on demand for debugging and testing for example. Logging is further described herein.

Various figures described herein depict a UNIX or linux operating system. Those skilled in the art will appreciate that any operating system may be used in conjunction with various embodiments including but not limited to MICROSOFT WINDOWS.

The cache may provide block level caching of data maintained by the ZettarFS . In some embodiments the cache reduces network interactions with remote storage devices e.g. like the cloud storage . The cache may be a cache engine.

The storage backend interfaces may provide connectivity and abstraction of protocol requests performed when interacting with different cloud storage services. In various embodiments the storage backend interfaces may be capable of concurrently directing data transfer to one or more preferred storage resources according to a set of configurable usage policies. In one example a usage policy is configured to take advantage of features of different cloud storage systems or storage devices within the cloud storage systems . For example the usage policy may be configured to take advantage of performance capacity availability price and features of multiple different cloud storage systems and or storage devices.

In various embodiments the ZettarFS may allow concurrent data de duplication snapshot and data replication for multiple storage resources. The desired operation may be applied to a unified API and the results may be applicable transparently and concurrently to underlying storage resources.

Those skilled in the art will appreciate that the ZettarFS may be operating in one or more virtual machines by the digital device .

In various embodiments systems and methods described herein may take advantage of available features of different remote storage devices. For example one remote storage device solution may be cheaper when compared to others and another remote storage device solution may have better performance. Different remote storage device solutions may differentiate themselves in any number of ways including for example performance capacity availability price and available services supported e.g. sharing multiple storage resources concurrently with one or more computing devices concurrent data de duplication snapshot and data replication .

Those skilled in the art will appreciate that some embodiments described herein may work with other technologies may provide additional benefits. For example some embodiments described herein may be used with KVM s live migration. Benefits that may be obtained may include for example availability of an inexpensive content delivery network and web site fallback.

In various embodiments the ZettarFS may perform load balancing wherein data may be stored to different storage devices based on availability e.g. the storage is currently busy and or available capacity e.g. the storage device is 90 full . In one example the ZettarFS may process a command to store one or more files. The ZettarFS may make the determination based on features of the available storage devices utilization of the storage devices availability cost and or any other criteria. The criteria may be configured as a usage policy or otherwise modified and or created by an administrator.

The ZettarFS may also migrate e.g. transfer data from one storage device to another. In some embodiments the ZettarFS may migrate data based on any criteria in order to improve utilization availability cost and or any other criteria related to storage of data. In some embodiments a user interface displaying a file system representation of the data will not be affected by migration or partial migration of data from one storage device to another.

Those skilled in the art will appreciate that the Zettar VM may also comprise a database e.g. SQLite and a Zettar log which are both described herein.

Each virtual machine e.g. the Zettar VM as well as virtual machines may be in communication with a user interface that provides a file system representation e.g. the myCloud Web UI . The file system representation may be a unified file system representation where files appear to be locally stored. Requests regarding data may then be received and processed with the correct API as necessary by the Zettar VM thereby. In some embodiments making the physical location s of the file not relevant to a calling application.

A user may interact with a user interface e.g. displaying the file system representation to store data retrieve data and or manage storage resources. In one example the myCloud Web UI comprises the user interface. The user interface may be web based. In some embodiments the ZettarFS generates the UI e.g. the myCloud UI . Those skilled in the art will appreciate that a utility on any digital device may generate the UI. The UI may interact with the ZettarFS and log activities with the Zettar log .

In some embodiments the ZettarFS provides a single transaction log. The Zettar log may parse the log and store the results in the database . The UI may have access to the database . In one example the Zettar log may periodically access a transaction log generated by the ZettarFS . The Zettar log may parse the transaction log and generate usage data over a desired time span for one or more users or virtual machines. The usage data may be stored in the database . The usage database may then be accessed via the user interface or any external software.

The Zettar log and or database may be available to multiple ZettarFS systems on multiple digital devices and or multiple virtual machines. In one example the information within the Zettar log and or the database may be shared with multiple ZettarFS and or virtual machines in order to keep track of the location s of files. In some embodiments different systems provide information to a UI that provides a file system representation of files stored by multiple different ZettarFS .

The user interface may present a unified browsable e.g. web based file system representation. Further the user interface may allow management of the file system as if the resources were on a local machine. In some embodiments the user interface may perform these functions because the ZettarFS the VFS layer and or the FUSE module see present underlying multiple storage resources as a unified file system e.g. a unified POSIX file system .

The UI may comprise three components including a manage component a track component and a browse component. The manage component see may allow qualified parties to setup users assign user roles group membership and enable disable ZettarFS accesses for a particular user. A qualified party may be for example a server administrator a manager a reseller or a VM operator e.g. a VPS account owner .

The track component see may be configured to allow server administrators and users to keep track of cloud storage usage billing information and histories. In one example the track module provides and or generates tables and graphs. The track component may use information from the database e.g. information stored by the Zettar log . In one example the track component uses the information from the database to prepare reports e.g. in tabulated and or graphical form .

The browse component see may be configured to allow server administrators and users to view and optionally manage the content stored in cloud storage. The UI as described herein may appear within the browse component.

In some embodiments the myCloud web UI ZettarFS and Zettar log share configuration information e.g. stored in a SQLite database .

In some embodiments the user interface and or the ZettarFS provides a set of standard API e.g. REST API . The API may enable external software applications to automate one or more tasks e.g. using the manage and track components of the user interface . Tasks may include for example mount unmount browse populate and clean up the unified file system as well as any underlying file systems provided by ZettarFS .

Each of the virtual machines may comprise a Zettar agent . The Zettar agent may interact with the user interface e.g. via a standard API such as the REST API .

In some embodiments a user may click on one side of the thumb wheel like element to scroll the window in that direction. The user may also be able to click on the thumb wheel like element and drag the thumb wheel like element thereby allowing controlled scrolling of the window . For example the user may click on the left of the thumb wheel like element and while holding the mouse button drag the mouse cursor to the right thereby causing the windows to scroll to the right. While the thumb wheel like element is element the thumb wheel like element may be animated to appear as if the thumb wheel like element is moving e.g. turning like a wheel . In some embodiments instead of using a mouse to control the cursor the user may also use a touch screen in a similar manner.

The thumb wheel like element may be used to scroll any information. For example the thumb wheel like element may be used to scroll tabs or other visual markers. Further the thumb wheel like element may be vertical rather than horizontal. In one example the thumb wheel like element may be used to scroll the page tabs or any information vertically rather than horizontally.

Those skilled in the art will appreciate that the thumb wheel like element may be used in any graphical user interface.

In some embodiments the UI provides an administrator the ability to govern the rights of one or more other users as well as control the services available. In one example the administrator may generate or configure usage policies to limit storage requests associated with one user group of users digital device or group of digital devices to one or more cloud based storage services. Further the usage policy may be configured to take advantage of the various benefits of the cloud based storage. For example files or systems that require speed may be associated with faster cloud based storage while those files or systems that require reliability may be associated with a service that provides high reliability. In some embodiments a permission engine is configured to manage data access rights as described herein.

In various embodiments the ZettarFS is configured with a provisioning engine operative to provision additional storage devices as needed. For example the ZettarFS may be configured by a provisioning engine to take advantage of a newly available cloud based storage service.

The agent e.g. a Zettar agent residing on the virtual machine A e.g. guest VM may be in communication with the ZettarFS which resides on the Zettar VM . The agent may communicate via the user interface e.g. myCloud with the ZettarFS . In one example q denotes a REST query issued by the agent . The ZettarFS may provide a REST reply as r. The agent may then issue another REST query q. In response the ZettarFS may provide a second REST reply as r.

The agent may reside on the virtual machine as a daemon. The agent may periodically send queries e.g. polling to the user interface using the user interface s standard API e.g. REST API . The agent may depending on conditions and policies stored in the database make available all or a portion of the file system representation on the virtual machine

As depicted in q indicates user password. The user and password may denote a set of credentials for authentication before full access to the user interface is granted.

In some embodiments a user may login via the login user interface. Depending on the user s role that may be established via the user interface described in the user interface may show appropriate functions e.g. functions of which the user has access or permissions . The user may then for example access the browse manage and track components of the user interface to drill down and carry out appropriate tasks.

In various embodiments in order to use the user interface standard API e.g. REST API an external software may have the correct API authentication credentials.

The memory system stores data. Some examples of memory system include storage devices such as RAM ROM RAM cache virtual memory etc. In various embodiments working data is stored within the memory system . The data within the memory system may be cleared or ultimately transferred to the storage system . The storage system includes any storage configured to retrieve and store data. Some examples of the storage system include flash drives hard drives optical drives and or magnetic tape. Each of the memory system and the storage system comprises a computer readable medium which stores instructions or programs executable by processor .

The communication network interface com. network interface may be coupled to a network via the communication channel . The communication network interface may support communication over an Ethernet connection a serial connection a parallel connection and or an ATA connection. The communication network interface may also support wireless communication e.g. 802.11 a b g n WiMax LTE WiFi . It will be apparent to those skilled in the art that the communication network interface can support many wired and wireless standards.

The input output device is any device such an interface that receives inputs data e.g. via mouse and keyboard . The display interface is an interface that outputs data e.g. to a speaker or display . Those skilled in the art will appreciate that the storage system input output device and display interface may be optional.

The above described functions and components can be comprised of instructions that are stored on a storage medium e.g. a computer readable storage medium . The instructions can be retrieved and executed by a processor. Some examples of instructions are software program code and firmware. Some examples of storage medium are memory devices tape disks integrated circuits and servers. The instructions are operational when executed by the processor to direct the processor to operate in accord with embodiments of the present invention. Those skilled in the art are familiar with instructions processor s and storage medium.

The present invention has been described above with reference to exemplary embodiments. It will be apparent to those skilled in the art that various modifications may be made and other embodiments can be used without departing from the broader scope of the invention. Therefore these and other variations upon the exemplary embodiments are intended to be covered by the present invention.

