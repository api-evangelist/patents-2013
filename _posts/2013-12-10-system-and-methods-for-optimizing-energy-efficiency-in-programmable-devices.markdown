---

title: System and methods for optimizing energy efficiency in programmable devices
abstract: A system for optimizing energy efficiency of an embedded system. A hardware abstraction layer (HAL) is coupled to hardware of an embedded system. An energy hardware abstraction layer (eHAL) couples to the hardware and to the HAL. A hypervisor couples to the HAL and to the eHAL. One or more applications couple to the hypervisor, the HAL and the eHAL. The eHAL measures energy use of the embedded system, constructs a model of energy use of the embedded system and, using the model, determines how to one of reduce and minimize energy use of the embedded system. The hypervisor is configured to alter one or more hardware parameters to one of reduce and minimize energy use of the embedded system as the embedded system performs one or more tasks. In implementations a real time operating system (RTOS) is coupled to the one or more applications and to the hypervisor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09459685&OS=09459685&RS=09459685
owner: Arizona Board of Regents on behalf of Northern Arizona University
number: 09459685
owner_city: Flagstaff
owner_country: US
publication_date: 20131210
---
This document claims the benefit of the filing date of U.S. Provisional Patent Application 61 735 363 entitled Embedded System Energy Efficiency Optimizer to Paul G. Flikkema which was filed on Dec. 10 2012 the disclosure of which is hereby incorporated entirely herein by reference.

This application was made with government support under CNS 0540414 awarded by the National Science Foundation. The government has certain rights in the invention.

Aspects of this document relate generally to systems and methods for energy analysis and optimization of embedded systems.

Various types of embedded systems exist for performing various functions. Some embedded systems must operate for long periods of time on limited amounts of electrical energy such as using a battery that may not be able to be replaced for many years if ever. Methods have been implemented in the past to optimize the energy use of the embedded system to reduce its energy consumption so that the operational life of the embedded system on limited electrical energy may be maximized. Conventionally such optimization methods have been performed by a programmer prior to deployment of an embedded system as part of application programming.

Implementations of a system for optimizing energy efficiency for an embedded system may include a hardware abstraction layer HAL coupled to hardware of the embedded system the HAL configured to arrange control and direct the operation of one or more components of hardware of the embedded system using a processor comprised in the embedded system an energy hardware abstraction layer eHAL coupled to the hardware of the embedded system and to the HAL a hypervisor coupled to the HAL and to the eHAL and one or more applications the one or more applications coupled to the hypervisor the HAL and the eHAL the one or more applications configured to use the processor to carry out one or more desired functions of the hardware of the embedded system wherein one of the eHAL and the hypervisor is configured to measure electrical energy use of the embedded system generate a model of electrical energy use of the embedded system and using the model determine how to one of reduce and minimize electrical energy use of the embedded system and wherein the hypervisor is configured to alter one or more hardware parameters to one of reduce and minimize electrical energy use of the embedded system as the embedded system performs the one or more desired functions of the hardware in response to instructions from the processor executing the one or more applications.

A real time operating system RTOS may be coupled only to the one or more applications and to the hypervisor.

Implementations of a method of optimizing energy efficiency for an embedded system may include using an energy hardware abstraction layer eHAL of an embedded system to measure power consumption of the embedded system during execution of the embedded system s tasks the embedded system including hardware a hardware abstraction layer HAL coupled to the hardware the eHAL coupled to the hardware and to the HAL a hypervisor coupled to the HAL and to the eHAL and at least one application coupled to the hypervisor and to the HAL and the eHAL calculating using one of the eHAL and the hypervisor from the measured power consumption electrical energy use of the embedded system generating using a processor coupled to the embedded system and using one of the eHAL and the hypervisor a model of electrical energy use of the embedded system the model relating electrical energy use of the embedded system for tasks performed by the embedded system to values of hardware parameters of the embedded system and storing the model in the eHAL for use by the hypervisor.

Providing a real time operating system RTOS coupled only to the at least one application and to the hypervisor.

Modifying using the processor coupled to the embedded system and using one of the eHAL and the hypervisor the model of electrical energy use of the embedded system in response to determining a difference between a predicted electrical energy use based upon the model and a calculated electrical energy use of the embedded system.

Implementations of a method of real time energy efficiency optimization for an embedded system may include using an energy hardware abstraction layer eHAL of an embedded system to measure power consumption of the embedded system during execution of the embedded system s tasks the embedded system including hardware a hardware abstraction layer HAL coupled to the hardware the eHAL coupled to the hardware and to the HAL a hypervisor coupled to the HAL and to the eHAL a real time operating system RTOS coupled only to the hypervisor and at least one application the at least one application coupled to the hypervisor and to the RTOS the HAL and the eHAL calculating using one of the eHAL and the hypervisor from the measured power consumption electrical energy use of the embedded system generating using a processor coupled to the embedded system and using one of the eHAL and the hypervisor a model of electrical energy use of the embedded system the model relating electrical energy use of the embedded system for tasks performed by the embedded system to values of hardware parameters of the embedded system storing the model in the eHAL for use by the hypervisor in response to the embedded system being required to perform a specific task determining with the hypervisor using the model of electrical energy use optimized hardware parameter settings to one of reduce and minimize electrical energy use of the embedded system while performing the specific task and using one of the hypervisor and the eHAL implementing the optimized hardware parameter settings.

Determining using the hypervisor whether one or more optimization steps is likely to result in a net reduction in electrical energy use of the embedded system taking into account an amount of electrical energy required to implement the one or more optimization steps.

Comparing with one of the eHAL and the hypervisor a predicted electrical energy use with a calculated electrical energy use of the embedded system.

In response to comparing the predicted electrical energy use with the calculated electrical energy use of the embedded system modifying the model using one of the eHAL and the hypervisor.

In response to comparing the predicted electrical energy use with the calculated electrical energy use of the embedded system determining additional optimized hardware parameter settings to one of reduce and minimize electrical energy use of the embedded system and using one of the eHAL and the hypervisor implementing the additional optimized hardware parameter settings.

The hardware parameters may be selected from the group consisting of power supply to one or more hardware subsystems supply voltage to the one or more hardware subsystems presence of clock signal that drives subsystem operation enablement or disablement of clock source hardware clock frequency any parameter that affects power consumption of the one or more hardware subsystems and any combination thereof.

Measuring using the eHAL power consumption of the embedded system during execution of the embedded system s tasks may include sensing activity of voltage regulation circuitry that powers the embedded system measuring using the eHAL power consumption of the embedded system during execution of the embedded system s tasks may include estimating the power consumption and calculating using one of the eHAL and the hypervisor from the measured power consumption electrical energy use of the embedded system may include calculating electrical energy use using one or more measured times that the embedded system takes to perform one or more tasks.

In response to a change in the embedded system s operating environment automatically re measuring using the eHAL power consumption of the embedded system during execution of the embedded system s tasks re calculating using one of the eHAL and the hypervisor from the re measured power consumption electrical energy use of the embedded system determining using one of the eHAL and the hypervisor additional optimized hardware parameter settings to one of reduce and minimize electrical energy use of the embedded system and using one of the eHAL and the hypervisor implementing the additional optimized hardware parameter settings.

Implementing the optimized hardware parameter settings may include storing data values in registers in memory included in the embedded system.

Determining with the hypervisor optimized hardware parameter settings may include determining optimized hardware parameters settings within one or more constraints.

The one or more constraints may include one of accomplishing the embedded system s tasks within a given time limit and requiring one or more peripherals of the embedded system to remain powered.

One of generating the model of electrical energy use of the embedded system and determining the optimized hardware parameter settings may include dynamic programming.

The foregoing and other aspects features and advantages will be apparent to those artisans of ordinary skill in the art from the DESCRIPTION and DRAWINGS and from the CLAIMS.

This disclosure its aspects and implementations are not limited to the specific components assembly procedures or method elements disclosed herein. Many additional components assembly procedures and or method elements known in the art consistent with the intended systems and methods for optimizing energy efficiency in programmable devices will become apparent for use with particular implementations from this disclosure. Accordingly for example although particular implementations are disclosed such implementations and implementing components may comprise any shape size style type model version measurement concentration material quantity method element step and or the like as is known in the art for such systems and methods for optimizing energy efficiency in programmable devices and implementing components and methods consistent with the intended operation and methods.

Referring now to a first implementation of a system for optimizing energy efficiency of an embedded system is illustrated. As illustrated the system includes a hardware abstraction layer HAL an energy hardware abstraction layer eHAL a hypervisor hardware and one or more applications . In implementations the hardware of the embedded system includes one or more internal or external peripherals . One or more processors may be included and one or more memories including registers may be included. The eHAL may include a software library . Referring to in implementations a system for optimizing energy efficiency of an embedded system may also include a real time operating system RTOS .

Referring to illustrating a second implementation of the system in various implementations hardware of an embedded system may be coupled to one or more internal or external peripherals which may reside by non limiting example in the hardware or coupled to the hardware and in the embedded system or coupled to the hardware and external to the embedded system on chip versus off chip . Peripherals may include by non limiting example a timer a chime a pressure sensor a temperature sensor a mechanical device a pump in a medical device a radio e.g. for Wi Fi telephone or other telecommunication over a telecommunication channel and the like.

In implementations various elements of the system or may be interconnected either directly or through another element of the system. By non limiting example in various implementations the hardware may be directly coupled to the HAL and the eHAL the HAL may be directly coupled to the hardware the eHAL the hypervisor and the one or more applications the eHAL may be directly coupled to the hardware the HAL the hypervisor and the one or more applications the hypervisor may be directly coupled to the HAL the eHAL and the one or more applications and the one or more applications may be directly coupled to the HAL the hypervisor and the eHAL .

Referring to in various implementations the following interconnectedness may be present the hardware may be directly coupled to the HAL and the eHAL the HAL may be directly coupled to the hardware the eHAL the hypervisor and the one or more applications the eHAL may be directly coupled to the hardware the HAL the hypervisor and the one or more applications the hypervisor may be directly coupled to the HAL the eHAL the RTOS and the one or more applications the RTOS may be directly coupled only to the hypervisor and the one or more applications and the one or more applications may be directly coupled to the HAL the eHAL and the hypervisor .

Referring again to in various implementations the embedded system includes one or more processors and one or more memories . In particular implementations a memory may include one or more registers . The processor may be directly or indirectly coupled to other elements of the system or . By non limiting example the processor may be directly coupled to the hardware the HAL the eHAL the memory the hypervisor and the one or more applications . In various implementations the memory may be directly or indirectly coupled to other elements of the system or . By non limiting example the memory may be directly coupled to the processor the hardware the HAL the one or more applications the hypervisor and the eHAL .

Any and all of the elements components and sub components of the system or may be included in a single embedded system or may be carried out through various hardware and software components using a plurality of embedded systems or components thereof. By non limiting example in implementations the HAL eHAL hypervisor and the one or more applications could all be composed of data elements stored in the memory . In other implementations the eHAL and the hypervisor could be composed of data elements stored in one or more separate memories that are coupled to one or more elements of an embedded system. In various implementations hypervisor and eHAL could include hardware components. Any number of the elements of the system or could be implemented as standalone elements such as with each of the eHAL hypervisor and or other elements each including its own processor and or memory and or hardware and or software or one or more elements could be implemented using the same hardware processor and memory elements and the like. In particular implementations the system or is implemented on a single integrated circuit or microcontroller MCU .

The hypervisor and or eHAL may be implemented as software hardware firmware and or any combination thereof. By non limiting example the hypervisor and or eHAL may be implemented as firmware in any MCU marketed under the trade names ATMEGA XMEGA ARM CORTEX or MEGAAVR by ATMEL INC. of San Jose Calif. or in any MCU marketed under the trade names HC08 HC12 COLDFIRE ARM CORTEX or KINETIS by FREESCALE SEMICONDUCTOR INC. of Austin Tex. or in any MCU marketed under the trade names PIC18 PIC24 PIC32 MIPS or DSPIC by MICROCHIP TECHNOLOGY of Chandler Ariz. or in any MCU marketed under the trade names MSP430 CC1101 CC2538 C2000 TIVA or ARM CORTEX by TEXAS INSTRUMENTS Inc. of Dallas Tex. or in any MCU marketed under the trade names SI1000 EFM32 or ARM CORTEX by SILICON LABORATORIES Inc. of Austin Tex. Also by non limiting example the hypervisor and or eHAL may be implemented as hardware or firmware in any field programmable gate array FPGA marketed under the trade names SPARTAN ARTIX KINTEX ZYNQ or VIRTEX by XILINX INC. of San Jose Calif. or in any FPGA marketed under the trade names STRATIX ARRIA CYCLONE MAX HARDCOPY or NIOS by ALTERA CORPORATION of San Jose Calif.

In various implementations the hardware and or peripherals may include physical devices including by non limiting example sensors transducers interfaces radio transceivers and or receivers for communication and the like. In some implementations the software of an embedded system includes an operating system OS and or RTOS and or one or more applications that may include a program or set of instructions stored in memory memory or some other memory for use by the processor to manipulate the hardware to complete the tasks that the embedded system is requested to perform through the program. In some implementations the one or more applications manipulate the hardware directly. In some implementations the system is designed with an RTOS that allocates computing system resources to the one or more applications and schedules and dispatches tasks that the embedded system must perform as requested by the one or more applications .

In various implementations the HAL and eHAL each include data elements that can be included in programming elements such as classes to form abstract models of hardware resources that make them more easily manipulated through code designed by a programmer or user.

In various implementations the system or includes hardware and or software that enables during execution of the tasks of the embedded system measurement of power use during operation of the embedded system interpretation of those measurements and inference of energy use a sequence of optimization steps to minimize energy use over all tasks performed by the embedded system and implementation of those optimization steps via manipulation of the hardware .

In particular implementations the system is a hardware and or software extension of an embedded system. As an extension the system may monitor energy use of the embedded system and continuously adjust system parameters in an attempt to improve energy efficiency of the embedded system. This process in implementations is done autonomously freeing the designer or programmer from the task of manually optimizing embedded system performance during the program and or application development stage. In various implementations the system is implemented as a software library under a portable application programming interface API allowing the system to be used with a variety of heterogeneous devices presenting an abstracted hardware interface the eHAL to the code of the one or more applications . In these implementations because of the existence of the eHAL the one or more applications to not need to include code that handles the actual nature type and or arrangement of the hardware components of the embedded system. In various implementations the system may be capable of maintaining energy optimization throughout unforeseen usage conditions.

In various implementations the hardware abstraction may include the HAL the eHAL and device drivers or drivers for peripherals . The system may include an operating system and an RTOS . The one or more applications may include one or more user interfaces may allow high level device or peripheral control and may facilitate task execution. The system may provide a universal power management operating system layer. In particular implementations the system may treat energy power as a centrally managed operating system or RTOS resource.

The system may be embedded into smart appliances or other device or machine and the like to optimize energy efficiency of the embedded system and the smart appliance or other device or machine. The system and or the hypervisor and or the eHAL may be fully or partially implemented in the kernel stored in the embedded system . By kernel is meant a computer program that manages input output requests from software and translates them into data processing instructions for a CPU and or other electronic components of a computer or embedded system. In various implementations the RTOS and or the hypervisor and or the eHAL manage and optimize energy use just as the RTOS manages and optimizes the use of other resources e.g. CPU time . The system allows autonomous optimization of energy consumption based on the embedded system hardware design and directives from a user such as an application programmer.

The system includes an electronic circuit for sensing power use. In various implementations the system or measures and or estimates energy use of the embedded system for execution of tasks using power use measurements and the time used to perform the tasks. Either or both of the eHAL and hypervisor are configured to measure and or estimate energy consumption of the embedded system in real time during execution of the tasks of the embedded system . The measurement of energy consumption of the embedded system may incorporate any technique method implementing systems and components disclosed in the Master of Engineering Thesis by Kenji. R. Yamamoto entitled Manipulation of Energy Consumption in Time Triggered Embedded Systems with Static Schedules published by Northern Arizona University May 2011 the disclosure of which is hereby incorporated entirely herein by reference. In particular implementations the eHAL and or the hypervisor may precisely measure energy consumption of the embedded system across five orders of magnitude. The measurement of energy consumption may be done by decomposing operations of the embedded system into chunks whose energy can be measured and or using an optimization algorithm which utilizes dynamic programming. Any of the dynamic programming techniques described in the article included as Appendix A the disclosure of which is incorporated entirely herein by reference may be utilized for this purpose. Additionally any of the dynamic programming techniques described in Dimitri. P. Bertsekas 4 Athena Scientific 2007 or Martin L. Puterman Wiley 2005 the disclosures of each of which are entirely incorporated herein by reference may be used.

The measurement of electrical energy consumption of the embedded system which may be done by the eHAL and or the hypervisor may include real time sensing of activity of the embedded system such as the supply voltage or processing speed of the MCU processor state of the on chip and off chip peripherals and the like as a function of time and associated energy use as a function of time and or as a function of hypervisor decisions. The measurement may measure energy use as a function of operating modes peripheral activation supply voltages clock frequencies clock power gating and the like. The sensed data may be used to generate a model of electrical energy use. The various data elements composing the model may be stored in the memory and or in the eHAL such as in memory of the eHAL .

In particular implementations the energy consumption measurements may be done using a precision high side power monitoring integrated circuit that interacts with the hypervisor running on the MCU. By non limiting example a power measurement chip sold under the trade name INA219 by TEXAS INSTRUMENTS may be used and controlled with a low cost sensing and control interface with the MCU of the embedded system. In various implementations this functionality may be integrated into the embedded system itself.

The system derives energy use for execution of its tasks using power consumption measurements and measuring the time used to perform its tasks. In particular implementations the measurement of power consumption is done by sensing the activity of the voltage regulation circuitry that powers the embedded system.

In various implementations the system or generates an internal model of itself that is composed of tasks hardware subsystem parameters and associated energy use as a function of the tasks and hardware subsystem parameters. The system or may maintain the model in its storage facilities such as in memory and this may allow comparison of energy use as parameters are varied. The overall energy use for operation of the system may be minimized by selecting the sequence of parameters associated with the sequence of tasks.

An optimization algorithm may be used to find possible improvements in electrical energy efficiency based on the model of energy use. The system or may have a library of optimization algorithms pre programmed into it prior to deployment such as in the software library and or the system or may be configured to generate one or more optimization algorithms after deployment. Optimization algorithms whether included prior to deployment of the embedded system or generated by the system or after deployment may utilize dynamic programming. The optimization algorithm s may be stored in the memory or in the eHAL such as in memory of the eHAL or in the hypervisor such as in memory of the hypervisor .

Once the optimization algorithm has found an optimized efficiency strategy or optimized efficiency settings a control algorithm may be used to select new parameter settings for the MCU embedded system hardware components and peripherals . The system or may have a library of control algorithms pre programmed into it prior to deployment such as in the software library and or the system or may be configured to generate one or more control algorithms after deployment. Control algorithms whether included prior to deployment of the embedded system or generated by the system or after deployment may utilize dynamic programming. The control algorithm s may be stored in the memory or in the eHAL such as in memory of the eHAL or in the hypervisor such as in memory of the hypervisor .

As the system or proceeds in the new configuration sensing may be done occasionally such as by through the hypervisor or the eHAL to determine if another iteration of the process should be done to adjust the hardware parameter settings and further optimize energy efficiency of the embedded system . In this way the optimization may be a continuous process by which the system or may evaluate the optimization and progressively reduce energy use over time and while the embedded system is in use after deployment.

In various implementations the system generates a sequence of optimization steps to minimize energy use across all tasks performed by the embedded system . The optimization algorithm may model energy or power usage as a function of operating modes peripheral activation clock frequencies clock power gating transitions between modes activation or use of in system devices and the like.

In particular implementations the system constructs a model of itself which models energy use of tasks as a function of hardware parameters. The hardware parameters may include a list of subsystems that make up the hardware and the parameters for each subsystem that can be manipulated to alter energy use during execution of a task such as by non limiting example supply or cut off of power supply voltage presence or absence of clock signal that drives subsystem operation enablement or disablement of clock source hardware the clock frequency if present and other operational parameters of the various hardware components or combinations of components .

The system may control the parameters of the hardware subsystems under the constraint of accomplishing the embedded system s tasks within given time limits. The parameters of each subsystem that can be manipulated may in various implementations include supply of power supply voltage clock signal presence or absence clock source hardware clock signal frequency if present and other operational parameters. In implementations the parameters are manipulated by storing values in registers that control the parameters.

The hypervisor in various implementations may be a system controller which is used to iteratively adjust operation parameters of the embedded system . In particular implementations the RTOS depends on the hypervisor . In other words while the RTOS may supervise the one or more applications the hypervisor may supervise the RTOS . The RTOS may provide resources requested by the one or more applications by using system configuration choices made by the hypervisor . The hypervisor searches for the highest energy efficiency such as by using the optimization algorithm s and additionally may measure and or track energy use using abstract representations of the hardware provided by the eHAL . The hypervisor has complete understanding of the hardware state of the embedded system such as which peripherals are active and if so their operating parameters as a function of time. The hypervisor uses the eHAL to manage track and optimize energy use as a service for the one or more applications or the RTOS .

The system or including the hypervisor and eHAL uses energy itself. Accordingly in implementations the system or is used for energy reduction only adaptively i.e. only when efficiency improvements are likely to offset the energy cost of the optimization process. Once optimum settings have been found the energy optimization can be suspended by the hypervisor until changes in computational patterns occur such as when a new or revised application or program is implemented on the embedded system or environmental changes cause processing activity to change on the embedded system . Thus the hypervisor may be configured to sense changes in computational patterns based on changes in the sensed data.

In various implementations the one or more applications may access the hypervisor directly. Thus the system may be incorporated into computing systems in which one or more applications run directly on the processor hardware with no intervening layers of software. The system may be incorporated into computing systems that use a software operating system OS or RTOS to manage the system . Some applications may be configured to perform their own resource management to avoid the overhead of an RTOS . The hypervisor is a software interface that may be used with an RTOS or directly by the applications . As previously discussed hypervisor may track manage and optimize energy use while providing services to the one or more applications and or to the RTOS .

In various implementations the hypervisor and or eHAL may using the optimization algorithm generate a sequence of optimization steps to determine the manipulations of the hardware that will minimize energy use over the sequence of tasks performed by the system . The optimization steps may include for instance running certain tests to determine energy use required by certain tasks such as by non limiting example measuring energy use the next time that a certain task is done and the like.

Just as an OS or RTOS provides services to the embedded system as it performs its tasks the hypervisor in various implementations may provide services to the OS or RTOS using the eHAL to manage track and optimize energy use as a service for the RTOS or one or more applications . It is possible for the one or more applications to make requests directly to the hypervisor . This may be done for example where one or more of the applications provides its own resource management without an RTOS . The hypervisor thus may provide a software interface that can be used either with an RTOS or directly.

In various implementations the RTOS may be configured to exploit services provided by the eHAL and the hypervisor and follow orders from the hypervisor .

The eHAL in various implementations reveals energy use and allows its control by measuring power consumption interpreting power consumption measurements and inferring energy use generating an optimization algorithm and or otherwise determining how to optimize energy efficiency of the embedded system and manipulating the hardware to minimize energy use. In implementations the eHAL is implemented as a software library that is available to one or more applications and or to the RTOS which may be may be directly coupled to the eHAL . In various implementations the eHAL includes a collection of simplified models that hide complex distracting details of the underlying hardware from a user or programmer.

In implementations the HAL and eHAL form two layers. The eHAL may use include software abstractions for MCU core parameters and heavily used peripherals that reveal energy related parameters and energy use.

The one or more applications may request or the RTOS may provide to the or more applications resources requested generically by the one or more applications using hardware configuration choices made by the hypervisor . The hypervisor in various implementations may search for the highest energy efficiency while tracking energy use using models of the hardware resources provided by the eHAL .

By non limiting example an MCU may have a plurality of energy saving sleep or hibernation modes that reduce energy and have varying energy costs for wake up depending on depth of sleep i.e. which sleep or hibernation mode the MCU is in at the time wake up is begun . A user may implement a constraint on the system or for instance requesting that the system sleep for some period without requesting the exact sleep mode and with constraints related to which peripherals must remain powered. The hypervisor may select a specific sleep mode in combination with the eHAL or using data or algorithms provided by the eHAL to accomplish the request to ensure that the most efficient sleep mode is selected depending upon the next step in the application or the most energy efficient sleep mode for the MCU overall by non limiting example . The hypervisor may then implement the sleep mode by controlling the MCU registers . The system or may thus allow constraint based optimization of energy use and optimization driven control of MCU registers .

The system or may allow an embedded system to optimize its own energy efficiency without any input from a user. In particular implementations the system or may allow an embedded system to optimize its own energy efficiency with only limited input from a user such as constraints set at the time or prior to the time of deployment of the embedded system . After an embedded system is deployed and in use the system or may automatically and autonomously optimize the energy efficiency of the embedded system and or may optimize the energy efficiency of the embedded system in response to changes in environment or operating conditions even long after the embedded system has been deployed.

The combination of a HAL with an eHAL may provide a streamlined interface to the processor architecture and may enable fast portability of the system software to new MCU architectures. By non limiting example in various implementations the eHAL may include MCU specific functionality. This may allow all higher layers to be easily portable to new MCU families.

In various implementations software versions of the hypervisor eHAL and or other elements or implementing components of the system or may be implemented using executable software derived from programmer developed code using the C or C programming languages though many other programming languages may be used. In other implementations executable hardware and firmware versions of the hypervisor eHAL and or other elements or implementing components of the system or may be specified using the VHDL Verilog SystemC or many other programming languages may be used.

In various implementations the HAL is configured to arrange and control and direct the operation of one or more components of hardware including peripherals using the processor included in the embedded system . The one or more applications are configured to use the processor to carry out one or more desired functions of the hardware . The eHAL is configured to measure electrical energy use of the embedded system generate a model of electrical energy use of the embedded system and using the model determine how to one of reduce and minimize electrical energy use of the embedded system . The hypervisor is configured to alter one or more hardware parameters to one of reduce and minimize electrical energy use of the embedded system as the embedded system performs the one or more desired functions of the hardware in response to instructions from the processor executing the one or more applications .

Referring now to implementations a method of optimizing energy efficiency for an embedded system method may include using an eHAL to measure power consumption of the embedded system during execution of the embedded system s tasks step calculating using the eHAL from the measured power consumption electrical energy use of the embedded system step generating using a processor coupled to the embedded system and using the eHAL and or the hypervisor a model of electrical energy use of the embedded system step the model relating electrical energy use of the embedded system for tasks performed by the embedded system to values of hardware parameters of the embedded system and storing the model in the eHAL for use by the hypervisor step . Method may also include modifying using the processor and using one of the eHAL and the hypervisor the model of electrical energy use of the embedded system in response to determining a difference between a predicted electrical energy use based upon the model and a calculated electrical energy use of the embedded system .

Referring to implementations of a method of real time energy efficiency optimization for an embedded system method may include using an eHAL to measure power consumption of the embedded system during execution of the embedded system s tasks step calculating using the eHAL from the measured power consumption electrical energy use of the embedded system step generating using a processor coupled to the embedded system and using the eHAL and or the hypervisor a model of electrical energy use of the embedded system step storing the model in the eHAL for use by the hypervisor step in response to the embedded system being required to perform a specific task determining with the hypervisor using the model of electrical energy use optimized hardware parameter settings to reduce or minimize electrical energy use of the embedded system while performing the specific task step and using the hypervisor and or the eHAL implementing the optimized hardware parameter settings step .

Method may also include determining using the hypervisor whether one or more optimization steps is likely to result in a net reduction in electrical energy use of the embedded system taking into account an amount of electrical energy required to implement the one or more optimization steps. Method may also include comparing with one of the eHAL and the hypervisor a predicted electrical energy use with a calculated electrical energy use of the embedded system . The method may also include in response to comparing the predicted electrical energy use with the calculated electrical energy use of the embedded system modifying the model using the eHAL . The method may also include in response to comparing the predicted electrical energy use with the calculated electrical energy use of the embedded system determining additional optimized hardware parameter settings to one of reduce and minimize electrical energy use of the embedded system and using one of the eHAL and the hypervisor implementing the additional optimized hardware parameter settings. In response to a change in the embedded system s operating environment the method may include automatically re measuring using the eHAL power consumption of the embedded system during execution of the embedded system s tasks re calculating using the eHAL from the re measured power consumption electrical energy use of the embedded system determining using the eHAL additional optimized hardware settings to one of reduce and minimize electrical energy use of the embedded system and using one of the eHAL and the hypervisor implementing the additional optimized hardware parameter settings.

In implementations the entire system or may be implemented using hardware. In implementations the entire system or may be implemented using hardware and software underneath the one or more applications . In implementations the eHAL provides a model of the hardware and its energy use to the hypervisor thus extending the model of a HAL which provides a model of the hardware alone i.e. without providing a model of the energy use of the hardware to the operating system or RTOS . In implementations the HAL may provide an abstract model of the complex hardware that captures its essential aspects and hides unneeded details. The HAL may make it easier for an operating system or application programmer to write code for the embedded system .

In implementations the hypervisor provides as a service to the RTOS operating system or one or more applications optimization of energy use. In implementations the hypervisor does this by manipulating the parameters of the system hardware via the HAL and the eHAL . In implementations the eHAL provides measurements needed for the hypervisor to do the optimization and an abstract representation of the levers needed by the hypervisor to control and or manipulate the parameters of the hardware to implement the optimization. Nevertheless in implementations the entire system or could be implemented without an eHAL just as some embedded systems are programmed without the benefit of a HAL in which case a programmer may directly manipulate bits in a register to control the hardware . In particular implementations the eHAL does not include a software library though in implementations this may be an efficient method of making software portable to new systems and applications.

In places where the description above refers to particular implementations of systems and methods for optimizing energy efficiency in programmable devices and implementing components sub components methods and sub methods it should be readily apparent that a number of modifications may be made without departing from the spirit thereof and that these implementations implementing components sub components methods and sub methods may be applied to other systems and methods for optimizing energy efficiency in programmable devices.

