---

title: Shared media crawler database method and system
abstract: The embodiments relate to transcoding, cataloging, and extracting metadata about files stored in a storage device. In one embodiment, a crawler runs on the storage device and maintains a database that is stored in the volume with the data that has been cataloged by the crawler. The crawler may discover files of any type and extract associated metadata about the files. The crawler can extract metadata about client interaction with various files, such as edits, play counts, etc. The crawler may discover files of any type and extract associated metadata about the files automatically during a scan or at the request of a client. In one embodiment, the crawler may be responsive to file system events that indicate changes to the file system, such as additions, deletions, or other types of changes. In addition, the crawler may synchronize the database with the file system so that they indicated the same state for a particular file. Furthermore, the crawler may provide notifications to various entities regarding the state of a file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171003&OS=09171003&RS=09171003
owner: Western Digital Technologies, Inc.
number: 09171003
owner_city: Irvine
owner_country: US
publication_date: 20130315
---
The present application is related to U.S. patent application Ser. No. 13 836 686 filed on Mar. 15 2013 entitled FILE SYSTEM NOTIFIER FOR FILES SHARED AMONG STORAGE DEVICES which is herein incorporated by reference in its entirety.

Today files comprise content as well as metadata. The metadata provides additional information about the file such as its format date and time etc. Frequently this metadata can be used by client applications to provide various functions.

Currently storage devices face several challenges regarding media access programs. Among these are the CPU memory and disk usage expenses of the various crawlers and the mechanisms for notifying media related applications just applications hereafter about changes to the media file population of the disks. Crawlers are programs that scan file systems and provide data about the media file population. They may be standalone or parts threads perhaps of an application.

However in the known devices and systems each user computer and client application creates its own proprietary metadata database for the files it accesses. This is inefficient and subject to duplication errors etc.

The embodiments relate to transcoding cataloging and or extracting metadata about files stored in a storage device. The embodiments may be implemented on any platform running various operating systems such as Windows LINUX Mac OSX etc. In one embodiment a crawler runs on the storage device and maintains a catalog that is stored in the volume with the data that has been cataloged by the crawler. The crawler may discover files of any type and extract associated metadata about the files. The metadata discovered by the crawler may include for example the volume data and time of last access image thumbnails transcoding information and the like. In addition as noted the crawler may assist or perform file transcoding. Furthermore the crawler may notify other entities of its progress and or status.

In one embodiment the crawler may be responsive to file system events that indicate changes to the file system such as additions deletions or other types of changes. In addition the crawler may synchronize the database with the file system so that they indicated the same state for a particular file. The crawler can create a metadata database on the storage device that can be referenced and interfaced with a standard API by any requesting device or client. The crawler can also automatically update the metadata as the file is updated etc.

Certain embodiments of the inventions will now be described. These embodiments are presented by way of example only and are not intended to limit the scope of the inventions. Indeed the novel methods and systems described herein may be embodied in a variety of other forms. Furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions. To illustrate some of the embodiments reference will now be made to the figures.

The NAS is file level storage device that is capable of connecting to a network such as network and provides access to files stored in its storage medium as a file server. In one embodiment NAS is implemented with known hardware software and firmware. For example in one embodiment the NAS is configured as an appliance having an embedded operating system. The NAS may support a variety of operating systems such as UNIX LINUX Windows and the like. As will be further described the NAS may also comprise multiple storage mediums such as one or more hard disks that are arranged into a RAID. Furthermore the NAS may support various protocols such as NFS SMB CIFS AFP etc.

Alternatively in other embodiments the system may comprise direct attached storage devices or external drives. For example the system may comprise one or more external drives such as the MyBook or Passport provided by Western Digital Technologies Inc.

Network provides a communication infrastructure for data communications between the components of system . Network may comprise known network elements such as hubs switches routers firewalls etc. to facilitate and secure these communications. In the embodiments the network may comprise a local area network a wide area network etc. In addition the network may comprise wired and wireless links or components to carry its communications.

Clients represent the various client devices that may store and or access files on the NAS . For example the clients may be a desktop a laptop a tablet a smart phone etc. The embodiments support any device that can access a file stored on the NAS .

In one embodiment clients may run various applications subscribing to the notification services of the embodiments. In the prior art applications that were LINUX compatible made use of the known inotify service for file notifications. In one embodiment one or more applications of clients may be modified to read a specified file data pipe and parse the XML message format for file notification purposes. In some embodiments each application may have the flexibility of keeping its own database and schema. In other embodiments the databases of the client applications may be combined.

For applications that modify meta data they may be configured to do so at the file level. In response the notification system may automatically pick up the changes and write the changes to an appropriate data pipe. Other applications may then read the change and update their respective databases. The notification system and its related components are further described with reference to .

Network interface serves as the network communications interface for the NAS . For example in one embodiment the network interface may comprise one or more Gigabit Ethernet Ethernet USB Wi Fi and or interfaces for communications with network . Such components are known to those skilled in the art.

Controller represents the hardware and software that manages the disks of the NAS and presents them as a logical unit or volume to the clients . In some embodiments the controller may also comprise one or more other components to supplement its operations such as an on chip RAID controller a memory or disk cache etc.

Storage interface serves as an interface between the controller and the disks . The storage interface may support various communications such as SAS SATA SCSI etc.

Disks represent the storage medium and associated electronics for the devices storing data for the NAS . In one embodiment the disks may be implemented as hard disk drives such as those provided by Western Digital Technologies Inc. Of course in other embodiments the NAS may comprise other types of storage media and devices such as solid state drives hybrid drives etc. Any type of storage drive that can be configured as part of a RAID may be implemented as part of an embodiment of the present invention. In addition the embodiments of the present invention are applicable to other platforms and types of storage devices. For example the embodiments may be employed on direct attached storage devices portable drives etc.

In one embodiment an application framework not shown may be installed and running on top of the operating system . The application framework may provide a set of standard interfaces for example for the notification system and other applications running on the storage device .

As shown a notification system may comprise a notifier a disk watcher a dispatcher and a subscription database . These components and their operation will now be described below. In general the embodiments provide a notification mechanism or system that is extensible and provide file level disk level and volume level notification services to any application subscribing to its services. In one embodiment the notification system and its components employ named data pipes in order pass information. The use of named data pipes is believed to provide a faster communication mechanism for the notification system . Alternatively in other embodiments the notification system may employ other communication mechanisms such as sockets or inter process communications.

In one embodiment the notifier runs as daemon on the storage device and consolidates the file notification tasks by the client applications running on clients . The notifier then interfaces the inotify service of the operating system as the only requester. This structure ensures that the notifier is more resilient and can accommodate a higher number of subscribers than the conventional techniques that rely purely on the operating system services such as inotify.

In one embodiment the notifier is a user space program that handles notification for all media. Similar to other LINUX services the notifier is started and stopped through a script. The start stop script for notifier may be called with the start parameter during system startup due to a symlink whose contents are called once during startup. When the script is called with the start it will also start the dispatcher binary and proceeds to run as a daemon until termination. When the script is called with the stop parameter it will send a SITERM signal to the notifier and the notifier will exit out all the listening and writing threads.

The notifier may have a collection of configuration files stored in the subscription database such as etc notify.d for applications that wish to receive notification and a default file etc notify.d . In addition the notifier may support dynamic update of the configuration by re parsing the configuration files. In one embodiment the notifier determines the path s of interest for targeted files listed in the configuration file. In addition the notifier may be configured to interpret wild card pattern for disks that may be mounted.

The notifier coordinates with applications running on clients to specify their respective configuration files and the path to a named pipe on which notification messages are passed.

In one embodiment the notifier passes messages in the form of extensible markup language XML text specifying the affected file path the type of change add delete modify and any metadata available within the file such as ID3 tags. The notifier may employ other types of message formats such as hypertext markup language messages HTML standard generalized markup language and the like.

In one embodiment the notifier reuses the pipe reading and writing classes from the dispatcher and integrates with its own set of components. When starting up the notifier traverses through the list of removable drives mount point and places inotify watchers on every sub directory of every mount point. The notifier also creates a reader thread to receive any mount add removal event to remove and add watchers accordingly to inotify . The notifier may also listen on all the watcher events from inotify and send respective XML messages to the dispatcher as events occur.

The disk watcher may be a program or shell script that notifies registered applications of disk changes on storage device or other part of system . For example in one embodiment the disk watcher is configured to subscribe to services of the known udev service labeled as udev provided by the LINUX operating system . In the disk watcher is shown as a separate program. However those skilled in the art will recognize that disk watcher and notifier may be combined in whole or in part to perform the same functions.

In similar fashion to notifier the disk watcher may establish a uniquely named pipe such as var local disk change with applications running on clients . In one embodiment the disk watcher is implemented as a shell script running on udev of the operating system . Thus when udev is notified that a disk has been added or removed the disk watcher sends an XML formatted message through the pipe specifying the change to the clients . The applications on clients can then take appropriate action to deal with the change such as invalidating database entries when a disk is removed.

As media files are moved renamed accessed and deleted the inotify unotify alerts the notifier . The notifier in turn sends a file data XML message to the dispatcher . The dispatcher then routes the various messages to the applications on clients .

As noted above the dispatcher receives and consolidates the XML messages from notifier or disk watcher checks its subscription list in subscription database for subscribing applications with specified rules matching with the XML message and then sends the XML messages to the appropriate subscribing applications on clients . As shown in in one embodiment the dispatcher forwards the messages to corresponding daemon processes that handle the communications with the entities outside of the storage device. The daemon processes that are to receive the messages may be identified in the configuration file stored within the subscription database . The daemon processes are further described below.

Dispatcher may forward XML messages to the subscribing application on clients based on a matching rule via its specified incoming named pipe in subscription database . For example for a file move event the previous path field may indicate the full path as it is possible to move files directories across different mount points. Dispatcher may run as a separate program on operating system or as a component of notifier .

Subscription database serves as a database indicating the subscribing applications of clients requesting services of the notifier and disk watcher . In addition the subscription database comprises records indicating the data pipes by which the notifier and disk watcher communicate. Furthermore the subscription database may contain information about all the watchers as well as the absolute path on the file system of operating system . In one embodiment the subscribers of the notification system indicate the various parameters of the subscription in a configuration file stored in the subscription database .

Subscriber daemons indicate the daemon processes established by the subscribers of the notification system . For example clients may establish one or more of daemon processes to receive the file notification messages from the notification system . During operation the dispatcher will forward file system events e.g. from the notifier or disk watcher to the appropriate daemon process . The daemon process then coordinates with the operating system and forwards the file notification message to its destination for example via the network interface .

The subscriber daemons may be established for a variety of types of subscribers. For example a media crawler may also establish a daemon in order to communicate with the notification system . As another example a web services daemon process may be instantiated to enable remote communications with the file notification system .

In general the crawler may perform an initial scan of any new media added to the storage device perform meta data scanning and extracting and perform transcoding thumbnailing of files stored on the storage device . In one embodiment the crawler is a single program for the entire NAS which may run per disk threads or instances. For example for media files the crawler may perform a meta data scan of the file such for album art extraction user interaction data etc.

The crawler will scan disks initially and then rely on the notification services of the notification system for changes to mounted file systems. In addition the crawler will scan a new disk when notified by disk watcher .

During operation after its initial scan the crawler may register for file system notifications with the operating system. In one embodiment the crawler subscribes to the services of notification system for example by writing a configuration file to the subscription database . In addition the crawler may establish a daemon process A to receive messages from the notification system . The crawler may provide various notifications to other entities such as clients via the daemon process A and the dispatcher . The crawler may also discover files of any type and extract associated metadata about the files automatically during a scan or at the request of a client use.

The crawler may be configured to send messages to a named pipe that is read by the notifier for every media file or every file encountered during the crawl but not for those identified by the notifier . In one embodiment the path to the pipe for crawler is a command line option in a configuration file read by crawler and notifier in control script. Of note the use of named pipes allows for some debug capability in that the crawler output can be fed directly to an application by having the application read from the pipe that would have been used by the notifier . For example LINUX allows hard links to named pipes on the same file system so the crawler may be writing to var local notifyd while the application is reading from usr local lib application pipe .

In one embodiment the crawler produces XML messages in similar fashion to notifier . Notifier may then re distribute those messages via dispatcher according to the rules provided by registered applications indicated in subscription database . Crawler may ensure that its messages are serialized to the notifier

The crawler may store its information in a catalog database which is stored with the volume in disks that has been crawled by the crawler . This permits the data retrieved by crawler to accompany the data. The information contained in the catalog database may include among other things transcoding information extracted metadata such as thumbnail images etc. play counts file locations and the like.

In addition the crawler may be configured to synchronize the state of a file in the catalog database with its corresponding state in the file system. For example after its initial scan the crawler may leverage the functionality of file notification events provided by the notification system . As noted in one embodiment the crawler instantiates a crawler daemon process A that receives updates to the file system from the notification system . In response the crawler daemon process A forwards the files system event information to the crawler . In one embodiment the crawler daemon process A employs a named data pipe. In other embodiments the crawler daemon process A employs an inter process communication thread.

In stage the dispatcher determines the set of subscribers that are to receive a notification about the file system event. For example in one embodiment the dispatcher may perform a filtering search for matches in the subscriber database for entities such as clients which match the criteria for receiving the notification message. As noted above the clients may declare the criteria for notifications that they are to receive based on writing to a configuration file in the subscription database . In one embodiment the notification is formatted as an XML message which is forwarded by the dispatcher .

In stage the dispatcher forwards the message to its intended destinations. For example in one embodiment the dispatcher forwards the message about the file system event to respective subscriber daemons running on the storage device . Subsequently the daemons generate and send the message for example via the network interface to the clients .

In one embodiment the notification is formatted as an XML message which is forwarded by the dispatcher . In one embodiment after its initial scan of the disks or other media the crawler subscribes to the notification system in order to receive various file system events. As such the crawler may establish a crawler daemon process A which is in communications with the dispatcher for example via a named data pipe.

In stage the crawler transcodes the file regarding the file system event. The crawler may perform transcoding from any known format to any other known format.

In stage the crawler extracts metadata about the file. For example the crawler may perform a meta data scan of the file such for album art extraction user interaction data etc. The crawler may also extract metadata about client interaction with various files such as edits play counts etc. Furthermore the crawler may discover files of any type and extract associated metadata about the files automatically during a scan or at the request of a client .

In stage the crawler then stores information about the change to the file and the extracted metadata in its catalog . Thus with this mechanism the crawler may synchronize the state of a file in the catalog database with its corresponding state in the file system by monitoring the file system events reported by the notification system . Furthermore the crawler may send notifications regarding such changes to a file or changes to the catalog . For example in one embodiment the crawler may write to a named pipe that is read by the notifier . In turn this may prompt the notifier to generate and forward a message that is routed by the dispatcher . The dispatcher then determines the next destination of this message from the crawler for example based on a filtering match from subscriber database and forwarding the message to one or more of the daemon processes .

The features and attributes of the specific embodiments disclosed above may be combined in different ways to form additional embodiments all of which fall within the scope of the present disclosure. Although the present disclosure provides certain embodiments and applications other embodiments that are apparent to those of ordinary skill in the art including embodiments which do not provide all of the features and advantages set forth herein are also within the scope of this disclosure. Accordingly the scope of the present disclosure is intended to be defined only by reference to the appended claims.

