---

title: System and method for producing tree perspectives of storage systems
abstract: System and method for producing tree perspectives of a plurality of storage systems using storage system descriptors and a set of search rules. The system and method herein provide an easy way to locate and identify specific storage systems. The storage system descriptors comprise external storage system metadata (referred to herein as “external metadata”) and/or internal storage system attributes (referred to herein as “internal attributes”) that describe the storage systems. The set of search rules comprises one or more metadata search rules and/or one or more attribute search rules. The set of search rules may be applied to the external metadata and/or internal attributes to determine a set of one or more matching storage systems. A tree perspective may be produced that represents the set of matching storage systems. The tree perspective may display the hierarchal organization of the set of matching storage systems through a hierarchical tree structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122412&OS=09122412&RS=09122412
owner: NetApp, Inc.
number: 09122412
owner_city: Sunnyvale
owner_country: US
publication_date: 20130226
---
Embodiments of the present disclosure relate to storage systems and in particular a system and method for producing tree perspectives of storage systems.

A storage system typically comprises one or more storage devices for storing client data. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. For example the storage devices may be organized as a storage array. In some embodiments a storage device may comprise a disk device commonly described as a self contained rotating magnetic media storage device such as a hard disk drive HDD or direct access storage device DASD . In other embodiments a storage device may comprise another type of storage device.

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of storage objects such as files and logical units LUs . A known type of file system is a write anywhere file system that does not overwrite data on disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from NetApp Inc. Sunnyvale Calif.

The storage system may be further configured to allow many servers to access storage objects stored on the storage system. In this model the server may execute an application such as a database application that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each server may request the data services of the storage system by issuing access requests read write requests as file based and block based protocol messages in the form of packets to the system over the network.

A plurality of storage systems may be interconnected to provide a cluster architecture configured to service many servers. The storage systems of the cluster may be configured to communicate with one another to act collectively to increase performance or to offset any single storage system failure within the cluster. The cluster provides data service to servers by providing access to a shared storage comprising a set of storage devices . Typically servers will connect with a storage system of the cluster for data access sessions with the storage system. During a data access session with a storage system a server may submit access requests read write requests that are received and performed by the storage system.

A manager server may be used to manage a large number of storage systems for performing maintenance monitoring or other management functions on the storage systems. Currently a simple list of the storage systems may be used to identify a specific storage system. However when managing an increasingly large number of storage systems it becomes more difficult to identify a specific storage system or identify faulty storage systems needing attention using the current simple lists. For example a manager server may manage hundreds or thousands of storage systems and an administrator would typically need to analyze the entire list of storage systems to identify specific storage systems. As such there is a need for a better method of managing and identifying storage systems for allowing an administrator to manage a large number of storage systems.

The embodiments described herein provide a system and method for producing tree perspectives of a plurality of storage systems using storage system descriptors and a set of search rules. The system and method herein provide a way to quickly and easily locate and identify specific storage systems. In some embodiments the storage system descriptors comprise external storage system metadata referred to herein as external metadata and or internal storage system attributes referred to herein as internal attributes that describe the storage systems. In some embodiments the set of search rules comprises one or more metadata search rules and or one or more attribute search rules. The set of search rules may be applied to the external metadata and or internal attributes to determine a set of one or more matching storage systems. A tree perspective may be produced that represents the set of matching storage systems. The tree perspective may display the hierarchal organization of the set of matching storage systems through a hierarchical tree structure.

The external metadata for a storage system may comprise descriptions of the storage system that are received from a user administrator. External metadata may comprise descriptions that are externally imposed on a storage system in that they are artificially or arbitrarily imposed on a storage system by a user administrator depending on the requirements of the user administrator. Examples of different types of external metadata include metadata that relates to the geographical location of the storage system e.g. Country State City etc. the users owners of the storage system e.g. Users Owners UserGroup etc. the storage purpose use of the storage system e.g. Purpose PrimaryUse etc. etc. For each storage system each type of external metadata may comprise one or more values. For example the types of metadata that relate to the geographical location of the storage system may comprise one value e.g. USA for metadata type Country California for metadata type State Palo Alto for metadata type City etc. . The types of metadata that relate to the users owners of the storage system may comprise one or more values e.g. Administrators and Engineers for metadata type UserGroup etc. . The types of metadata that relate to the storage purpose use of the storage system may also comprise one or more values e.g. Email exchange and File database for metadata type Purpose . In other embodiments external metadata of other types are used. External metadata for each storage system may be transmitted and stored to the storage system.

In some embodiments the internal attributes for a storage system may comprise descriptions of the storage system that are not produced created by an administrator. Internal attributes may comprise descriptions that relate to physical technical or configuration properties or specifications of the storage system. As such internal attributes are not artificially or arbitrarily imposed on a storage system by an administrator. Examples of different types of internal attributes include firmware version and model type number of the storage system and interface storage device types supported by the storage system etc. In other embodiments other internal attributes are used. The internal attributes are typically already part of the system information for each storage system and do not need to be generated and stored to the storage system.

A manager server may be connected with the plurality of storage systems through a network. The manager server may execute a manager engine that manages and communicates with the storage systems e.g. for performing maintenance monitoring or other management functions on the storage systems . Each storage system may have an associated storage system identifier ID that uniquely identifies the storage system among the plurality of storage systems. Each storage system may also execute a descriptor engine. In some embodiments the manager engine on the server may operate in conjunction with the descriptor engines on the storage systems to perform embodiments described herein.

In some embodiments the manager engine receives external metadata for each storage system e.g. from an user administrator . Each storage system may comprise a local storage for storing system data information and a plurality of storage devices for storing client data. The manager engine may transmit via the network the external metadata corresponding to each storage system to the descriptor engine of each storage system. In some embodiments each descriptor engine receives the external metadata and stores the external metadata to a predetermined storage location on the local storage of the storage system. Note that internal attributes are typically already part of the system information for each storage system and do not need to be generated and stored to the storage system.

In some embodiments a search of the storage systems and a resulting tree perspective produced for the search may be based only on the external metadata of the storage systems based only on the internal attributes of the storage systems or based on the external metadata and internal attributes of the storage systems. In these embodiments the manager engine may receive a set of search rules e.g. from an administrator . The set of search rules may comprise one or more metadata search rules and or one or more attribute search rules. Each metadata search rule may specify a particular type of external metadata and one or more values for the type of external metadata. For example a metadata search rule may specify a State metadata type with a value of California or a wildcard value indicating all possible values of State . Each attribute search rule may specify a particular type of internal attribute and one or more values for the type of internal attribute. For example an attribute search rule may specify a Firmware attribute type with a specific desired value or a wildcard value indicating all possible values of Firmware .

The manager engine may then retrieve through the network the external metadata and or internal attributes from each storage system. In some embodiments the manager engine also retrieves a status indicator from each storage system that indicates whether or not the storage system comprises any hardware and or software components that are faulty or malfunctioning and requires attention e.g. maintenance or repair . For example a faulty status indicator from a storage system may indicate the storage system is faulty or malfunctioning e.g. a storage device is not operating correctly the operating system has crashed etc. . An operational status indicator from a storage system may indicate the storage system is not faulty or malfunctioning and is operating normally.

The manager engine may comprise and implement a set of application programming interfaces APIs for interfacing and communicating with the storage systems. The manager engine the APIs and descriptor engine of each storage system may operate in conjunction to retrieve and transmit via the network the external metadata internal attributes and or status indicator and storage system ID from each storage system to the manager engine. The retrieved external metadata internal attributes and or status indicator for each storage system may then be stored to a descriptor data structure along with the corresponding storage system ID for each storage system. The descriptor data structure e.g. file may be stored locally on the manager server.

The manager engine may then apply the set of search rules to the external metadata and or internal attributes stored in the descriptor data structure to determine a set of one or more matching storage systems. The manager engine may do so by applying each metadata search rule to the retrieved external metadata and each attribute search rule to the internal attributes. Each matching storage system may have associated external metadata and or internal attributes that comply with and satisfy the set of search rules. The manager engine may produce a tree perspective displaying the set of matching storage systems. The tree perspective may comprise a hierarchical structure comprising a plurality of nodes arranged in parent child relationships and a plurality of hierarchical levels. Each node may represents a search rule or a matching storage system. A hierarchical level may be based on and defined by a search rule and a plurality of search rules may produce a plurality of hierarchical levels. In some embodiments the hierarchical structure of the tree perspective may be determined based on the order of the search rules in the set of search rules.

Each node in the tree perspective may be identified by a unique identifier. A parent node in the tree perspective may represent a search rule and have a child node representing another search rule or a matching storage system. A node representing a search rule may be identified by the value of the search rule e.g. California . A child node representing a matching storage system comprises a leaf node of the tree perspective and may be identified by the storage system ID. In some embodiments the tree perspective also displays the status for each matching storage system through the node representing the matching storage system. In these embodiments a node representing a matching storage system having a operational status indicator comprises a first appearance e.g. a green node whereas a node representing a matching storage system having a faulty status indicator comprises a second appearance e.g. a red node the first and second appearances being different.

After the tree perspective of the matching storage systems is produced a user administrator may interact with the tree perspective. In these embodiments the manager engine may provide a tree perspective comprising a user interface UI providing a plurality of user interactive functions. For example the tree perspective UI may provide functions for expanding or collapsing each parent node in the tree perspective. In some embodiments the tree perspective UI may also provide a modifying function for each node that represents a matching storage system. The modifying function for a node allows a user administrator to directly modify the external metadata for the matching storage system represented by the node. After receiving the modified external metadata for a matching storage system the manager engine may transmit through the network the modified external metadata to the matching storage system for storage to its local storage. The manager engine may also store the modified external metadata for the matching storage system in the descriptor data structure and then dynamically re produce the tree perspective by re applying the set of search rules to the modified descriptor data structure.

The system and methods described herein allows administrators to quickly search and identify particular storage systems as well as storage systems requiring attention among the plurality of storage systems. It further allows administrators to easily organize and view a large number of storage system in various ways that are meaningful to the administrator based on the type of external metadata used e.g. geographical location users owners primary purpose use etc. . The tree perspectives produced by the searches also provide an intuitive hierarchical view of the matching storage systems and an interactive UI that provides modification of the external metadata for matching storage systems.

In the following description numerous details and alternatives are set forth for purpose of explanation. However one of ordinary skill in the art will realize that embodiments can be practiced without the use of these specific details. In other instances well known structures and devices are shown in block diagram form to not obscure the embodiments with unnecessary detail.

The description that follows is divided into three sections. Section I describes a storage system environment in which some embodiments operate. Section II describes methods for producing tree perspectives of the storage systems. Section III describes examples of tree perspectives.

Each storage system may be coupled to the manager server over a network such as a local area network LAN an Ethernet subnet a PCI or PCIe subnet a switched PCIe subnet a wide area network WAN a metropolitan area network MAN the Internet or the like. Interaction between the manager server and the storage system s can enable the provision of management services. The manager server may request particular services of the storage system s by submitting requests and the storage system s may respond to the requests of the manager server by receiving or transmitting data to the manager server over the network e.g. by exchanging data packets through a connection over the network .

Communications between a storage system and the manager server are typically embodied as packets sent over the computer network . The manager server may request the services of the storage system by issuing storage access protocol messages formatted in accordance with a conventional storage access protocol for accessing storage devices such as CIFS NFS etc. . Access requests e.g. read write access requests may be implemented by issuing packets using file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing data in the form of files and directories. Alternatively the manager server may issue access requests by issuing packets using block based access protocols such as the Fibre Channel Protocol FCP Fibre Channel over Ethernet FCoE or Internet Small Computer System Interface iSCSI Storage Area Network SAN access when accessing data in the form of blocks.

Each storage system may comprise a computer system that stores client data in a set of one or more storage devices . A storage device may refer to a non volatile storage device for computer data storage of client data. A storage device may comprise writable storage device media such as storage devices video tape optical devices DVD magnetic tape flash memory Magnetic Random Access Memory MRAM Phase Change RAM PRAM or any other similar media adapted to store information including data and parity information .

The storage system comprises a network adapter one or more processors a memory a local storage device and a storage adapter interconnected by a system bus . The network adapter comprises the mechanical electrical and signaling circuitry needed to connect the storage system to a manager server over a computer network. The storage system may include one or more network adapters. Each network adapter has a unique Internet Protocol IP address and may provide one or more data access ports e.g. for the manager server to access the storage system . In some embodiments the storage adapter and the network adapter may comprise a single unified target adapter UTA that may be used to perform the functionality of both the storage adapter and the network adapter .

The memory comprises storage locations that are addressable by the processor and adapters for storing software program code and data. The memory may comprise a form of random access memory RAM that is generally cleared by a power cycle or other reboot operation e.g. it is a volatile memory . In other embodiments however the memory may comprise a non volatile form of memory that does not require power to maintain information. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data stored in the memory .

The processor executes a storage operating system application of the storage system that functionally organizes the storage system by inter alia invoking storage operations in support of a file service implemented by the storage system. In some embodiments the storage operating system comprises a plurality of software layers that are executed by the processor . Portions of the storage operating system are typically resident in memory . It will be apparent to those skilled in the art however that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the storage operating system . As discussed herein the term storage operating system as used herein with respect to a storage system generally refers to the computer executable code operable on a storage system that implements file system semantics such as the above referenced WAFL and manages data access. In this sense Data ONTAP software is an example of such a storage operating system implemented as a microkernel. The storage operating system can also be implemented as an application program operating over a general purpose operating system such as UNIX or Windows or as a general purpose operating system with configurable functionality.

The storage adapter cooperates with the storage operating system executing on the storage system to access client data. The client data may be stored on the storage devices that are attached via the storage adapter to the storage system or other node of a storage system as defined herein. The storage adapter includes input output I O interface circuitry that couples to the storage devices over an I O interconnect arrangement such as a conventional high performance Fibre Channel serial link topology. In response to an access request data may be retrieved by the storage adapter and if necessary processed by the processor or the adapter itself prior to being forwarded over the system bus to the network adapter where the data may be formatted into a packet and returned to the requesting server.

In an illustrative embodiment the storage devices may comprise disk devices that are arranged into a plurality of volumes each having a file system associated therewith. In some embodiments the storage devices comprise disk devices that are configured into a plurality of RAID redundant array of independent disks groups whereby multiple storage devices are combined into a single logical unit i.e. RAID group . In a typical RAID group storage devices of the group share or replicate data among the disks that may increase data reliability or performance. The storage devices of a RAID group are configured so that some disks store striped data and at least one disk stores separate parity for the data in accordance with a preferred RAID 4 configuration. However other configurations e.g. RAID 5 having distributed parity across stripes RAID DP etc. are also contemplated. A single volume typically comprises a plurality of storage devices and may be embodied as a plurality of RAID groups.

In some embodiments each storage system may execute a descriptor engine that is resident in memory . In these embodiments the manager engine on the manager server may operate in conjunction with the descriptor engines on the storage systems to perform embodiments described herein. For example the manager engine may determine and transmit via the network external metadata for the storage system to the descriptor engine which then stores the external metadata to a predetermined storage location on the local storage device of the storage system .

Also each storage system has an associated storage system identifier ID that uniquely identifies the storage system among the plurality of storage systems. For example a storage system ID may comprise a name designated by an administrator an IP address of the storage system etc. In some embodiments the manager engine may determine or receive e.g. from an administrator a storage system ID for each storage system and transmit the storage system ID to each storage system which then stores the storage system ID to a predetermined storage location on the local storage device . In other embodiments the storage system ID for each storage system is produced and stored using a different manner known in the art.

The storage devices are used for storing client data whereas the local storage device is typically not used for storing client data. In these embodiments the local storage device is used for storing system data information e.g. for system operations configuration information etc. . A local storage device may comprise a writable storage device such as non volatile random access memory NVRAM solid state device disk device and any other similar media adapted to store computer data. In some embodiments the local storage device may store external metadata and an assigned storage system ID.

The manager server comprises a network adapter one or more processors a memory and a local storage device an output component and an input component coupled and interconnected by a system bus . The manager server may comprise computer hardware and software similar to the components of the storage system and those components are not discussed in detail here. The processor executes a server operating system application of the manager server . The server operating system can be implemented as an application program operating over a general purpose operating system such as UNIX or Windows or as a general purpose operating system with configurable functionality. Portions of the server operating system are typically resident in memory .

The output component may be of any type generally used by a computer system to provide information to an end user e.g. administrator . For example the output component could include a monitor an audio speaker or an alphanumeric display. Similarly the input component may be of any type that allows an end user to provide input into a computer system. For example the input component may be a keyboard a mouse or a speech recognition system.

In some embodiments each manager server may execute a manager engine that is resident in memory . The manager engine may comprise and implement a set of application programming interfaces APIs for interfacing and communicating with the storage systems. As known in the art an API may provide a format used by an application to communicate with an operating system or other such program. For example an API may be implemented by writing function calls within the application whereby a driver program on the computer is available to perform the required function.

The manager engine its APIs and the descriptor engine of each storage system may operate in conjunction to perform embodiments herein e.g. to receive and transmit via the network the external metadata internal attributes and or status indicator and storage system ID from each storage system to the manager engine . The received external metadata internal attributes and or status indicator for each storage system may then be stored to a descriptor data structure along with the corresponding storage system ID for each storage system on the local storage device of the manager server . The manager engine may then receive and apply a set of search rules to the external metadata and or internal attributes stored in the descriptor data structure to produce a tree perspective of a set of one or more matching storage systems.

The embodiments described herein provide a system and method for producing tree perspectives of a plurality of storage systems using storage system descriptors and a set of search rules. The system and method herein provide a way to quickly and easily locate and identify specific storage systems. In some embodiments the storage system descriptors comprise external storage system metadata referred to herein as external metadata and or internal storage system attributes referred to herein as internal attributes that describe the storage systems. In some embodiments the set of search rules comprises one or more metadata search rules and or one or more attribute search rules. The set of search rules may be applied to the external metadata and or internal attributes to determine a set of one or more matching storage systems. A tree perspective may be produced that represents the set of matching storage systems. The tree perspective may display the hierarchal organization of the set of matching storage systems through a hierarchical tree structure.

The technique begins by the manager engine determining at step a storage system ID for each storage system in a plurality of storage systems. For example a storage system ID may comprise a name designated by an administrator an IP address of the storage system etc. In some embodiments the manager engine may receive e.g. from an administrator a storage system ID for each storage system . In other embodiments the storage system ID for each storage system is determined using a different manner known in the art. As such each storage system has an associated storage system ID that uniquely identifies the storage system among the plurality of storage systems.

The manager engine then determines at step external metadata for each storage system in the plurality of storage systems. In some embodiments the manager engine may receive e.g. from an administrator external metadata for each storage system . The external metadata for a storage system may comprise descriptions of the storage system that are produced created by a user administrator. External metadata may comprise descriptions that are externally imposed on a storage system in that they are artificially or arbitrarily imposed on a storage system by a user administrator depending on the requirements of the user administrator.

Examples of different types of external metadata include metadata that relates to the geographical location of the storage system e.g. Country State City etc. the users owners or user owner groups of the storage system e.g. Users Owners UserGroup etc. the storage purpose use of the storage system e.g. Purpose PrimaryUse etc. etc. For each storage system each type of external metadata may comprise one or more values. For example the types of metadata that relate to the geographical location of the storage system may comprise one value e.g. USA for metadata type Country California for metadata type State Palo Alto for metadata type City etc. . The types of metadata that relate to the users owners of the storage system may comprise one or more values e.g. Administrators and Engineers for metadata type UserGroup etc. . The types of metadata that relate to the storage purpose use of the storage system may also comprise one or more values e.g. Email exchange and File database for metadata type Purpose . In other embodiments external metadata of other types are used.

In some embodiments the external metadata for a storage system comprises a set of one or more key value pairs. A key may comprise a specific type of external metadata such as State UserGroup or Purpose. Each key may have one or more specified values. For example the key State may have one specific value such as California indicating that the storage system is geographically located in California. For example the key UserGroup may have one or more values such as Administrators and Engineers indicating that the user groups Administrators and Engineers are both using the storage system. For example the key Purpose may have one or more values such as Email exchange and File database indicating that the storage system is being used for storing an email exchange and file database.

At step for each storage system the manager engine then transmits via the network the storage system ID and external metadata determined for the storage system to the descriptor engine of the storage system . At step the descriptor engine of each storage system receives and stores the storage system ID and external metadata to a predetermined storage location on the local storage of the storage system. In these embodiments each storage system may comprises a local storage for storing system data information and not for storing client data. Note that internal attributes and status indicators are typically already part of the system information for each storage system and do not need to be generated and stored to the storage system. The technique then ends.

The manager engine may perform a search of the plurality of storage systems and produce a tree perspective for the search. In some embodiments a search of the storage systems and the resulting tree perspective may be based only on the external metadata of the storage systems based only on the internal attributes of the storage systems or based on the external metadata and internal attributes of the storage systems.

The technique begins by the manager engine determining at step a set of search rules comprising one or more metadata search rules and or one or more attribute search rules. In some embodiments the manager engine receives the set of search rules e.g. from an administrator . Each metadata search rule may specify or indicate that it is a metadata search rule and each attribute search rule may specify or indicate that it is an attribute search rule. Each metadata search rule may also specify a particular type of external metadata and one or more values for the type of external metadata. As such a metadata search rule may comprise a key value pair a key comprising a specific type of external metadata and having one or more values. For example a metadata search rule may specify a City metadata type key with a value of Palo Alto or a wildcard value indicating all possible values of City . Each attribute search rule may also specify a particular type of internal attribute and one or more values for the type of internal attribute. As such an attribute search rule may also comprise a key value pair a key comprising a specific type of internal attribute and having one or more values. For example an attribute search rule may specify a Firmware attribute type key with a specific desired value or a wildcard value indicating all possible values of Firmware .

The manager engine may then retrieve and receive at step through the network the storage system ID external metadata internal attributes and or a status indicator from each storage system in the plurality of storage systems. To retrieve and receive the storage system ID and external metadata for each storage system the manager engine may submit a request through the network to the descriptor engine of each storage system which then performs the request and sends through the network the storage system ID and external metadata to the manager engine . The descriptor engine of each storage system may do so by retrieving the storage system ID and external metadata from the predetermined storage location on the local storage of the storage system. The storage system ID and external metadata are discussed in detail above in relation to .

To retrieve the internal attributes and or status indicator for each storage system the manager engine may implement a set of APIs for interfacing and communicating with the storage systems to request and receive the internal attributes and or status indicator. For example for each storage system the manager engine may use an API provided by the storage system for communicating with the storage systems to request the internal attributes and or status indicator. The API may then return the status and various attributes of the storage system to the manager engine . The manager engine then processes the returned information to determine the internal attributes and or status indicator for the storage system. Also the manager engine may provide an API to the tree perspective UI. When the tree perspective UI requires the internal attributes and or status indicator the tree perspective UI may request this information from the manager engine using the API.

In some embodiments the internal attributes for a storage system may comprise descriptions of the storage system that are not produced created by an administrator. Internal attributes may comprise descriptions that relate to physical technical or configuration properties or specifications of the storage system. As such internal attributes are not artificially or arbitrarily imposed on a storage system by an administrator. Examples of internal attributes include firmware version and model type number of the storage system and interface storage device types e.g. Fibre Channel SAS iSCSI etc. storage device speeds Host Bus Adapter HBA types and or solid state storage devices supported by the storage system etc. In other embodiments other internal attributes are used.

In some embodiments the internal attributes for a storage system comprises a set of one or more key value pairs. A key may comprise a specific type of internal attributes such as Firmware version Model number or Storage device types. Each key may have one or more specified values. For example the key Firmware version may have one specific value and the key Model number may have one specific value. For example the key Storage device types may have one value indicating that all storage devices of the storage system are the same type or have multiple values indicating that the storage devices of the storage system are of different types.

In some embodiments the manager engine also retrieves a status indicator from each storage system that indicates whether or not the storage system comprises any hardware and or software components that are faulty or malfunctioning and requires attention e.g. maintenance or repair . For example a faulty status indicator from a storage system may indicate the storage system is faulty or malfunctioning e.g. a storage device is not operating correctly the operating system has crashed etc. . An operational status indicator from a storage system may indicate the storage system is not faulty or malfunctioning and is operating normally.

In some embodiments the manager engine retrieves and receives from the storage systems at step only the types of external metadata and or internal attributes that are specified in the set of search rules determined at step . For example if the set of search rules comprises only metadata search rules that specifies a State metadata type and a City metadata type the manager engine will request and receive data information regarding only those metadata types from the storage systems. For example if the set of search rules comprises only a metadata search rule that specifies a State metadata type and an attribute search rule that specifies a Firmware attribute type the manager engine will request and receive data information regarding only that metadata type and that attribute type from the storage systems.

The manager engine may then stores at step the storage system ID external metadata internal attributes and or a status indicator received from each storage system to a descriptor data structure DS . The descriptor DS may be stored to local storage on the manager server .

The manager engine may then apply at step the set of search rules to the external metadata and or internal attributes stored in the descriptor DS to determine a set of one or more matching storage systems. The manager engine may do so by applying each metadata search rule to the retrieved external metadata and each attribute search rule to the internal attributes. Each matching storage system may have associated external metadata and or internal attributes that comply with and satisfy the set of search rules. In some embodiments for each metadata search rule a matching storage system comprises an external metadata type and value that matches or is consistent with the external metadata type and value specified in the metadata search rule. For a metadata search rule specifying a wildcard value for an external metadata type a matching storage system may have any value for the external metadata type to be considered matching. In some embodiments for each attribute search rule a matching storage system comprises an internal attribute type and value that matches or is consistent with the internal attribute type and value specified in the attribute search rule. For an attribute search rule specifying a wildcard value for an internal attribute type a matching storage system may have any value for the internal attribute type to be considered matching. 

The manager engine may then produce at step a tree perspective displaying the set of matching storage systems. The tree perspective may comprise a hierarchical structure comprising a plurality of nodes arranged in a plurality of hierarchical levels and parent child relationships. Each node in the tree perspective may be identified by a unique identifier. A parent node in the tree perspective may represent a search rule and have a child node representing another search rule or a matching storage system. A node representing a search rule may be identified by a value specified by the search rule e.g. California . A child node representing a matching storage system comprises a leaf node and may be identified by the storage system ID of the matching storage system. In some embodiments the tree perspective also displays the status e.g. faulty or operational for each matching storage system through the appearance node representing the matching storage system.

After the tree perspective of the matching storage systems is produced a user administrator may interact with the tree perspective. In these embodiments the manager engine may provide a tree perspective comprising a user interface UI providing a plurality of user interactive functions. The functions of the tree perspective UI may be accessed and implemented using for example output component s and input component s . The following steps through of the technique illustrate exemplary UI functions that may be provided by the tree perspective. The UI functions and the order and number of steps are for illustrative purposes only and in other embodiments other UI functions and a different order and or number of steps are used.

Through the tree perspective UI the manager engine receives at step from a user a selection to collapse a parent node. The parent node may comprise one or more child nodes with the parent node residing on a higher hierarchical level and each child node residing on a lower hierarchical level than the parent node. In response the manager engine may collapse the parent node by hiding no longer displaying the child nodes and the lower hierarchical levels of the child nodes in the tree perspective UI while still displaying the parent node. Through the tree perspective UI the manager engine receives at step from a user a selection to expand a collapsed parent node. In response the manager engine may expand the parent node by displaying the child nodes and the lower hierarchical levels of the child nodes in the tree perspective UI.

Through the tree perspective UI the manager engine receives at step from a user a selection to modify a node representing a matching storage system having current external metadata . In some embodiments the tree perspective UI may provide a modifying function for each node that represents a matching storage system. The modifying function for a node allows a user administrator to directly modify the external metadata for the matching storage system represented by the node. In response the manager engine then displays the current external metadata e.g. through a pop up window and receives modifications of the current external metadata from the user.

The manager engine then stores at the modified external metadata by transmitting through the network the modified external metadata to the matching storage system that is represented by the selected node for storage to its local storage device . The manager engine may also store the modified external metadata to the descriptor DS e.g. by overwriting the current external metadata with the modified external metadata in the entry representing the matching storage system . The manager engine may then dynamically at re produce the tree perspective by re applying the set of search rules to the external metadata and or internal attributes of the descriptor DS having the modified external metadata. The technique then ends.

The technique may be repeated a plurality of times to allow users administrators to produce a plurality of different tree perspectives. The system and methods described herein allows users administrators to quickly search and identify particular storage systems as well as storage systems requiring attention among the plurality of storage systems. It further allows administrators to easily organize and view a large number of storage system in various ways that are meaningful to the administrator based on the type of external metadata used e.g. geographical location users owners primary purpose use etc. . The tree perspectives produced by the searches also provide an intuitive hierarchical view of the matching storage systems and an interactive UI that provides modification of the external metadata for matching storage systems.

As discussed above in Section II the manager engine produces a tree perspective displaying a set of matching storage systems. The tree perspective may comprise a hierarchical structure comprising a plurality of nodes arranged in a plurality of hierarchical levels and parent child relationships. Each node in the tree perspective may be identified by a unique identifier. A parent node in the tree perspective may represent a search rule and have a child node representing another search rule or a matching storage system. A node representing a search rule may be identified by a value specified by the search rule. A child node representing a matching storage system comprises a leaf node and may be identified by the storage system ID of the matching storage system.

In some embodiments the tree perspective also displays the status e.g. faulty or operational for each matching storage system through the appearance node representing the matching storage system. In these embodiments a node representing a matching storage system having a operational status indicator comprises a first appearance referred to as an operational appearance such as a green node whereas a node representing a matching storage system having a faulty status indicator comprises a second appearance referred to as a faulty appearance such as a red node the first and second appearances being different. In some embodiments if a child node representing a matching storage system has a faulty appearance then each parent node of the child node also comprises a faulty appearance. In this manner the faulty appearance of a child node is rolled up to the upper parent nodes.

In some embodiments each hierarchical level may be based on and defined by a search rule whereby a plurality of search rules may produce a plurality of hierarchical levels. In some embodiments the hierarchical structure of the tree perspective may be determined based on the order of the search rules in the set of search rules. For example the set of search rules may comprise a first search rule appearing before a second search rule in the set of search rules. As such the manager engine may produce a first hierarchical level and a first set of nodes based on the first search rule and a second hierarchical level and a second set of nodes based on the second search rule the first hierarchical level being higher than the second hierarchical level and the second set of nodes being child nodes of the first set of nodes.

As shown in the tree perspective comprises a plurality of nodes e.g. etc. in parent child relationships and arranged in a plurality of hierarchical levels indicating the parent child relationships. For example the tree perspective may comprise a first hierarchical level comprising a first set of nodes e.g. etc. a second hierarchical level comprising a second set of nodes e.g. etc. and a third hierarchical level comprising a third set of nodes e.g. etc. whereby the second set of nodes are child nodes of the first set of nodes and the third set of nodes are child nodes of the second set of nodes.

In the example of the first set of nodes comprises a CA node representing the search rule State California and a CO node representing the search rule State Colorado. For the CA parent node the second set of nodes comprises a Palo Alto child node and a San Jose child node representing the search rule City. For the CO parent node the second set of nodes comprises a Boulder child node and a Denver child node representing the search rule City. In this example Palo Alto and San Jose are the only values used for City for State California and Boulder and Denver are the only values used for City for State Colorado. Each node in the second set of nodes has one or more child leaf nodes representing matching storage systems. For example for the Palo Alto parent node the third set of nodes comprises a SS1 child leaf node representing the matching storage system having the storage system ID SS1 a SS2 child leaf node representing the matching storage system having the storage system ID SS1 and so forth.

As shown in the SS1 child leaf node has a faulty appearance e.g. is shaded to indicate that it represents a matching storage system having a faulty status indicator whereas the other child leaf nodes have an operational appearance e.g. are not shaded to indicate that they represent matching storage systems having an operational status indicator. In some embodiments since the SS1 child leaf node has a faulty appearance then each parent node of the child node also comprises a faulty appearance so that the Palo Alto node and CA node are also given a faulty appearance e.g. are shaded .

As such the tree perspective arranges the matching storage systems in hierarchical levels based on which State and City the matching storage systems are located in and enables an administrator to easily locate storage systems that are in a specific City. Further the tree perspective allows the administrator to quickly determine which matching storage systems are operational and which are faulty and require attention.

As shown in the tree perspective comprises a plurality of nodes e.g. etc. in parent child relationships and arranged in a plurality of hierarchical levels indicating the parent child relationships. Note that the first and second hierarchical levels are similar to the tree perspective of and are not discussed in detail here. The tree perspective of comprises a third hierarchical level comprising a third set of nodes e.g. etc. and a fourth hierarchical level comprising a fourth set of nodes e.g. etc. whereby the third set of nodes are child nodes of the second set of nodes and the fourth set of nodes are child nodes of the third set of nodes.

In the example of the third set of nodes comprises FW1 nodes representing the search rule Firmware FW1. For the FW1 parent node the fourth set of nodes comprises a SS1 child leaf node representing the matching storage system having the storage system ID SS1 that has the attribute Firmware FW1 and so forth. As shown in the example of the storage systems having storage system IDs SS1 SS5 and SS6 have the firmware version FW1. This may be useful for example if FW1 is an older firmware version and the tree perspective allows an administrator to easily locate the storage systems having the older firmware version and needing an updated firmware version.

Some embodiments may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings herein as will be apparent to those skilled in the computer art. Some embodiments may be implemented by a general purpose computer programmed to perform method or process steps described herein. Such programming may produce a new machine or special purpose computer for performing particular method or process steps and functions described herein pursuant to instructions from program software. Appropriate software coding may be prepared by programmers based on the teachings herein as will be apparent to those skilled in the software art. Some embodiments may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art. Those of skill in the art would understand that information may be represented using any of a variety of different technologies and techniques.

Some embodiments include a computer program product comprising a computer readable medium media having instructions stored thereon in and when executed e.g. by a processor perform methods techniques or embodiments described herein the computer readable medium comprising sets of instructions for performing various steps of the methods techniques or embodiments described herein. The computer readable medium may comprise a non transitory computer readable medium. The computer readable medium may comprise a storage medium having instructions stored thereon in which may be used to control or cause a computer to perform any of the processes of an embodiment. The storage medium may include without limitation any type of device including floppy disks mini disks MDs optical disks DVDs CD ROMs micro drives and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices including flash cards magnetic or optical cards nanosystems including molecular memory ICs RAID devices remote data storage archive warehousing or any other type of media or device suitable for storing instructions and or data thereon in.

Stored on any one of the computer readable medium media some embodiments include software instructions for controlling both the hardware of the general purpose or specialized computer or microprocessor and for enabling the computer or microprocessor to interact with a human user and or other mechanism using the results of an embodiment. Such software may include without limitation device drivers operating systems and user applications. Ultimately such computer readable media further includes software instructions for performing embodiments described herein. Included in the programming software of the general purpose specialized computer or microprocessor are software modules for implementing some embodiments.

Those of skill would further appreciate that the various illustrative logical blocks circuits modules algorithms techniques processes or method steps of embodiments described herein may be implemented as computer electronic hardware computer software or combinations of both. To illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described herein generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the embodiments described herein.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The algorithm techniques processes or methods described in connection with embodiments disclosed herein may be embodied directly in hardware in software executed by a processor or in a combination of the two. In some embodiments any software application program tool module or layer described herein may comprise an engine comprising hardware and or software configured to perform embodiments described herein. In general functions of a software application program tool module or layer described herein may be embodied directly in hardware or embodied as software executed by a processor or embodied as a combination of the two. A software application layer or module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read data from and write data to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user device. In the alternative the processor and the storage medium may reside as discrete components in a user device.

While the embodiments described herein have been described with reference to numerous specific details one of ordinary skill in the art will recognize that the embodiments can be embodied in other specific forms without departing from the spirit of the embodiments. Thus one of ordinary skill in the art would understand that the embodiments described herein are not to be limited by the foregoing illustrative details but rather are to be defined by the appended claims.

