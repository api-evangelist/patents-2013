---

title: Authorization system for heterogeneous enterprise environments
abstract: A unified authorization system for an enterprise that includes heterogeneous access control environments is provided. Components in the enterprise utilizing either Java Platform Security (JPS) or Oracle Access Manager (OAM) can both use the unified authorization system to perform authorization. A common policy store can contain policies applicable to diverse components in a canonical form conducive to varieties of access control models. The data model used within the common policy store can support access control features found in both role-based policies and delegable access control administration. The common policy store can enable the querying and retrieval of authorization policies that are based on various access control models. A unified administrator interface permits administrators of applications following any kind of access control model to administer policies for resources. A unified policy decision engine can evaluate whether authorization policies are satisfied, regardless of the access control models that those policies follow.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058471&OS=09058471&RS=09058471
owner: Oracle International Corporation
number: 09058471
owner_city: Redwood Shores
owner_country: US
publication_date: 20130315
---
The present application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 657 648 filed Jun. 8 2012 titled AUTHORIZATION SYSTEM FOR HETEROGENEOUS ENTERPRISE ENVIRONMENTS the entire contents of which are incorporated herein by reference for all purposes. The present application is also related to U.S. patent application Ser. No. 13 838 537 filed Mar. 15 2013 titled OBLIGATION SYSTEM FOR ENTERPRISE ENVIRONMENTS.

The disclosure below relates generally to computer security and more specifically to access control within an enterprise that contains various access control environments.

In the field of computer security general access control includes authorization authentication access approval and audit. Access control involves access approval whereby a computing system makes a decision to grant or reject an access request from an already authenticated subject based on what the subject is authorized to access. Authentication and access control are often combined into a single operation so that access is approved based on successful authentication or based on an anonymous access token. Authentication methods and tokens may include passwords biometric scans physical keys electronic keys and devices hidden paths social barriers and monitoring by humans and automated systems.

In an access control model the entities that can perform actions in the system are usually called subjects and the entities representing resources to which access may need to be controlled are usually called objects. Subjects and objects may be software entities rather than human users. In some models such as the object capability model a software entity can potentially act as both a subject and object. Objects can include computing system resources referred to herein briefly as resources such as executable application programs referred to herein briefly as applications file system structures such as files and directories communication ports volatile memory segments etc.

Access control models used by current systems can be based upon capabilities or upon access control lists ACLs . In a capability based model holding an unforgettable reference or capability to an object provides access to the object roughly analogous to how possession of a house key grants one access to his house access is conveyed to another party by transmitting such a capability over a secure channel. In an ACL based model a subject s access to an object can depend on whether its identity is on a list associated with the object roughly analogous to how a bouncer at a private party would check one s ID to see whether his name is was the guest list access can be conveyed by editing the list. Both capability based and ACL based models can include mechanisms to allow access rights to be granted to all members of a group of subjects. Such a group itself can be modeled as a subject.

Access control systems can provide the services of authorization identification and authentication access approval and accountability. Authorization involves specifying the actions that a subject is permitted to perform. Identification and authentication prevents illegitimate subjects from accessing a system. Access approval involves granting access during operations by associating users with the resources that they are allowed to access based on an authorization policy. Accountability identifies the actions that a subject performed.

Authorization can involve defining access rights for subjects. An authorization policy can specify the operations that subjects are allowed to perform within a system. Some operating systems implement authorization policies as formal sets of permissions that are variations or extensions of three basic types of access. With read access a subject can read file contents and list directory contents. With write access a subject can change the contents of a file or directory by adding data to an existing file structure creating a new file structure deleting an existing file structure or renaming an existing file structure. With execute access a subject can cause the system to execute run a program. These rights and permissions can be implemented differently in systems having different access control models. Access control models are sometimes categorized as being either discretionary or non discretionary. Some widely recognized models include discretionary access control DAC mandatory access control MAC role based access control RBAC and attribute based access control ABAC .

In attribute based access control ABAC access is granted not necessarily based on the rights of the subject associated with a user after authentication but based on attributes of the user himself. The user can be asked to satisfy to an access control engine claims about his attributes. An attribute based access control policy specifies which claims need to be satisfied in order to grant access to an object. For example the claim could be older than 18. Under such circumstances a user that could prove this claim would be granted access. Under this model users can be anonymous because authentication and identification are not strictly required. Means for proving claims anonymously can be achieved using anonymous credentials. Extensible Access Control Markup Language XACML is a standard for attribute based access control.

Discretionary access control DAC involves a policy determined by the owner of an object. The owner decides which users are allowed to access the object and what privileges those users have with respect to the object. In a DAC based system each object in the system can have an owner. In some DAC based systems each object s initial owner can be the subject that caused that object to be created. The access policy for an object can be determined by that object s owner. In a DAC based system an owner can assign access rights and permissions for specific resources such as to other subjects.

Mandatory access control MAC involves allowing a user to access a resource if rules exist that allow that user to access that resource. Management of a MAC based system can be simplified when the objects are protected using hierarchical access control and or through the implementation of sensitivity labels. In a system using sensitivity labels a separate sensitivity label can be assigned to each subject and object. A subject s sensitivity label can specifies its level of trust. An object s sensitivity label can specify the level of trust required to access that object. A subject is permitted to access an object if the subject s sensitivity level is equal to or greater than the level of trust required by the object. MAC based system can use rule based access control. Rule based control can involve determining whether a subject should be granted or denied access to an object by comparing the object s sensitivity label to the subject s sensitivity label.

Role based access control RBAC can involve an access policy determined by a system in which an object exists. RBAC systems can be non discretionary in that access can be controlled at the system level by a system administrator instead of by an object s owner. RBAC systems can control collections of permissions. A role in an RBAC system can be viewed as a set of permissions. In an RBAC system a subject can access a resource if the subject has been assigned a role that is permitted to access that resource. Roles can be combined in a hierarchy in which higher level roles subsume permissions owned by sub roles.

Challenges may arise in an enterprise that involves heterogeneous authorization or access control environments. Such heterogeneous authorization environments may employ disparate access control models. An enterprise might for example involve some components that employ Java Platform Security JPS as an authorization environment and other components that employ Oracle Access Manager OAM as an authorization environment. The access controls provided by JPS can be application specific such access controls can be implemented within applications by the designers of those applications often with a deployment in a specific type of enterprise often one that is expected to use the RBAC model enterprise wide in mind. Thus the JPS access controls that application designers incorporate into their applications can be role based. In contrast the access controls provided by OAM can be enterprise wide generally applicable rather than specific to any particular application and specified at application deployment time rather than at application design time. The access controls provided by OAM can be based on a DAC based model that permits policy administration to be delegated. Implementing both types of systems in a separate and segregated manner can be be wasteful of system resources and duplicative of efforts.

Certain embodiments of the invention can provide a unified authorization system for an enterprise that includes heterogeneous access control environments.

For example an enterprise that involves some components e.g. applications that utilize JPS and some components that utilize OAM can include such a unified authorization system. Components utilizing either JPS or OAM can both use the unified authorization system to perform authorization among potentially other access control functions . The unified authorization system can include a common policy store in which authorization policies applicable to such diverse components can be stored in a canonical form that is conducive to a variety of different access control models e.g. both DAC and RBAC . Thus different authorization policies based on different models do not need to be stored separately in different data formats each authorization policy can be stored in a unified data format that conforms to a unified schema that is capable of specifying characteristics of different authorization policies that are based on a variety of different access control models. The data model used within the common policy store can support access control features found in both JSP and OAM environments such as both role based policies and delegable access control administration. The common policy store can enable the querying and retrieval of authorization policies that are based on a variety of different access control models. The unified authorization system can include a single unified administrator interface through which administrators of applications following any kind of access control model can administer policies for the resources they administer. The unified authorization system can include a single unified policy decision engine that can evaluate whether authorization policies are satisfied regardless of the access control models that those policies follow. Thus the separate implementation and duplication of such features for various different authorization environments e.g. JSP and OAM within a single enterprise can be avoided instead the authorization environments become united within the enterprise through the use of the unified authorization system.

In an embodiment an authorization system that conforms to legacy access control models provides mechanisms whereby structures already existing within those legacy access control models can be used to pass additional information to e.g. system time and or other environmental variable and from e.g. requirements that an access seeking application needs to perform that authorization system. Because the authorization system conforms to the legacy model legacy applications can still interact with the authorization system without modification. Because the authorization system also provides mechanisms whereby the existing structures can be used to pass the additional information more advanced applications can make use of enhanced access control features of the authorization system. Such enhanced features can involve policy based decisions that take into account the additional information in determining whether to permit resource access. Such enhanced features can involve the placement of policy specified obligations explained further below within the existing structures to be returned back to the advanced applications. Such obligations can indicate requirements that those applications need to fulfill in conjunction with performing operations on resources.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that the invention may be practiced without these specific details.

In an embodiment of the invention a single unified authorization system provides authorization functions for a variety of components of an enterprise even under circumstances in which those components were designed to function within different authorization environments. For example the unified authorization system can provide authorization functions for applications that are designed to function within an authorization environment that conforms to an RBAC model and also for applications that are designed to function within an authorization environment that conforms to a DAC model. The unified authorization system can provide authorization functions for applications that are designed to function in connection with a JPS authorization environment and also for applications that are designed to function in connection with an OAM authorization environment. The unified authorization system can enable role based authorization polices and can also enable the delegation of authorization administration from one subject e.g. application or user to another.

In an embodiment of the invention the single unified authorization system can include a unified policy store that contains all authorization policies applicable to all resources within the enterprise. Thus in an embodiment the enterprise does not involve any authorization policies that are stored outside of the unified policy store. The unified policy store can store authorization policies in a canonical policy format that conforms to a unified policy schema. The unified policy schema can be specified such that policies of a variety of different types all can be stored as data objects that are formatted according to the canonical policy format. Regardless of whether a policy was originally specified within a JPS environment an OAM environment or some other type of authorization environment that policy can be stored as an instance or object that conforms to the unified policy schema. The unified policy schema is flexible enough to accommodate features found in a variety of different authorization environments and used by a variety of different authorization policy models. As a result in an embodiment separate applications avoid the need to maintain their own separate policy stores which can serve to reduce overlap in policy metadata and also to reduce duplication of programming efforts.

In an embodiment of the invention the single unified authorization system can include a unified policy application programming interface API . This unified policy API can be used by a variety of different authorization management system tools regardless of the authorization policy model to which those tools conform and regardless of the authorization environment type in connection with which those tools were designed to function. The unified policy API can expose interfaces for methods that perform functions featured in a variety of different access control models e.g. RBAC DAC etc. . The unified policy API can expose interfaces for methods that perform functions featured in a variety of different authorization environments e.g. JPS OAM etc. . For example in an embodiment the unified policy API can expose interfaces for methods that perform role based authorization functions e.g. assigning to a specified user a role that is associated with specified permissions as well as interfaces for methods that permit the delegation of administrative capabilities e.g. delegating to another user the ability to assign application specific permissions to additional users . In an embodiment of the invention the unified policy API also can be used by a policy decision engine discussed below to query authorization polices that are stored in the unified policy store discussed above and to retrieve those authorization policies from the policy store. Because the authorization policies can be stored in a canonical data format regardless of the type of authorization environment to which those authorization policies were originally designed to apply queries can be issued to the unified policy store via the unified policy API without specially accounting for such differing types of authorization environments queries can be formatted using similar syntactical characteristics across the enterprise.

In an embodiment of the invention the single unified authorization system can include a single unified policy decision engine. The policy decision engine can evaluate authorization policies queried and retrieved from the unified policy store potentially through the unified policy API in order to determine whether those authorization policies are satisfied. If the policy decision engine determines that an authorization policy is satisfied then the policy decision engine can return an evaluation result that indicates that an application or user that sought access to a resource to which the policy was applicable may be granted that access. Conversely if the policy decision engine determines that an authorization policy is unsatisfied then the policy decision engine can return an evaluation result that indicates that an application or user that sought access to such a resource should be denied that access. In an embodiment of the invention the policy decision engine can be capable of evaluating authorization policies that are formatted according to the canonical data format discussed above. Consequently the policy decision engine can be capable of evaluating authorization policies that were originally applicable to various different authorization environments e.g. JPS OAM etc. . Because of this capability of the unified policy decision engine it is not necessary for the enterprise to contain a differently designed or differently implemented policy engine for each different type of authorization environment that exists within the enterprise.

Framework also can include an identity ID administration module . In one embodiment ID administration module can be used to create and manage identities throughout the enterprise system. Such identities may be user identities for example. ID administration module can interface with identity ID store . ID store can act as a repository for the identities created using ID administration module . ID store also can interface with policy API .

Framework also can include a role store . In an embodiment role store can act as a repository for roles that have been created within the enterprise system. Identities can be assigned to roles and roles can be assigned to permissions. In this manner multiple users who ought to have the same kinds of permissions can be assigned to the same role which in turn can be assigned to have those permissions. For example a manager role might be associated with a specified set of permissions and the identities of all users who ought to have those permissions can be associated with the manager role. Associations between identities roles and permissions can be maintained within role store . Role store also can interface with policy API .

Framework also can include policy enforcement points PEPs for various different kinds of security environments. For example framework can include FGA PEPs and XACML PEPs . Each of these sets of PEPs can interface with an access entitlement server . Access entitlement server can include multiple types of interfaces for the multiple different types of PEPs. Access entitlement server can include a decision engine . Decision engine is an example of the unified policy decision engine discussed above. Through access entitlement server FGA PEPs and XACML PEPs can access decision engine in order to determine whether specified access requests satisfy specified policies. Decision engine can make such a determination and return the result of the determination back to FGA PEPs and XACML PEPs . FGA PEPs and XACML PEPs can then enforce the determination made by decision engine by either granting or denying access to the requested resource. In an embodiment decision engine can be capable of evaluating policies that are specified in the canonical policy format discussed above. As a result decision engine can be capable of evaluating policies that include features from different types of authorization environments e.g. JPS OAM etc. and even policies that include features from a combination of multiple different types of authorization environments. In an embodiment access entitlement server also can interface with ID store in order to obtain identity information which can be useful in making determinations as to whether a user having a specified identity ought to be granted access to a specified resource.

Framework also can include JPS application clients . JPS application clients can be implemented using the JAVA programming language for example. JPS application clients can use JPS as an authorization environment. This can be different from the kind of authorization environment that is used by FGA PEPs and XACML PEPs . Thus the authorization environments used within framework can be heterogeneous in nature. JPS application clients can interface with an extended version of JAVA Authentication and Authorization Service JAAS shown in framework as JAAS extended module . JAAS extended module can include an FGA provider and a decision engine . Like decision engine decision engine is an example of the unified policy decision engine discussed above. Indeed in an embodiment decision engine and decision engine can be separate instances of the same decision engine i.e. having the same code base . FGA provider can interface with access entitlement server in a manner similar to that with which FGA PEPs interface with access entitlement server . In an embodiment JAAS extended module also can interface with ID store .

According to an embodiment JAAS extended module can define a base permission class for full fine grained decisions with optional input subject resource action and environment attributes and an output result that includes an access decision e.g. permit deny indeterminate not applicable status information and optional named obligations. JAAS extended can be an extended version of standard JAAS which provides login support for user authentication methods and extends the JAVA permission mechanism to include authorization by authenticated user identities.

Framework also can include an enterprise role manager . In an embodiment enterprise role manager includes a user interface through which an enterprise administrator can create and manage roles for use within the enterprise system. Such roles can be stored within role store which can act as a repository for all roles defined within the enterprise system. Significantly in an embodiment the roles defined using enterprise role manager can be referenced within policies that are used by any of the components discussed above regardless of the specific kind of authorization environment those components are designed to operate with.

Framework also can include a policy store . Policy store is an example of the unified policy store that is discussed above. Policy store can be accessed via policy API so that administrators can create and manage policies using administration tools and . Policy store also can be accessed by decision engines and so that decision engines and can determine whether the policies stored therein are satisfied by access requests coming through FGA PEPs XACML PEPs and JPS application clients . Notably the policies stored within policy store can be stored in a canonical format that complies with a unified policy schema. This unified policy schema can be designed to accommodate policy features handled by a variety of different authorization environments and their underlying access control models. For example in an embodiment policy store can store policies that have features found in both the MAC model and the DAC model. Also for example in an embodiment policy store can store policies that have features found in both the ABAC model and the RBAC model. Inasmuch as the policies stored within policy store can specify features used in diverse kinds of authorization environments certain embodiments of the invention can allow PEPs and applications designed for use within diverse authorization environments all to make use of the same framework .

Furthermore inasmuch as the policies stored within policy store can specify features found in various different kinds of access control models policies stored within policy store can be hybrid in nature such that a single policy can specify features found in multiple different access control models. For example a single policy conforming to the canonical policy format can specify features found in each of the MAC DAC ABAC and RBAC models. A single policy can include both role based features and also delegation capable features. A single policy can include features that are found in the JPS authorization environment but not necessarily in the OAM authorization environment as well as features that are found in the OAM authorization environment but not necessarily in the JPS authorization environment .

In an embodiment this ability to use the same policy store and ID store can arise at least in part due to each component s implementation of in common APIs that can be used to interface with stores and . More specifically each component can implement a policy API to enable that component to interface with policy store and each component can implement a user role API to enable that component to interface with ID store . As shown in JPS application administration interfaces can include policy API FGA administration interfaces can include policy API XACML import export module can include policy API JPS application runtime can include an instance of decision engine which can include policy API and FGA runtime can include an instance of decision engine which can include policy API . Each of policy APIs and can be a separate implementation of the same policy interface having the same method signatures formal parameters and return types. Furthermore as shown in JPS application administration interfaces can include user role API FGA administration interfaces can include user role API XACML import export module can include user role API JPS application runtime can include an instance of decision engine which can include user role API and FGA runtime can include an instance of decision engine which can include user role API . Each of user role APIs and can be a separate implementation of the same user role interface having the same method signatures formal parameters and return types.

Decision engines and each can include a context manager context managers and . Decision engines and each can include a decision kernel that interfaces with that decision engine s context manager decision kernels and . Decision engines and each can include a cache manager that interfaces with that decision engine s decision kernel cache managers and . Decision engines and each can include a policy API that interfaces with that decision engine s cache manager policy APIs and . Policy APIs and can be functionally equivalent to policy API of . Policy APIs and each can interface with policy store .

XACML PEPs can interface with XACML listener . FGA PEPs can interface with JAAS extended RMI listener . JPS application clients can interface with JAAS extended module . JPS application clients can interface with JAAS extended module . Thus even though components and can conform to different authorization environments having features of different access control models each of components and can perform authorization functions based on canonically formatted policies stored in policy store . Decision engines and can be separate instances of a same unified policy decision engine that is capable of evaluating such canonically formatted policies.

In block the unified policy decision engine returns to the requesting subject an indication that permission to access the particular resource is granted. Alternatively in block the unified policy engine returns to the requesting subject an indication that permission to access the particular resource is denied.

According to an embodiment of the invention the unified policy store contains information entities that canonically represent features of multiple different access control models. For example the canonical format can contain fields for rules policies and policy sets that are features of the XACML model. The canonical format additionally can contain fields for attribute constraints that are features of the ABAC model and XACMLS. The canonical format additionally can contain fields for roles and role hierarchies that are features of the RBAC model. The canonical format additionally can contain fields for permissions that are features of the JAVA 2 model. The canonical format can include declarative policy and collective attribute constructs for inheritance along hierarchically organized resource name spaces.

In an embodiment of the invention the canonical format is designed to be extensible in order to accommodate evolving standards and proprietary extensions. For example in an embodiment the canonical format is extensible to permit policies to specify resource types and role categories. In such an embodiment the unified policy decision engine can make a determination as to whether access to a particular resource is granted or denied based at least in part on a type of the particular resource e.g. file directory memory segment port application program etc. . In such an embodiment the unified policy decision engine can make a determination as to whether access to a particular resource is granted or denied based at least in part on a role category to which a specified role e.g. of the requesting subject belongs roles can be grouped together into various different role categories and even into hierarchies of role categories in which one role category can be a parent or child of another role category within a hierarchy.

As is discussed above in an embodiment policies stored in the unified policy store are formatted in a canonical format that conforms to a unified policy schema. In an embodiment under this unified schema each policy can take the form of a list of grants. Each such grant can specify both a grantee and a list of permissions. A grantee can include a list of principals a code source and signers. Each principal can be specified as a class and a name. Each code source can be specified as a uniform resource locator URL . Each permission in the list of permissions can specify a permission class a target name permission actions and signers.

In an embodiment a principal can be a user a group an application role a code source or a dynamic query. In an embodiment a resource can have a resource type and a locality. In an embodiment a policy can specify an effect e.g. allow or deny a principal a resource an action an environment an application role and a list of permissions.

In an embodiment of the invention a policy administration and delegation model can be followed within the framework discussed above. According to this model a separate application domain can be established for each separate application within the enterprise system. Each such application domain can be established by a designated application domain administrator for a particular application at the time that the particular application is deployed into the enterprise system. Each application domain can have associated application specific policies as well as metadata pertaining to those policies. In an embodiment all policies for all application domains and all metadata for those policies are stored within a single unified policy store for the entire enterprise system. Although each application domain can have a separate application domain administrator in an embodiment multiple application domain administrators can be designated for a particular application domain. In an embodiment an application domain administrator can create new policies for his application domain and can modify policies for his application domain. Potentially the policies created by two separate application domain administrators for two separate application domains can be stored within the same unified policy store and can be queried retrieved and evaluated by the same unified policy decision engine. In an embodiment an application domain administrator can associate access permissions within his application domain to roles that exist within the enterprise system. In one embodiment the application domain administrator cannot create new enterprise wide roles but can assign permissions to existing enterprise wide roles for the application to which his application domain pertains. In one embodiment an application domain administrator can delegate to other users who are associated with his application domain a subset of creation or modification or delegation permissions that the application domain administrator himself possesses. In one embodiment a single application domain can pertain to a group of multiple applications rather than a single application. An application domain can pertain to resources other than applications such as files directories ports memory segments etc.

In an embodiment of the invention an extension can be introduced into the framework described above. This extension can be used to provide new and interesting features to an enterprise s access control system. In one embodiment of the invention the framework described above can use the JAVA security model. In the JAVA security model in order to make a request an application can pass to the provider of a specified resource data called a permission. The permission can indicate operations that an access control system has determined that the application is allowed to perform. The request including the permission can ask the resource provider to determine whether the application is authorized to perform a specified operation e.g. read write modify delete create etc. relative to the specified resource. In response to the request the resource provider can process the passed permission as a part of determining whether the application is authorized to perform the specified operation. Having made this determination the resource provider can indicate to the application either that the application is permitted to perform the specified operation relative to the specified resource or that the application is not permitted to perform the specified operation relative to the specified resource. The application s receipt of a denial indication can cause the application to throw an exception.

A multitude of existing applications already use the JAVA security model to perform access control functions. These applications often use permissions discussed above as a conduit to ask the question of whether those applications are permitted to perform operations relative to resources. Because so many existing applications already use the JAVA security model it can be beneficial for an enhanced access control system to continue using the JAVA security model if possible so that the existing applications do not need to be modified to a great extent if at all in order to gain the benefit of the enhancement. Such an enhancement can involve the use of additional information from and concerning the enterprise environment in which the application executes in making the determination of whether an application is authorized to perform a specified operation relative to a specified resource in that environment. For example such additional information from and concerning the environment can include the current time recognized throughout the environment not necessarily specific or unique to any single application executing within that environment . Such additional information can include information that an authorization system can make available to the resource provider at the time that the resource provider determines whether a requesting application is or is not permitted to perform a specified operation relative to a specified resource.

In an embodiment of the invention techniques disclosed herein can be used to gather such additional information. Additionally or alternatively in an embodiment of the invention such additional information can be supplied with the application s request. Such additional information can be passed in to the resource provider. In one embodiment of the invention when the resource provider returns a reply to the application s request the resource provider can supply within or along with the reply additional information about the request. Such additional information that the resource provider can return in the response to the application s request can be in the form of an obligation. As is discussed above when an authorization request is made the reply to that request can indicate a positive or negative result specifying whether access to the specified resource is allowed. In addition to that result the reply can indicate that the requesting application needs to fulfill some specified set of requirements or perform some specified set of actions. An obligation is such a set of requirements that the requesting application needs to fulfill or such as set of actions that the requesting application needs to perform. For example a user might supply log in information such as a username and password to a bank s web site. As part of the authentication process the bank s web site might send back to the user s mobile device a Short Messaging Service SMS text message that asks the user to supply some additional item of information. Under such circumstances the obligation can be the requirement that the bank s web site obtain such an additional item of information from the user. The bank s web site fulfills the obligation by sending the SMS text message and validating the reply to that SMS text message. The obligation can be used to enhance security by making the resource requestor satisfy a heightened challenge by responding to the SMS text message. Although the satisfaction of an obligation can involve user interaction in an embodiment not all obligations necessarily involve user interaction to be satisfied. For example an obligation might require a requesting application to log in a computer readable storage memory the fact that a particular transaction occurred.

As a result of enabling additional information to be passed to the resource provider in the application s request and as a result of enabling additional information to be returned to the application in the resource provider s response a better authorization experience may be obtained for users of the enterprise authorization system. In an embodiment of the invention the JAVA security model can be enhanced to enable such additional information to be communicated between applications and resource providers so that those components can continue to use the same security model that they had been using prior to the enhancement.

In an embodiment the permission discussed above can be passed from the application to the resource provider within a payload section of a request formatted according to the JAVA security model. A mechanism to pass additional information to the resource provider in addition to the information already contained within the permission is discussed herein. A mechanism to return additional information i.e. obligations to the requesting application is also discussed herein. In an embodiment an enterprise authorization engine can return obligations and or other information while concurrently implementing a delegated administration model. Such a delegated administration model can for example permit a user who has been assigned certain administrative privileges e.g. relative to specified resources to delegate a subset of those administrative privileges to other users in the same enterprise system.

According to an embodiment of the invention the JAVA security model s permissions are extended with constructs such as obligations. An additional payload containing obligations can be transmitted back and forth between requesting applications and resource providers. In one embodiment these constructs can be used to perform decisions regarding whether requesting applications are permitted to perform specified operations relative to specified resources. In one embodiment these constructs can be used by applications to perform certain actions. The extensibility of the JAVA security model can be used to implement certain features.

In an embodiment the payload that a resource provider returns to a requesting application can be controlled by policies that are managed outside of the permission aspect of the JAVA security model. The obligation payload that the resource provider returns to the requesting application can contain information that is based on the policy that the resource provider potentially in conjunction with a unified policy decision engine evaluated. For example a policy may state that whenever a user accesses a particular resource through a requesting application an obligation is to be returned to the requesting application requiring that application to report the particular resource s access to that user s supervisor. Enhancements discussed herein can go beyond merely adding static information to requests and returning added static information in responses because the kind of information that is added e.g. as an obligation to those responses can be policy driven. In the above example of a bank web site sending an SMS text message to a user s mobile device as an obligation as part of a log in process the decision to send the SMS text message can be policy driven. In the foregoing scenario the decision to send the SMS text message can be dynamic and performed as a result of an evaluation of an applicable policy in the context of existing environmental conditions rather than static or always occurring.

In an embodiment of the invention a system that implements a user interface e.g. the bank web site s user interface in the example above can be extended to send an obligation. For example the bank s web site can send an SMS text message to a user s mobile device and then wait until the user provides a response to the SMS challenge through the user interface of the bank s web site. However the logic executing on the bank s web site can also allow some older legacy applications to ignore an obligation if those applications are not configured to recognize such obligations. Under such circumstances the legacy application can still gain access to the protected resource through the more standard use of permissions which the legacy application can recognize even if the legacy application is not configured to recognize obligations. In both the case of an application that can recognize obligations and the case of a legacy application that cannot recognize obligations the structure of the permission used to perform the authorization process can remain constant. A policy can specify that depending on whether an application recognizes obligations or not an obligation either will or will not be sent to that application in response to that application s request to access a resource. Non legacy applications that are capable of recognizing obligations can be required to fulfill obligations as specified within policies.

In an embodiment the permission that a requesting application sends to a resource provider as part of a request to access a resource further indicates to the policy decision engine whether the requesting application is capable of understanding obligations. As is discussed above in an embodiment the format and structure of the permission remains constant regardless of whether the requesting application actually is capable of understanding obligations.

An obligation to perform some specified action can be placed upon the requesting application even if the requesting application has already gained access to the protected resource as a consequence of the application s permission indicating that the requesting application should be given such access. Thus the application s satisfaction of the obligation at least in one embodiment is not strictly a pre condition to granting the requesting application access to the protected resource though the application may nevertheless be expected to satisfy the obligation if the application is capable of doing so even after access to the protected resource has been granted. In an embodiment an obligation describes a requirement that an application needs to fulfill or an action that the application needs to perform in conjunction with and additional to that application either receiving or being denied access to a protected resource. An obligation can indicate what the requesting application needs to do in conjunction with that application receiving access to a protected resource or an obligation can indicate what the requesting application needs to do in conjunction with that application being denied access to a protected resource.

The JAVA security model is a legacy security model that has not previously utilized the concept of obligations. Certain embodiments of the invention provide mechanisms through which the JAVA security model can nevertheless utilize obligations. In an embodiment existing JAVA security model structures can be used for passing environmental information and for retrieving obligation information. Such environmental information can include for example an identity of and or type of a device on which the resource requesting application is executing or any other information that a policy could use in determining whether to grant or deny access to a resource. Embodiments of the invention can provide conduits within the legacy JAVA security model whereby information can be passed to and received from the authorization system. Embodiments of the invention can provide such conduits in a JAVA 2 permission based policy model.

As is discussed above an authorization system can involve policies such policies can be stored within a unified policy store in a canonical format. An application that requests access to a protected resource essentially asks the authorization system to determine based at least in part on such policies whether that application ought to be granted access to that protected resource. It is not necessarily relevant to the authorization system what purpose the application has in requesting the access. The authorization system can perform its policy driven operations after an authentication process has been independently completed the authorization system can under at least some circumstances rely upon the already authenticated identity of the resource requestor in evaluating a policy as part of the authorization process. However in an embodiment policies can also be applied to the authentication process. For example a policy can indicate that whenever an Internet Protocol IP address associated with an authenticating entity differs from an IP address that is normally associated with that authenticating entity then an additional challenge should be presented to the authenticating entity as a part of the authentication process. The requirement that an application present this additional challenge can be structured as an obligation.

According to an embodiment an obligation can be an element of a policy. In creating a new policy the author of that policy can enter one or more obligations that are elements of that policy.

As is discussed above in an embodiment of the invention conduits can be provided whereby information can be passed to and received from an authorization system in a JAVA 2 permission based policy model. In one such embodiment such information can be passed to and received from the authorization system within a payload section of a permission that is already used in the authorization system in the existing legacy JAVA security model. For example in one embodiment an obligation can be included within a payload section of a permission. In an embodiment of the invention a policy decision engine can be specifically adapted in order to handle a permission payload containing such information. Thus the implementation of the authorization system can be adapted to remain compatible with a JAVA 2 permission based policy model and standard but also can be extended to recognize and process additional information such as obligations.

If a permission containing such additional information e.g. an obligation within its payload is received by an implementation of an authorization system that does not recognize such additional information then the fact that permission contains such additional information in its payload will not cause that implementation to malfunction instead such an implementation can respond as usual to the permission with a positive or negative reply indicating that access to a specified resource is granted or denied. However implementations that are capable of recognizing such additional information can provide enhanced functionality e.g. by specifying requirements that the requesting application needs to perform in the form of obligations . Beneficially by adapting an existing authorization implementation the permission aspect of such an implementation does not necessarily need to be re implemented such an aspect can be re used in the enhanced implementation.

In one embodiment of the invention the permission discussed above can be implemented in an object oriented system as a Permission class. The Permission class can expose a method to supply additional information from the application to the authorization system. This Permission class can expose methods such as getName and getActions that can be invoked by applications. The Permission class also can include a constructor method that is invoked whenever a new instance of the Permission class is instantiated by an application. A file permission such as java.io.FilePermission is an example of one kind of permission that might exist in an authorization system. The file permission can pertain to a specified resource e.g. a file within an enterprise.

A particular application within the enterprise might attempt to perform a read operation relative to that specified resource for example. In the existing legacy JAVA security model a standard API having a method called AccessController.checkPermission exists. The particular application might ask the authorization system through this API whether the particular application has permission to perform the read operation relative to the specified resource. If the application does not have permission to perform the operation then the authorization system can throw an exception. Alternatively if the application does have permission to perform the operation then the authorization system can permit the application to open the file.

Applications can specify their own custom permissions within their executable code. Such a custom permission can indicate for example whether an application is permitted to proceed further if a link within a web page is clicked upon. The authorization system can receive such a permission and perform a permission check. The authorization system can delegate to the resource provider itself the question of whether the application is permitted to perform the specified operation relative to the resource that the resource provider provides. Under such circumstances the resource provider itself can answer the question.

In an embodiment of the invention a new kind of permission called a holder permission can be defined. Such holder permissions can be implemented as a set of classes that each extend an existing permission class. There can be many different kinds of holder permissions but all of them can be based in certain concepts. Holder permissions can be used to enhance an authorization system to perform more sophisticated kinds of access control. For example using a holder permission an authorization system can prevent a particular resource e.g. a file from being accessed during a specified time interval e.g. any weekend .

The AccessController.checkPermission method discussed above may only accept an instance of the permission class as input. Because a holder permission class of which there can be many different kinds can derive from and extend e.g. via inheritance the more basic permission class this standard API can also accept instances of a holder permission class. In the payload of a holder permission object an instance of some holder permission class additional information can be passed to the authorization system. For example a current enterprise wide time can be passed within the payload of a holder permission so that a determination can be made as to whether an application is attempting to access the resource during a specified time interval e.g. on a weekend . As a part of passing the holder permission object to the authorization system the AccessController.checkPermission method of the standard API of the authorization system can be invoked. In an embodiment the resource provider can recognize that the holder permission object is a holder permission rather than a basic permission and can further recognize capabilities of that holder permission. The resource provider can use the additional information that is specified within the holder permission object s payload in order to perform enhanced access control functionality. The object that the authorization system returns to the requesting application can expose a getObligations method that the requesting application can invoke in order to discover any obligations that the object specifies.

An enhanced application can continue to use the existing standard underlying permission based resource authorization model throughout this process but the enhanced application can add information e.g. current time or accessing resource via Intranet or Extranet to the holder permission that the enhanced application sends to the authorization system as part of an access request and the enhanced application can gather obligations from the object returned by the authorization system. Other applications that are not designed to recognize the user permission class can continue to use the permission based authorization system without changing anything internally. Thus legacy applications can continue to interface with the authorization system through the same standard APIs.

As is discussed above an authorization system can delegate to the resource provider for a resource an application s request to access that resource. The resource provider can receive the permission passed in the request and locate in a policy store policies that pertain to the resource that the permission specifies. The resource provider can use a policy decision engine to determine whether those policies are satisfied. In an embodiment the resource provider can be enhanced in order to recognize and handle holder permissions in addition to basic permissions. In an embodiment in response to the resource provider receiving a holder permission rather than a basic permission the resource provider can locate in the policy store policies that pertain to the additional information e.g. current time that is contained within the payload of the holder permission. The resource provider can similarly use the policy decision engine to determine whether those policies e.g. policies that indicate times at which the resource can be accessed are satisfied. In an embodiment a policy can specify that an obligation is to be returned to the requesting application. Authorization policy decisions are merely one kind of policy decision that can be made using techniques discussed herein other policy decisions such as those pertaining to authentication also can be made using the techniques discussed herein.

In one embodiment logging also can be performed as a part of the authorization process discussed above. All of the information that is being generated by the resource provider during the authorization process can be stored within a holder permission object. The returned object can then specify to the requesting application all of the activities that the resource provider performed during the authorization process.

As is discussed above there can be many different kinds of holder permissions. Each such kind of holder permission can extend a different kind of basic permission. For example one kind of holder permission class can extend a basic permission class X while another kind of holder permission class can extend a basic permission class Y. Multiple instances of each kind of holder permission class can be instantiated as separate objects. In an embodiment each kind of holder permission class can be implemented differently and yet all kinds of holder permission classes can expose the same specified interface.

Using the techniques discussed above applications can pass virtually any kind of additional information to an authorization system in a resource access request. In order to evaluate requests containing such additional information policies that specify rules whose outcome depends on such additional information can be specified and placed within the policy store that the authorization system uses. The policy engine that the authorization system uses can evaluate such policies using the additional information to determine whether those policies are satisfied. Authors of policies can specify in those policies specific obligations that are to be returned to applications under circumstances in which those policies are satisfied. In an embodiment such obligations can be passed within a payload of an object that is an instance of some holder permission class that extends a basic permission class. In response to gathering such an obligation from an object that the application receives back from the authorization system the application can proceed to fulfill the obligation s specified requirements.

Client computing devices may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although exemplary system environment is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

System environment may include a network . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

System environment also includes one or more server computers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

System environment may also include one or more databases . Databases may reside in a variety of locations. By way of example one or more of databases may reside on a non transitory storage medium local to and or resident in server . Alternatively databases may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

Computer system may additionally include a computer readable storage media reader a communications subsystem e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. Communications system may permit data to be exchanged with network and or any other computer described above with respect to system environment .

Computer system may also comprise software elements shown as being currently located within working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . In an exemplary embodiment working memory may include executable code and associated data structures used for authorization processing as described above. It should be appreciated that alternative embodiments of computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile non transitory removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by a computer.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. Embodiments of the present invention are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present invention have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.

Further while embodiments of the present invention have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. Embodiments of the present invention may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope.

