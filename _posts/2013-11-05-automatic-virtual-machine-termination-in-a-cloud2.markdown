---

title: Automatic virtual machine termination in a cloud
abstract: Managing a cloud computing environment including a plurality of resources adapted to host at least one virtual machine includes, in a virtual machine, determining a period of inactivity of the operating system for a user of the virtual machine and comparing, using a processor, the period with a defined threshold. From the virtual machine, a virtual machine termination request is sent to the cloud computing environment responsive to the period exceeding the defined threshold.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558022&OS=09558022&RS=09558022
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09558022
owner_city: Armonk
owner_country: US
publication_date: 20131105
---
This application claims the benefit of Great Britain Application Number 1220205.7 filed on Nov. 9 2012 which is fully incorporated herein by reference.

Cloud based computing is rapidly gaining considerable interest in both consumer and business markets as it provides remote computer resources on demand such that the user no longer has to rely on investing in hardware to host the services e.g. applications required by the user. Such services can range from computer programs such as e mail clients word processors and the like to commercial services such as information retrieval services web based trading services e.g. e shops and the like.

A typical cloud based computing architecture includes a cloud management server that manages access to the resources that form part of the cloud. A user typically contacts the cloud management server when requesting a particular service which triggers the cloud management to locate a resource in the cloud that can host the requested service e.g. by broadcasting a service request to all cloud servers. Upon locating a cloud server available to host the required service the available cloud server will be assigned the task of hosting the requested service for the user upon which the cloud server typically will launch an instance e.g. a virtual machine VM for running the requested service. The cloud instances are usually managed in such a way that it allows users to create update and delete the instance either manually or by automatically by an application programming interface API such as Representational State Transfer REST or a language specific API.

In such a cloud based computing architecture many VMs may be launched over a period of time. This can cause problems if the VMs are not terminated upon completion of the service as this prevents computer resources being freed up thus unnecessarily reducing the available capacity of the cloud. This problem is particularly prevalent in architectures in which the user is expected to terminate the VM upon delivery of the requested service as many users tend to forget that they are responsible for such terminations which can lead to many idle VMs being present in the architecture.

In some cases the problem is addressed by the cloud management system inserting a self management module into the VM which can terminate the VM if a predefined condition is met such as the occurrence of an error in the VM the end of a predefined lifespan or completion of a specified duration of the VM upon reaching a user credit limit for the use of the VM or upon an inactivity in the resources consumed or utilized by the VM. However measuring inactivity by resource consumption is not a particularly accurate metric for determining VM inactivity such that a risk exists that a VM may be erroneously terminated. This is of course highly unwanted as it severely reduces the confidence the user has in the cloud computing architecture.

A method of managing a cloud computing environment including a plurality of resources adapted to host at least one virtual machine. The method includes in a virtual machine determining a period of inactivity of the operating system for a user of the virtual machine and comparing using a processor the period with a defined threshold. The method further includes from the virtual machine sending a virtual machine termination request to the cloud computing environment responsive to the period exceeding the defined threshold.

A system for managing a cloud computing environment including a plurality of resources adapted to host at least one virtual machine. The system includes a processor programmed to initiate executable operations. The executable operations include in a virtual machine determining a period of inactivity of the operating system for a user of the virtual machine and comparing the period with a defined threshold. The executable operations further include from the virtual machine sending a virtual machine termination request to the cloud computing environment responsive to the period exceeding the defined threshold.

A computer program product for managing a cloud computing environment including a plurality of resources adapted to host at least one virtual machine. The computer program product includes a computer readable storage medium having program code stored thereon. The program code is executable by a processor to perform a method. The method includes in a virtual machine determining a period of inactivity of the operating system for a user of the virtual machine using the processor and comparing using the processor the period with a defined threshold. The method further includes from the virtual machine sending a virtual machine termination request to the cloud computing environment responsive to the period exceeding the defined threshold using the processor.

One or more embodiments of the present invention relate to a method of managing a cloud computing environment including a plurality of servers adapted to host at least one virtual machine.

One or more embodiments of the present invention further relate to a computer program product including a computer readable storage medium having computer readable program code when executed on a computer including at least one processor causing the at least one processor to implement the method.

One or more embodiments of the present invention yet further relate to a computer system including at least one processor adapted to execute the computer readable program code of such a computer program product.

One or more embodiments of the present invention still yet further relate to a cloud computing environment including such a computer system.

One or more embodiments of the present invention seek to provide an improved method of virtual machine VM management in a cloud computing architecture.

One or more embodiments of the present invention further seek to provide a computer program product including computer program code defining such an improved VM.

One or more embodiments of the present invention yet further seek to provide a computer system adapted to execute the computer program product.

One or more embodiments of the present invention yet further seek to provide a cloud computing environment including such a computer system.

According to an aspect of the present invention there is provided a method of managing a cloud computing environment including a plurality of resources adapted to host at least one virtual machine the method including in a VM determining the period of inactivity of the operating system for a user of the virtual machine comparing the period with a defined threshold and from the VM sending a VM termination request to the cloud computing environment responsive to the period exceeding the defined threshold.

One or more embodiments of the present invention are based on the insight that rather than evaluation of resource use as is known in the art a more accurate assessment of whether a VM may be terminated is obtained by evaluating the activity of the VM at the operating system level. An idle operating system is a clear indication of the user of the VM having finished using the VM especially if the VM has not been used for at least a defined period of time.

In an embodiment the defined threshold may be a user defined threshold. This has the further advantage that the user can indicate after what period of non use of the VM the VM may be terminated thus further reducing the risk of inappropriate termination of the VM. Alternatively the threshold may be defined by a system operator such that the user does not have to specify this threshold.

In an embodiment the method further includes following the comparison requesting a list of active processes of the user from the cloud computing environment identifying the network address assigned to the VM and identifying the active process corresponding to the VM in the list using the identified network address and wherein sending the request includes requesting the termination of the identified active process. This is an efficient manner for terminating the VM which ensures that the termination of the VM is recognized at the management level of the cloud computing environment. The requesting may advantageously be performed through an API of the cloud computing environment.

The requesting a list of active processes of the user may further include embedding user credentials in the request. This is for instance necessary when the cloud computing environment can only release the list of active processes of the user upon receiving the correct authentication details for a user e.g. user name and password.

In an embodiment the cloud computing environment includes a management server for managing the cloud computing environment and wherein the requesting a list of active processes of the user includes requesting the list from the management server.

In a further advantageous embodiment the determining the period of inactivity of the operating system for a user of the virtual machine includes determining the period of inactivity of the operating system for each user of the virtual machine and the sending a virtual machine termination request to the cloud computing environment responsive to the period of inactivity exceeding a defined threshold includes sending the request if the period of inactivity exceeds the defined threshold for each user. This ensures that a VM is only terminated if it can be guaranteed that all its users have not used the VM for the defined amount of time.

In case each user of the virtual machine has defined an individual threshold the comparing the period of inactivity with a defined threshold may include for each user comparing the period of inactivity with the individual threshold of the user. This further improves the flexibility of the cloud computing environment as single users can set their own preferences of use for a VM.

In response to the termination request the method advantageously further includes terminating the virtual machine.

In an embodiment the termination may be preceded by taking a snapshot of the virtual machine and storing the snapshot on the cloud computing environment. This provides useful diagnostic data that allows the evaluation of the conditions under which the VM was terminated and allows the restoration of the VM to its state prior to termination if so required.

In accordance with another aspect of the present invention there is provided a computer program product including a computer readable storage medium having computer readable program code when executed on a computer including at least one processor causing the at least one processor to implement the method according to one or more embodiments of the present invention.

In accordance with yet another aspect of the present invention there is provided a computer system including at least one processor and the computer program product according to one or more embodiments of the present invention wherein the at least one processor is adapted to execute the computer readable program code. Such a computer system is capable of self termination of VMs hosted thereon which thus improves the efficiency of the computer system.

In accordance with yet another aspect of the present invention there is provided a cloud computing environment including at least one computer system according to one or more embodiments of the present invention. Such a cloud computing environment benefits from the self terminating functionality of the one or more VMs hosted by the one or more computer systems such that a more resource efficient cloud computing environment is provided.

It should be understood that the Figures are merely schematic and are not drawn to scale. It should also be understood that the same reference numerals are used throughout the Figures to indicate the same or similar parts.

In the context of the present application where embodiments of the present invention constitute a method it should be understood that such a method is a process for execution by a computer i.e. is a computer implementable method. The various steps of the method therefore reflect various parts of a computer program e.g. various parts of one or more algorithms.

The various embodiments of the method of the present invention may be stored on a computer program product including a computer readable storage medium. The computer readable storage medium may be any medium that can be accessed by a computer for the retrieval of digital data from the medium. Non limiting examples of a computer readable storage medium include a CD DVD flash memory card a USB memory stick a random access memory RAM a read only memory ROM a computer hard disk a storage area network a network server an Internet server and so on.

The cloud architecture typically includes a cloud management server and a number of resources e.g. servers which are connected to the management server via one or more networks e.g. the Internet a wired or wireless LAN or WAN a mobile communications network such as a 2G 3G or 4G network and combinations thereof. The cloud management server is responsible for handling service requests from the one or more users and for assigning the request to a resource in the cloud architecture . Upon such a service request the management server will allocate the service request to one of the resources for instance by broadcasting an availability request to the resources and assigning the service request to a resource signaling such availability. As such request handling is well known per se it will not be discussed in further detail for the sake of brevity. It is noted for the avoidance of doubt that any suitable service request handling protocol may be used in the cloud computing environment .

Upon the assignment of a request for providing a service requested by a user a resource may launch a new instance of the requested service or share a previously launched instance between multiple users. In the context of the present invention an instance of such a service will be referred to as a virtual machine VM as the user will have no awareness of the underlying resource but will only interact with the instance of the service that is hosted by the resource . As will be well known to the skilled person each resource in the cloud computing environment may be able to host different virtual machines at the same time which may offer different applications or services to one or more users of the cloud computing environment .

As previously explained upon completion of the requested service the user may terminate a VM e.g. manually or through an API. However in practice many users forget to terminate the VM . This can cause capacity problems for the cloud computing environment because it includes finite resources such that idle VMs reduce the availability of resources to new users .

In accordance with several embodiments of the present invention this problem is addressed by including monitoring functionality in a VM that can request the termination of the VM from the cloud computing environment without requiring any additional technology to existing cloud computing environments . Such monitoring functionality may be provided as an automatic task scheduler that periodically checks the idle state of the operating system of the VM or as a permanently running task that regularly invokes such a check.

An embodiment of such a VM termination method is shown in the flowchart of FIG. . In a first step the cloud computing environment receives a user request for the use of a specified resource e.g. a service as previously explained. The user request may optionally include a user defined parameter that indicates when the resource may be terminated. More specifically the parameter may define a minimum idle time period of the operating system of the VM providing the service which minimum idle time period is considered a reliable indication by the user that the user is no longer using the service. Alternatively such a parameter may be omitted in which case a system defined parameter may be used instead as will be explained in more detail later.

Next the cloud computing environment e.g. the cloud management server will allocate the user request to an available resource in step . This may be done in any suitable manner for instance the cloud management server may request availability of the service from the resources with one or more resources responding to the request by acknowledging such availability. The cloud management server may select one of the resources to host the requested service and notify the selected resource accordingly. In an embodiment the thus notified resource will launch a VM to provide the requested service in step . Alternatively the notified resource already has a VM running that has spare capacity for handling the requested service in which case step may be omitted.

Upon identifying the resource hosting the requested service the cloud management server may assign a network address e.g. an IP address to the VM hosting service and communicate the network address to the user and the resource hosting the VM such that the user can directly access the requested service. At the same time the cloud management server may add the service requested by the user to the list of active processes of the user in the cloud computing environment .

According to an embodiment of the present invention the operating system of the thus selected VM includes an algorithm for monitoring the active use of the VM by the user . The algorithm may form part of an automatic task scheduler or a permanently running task for monitoring the idle time of the operating system. For example the algorithm may form part of a screen saver application or any other application that is activated after a period of idle time of the operating system.

In operation the algorithm evaluates the idle time of the operating system of the VM in step and checks in step if the idle time exceeds a defined threshold. This threshold may be defined by the user in the form of an operating system time out parameter as previously explained as by a system operator based on his or her knowledge of the typical user behavior when using the cloud computing environment or the service provided by the VM . In an embodiment the cloud computing environment may monitor such typical user behavior for individual users and define a user specific operating system time out threshold to be used in comparison step .

In an embodiment the algorithm will periodically monitor user activity in step and as long as some activity is detected the algorithm will terminate until the next scheduled period. If no activity is detected the algorithm will determine the duration of the inactivity of the operation system in step . If the period of inactivity does not exceed the defined threshold the algorithm will again terminate and revert back to step for execution during the next scheduled monitoring period.

However if it is determined in step that the operating system has been idle for a period exceeding the idle time threshold the method will proceed to step in which the cloud computing environment e.g. the cloud management server is requested to terminate the VM after which the cloud computing environment e.g. the cloud management server terminates the VM in step e.g. by informing the resource that the VM is no longer required such that the resource can delete the VM from its resources. At the same time the cloud management server may remove the active process associated with the VM from the list of active processes associated with the user .

In an embodiment the cloud computing environment e.g. the cloud management server or the resource hosting the VM may take a snapshot of the VM prior to its termination. Such a snapshot typically provides an image of the VM which may be stored for later use e.g. to restore the current state of the VM for instance in case a user wants to resume the terminated service.

As many cloud computing environments facilitate the user to manually or automatically terminate such processes as previously explained it is therefore preferable to use the existing functionality of the cloud computing environment e.g. of the cloud management server to terminate a VM in the cloud computing environment . This may for instance be realized as shown in .

After the VM has determined in step that the period of inactivity of its operating system is such that it warrants terminating the VM the VM contacts the cloud computing environment e.g. the cloud management server to request the list of active processes of the user in step . In an embodiment this request includes the user credentials of the user e.g. the user name and password of the user in case the cloud computing environment e.g. the cloud management server is only authorized to release the requested list upon provision of the relevant user credentials. It is noted that such user credentials are typically readily available to the VM as the user credentials may have been provided to the VM to gain access to the requested service e.g. when the VM behaves as an isolated machine that is unaware of it being managed by the cloud management server . At the same time the VM may request the network address assigned to the service provided to the user from its operating system or the resource hosting the VM in step .

Upon receiving the list of active processes from the cloud computing environment e.g. the cloud management server the VM identifies in step the active process associated with the network address retrieved in step . In other words in step the VM recognizes which active process it is hosting based on the match between the network address in the received list and the network address retrieved in step .

Next the VM requests the termination of the identified active process in step as previously explained. It is noted that this request may also include the relevant user credentials of the user in case the cloud computing environment e.g. the cloud management server is only authorized to terminate the active process upon provision of such credentials. The cloud computing environment e.g. the cloud management server subsequently terminates that active process in step and informs the resource hosting the VM that the VM may be terminated.

At this point it is noted that the procedures as disclosed in and and described in detail above may be amended without departing from the teachings of the present invention.

To this end the method as shown in may be extended with an additional checking step in which it is checked if the operating system idle time check in step has been performed for all users. If this is not the case the method reverts back to step to check the operating system idle time for a next user and these steps are repeated until the in activity of all users has been checked in this manner. The method only proceeds to step to request termination of the VM if it has been determined that for all users the idle time of the operating system exceeds the operating system idle time threshold.

In an embodiment the same threshold is applied in step to all users registered to use the VM . This may for instance be a threshold defined by a system operator as previously explained. In an alternative embodiment a user specific threshold is applied to each individual user. For users who have not provided such a threshold the system threshold may be used instead.

The computer system further includes a network interface for communicating with the cloud computing environment and the user e.g. via the one or more networks . It is noted for the avoidance of doubt that the one or more networks do not form part of the computer system . Such a network interface may take any suitable shape e.g. one or more network cards.

The computer system may optionally further include an input device e.g. a keyboard a mouse a trackball a microphone for voice recognition control a scroll wheel a touch screen and so on as well as an output device e.g. a display device loudspeakers and so on.

The computer system may be used in the cloud computing environment of as one of the resources therein.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a RAM a ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a LAN or a WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which includes one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While particular embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art.

