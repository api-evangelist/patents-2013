---

title: Mobile link system, method and apparatus
abstract: A system is provided for communication between a mobile device and an Enterprise Network. A gateway provides an end-to-end connection between the gateway and the mobile device. A controller is adapted to interpret data from a proprietary protocol. The data is communicated between the Enterprise Network and the mobile device via the end-to-end connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930548&OS=08930548&RS=08930548
owner: Mobile Helix, Inc.
number: 08930548
owner_city: New York
owner_country: US
publication_date: 20130305
---
Priority is claimed from US Provisional Patent Application No. 61 607 341 filed on Mar. 6 2012 and US Provisional Patent Application No. 61 641 589 filed May 2 2012 both of which are incorporated herein by reference in their entirety for all purposes.

Enterprise Networks were originally used by businesses as a private computer network to interconnect various company sites such as production sites offices and shops in order to share computer resources. The Enterprise Network is essentially a Virtual Private Network VPN built over a public or a non secure infrastructure using encryption to protect the data traffic from eaves dropping.

A system and method are described for providing communication between a mobile device and an Enterprise Network . A gateway provides an end to end connection between the gateway and the mobile device. A controller is adapted to interpret data from a proprietary protocol. The data is communicated between the Enterprise Network and the mobile device via the end to end connection.

A system method and apparatus are provided to deliver data to and from a private or secure data source for example a web server web service database or other server to a mobile device that is connected to a public or non secure network. Mobile devices may include cell phone and other mobile devices including personal digital assistants smartphones tablet computers etc. A telecommunications network may be considered as a collection of terminals links or nodes which connect to enable telecommunication between users of the terminals. Each terminal in the network may have a unique address so that messages or connections can be routed to the correct recipients. The collection of addresses in the network is called the address space. The links connect the nodes together and are themselves built upon an underlying transmission network which physically pushes the message across the link using circuit switched message switched or packet switched routing. The inventive solutions provide communication to an Enterprise Network which may be considered more broadly as a computer network built by a business to interconnect its various company sites or applications such as production sites offices and shops in order to share computer resources.

In one sense the inventive solution provides a connection and or communication between a mobile device and an Enterprise Network. In general however the solution provided applies to any network. However taking as a context the Enterprise Network the mobile device is in one aspect not connected directly to the Enterprise Network. This may be provided for example by a gateway. This is in contradistinction with existing solutions such as Mobile VPN that requires a direct connection between the device and the Enterprise Network. Although the instant solution is different than VPN it may be considered to provide Virtualization of the device file system to intercept all requests for data objects and to fulfill those requests using cached data whenever possible may be provided. However this is distinct from traditional VPN systems. Thus the solution provides a satisfactory connection to the Enterprise Network. The solution also provides access to any type of network and the solutions provided herein apply equally to those networks.

Now with reference to the system method and apparatus shall be described in the context of a secure connection between a gateway an Enterprise Network and a mobile device which may be accomplished with the use of a controller or link controller . Content servers such as Web Servers Web Services Databases FTP Servers File Servers etc. may be provided within the network or network. The gateway can be deployed on premise that is supported by the Enterprise Network where a direct connection is used or the gateway may be deployed in the Cloud where a VPN or other secure connection may be used to connect the gateway to the Enterprise Network . A viewer may be provided for example as an application on the mobile device . The viewer may be considered similar to a browser that interprets Markup language and displays the language and associated information in the form of a graphical representation. The viewer may be directly provided in order to increase security. That is the viewer may be deployed either via a public app store the Apple App Store or Google Play or via a private enterprise managed or owned app store.

The mobile device is provided with a means to display a visual to the mobile user. A visual display is most often defined by a single HTML page and its referenced style sheets scripts and dependent objects although other formats can be supported. The visual display may be rendered using the available capabilities of the device. In one embodiment the viewer receives data packages from the gateway via HTTPS. When a package is received it is unencrypted and uncompressed. If the package contains multiple objects those objects may be separated in the decompression step. The data within a package is divided into objects data defining the visual layout to be rendered on the device and dependent objects which are objects referenced by and incorporated into the former.

For example HTML pages are rendered using the browser controls available in Apple s iOS Google Android and other operating systems. Existing solutions like Mobile VPN establish a connection that is available to applications running on the device. Visual display of standard HTML data delivered in a non standard package is also contemplated and is possible with this arrangement.

In the alternative or in addition to a viewer may be provided in association with the mobile device. The viewer may be provided by an application. In one aspect only the viewer application is permitted to connect to and receive data from the Enterprise Network . In one embodiment when a user opens the viewer the authentication procedure is implemented. If this procedure is successful the viewer receives an encryption key a secure session ID a gateway URL and a list of authorized applications from the controller.

In one variation a policy may be applied to the viewer. The policy may define device capabilities that should be limited disabled to protect sensitive corporate data e.g. screen capture copyrighted works confidential material age sensitive material etc. .

The application in one aspect optimizes traffic between the Enterprise Network and the mobile device on the fly by inspecting data as it passes through the gateway and using compression and pre fetching to optimize the traffic stream. This could be for example realized through the following procedure.

In this embodiment when traffic arrives at the gateway from the network it is forwarded to the appropriate protocol plugin based on the protocol of the originating request see above . Using the HTTP plugins as a representative example the plugin may be responsible for and may provide HTML pages and CSS pages often refer to other images script files html pages etc. The plugin identifies the dependent resources referenced and fetches them from the network web servers without necessarily communicating to the viewer. This is referred to herein as pre fetching. This technique can be extended to include references programmatically retrieved using Javascript by executing the Javascript code in an html page prior to transmitting that page to the viewer.

Data passing through the gateway may be modified to improve its visual presentation on the device improve compatibility with device side features and capabilities or otherwise to optimize the user experience on the device. An example used in the HTTP plugin is modification of Javascript code to improve compatibility with the browsers on iOS devices. Another example is the injection or modification of style elements either in html or CSS to improve the visual presentation of data on the device. For example the gateway may place a block of Javascript code at the top of each page. That Javascript code may be used to modify the style or look of a page and may even be used to override native Javascript functionality. In the alternative or in addition thereto the gateway intercepts Javascript generated web requests and tracks them. Rendering may otherwise continue the same as would occur in any web browser.

De duplicating is provided to detect when data is already cached by the viewer and sending references to that data rather than transmitting the actual data. In the HTTP plugin de duplication occurs at the object level. For example when a script image html page or other object passes through the plugin it is fingerprinted using MD5 or another similar technique. These fingerprints are stored both by the viewer and the gateway. When the gateway encounters a fingerprint it has already sent to the viewer it sends the fingerprint in lieu of the identified object. Otherwise it sends the object along with its fingerprint so that the viewer can maintain the reference between fingerprint and object. In other protocol handlers data can be duplicated at the level of files binary chunks or using any other technique of dividing the data into uniquely identifiable blocks.

A batching operation retrieves objects through pre fetching and assembles them into a single package prior to compression and transmission to the viewer. The contents of the batched package may then be compressed to a minimal form using a standard compression algorithm such as gzip zip Z lib compression etc. Compressed packages are then sent to the viewer via HTTPS along with HTTP header flags indicating the application from which that data was retrieved. By identifying the origin application the viewer can correspondingly determine the underlying protocol and technique for unpacking and utilizing the transmitted data. The batching of multiple objects into a single or fewer packages prior to compression and transmission to the viewer may minimize roundtrips to from the gateway. Protocol proxying may also be provided to respond to protocol messages on behalf of the viewer whenever possible to avoid unnecessary roundtrips to from the gateway. For example HTTP redirects in the gateway are processed without transmitting the redirects to the viewer.

The application thus delivers applications hosted in the network to the mobile device unaltered. It does not necessarily require new applications to be created or application specific translations to be performed in order to view the application on the mobile device. On the other hand the inventive solutions also provide for modification of the data visualized based on user roles or policies etc. as will be explained.

As a general description of the operation the inventive solution shall now be described in terms of setup and provisioning. As a general matter traffic is sent to the gateway via HTTPs. All traffic may also be compressed for example using standard compression techniques. As will be explained the gateway may be designed using a plugin based architecture such that each supported protocol for communication to from the Enterprise Network is implemented by a single plugin. Examples include plugins for http ftp LDAP and https.

In the other direction the viewer may also originate traffic. For example requests for data from the Enterprise Network may be originated from the viewer by selecting an application to interact with. Each application is identified uniquely for example by an ID number that is shared between the viewer and the gateway.

When traffic arrives at the gateway from the viewer it may be forwarded to the appropriate plugin by reading the application ID and looking up the appropriate protocol for that application. In the case of a single application utilizing multiple protocols either additional headers may be provided in the incoming data to identify the protocol or the contents of the incoming message may be used to infer the protocol. Using the HTTP plugin as a representative example the plugin may be responsible for and may provide 

Traffic is then forwarded to the Enterprise Network according to the appropriate protocol standard. Traffic received in response to this request is processed as outlined below.

With the above it may be considered that a secure connection is established between the gateway and the Enterprise Network . This connection allows the gateway to access content servers Web Servers Web Services Databases FTP Servers File Servers etc. within the network. The gateway can be deployed on premise that is supported by the Enterprise Network where a direct connection is used or the gateway may be deployed in the Cloud where a VPN or other secure connection may be used to connect the gateway to the Enterprise Network . The mechanism for establishing this secure connection is flexible and in one aspect is designed to match existing standards or technologies used within an network. This mechanism may be updated as new technologies are available for establishing such a connection.

Turning now to the secure connection an example implementation of a viewer running on a mobile device establishes an authenticated session using one or more of the following 

One mechanism for provisioning for example is the use of provisioning so that users i.e. individuals within a company who are authorized to use the system are provisioned. Provisioning refers to preparing and equipping a network to allow it to provide new services to its users. For instance the OASIS Provisioning Services Technical Committee PSTC defines an XML based framework for exchanging user resource and service provisioning information e.g. SPML Service Provisioning Markup Language or SAML Security Assertion Markup Language for managing the provisioning and allocation of identity information and system resources within and between organizations . Each user in one aspect is uniquely identified by a username. Each username may have a set of associated secret authentication credentials which are used to validate the identity of an individual accessing the system. Each user may also be associated with personal information for example first name last name and e mail address etc. and or roles which are described below.

The most common form of credentials is a secret password although networks may also use multi factor authentication schemes for example RSA SecureID or other common multi factor authentication schemes . When a user accesses the system he she is authenticated i.e. his her identity is verified by requesting a username and the corresponding authentication credentials then validating the supplied information in for example one of the following ways.

The controller may be managed to provide further secure connectivity. For example users and passwords are stored in the controller database. When a user is authenticated the username and password are checked against the encrypted versions of those credentials stored in the controller database. This is may be a practical manner in which to provision users to the system.

Information validation may also be delegated. For example the controller is connected to a Web Service hosted inside the Enterprise Network but accessible via the public internet. A secure connection to that web service is used to supply the username and authentication credentials to the Web Service for validation. Users may still create in the controller and are associated with personal information and roles that are optionally imported via the same Web Service . However in one aspect authentication credentials are not stored in the system for security purposes.

In an integrated model the gateway uses the secure connection established to communicate directly with the network LDAP Active Directory or other naming directory system. Usernames and authentication credentials sent to the controller may be relayed to the gateway for validation in this manner. Similar to the delegated model authentication credentials are optionally not stored in the controller for security purposes. The secure connection is established without directly connecting the mobile device to the Enterprise Network . This allows for and there is provided substantially instant revocation of access rights and it provides an additional layer of protection against rogue or malicious communication attacks.

The integrated authentication model may also be integrated with single sign on systems based on standards such as SAML or OpenID. In this case authentication credentials are forwarded to the single sign on server in compliance with the single sign on protocol.

It shall be appreciated that a secure connection is established regardless of the underlying protocol used by the application or service hosted in the network. Even when the application service uses an insecure unencrypted protocol the system still provides an end to end secure connection . The system enables the authentication of users and devices accessing the system such that only users and devices explicitly allowed to access the system can establish a secure connection to network applications services.

In one embodiment a secure connection is established between the gateway and the Enterprise Network when the gateway is first launched using VPN or any similar technique for establishing a secure connection between two fixed endpoints. This connection allows the gateway to access content servers Web Servers Web Services Databases FTP Servers File Servers etc. within the network and naming services LDAP Active Directory etc. .

In another embodiment a secure connection is established between the controller and the gateway via https. Communication between the controller and the gateway occurs via web services hosted on the gateway. In this embodiment the controller can only access the Enterprise Network via the exported services available on the gateway and the controller is not connected to the Enterprise Network in any way.

In another embodiment when a user initiates an application access from the viewer the viewer s secure session ID is sent to the gateway for authentication via https. If successful the user may now access the application through the gateway by communicating with the gateway via https. In one example Session IDs are valid until they are either Explicitly revoked from the controller by deleting the provisioned device or deleting the user in the controller. Expired after a configurable period of idle time.

One or more techniques described results in an end to end secure channel being established regardless of the underlying protocol or application technology supported by the network application.

Once Users have been provisioned each User may be assigned one or more Roles that provide an even further secure connection. All security policies may be set on a role by role basis. For that matter roles may be applied to users either one by one or by associating a role with a group of users. Roles may be used with the present solution to control which applications a user is allowed to use and or what web pages actions within the controller a user is allowed to view execute. For example using the principal s role the controller determines a list of authorized applications destination addresses within the Enterprise Network that are transmitted to the device along with meta data about those applications icon name description etc. The system enables authorization of user access rights using a role based scheme that is imposed independently of any such scheme implemented within the Enterprise Network . This enables a more restrictive set of authorization permissions to be implemented for mobile access to applications and services.

Now the provisioning of devices shall be described in more detail with respect to the mobile device . In order for a mobile device to access the system that device is normally provisioned. Devices are provisioned by initially creating for example a record in the controller containing 

When a mobile device accesses the system the device attributes stored in the controller are matched against the attributes supplied by the mobile device attempting to access the system. A device is only deemed to be authorized for example if the attributes of the accessing device match the attributes of a provisioned device. It is possible that more than one provisioned device will have attributes that match the mobile device accessing the controller. For that contingency the following further provisions may be taken.

Once the device is authorized the user of the mobile device may be asked to supply his her username and authentication credentials. If this information is validated the controller then ensures that the supplied username matches the device owner of exactly one of the provisioned devices determined to match the mobile device s attributes. If this unique match is found access to the system is authorized.

A secure container application may be provided or downloaded to the mobile device . The secure container may be considered a native mobile application that runs on each mobile device supported by the application e.g. iPad iPhone Android Blackberry Windows Mobile etc. . The secure container application may be downloaded to the mobile device using the standard mechanism provided by a mobile device platform e.g. the Apple App Store Google Play Blackberry App World or a privately owned and managed App Store etc. .

In one sense the secure container may refer to an application process or component of an application that intercepts requests and responses to or from the operating system made by another application or application component. This may be implemented by inserting a software layer in between the operating system and the application such that the API application programming interface calls executed by the application are interpreted and run by the software rather than run directly by the operating system. In other words and as an additional security feature the data or objects are interpreted at the application level or layer of the mobile device . The secure connection is established at the application level or application layer so that other applications or processes running on the device cannot share or are at least limited from this secure connection .

Further the secure container may modify those requests or the data communicated between an application and the operating system in order to modify the functionality of the combined system. For example the requests may be modified to add encryption decryption and or compression decompression. The purpose of the container is in one sense to separate the protected application from the other applications that access the operating system. Thus on device data processing of traffic delivered to the mobile device may be provided within a secure partitioned container. Creation and maintenance of a secure container on the device for viewing network data and communicating with the gateway is thus provided.

Provisioning of the applications to the gateway shall now be described as follows. Applications are in one aspect destination URLs within the Enterprise Network that mobile users should have access to. These may be URLs describing web based applications hosted within the intranet. They could also be for example services that do not have any visible user interface but are made accessible to other applications running on the mobile device via the system. The system provisions applications by connection to these URLs. In one aspect the system ensures that all accesses initiated from a mobile device to the Enterprise Network are directed to a provisioned application identified as a URL and all of that URL s sub directories . Applications that may be provisioned also referred to here as managed applications may also include existing native applications that have been integrated with the present solution so that application are enabled to run on the mobile device inside the secure container and are manageable by the Controller.

Applications may also have additional attributes such as a user friendly name description icon etc. Applications may also be associated with a list of roles which defines the groups of users who are able to access that application.

As shown in the described steps may be considered as a method incorporating one or more of the following steps. In step 1 of a secure connection is established with a network. The connection may be through the use of a VPN which may be on premise or through another secure connection . In a step 2 the users are provisioned using a managed controller or a delegated external system not shown . In a step 3 device attributes are set and or device owners are specified. In a step 4 a secure container is installed for example by downloading a secure container application to the mobile device . In a step 5 the applications are provisioned to the gateway .

The procedure for initiating a connection to a network hosted application via the system shall now be described with reference to .

When a user launches the viewer on the device the viewer may ensure the identity of the user and determines what applications that user is authorized to access. This authentication and authorization may be performed as follows.

The user s username authentication credentials and the attributes of the device described with reference to may be encrypted and transmitted to the controller . This transmission may be performed via HTTPS as shown by reference numeral in . All communication between the viewer and the gateway may occur via https. When the underlying application supports a different protocol e.g. http the underlying protocol is wrapped in for example an https package before being transmitted to or from the viewer. However encryption may be accomplished using any standard secure protocol.

The controller identifies one or more provisioned devices that match the attributes provided in this first communication. If no provisioned devices match access is denied.

The controller confirms the user is provisioned in the system and validates the user s authentication credentials via the configured mechanism see previous section .

The system checks for a match between device owner for one of the matching provisioned devices and the authenticated username. If a match exists the system may create a unique ID that encapsulates the attributes of the device so that in the future the list of provisioned devices can be selected using this ID. The ID may be stored on the controller .

Once authentication has been completed a secure session ID may be sent to one or both the mobile device and the gateway to create a shared secret to be used to authenticate communications between the mobile device and the gateway .

An encryption key using for example a standard strong encryption algorithm e.g. AES 256 is then generated for the unique provisioned device. That encryption key is sent to the device from the controller to allow the viewer on the device to encrypt and decrypt data that it receives. Subsequent to the first access by a device the stored encryption key may be sent rather than generating a new one each time a user accesses the system from her mobile device . In this manner the gateway does ensure that only users specifically granted permission to an application are allowed to access that application.

Applications may be deployed to the device based on User roles and policies. Using the validated username the list of roles that user belongs to is identified and applications provisioned in the system are selected based on the membership of those applications in the user s roles. The controller may send that list of applications to the viewer . The viewer for example receives a unique ID for each application the application s name and other user presentable attributes description icon etc. and a partial URL that is a relative path from the appropriate server address within the Enterprise Network to the application. To enhance security addresses IP addresses DNS names of servers in the Enterprise Network may be restricted or not sent to the mobile device.

The same set of Apps may be deployed to the gateway. The gateway for example receives unique app IDs server addresses and partial URLs so that the gateway may generate a full unique or partially unique URL identifying a destination address for any access of an network application from the mobile device .

The user Launches Application on a mobile device. The launch data session shall now be described with reference to . To access an application via the system for example by opening the viewer on the mobile device authenticating and then taking action to open one of the applications the user is authorized to access according to the process already explained. This may trigger an HTTPS request from the viewer to the gateway which may include customer headers in accordance with the HTTP standard. These customer headers may transmit the Secure Session ID the App ID and the unique ID of the device.

The Session ID and the Device ID may be used by the gateway to authenticate the origin of the incoming connection. In one alternative there may be provided a timeout watchdog. After a certain period of inactivity Session IDs are automatically invalidated. In addition administrators of the system may delete provisioned devices from the controller user interface which invalidates any Session IDs associated with that app ID.

If the connection is authenticated the App ID is then used by the gateway to authenticate the App request and to generate a full URL.

The gateway may translate the URL supplied by the viewer using the App ID to lookup the server address of the server in the Enterprise Network and then appending the URL path supplied in the request to the gateway . For example if the network is hosting a web application at http server1.companyx.com app1 this application has been provisioned in the system with unique ID 1 and the user attempts to access a page index.html within that application the following steps may be provided 

A request is sent to the gateway with the Session ID Device ID App ID 1 in this case and a URL path that does not include any server address app1 index.html .

The gateway validates the Session ID and Device ID. The gateway then uses the App ID to lookup the server path http server1.companyx.com and generates a full URL to send to the Enterprise Network http server1. companyx.com app1 index.html. In this case by concatenating the server path with the address for the App.

The gateway may also allow the viewer to send a new server address to the gateway . Server addresses may be embedded in the HTML content of a web application so even though these addresses are never transmitted from the controller to the viewer the viewer may attempt to access a link that includes a server address. In this case the gateway ensures that the constructed URL using the server address supplied by the viewer and the URL path supplied by the viewer correspond to an authorized application in the system. If not an error may be returned.

For example if an embedded HTML link in the application with unique ID 1 from the previous example in the system refers to http server2.companyx.com app2 entry.html then when this link is clicked the full path is sent to the gateway . The gateway then ensures that there is an app configured in the system with the server http server2.companyx.com and that access has been authorized to the URL path app2 and all of its sub directory URLs. If these conditions match the full URL is forwarded to the Enterprise Network .

The gateway may send an encrypted and secure request to the enterprise web server . This connection is secured for example by using VPN to securely tunnel into the Enterprise Network and then using HTTP to communicate the request unencrypted within the Enterprise Network . In an alternative an HTTPS request may originate from the gateway to secure the connection between the gateway and the Enterprise web server end to end.

While a web server is used in this case for the purposes of illustration this request can be directed to any server within the Enterprise Network that supports a standardized or proprietary communication protocol for communication over the network. Examples include requests to databases FTP servers web services terminal applications etc.

In response the enterprise web server may return an HTTP code indicating a redirect to another address. In this case the gateway may detect this redirect and re queries the Enterprise Network for the redirected URL so that it can navigate to the correct page. This redirect may be performed without any involvement of the mobile device which avoids the cost of a roundtrip communication from the gateway to the mobile device .

This procedure or routine can occur multiple times in the case that the enterprise web server responds to the request generated with another redirect.

The Enterprise web server may transmit the content identified by the URL back to the gateway . If this content is HTML CSS or another supported format for example then the gateway may parse the content and looks for references to other resources stored on the Enterprise web server . For example an HTML page may reference images stored on the Enterprise web server that must be retrieved in order to properly display the HTML page. Referenced resources are most often images CSS files Javascript files or XML files but they can be any format or type of data.

The gateway may be arranged to retrieve as many identified resources as it can prior to sending any communication back to the mobile device . This ensures a minimal number of roundtrips between the mobile device and the gateway .

In addition if the HTML page includes or references Javascript code that is executed upon loading of the HTML page in a browser the gateway may be configured to execute that Javascript code to determine if it will initiate any resource requests. If so these resource requests may also be pre loaded to avoid unnecessary roundtrips from the mobile device to the gateway .

The gateway may repeat this process of inspection and resource requests until all required resources are retrieved and delivered to the gateway . This process may not be guaranteed to catch 100 of all resource requests and in the event that the viewer identifies additional resources to retrieve the viewer will initiate new requests to the gateway to retrieve those resources.

As HTML javascript CSS and other types of resources pass through the gateway the gateway may modify the content of those resources by editing or adding new content to them. For example the gateway may modify or inject new JAVA Script code to enhance browser compatibility on different mobile devices by providing additional code specific for a particular type of mobile device. The gateway may also modify or add style sheets to improve visual rendering of content on the mobile device . These modifications may be pre stored in the gateway according to the inventive solution.

Once all resources have been retrieved and traffic has been modified the resulting collection of files may be compressed packaged and sent to the mobile device . This package may identify the main page to load e.g. the main HTML page and it may modify all references to resources including in the package generated in this step such that the viewer will retrieve those resources from the supplied package rather than re querying the gateway. The format of the transmitted package is diagrammed in and shall be discussed with reference to that figure.

With respect to a send page to virtual device container will now be described. The gateway sends the package generated to the viewer which is a secure container running on the mobile device as already described. This transmission may be secured via HTTPS although any other encryption technique may be used. All unpacked objects may be encrypted using a strong encryption key provided to the viewer when the authentication procedure completes successfully and are cached on the device in a location that is unique to the application and the authenticated user. An association may be maintained between the finger prints of stored objects and the location of the stored object.

The viewer decrypts the data according to for example the encryption algorithm used for the transmission HTTPS or otherwise . The viewer may then unpack the multiple resource files including in the transmission. This unpack step is executed in accordance with for example the compression algorithm used to generate the package in the previous step. Any standard or proprietary compression decompression algorithm may also be used.

Real time decompression and unbundling of multiple data objects supplied for example in a single encrypted compressed package thus may be provided. There is optionally provided real time data processing of traffic from network applications services and viewers in the gateway to encapsulate traffic inside proprietary protocol for the purposes of security and performance acceleration. As a result there is encapsulation of all traffic into the gateway via https such that communications to from the viewer are secured. This real time processing of http is performed to for example identify and pre fetch dependent resources referenced by an html page CSS page or other object.

The viewer may also include non http APIs for example Javascript based APIs for accessing non http data such as objects retrieved via ftp directory entries retrieved via LDAP records retrieved from a database via ODBC etc. Additional languages and protocols may be supported when needed. The viewer may also include Javascript based APIs for accessing device capabilities such as GPS system gyroscope location etc. Additional languages and device capabilities may be supported when needed.

Once unpacked objects may be stored on the device in a cache that is indexed by App ID and the URL path of the resource. In one example all objects are cached that are not explicitly marked as un cacheable according to the rules defined by the HTTP 1.0 and 1.1 protocols. In other words unless the enterprise server has used the standard protocol headers to mark an object as no cache then the solution in this example proceeds to cache it. The method for marking an object as un cacheable is described in the HTTP 1.0 1.1 standards and the technique of marking shall not be repeated here.

To continue all resources may be stored in encrypted form using the encryption key supplied to the viewer as a result of the authentication procedure. Because all stored data is encrypted and managed by keys held by the viewer referred to above as a secure container on the device the inventive solution provides an even further secure solution.

Cookies required for each App may be stored on the mobile device in encrypted form. These may be used to recall user settings or parameters used in previous applications. They may also be used to store other information about the user. In this embodiment all requests for referenced objects are intercepted and redirected to the encrypted object cache. When a referenced object is in the cache it is unencrypted and returned to the requester. When it is not available a request is sent to the gateway via the procedure to retrieve that object.

All side effects of the rendering procedure e.g. the storage of HTTP cookies may be intercepted and encrypted.

In another embodiment de duplication of all traffic to from the gateway is provided to minimize bandwidth consumed in communicating with the viewer. De duplicating means for example detecting when data is already cached by the viewer and sending references to that data rather than transmitting the actual data. In addition the compression of traffic to from the gateway as described may be provided to minimize bandwidth consumed in communicating with the viewer.

The page may then be rendered on the mobile device by accessing all resources downloaded in the package sent from the gateway in the first step of locally and initiating new requests to the gateway for any resources not found. For the next data request the mobile device sends the Session ID the URL required and or the App ID to the gateway and then the process repeats.

Now with respect to the protocol data format of one possible arrangement shall be described. The protocol format may exist as a signal transmitted over a communication line or stored in a non transitory memory or other memory such as a buffer register RAM ROM programmable memory etc.

If the gateway has identified that the request to the gateway is for an app ID other than the one supplied in the incoming request an HTTP header according to for example the standard format is added to the response with the new App ID included. The header for example is used on the client side to determine if a new base URL should be used in subsequent requests. If the user navigates and address for example to URL http server app1 index.html and it links to http server2 app2 index.html then the gateway needs to know if a link embedded in app2 index.html to say hello.html is destined for server or server2. The uncompressed size may be used to make it easier for the client to uncompress the data efficiently.

The HTTP header may include the uncompressed size of the data message as illustrated. The HTTP payload may include an index field that carries index data. The index data may include an original file name field for carrying the name a type field for carrying the type a size field for carrying the size or an MDS fingerprint field for carrying a fingerprint. The index fields beyond the file name may be used to match references embedded in the html to files in the package. For example the type is the MIME type a standard HTML type used to identify if a file is an html page a CSS stylesheet a javascript file a PDF document etc. The MIME standard includes dozens of types.

There may also be a Text field included that may provide a compression field carrying compressed data or a Zlib compression field for carrying Zlib compressed data. The Text field is a Text Encoding field which indicates which standard character set is used to encode the page e.g. UTF 8 UTF 16 ASCII etc. . The Unicode standard UTF is defined to allow embedded internationalized characters like Kanji whereas legacy encodings like ASCII really only support the English alphabet. The MD5 is used to match future response packages that only include the signature and not the actual data as you describe in the next paragraph.

An images field may include a scaled compressed field for carrying scaled or compressed images or a .png field for carrying .png format data. The described fields are merely examples and any combination of these fields or omission of any field here or additional fields is possible. In addition it shall be appreciated that the invention does not only support .png files but also any type of image png jpeg gif etc. .

As a possible additional enhancement the gateway computes a unique fingerprint for every resource that is retrieved from the Enterprise Network . This fingerprint may follow any standardized format MD5 as identified in the diagram above SHA 1 or any other open or proprietary fingerprinting technology.

The gateway stores all object signatures sent to a device prior to transmitting the package. During future requests to the gateway the package created only includes objects whose unique fingerprint has not previously been stored by the gateway . In this fashion data is de duplicated such that only new data is sent from the gateway to the mobile device. Other mechanisms to remove old objects or data in order to provide de duplication.

Process flowcharts shall now be discussed with reference to . illustrates at least three instances of how the process flows may be triggered. shows the first of these instances where the gateway receives traffic. sets forth the second instance where the visual display or viewer requests access to a gateway. In the gateway is described to access the network or Enterprise Network.

The process flowcharts may be considered to begin in at least 1 of 3 ways as illustrated in which shall be referred to as a start of process . In a first example the gateway is launched . The gateway is first launched using VPN or any similar technique for establishing a secure connection as will be further described with reference to . In another instance the user opens the visual display or viewer to begin the process flow for authentication and provisioning which is described further with respect to . In yet another example the gateway connects to a network or Enterprise Network. Turning to the process for launching the gateway is described in more detail. Traffic is sent to the gateway in step and the process begins. In an alternative embodiment the traffic is sent via HTTPs. As already discussed the traffic is processed on the fly by inspecting data as it passes through the gateway . Pre fetching may be applied here to optimize the traffic stream by identifying the dependent resources referenced and fetching them from the network web servers without necessarily communicating to the viewer. These steps are not necessarily followed in the order shown or described herein but may be in another order.

The traffic is forwarded to a plugin in step . When traffic arrives at the gateway from the network it is forwarded to the appropriate protocol plugin based on for example the protocol of the originating request. In response to receiving the traffic the gateway authenticates the application request . An App ID is used by the gateway to authenticate the App request and to generate a full URL. In order to generate an URL the gateway translates the URL as indicated by reference numeral .

Applications are provisioned by the gateway in a step . These may be URLs describing web based applications hosted within the intranet. They could also be for example services that do not have any visible user interface but are made accessible to other applications running on the mobile device via the system. The gateway may translate the URL supplied by the viewer using the App ID to lookup the server address of the server in the Enterprise Network and then append the URL path supplied in the request to the gateway .

Data passing through the gateway may be modified traffic modified by the gateway in a step . For example as HTML javascript CSS and other types of resources pass through the gateway the gateway may modify the content of those resources by editing or adding new content to them.

De duplicating may be provided in a step that detects when data is already cached by the viewer and suppresses forwarding that data to the viewer. As already discussed this reduces the burden on the viewer and improves overall transfer speed and therefore bandwidth. Speed and bandwidth are further improved in a batching operation that retrieves objects through pre fetching and assembles them into a single package prior to compression and transmission to the viewer. Further benefits in transmission are provided through compression where the contents of the batched package may then be compressed. As already noted these speed and bandwidth optimization techniques are examples and may be combined or deployed in any manner.

After the traffic is prepared for transmission by the gateway in accordance with one or more of the foregoing process flow steps the gateway is ready to transmit the data to the viewer in a step . Compressed packages may be sent to the viewer via HTTPS along with HTTP header flags indicating the application from which that data was retrieved. In an alternative the gateway packetizes the data in a step and transfers packets to from mobile device.

In an alternative arrangement a timeout watchdog halts operations if no traffic is detected after a predetermined time. In another alternative applications are deployed to the gateway . The same set of Apps may be deployed to the gateway. The gateway for example receives unique app IDs server addresses and partial URLs so that the gateway may generate a full unique or partially unique URL identifying a destination address for any access of an network application from the mobile device .

Now turning to the visual display is activated . The visual display may be rendered as illustrated by process flow step using the available capabilities of the device. In one embodiment the viewer receives data packages from the gateway via HTTPS. When a package is received it is unencrypted and uncompressed by the viewer.

A security operation may then be initiated. In a step security keys are exchanged. For example the viewer receives an encryption key a secure session ID a gateway URL and or a list of authorized applications from the controller. To further provide security a policy may be applied to the viewer . The policy may define device capabilities that should be limited disabled to protect sensitive corporate data. As illustrated by reference numeral users are authorized to use the system and are uniquely identified by a username. In a step the devices are provisioned in the controller as set forth above. When this is accomplished the viewer requests the user s authentication credentials in a step . These credentials along with the device s attributes are sent to the controller for authentication and in a step the user is granted access which may include providing a secure session ID the IP address of a gateway to connect to an encryption key for on device encryption or a role.

The mobile device or viewer application is then ready to decrypt and unpack pages at a step . The viewer decrypts the data according to for example the encryption algorithm used for the transmission HTTPS or otherwise . Once unpacked objects may be stored on the device in a cache that is indexed by for example an App ID and or the URL path of the resource as indicated in a step . The page may then be rendered on the mobile device by accessing all resources downloaded in the package sent from the gateway as indicated by reference numeral .

In an alternative embodiment there is provided a secure container application to the mobile device in a step . The secure container may modify those requests or the data communicated between an application and the operating system in order to modify the functionality of the combined system.

Once authentication has been completed a secure session may be established as indicated by reference numeral . This may be accomplished by sending a secure ID to one or both the mobile device and the gateway to for example create a shared secret. In order to provide further security the user may be assigned one or more roles that set a role for a particular user such as principal etc as indicated by step .

Now turning to which illustrates the process flow for connection to the Enterprise Network or network. In a step the gateway requests an access to the network. The gateway may send an encrypted and secure request to the enterprise web server . This connection is secured for example by using VPN to securely tunnel into the Enterprise Network . In the other embodiment a response received by the gateway from the network is processed in a step such that the network or Enterprise web server may transmit the content identified by the URL back to the gateway .

The connection to the Enterprise Network may be secured via VPN or because it is a direct connection into the network. At the application layer SSL encrypted https connections may also be supported to each specific enterprise application. For this the application itself may be configured to support https but it is provided here also to do so even when the gateway is directly connected to the enterprise network because large companies are concerned about insider attacks where employees snoop unencrypted traffic from within the network and they also about malware infecting internal computers servers and sniffing the network.

As an additional feature of the HTTP protocol the solution handles conditional requests in order to further optimize performance by sending less than full objects in the case that the object was not modified since a pre determined time. To achieve this in one example the gateway maintains a cache matching URLs to two pieces of protocol standard data returned by the enterprise application when that URL is requested. One piece of data is the ETag which is a unique signature of opaque form i.e. the gateway need not understand what it actually is that is used to uniquely identify an object. Second a last modified date time is provided which indicates when the object designated by the URL was last changed. One or both pieces of information may be supplied to the gateway by the enterprise application. When the gateway receives a URL from the device it translates the URL as described it then checks the URL cache to see if an ETag or a last modified date or both and then the gateway sends a conditional request to the enterprise server that says in essence send me the object referenced by the URL if and only if it has not changed. Next it is determined if the object has or has not changed using the available pieces of data. For example if the ETag is use if it is available or the last modified date is used if the ETag is not available. This optimizes performance further because when an object has not changed the destination server will simply return a short response that says object not modified rather than returning the full object.

Various systems methods and apparatuses have been described. It shall be appreciated that the various features and steps may be performed in combination or individually and shall not be understood solely to the arrangement or order in which they are here described.

