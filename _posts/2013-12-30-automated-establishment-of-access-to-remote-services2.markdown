---

title: Automated establishment of access to remote services
abstract: A software application designed to operate within an enterprise system is modified to operate properly within a system of a third-party provider. In one embodiment, a site manager obtains pertinent information about the software application from the source systems that make up the enterprise system and provides it to a cloud manager, and the cloud manager uses the information to generate a modified version of the software application for use on the cloud provider. The modification may include operations such as driver injection, file system mounting customization, customization of hostname-to-network address mappings, and boot image creation. Secure connections may also be established between the enterprise system and third-party provider to allow the application running on the third-party provider to access the services of the enterprise system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09602344&OS=09602344&RS=09602344
owner: CLOUDVELOX, INC.
number: 09602344
owner_city: Santa Clara
owner_country: US
publication_date: 20131230
---
The disclosed embodiments relate generally to server based applications. In particular the disclosed embodiments are directed to automatically reconfiguring computer software applications hosted by a given enterprise system to be hosted by a different system such as that of a cloud provider.

Many companies and other organizations have created computer software applications designed to be hosted on their own enterprise systems. This requires the organizations to commit considerable resources to the design and maintenance of the enterprise systems that host the applications. For example the organizations must employ many information technology professionals to ensure that the networks storage systems security settings and other components of the enterprise systems continue to provide the proper levels of performance and security.

As an alternative model a third party provider may make its own computing systems available for hosting the organizations applications. In this model the third party provider hereinafter referred to as a cloud provider supplies the hardware and software systems that provide the computing storage and network capacity required by the software applications configures system settings to provide proper data security and the like. Thus the third party provider is responsible for the technological and administrative details necessary for the applications to properly function freeing the organizations from the need to attend to such details. The organizations can then supply the applications to the third party provider for hosting compensating the third party provider according to the resources consumed such as a certain amount of storage space or a certain amount of computing power.

However it can be complex labor intensive and error prone for an organization to modify its existing applications for migration to a third party cloud computing system so that they will function properly on the systems of the third party providers. That is the computing environment e.g. hardware devices operating system types and versions network settings and the like of the third party provider s system may differ significantly from that of the organization s enterprise computing systems and hence an application will likely need to be significantly modified if it is to function properly in the third party environment. For example the operating system version made available by the third party provider might differ from that of the enterprise system leading for example to an unavailability of libraries expected by the application. Similarly the Internet Protocol IP addresses of the third party provider will differ from those of the enterprise system. The names of the storage devices and system host names will likely differ as well. Thus applications that make reference to these values will cease to function properly when hosted by the third party provider.

Additionally for reasons such as security and efficiency it may not be acceptable to host certain services of the enterprise system within the third party environment. Thus the applications migrated from the enterprise to the third party environment will need to be able to communicate with the enterprise in order to access the services that would not be available from within the third party environment. However it requires additional effort to configure the applications running in the third party environment to communicate with the services hosted on the remote enterprise. This additional configuration becomes particularly tedious and error prone when many different systems are involved in providing services for the application and hence many different systems must be properly configured and or many services are used by the application.

An enterprise based application which includes both the software specifically written to implement the application and the operating system and other software constituting the environment in which it executes is originally designed to operate within an enterprise system. The enterprise based application is automatically modified to operate properly within a system of a third party provider referred to hereinafter as the cloud provider . In one embodiment a cloud manager obtains pertinent information about the enterprise based application from the source systems that make up the enterprise system and uses the information to generate a modified version of the enterprise based application for use on the cloud provider.

The enterprise based application is constructed to service a user s client device through the various interactions between the source systems in the enterprise system such as the providing of information by a database server system and the providing of a web page by a web server system. The cloud manager replicates the environment of the enterprise system using the information obtained from the source systems and performs a number of modifications of the enterprise based application by modifying the replicated environments of the source systems that together make up the enterprise based application.

In one embodiment the modifications of the enterprise based application include kernel file injection. Based on an operating system type and version of the source systems of the enterprise system and optionally based on the cloud provider kernel files required for the enterprise based application to function properly on the cloud provider are identified and these kernel files are then added to the replicated environments of the source systems.

In one embodiment the modifications of the enterprise based application include file system mounting customization. A mount table file is modified to use a unique identifier for a file system of the source system the unique identifier may be generated and stored within metadata of the file system. When the corresponding operating system begins execution and the mount table file is analyzed to establish the file system mount points the unique identifier is located within the file system metadata thereby correlating the file system with the proper device name of the underlying storage regardless of whether the device names differ between the source system and the cloud provider.

In one embodiment the modifications of the enterprise based application include customization of hostname to network address mappings. Source systems of the enterprise that are relevant to the application are identified and a mapping between hostnames and IP addresses of the source systems within the enterprise are generated and stored in a mapping file accessed by the operating system during initialization. In one embodiment the relevant source systems are identified at least in part by the users using a user interface that permits users to add and remove source systems and to specify their network visibility and other properties.

In one embodiment the modifications of the enterprise based application include boot image creation. The target operating system on the cloud provider is compared with the operating system type and version of source system s of the enterprise system to identify whether the operating system s of the source systems is not compatible with the cloud provider e.g. sufficiently old. If so then a set of newer boot files is copied to a boot directory e.g. boot of the replicated environments of the source systems. Additionally in one embodiment a configuration file of a boot loader is modified to identify the device on which the root file system partition is located using the unique identifier of the file system.

With the environments of the pertinent source systems replicated and modified the application may be executed on the cloud provider by creating an instance of each of the pertinent source systems within a virtual machine of the cloud provider. Further multiple independent instances of the application may be made available to different users by creating for each user a set of instances of the pertinent source systems.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following description that other alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

More specifically the enterprise includes any number of source systems . The source systems represent physical computing systems such as web servers database servers and application servers along with the network infrastructure that connects the source systems to each other and to external client systems. In one embodiment the source systems may also represent virtual systems defined within a virtual machine server running within the enterprise . The collective actions of the different source systems together constitute the enterprise based application that clients can access. For example the actions of a database server to provide requested information and of a web server to provide a web page graphically embodying the provided information together might produce a particular web page of a web based enterprise application.

The source systems of an enterprise may include systems providing services such as a database server that provides access to data of a database e.g. in response to queries in the Structured Query Language SQL a directory information server providing directory information about the enterprise e.g. a Lightweight Directory Access Protocol LDAP server or the like. For various reasons it may be preferable for these services to remain within the enterprise rather than to be replicated within the cloud provider . For example database services might not provide the required transactional properties when replicated within the cloud provider or might become out of sync with the database data stored within the enterprise . As another example security policies of the enterprise might dictate that directory information databases be kept within the enterprise rather than hosted externally.

The individual source systems of the enterprise have given hardware and software characteristics. For example each source system has a certain amount of primary memory RAM a given number of processors and or cores within a single processor and a set of networks to which the computer has a connection represented by e.g. their IP addresses . A given source system also has file system characteristics such as file system type e.g. the ext2 or ext3 file system types for the LINUX operating system and capacity e.g. 2 TB .

A source system comprises one or more file systems . The file systems may contain data used or generated by the enterprise based application such as configuration or log files or files created by and loaded by a database server and storing customer information for example. The file systems may also contain the code that is specific to the enterprise based application such as a compiled binary directly executable by a processor intermediate compiled code executable by a virtual machine e.g. JAVA code scripting code interpreted by an interpreter for languages such as PYTHON or RUBY or the like. The file systems further contain the files making up the operating system environment of the source system such as the operating system kernel or link libraries and which constitute the environment of the enterprise based application.

In one embodiment the source systems also comprise an information provider module provided by the organization responsible for the site manager and the cloud manager . The information provider module of a source system forms a network connection with the site manager or directly with the cloud manager and provides it with information about the source system that is used to generate a cloud machine image of the source system . The information provider module comprises sub modules that perform operations such as identifying the source systems obtaining the information about the source systems and providing that information to the cloud manager .

Specifically in one embodiment the information provider module comprises a configuration reader module a file system reader module a sender module and a system identification module .

The system identification module identifies the set of source systems within the enterprise that are candidates for replication on the cloud provider . The system identification module analyzes communication patterns within the enterprise to identify active source systems. For example the system identification module can analyze the information provided by an operating system utility such as netstat to identify source systems and can further automatically install the information provider module on such systems. Alternatively and or additionally authorized users of the enterprise can manually identify the relevant source systems and install the information provider module on those systems. In one embodiment login information e.g. usernames and passwords of one or more of the source systems of the enterprise is provided to the system identification module so that the system identification module can obtain the permissions necessary for this analysis.

The configuration reader module obtains configuration information about the hardware and software characteristics of the source systems within the enterprise . In one embodiment the configuration information for a source system includes the amount of primary memory the number of processors the available networks and the type and capacity of each file system.

The file system reader module obtains file system data that is the data stored by the file systems . For example the file system reader module can obtain a listing of every file within a file system along with the data stored by those files using local disk read system calls.

The file system reader module can also determine a difference between the current state and a previous state of the file systems . For example the file system reader module can identify files that have changed since a given previous file system state along with the data of the changed files the files that have been added along with the data of the added files and the files that have been deleted.

The sender module provides the information obtained by the configuration reader module and the file system reader to the site manager and or directly to the cloud manager using the network .

The infrastructure of a cloud provider may be composed of any number of physical systems such as application servers web servers database servers and the like as well as the network infrastructure that connects the physical systems and provides network access. Examples of a cloud provider include AMAZON WEB SERVICES AWS RACKSPACE WINDOWS AZURE and GOOGLE COMPUTE ENGINE.

The cloud provider can simulate a physical machine by launching an instance of a virtual machine constructed based on a cloud provider specific machine image description. The cloud machine image consists of the property description that describes the computing characteristics of the virtual machine to be launched such as memory size and the storage configuration that includes the number and size of the virtual storage devices and the locations of replicated data from the source file systems .

Thus the cloud provider may host an enterprise based application of an enterprise by launching for each relevant source system in the enterprise a virtual machine instance that runs a cloud machine image corresponding to the source system . The set of virtual machine instances in cloud provider replicates the interconnection relationship of the source systems and the operational objectives of the enterprise .

Some aspects of the environment of the cloud provider will differ from those of the enterprise . For example the cloud provider may offer its users a choice of some set of predetermined operating system types and versions such as CENTOS 5.3 CENTOS 5.6 UBUNTU 12.04 WINDOWS 2008 WINDOWS 2012 and the like and these types versions may differ from the types versions deployed on the source systems of the enterprise . To mitigate the differences the cloud manager based on the original operating system of the source system generates an operating system image which is supported by the cloud provider by modifying the replicated file system .

Further the cloud provider will have its own set of public network addresses e.g. IP addresses that it allocates to the enterprise based applications that it hosts. These network addresses will differ from the public network addresses used by the enterprise .

The various source systems of the enterprise may also use devices with names that differ from those on the cloud provider such as a device named sda1 on a source system and xvdf1 on the cloud provider .

The site manager or the information provider and the cloud manager communicate to generate appropriately modified representations of the source systems on the cloud provider . This replicates the enterprise based application achieved by the collective operation of the source systems on the cloud provider . The site manager and the cloud manager are now described in greater detail.

In one embodiment the site manager is implemented using a virtual machine. For example one or more source systems of the enterprise might have hypervisors e.g. ESX or FUSION by VMWARE installed in which case the site manager could be implemented with a machine image created for and executed by those hypervisors. In another embodiment the site manager is implemented as a machine image created for and executed by a virtual machine of the cloud provider . In another embodiment the site manager is a physical machine accessible via the network . Thus the location of the site manager with respect to the enterprise can differ in different embodiments and may but need not be within either the enterprise or the cloud provider . For the sake of simplicity however the site manager is depicted in as being an entity separate from the enterprise and the cloud provider . Regardless of the location of the site manager in embodiments in which the site manager is used the information provider module of a source system creates a network connection with the site manager when providing information about the source system.

In one embodiment the cloud manager is implemented as a machine image created for and executed by the virtual machine of the cloud provider . In such an embodiment the cloud manager executes within the cloud provider although for the purposes of simplicity the cloud manager is depicted in as being logically separate from the cloud provider .

The cloud manager comprises a receiver module a file database configuration information file systems a customization module a cloud image generation module cloud machine images and a cloning module .

The receiver module receives the configuration information and file system data sent by the site manager or sent directly by the sender module for the various source systems and stores them locally as configuration information and file system data . The file system data thus correspond to the file systems of the source systems on the enterprise .

The file database stores different sets of baseline operating systems for different cloud providers . A baseline operating system stored in the file database includes driver files boot files and the like. The file database may further store the additional files themselves. As an illustrative example simplified for purposes of clarity Table 1 below illustrates several different LINUX operating systems of different distributions i.e. CENTOS and UBUNTU and several different WINDOWS operating systems i.e. Windows 2008 and 2012 and the corresponding baseline operating system files which are stored in the file database and for use by different cloud providers as well as a cloud provider i.e. AWS and AZURE for each.

For each tuple there is a list of kernel files required to be added to the environment of the cloud provider reflecting for example that those kernel files are needed to run software on the cloud provider yet are not provided by the designated operating system and version. For example referring to the example of Table 1 the tuple has a corresponding set of kernel files A B D reflecting perhaps that CentOS 5.3 lacks kernel files A B and D which are necessary for the enterprise based application to function within the hosting environment of AWS.

Note that although to simplify the example of Table 1 a single letter identifier such as A has been used in practice concrete kernel file identifiers would be listed such as full pathnames of files for the kernel files. It is further appreciated that the file database need not represent information in tabular form as in the example rather many data structures such as trees may provide an efficient implementation and may also be used.

It is additionally appreciated that certain information may be added to or omitted from that shown in Table 1. For example in an embodiment solely directed to a particular cloud provider there need not be a Cloud provider element in the table since the identity of the cloud provider is implicit and fixed.

The customization module customizes the file system data obtained from the source system in order to allow the enterprise based application to properly function in the environment provided by the cloud provider . Specifically in one embodiment the customization module performs driver injection and image customization and also creates a boot image suitable for the cloud provider . These operations are now explained in more detail.

The source systems might be lacking in certain drivers or other files associated with the operating system kernel and required for the application to function properly on the cloud provider . Accordingly the cloud customization module performs kernel file injection see step of so that the cloud machine images have all the required kernel files.

In one embodiment kernel file injection is accomplished by identifying relevant kernel files through comparison of the operating system type and version of the source system with the cloud provider that is to be used to host the enterprise based application. The file database can be used for this purpose. For example referring again to the simplified example of Table 1 above if the enterprise based application were using CENTOS v. 5.3 and were intended to be hosted on AWS then kernel files A B and D would be added to the file system data .

Image customization involves analyzing and modifying the contents of existing files obtained from the source system . The image customization includes file system mounting customization hostname and network address mapping customization and network address allocation customization each of which is now described in more detail.

The source systems and the cloud provider may use different names to address the underlying storage devices. Such device names can be used in the file system mount table file to reference the file systems which reside on the named storage devices. For example the primary drive on a web server of a given source system might be named sda1 whereas the primary drive of the environment provided by the cloud provider might be named xvdf1 . Thus an attempt to mount a file system using the device name sda1 as a reference will fail in the cloud provider since the storage device name has changed to xvda1 in the cloud provider .

Accordingly the customization module customizes a mount table file for the given source system . For example the mount table file for a LINUX operating system might be the file etc fstab. As a specific example the file etc fstab on the source system might contain the entry 

which specifies that one ext3 typed file system which resides in storage device dev sda1 should be mounted at the location in the Linux system. As noted the mount described by this line would lead to incorrect results within the cloud provider if the cloud provider s storage drive were named xvdf1 rather than sda1 as in the source system .

In order to rectify this problem the customization module instead determines for each file system of the source system a unique ID corresponding to that file system. For example in one embodiment the unique ID which is stored in the metadata of the file system on the source system is retrieved and reported to cloud manager . The cloud manager saves this unique ID into the metadata of the file system and replaces the device name with this unique ID in the mount table file. For example for the device named dev sda1 of a given source system the customization module could retrieve the hexadecimal string f6f514a9 2954 473c 9a47 664a4d4eb0d4 of the file system from configuration information as reported by information provider on the source system . The customization module could then write the hexadecimal string into the metadata for the file system and also modify the entry of the file etc fstab from

which has the effect of mounting a file system whose unique ID is f6f514a9 2954 473c 9a47 664a4d4eb0d4 at the root directory of a Linux system. Since the unique ID for the file system has been written into the file system as well as into the mount table file etc fstab a Linux system can properly identify the file system as referenced in the mount table file to perform a file system mounting operation regardless the name change of the underlying storage device. In another embodiment the unique ID may be randomly generated rather than read from the metadata of the file system .

A static hostname to network address mapping specifies logical host names that will be associated with network addresses such as Internet protocol IP addresses. For example for a LINUX operating system the file etc hosts might specify the hostname to network address mapping. The static hostname to network address mapping provides appropriate mappings between host names and network addresses even if the local server designed for that purpose e.g. a DNS server is not currently available. Thus network communications using hostnames specified by the hostname to network address mappings could continue properly even if the local DNS server had malfunctioned for example.

Many enterprise applications make reference to network addresses of the various source systems associated with the application e.g. in application configuration files many of which are not documented or otherwise explained. Thus it is tedious and error prone to attempt to locate and revise these network addresses e.g. in the application configuration riles when migrating an enterprise based application from an enterprise to a cloud provider . Retaining the network addresses used in the enterprise rather than updating the network addresses to those made available by the network provider avoids this difficulty.

The customization module generates a static hostname to network address mapping based on the source systems identified by the system identification module . That is for each identified system the customization module determines its IP address and its hostname e.g. using operating system functionality such as the hostname command or system call. The system customization module also generates variants of the hostname. For example the system customization module may obtain the hostname in its fully qualified form and generate variants by stripping away the domains e.g. starting with the fully qualified hostname machine.company.corp and forming simplified variant hostnames machine.company and machine . As a more detailed example and referring ahead to assuming that the identified four source systems A D were found to have hostnames sugar2 ws1.company.corp sugar2 ws1.company.corp sugar2 1b.company.corp and sugar2 db.company.corp and corresponding IP addresses 198.101.232.7 198.101.232.200 198.101.232.118 and 198.101.232.219 the customization module might generate the following mappings 

The line 198.101.232.7 sugar2 ws1.company.corp sugar2 ws1 indicates for example that the fully qualified hostname sugar2 ws1.company.corp and the shortened hostname sugar2 ws1 are both aliases for the IP address 198.101.232.7. The generated mappings are then stored in a known address hostname mapping file such as the etc hosts file in the LINUX operating system.

The cloud provider may require that virtual machine instance dynamically obtain its network e.g. IP addresses rather than using static address assignments in order to more effectively manage its network infrastructure. Thus in one embodiment the customization module modifies the operating system settings stored in the file system data and obtained from the source system so as to enable dynamic address allocation. Thus in one embodiment the customization module changes for the operating system settings corresponding to each source system any static network address allocations to use the Dynamic Host Configuration Protocol DHCP . More specifically since operating system settings such as network address allocation are stored within the corresponding file system the customization module modifies the file systems stored by the cloud manager to reflect the change.

The customization module generates a cloud boot file system in the file systems defined by the file system data e.g. by creating a new boot volume mapped to a boot directory in the file systems at boot time.

If operating system versions of the source systems are sufficiently old they may not be able to properly boot up a virtual machine instance on the cloud provider . Thus in one embodiment the customization module uses the version of the operating system provided by the cloud provider to identify files that should be in the cloud boot file system. For example if the operating system of one of the source systems is before a particular known version e.g. version 6.0 of CENTOS then a particular given set of files is used e.g. the versions of boot vmlinuz kernel boot initrd and the boot grub menu.lst boot loader file that are stored within the file database otherwise the files already within the boot directory from the source system are used. In one embodiment the file database is used to determine which boot files are required given a particular source operating system operating system version and cloud provider.

The customization module further configures a boot loader for the application on the cloud provider . For example for a LINUX system and the GRUB boot loader the boot loader configuration file could be the file grub.conf within the grub subfolder of the cloud boot file system. In one embodiment the customization module modifies the boot loader configuration file from the source system to boot from the customized root file system described above with respect to file system mounting customization that is the customized root file system identified by the generated unique ID. For example assume that the boot loader configuration file from the source system contained the following line 

With the files within the file system data properly configured the cloud manager generates a cloud machine image .

The cloud image generation module causes generation of an image of each of the relevant source systems within the enterprise based on the customized contents of the file systems and on the configuration information and the resulting set of images is stored in the cloud machine images repository . For example if the cloud provider is AMAZON WEB SERVICES AWS the corresponding cloud machine images are AMAZON Machine Image AMI objects.

In one embodiment the cloud image generation module generates an image using an application programming interface API of the cloud provider . For example if the cloud provider is AMAZON WEB SERVICES the generation of an image named My AMI might be requested using the URL

https ec2.amazonaws.com Action RegisterImage RootDeviceName dev sda1 BlockDeviceMapping.1.DeviceName dev sda1 Name My AMI AUTHPARAMS.

As a result each relevant source system of the enterprise has a corresponding cloud machine image registered with and stored on the cloud provider .

The cloning module can be used to generate instances also referred to as clones of each application. Multiple instances of virtual machines running the same cloud machine images can be created to allow multiple instances of the enterprise application to be run independently by different users. Thus for example multiple application testers could be given different independent instances of the application to test merely by requesting the creation of a new instance for each tester. Similarly separate production and testing systems could be created by generating separate instances of the application one for production and one for staging or testing for example .

More specifically when the cloning module receives a request to create a clone of an application the cloning module identifies the set of cloud machine images corresponding to the source systems for the enterprise embodying the application. The cloning module then requests the cloud provider to launch the identified cloud machine images into the virtual machine instances . In one embodiment each identified cloud machine image is launched in a separate virtual machine instance . Some cloud providers create a single virtual private networking environment for all the virtual machine instances associated with the application and assign local IP address to each virtual machine instance in the virtual private networking environment.

The instance creation may be customized based on for example additional data known about the relevant source systems . For example referring ahead to the user interface of some source systems may be designated as private and others as public with public systems having internet accessible IP addresses assigned in addition to their local IP addresses.

In one embodiment the enterprise and the cloud manager include tunneling modules which act together to establish tunnels between the application running within the cloud provider and the source systems of the enterprise and the services provided by the enterprise . Further details of the tunneling modules are provided below with respect to .

The metadata and content of the file systems of the source system are provided to the customization module which generates the customized file systems of the cloud manager . The customization module also controls injection of files of the file database of the cloud manager into the customized file systems to ensure that the image of the source system will have the necessary kernel files e.g. drivers and libraries needed to function properly on the cloud provider . Additionally configuration information is obtained from the source system .

The cloud image generation module then produces for the source system a corresponding cloud machine image based both on the customized file systems and on the configuration information .

This process is repeated for each source system determined e.g. at least in part by the system identification module to be associated with the enterprise based application.

As discussed above the site manager obtains information from the source systems including configuration information and data from the file systems . The site manager further customizes the enterprise based application as embodied in the source systems so that it will function properly on the cloud provider . Additionally the site manager may further monitor any changes to the source system updating the file systems to reflect the changes.

Specifically the site manager obtains configuration information from the source system as discussed above with respect to the configuration reader module of . The site manager provides the obtained configuration information to the cloud manager which stores the configuration information as configuration information .

The cloud manager uses the configuration information to initialize the file systems on the cloud manager . As noted above in some embodiments the cloud manager and its file systems are physically stored within storage of the cloud provider . Specifically for every source file system for which file system configuration information was obtained the cloud manager establishes a corresponding file system as specified by the file system configuration information e.g. by requesting the cloud provider to provide a storage volume of the given type and having the given capacity. The cloud manager then formats the storage volume into a given typed file system as reported from configuration information regarding to the file system on source system . This newly formatted file system is the file system to which the action of providing file system data below will transfer data.

In addition to obtaining configuration information such as file system type and capacity the site manager also obtains file system data that is the data stored by the file system as described above with respect to the file system reader module of . The site manager provides the obtained file system data to the cloud manager . The cloud manager replicates the file systems from the source system by writing the file system data provided in step into the file systems initialized at step . In one embodiment the cloud manager maintains a mapping relationship between each file system of the source system and the location of its corresponding file system on cloud manager . Thus the file system data from one file system which arrives at step will be placed at correct file system in step .

The authors of the enterprise based application represented by the source systems may modify the enterprise based application after the initial replication of steps . In order to properly reflect any such modifications the site manager or the information provider may further monitor the file systems of the source systems and propagate those changes to the corresponding file systems created on the cloud provider . In one embodiment the file system reader is configured to identify any changes to the file systems of the individual systems within the source system and to provide an indication of the changes to the cloud manager which then causes corresponding modifications to the corresponding file systems of the cloud provider thereby updating the file systems. The file system reader can identify the changes by for example periodically reading the file allocation tables of the different file systems and noting any file modification dates more recent than those previously noted. Changes to a file may be specified by the identifier of the file e.g. file system ID and full pathname within the file system and an indication that the file was changed along with the complete data of the changed file or a delta value that expresses the particular change made . Similarly the addition of a new file may be specified by the identifier of the new file an indication that the file was added and all the data of the new file and the deletion of a file may be specified by the identifier of the deleted file and an indication that the file was deleted.

As a result of the file system updating the file systems on the cloud provider are kept consistent with those on the source system . Thus if the source systems change corresponding changes are reflected on in the cloud manager and or the cloud provider .

The cloud manager further customizes the data obtained from the source system in order to allow the enterprise based application to properly function in the environment provided by the cloud provider . Specifically the cloud manager performs kernel file injection and image customization and also creates a boot image suitable for the cloud provider as described above with respect to the customization module .

The cloud manager further can generate cloud machine images corresponding to the different source system one cloud machine image per source system as described above with respect to the cloud image generation module . The cloud manager can also create clones of the enterprise application by requesting the cloud provider to launch the cloud machine images into virtual machine instances . Each clone operates independently of the others so different users may independently operate the different clones as if they each constituted a separate enterprise .

An enterprise based application made up of a set of source systems of the enterprise is assigned the name in text area My App and the source systems to be replicated within the cloud provider are depicted in the system area of the user interface.

In the embodiment of the source systems are partitioned into private systems and public systems respectively depicted in areas A and B with source systems A B and D being private systems and source system C being a public system. The source systems placed in the private systems group A will be made non accessible to outside systems when the enterprise based application is launched on the cloud provider whereas the systems of the public systems group B will be accessible. To control accessibility the private systems A may be assigned IP addresses from a private IP address range for example and the public systems B may be assigned IP addresses from a non private IP address range. 

The source systems may further be partitioned based on functionality. For example in the source systems are partitioned based on whether they represent database servers with systems in partitions A and B representing database servers and those in other areas representing non database servers. The source systems may then be treated differently based on their identified functionality. For example referring again to source systems identified as being database servers may be treated differently when providing file system data during steps or in order to provide the transactional properties necessary to achieve database data integrity such as by copying data using a database specific API.

In one embodiment the user interface initially displays source systems identified by the system identification module of . The user of the user interface may then use the interface to move the systems into the appropriate area of the user interface thereby specifying their properties e.g. private public visibility or database non database functionality . The user may also select control to request the system identification module to attempt to discover additional source systems within the enterprise or controls such as Add button to manually add a source system to one of the groups e.g. group A . Identified source systems may also be moved into group to be removed from the enterprise based application and will accordingly not be replicated on the cloud provider .

In one embodiment the functionality upon which the partition is based is the provision of important services such as database services or directory services. For example any source systems providing such services may be illustrated in a separate portion of the user interface in the same way as the database servers were provided their own area in . Such source systems will then not be replicated on the cloud provider since the services should continue to be provided locally even when the remainder of the application is migrated to the cloud provider .

In one embodiment application architectural components may also be added via the user interface . For example checkbox allows the user to specify whether the enterprise based application should use a load balancer. Since the checkbox has been enabled in the user interface of a load balancer system C is inserted within the public group B.

Once the enterprise based application has been made available on the cloud provider by replicating the source systems of the enterprise e.g. those indicated in the application may be launched by creating an instance also referred to as a clone of the replicated source systems . As noted multiple independent sets of instances of the replicated source systems may be created.

The add new application button allows creation of a new configuration of the application corresponding to a different set of source systems or different properties for the same systems. Referring again to for example a new separate configuration of the application could be created by adding an additional web server system within the private group A or by removing the load balancer.

Application information area summarizes information about the replicated applications of the user such as the identity of the cloud provider used to host the applications and the various statuses of replicated applications for which instances have been created e.g. which are running which have been terminated etc. . The applications for which instances have been created may be further managed. For example the instances can be suspended terminated resumed and the like.

Since one or more services are not directly available within the cloud provider the cloud side application server needs an indirect way to use the services. Accordingly an enterprise side tunneling component and a cloud side tunneling component together establish secure tunnels by which the cloud side application server can send requests to the service . The establishment and use of the tunnels are described in more detail below with respect to .

The enterprise side application server stores or has access to configuration data e.g. a configuration file that specifies attributes of the tunneling process. An example set of configuration data according to one embodiment is provided below in Table A.

The example configuration data of Table A includes the port number and destination IP address the private IP address of the enterprise side tunneling module used to form a secure connection as well as the private IP address and port number of the cloud side application server used as part of a tunnel between the application servers .

Similarly the cloud side application server stores or has access to configuration data e.g. a configuration file that specifies attributes of the tunneling process. An example set of configuration data according to one embodiment is provided below in Table B.

The configuration data of cloud side application server contains information not included within the configuration data of the enterprise side application server such as information about how to access various services of the enterprise .

The components of the enterprise namely the service the enterprise side application server and the enterprise side tunneling module begin with private IP addresses denoted IP IP and IP respectively. Since the IP addresses are private they cannot be used outside of the enterprise by the cloud provider to communicate directly with their corresponding components inside the enterprise.

The cloud manager initiates A execution of the cloud side application server by creating a clone of the application as in step of . It also initiates B the application s cloud side tunneling component .

The cloud manager assigns the cloud side application server with a private IP address donated IPand assigns the cloud side tunneling module with a public IP address IP and port P e.g. port 22 the port for the Secure Shell SSH protocol by which the cloud side tunneling module can be reached from outside the private network address space of the application running within the cloud provider . The cloud manager further provides the enterprise side tunneling module with IP P IPand Pso that it has the necessary connection information to communicate with the cloud side tunneling module and the cloud site application server .

The enterprise side tunneling module picks one of its own unused ports denoted P and uses the received IPand Pto establish port forwarding from enterprise side tunneling module s IP address IPand port Pto the cloud side tunneling module at IPand P. As a result any packets sent to the enterprise side tunneling module at IP address IPand on port Pwill be forwarded to the cloud side tunneling module . This port forwarding operation conceptually establishes a first tunnel between the enterprise and the cloud provider and more specifically from enterprise side tunneling module to cloud side tunneling module .

Upon successful configuration of port forwarding the enterprise side tunneling module will send a request to enterprise side application server to initialize a second tunnel between enterprise side application server and cloud side application server . The body of the request will contain the cloud side application server s IP address IPand port P which were originally provided by cloud manager at an earlier step .

The enterprise side application server initiates another secure connection which will eventually become secure connection over the first tunnel by sending a request for the secure connection to the enterprise side tunneling module at IP address IPand port P the request contains the private IP address IPand port Pof the cloud side application server within the body of the packet. Due to the establishment of the first tunnel at step the request for this secure connection is forwarded from the enterprise side tunneling module over the first tunnel to the cloud side tunneling module . The cloud side tunneling module extracts the private address IPand Pfrom the body of the packet and accordingly establishes a secure connection with the cloud side application server . At this point cloud side tunneling module will start forwarding any request for a secure connection to the cloud side application server s private IP address IPand port P.

The enterprise side application server establishes port forwarding to the cloud side application server at the private IP address IPof the cloud side application server for packets received locally e.g. IP address 127.0.0.1 on a particular port hereinafter denoted P . This establishes a second tunnel which operates over the secure connection which in turn operates over the first tunnel . As a result any packets sent to the enterprise side application server on port Pare securely forwarded over the second tunnel to the cloud side application server . This marks the completion of the second tunnel initialization that was initiated by request .

With the second tunnel established the enterprise side application server uses functionality of the secure connection e.g. the cp command of an SSH connection to request a copy of the configuration data of the cloud side application server which the cloud side application server accordingly provides . More specifically the enterprise side application server sends a packet to 127.0.0.1 on port Pcontaining a command such as cp to be executed by a process implementing the secure connection. This packet is forwarded over the second tunnel via the secure connection due to the use of destination address 127.0.0.1 and port P and the process on the cloud side application server implementing the secure connection executes the command providing the configuration data back to the enterprise side application server . 

In configuration data each service available on enterprise side application will have a corresponding connection information entry IP protocol IP address and port e.g. protocol TCP IP address 127.0.0.1 and port 50000 herein denoted as ServiceInfo. ServiceInfocan either be an address within the private address space of cloud provider or the local address e.g 127.0.0.1 of cloud side application server . The cloud side application server will be able to connect using the ServiceInfoto reach the corresponding enterprise side service . There are a few ways that the ServiceInfois presented to an application running on the cloud side application server . While modifying the filesystem data at for example step of the cloud manager can parse the application s configuration file to determine the enterprise side connection information of service . The cloud manager can then replace that enterprise side information with a dynamically generated ServiceInfoand save the mapping between service and ServiceInfoin configuration data . Hence at the time that the cloud side application server is booted A by the cloud manager the cloud side application server will already be configured to use the ServiceInfoto reach the enterprise side service without the need for any manual configuration. Alternatively the application can also be manually configured after step A to use ServiceInfo.

As noted the configuration data specifies information used to access the service s available on the enterprise . Thus using the configuration data the enterprise side application server enables access to services by the cloud side application server by recording the ServiceInfofor which it will respond to requests from the cloud side application server .

With the secure connection established and with the ports recorded by the enterprise side application server the cloud side application server can request the use of a service by sending the request using the address and port data of the corresponding ServiceInfoin configuration data this causes the request to be sent through the tunnel which in turn operates over the first tunnel . The enterprise side application server receives the request on the other side of the tunnel invokes the service and receives the result that the service provides . It then returns the provided result from step back to the cloud side application server via the tunnel using the first tunnel . Since the secure connection is secure e.g. encrypted information can be safely provided to from the service even outside of the enterprise across the network .

Reference in the specification to one embodiment or to an embodiment means that a particular feature structure or characteristic described in connection with the embodiments is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

In this description the term module refers to computational logic for providing the specified functionality. A module can be implemented in hardware firmware and or software. It will be understood that the named modules described herein represent one embodiment and other embodiments may include other modules. In addition other embodiments may lack modules described herein and or distribute the described functionality among the modules in a different manner. Additionally the functionalities attributed to more than one module can be incorporated into a single module. Where the modules described herein are implemented as software the module can be implemented as a standalone program but can also be implemented through other means for example as part of a larger program as a plurality of separate programs or as one or more statically or dynamically linked libraries. In any of these software implementations the modules are stored on the computer readable persistent storage devices of a system loaded into memory and executed by the one or more processors of the system s computers.

The operations herein may also be performed by an apparatus. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of media suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may also be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references below to specific languages are provided for disclosure of enablement and best mode of the present invention.

While the invention has been particularly shown and described with reference to a preferred embodiment and several alternate embodiments it will be understood by persons skilled in the relevant art that various changes in form and details can be made therein without departing from the spirit and scope of the invention.

Finally it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

