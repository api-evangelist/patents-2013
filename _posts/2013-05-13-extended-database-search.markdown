---

title: Extended database search
abstract: Methods, program products, and systems implementing integrated repository of structured and unstructured data are disclosed. An integrated environment is provided for accessing structured data (e.g., data of a relational database) and unstructured data (e.g., data stored in a text or binary file), including creating, managing, modifying, and searching the structured data and unstructured data. The integrated environment can include an integrated user interface, a set of commands and application programming interface (API), and storage for a relational database and a document repository. The integrated environment can include a database abstraction layer that allows database operations on both the structured data and the unstructured data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009201&OS=09009201&RS=09009201
owner: Apple Inc.
number: 09009201
owner_city: Cupertino
owner_country: US
publication_date: 20130513
---
Data can be stored in various formats including in a relational database or as a file. A relational database can include a collection of relations frequently known as tables. A table in the relational database can correspond to a logical structure in which data can be stored. The table can include a set of data elements or values that are organized using vertical columns and horizontal rows. The logical structure can include for example a specified number of columns and a variable number of rows. Each column can have a data type that defines what category of data can be stored in the column. A row of a table can include one or more data fields. Each data field can correspond to a column and have a data type that corresponds to the data type of the column. The logical structure as well as relations between data in one table and data in another table can be defined using a database schema which can be a data model that defines how data in the relational database are represented or accessed. Data in relational databases can be accessed or managed using a script written in a data manipulation language DML a data definition language DDL or a data control language DCL .

In addition to being stored in a relational database data can be stored in a file. The file can include a block of information in the format of a one dimensional array of bytes. The bytes are stored sequentially. The file can be accessed through an operating system of a computing device or an application program e.g. a file manager program such as Windows Explorer .

Methods program products and systems implementing integrated repository of structured and unstructured data are disclosed. An integrated environment is provided for accessing structured data e.g. data of a relational database and unstructured data e.g. data stored in a text or binary file including creating managing modifying and searching the structured data and unstructured data. The integrated environment can include an integrated user interface a set of commands and application programming interface API and storage for a relational database and a document repository. The integrated environment can include a database abstraction layer that allows database operations on both the structured data and the unstructured data.

In some implementations the integrated environment can include integrated search functions that allow search of structured data and unstructured data. An index of a relational database can be integrated with an index of the unstructured data. The index of the relational database can include a data structure created based on one or more columns of a database table a function or an expression. The index of the unstructured data can include an index created based on content of the unstructured data. The integrated search functions can be performed on a combined index that includes both the database index and the index of the unstructured data or performed separately on each of the indices in the backend.

An integrated repository of structured and unstructured data can be utilized to achieve one or more of the following advantages. An integrated environment can provide a user flexibility for managing data by accepting both structured data and unstructured data as input in a single user interface e.g. a database form . The integrated environment can provide a user flexibility for accessing the data using a single user interface e.g. a database report . The integrated environment allows the user to view a document outside a database when the user is viewing content of the database. Likewise the integrated environment allows the user to view content of the relational database when the user is viewing content of the document. The integrated environment allows the user to navigate to a document from the database content and to navigate to the database content from the document. The integrated environment can provide combined database search results and document search results in response to a user query. The database search results and document search results can be presented in a response page that allows the user to quickly view both content of the relational database and the document.

An integrated repository of structured and unstructured data can be utilized to implement contact list management. Document management capabilities of the integrated repository of structured and unstructured data can be advantageous to human resources and personnel tracking where contact lists are used. For example a resume can be associated with a candidate or a personnel record. Document search from within a database can be used to identify candidates with particular skill sets. Performance reviews and other employee related paperwork can be stored in association with employee records.

Document management capabilities can be advantageously implemented for customer service or sales leads. A personal selling environment can be created in which letters and other correspondence with each customer can be tracked. Requests for proposals RFPs and responses can be stored. Document search can be used to cross reference similar requests and previous proposals.

Document management capabilities can be useful in maintaining group club or team membership lists. Membership applications can be stored in association with data records. Biographical entries on members can be used in publications. Document search can be used to locate and associate meeting notes and minutes to group members.

An integrated repository of structured and unstructured data can be utilized to manage events. A relational database can store structured data including details of each event e.g. date time and venue . Event planning often requires numerous documents e.g. agendas or event schedules to be associated with an event. An agenda or event schedule can be associated to each event record. Document search can be used to identify past events with a specific speaker or host. Permits and contracts associated with the event can be stored. Document search can be used to identify events based on a schedule. The identified events can be linked to a current event.

An integrated repository of structured and unstructured data can be utilized to manage assets. Structured data can be used to track common details of assets. Unstructured data can be used to store original invoices with each item of the assets. A same invoice can be associated with multiple asset items as needed. Insurance policies or liability waivers can be associated with each asset item. A history of warranty and service requests can be associated with the asset item.

An integrated repository of structured and unstructured data can be utilized to manage product lists. A document management tool can access and manage structured data describing a product. In addition the document management tool can associate unstructured data e.g. product data sheets with each product. The unstructured data can ensure that the most current product information is available to a user managing the product. The user s search on a product detail that is described in a document can return relevant results even when the detail is not tracked in a database field. A search on a concept that is linked to a specific product can be responded with the product if the concept is in a design document of the product. The document management tool can store product documentation to provide distribution and indexing of content related to the product. The document management tool can archive product introductions and marketing presentations including for example associating related products to a relevant slide deck ensuring product slides are updated in response to updating a single document record and ensuring quick access to sales information when a customer asks about a product.

An integrated repository of structured and unstructured data can be utilized to assist creative project tracking. Database records can be used to track each project in a creative professional environment like advertising or graphic design. Project requirements documents can be associated with each project. Design files can be stored in association with project details for sharing with a team. A proof or thumbnail image can be stored in a catalog. Document association functions can be used to store full resolution files for download. Search capability features can be provided to search past projects for similar requirements to facilitate re use or avoid duplication. Story boards for advertising can be searched to check uniqueness. Ad contracts can be searched for contacts with different publications or sources.

An integrated repository of structured and unstructured data can be utilized in education and non profit industries where entities often rely on third party organizations and governmental groups for funding. Oftentimes multiple grants or allocations can provide resources for a group. Some high level fields related to grants can be tracked by structured data but some data are document related. The techniques described in this specification can be utilized to associate grant applications and reports with a particular funding source and search past application data for key terms to ensure consistency in reporting. A single repository of all documents can prevent information loss in high turnover organizations.

An integrated repository of structured and unstructured data can be utilized for workgroup document tracking. Workgroups often share files among group members. The files can be shared using a document catalog described below . Storing files using a document catalog can provide the following advantages a shared repository allows multiple users to have access to the same version of a file an archive allows a user to search for previous reports or presentations to avoid duplicating work of others critical organization documents can be backed up off site and document status or other custom attributes can be tracked.

The details of one or more implementations of an integrated repository of structured and unstructured data are set forth in the accompanying drawings and the description below. Other features aspects and advantages of integrated repository of structured and unstructured data will become apparent from the description the drawings and the claims.

Application server can include a system that implements methods that allow structured data and unstructured data to be stored in the integrated repository and methods that allow access and manipulation of data in the integrated repository .

Application server can include web server data abstraction layer and data manager . Webserver can include a subsystem that includes a web server computer and a web serving application program. The web serving application program can include a hypertext transfer protocol HTTP server program e.g. Apache HTTP server . Webserver can be configured to receive data access requests and data uploads from client which can be connected to application server through communications network . Client can include a client computer a web browser that executes on a client computer or both.

Webserver can receive document sent from client in an upload operation. Document can include unstructured data to be stored in the integrated repository . The unstructured data can include any data e.g. text data binary data multimedia data in any format e.g. in American standard code for information interchange ASCII format or any audio graphic or video file format that is not defined by a schema of database subsystem . Document can be uploaded by an HTTP request e.g. HTTP Post from client . Other known communication protocols are also possible.

Upon receiving document webserver can transfer document to data abstraction layer for further processing. Data abstraction layer can include one or more application programs that are configured to cause one or more processors to perform operations of integrating structured data and unstructured data. Some of the operations can include requesting data manager to perform document analysis on document . The document analysis can include identifying various attributes of document and generating metadata of the document . The metadata can be stored in metadata database of database subsystem .

Data abstraction layer can perform operations of sending document to document repository . Document repository can include document server . Document server can include webserver e.g. a Lighttpd webserver that is optimized for high volume and speed critical document transfer operations. Webserver can be associated with file system reference e.g. a web root directory . File system reference can refer to document storage subsystem that is configured to store one or more documents . Document storage subsystem can include for example a local storage system or one or more devices on a storage area network SAN .

Data manager can manage data stored in database subsystem . The data stored in database subsystem can be structured data. Structured data can include data items whose relationship to one another and whose structures are defined in a database schema of database subsystem . Database subsystem can include metadata database and client data database . Metadata database can store attributes e.g. file type and file size and other metadata of document . Client data database can store structured data from client or to be presented to client together with document in an integrated environment.

Upon storing document in document repository and attributes and other metadata of document in database subsystem application server can send a response to client . The response can include a response code and one or more default attributes of document e.g. type or size . Once client receives the response client can perform at least one of the following options 1 send another request e.g. HTTP Post to upload another document or 2 send a confirmation to application server . If application server receives the confirmation data manager of application server can update database subsystem by providing various attributes of document for storage e.g. by committing the metadata of document .

Metadata database can serve as a link between documents stored in document repository and structured data stored in client data database . A search or select request from client can be processed by data manager . If content of document satisfies search or select criteria specified in the request the structured and unstructured data can be presented to client in response. The structured and unstructured data can be presented to client to be displayed in a user interface of client . In addition the structured and unstructured data can be provided to an application program through an API. In some implementations the structured and unstructured data can be provided as a web service.

Data manager of application server can include event logger . Event logger can update various tables in metadata database . One of the tables being updated can be event table . Event table can be utilized to record various events including insertion of structured data and unstructured data. An insertion event can occur when for example a user creates a new data record associates a document with the new data record and inserts the new record into a database. When the insertion event occurs data can be updated in event table and in collection table and document data structure . Collection table and document data structure can be tables for integrating structured data and the unstructured data. Collection table and document data structure can be tables hosted in client data database .

A part of the insertion event can be an insertion of a collection. The collection can be a structured set of one or more data records in client data database . Within the set the data records can be organized in specified order e.g. sort by last name . The set can be associated with a context e.g. a purpose or an invitation to an event . The set can be exported. The insertion of the structured data can include creating the collection. The insertion of the structured data can include inserting the collection a record into the collection or inserting a collection based on a user specified criterion e.g. a collection of employees working in a same city . Data manager can insert the collection into collection table .

When the insertion occurs event logger can insert a first row into event table . The first row in the event table can include one or more data items according to a schema defining various data fields of event table . The data fields can include a tenant identifier data field. The tenant identifier data field can correspond to a value that can identify a tenant which can be a workgroup including one or more users. The data fields can include a collection identifier data field a row identifier data field an action data field a state data field an event type data field and an event data data field. The event data data field can store a file name. The file name in the event table can be different from a row identifier. Further details of event table will be described below in reference to . The first row can have an event type of collection corresponding to the insertion of the collection.

Another part of the insertion can include inserting information of the document in one or more database tables. Data manager can insert a row of data into document data structure . Document data structure will be described in further detail below in reference to . A second row can be inserted into event table . When application server receives unstructured data event logger can insert a second row into event table . The second row can specify an event type indicating that the data received is unstructured e.g. a type file . The second row can include an identifier of the unstructured data e.g. a file name in an event data data field.

Upon detecting an insertion of structured data or reception of unstructured data indexing agent can create one or more indices for the inserted collection and the unstructured data. Indexing agent can include collection event subscriber that listens to insertion events of collections. Collection event subscriber can detect the event inserting a collection identify a collection identifier from the first row of event table and use the collection identifier to identify the collection from collection table .

Indexing agent can include file event subscriber that listens to events of receiving unstructured data e.g. file upload events . File event subscriber can detect the event of document uploads and identify a document received. Indexing agent can create an index of the uploaded document or invoke another process e.g. an external text indexing process to create an index of the unstructured data. Indexing agent can identify a row in document data structure using an identifier in event table and fill a content data field and a metadata data field of document data structure . The content data field can store at least a portion of the unstructured data. The portion can include for example a specified number e.g. 512 of characters from the beginning of the unstructured data.

Indexing data can be modified when unstructured data are deleted or modified. During deletion of unstructured data e.g. deletion of a document data manager can delete records related to the unstructured data from both collection table and document data structure . Event logger can log two events deleting a record from collection table and deleting a record from document data structure in event table . The event type values of the two events can be collection and file respectively. The action values of the two events can be row deletion and file deletion respectively. Collection event subscriber can pick up the event of the row deletion action. File event subscriber can pick up the event of the file deletion action and drop the deleted document from indexed documents or inform an index engine to drop the document.

Unstructured data can be updated. Updating unstructured data can include uploading a new document to replace an existing document or modifying document data structure . If a new document is uploaded data manager can update an existing record in document data structure . Event logger can log an event into event table . The event can have a type file and action file update. File event subscriber can detect the file update indexing event for document data structure . Indexing agent can extract content and metadata from the index file created by indexing agent or by an external indexing process and insert the extracted content and metadata into document data structure . The replaced document can remain untouched in a document repository until a cleanup daemon utility program deletes the replaced document.

If document data structure is updated e.g. when a user modifies a customized document table column description data manager can update an existing record in collection table . Event logger can log an event in event table having a type collection and an action update. Collection event subscriber can detect the update collection event from collection table .

Document table can include a row identifier data field a file identifier data field for storing a foreign key to file table and various descriptive data fields for storing various information of the file e.g. a created at data field created by data field and a version data field .

File table can include a tenant specific data table that contains information of all uploaded unstructured data. File table can include a row identifier data field a file identifier field e.g. a file name field for storing a file name of the unstructured data as provided by a user an internal file identifier field e.g. an internal file name field for storing an internal file name of the unstructured data as automatically generated a size field for storing a size of the unstructured data a type field for storing a type of the unstructured data a content data field and a metadata field whose content will be described below and a description data field for storing description of the unstructured data.

The content data field of file table can store a portion of the content of the unstructured data. The metadata data field of file table can include metadata of the unstructured data. The metadata can be extracted from the unstructured data or generated automatically or manually based on the unstructured data. The metadata can be treated as part of the unstructured data. The content data field and metadata data field can both be indexed such that they are searchable using the database search e.g. a select statement . Table 1 illustrates an example structure of file table .

Some of the data fields can be immediately available once a document upload process is completed. Other data fields can be available when an indexer finishes the indexing process. The following data fields can be immediately available after an upload.

The s result data field can be a reserved read only and non sortable data field to hold a search result temporarily. When a user performs a search a data manager e.g. data manager of can fill this data field with all search hit context. The search hit can be surrounded by one or more words. The search hit can be emphasized e.g. using highlight bold font or underline . For example when a user searches for rain the search result can be . . . today is raining but tomorrow . . . . The data manager can return the search result in s result data field to a client. The s result data field can be non storable to avoid users from a same tenant interfering with each other s search.

Data manager service package can import event logger package and event package . Data manager service package can include implementations of functions of data manager as described above with respect to . Event logger package can include implementations of functions of event logger as described above with respect to . Event package provides various event handling functions. An event data object created based on specifications from event package can be a data object that can represent an event that can be processed offline. An event data object can be persisted in an event table e.g. event table of . The event table can have data fields described below in Table 2.

Index package can include various functions of collection event subscription . The collection events can include events of dropping a collection rebuilding a collection row insertion of a collection and row deletion of a collection. Index package can include various functions of file event subscription . Each indexing agent can have a file event subscriber to serve the FILE type event. Event manager package can import index package .

Packages deployed on application server subsystem can include event manager package data manager package index agent library shared component library and transaction library . Shared component library can include common components shared between document indexing system and other systems. Transaction library can include implementations of data access transaction management authentication messaging and other functions. Example components of transaction library can include components of a Spring Framework.

Packages deployed on search subsystem can include search package . Search package can include commercially available search engines. Packages deployed on database subsystem can include connection pool library database interface library and relational database . Example components of connection pool library can include c3p0 library. Example components of database interface library can include MySQL Java Database Connectivity JDBC libraries.

Upload manager utility can include a utility library that provides functions for identifying a type of the unstructured data e.g. a file type and generating a thumbnail of the unstructured data. Thumbnail generation will be described in further detail below. Data manager service can include an application layer servlet for parsing multiple requests from various clients.

Process can parse the upload request from the user and send persist message to collection service . Persist message can include a request to persist e.g. store on as a file and or in a database the unstructured data to be uploaded. In response to persist message collection service can invoke process for persisting the unstructured data. Process can send process file message to file processing service . In response file processing service can invoke process for processing the unstructured data. Process can identify type of the unstructured data and generate a thumbnail of the unstructured data.

Upon completion of processing the unstructured data process can send an updated message to process indicating file processing has completed. Process can perform database operations for example by executing DML commands on the database and commit any changes made by the commands to disk. Upon execution of the DML commands and the commit process can send message back to process . In response to message process sends file object to process .

The processor can receive content and content identifier. The content can include unstructured data uploaded in a data stream. The content identifier can include a file name. The processor can determine a content type of the unstructured data. Determining the content type can include identifying an extension name from the file name e.g. .pdf and performing a search in a content type mapping table. The content type mapping table can specify for example that a .pdf extension name corresponds to a portable document format PDF type. In some implementations the content type mapping table can have the following format . For unstructured data without extension or if the extension is not listed in the content type mapping table the unstructured data can be marked as having a default type e.g. . The type description can be localized.

In stage the processor can determine what actions to perform based on the content type. If no match is found the processor can mark the content as unknown type. If a match is found and the match indicates that the content is of PDF or image type the processor can verify a multipurpose Internet mail extension MIME type of the content. In stage the processor can verify that the MIME type is consistent with the content type as determined in stage . If the MIME type is consistent with the content type as determined in stage the processor can generate a thumbnail image of the unstructured data. Generating the thumbnail image can be performed using various existing tools e.g. ImageMagic utilities . If the MIME type is inconsistent the processor can skip the thumbnail generation. The thumbnail image can be an image having a specified size e.g. 200 200 pixels and a specified format e.g. a portable network graphics PNG format . Different content types can correspond to different thumbnail images. Table 3 lists file types and corresponding extensions and thumbnails images.

If the content type is text or ASCII the processor can verify the MIME type of the content. In stage the processor can verify that the MIME type is consistent with the content type as determined in stage . If the MIME type is consistent with the content type as determined in stage the processor can convert the unstructured data into PDF format and generate the thumbnail from the converted PDF file.

Data abstraction layer can automatically provide document catalog to a user upon the user s signing up for an account. Document catalog can be associated with schema . Schema can define a set of fields that can track most common attributes of documents for example file name file type file size creation date modification date and metadata including author title subject and copyright information. Schema can be extensible to allow the user to add a customized field to track additional information specific to the user s problem domain. For example schema can allow the user to add a field to track a status of a document or categorize documents by priority.

Document catalog can provide various search functions on documents. An entry of a document can be inserted into document catalog when the document is uploaded into the integrated repository. Data abstraction layer can supervise generation of an index based on full text of the document being uploaded. The document can have any type. For example the document can have a type e.g. audio type or executable type such that the document is not suitable for display.

Document catalog can include document catalog form that is configured to provide for display a portion of the unstructured data e.g. a portion of text . The portion of the content can include a first few paragraphs of text content when the unstructured data are being browsed or a matching portion of the unstructured data when the unstructured data are being searched.

Data abstraction layer can include document association pane . Document association pane can provide a way to allow a user to manage unstructured data in association with structured data without requiring the user to modify a schema. Document association pane can associate one or more documents with a record in document catalog . Document association pane can provide for display a list of documents currently associated with a record and allow management of the list.

Data abstraction layer can include stand alone document management module . Stand alone document management module can provide functions for sharing and storing documents among members of a work group. The functions can include functions for browsing a set of shared documents.

Data abstraction layer can include document and record management module . Document and record management module can provide functions for storing unstructured data in association with a data record when the unstructured data are uploaded or storing unstructured data in association with a data record when the unstructured data are already associated with another data record. A same document can be associated with multiple data records. Document and record management module can provide functions to view details of an uploaded document when only some of the attributes of the document can be displayed. The details can be associated to a record.

Data abstraction layer can include search interface . Search interface can provide functions of basic search. The basic search can query both attributes of unstructured data and content of the unstructured data. For example a basic search can include a search using search terms meeting agenda. Search interface can provide functions of advanced search. Advanced search can include criteria based search on unstructured data. For example advanced search functions can allow a search of PDF documents created between 1 1 2009 and 1 1 2010 containing term meeting agenda. 

Data abstraction layer can include document updater . Document updater can receive a newer version of a document already associated with a data record replace the older version and configure the data record to be associated to the newer version of the document. Document updater can update metadata extracted from the older version of the document using metadata extracted from the newer version of the document.

Data abstraction layer can include database accessor . Database accessor can provide functions of accessing a database record when a document associated with the data record is being browsed or provided as a search result.

Application server can include search module for searching both the structured data and the unstructured data. In some implementations application server can include combined index that includes information on both the structured data and the unstructured data. The information on the structured data can include document index and database index . Document index can be a text based index created by an external process. Database index can be a database index on the structured data. Combined index can be stored in a directory structure illustrated in below.

In some implementations search module can search document index and database index separately and combine the search result. Database index can be stored in relational database . Relational database can include metadata database or client data database or both. Database index can include an index on the structured data including user data stored in client data database and an index on metadata and a portion of content of the unstructured data stored in metadata database .

Paging manager can invoke paging process for obtaining query results and processing the query results. To obtain the query results paging process can delegate the search request in search request message to row search data access object DAO using get IDs message . Row search DAO can be a collection row search DAO for invoking various data access methods including search methods. Upon receiving get IDs message row search DAO can invoke DAO search process . DAO search process can send query rows message to search server . Query rows message can have a parameter that includes a query string of the search query. Search server can be a local or a remote search server.

Upon receiving query rows message search server can invoke search service . Search service can search indices . Indices can include collection index or document index or both as described in reference to . The search on collection index and document index if performed simultaneously can be performed in parallel. Search service can return row identifier row ID list to DAO search process which in turn can return the row ID list to paging process . Row ID lists and each can be a list containing tuples of data in the following exemplary format . The hit position can represent a first hit position in a file represented by the file id. The hit position can be a position in the file where a term satisfies the search query.

Paging process can chunk search results into pages according to the specified maximum number of rows to be returned. Paging process can store row ID list to a cache. Paging process can identify a return page based on the context in search request message which can specify which portion of the result can be displayed by client . Paging process can load page rows from database to be returned to server side search process and generate a list of collection rows. Paging process can determine that the result includes a hit on a file. Paging process can send get context request to search server .

Upon receiving get context request search server can invoke a second search service which can retrieve search hit context from collection index . The second search service can return search hit context to paging process . Paging process can merge search hit context into an s result column of the collection rows. Merged collection rows can be returned to server side search process and to client side search process .

User interface can include record list section that can display a list of records of the selected data set. The list of records can be selected based on one or more selection criteria e.g. a selection criterion specified in a structured query language SQL query . Record list section can receive user input to select a particular data record. User interface can include main display pane that can display details of the selected data record.

User interface can include search pane . Search pane can be displayed in response to a user input. Search pane can include search box which can accept a user input of a search term e.g. john . In various implementations search pane can include multiple input fields that can accept various search specifications including search category search time span etc. .

The system can integrate the structured data and the unstructured data. Integrating the structured data and the unstructured data can include generating metadata from the unstructured data and based on the generated metadata configuring an abstraction layer to perform a database operation on both the structured data and the unstructured data. Generating the metadata from the unstructured data can include extracting the metadata from the document and incorporating user created document attributes into the extracted metadata. The user created document attributes can include for example a note or a document description. Extracting the metadata can include determining a file type of the document. Configuring the abstraction layer can include storing metadata of the document and a reference of the document into one or more document description data fields of the database. Storing the reference of the document can include storing in one of the document description data fields a location of the document in the document repository.

In some implementations of stage configuring the abstraction layer can include creating a document catalog defined using a predefined and configurable schema. The document catalog can be associated with a document catalog form that is configured to provide for display a portion of content of the document. In some implementations performing the database operation can include providing access to other database data through the document. In some implementations performing the database operation can include performing a database search.

The system can provide an integrated view of the structured data and the unstructured data for display. The integrated view can include a user interface for allowing the user to control the database operation of the abstraction layer. Providing the integrated view includes providing for display in the user interface the metadata of the document at least a portion of content of the document and other data in the database. The user interface can be a graphical user interface configured to display a thumbnail image of the portion of the content of the document.

In some implementations process can further include receiving a request to replace the document using a new document. The system can update at least a portion of the metadata using metadata retrieved from the new document.

Based on the query term the system can create one or more first queries targeting structured data and one or more second queries targeting unstructured data. The structured data can include data in a relational database. The unstructured data can include one or more documents. Creating the one or more first queries can include creating a database query for searching the relational database using the query term. Creating the one or more second queries can include creating a text search query for searching the one or more documents and a metadata search query for searching metadata relating the one or more documents to the data in the relational database. The metadata can include for example data stored in the document table and file table as described in reference to . The metadata can include attributes of the one or more documents the attributes include at least one of a document name a document type a document creation date a document update date or an author.

The system can receive a first result in response to the one or more first queries and a second result in response to the one or more second queries. The first result can include rows of data from the relational database. The second result can include one or more documents as well as rows of data that are related to the one or more documents. The second result can be associated with an identifier identifying structured data that are different from the first result. The identifier can include a row identifier identifying a row of data in the relational database the row of data being related to the second result according to the metadata.

The system can expand the first result using the identified structured data. Expanding the first result can include creating a search hit context of the second result. The search hit context can identify a portion of unstructured data in the second result that matches the query term. Expanding the first result can include inserting the search hit context into the first result e.g. in the s result field as described above .

The system can provide the expanded first result and the second result as a response to the search request. Providing the expanded first result and the second result as a response to the search request can include providing the expanded first result and the second result for display in an integrated display environment. The integrated display environment can include a web page displayed in a web browser.

In some implementations process can further include receiving an upload of the unstructured data. The system can store the unstructured data separate from a database storing the structured data e.g. in a document repository. The system can extract metadata of the unstructured data and generate a graphical representation e.g. a thumbnail image of the unstructured data. The system can insert the metadata and a document reference that refers to the unstructured data into a table of the database. The document reference can include a file name and a path relative to a root directory of the document repository.

In some implementations process can further include determining a row identifier in the structured data. The row identifier can identify a row of data in a table of a database storing the structured data. The row of data can include a reference to the unstructured data. The system can associate an index of the unstructured data with a database index using the row identifier.

The system can create a first index from the unstructured data. Creating the first index can include creating the first index based on content of the unstructured data.

The system can create a combined index using the first index including creating a link from the unstructured data to the structured data. Creating the combined index can include determining a row identifier in the structured data. The row identifier can identify a row of data in a table of the database. The row of data can include the document reference. The system can associate the first index with the database index using the row identifier.

The system can provide a search result in response to a search request. The search result can be generated based on a match between the search request and the combined index. The search result can be paginated and displayed in an integrated display environment for displaying both database data and content of an electronic document.

The term computer readable medium refers to any medium that participates in providing instructions to processor for execution including without limitation non volatile media e.g. optical or magnetic disks volatile media e.g. memory and transmission media. Transmission media includes without limitation coaxial cables copper wire and fiber optics.

Computer readable medium can further include operating system e.g. Mac OS server Windows NT server network communication module database interface application server relational database and document repository . Database interface can provide one or more user interfaces interfaces between a server computer and a client computer and interfaces between a relational database and other application program. Application server can be utilized provide various functions as described above. Relational database can include various tables e.g. document tables and file tables that link structured data to unstructured data. Document repository logic for storing unstructured data and indexing functions for creating index on the unstructured data.

Operating system can be multi user multiprocessing multitasking multithreading real time etc. Operating system performs basic tasks including but not limited to recognizing input from and providing output to devices and keeping track and managing files and directories on computer readable mediums e.g. memory or a storage device controlling peripheral devices and managing traffic on the one or more communication channels . Network communications module includes various components for establishing and maintaining network connections e.g. software for implementing communication protocols such as TCP IP HTTP etc. . Database interface can include interface to various databases including relational databases.

Architecture can be included in any device capable of hosting a database application program. Architecture can be implemented in a parallel processing or peer to peer infrastructure or on a single device with one or more processors. Software can include multiple software components or can be a single body of code.

The described features can be implemented advantageously in one or more computer program products that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language e.g. Objective C Java including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors or cores of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations of the invention have been described. Nevertheless it will be understood that various modifications can be made without departing from the spirit and scope of the invention. For example the terms first row second row first event and second event are used to refer to different rows or events. The occurrences of the events or the storage of the rows can be in any order. Accordingly other implementations are within the scope of the following claims.

