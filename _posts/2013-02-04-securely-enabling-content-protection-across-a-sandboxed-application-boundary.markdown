---

title: Securely enabling content protection across a sandboxed application boundary
abstract: A sandboxed application issues a request to enable content protection for audio and video content. The request is sent via an application programming interface to an unsandboxed application. The request is received from the unsandboxed application by an output device. After receiving the request, content protection is enabled and the output device employs a certificate to create a signed message indicating the content protection is enabled. The sandboxed application verifies the request has been fulfilled based on the signed message, and provides protected audio and video content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152798&OS=09152798&RS=09152798
owner: Google Inc.
number: 09152798
owner_city: Mountain View
owner_country: US
publication_date: 20130204
---
Digital rights management DRM schemes attempt to prevent any use of digital content that is not desired or intended by the content provider. For example High bandwidth Digital Content Protection HDCP is meant to stop HDCP encrypted content from being played on devices that do not support HDCP or on devices that have been modified to copy HDCP content. Before sending data a transmitting device checks that the receiver is authorized to receive it. If so the transmitter encrypts the data to prevent eavesdropping as it flows to the receiver.

DRM schemes may however be intrusive and touch many parts of a system. For example many DRM schemes run with full e.g. admin and root access to a user s system which can result in reduced security and privacy.

With sandboxed applications such as web browsers a limited i.e. sandboxed DRM code may want to use content protection such as HDCP or a secure media path for example to prevent copying of digital audio and video content as it travels across connections. Sandboxes however generally do not provide access to HDCP or secure media paths and even if they did the sandboxed DRM code would not be able to tell whether the other side of the sandbox is doing what is requested. Nor would it be able to determine if the environment outside the sandbox is trusted. Thus an attacker could easily drop such requests lie about the state or intercept calls or data.

Accordingly there exists a need for systems and methods to address the shortfalls of present technology and to provide other new and innovative features.

According to one general aspect a method includes issuing by a sandboxed application a request to enable content protection for audio and video content sending the request via an application programming interface to an unsandboxed application receiving from the unsandboxed application the request by an output device after receiving the request enabling content protection employing by the output device a certificate to create a signed message indicating the content protection is enabled verifying by the sandboxed application that the request has been fulfilled based on the signed message providing by the sandboxed application protected audio and video content and outputting the protected audio and video content.

According to another general aspect a system includes a memory configured to store executable code a processor operably coupled to the memory and configured to execute the executable code to operate a sandboxed application configured to issue a request to access a secure media path for content protection for audio and video content by sending the request via an application programming interface to an unsandboxed application and verify that the request has been fulfilled. The secure media path is configured to receive the request and after receiving the request employ a certificate and a public key to create a signed message indicating the secure media path is authentic.

In some implementations after the sandboxed application verifies that the request has been fulfilled the sandboxed application utilizes the public key to encrypt a content key before passing it outside the sandboxed application to the secure media path.

According to another general aspect a method includes issuing by a sandboxed application a request to enable high bandwidth digital content protection for audio and video content wherein the sandboxed application lacks direct access to an output device sending the request via an application programming interface to an unsandboxed application that has direct access to the output device verifying that the request has been fulfilled and after verifying that the request has been fulfilled provided protected audio and video content to the output device.

One or more of the implementations of the subject matter described herein can be implemented so as to realize one or more of the following advantages enable sandboxed applications to use content protection such as HDCP check the status of content protection or use a secure media path across a sandboxed application boundary.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

Systems and methods described here securely enable content protection such as HDCP or a secure media path across a sandboxed application boundary.

As shown in a system may include a sandboxed application an unsandboxed application a device driver and a device . A sandboxed application may be any application that lacks direct access to driver or device such as a sandboxed web browser application tab. Unsandboxed application may represent any application with direct access to driver or device . In some implementations unsandboxed application may represent for example a web browser window. Sandboxed application and unsandboxed application may communicate with each other by passing messages for example as discussed in more detail below with respect to . Sandboxed application may in some implementations control the lifecycle of unsandboxed application . For example a sandboxed web browser tab may be able to terminate a browser window process at any time for example if an error occurs.

Driver may represent any device driver that can communicate directly with unsandboxed application and with device . In some implementations driver may provide communications e.g. messages data requests etc. from unsandboxed application to device and from device to unsandboxed application . Device may represent for example an output device video card sound card Trusted Platform Module TPM device secure cryptoprocessor or other hardware.

Application programming interface s API s may enable content protection such as HDCP and may allow sandboxed application to check the status of content protection or use a secure media path. Certificates or keys may be utilized in the driver or hardware device of a system to sign challenges from a sandboxed application to otherwise attest that the operations requested by the API call s have been performed or to verify that the result of a query is genuine.

As long as a sandboxed application can trust that the certificates or keys and whatever contains them have not been compromised the sandboxed DRM does not need to verify an environment outside the sandbox. The entity holding the certificates or keys e.g. device may also verify certain states or environment i.e. to ensure the content protection has not been tampered with . The combination of sandboxing the API and the attestation across the API and sandbox boundary provide increased security and privacy while allowing for DRM code to use HDCP.

In one implementation a computing device s hardware or driver has a key e.g. a private key or certificate . The sandboxed DRM issues a challenge or request i.e. with a nonce value across the API which is received by an unsandboxed application . The unsandboxed application passes the request to the driver and or device which enables content protection e.g. HDMI or HDCP if it is not already enabled and uses its private key or certificate to sign a message indicating that content protection is or has been enabled.

In some implementations the sandboxed application may periodically check that content protection is enabled. The sandboxed application may automatically perform such a periodic check by enabling content protection as described above and by sending another request via an API call s to unsandboxed application to check that the content protection is enabled for example.

Decrypter may receive a key from sandboxed DRM to decrypt data for output e.g. audio and or video . Decrypter may then pass the decrypted data to media player . Media player may in turn send the decrypted data which may be for example protected audio content to unsandboxed application which in turn may send the output to driver . Driver sends the output to device which may output the protected content e.g. audio and or video .

In some implementations the device or driver may provide a secure duration of time since the content protection was enabled or a timestamp of when the content protection was enabled. The secure duration of time or timestamp may provide the system with an advantage of for example preventing an attack where the unsandboxed code only enables the content protection when it is asked to verify that it is enabled then disables it.

The systems and techniques described here may be used with the hardware platform or operating system OS of a computing device to determine the output devices that are connected and to ensure they are not in use or have content protection enabled. For example the OS may attest to the devices present and may provide a signature certificate challenge or the like that can be used to verify it is the one the sandboxed DRM is communicating with. Requests may then be issued to enable output protection on all output devices or some output devices such as ones that have been designated as important or to verify that no output is connected. In some implementations the sandboxed DRM may periodically query the devices or may securely disable them for some period of time e.g. a predetermined period of time .

In another embodiment the hardware driver platform or OS may issue callbacks when an output device is connected or output protection is disabled and may request a secure response from the code that made the original request. This may be accomplished by providing a public key from the sandboxed DRM at the time it initiates this process. In such an example the platform may then enable new connections or the disabling of output protection once it received a response signed by the public key matching the public one.

On integrated devices a content protection state may be tied into a TPM such that the TPM s certificates can be used to attest to the state of the content protection. On desktops discrete output devices may exist that may implement the output protection. On integrated devices the outputs may all be integrated such that the TPM can verify the output protection.

Secure media paths may keep a data stream e.g. audio or video encrypted until it is passed on to an authenticated driver e.g. an authenticated sound card or authenticated video card . Secure media paths in combination with the systems and methods described here may use a similar technique as described above with respect to . Instead of verifying the output protection messages are being used and provided by a trusted entity however the secure media path may attest to its authenticity and trustworthiness so for example the sandboxed code will trust its public key. As an example the public key may be signed by a certificate that can be verified using public key infrastructure PKI .

In another embodiment a whitelisted set of keys may be known or provided to the sandboxed DRM . In yet another embodiment the sandboxed DRM may send the public key to a server not shown to be verified. In other embodiments all of the verification such as signature nonce etc. may be done on a remote server.

In yet another embodiment once the public key is trusted the sandboxed DRM may use the public key to encrypt a content key for example from a DRM specific license before passing it outside the sandboxed application to be provided to the secure media path so that it can use it to decrypt media stream s .

If an environment is not trusted an attacker could patch or otherwise tamper with the sandboxed DRM or other code in the sandboxed application . Mitigations to such tampering i.e. obfuscation may be used along with the systems described here.

Still further alternative or additional implementations are possible. For example trusted code outside the plugin may be used by embedding a key or certificate that can be used to attest to the sandboxed DRM . Another implementation may provide secure proof that a content protection module is present or even that an instance of a software controller has been created.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB BLUETOOTH ETHERNET wireless ETHERNET may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in . For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD Thin Film Transistor Liquid Crystal Display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provided in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provided as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor which may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a BLUETOOTH Wi Fi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in . For example it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium or computer readable medium refer to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations have been described. Nevertheless various modifications may be made without departing from the spirit and scope of the invention. In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

