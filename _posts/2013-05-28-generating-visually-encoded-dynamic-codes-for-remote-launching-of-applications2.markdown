---

title: Generating visually encoded dynamic codes for remote launching of applications
abstract: Users design and develop a current version of an application to be rendered on different devices. The application is configured and deployed with its current version on a platform server. The application can run on different servers provided from different platforms. A desktop browser displays the current version of the application by loading a Uniform Resource Locator (URL). The current version of the application can be tested both on a desktop browser and on a browser, installed on a remote device. Additionally, a visually encoded dynamic code is generated that is scanned by a remote device to launch the deployed version of the application. The visually encoded dynamic code encrypts dynamic information for locating the deployed application that is dependent on the platform server used for deployment. After displaying the current version on the remote device, further points for improvement of the design and functionality of the application are defined.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563415&OS=09563415&RS=09563415
owner: SAP SE
number: 09563415
owner_city: Walldorf
owner_country: DE
publication_date: 20130528
---
The fast changing business environment affects product cycles in the software development industry. Requirements and models for delivering software applications are constantly changing. Businesses expand into new geographies and use new customer facing channels. Information is distributed through networks data centers business systems market places etc. Information technology IT solutions support all kind of channels for consumption of data provided through software application. Business users demand easy remote access to enterprise application and data on multiple personal or corporate mobile devices e.g. smart phones tablets etc. More and more mobile devices are used to access information and handle tasks anywhere and anytime.

User s demands in the area of mobility also impose new requirements on software developers and on the development platform they use when designing new applications. When developing an application the developer may also work on a mobile version for that application. The development cycle of generating desktop and mobile versions for a software program includes similar iterations such as design implementation testing maintenance etc. Software testing is an important phase of the software development process that ensures that defects may be recognized. When possible the testing activities may be performed on a similar hardware and software environment to the environment of the potential customers or end users.

Embodiments of techniques for in database provisioning of data are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In the environment properties for the elements included in the GUI of the designed application may be displayed in a Properties section. The Properties section may include general details about the elements specifying whether the element is a button a chart or a plain text field. In addition in the Properties section may include a description of the event associated with the element that is included in the GUI such as Events property of the button . For example the button is connected with an event representing a click on the button for example by an end user that results in displaying a text message Success . The button may be used to run and deploy the developed application in the environment . The deployment may be accomplished on an application server and the deployed application may be accessed through a browser application that may access the location on the server that stores the deployed application. After an application is deployed it may be tested on a desktop machine or a remote device. Based on testing activities a new version of the application may be developed in the design area and then a new deployment will be required. In one embodiment when the application is designed for mobile rendering a mobile device may access the link generated through the deployment step and the application may be tested. Permission is requested to access the location where the application is stored on a mobile device. The environment may include option for external access. When permission is given to external remote devices then in the user interface UI of the environment a label may display the status External Access ON . The location of the deployed application may be defined in form of a Uniform resource locator URL that can be launched through a network connection. In one embodiment the generated URL may be different each time the application is deployed. For example the generated URL may include dynamic parts that distinguish one deployed version of the application from another. A number of versions of an application may be generated through the development phase and therefore a number of deployment operations may be performed when testing each of the versions.

In one embodiment the application may be deployed on a server and may be displayed in a web browser. The server that is used for the deployment may be an embedded application server part of the design environment or an external server part of a development platform. In another embodiment the deployment of the analytical application may further include generation of a visually encoded dynamic code corresponding to the destination where the deployed application is stored and that location may be accessed through a network connection. For example the location may be defined as an URL. In one embodiment the location may be different for each deployment of a version of an application. The URL may include dynamic parts that represent specific characters of the deployment the server used for the deployment the developer s session the name of the application the version etc.

In one embodiment the target of the developed analytical application may be a user that launches the application on a remote device. Therefore the testing operations over the application may be performed on a remote device. The way that the application appears on a remote device may correspond to the display on the web browser . In one embodiment there can be some differences in the display due to different resolution characteristics display size etc. The URL may be encoded in form of a Quick Response QR code such as QR Code . A QR code may be read from the remote device. For example the QR Code may be decoded using a camera and a scanning application on a mobile device e.g. tablet. The mobile device may have the capability to scan the QR Code and also may have access to the network where the deployed analytical application is stored. The mobile device may render the current version of the analytical application and provide the possibility for testing in a real environment.

In one embodiment during the deployment step a visually encoded dynamic code that corresponds to a location where application may be launched is generated. In one embodiment the visually encoded dynamic code may be a QR Code . Application may be deployed on each of the servers the embedded web server the server type A the server type B and the server type C . When the application is deployed the deployed version may be accessed from a desktop browser by connecting to an URL that corresponds to the deployed version. The generated URL may be server and platform specific may be user specific may be specific for the version that is deployed etc. In one embodiment the generated QR Code may be generated from one of the deployment operations and each of the QR codes corresponds to the generated URLs and allows the deployed version of the application to be accessed from a browser application. The QR code may be scanned from a mobile device e.g. tablet mobile phone portative device etc. For example the device may be an IPAD version provided by Apple Inc. In one embodiment the mobile device may have a camera to assist in the scanning operation. The scanning may be accomplished with the use of a scanning application installed on the mobile device. The mobile device may have a UI where after scanning the QR code a mobile browser can be opened and the version of the deployed application may be presented. In one embodiment the mobile device may be authorized to access the URL encrypted in the QR code that is generated during the deployment step. In another embodiment a user is authorized to access the deployed version of the application . The user may be a developer who had used the design tool to design and develop the version of the application . In one embodiment it may be required that the user authenticates with one and the same credentials before the design tool and the mobile device . In another embodiment the user may be a developer that tests the designed version of the deployed application on the mobile device .

At step the application is modified for example in a development environment such as the environment or the design tool . In one embodiment a developer who tests the application may execute a scenario with the application on the remote device to simulate a real customer s scenario. For example the tested application may be the analytical application . Based on the accomplished test the application may be modified in the development environments to address the results of the test. After the application is modified a new deployment may be accomplished at process step . In one embodiment the configuration for the next deployment may modify configuration details such as the platform that is used for the deployment. At step another visually encoded dynamic code corresponding to the redeployed application is generated. The new visually encoded dynamic code corresponds to the modified version and encrypts dynamic information for location the redeployed modified application. In one embodiment the encrypted dynamic information may comprise platform specific details that are dynamically generated for each deployment of an application of the platform.

In one embodiment URL is displayed in a web browser and corresponds to an analysis application such as the Analysis Application which is deployed on a local embedded server such as Embedded Web Server . Part of the URL is for the IP address and port. The port may be configured in a preference tool which may be provided by the design environment used for developing the application. In another embodiment the port may be set to auto which means that a random port is chosen during startup of the design environment. For example such design environment may be environment in . The URL may include the name of the deployed analysis application. Part defines the name by the following syntax APPLICATION DEMO which means that the application name that is configured and launched through this URL has a name DEMO . The URL includes part which presents identification ID for a designer session that is different for each and every start of the analysis application. Having such part in the URL may help in securing the access to the analysis application during its development stages.

A URL may also correspond to an analysis application such as the Analysis Application that is deployed on a business intelligence BI platform server such as the as SAP BusinessObjects Business Intelligence Platform provided by SAP AG. The URL format consists of part that defines the IP address and the port where the deployed analysis application may be located. The BI Platform uses object identifiers such as globally unique IDs GUIDs cluster unique IDs CUIDs for identification of each stored document and is displayed in part . CUID of the analysis application deployed on the BI Platform is provided in part and the analysis application has the CUID AZEvGn7XJ NO .

A URL may also correspond to an analysis application such as the Analysis Application that is deployed on a platform such as SAP NetWeaver platform provided by SAP AG. The URL starts with part which includes the IP address and a port. In one embodiment the URL may point to an SAP NetWeaver Portal which is part of the SAP NetWeaver platform which is defined in part . In part the name of the analysis application that is deployed on the SAP Netweaver platform is provided APPLICATION DEMO .

A URL may also correspond to an analysis application such as the Analysis Application that is deployed on a database platform such as SAP HANA platform provided by SAP AG. The URL has a format that starts with part which includes the location where the deployed analysis application is stored. The URL includes part that displays the name of the application application DEMO . The structure of the URL generated after the deployment of the application may be dependent of the platform used for deploying the application and may also comprise dynamic part that change each time the application is updated a change in the platforms is made or other reason.

In one embodiment the QR code may be scanned from an authorized mobile device by a user . The user may be such as the user that used the development environment to participate in the design cycle for the application and uses the mobile device to test the application in a working environment. The mobile device may have a scanning application installed that may scan the QR code and then load a preview of the application in e mobile browser . The QR code corresponds to an URL generated during deployment that may be used to display the application in a desktop browser and in a mobile browser. In one embodiment the user may restart the development environment and then redeploy the application to make it accessible again. The redeployment will generate a new URL and also a new QR code may be generated to correspond to the redeployed application. For example the QR code includes the change to the URL due to the fact that by restarting the development environment a new developer session is generated. The user that may test the application on the mobile device may communicate with the user that develops the application to further improve the current version of the application. The improvements may be based on operations and transactions performed with the loaded application on the mobile device . Thus through the communication between testers and developers a next version of the application may be generated in the design area . The next version may be deployed again and the generating module may generate another visually encoded dynamic code. The next version may be deployed on a different platform from the platform . That results in different structure of the URL that is generated during deployment and that is later encrypted in the QR code. In another embodiment user may perform both the development and the testing operations related to building an application in the development environment . The testing operations may be such as simulations of the performance in real time environment with real tasks and load. In one embodiment after generating a next version of the application and redeploying the new version the previous version that may be launched through the QR code may no longer be accessed. This may be implemented for security reasons required during the development stage of the application before it becomes publically available with a stable URL for launching. The URLs generated through the iterations of development and testing are dynamic and are related to the specific characteristics of the development and deployment process.

At step interactions with the deployed current version of the application may be received from the mobile device. In one embodiment these interactions may be connected with testing processes of the application in real time environment according to different functional and non functional prerequisites of the customer for the application. In response to the performed interactions at step the current version of the application may be modified to generate and save a new version of the application. At step the new version may be reconfigured and redeployed to run on a platform server which may be different from the platform server used for the configuring and deploying at step . In one embodiment the process may further continue with generating improved versions of the application based on testing the application in mobile environment until the application becomes in such state so it can be released through a stable non dynamic URL. For example the application may be offered in mobile application stores. In one embodiment at process step the new version configured and deployed at step may be defined as the final version of the application that may be provided for productive usage by customers. At process step a stable URL and a corresponding QR code may be generated. Through the stable URL and the QR code the application may be accessed both from desktop and mobile device in productive customers scenarios.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. A computer readable storage medium may be a non transitory computer readable storage medium. Examples of a non transitory computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

