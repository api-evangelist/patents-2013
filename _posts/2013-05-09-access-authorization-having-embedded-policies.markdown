---

title: Access authorization having embedded policies
abstract: A facility for receiving an embedded policy is provided. The facility checks an application program image for the presence of an embedded policy. If an embedded policy is detected, the facility extracts the policy from within the application program image. The facility may then apply the extracted policy to the application program image before the application program image is loaded and/or executed. Moreover, the facility may check the application program image's integrity prior to extracting the embedded policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069941&OS=09069941&RS=09069941
owner: Microsoft Technology Licensing, LLC
number: 09069941
owner_city: Redmond
owner_country: US
publication_date: 20130509
---
This application is a continuation application and claims priority to U.S. patent application Ser. No. 13 273 088 now U.S. Pat. No. 8 453 200 filed Oct. 13 2011 entitled Access Authorization Having Embedded Policies which application is a continuation application and claims priority to U.S. patent application Ser. No. 10 956 667 now U.S. Pat. No. 8 181 219 filed Oct. 1 2004 entitled Access Authorization Having Embedded Policies which applications are incorporated herein by reference in their entirety.

The described technology is directed to computer security and more particularly to controlling access to resources on a computer system.

As dependence on computers and computer networks increases along with the sophistication and the frequency of attacks on computers and computer networks the subject of computer security is becoming ever more prominent in the industry. Current computer security techniques are inadequate in protecting application programs and operating systems from malicious software malware e.g. viruses worms and trojans designed specifically damage or disrupt a computer system and other undesirable activity.

Existing access control security models typically rely on a user s credentials to authorize access to resources on a computer. In these models every process that runs or executes with the same credentials is given the same access rights whether or not the process needs access to all the resources that is available to the user. Also a process that needs access to a resource e.g. to read write etc. specifies the required access at the time the resource is accessed.

For example a user logs on to a personal computer with a user account and expects to be able to access all word processing documents stored on the personal computer and created using a particular word processing program. In order to satisfy this expectation a conventional access control security system grants all programs running in the user s context permission to access to all of the aforementioned word processing documents. This is a grant of an excess level of permission however because few programs running in the user context other than the word processing program actually need to access to any of the word processing documents.

Typically malware infects processes by exploiting code defects. Once malware runs inside of a compromised process it inherits the access rights of the user context in which the process is running and gets access to all resources that are available to the user which might be far greater than what the original process ever needed

Accordingly an integrated approach to access authorization that improves and enhances the security of resources on a computer will have significant utility.

A software facility facility for protecting a computer system from the adverse effects arising from exploits against application and operating system programs on the computer system is described. In some embodiments the facility adds a logic driven access control layer to the operating system. The facility may provide an authorization module that receives authorization queries for various security sensitive resource accesses and returns a decision to allow or deny a resource access based on a policy. A policy is a set of rules and practices that determine how a resource such as by way of example a network a file system an application program etc. is managed and protected.

The authorization module may be queried directly by the various operating system components that service resource access requests issued by user mode programs e.g. application programs executing in a user context. Alternatively the authorization module may be queried by an interception layer sitting on top of such operating system components. The interception layer is code that intercepts the system call functions used by the user mode programs to access the resources and applies wrappers to the intercepted system call functions. The authorization module makes its access control decisions i.e. allow or deny based on an identity of a principal which is either the identity of the application program e.g. application process attempting the resource access the identity of a user or a combination of the identity of the application program and the identity of the user on whose behalf the application program is executing a policy that applies to the principal and the identity of the resource and action that the principal seeks to perform.

In some embodiments the facility enables a policy e.g. access restrictions to be a part of the software comprising the application program. Here it is expected that the operating system or other comparable program or process would or will recognize the presence of the policy embedded in the application program extract the policy and apply the policy. This may be accomplished for example by placing a special flag in the code to inform the operating system of the presence of the embedded policy by a key set in the registry by the application s installer by a new field in the portable executable header field of the application program and by other methods of delimiting the embedded policy within the application code and signifying the presence of the embedded policy within the application code. The embedded policy is extracted from the software and enforced before the code comprising the application starts executing

The embedded policy may be in the form of explicit rules or access restrictions declared in a human readable format such as XML. Alternatively the embedded policy may be coded e.g. using a programming language and executed by an operating system access control service. By way of example a policy may be embedded in the code and delivered with the application program when 1 dynamic policies are not required and the application program will not at any point request the facility to invoke a new policy or 2 to retrofit a legacy application program. Thus if the code has defects exploited by malicious code the attack damage can be greatly reduced and contained.

In some embodiments the application program code may be signed to protect both the application program code and the embedded policy. The application loader e.g. longhorn loader checks the integrity of the signed images before the code is loaded and loads the application program images only if the signature matches the contents.

In some embodiments a policy for an application program may be delivered by a program other than the application program to which the policy applies. For example a policy for an application program may be delivered by an installer program for the application program. The installer program can deliver the policy for the application program to a central policy repository where the policy is associated with the application program. The policy in the repository may then be applied before the corresponding application program is loaded and or executed. In this manner a policy for an existing or legacy application program can be delivered and applied without altering the legacy application program.

The various embodiments of the facility and its advantages are best understood by referring to of the drawings. The elements of the drawings are not necessarily to scale emphasis instead being placed upon clearly illustrating the principles of the invention. Throughout the drawings like numerals are used for like and corresponding parts of the various drawings.

The facility may be described in the general context of computer readable instructions such as program modules executed by computer systems or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Memory and persistent storage device are computer readable media that may contain instructions that implement the facility. It will be appreciated that memory and persistent storage may have various other contents in addition to the instructions that implement the facility.

It will be appreciated that computer systems may include one or more display devices for displaying program output such as video monitors or LCD panels and one or more input devices for receiving user input such as keyboards microphones or pointing devices such as a mouse. While computer systems configured as described above are typically used to support the operation of the facility it will be appreciated that the facility may be implemented using devices of various types and configurations and having various components.

The facility also includes policies from which authorization module makes its access control decisions. Policies are the rules that determine whether to allow or deny a request for authorization to access a resource. In some embodiments policies get compiled into runtime e.g. binary rules that get enforced by operating system and in particular authorization module . In some embodiments policies are implemented as part of a centralized policy store which allows policies including the rules in the policies to be revoked centrally and set centrally for example by users and or administrators.

Authorization module may be queried by the various operating system kernel components that service resource access requests issued by a principal e.g. a principal . Authorization module may also be queried by an interception layer that intercepts the system call functions issued by a principal e.g. a principal to access the resources. Interception layer applies wrappers to the intercepted system call functions to enable authorization module to perform the access control check against the applicable policy . For example applying a wrapper may include determining the identity of the principal and or various environmental factors associated with computing system and providing this information as part of a request for authorization to perform a system call to authorization module to enable it to perform the access control check. Moreover authorization module may directly be queried by a principal e.g. a principal

In some embodiments the access control check performed by authorization module is a function of a principal making the resource access request and a policy that applies to the principal. As such authorization module makes its access control decisions i.e. allow or deny based on an identity of a principal either the identity of a calling application program or the combination of the identity of the calling application program and the identity of a user on whose behalf the application program is executing and the rules in the policy that are applicable to the principal. In some embodiments authorization module may additionally consider parameters such as by way of example type of access requested environmental factors e.g. is the computer on which the application program is executing inside a corporate network or connected to a public network patch level of the computer etc. in addition to the identity of the principal and the rules in the policy that are applicable to the principal in making its access control decision.

In some embodiments the facility may include an optional anomaly detection module as depicted by the broken or dashed lines in . Anomaly detection module generally functions to monitor the behavior of computer system and the programs executing on computer system in order to detect an anomalous state. In some embodiments anomaly detection module provides the facility a first notification upon detecting an anomaly and a subsequent second notification upon detecting the cessation of the previously detected anomaly. This enables the facility to activate the enforcement of policies upon detection of an anomaly until the anomaly has ended and policies are no longer enforced. Alternatively the facility may initially impose a less restrictive set of policies until an anomaly is detected in which case a more restrictive set of policies are enforced until the anomaly has ended and the less restrictive set of policies are again enforced. Anomaly detection module may detect an anomaly in either a single process executing on computer system a group of processes executing on computer system or the entire computer system .

The aforementioned aspects of the facility are only illustrative and are not intended to suggest any limitation as to the implementation of the illustrated components and or the scope of use or functionality of the facility. For example in some embodiments authorization module need not be implemented as part of or integral to operating system but may be implemented separate of or outside operating system for example as a non operating system program. Moreover in some embodiments policies need not be implemented as or a part of a centralized policy store. Thus policies need not be in one place but may be implemented using for example a distributed model. Furthermore even though policies are depicted as part of or contained in authorization module policies need only be accessible by authorization module . 

In the discussion that follows embodiments of facility are described in conjunction with a variety of illustrative examples. It will be appreciated that the embodiments of facility may be used in circumstances that diverge significantly from these examples in various respects.

As illustrated the example policy contains the privileges or access rights granted to a WebServerX process and the default is to deny authorization for the requested resource as indicated by rule unless the privilege or access right is specified. Stated another way unless the requested resource is explicitly granted in the policy authorization for the requested resource is denied. In some embodiments the policy may contain rules that specify access restrictions e.g. rules that specify that authorization to perform particular actions be denied or that deny authorization to access resources or rules that cause an audit e.g. log an event.

The first rule in the example policy is a directive to permit the WebServerX process to write html files as indicated by item to WebDirectories as indicated by item . The html is a representation of a collection of file types for example .html .gif etc. The WebDirectories is a representation of a collection of directories configured to be web directories and may be defined by an administrator such as a web administrator who is different than the creator of the policy such as a security administrator. For example authorization module returns an allow decision i.e. grant of authorization based on this rule in response to a WebServerX process requesting to write a file of a type defined by the parameter html to one of the directories defined by the parameter WebDirectories. Thus a rule in the policy may apply to dynamic independently defined groups of objects such as WebDirectories and dynamically configurable environment parameters such as html. 

The second rule in the example policy is a directive to permit the WebServerX process to write to the FTP Upload Directory as indicated by item if it is executing on behalf of user A as indicated by item . For example authorization module returns an allow decision i.e. grant of authorization based on this rule in response to a WebServerX process executing on behalf of user A requesting to write to the FTP Upload Directory. 

The third rule in the example policy is a directive to permit inbound http traffic as indicated by item . For example authorization module returns an allow decision i.e. grant of authorization based on this rule in response to a WebServerX process requesting to receive inbound http data e.g. receive http data packets transmitted over a network connection.

The fourth rule in the example policy is a directive to permit FTP traffic as indicated by item if the variable FTP is enabled as indicated by item . Here FTP is a variable and may be set by an administrator who is different than a security administrator who created the policy. For example authorization module performs a run time check to determine if the variable FTP is enabled and if so returns an allow decision i.e. grant of authorization based on this rule in response to a WebServerX process requesting to send or receive data defined by the parameter FTP traffic. Alternatively if the FTP is not enabled authorization module will return a deny decision i.e. denial of authorization in response to the aforementioned access request as indicated by item .

It will be appreciated that the policy may include rules that define privileges for objects within and outside the operating system such as application processes as illustrated by the example privilege above. The rules in a policy may be specified using a rich schema similar to writing code using compiled or interpreted programming language. For example the schema may support the inclusion of conditions and temporal conditions e.g. allow X only if Y dependencies on dynamically configurable environment parameters and variables dependencies on environmental factors and the like in the rules. Moreover the use of parameters facilitates the creation of rules that apply to both present and future objects. For example documents of a particular type may be represented by a parameter and using the parameter a rule can be created that specifies a restriction that applies to all documents of that particular type whether currently in existence or later created. In some embodiments the policy may specify that certain decisions are to be relegated to the end user for decision for example through a pop up dialog box.

At step authorization module identifies the principal that is requesting the authorization to access FileX stored in YZDir. In the above example the principal may either be WPApp or the combination of WPApp and UserABC. At step authorization module identifies the policy applicable to the identified principal for example from a centralized policy store such as policies and performs an access control check based on the identity of the principal and the applicable policy. At step authorization module determines whether the result of the access control check performed in step is to deny access. Continuing the above example authorization module analyzes the identified applicable policy to determine whether a rule or privilege in the policy authorizes the principal to access FileX stored in YZDir at step .

If authorization module determines that the applicable policy authorizes the principal to perform the requested action then at step authorization module returns an allow decision which is an indication that the principal is authorized to perform the requested action and proceeds to an end step. Alternatively if authorization module determines that the applicable policy does not authorize the principal to perform the requested action then at step authorization module returns a deny decision which is an indication that the principal is not authorized to perform the requested action. At step authorization module may return an error string to the principal informing the principal of the lack of authorization to perform the requested action.

At step authorization module checks to determine whether auditing is enabled. A flag or a record associated with the applicable policy or rule may indicate whether to perform auditing. If auditing is not enabled authorization module proceeds to an end step. Alternatively if auditing is enabled authorization module makes an entry in an audit log at step . The entry may identify the denied request the failed rule the principal and or the requested resource.

At step authorization module may trigger one or more events based on the auditing of the denied request. For example authorization module may provide a security administrator an indication e.g. via email voice mail text messaging etc. of the attempt by the principal to perform an unauthorized action terminate the application process subsequent to the attempt by the principal to perform an unauthorized action impose a stricter set of policies subsequent to the attempt by the principal to perform an unauthorized action and the like. Subsequent to triggering the events authorization module proceeds to an end step.

Those of ordinary skill in the art will appreciate that for this and other processes and methods disclosed herein the functions performed in the processes and methods may be implemented in differing order. Furthermore the outlined steps are only exemplary and some of the steps may be optional combined with fewer steps or expanded into additional steps without detracting from the essence of the invention.

If at step authorization module determines that the applicable policy does not authorize the principal to perform the requested action then at step authorization module returns a deny decision which is an indication that the principal is not authorized to perform the requested action. In the above example WebBrowser may not have authorization to access untrusted site WebSiteY. At step authorization module may return an error string to the principal informing the principal of the lack of authorization to perform the requested action. Subsequent to returning an error string authorization module proceeds to an end step.

Alternatively if authorization module determines that the applicable policy authorizes the principal to perform the requested action then at step authorization module returns an allow decision which is an indication that the principal is authorized to perform the requested action. At step authorization module checks to determine whether the authorized action is an inherently dangerous operation. For example the facility may maintain a list of inherently dangerous operations and authorization module may check this list to determine if the authorized action is listed as an inherently dangerous operation.

If the authorized action is found to be an inherently dangerous operation then at step authorization module performs an audit operation. For example authorization module may make an entry in an inherently dangerous operation audit log of an indication of the request and authorization to perform the inherently dangerous operation. The entry may also include an indication of the principal that requested the authorization to perform the inherently dangerous operation. Authorization module may additionally perform other actions which may be triggered by the authorization to perform the inherently dangerous operation. Subsequent to performing the audit operation at step or determining that the authorized action is not an inherently dangerous operation at step authorization module proceeds to an end step.

In some embodiments authorization module may make an entry in the inherently dangerous operation audit log of an indication of a request of authorization to perform an inherently dangerous operation. Continuing the above example assuming that accessing untrusted site WebSiteY is indicated to be an inherently dangerous operation and further the applicable policy does not grant WebBrowser authorization to access WebSiteY authorization module returns a deny decision step and records the request for authorization to perform the inherently dangerous operation and the subsequent denial of authorization for example in the inherently dangerous operation audit log. Authorization module may also record an indication of the principal that requested authorization to perform the inherently dangerous activity.

If at step authorization module determines that the applicable policy authorizes the principal to perform the requested action then at step authorization module returns an allow decision which is an indication that the principal is authorized to perform the requested action and proceeds to an end step. Alternatively if authorization module determines that the applicable policy does not authorize the principal to perform the requested action then at step authorization module checks to determine whether learning is enabled for the rule in the policy that denies authorization to perform the requested action. Continuing the above example a policy applicable to WebBrowser may contain a rule that expressly denies WebBrowser access to the Internet and thus WebSiteY but may also provide an indication to apply learning instead of applying the rule.

If authorization module determines that learning is not enabled for the rule that denies authorization to perform the requested action then at step authorization module returns a deny decision which is an indication that the principal is not authorized to perform the requested action. In the above example the rule that expressly denies WebBrowser access to the Internet and thus WebSiteY may not have an indication to apply learning. In this instance the rule is applied and WebBrowser is denied authorization to access WebSiteY. At step authorization module may return an error string to the principal informing the principal of the lack of authorization to perform the requested action. Subsequent to returning an error string authorization module proceeds to an end step.

Alternatively if at step authorization module determines that learning is enabled for the rule that denies authorization to perform the requested action then at step authorization module makes an entry in a learning report log of an indication of the failed rule. The entry may also include an indication of the principal that requested the authorization to perform the action that resulted in the failed rule. At step authorization module returns an allow decision which is an indication that the principal is authorized to perform the requested action and proceeds to an end step. Thus instead of applying the applicable rule authorization module grants authorization to perform the requested action and records an indication of this event. A security administrator or other interested user can then analyze the contents of the learning report log to determine whether a rule or policy is too restrictive or not restrictive enough and fine tune the rule or policy before actually enforcing or implementing the rule or policy.

In some embodiments authorization module may make an entry in the learning report log of an indication of a rule that provided the authorization to perform a requested action. Continuing the above example assuming that a rule expressly authorizes WebBrowser access to the Internet and thus WebSiteY and also provides an indication to apply learning authorization module returns an allow decision step and records an indication of the rule that provided the authorization to perform the requested action. This information may also be used to fine tune the rule or policy. For example if it is determined from the entries in the report log that authorization to access a resource was too readily granted the rule or policy may be adjusted or altered to reduce the instances where authorization to access to the resource is granted.

At step an operating system running on the user s computer performs a conventional access control check. Continuing the above example the operating system may check to determine whether the user has rights to open e.g. read access FileX in YZDir. At step the operating system using its conventional access check mechanism determines whether to deny the user access to FileX.

If the operating system s conventional access check mechanism determines that the user should be denied access to FileX then at step the operating system returns a deny decision and proceeds to an end step. The deny decision is an indication that the user is not authorized to perform the requested action e.g. open FileX. Alternatively if the operating system s conventional access check mechanism determines that the user should not be denied access to FileX then at step authorization module identifies the principal that is requesting the authorization to access FileX stored in YZDir.

At step authorization module identifies the policy applicable to the identified principal for example from a centralized policy store such as policies and performs an access control check based on the identity of the principal and the applicable policy. Continuing the above example authorization module analyzes the identified applicable policy to determine whether a rule or privilege in the policy authorizes the principal to access FileX stored in YZDir at step .

If authorization module determines that the applicable policy authorizes the principal to perform the requested action then at step authorization module returns an allow decision which is an indication that the principal is authorized to perform the requested action and proceeds to an end step. Alternatively if authorization module determines that the applicable policy does not authorize the principal to perform the requested action then at step authorization module returns a deny decision which is an indication that the principal is not authorized to perform the requested action. At step authorization module may return an error string to the principal and proceeds to an end step. The error string may inform the principal of the lack of authorization to perform the requested action.

It will be appreciated that the tiered access check may be performed in the reverse order from that illustrated by method . For example authorization module first performs its access control check. If authorization module determines that authorization should be given for a particular resource access then the operating system performs its security check using its conventional access control mechanism.

Beginning at a start step an operating system running on the user s computer receives a request to load execute the application program at step . At step the operating system invokes the facility to determine whether the application program has a corresponding policy. For example the policy applicable to the application program may be maintained as part of policies . If the facility determines that a policy applicable to the application program does not exist the facility informs the operating system that an applicable policy does not exist. At step the operating system denies the request to load execute the application program and returns an error condition. Subsequent to denying the request the operating system proceeds to an end step for this request.

Alternatively if at step the facility determines that a policy applicable to the application program does exist then at step the facility analyzes the applicable policy to determine the level of potential security risk associated with or resulting from loading executing the application program. The facility may base the level of risk on the level or extent of authorization granted by the rules in the policy. For example if the rules authorize the application program to a lot of resources or a number of inherently dangerous resources the facility may set the level of risk higher than if the rules only authorize the application program to a few relatively safe resources. The facility informs the operating system that an applicable policy does exist and proceeds to an end step.

Beginning at a start step the facility imposes the less restrictive PolicyA at step . At step the facility may detect an anomalous state in an instance of the application program executing on the computer. Continuing the above example an instance of the application program may be executing on the computer and the facility may be monitoring the executing application program process. While monitoring the application program process the facility may detect an anomalous condition or state in the process. For example the facility may have previously generated a directed graph that represents the system calls normally issued by the application program by tracking previous instances of the application program that ran on the computer and determined the presence of an anomalous state from a comparison of the system calls made by the current application program process and the directed graph.

At step the facility imposes the more restrictive PolicyB in response to detecting the anomalous state and proceeds to an end step. In one embodiment the facility imposes the more restrictive PolicyB on the application program process in which the anomalous state was detected. Alternatively the facility may impose the more restrictive PolicyB on the application program e.g. all instances or processes of the application program. Moreover depending on the detected anomaly the application program and or the particular policy the facility may impose a set of more restrictive policies on the entire computer e.g. more restrictive policies are applied to all processes executing on the computer.

Continuing the above example an instance of the web application program may be executing on the computer and the facility may be monitoring the executing web application program process. While monitoring the application program process the facility may detect an anomalous condition or state in the process. For example the facility may monitor the network traffic generated or caused by the web application process and determine from the network traffic that an anomalous state is present in the web application process. At step the facility imposes the dormant policy PolicyA on the web application program for example on the web application program process in which the anomaly was detected and proceeds to an end step. Alternatively the facility may impose PolicyA on all instances or processes of the web application program. Thus the dormant policy becomes active and applied to the web application program.

As illustrated in a controlling process sends a request to set a policy on a controlled process to operating system running on the computer Stage . The policy may be sent with the request or may have been previously sent in which case the request may include an identifier that identifies the policy. The request is made through an access control API . Access control API generally functions to expose and make available various interfaces that may be used by application developers to set and revoke policies. In one embodiment access control API provides the calling conventions by which an application program accesses operating system to set and revoke policies.

In response to receiving the request to set a policy operating system checks to determine whether controlling process possesses adequate privilege to set a policy on a target process Stage . For example operating system may require controlling process to be executing at a higher privilege level than the privilege level controlled process will be executing at. Alternatively operating system may only allow a process to set a policy on a child process. If operating system determines that controlling process has adequate privilege then operating system sets the policy on controlled process . If the request includes the policy operating system stores the received policy in for example policies and sets an indication to apply the policy. If the request includes an identifier identifying the policy operating system uses the identifier to identify e.g. locate the policy in for example policies and sets an indication to apply the policy. Otherwise if operating system determines that controlling process does not have adequate privilege then operating system does not set the policy on controlled process . Operating system returns to controlling process the results of the request to set a policy on controlled process Stage .

Subsequently when controlled process makes a request to access a resource to operating system Stage operating system performs an access control check to determine whether controlled process has authorization to access the resource Stage . For example operating system may utilize authorization module to determine whether there is an applicable policy and apply the rules in the applicable policy to determine whether controlled process has authorization to access the resource.

Depending on the results of the access control check operating system services the request to access the resource. For example if operating system determines by applying the applicable policy that controlled process has authorization to access the resource operating system proceeds to further process the request to access the resource. Otherwise operating system does not further process the request to access the resource. Operating system returns to controlled process the results of the request to access the resource Stage .

Even though controlling process and operating system are depicted as running on the same computer in the above and subsequent examples it is not meant to be limiting as those of skill in the art will appreciate that controlling process need not be running on the same computer as operating system . For example the request to set the policy may be sent over a communications network. Additionally it will also be appreciated that controlled process may or may not be in existence at the time of the request to set a policy on controlled process .

Operating system returns to controlling process the results of the request to set a revocable policy on controlled process Stage . If the revocable policy was successfully set operating system returns an identifier in for example a cookie to controlling process . In one embodiment the identifier authenticates the process that set the revocable policy and is used to identify and revoke the revocable policy. Stated another way the identifier is akin to a privilege or authorization to revoke the revocable policy and is subsequently submitted to operating system with a request to revoke the policy. In other embodiments the cookie may also include state information such as an identifier that identifies a policy that was previously in effect.

Subsequently when controlled process makes a request to access a resource to operating system Stage operating system performs an access control check to determine whether controlled process has authorization to access the resource Stage . Depending on the results of the access control check operating system services the request to access the resource. For example if operating system determines by applying the applicable policy that controlled process has authorization to access the resource operating system proceeds to further process the request to access the resource. Otherwise operating system does not further process the request to access the resource. Operating system returns to controlled process the results of the request to access the resource Stage .

Controlling process may then send via access control API a request to revoke a revocable policy previously set on controlled process to operating system Stage . Alternatively controlling process may send the cookie containing the identifier to controlled process Stage and controlled process may subsequently send via access control API a request to revoke a revocable policy previously set on controlled process to operating system Stage . In both instances the cookie is sent with the request to revoke a revocable policy.

In response to receiving the request to revoke a revocable policy operating system uses the identifier contained in the cookie to authenticate the requestor as a process having authorization to revoke the indicated revocable policy. Operating system may also use the identifier to identify the policy that is to be revoked. Subsequent to authenticating the requestor either controlling process Stage or controlled process Stage operating system revokes the revocable policy currently being applied to controlled process . In another embodiment operating system may apply a policy that was being applied to controlled process prior to the application of the just revoked revocable policy. For example an identifier that identifies the policy that was previously in effect may be passed to operating system in the cookie that was sent with the request to revoke a revocable policy. Alternatively operating system may have preserved the state information prior to applying the revocable policy for example in a persistent storage device on the computer.

Subsequently process continues processing with PolicyA being active Stage . The processing may involve interaction with operating system . For example the user may use process to upload one or more web applications. Having uploaded a web application the user may have requested processing of the uploaded web application through process . In response to the user s request process sends via access control API a request to set my policy to PolicyB to operating system Stage . For example process not trusting the integrity of the uploaded and user initiated web application requests to set the policy to a more stringent PolicyB. In response operating system sets the policy for process to PolicyB Stage . Operating system returns to process the results of the request to set my policy to PolicyB Stage .

Depending on the returned results of the request to set the policy to PolicyB process continues processing Stage . For example if the request to set the policy to PolicyB was successful process starts execution of the requested web application. Here the more stringent PolicyB is applied to the web application process. Alternatively if the request to set the policy to PolicyB was unsuccessful process does not start execution of the web application and may inform the user of an error condition e.g. reason for not running the web application.

In some embodiments PolicyB is applied to the web application process and PolicyA is in effect revoked. In this instance PolicyA may have been a revocable policy. In some embodiments both PolicyA and PolicyB are applied to the web application process. Here PolicyA may have been irrevocable and thus remains in effect along with PolicyB.

In response operating system sets the policy for process to PolicyA Stage and returns to process the results of the request to set my revocable policy to PolicyA Stage . If PolicyA was successfully set operating system may also return a cookie containing an identifier and or state information e.g. information regarding any previous policy that was being applied prior to PolicyA to process . The identifier is used to authenticate the holder as a process that has authorization to revoke the revocable policy.

Depending on the returned results of the request to set the revocable policy to PolicyA process continues processing Stage . For example if the request to set the revocable policy to PolicyA was successful process proceeds with executing the macro. Here the more restrictive PolicyA is applied to the macro. Alternatively if the request to set the revocable policy to PolicyA was unsuccessful process may not proceed with executing the macro.

Subsequently for example after detecting that the macro has finished executing process sends via access control API a request to revoke my policy e.g. PolicyA to operating system Stage . Process submits the cookie that was previously received from operating system with the request to revoke my policy. In response to receiving the request to revoke my policy operating system uses the identifier contained in the cookie to authenticate process as a process having authorization to revoke the policy. Subsequent to authenticating process operating system revokes PolicyA and applies the policy identified in the cookie to process Stage . Operating system returns to process the results of the request to revoke my policy Stage and process continues processing Stage . In another embodiment the revoke my policy request may identify a policy that is to be applied subsequent to revoking the current revocable policy.

Having assumed the identity of client process server process sends via access control API a request to perform an access control check to operating system Stage . The request includes the identity of client process e.g. ClientID and the requested action e.g. send an email message to the addresses recipient. Operating system performs the access control check and sends server process an indication of whether client process has authorization to perform the requested action. In some embodiments operating system may check an applicable policy in policies to determine whether client process has authorization to perform the requested action. In some embodiments operating system may utilize authorization module to determine whether client process has authorization to perform the requested action. Depending on the results of the access control check server process either continues processing the email message e.g. sends the emails message to the addressed recipient or stops processing the email message and sends client process an error message. While server process sent the request to perform the access control check to operating system in the above example it will be appreciated that server process may have directly invoked authorization module to perform the access control check.

At step a policy is embedded as part of the code of an application program. The embedded policy is delimited in the application code. In some embodiments the policy within the code is delimited for example by placing in the executable code a flag which indicates to an operating system or other process suitable for extracting the embedded policy of the presence of the policy. At step the application program code is signed to protect the resulting image. Code signing provides an assurance that the signed image comes from the provider of the digital signature e.g. the signer of the code. Digital signatures using a public key and a private key are generally known to those of ordinary skill in the art and thus will not be further discussed herein.

Subsequently at step a request is made to load the application program image for example on a computer. At step the operating system or a loader component of the operating system checks the integrity of the application program image. If the operating system determines the integrity of the application program image is not acceptable step then at step the operating system does not load the application program image on the computer. The operating system may also generate an error condition and provide an indication of the error.

Alternatively if the operating system determines the integrity of the application program image is acceptable step then at step the operating system loads the application program image on the computer. At step the operating system checks for the presence of an embedded policy and if an embedded policy is detected extracts the policy from the application program image. In some embodiments the operating system may store the extracted policy in a policy table or repository e.g. policies provided by the operating system. At step the operating system applies the extracted policy to the loaded application program image.

Beginning at a start step an operating system executing on a computer hosting legacy application program receives a request from a process to load a policy for the legacy application program at step . For example the process may be an instance of an update program executing on the computer. Moreover in addition to the rules that may be included in a policy the policy may further include rules which are dependent and applicable based on information such as the version of the legacy application code the patch level incorporated in the legacy application code and the like. At step the operating system receives the policy from the process and loads the policy for the legacy application program. The operating system may validate the process as being authorized to deliver a policy applicable to the legacy application program. The operating system may also validate the integrity of both the process and the policy prior to receiving and storing the policy. In some embodiments the operating system loads the policy in a policy table or repository and associates the policy to the legacy application program. The association may be indicated by metadata of the policy.

Subsequently at step the operating system receives a request to load the legacy application program. At step the operating system checks to determine if there is a policy that is applicable to the legacy application program. If the legacy application program does not have an applicable policy then at step the operating system does not load the legacy application program. In this instance the operating system may be configured to only load and execute applications that have applicable policies in effect. The operating system may return an error that indicates the failure to load the legacy application program. Subsequent to providing the indication of the error the operating system continues processing.

If at step the operating system determines that the legacy application program does have an applicable policy then at step the operating system loads the legacy application program. At step the operating system applies the policy to the legacy application program during its execution and continues processing.

From the foregoing it will be appreciated that specific embodiments of the invention have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. Accordingly the invention is not limited except in accordance with elements explicitly recited in the appended claims.

