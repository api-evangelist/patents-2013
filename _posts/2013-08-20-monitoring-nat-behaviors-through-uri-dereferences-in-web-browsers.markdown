---

title: Monitoring NAT behaviors through URI dereferences in web browsers
abstract: A method comprising dereferencing, in a web browser, a Uniform Resource Identifier (URI) comprising a web resource and a reflex tag, creating a request message comprising a request for the web resource and a reflex request corresponding to the reflex tag, wherein the reflex request is a request for address and port information from a web server comprising the web resource, encapsulating the request message in a transport message comprising an Internet Protocol (IP) address and a port of the web browser, transmitting the transport message to the web server, receiving a response message from the web server, wherein the response message comprises a second IP address and a second port number of the browser as seen by the web server, and determining a characteristic of at least one Network Address Translation (NAT) device coupled between the web browser and the web server based on the second IP address and second port number.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09379952&OS=09379952&RS=09379952
owner: Futurewei Technologies, Inc.
number: 09379952
owner_city: Plano
owner_country: US
publication_date: 20130820
---
Internet Protocol IP networks allow a collection of computers and other devices to be communicatively coupled to each other using a private address space. Internet Protocol networks utilize the Internet to facilitate the sharing of resources amongst devices. In order to enable communication between devices within private and public networks Network Address Translation NAT may be employed to translate between addresses in the private address space and addresses in the public address space.

Web Real Time Communication WebRTC is an example of an IP application that includes real time communication features such as voice and video chatting among web browser. In order to discover and traverse NAT current WebRTC architecture requires the web browsers to implement certain Interactive Connectivity Establishment ICE network protocols and techniques such as Session Traversal Utilities for NAT STUN and Traversal Using Relays around NAT TURN . STUN may allow a client to determine whether it is operating behind a NAT and to discover its public IP address that is allocated for User Datagram Protocol UDP connections to a remote host. Additionally TURN may be an extension of STUN and may utilize intermediate nodes to serve as relays to allow communication between peers.

These protocols however may be inefficient in properly monitoring NAT behavior as they may not be supported by some networks resulting in communication failures. For example some firewalls may block STUN and UDP traffic for clients such as Skype and Google Talk. Additionally the network protocols may not reuse web traffic generated by a browser for NAT discovery thereby creating excess networking overhead. The dedicated STUN TURN servers may be single points of failure and it may be difficult to extend them to support other NAT discovery mechanisms e.g. a P2P rendezvous . Furthermore the protocols introduce a connectivity layer that may not follow the web architecture in which the STUN and TURN servers do not return hypertext even though they can be identified by URI schemes. Thus there is a need for NAT discovery mechanisms that address one or more of the aforementioned issues within the Web architecture.

In one embodiment the disclosure includes a method performed in a web browser the method comprising dereferencing a Uniform Resource Identifier URI comprising a web resource and a reflex tag creating a request message comprising a request for the web resource and a reflex request corresponding to the reflex tag wherein the reflex request is a request for address and port information from a web server comprising the web resource encapsulating the request message in a transport message comprising an Internet Protocol IP address and a port of the web browser transmitting the transport message to the web server receiving a response message from the web server wherein the response message comprises a second IP address and a second port number of the browser as seen by the web server wherein the second IP address and the second port number is the requested address and port information and wherein the response message further comprises at least a part of the web resource and determining a characteristic of at least one Network Address Translation NAT device coupled between the web browser and the web server based on the second IP address and the second port number.

In another embodiment the disclosure includes a method performed in a web server the method comprising receiving a transport message wherein the transport message is an encapsulated request message wherein the request message comprises a request for a web resource and a reflex request corresponding to a reflex tag from a web browser and wherein the transport message comprises an IP address and a port number generated by at least one NAT device for the web browser in response to receiving the request for the web resource retrieving the web resource in response to receiving the reflex request inserting the IP address and the port number in a response message wherein the response message further comprises at least a part of the web resource and transmitting the response message to the web browser.

In yet another embodiment the disclosure includes a computer program product comprising computer executable instructions stored on a non transitory computer readable medium such that when executed by a processor cause a web browser to dereference a hyperlink identifying a web resource with a reflex tag create a request message comprising a request for the web resource and a reflex request corresponding to the reflex tag wherein the reflex request is a request for address and port information from a web server comprising the web resource and encapsulate the request message in a transport message comprising an IP address and a port of the web browser send the transport message to the web server acquire a response message from the web server wherein the response message comprises a second IP address and a second port number of the browser as seen by the web server wherein the second IP address and the second port number is the requested address and port information and wherein the response message further comprises at least a part of the web resource and determine a presence of and a type of at least one NAT device coupled between the web browser and the web server based on the second IP address and the second port number.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although an illustrative implementation of one or more embodiments are provided below the disclosed systems and or methods may be implemented using any number of techniques whether currently known or in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below including the exemplary designs and implementations illustrated and described herein but may be modified within the scope of the appended claims along with their full scope of equivalents.

Dereferencing a URI may refer to obtaining a resource identified by a specific URI. A URI dereference may represent a request from a web browser to a web server which may be triggered by a mouse click or a keystroke as examples. Dereference protocols may comprise transaction encryption e.g. Transport Layer Security TLS protocols authentication authorization message integrity and redirection of these protocols.

During a session a web browser may visit tens to hundreds of URI links for a Hypertext Markup Language HTML page automatically or in response to user actions. An HTML page may comprise several different components such as one or more embedded images embedded JavaScript JS and HTML elements. The web browser may make multiple requests to receive and load all these components which may each have a corresponding URI. The constant Hypertext Transfer Protocol HTTP requests made by a browser may be related to the content of the page in displaying images and running code. The requests may also be for loading advertisements on a website or sending information to other tracking websites.

This process may be repeated each time a new web page is loaded. Links in an HTML page may point to different IP addresses in which Transmission Control Protocol TCP or UDP transports may be employed. NAT behaviors may be the same for TCP and UDP. NAT mapping and filtering behaviors for TCP are classified in Request for Comment RFC memorandum 5382 entitled NAT Behavioral Requirements for TCP dated October 2008 which is incorporated herein by reference as if reproduced in its entirety. Similarly NAT behavior for UDP is specified in RFC memorandum 4787 entitled Network Address Translation NAT Behavioral Requirements for Unicast UDP dated January 2007 which is incorporated herein by reference as if reproduced in its entirety. Since a web browser is continuously updating through UDP and TCP requests it may be beneficial to utilize HTTP traffic from a browser for discovering and monitoring NAT behaviors. This approach may circumvent potential issues with traditional STUN and TURN protocols such as unsupported networks firewalls as well as overhead challenges.

Disclosed herein are systems methods apparatuses and computer program products for monitoring NAT behaviors through URI dereferences in web browser based communication. URI dereference protocols may be reused in order to simplify the NAT discovery process without dedicated STUN or TURN servers which may allow NAT detection and monitoring to become almost free of byproducts when a user browses the web. This approach may be achieved by implementing a new NAT discovery protocol. A new protocol sometimes referred to herein as embedded STUN E STUN may simplify NAT monitoring by integrating the protocol within a variety of URI dereference protocols e.g. comprising HTTP 1.1 and Extensible Messaging and Presence Protocol XMPP . A tag may be embedded in a URI to trigger a request for IP address and port information as seen by a receiving web server to be embedded in a web resource request message. The request message may traverse a Network Address Translation device which affects the IP address and port information seen by the web server. By reusing existing HTTP and XMPP protocols E STUN embedded traffic may be able to go past firewalls which may block conventional NAT traversal protocols. In addition NAT behavior may be monitored without creating extra costs to a browser or server in order to detect NAT mapping or filtering changes which may occur in response to an increase in load or update in policy.

E STUN services may be advertised explicitly in hypertext for URI authority in page and individual URI schemes using a variety of HTML version 5 HTML5 semantic tag mechanisms including microdata HTML5 Resource Description Framework in attributes RDFa microformat and HTML5 rel attribute. In another embodiment E STUN services may be advertised implicitly by returning addresses automatically during URI dereferences. Furthermore the E STUN services may be incorporated with a server mechanism and or a client mechanism to integrate the E STUN protocol into the URI dereference process and monitor NAT behavior based on the data collected.

In an embodiment a user may either invoke a URI link e.g. corresponding to HTTP URI or XMPP URI or the link may point to a resource that is automatically downloaded by the browser . The link may go through a URI dereference process by which the browser may send some messages to the server e.g. server 1 or server 2 identified by the URI in order to obtain some data back e.g. HTML XML . The HTPP URI and XMPP URI may comprise a web resource and a tag sometimes referred to herein as a reflex tag that is used to invoke an E STUN protocol. Potential syntax for reflex tags is disclosed herein. A reflex tag embedded in a URI may indicate a request for obtaining a translated IP address if any provided by a NAT in order to determine NAT behavior as disclosed herein in addition to the conventional dereference protocol. Furthermore the web page may comprise a NAT module which may use a JavaScript Application Programming Interface API to obtain NAT information.

A web browser may display web page and may comprise a NAT monitor module and URI dereference modules and for HTTP and XMPP respectively. As used herein the term module preceded by a descriptor may refer to computer program instructions used to perform the descriptor. For example a NAT monitor module may refer to computer program instructions used to perform NAT monitoring. The computer program instructions may be executed by a general purpose processor to perform the indicated descriptor or function. Steps sufficient to implement the modules referenced herein are described herein.

A URI such as HTTP URI or XMPP URI may be invoked. Upon invocation the URI dereference module may create a request message denoted as Q in various figures. The request message may be a conventional HTTP request message. If the invoked URI comprises a reflex tag the reflex tag may signal to the URI dereference module to embed NAT behavior request message or syntax denoted as EQ in the request message Q. The NAT behavior request message may sometimes be referred to as an E STUN request message. The combined request message denoted as Q may be transported via a transport module using the TCP or UDP protocol.

The transport module may receive transport TCP or UDP packets from the web browser and send the packets to a web server through the NAT device . The NAT device may perform address and port mapping for request and response messages Q and R . In another embodiment the NAT device may comprise a plurality of modules which are layered and conduct address translation. The NAT device may not modify Q or R messages except for the private browser IP address and port information for the web servers and . X0 Y0 may be a private IP address and port of the browser which is unknown by a web server. Server 1 and server 2 may obtain translated browser IP addresses and port numbers such as X1 Y1 and X2 Y2 respectively. The HTTP and XMPP servers and respectively may receive requests from a web browser with address and port information that has been translated by the NAT device .

After a URI dereference a Q request may reach a web server as directed by the URI. If the URI is an HTTP link the request may go to HTTP server . If the URI is an XMPP link the request may go to XMPP server . Each server may receive the request over a corresponding transport module or via TCP or UDP packets and may be directed by the address and port information provided by NAT device . The message may then be decoded by a reflex agent or . The EQ portion of Q which is the dereference message with embedded E STUN may be eliminated from the message as denoted by Q Q EQ. That is the embedded message may be extracted in order to recover the regular message Q. The regular message Q may then be sent to an HTTP server or an XMPP server .

During this task the reflex agent or may record the reflex IP address from the public IP address from the NAT device . The aforementioned private IP address and port X0 Y0 may be mapped by NAT device to X1 Y1 for HTTP server or X2 Y2 for XMPP server . The reflex agent or may not be aware of the mapping and may record the public IP address from the NAT device. When the conventional HTTP or XMPP processing is complete the response R may be sent back to the reflex agent or . The reflex agent or may then insert the X1 Y1 or X2 Y2 IP address and port information into a response message denoted as R . The response message comprises a conventional server response message e.g. containing data requested from the server in which an IP address and port information as seen by the server is embedded into the conventional response. The conventional server response message is denoted as R and the IP address and port information is denoted as ER.

The response message R may then be sent from the web server s and or back to the web browser through the NAT device wherein the response message contains X1 Y1 or X2 Y2 information. The response message may be sent to the URI dereference module or depending on whether the URI being dereferenced is HTTP or XMPP which may take the response message and extract the IP address and port information from the message as denoted by R R ER in . The ER information may contain the X1 Y1 or X2 Y2 IP address. The conventional response R may then be passed back to the web browser e.g. for display. The NAT monitor module may be employed to collect and analyze IP address and port information received from various servers such as servers and .

By embedding a new request message into a conventional URI request message the web browser may obtain information used to determine the presence and behavior of a NAT device. The dereference module or may send the X1 Y1 or X2 Y2 reflex IP address and port information to the NAT monitor module which may collect multiple IP addresses from response messages from other web servers as well. Once the web browser has collected enough IP addresses the presence and type of NAT device may then be determined.

The length field may further comprise a method field and class field . Table 1 shows an example of binary values for the method and class sections in an E STUN header. The method may signify the function of the transaction occurring which may be a binding method. The binding method may be used in a request response or in an indication transaction in order to determine the particular binding a NAT device has allocated to an E STUN client or to keep other bindings in existence.

There may be two types of transactions in E STUN request response transactions and indication transactions. The indication transaction may be a message sent from the client or the server and generates no response. The request response transaction may be where a client sends a request to a server and the server returns a response. The response classes may be split into error and success responses to aid in quickly processing the E STUN message. The different message classes and their corresponding binary values are shown in Table 1.

The attributes field may comprise optional attributes to include in a message which may be defined by the type length and variable values. The message attributes may be CHANGE REQUEST MAPPED ADDRESS and RESPONSE ORIGIN. The CHANGE REQUEST attribute may contain two flags to control the IP address and port used to send a response. The MAPPED ADDRESS attribute may indicate a reflexive transport address of the client. It may comprise an 8 bit address family and a 16 bit port followed by a fixed length value representing the IP address. If the address family is IP version 4 IPv4 the address may be 32 bits. If the address family is IP version 6 IPv6 the address may be 128 bits. The RESPONSE ORIGIN address may indicate the source IP address and port a binding response was sent from.

The E STUN protocol may be embedded as a binary protocol or translated into another text format and embedded into HTTP or XMPP. For example an E STUN request and response may be embedded into URI dereference protocol D messages. A positive D response may contain either a success or error E STUN response. A negative D response may contain an E STUN error response. If D cannot return a positive response according to CHANGE REQUEST it may send a correlated E STUN indication instead.

In order for a web browser to distinguish which links in a web page support the E STUN protocol it may be desirable for a corresponding server to advertise its E STUN services. A server may advertise its E STUN services implicitly by returning reflex addresses automatically during URI dereferences. For example an HTTP response may contain a reflex address. In another embodiment a server may advertise its E STUN service explicitly through use of the following types of semantic tags reflex address and port. A reflex tag an address tag and or a port tag may be attached to different links wherein each tag may indicate a type of service the link will provide to the client.

Regarding reflex tags the server receiving a reflex request corresponding to the reflex tag may return IP address and port information in a response. Regarding address tags the server receiving a request corresponding to the address tag may send an E STUN indication from a different IP address which may be helpful in detecting certain NAT filtering behaviors. With a port tag a server may send an E STUN indication from the same IP address but a different port. By using one of these tags the server may communicate with a web browser what E STUN services are supported during a URI dereference. Reflex tags address tags and port tags may collectively be referred to as semantic tags herein.

The semantic tags may be embedded in HTML5 in a myriad of ways comprising RDFa microformats HTML5 rel attribute and HTML5 microdata. RDFa may add a set of attribute level extensions to HTML for embedding metadata within web documents. Microformat may reuse existing HTML tags to communicate metadata and other attributes in a web page. The HTML5 rel attribute may be employed to indicate a relationship between a source and a destination link. Microdata may allow a website to attach semantic information to a regular hyperlink to convey additional information about the link to the browser. For illustrative purposes microdata may be used in the E STUN service descriptions disclosed herein as well as for its simplicity consistency and extensibility.

Semantic tags may be implemented at multiple levels in order to convey which services may be requested from a server. For example a tag may be applied to an individual URI with a URI tag to multiple links in a page with an HTML page tag or to an entire website with a URI authority domain tag as follows 

The tags may be applied at different levels by using microdata. Tagging at the domain level may enable all the links in an entire website to be tagged. The following HTTP and XMPP examples in Table 2 may be used in order to tag a URI authority whose resources support the same E STUN services. Two lines of code are displayed for both HTTP and XMPP wherein a reflex tag is shown within the second line of code. For the HTTP example reflex service may be provided to the browser whenever the URI is dereferenced. Since this is a top level link pointing to the domain then all of the links in the domain will be tagged as well and will provide the same service. For the XMPP example the second line of code comprises both reflex and port tags. If the URI is dereferenced the server may return the reflex address and send a message from a different port as indicated by the tags.

Resources in an HTML5 page supporting the same E STUN services may be similarly tagged at the page level as seen in Table 3 below. A tag may be added to a element in an HTML page as seen in the second row of Table 3 wherein adding a body element may tag all the links in the page within the body of the code. The tag may therefore provide the reflex IP address when dereferencing the URI.

E STUN microdata tags may also be applied at the link level either for a group of links or for individual links. For example multiple URIs may be grouped together and tagged. An HTML5 group of resources supporting the same E STUN services may be tagged as seen in the second line of code in Table 4 below. At the group link level all of the URIs may provide reflex and port services as indicated by the tags.

Additionally individual HTML5 and XMPP URI elements may be tagged at the link levels as seen in Table 5 below.

By advertising a server s E STUN services using microdata tags a browser may recognize that certain links provide certain features in a web page. In order for a browser to be able to use these specific features e.g. reflex or port service further description is needed. The HTTP 1.1 protocol is described in RFC memorandum 2616 entitled Hypertext Transfer Protocol HTTP 1.1 dated June 1999 which is incorporated herein by reference as if reproduced in its entirety and an embedment of E STUN in HTTP 1.1 may be defined as follows.

By way of further example there may be an image hyperlink pointing to an image and the link may provide a reflex IP address and port indication as shown in the code below.

Since it is an HTTP hyperlink the client e.g. web browser may dereference the URI using an HTTP protocol. In order to obtain the reflex address the client may attach the reflex tag as a parameter sent to the URI path as seen in the following request 

The reflex tag may be attached in order to embed the E STUN protocol into the HTTP protocol. A text format of the E STUN protocol may also be used in addition to a binary format since the text format follows the semantic definition of the binary format.

After the client sends the HTTP request the server may receive the message and go through the aforementioned procedures with the reflex agent wherein the public IP address and port as received by the server may be embedded in the HTTP response in the server field as seen below. In this case the public IP address 1.2.3.4 and port 9999 information may be returned to the client by the server.

In another transaction suppose the client wants to use the port feature by asking the server to return an indication message from a different port with the same reflex address. The client may then create the following request and send it to the server 

The tid portion of the above request may be the transaction ID e.g. 1234 created by the client and may be used to correlate the request message with the indication message from the server which may be sent back asynchronously. Once the server has received the message it may send the following response message with the requested reflex IP address and the E STUN indication from a different port using the transaction ID from the client. The format for the E STUN indication message is not shown below since the format may be encoded in different ways e.g. binary or text formats .

The request and response messages e.g. EQ and ER messages shown above may be embedded inside Q and R message to pass through proxies. The E STUN protocol embedment in HTTP may also be applicable to WebSocket and Server Sent Event as this technology uses HTTP 1.1 for handshakes. The WebSocket protocol is described in RFC memorandum 6455 entitled The WebSocket Protocol dated December 2011 which is incorporated herein by reference as if reproduced in its entirety.

Additionally the E STUN protocol may be embedded in XMPP and may be shown in a single transaction between a client and server. The XMPP protocol is described in RFC memorandum 3920 entitled Extensible Messaging and Presence Protocol XMPP Core dated October 2004 which is incorporated herein by reference as if reproduced in its entirety. Suppose there is a hyperlink pointing to an XMPP URI indicating that the URI may provide reflex and address service as shown in the code below.

Since it is an XMPP hyperlink the client may dereference the URI using an XMPP protocol. The client may initiate a stream to a server by sending the following message 

The client may then ask the server to return a reflex address in response along with an E STUN indication from a different address. Thus the client may send the following authentication request which may comprise an embedded address request 

Once the server has received the request it may respond with the requested reflex IP address and the E STUN indication from a different address as seen in the following messages 

The request and response messages e.g. EQ and ER messages shown above may be embedded inside Q and R messages to reuse XMPP authentication. Similarly to the HTTP E STUN embedment the transaction ID may be used in the request and response messages from the client and server respectively for identification purposes. The format of the E STUN message may also be encoded in binary or text formats as desired.

Ultimately the XMPP E STUN embedment may be implemented similarly to the aforementioned HTTP E STUN embedment with minor modifications due to the differences in protocols. However the E STUN functions may remain the same wherein a URI may advertise to a client its E STUN services and a client may decide which services to utilize by communicating with a server. By embedding E STUN in XMPP or HTML the XMPP or HTML authentication may be reused without requiring any special login to the E STUN server or other formalities.

In order for a client to be able to communicate with a server it may be necessary to determine the type of NAT employed in between the two. Obtaining E STUN indication messages from different servers ports may be important for differentiating between various NAT mapping and filtering behaviors. For example one type of NAT may receive a message from a server only if an internal client has sent a message to that server before. If the server has never been contacted the NAT may not allow the server to send a message to the client from outside the private network. In order to reveal if a NAT has this type of behavior a server may be instructed to send a message back to a client to determine if the NAT allows it to do so. If the message is not sent the NAT may control this behavior whereas if the message is sent the NAT may allow the message to go through. These may be examples of two different NAT filtering behaviors wherein the filtering behavior may determine how a NAT decides to let outside traffic in to a private network containing the client of interest.

In order to differentiate between the different NAT mapping and filtering behaviors a client such as a web browser may collect all kinds of data from different servers with different properties. For example a browser may collect the reflex IP address and other indication messages from one server while the browser may not receive indication messages from another server. Once the browser has collected enough data the browser may determine if there is a NAT and if so what type of NAT is in use.

There may be two types of NAT behaviors which may be classified according to RFC memorandums 4787 and 5382. The first type of behavior may be identified by how a NAT maps an internal IP address to an external IP address. illustrates an embodiment of communication in a networked architecture for determining NAT behavior. The architecture may comprise a NAT monitor NAT server 1 server 2 and a plurality of reflex agents and . The NAT monitor may be the same as the NAT monitor module as described earlier e.g. the NAT monitor may be part of a web browser . The NAT may be the same as the NAT device described earlier. For the architecture there may be any number of components in a NAT monitoring system. That is there may be n IP addresses and m ports wherein m n 1. Ports may be represented as Pij in which i designates a specific address for i 1 2 . . . n and j designates a specific port for j 1 2 . . . m. For illustrative purposes in the architecture there may be two servers and wherein server 1 may have one address and two ports and server 2 may have one address and one port. Reflex agent may be located at server 1 port 1 S1 P11 reflex agent may be located at server 1 port 2 S1 P12 and reflex agent may be located at server 2 port 1 S2 P21 . These reflex agents may be similar to the E STUN agents and shown in .

The NAT monitor may be a module inside a web browser wherein X0 Y0 may be the internal private IP address of the browser. The NAT monitor may collect reflex public IP addresses from server 1 and server 2 wherein some of the IP addresses may be collected from different ports such as P11 P12 and P21. The collected information from each of the servers may be represented as X Y pairs wherein X is the IP address and Y is the port. For example X11 Y11 may be collected from server 1 port 1 S1 P11 X12 Y12 may be collected from server 1 port 2 S1 P12 and X21 Y21 may be from server 2 port 1 S2 P21 . X11 Y11 may be another instance of a reflex address and port information collected from S1 P11 . For example this information may have been collected from the same server but in a different transaction that may have occurred at a different time.

 X11 Y11 X11 Y11 X12 Y12 and X21 Y21 may be five data points including the private IP address collected by the NAT monitor from the servers and X0 Y0 is the private IP address and port of a browser comprising the NAT monitor and therefore known by the NAT monitor . The reflex IP addresses from the different servers and ports may be collected using the reflex tag in URI dereferences wherein each server and all ports Pij are distinct e.g. server 1 server 2 . These data points may be sufficient for the NAT monitor to make a prediction of the NAT behavior according to Internet Engineering Task Force IETF classification. Referring to a method or process for determining behavior of a NAT such as NAT is as follows. First the NAT monitor may determine whether or not a NAT is present by checking if X0 Y0 X11 Y11 and X21 Y21 are all equal to each other. If the internal and external IP addresses are all the same then there may be no translation occurring e.g. no NAT. If there are differences between the addresses then the presence of a NAT may be confirmed and the type of NAT mapping may be discovered with further analysis.

There may be four different classifications for how a NAT performs mapping which may be endpoint independent mapping EIM address dependent mapping ADM address and port dependent mapping APDM and connection dependent mapping CDM . To determine the classification the NAT monitor may check if X11 Y11 is equal to X21 Y21 . If so the NAT may employ EIM in which the NAT reuses port mapping for subsequent packets sent from the same internal IP address and port to any external IP address and port. In EIM the NAT may assign a fixed public address wherein server 1 and server 2 may have the same IP address. If X11 Y11 is not equal to X21 Y21 the NAT may either use ADM or APDM. In order to distinguish between these mappings the NAT monitor may check if X11 Y11 is equal to X12 Y12 . If the two data points are the same then the NAT may utilize ADM in which the NAT reuses the port mapping for subsequent packets sent from the same internal IP address and port to the same external IP address regardless of the external port. If X11 Y11 is not equal to X12 Y12 then the NAT may either use APDM or CDM. The NAT monitor may make a final distinction between the two by checking if X11 Y11 is equal to X11 Y11 . If the data points are the same then the NAT may utilize APDM in which the NAT reuses the port mapping for subsequent packets sent from the same internal IP address and port to the same external IP address and port while the mapping is still active. If the data points are unequal then the NAT may exhibit CDM wherein a new mapping is allocated by the NAT for each connection.

From the method a sufficient number of data points may be obtained to make an accurate prediction about a NAT and its mapping behavior. If there are not two servers the presence of a NAT may still be determined. Similarly if there are not different ports for a single server the NAT monitor may at least detect if the mapping is EIM or not. The method for determining NAT mapping behavior as described earlier may be summarized in Table 6.

The second type of NAT behavior may be identified by how a NAT allows outside traffic in and what kind of filtering is performed. A NAT may arbitrarily combine a type of mapping behavior with any type of filtering behavior. That is the two types of behaviors may be independent of each other and there may be no correlation between the two. Thus mapping and filtering behaviors may be detected separately.

The NAT monitor may be a module inside a web browser wherein X0 Y0 may be the private IP address and port of the browser. Referring to a method or process for determining a filtering behavior of a NAT such as NAT is as follows. In this filtering method the NAT monitor may determine which server may or may not send messages through the NAT back to the web browser. From this information the NAT monitor may make a prediction on what type of filtering behavior is employed by the NAT . There may be three types of filtering behavior as defined in for example RFC 4787 and RFC 5382. Three types of filtering behavior are endpoint independent filtering EIF address dependent filtering ADF and address and port dependent filtering APDF . In the first step of the filtering method a web browser such as browser may send a URI dereference request Q embedded E STUN message to agent and ask agent to return an address port pair X1 Y1 . The browser may also ask agent to facilitate return of a first indication the first indication being a message from a different port e.g. P12 through use of a port tag wherein the first indication includes the address port pair X1 Y1 . Further the browser may also ask reflex agent to facilitate return of a second indication from a different address e.g. from server 2 as indicated through use of an address tag wherein the second indication includes the address port pair X1 Y1 . In the second step reflex agent may return the address port pair X1 Y1 in a URI dereference response R embedded E STUN message from port P11. These requests may be made depending on the advertised E STUN service in order to determine if they may be completed successfully. In a third step the reflex agent may send the requested indication from port P12. The indication may include the address port pair X1 Y1 . In a fourth step the server may return the second indication from port P21. In order to facilitate the second indication the use of the address tag may trigger server to request that server return the second indication. More specifically reflex agent may contact reflex agent to ask or request reflex agent to send the second indication to the web browser comprising the NAT monitor . The second indication may include the address port pair X1 Y1 as indicated in the request from the reflex agent .

Depending on the type of NAT the first and or second indications may not be received by the NAT monitor within a predetermined timeout period. If the second indication is received by the NAT monitor from reflex agent within the timeout period then the NAT behavior may be classified as EIF which may indicate that the NAT forwards any packets destined to the internal address and port regardless of the external IP address and port source. That is in EIF behavior sending packets from the internal side of the NAT to any external IP address may be sufficient to allow any packets back to the internal endpoint. If the indication message has not been received within a timeout period from reflex agent then the NAT monitor may check if the message has been received within a timeout period from reflex agent . If so the NAT behavior may be classified as ADF which may indicate that the NAT may filter out packets from a server destined for the internal endpoint if packets have not been sent from the internal side to the external IP address previously independently of the port used by the external server . That is in ADF behavior it may be necessary for the internal endpoint to send packets first to a specific external endpoint s IP address before it may receive packets for that external endpoint. If the message has still not been received within a timeout period from reflex agent then the NAT behavior may be classified as APDF which may be similar to ADF except that the external port may be relevant for filtering. That is in APDF behavior it may be necessary for the internal endpoint to send packets first to a specific external endpoint s IP address and port before it may receive packets from that external endpoint.

Table 7 below summarizes the method for determining NAT filtering behavior described above as follows.

At step the reflex agent may obtain the public IP address X1 Y1 from the NAT . The agent may then decode Q in step by removing the embedded E STUN portion from the message. In steps and the decoded message Q may be sent to the resource which may be an HTTP server and the response message R may be sent back to the reflex agent . At step the reflex agent may insert X1 Y1 IP address into the response resulting in R . The R response may then be sent back to the web browser via the NAT in steps and . The dereference protocol module may obtain the R response extract the X1 Y1 information and send the public IP address to the NAT monitor in steps and . In step NAT mapping and or filtering tests may be performed such as the tests for determining NAT mapping and or filtering behavior as previously described with respect to and summarized in Tables 6 and 7. Next in step a NAT report containing the IP addresses and additional information about the NAT may be sent to the application . In step the application tells the NAT monitor to cease testing or stop. In step the NAT monitor may be unregistered at the dereference module which means the NAT monitor tells the dereference engine to stop collecting reflex IP addresses.

The memory may comprise secondary storage random access memory RAM read only memory ROM or any combination thereof. Secondary storage may comprise one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if the RAM is not large enough to hold all working data. The secondary storage may be used to store programs that are loaded into the RAM when such programs are selected for execution. The ROM may be used to store instructions and perhaps data that are read during program execution. The ROM may a non volatile memory device that typically has a small memory capacity relative to the larger memory capacity of the secondary storage. The RAM is used to store volatile data and perhaps to store instructions. Access to both the ROM and the RAM is typically faster than to the secondary storage.

The network device sometimes referred to as a transceiver may serve as an output and or input device of the network node. For example if the network device is acting as a transmitter it may transmit data out of the network node. If the network device is acting as a receiver it may receive data into the network node. Further the network device may include one or more optical transmitters one or more optical receivers one or more electrical transmitters and or one or more electrical receivers. The network device may take the form of modems modem banks Ethernet cards universal serial bus USB interface cards serial interfaces token ring cards fiber distributed data interface FDDI cards and or other well known network devices. The network device may enable the processor to communicate with an Internet or one or more intranets. The messages described herein may be transmitted or received by the network device .

The I O devices may be optional or may be detachable from the rest of the server . The I O devices may include a video monitor liquid crystal display LCD touch screen display or other type of display. The I O devices may also include one or more keyboards mice or track balls or other well known input devices.

It is understood that by programming and or loading executable instructions onto the server at least one of the processor or the memory are changed transforming the server in part into a particular machine or apparatus e.g. a web browser comprising a NAT monitor module an HTTP URI dereference module an XMPP URI dereference module and a transport module having the functionality taught by the present disclosure. The web browser may for example be the same as web browser or and may perform the steps for web browser shown in . Messages received by the network device may be acquired by the web browser . Further the server may instead be a web server such as web servers or described earlier in which case the memory may store instructions for a reflex agent such as reflex agents or described earlier. The executable instructions may be stored on the memory for execution. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

Any processing of the present disclosure may be implemented by causing the processor such as processor to execute a computer program. In this case a computer program product can be provided to a server such as server using any type of non transitory computer readable media such as memory . The computer program product may be stored in a non transitory computer readable medium in the computer or the network device. Non transitory computer readable media include any type of tangible storage media. Examples of non transitory computer readable media include magnetic storage media such as floppy disks magnetic tapes hard disk drives etc. optical magnetic storage media e.g. magneto optical disks compact disc ROM CD ROM compact disc recordable CD R compact disc rewritable CD R W digital versatile disc DVD Blu ray registered trademark disc BD and semiconductor memories such as mask ROM programmable ROM PROM erasable PROM flash ROM and RAM . The computer program product may also be provided to a computer or a network device using any type of transitory computer readable media. Examples of transitory computer readable media include electric signals optical signals and electromagnetic waves. Transitory computer readable media can provide the program to a computer via a wired communication line e.g. electric wires and optical fibers or a wireless communication line.

At least one embodiment is disclosed and variations combinations and or modifications of the embodiment s and or features of the embodiment s made by a person having ordinary skill in the art are within the scope of the disclosure. Alternative embodiments that result from combining integrating and or omitting features of the embodiment s are also within the scope of the disclosure. Where numerical ranges or limitations are expressly stated such express ranges or limitations may be understood to include iterative ranges or limitations of like magnitude falling within the expressly stated ranges or limitations e.g. from about 1 to about 10 includes 2 3 4 etc. greater than 0.10 includes 0.11 0.12 0.13 etc. . For example whenever a numerical range with a lower limit R and an upper limit R is disclosed any number falling within the range is specifically disclosed. In particular the following numbers within the range are specifically disclosed R R k R R wherein k is a variable ranging from 1 percent to 100 percent with a 1 percent increment i.e. k is 1 percent 2 percent 3 percent 4 percent 5 percent . . . 50 percent 51 percent 52 percent . . . 95 percent 96 percent 97 percent 98 percent 99 percent or 100 percent. Moreover any numerical range defined by two R numbers as defined in the above is also specifically disclosed. The use of the term about means 10 of the subsequent number unless otherwise stated. Use of the term optionally with respect to any element of a claim means that the element is required or alternatively the element is not required both alternatives being within the scope of the claim. Use of broader terms such as comprises includes and having may be understood to provide support for narrower terms such as consisting of consisting essentially of and comprised substantially of. Accordingly the scope of protection is not limited by the description set out above but is defined by the claims that follow that scope including all equivalents of the subject matter of the claims. Each and every claim is incorporated as further disclosure into the specification and the claims are embodiment s of the present disclosure. The discussion of a reference in the disclosure is not an admission that it is prior art especially any reference that has a publication date after the priority date of this application. The disclosure of all patents patent applications and publications cited in the disclosure are hereby incorporated by reference to the extent that they provide exemplary procedural or other details supplementary to the disclosure.

While several embodiments have been provided in the present disclosure it may be understood that the disclosed systems and methods might be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

In addition techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as coupled or directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and may be made without departing from the spirit and scope disclosed herein.

