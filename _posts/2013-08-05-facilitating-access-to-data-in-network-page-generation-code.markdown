---

title: Facilitating access to data in network page generation code
abstract: Disclosed are various embodiments for facilitating access to data in network page generation code supplied by customers of a hosting provider. A request for a network page is obtained from a client. The network page is associated with a network site hosted by a hosting provider on behalf of a customer. Page generation code supplied by the customer is obtained, and this code includes a dynamic data variable. One or more service calls are executed based at least in part on the dynamic data variable to obtain one or more data objects. The page generation code is executed to generate the network page in response to the request, where the page generation code is executed with the data objects in place of the dynamic data variable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09270727&OS=09270727&RS=09270727
owner: Amazon Technologies, Inc.
number: 09270727
owner_city: Seattle
owner_country: US
publication_date: 20130805
---
This application is a continuation of and claims priority to co pending U.S. patent application entitled FACILITATING ACCESS TO DATA IN NETWORK PAGE GENERATION CODE filed on Jan. 11 2012 and assigned application Ser. No. 13 348 088 which is incorporated herein by reference in its entirety.

Compliance with Payment Card Industry Data Security Standards PCI DSS and or other security standards may present challenges for online merchants. For this and other reasons online merchants may elect to have their electronic commerce platform managed by a third party electronic commerce hosting provider who ensures compliance with the security standards. However merchants may lose flexibility in customizing or configuring their network sites when using such a hosted solution as compared with a self managed solution.

The present disclosure relates to facilitating access to data in network page generation code where the network page generation code may be executed within a controlled environment that prevents direct access to the data by way of service calls or other arbitrary code. Merchants and other owners of network page sites may contract with hosting providers to generate and serve up their network sites. For example a hosting provider may offer an end to end hosted electronic commerce platform that maintains an item catalog generates detail pages for items facilitates searching for items facilitates browsing for items by way of a taxonomy or by way of suggested items allows for customer reviews of items and so on. Such a hosted electronic commerce platform may include functionality relating to shopping carts order placement order management and fulfillment and or other functionality. Such a platform offers merchants many advantages over self managed solutions.

Merchants may wish to retain stylistic and content control over their online presence even if it leverages an end to end hosted electronic platform. However the hosting provider may be reluctant to grant the merchant access to execute arbitrary page generation code due to security concerns and compliance requirements for Payment Card Industry Data Security Standards PCI DSS and or other security standards. Various embodiments of the present disclosure facilitate customer control over network page generation with a hosted network site. As used herein the term customer may also include developers acting on behalf of customers of the hosting provider.

In various embodiments a merchant or other customer of the hosting provider is able to upload page generation code for execution server side. The page generation code may include dynamic data variables which are translated into potentially multiple service calls to data sources. In various embodiments data sources may return a document which may be automatically translated into one or more data objects for ease of use within the page generation code. Additionally a developer may define various configurable functions separately from the page generation code for use in the page generation code in accessing a data source using one or more parameter values. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments relating to customer supplied page generation code. The networked environment includes a computing environment in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. The computing environment may be operated by a hosting provider to host network sites for various customers.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed by the computing environment for example include a plurality of data sources . . . N a network page generation environment a network page server application a network site configuration application and other applications services processes systems engines or functionality not discussed in detail herein. The data sources are executed to provide various data used in generating network pages for network sites of customers of the hosting provider. Where the customers are merchants the data provided by the data sources may relate to electronic commerce data such as for example item catalog data item suggestions data shopping cart data checkout data order data and so on.

In various embodiments the data sources may comprise web services. For example the data sources may provide data by way of representational state transfer REST simple object access protocol SOAP web services description language WSDL web application description language WADL and or other formats. In another embodiment the data sources may comprise files or other forms of data stores. In some cases one or more of the data sources may correspond to external data sources accessible by way of the network which are not managed or controlled by the hosting provider. The data sources may be executed in different computing devices which may be managed by different entities.

The network page generation environment is executed to generate the network pages in response to page requests obtained from clients . The network pages may correspond to web pages gopher pages mobile application screens and or other forms of network content. Where the customer is a merchant the network pages may correspond to home pages catalog pages item detail pages shopping cart pages checkout pages order confirmation pages and so on. Such network pages may facilitate selecting items for purchase rental download lease or other form of consumption. In addition where the customer is a merchant the network page generation environment may include or be in communication with an electronic commerce system that performs various backend functions in order to facilitate the online purchase of items.

In some embodiments the network page generation environment may aggregate data from the data sources for use in generation of network pages . To this end the network page generation environment may employ parallel fetching to reduce latency when data is aggregated from multiple data sources .

The network page generation environment may execute page generation code in order to generate the network pages . The page generation code may correspond to a default version supplied by the hosting provider or may correspond to a customized version supplied by the customer. In some cases the page generation code may be transformed or compiled from one code format to another and or may be interpreted. As a non limiting example the page generation code may correspond to JavaServer Pages JSPs which may be compiled into Java servlets which in turn may be compiled into bytecode which may be executable by the network page generation environment . The page generation code may also include for example Expression Language EL expressions XPath or XQuery expressions and so on.

To this end the network page generation environment may include a Java Virtual Machine JVM and a servlet container such as Apache Tomcat or another servlet container. In one embodiment the page generation code may be instrumented in order to facilitate monitoring one or more resources consumed by the page generation code . Such resources may correspond to execution time processor time memory allocation data written to an output stream and so on.

The network page generation environment may be configured to provide aggregated data from the data sources to the page generation code for example as a set of predefined implicit variables or by another approach. The network page generation environment may act as a sandbox for the page generation code to enforce restrictions on application programming interface API calls service calls access to the data source and or other resources in the computing environment . As a non limiting example where the network page generation environment includes a JVM a security manager may be installed in the JVM to deny access by the page generation code to system data data of other customers and so on.

The network page generation environment may include one or more data providers which facilitate access to the respective data sources by the page generation code . In some cases the data sources may return data formatted as an extensible markup language XML document JavaScript Object Notation JSON Yet Another Markup Language YAML or in another format. The data providers and or other logic in the network page generation environment may be configured to transform the XML document or other data automatically into one or more data objects e.g. Java objects etc. which are usable by the page generation code .

In some cases the page generation code may include one or more configurable function calls . It may be desirable to restrict the page generation code from including arbitrary code such as function definitions and service calls. However to provide flexibility to the developer configurable function calls may be employed. With a configurable function call a developer defines a configurable function having a function name a set of function parameters and configuration to various predefined acceptable functionality. In some cases the definition of the set of function parameters may include a corresponding data type for each parameter. In one embodiment the configurable function calls are implemented in the network page generation environment using Java reflection and one or more proxy functions.

As a non limiting example the predefined acceptable functionality may include making a request to a uniform resource locator URL where the URL potentially includes one or more of the function parameters. To this end the developer may define a URL template which indicates where the various parameters should go in the URL. A non limiting example of such a URL template may be http www.site.com webservice.cgi p1 param 1 p2 param2 where param1 and param2 correspond to two parameters of the configurable function and indicates the presence of a parameter.

When the configurable function call is used in the page generation code the network page generation environment may replace the configurable function call with one or more service calls implementing the URL request with the specified parameter values of the configurable function call . In one embodiment the customer may specify a data type for each of the parameters e.g. integer Boolean object type etc. of the configurable function and the network page generation environment may be configured to perform type checking. This type checking may be performed even if for example EL does not provide type checking.

The page generation code may also include one or more dynamic data variables . The dynamic data variables may appear to be ordinary JSP or EL variables but they may be interpreted by the network page generation environment so as to replace the dynamic data variables with function calls service calls and or other functionality before the page generation code is compiled or executed. As a non limiting example a dynamic data variable may be customer.emailAddress where signals the presence of an expression in EL customer corresponds to a dynamically obtained Java object and emailAddress corresponds to a data field in the Java object. In some cases the dynamic data variables may include configurable function calls .

The network page server application is configured to obtain the page requests from the client over the network to generate network pages in response to the page requests using the network page generation environment and to return the network pages to the client by way of the network . The network page server application may correspond to a commercially available hypertext transfer protocol HTTP server such as for example Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and or other servers.

The network site configuration application is executed to facilitate customer configuration of network sites. To this end the network site configuration application may enable uploading and configuration of the page generation code configuration of various parameters associated with the operation of the network site order fulfillment management item catalog management and or other functionality. The network site configuration application may implement an HTTP server a web based distributed authoring and versioning WebDAV server a file transfer protocol FTP server and or other servers. The network site configuration application may include various components and or may invoke various components of the network page generation environment to enforce compile time restrictions on the page generation code to process dynamic data variables to process configurable function calls and so on.

The data stored in the data store includes for example network site data network site configuration data customized page generation code default page generation code page generation restrictions configurable function definitions and potentially other data. The network site data corresponds to data used in the generation of the network pages for the hosted network sites of the merchants or other customers. Such data may include for example templates hypertext markup language HTML text XML cascading style sheets CSS images audio video animations and or other data.

The network site configuration data may store parameters and or other data for controlling the operation and appearance of the hosted network site. Such data may control various electronic commerce functionality such as for example item catalogs item taxonomies item searching item recommendations shopping carts checkout order fulfillment and or other functionality. The customized page generation code corresponds to page generation code which is created or customized by merchants or other customers. The default page generation code may correspond to a default set of page generation code for a merchant or other customer to use for a base functionality for a network site. The default page generation code may generate network pages having for example a default appearance and behavior for a generic electronic commerce site.

The page generation restrictions may configure various restrictions to be placed on the page generation code by the network page generation environment . As a non limiting example where the page generation code corresponds to JSP code the network page generation environment may restrict the JSP code from including scriptlets and or various API calls. Various functionalities may be whitelisted or blacklisted as the case may be. Such restrictions may be configured by way of parameters in the page generation restrictions .

The configurable function definitions may correspond for example to metadata files that define a configurable function for use by a customer. To this end a configurable function definition may define a function name a set of function parameters and configure various predefined functionality. The predefined functionality may include an HTTP GET request using a URL. The configurable function definition may specify a URL template indicating where the parameters are to be used in the URL. In some cases EL expressions or other code may be used in the configurable function definition to generate the URL from the parameters. Such EL expressions may be subject to various restrictions similar to those of the page generation restrictions . In one embodiment a configurable function definition is specified in a file or data location that is separate from the customized page generation code . In some embodiments the metadata files that define configurable functions may not include any Java JSP EL XPath and or other code.

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as a browser and or other applications. The browser may be executed in a client for example to access and render network pages served up by the computing environment and or other servers thereby generating a rendered network page on the display . The client may be configured to execute applications beyond the browser such as for example code development applications file transfer applications mobile applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a merchant or other customer of a hosting provider associated with the computing environment configures a network site to be hosted through the computing environment . The network site may have a common domain that is shared by multiple customers of the hosting provider or the network site may correspond to a unique domain for each customer. The merchant or other customer may adopt default page generation code for various network pages accessible through the network site. Alternatively or additionally the merchant or other customer may create customized page generation code for generating some or all of the network pages accessible through the network site.

The merchant or other customer may interact with the network site configuration application to customize or make changes to the network site. In various cases the customer may edit the page generation code directly through the network site configuration application or the customer may upload replacement page generation code . The customer may create configurable function definitions according to various predefined functionality supported by the network page generation environment . Through this system customers are able to control generation of network pages for their network sites despite using a hosted infrastructure and potentially a hosted electronic commerce platform.

When a customer uploads or edits page generation code the network site configuration application and or the network page generation environment may perform various verifications on the static code. Such verifications may be referred to as compile time checks but need not occur at the same time the page generation code is compiled and in some cases the page generation code may be interpreted rather than compiled. Such verifications may be performed as configured by the page generation restrictions .

Furthermore configurable function calls and dynamic data variables in the page generation code may be processed at compile time. The configurable function calls and dynamic data variables may be replaced in the page generation code with service calls and or other code to facilitate data access and transformation. It is noted that the customer may be restricted from including such service calls and or other code directly in the page generation code . Also configurable function calls and dynamic data variables may be nested. In other words a configurable function call may depend on multiple configurable function calls and dynamic data variables may depend on multiple dynamic data variables . In one embodiment the page generation code may be restricted from making beyond a predetermined number of service calls by way of using the dynamic data variables and or the configurable function calls . In some cases a dynamic data variable may correspond to a data object returned from a configurable function call .

The page generation code may be able to access a predefined set of aggregated data. In some cases the page generation code may declare various data that it accesses which is then aggregated by the network page generation environment . In other cases a standard set of data from the data sources may be provided. The set of data may depend on the type of network page e.g. whether the network page is a checkout page catalog page order confirmation page and so on. In one example the aggregated data may be associated with the hosted electronic commerce platform provided by the hosting provider.

The aggregated data may be provided to the page generation code by way of implicit variables or other variables that are available in the scope of the page generation code . The page generation code may be configured to use all of the predefined variables or a subset of the predefined variables. The page generation code may be restricted from accessing the data sources directly. For example a JVM in the network page generation environment may be configured to deny access by the page generation code to data other than certain implicit variables.

In operation the client sends a page request to the network page server application for some network page from a network site of a customer. The network site is hosted on behalf of the customer by the hosting provider who operates the computing environment . Where the customer is a merchant the hosting provider may operate a hosted electronic commerce platform in conjunction with the computing environment . The page request is provided to the network page generation environment which then may obtain the aggregated data.

Additionally the code corresponding to the dynamic data variables and the configurable function calls may be executed. In various cases XML documents or other data are obtained from the data sources . The data providers may be configured to automatically transform XML documents or other data into a format easily suited for use by the EL expressions or other code in the page generation code . For example XPath or XQuery may be used to access the data in the XML document and one or more Java objects may be generated from the data. The Java objects may be accessed by the page generation code supplied by the customer relative to the dynamic data variable .

Requests to obtain data from the data sources may result in various errors e.g. HTTP error HTTP error and so on. Such errors may be propagated back to the page generation code . Consequently the page generation code may include error handling code to deal with a situation in which a dynamic data variable is set to an error code and or a situation in which a configurable function call produces an error code.

The page generation code for the requested network page is executed by the network page generation environment . The network page generation environment facilitates access to the aggregated data by the page generation code . The page generation code generates the network page and the network page server application serves up the network page to the client in response to the page request .

In some embodiments the page generation code is restricted from accessing one or more of the data sources . The customer supplied page generation code may be isolated from one or more of the data sources for purposes of complying with PCI DSS and or other security standards. Consequently the data from the data sources may be accessible for example only as dynamic data variables or through configurable function calls .

Resource consumption limits may be enforced upon the configurable function calls and the dynamic data variables . As an example a maximum size limit may be enforced for XML documents obtained from data sources . As another example a maximum time limit may be set for execution of the code that obtains the data for the dynamic data variables and or the configurable function calls . Thus the network page generation environment may not wait indefinitely for data from a data source . When a timeout or other limit is enforced upon a configurable function call or a dynamic data variable an error may be produced which may be handled in the page generation code .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the network site configuration application according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network site configuration application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network site configuration application obtains page generation code and potentially one or more configurable function definitions from a customer whose network site is hosted by the hosting provider who operates the computing environment . The network site configuration application may be configured to authenticate a client associated with the customer. In box the network site configuration application determines whether the page generation code and the configurable function definitions are is valid. In various examples validity may depend on compliance with security policies and other restrictions that may be evaluated at or before compile time. If the page generation code or the configurable function definitions are not valid the network site configuration application rejects the page generation code and or the configurable function definitions in box . An error may be presented to the customer. Thereafter the portion of the network site configuration application ends.

If the page generation code is valid the network site configuration application proceeds from box to box . In box the network site configuration application determines whether the page generation code includes one or more configurable function calls . If so the network site configuration application transforms the configurable function calls to one or more service calls and or other code in box . The network site configuration application proceeds to box . If the page generation code does not include one or more configurable function calls the network site configuration application proceeds from box to box .

In box the network site configuration application determines whether the page generation code includes one or more dynamic data variables . If so the network site configuration application continues to box and transforms the dynamic data variables into one or more service calls and or other code. The network site configuration application proceeds to box . If the page generation code does not include one or more dynamic data variables the network site configuration application continues from box to box .

In box the network site configuration application compiles the page generation code . For example the network site configuration application may compile the page generation code from a JSP into a servlet. The resulting servlet code may also be compiled into bytecode for execution by a Java Virtual Machine JVM or directly by a processor circuit of the computing environment . In some embodiments the page generation code may be interpreted rather than compiled. In box the network site configuration application configures the network page generation environment to execute the compiled page generation code for one or more network pages for the network site of the customer. Thereafter the portion of the network site configuration application ends.

Continuing on to shown is a flowchart that provides one example of the operation of a portion of the network page generation environment according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page generation environment as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network page generation environment obtains a page request from the client by way of a network page server application . The page request indicates a network page from a network site of a customer. The network site is hosted by the hosting provider who operates the computing environment . In box the network page generation environment obtains or fetches page generation code corresponding to the requested network page .

In box the network page generation environment determines whether the page generation code accesses one or more data objects provided by one or more data providers . The access may correspond to one or more dynamic data variables . If the page generation code does access such data objects in box the data provider in the network page generation environment obtains data from a data source . In one example such data corresponds to an XML document . In box the data provider in the network page generation environment transforms the obtained data into one or more data objects. Where the data is an XML document the data provider may employ XPath code to transform the XML document into one or more Java objects. In box the network page generation environment includes the data objects in the scope of the page generation code .

In box the network page generation environment executes the page generation code . In doing so the network page generation environment may perform various runtime checks to ensure that the page generation code does not include any impermissible code or content. In box the network page generation environment assembles the network page using the output of the page generation code and potentially other data. In box the network page generation environment sends the generated network page to the client in response to the page request . Thereafter the portion of the network page generation environment ends.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device corresponds to a representative computing device which may be employed in the computing environment . The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the data sources the network page generation environment the network page server application the network site configuration application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the data sources the network page generation environment the network page server application the network site configuration application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the network site configuration application and the network page generation environment . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the data sources the network page generation environment the network page server application and the network site configuration application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media.

More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

