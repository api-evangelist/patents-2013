---

title: Data visualization techniques
abstract: Systems and methods in accordance with various embodiments of the present invention provide for representing a plurality of data values of a hierarchical dataset as graphical elements in a configurable data visualization. A first data visualization may be displayed in a data visualization display page, along with a user interface. A selection of a rendered root node and rendered leaf nodes to be displayed in a second data visualization is received from the user interface. Based on the selection of the rendered root node and rendered leaf nodes, a number of depth levels to display is determined. Also, which of the depth levels to display are identified based on the selection of the rendered root node and rendered leaf nodes. The second data visualization is rendered based on the determined number of depth levels and the identified depth levels.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454291&OS=09454291&RS=09454291
owner: Oracle International Corporation
number: 09454291
owner_city: Redwood Shores
owner_country: US
publication_date: 20131211
---
This application is a continuation of prior U.S. application Ser. No. 11 773 895 filed on Jul. 5 2007 titled DATA VISUALIZATION TECHNIQUES and also is related to the following U.S. patent applications each of which is hereby incorporated herein by reference 

U.S. patent application Ser. No. 11 773 880 filed Jul. 5 2007 entitled AGGREGATE LAYOUT FOR DATA VISUALIZATION TECHNIQUES 

U.S. patent application Ser. No. 11 773 916 filed Jul. 5 2007 entitled FILTERING FOR DATA VISUALIZATION TECHNIQUES 

U.S. patent application Ser. No. 11 773 908 filed Jul. 5 2007 entitled LINKING GRAPHICAL ELEMENTS OF DATA VISUALIZATIONS and

U.S. Pat. No. 8 139 063 filed May 7 2007 entitled RENDERING DATA VISUALIZATION WITH MINIMAL ROUND OFF ERROR .

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This invention relates generally to the visual display of data and more particularly to improvements to data visualization techniques.

In an increasingly competitive world enterprises are constantly in need of business intelligence that empowers the decision makers in the organization to act on the information and thus impart extra competitive edge to the organization s products and services. Businesses succeed or fail based on their ability to accurately quantify how many leads become orders identify their most profitable customers forecast manufacturing capabilities manage reliable supply chains and create sales projections for example.

However obtaining information on which decision makers can act presents several practical challenges. One such challenge is the massive amount of data available to the enterprise in today s Information Age. Conversion of data to information which can be readily understood is a significant obstacle. Additionally enterprises today have data spread over multiple data sources ranging from legacy systems to relational databases and text files. Even if these problems are surmounted publishing information in a secure and reliable manner remains another concern for enterprises.

Reporting systems with data visualization functionalities can provide users with the capability to convert diverse data into information that can be easily visualized and deciphered to exploit the information and learn more about the business. Visualization components can emphasize high level patterns and trends in large and complex datasets. One way of presenting vast amounts of data as comprehendible information is by representing the data in a treemap format. A treemap is a visual representation of a dataset which is typically hierarchical in nature.

A treemap generally includes a collection of two dimensional cells of rectangular shape each of which represents one or more data entries of the dataset. The cells of a treemap have characteristics such as area color and texture that represent the data. The cell characteristics may also be known as graphical attributes. If the dataset is in the form of a table in a database the rows of the table may be represented by treemap cells and the columns of the table may represent various data dimensions. A data dimension is a set of related data values such as the values in a column of a database table or correlated fields in an XML file that are marked with a common tag. The data dimensions may be mapped to different cell characteristics of the treemap visualization. Thus a viewer of the treemap can gain insight into data by examining a grouping of cells and cell characteristics.

One barrier to the wide use of data visualizations is the limitation in available features which make the visualized information more meaningful to users. For example current treemap solutions do not provide for ways to vary an aggregation function used for generating the data visualization. End users may have certain expectations about how the areas of the lowest level groups are calculated and these expectations may have an affect on the utility of the treemap. For example when the data values mapped to the innermost rectangles are average data values such as average page load time end users may expect the relative areas of the lowest level groups to also be averages. Current versions of treemap components do not address this issue but instead have a fixed method for determining the areas of the lowest level groups which are typically implicit in the graph s definition and construction. Typical methods include the fixed methods of either summation setting the relative areas of the groups to the summation of the values within each group and count setting the relative areas of the groups to the total number of values within each group . It would be useful to vary the aggregate function that is used to represent groups at different hierarchical levels of a hierarchical data visualization.

Another barrier to the use of data visualizations is that typical solutions provide default visible depth levels which cannot be modified by users. In order to change the currently viewed hierarchy level other visualization techniques provide a drilling option which shows a lower depth level for a selected cell. A sliding window which indicates the number of depth levels that are currently visible may be shown when drilling down. However the only depth levels that are shown are those that are in the current representation. Thus users can easily get lost because there is no indication of an overview of how the current view corresponds to the entire hierarchical data set.

Moreover visualization techniques tend to emphasize a small number of primary or first order effects making it difficult to appreciate secondary or second order effects. For example a plot of a data set with values that are distributed non uniformly will invariably emphasize the most unusual data values the outliers. Almost any plot of the data set 1 2 3 4 5 1000000 will reveal that one value is unusual but it may make it difficult to appreciate the linear relationship of the similar values. Filters are used to isolate certain ranges of the data values to be displayed in the data visualization. Generally prior art methods filter based on user selected ranges. However a user is unable to easily effectuate filtering using these ranges when the user has quickly isolated the cells on the treemap which illustrate the first order effects. Moreover filtering based on ranges may have the added disadvantage of simultaneously hiding multiple data values at different depth levels causing dramatic changes to the appearance of the data visualization. In addition it may be difficult to model the data values that contribute to the first order effect with a filter that is set up in advance.

Further solutions are incapable of linking selected portions of the graphical visualization to related information without serious drawbacks. Current data visualization techniques include actions that drill in to expose details of a selected cell. These drill in techniques have the disadvantage that they must be pre programmed into the component s code. Moreover the drill in action is typically limited to actions that can only be accomplished by the component itself. Essentially the drill in function is narrowed to initiating actions which have been explicitly anticipated by the authors of the visualization component.

In accordance with an embodiment of the invention systems and methods for improvements to data visualization techniques is provided. A plurality of data values of a hierarchical dataset may be represented as graphical elements in a configurable data visualization. A first data visualization and a user interface is displayed in a data visualization display page the first data visualization is based on a default configuration of hierarchical depth levels of the dataset. Furthermore a selection of a rendered root node to be displayed in a second data visualization and a selection of rendered leaf nodes to be displayed in the second data visualization is received through the user interface. Based on the selection of the rendered root node and the selection of the rendered leaf nodes a number of depth levels to display is determined and which of the depth levels to display is identified. The second data visualization is rendered based on the determined number of depth levels and the identified depth levels.

In one embodiment the user interface limits the selection of the number of depth levels to be displayed. In another embodiment the user interface limits the selection of the rendered leaf nodes to be displayed in the second data visualization. Moreover in yet another embodiment the user interface limits selection of the rendered root node to be displayed in the second data visualization. The user interface may perform any one or more functions in the form of a double ended slider bar where the first end of the slider bar selects the rendered root node and a second end of the slider bar selects the rendered leaf nodes.

A further understanding of the nature and the advantages of the inventions disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.

Systems and methods described herein provide for improvements to data visualization techniques. The present invention includes systems and methods for improving the usefulness and usability of visualization techniques. Implemented as an application programming interface API an automated or semi automated process and or an interactive menu for example users may vary the aggregation function used for determining aggregate values of various graphical attributes such as area or color cell characteristics in a treemap configuration. Moreover it may be useful to automate or partially automate the selection of an appropriate aggregation function. The aforementioned aggregation solutions could be implemented for other hierarchical visualization techniques.

Current treemap solutions are able to show only a limited number of hierarchical levels at a time. When viewing an inner depth level during a drill down action outer depth levels are cut off from view. Likewise when panning out to view an outer depth level inner depth levels and leaf nodes may be removed from view in the treemap component. One solution is to provide a tool to enable the user to dictate the number of depth levels to view which may be subject to various constraints. Moreover such a tool may also enable a user to select which of a plurality of depth levels to view in the data visualization. The aforementioned solutions could be implemented for various hierarchical visualization techniques.

Additionally improved methods for filtering are provided which enable the user to filter elements of the data visualization more intuitively. The user can select particular graphical elements within the treemap component rather than using ranges of values to filter cells. The aforementioned filtering solutions could be implemented for other hierarchical or non hierarchical visualization techniques.

Improved methods for linking graphical elements in the data visualization with related information are provided. Web accessible information may be linked easily to cells of the data visualization using string substitution. The string substitution operates to modify substrings within a URL which is paired to a data table of a dataset. In one embodiment script instructions replace the substrings with a constant string. More than one substring may need to be modified. Thus web accessible processes programs and or services may be linked to a selected cell as related web accessible information.

In the description that follows the present invention will be described in reference to embodiments of subsystems on a platform for a software application such as a database application. However embodiments are not limited to any particular architecture environment application or implementation. For example although embodiments will be described in reference to database applications the invention may be advantageously applied to any software application. Therefore the description of the embodiments that follows is for purposes of illustration and not limitation.

In another example a pie graph typically uses a percentage aggregate function where the area of each pie slice corresponds to a ratio of percentages of data values. In yet another example treemaps may use a summation aggregate function to display hierarchical data sets.

Vendors of visualization software tools employ the use of a single aggregation function per type of data visualization and do not permit the user selection of aggregate functions. The ability to select an aggregation function for layout of data visualizations makes the data visualization more informational customizable configurable and extensible. Furthermore the ability to select and modify an aggregate function allows the end user or designer to make the information conveyed by the data visualization to be more meaningful based on the end user s perceptions and expectations. Further details for determining aggregate values will be discussed below with regard to .

At step depth levels to display are determined. In one embodiment the depth levels to display are determined by a default configuration. In another embodiment a user selects the depth levels to display. A user interface such as a menu may be provided to enable a user to toggle between the number of depth levels that are shown in the data visualization. Moreover the particular depth levels to view may be selected. In one embodiment the depth level menu is in the form of a slider bar. Other user selectable menus may also be implemented. Further details will be discussed below with regard to .

At step cells may be filtered out of a data visualization based on user selection. In one embodiment a user interface such as a graphic segment filter menu may be provided to enable a user to hide a selected graphic cell of a treemap component. A graphic cell may represent one or more data entries of the dataset. The ability to filter certain cells allows the treemap component to convey more meaningful information. For example outliers may be filtered such that the treemap component may visibly provide more information about the remaining data. Further details about filtering cells will be discussed below with regard to .

At step linking to related content may be generated based on user selection of a graphical element in the data visualization. A user interface such as a menu may be provided to enable a user to select a link or drill action for the selected graphical element such as a cell. Content related to the cell is provided to the user. Further details about the linking to related content feature will be discussed below with regard to .

At step a dataset to be visualized is selected and or received. In one embodiment the dataset is received from a data storage system such as a database. The data received is a range of values that will be represented using graphical elements such as rectangles within a graphical layout area. shows a screenshot of an exemplary data table fragment. The data table fragment may relate to retail merchandising. Each row of table stores information related to a purchase order. The rows of table may have data dimensions that include Order Number Item Organization Customer Due Date Dollar Value Avg Days Late Quantity Item Category Days Late and Planner. The system may determine the data dimensions which are possible candidates for mapping to area in the data visualization. Each row is interpreted as a data entry which may be displayed as a leaf node in the treemap hierarchy. In most cases the dataset does not include an aggregate value for a hierarchical group. As such the aggregate values may be determined as described below.

At step hierarchy depth levels are determined from one or more possible hierarchies. More specifically a particular hierarchy is determined which specifies one data dimension per level of hierarchy i.e. one data dimension per group . The hierarchy governs how the data entries in the represented dataset are grouped in the treemap. Data dimensions of a dataset such as data table attributes may be correlated to depth levels. Multiple levels of hierarchy may be displayed simultaneously by using nesting rectangles where depth levels may be nested within each other. The hierarchy depth levels may be determined by selecting a data dimension for example a data table column of data table fragment to be associated with each depth level. The hierarchy depth level may be automatically selected for a default configuration. In another embodiment the hierarchy depth level is selected by a user.

The selected hierarchy depth levels may be based on one or more possible hierarchies available for the dataset as depicted in a hierarchy table. shows an exemplary hierarchy table. In one embodiment the hierarchy table has two columns Group Name and Depth Level. In this example the group name column is a string data type and the depth level column is an integer data type. Each row in the hierarchy table associates a column from the dataset with a level of hierarchy. The first level of hierarchy includes the column names Organization Customer Planner Item Category and Days Late. The second level of hierarchy includes the column names Customer Days Late Item Category and Organization. The third level of hierarchy includes the column name Item. During initialization the hierarchy table is read by the system and a valid initial hierarchy is selected by the system. The system may also produce various menus in order to enable the user to change the initial hierarchy depicted in the visualization. Other methods of selecting hierarchy depth levels may be used.

A selected hierarchy depth level may be indicated on a treemap display page. shows a screenshot of an exemplary treemap component and user interface. In one embodiment the treemap display page is a published output of the an entire sourced data table wherein the fragment of the entire sourced data table is represented by . A user interface includes a hierarchy tab an area tab and a color tab . In this example the hierarchy tab indicates the depth levels to include the following data dimensions in decreasing order of hierarchy Organization Customer and Item.

Referring back to at step an aggregate function is determined. In one embodiment an aggregate function is determined from a plurality of aggregate functions. The plurality of aggregate functions may include for example average such as mean or median count maximum minimum and summation. In one embodiment the aggregate functions are determined for the depth levels. Moreover aggregate functions may be determined for the distinct graphical attributes of the data visualization. In one embodiment aggregate functions may be selected for any combination of depth level and or graphical attribute.

In one embodiment a user or designer may have an option to select an aggregate function to be applied to one or more depth levels and or one or more graphical attributes such as in the form of an interactive menu of a user interface. The user interface is generated to enable a user or designer of the data visualization to initialize before generation of the data visualization or to modify an aggregate function used on the hierarchical visualization. The selection made by the user or designer is then received from the user interface.

In another embodiment the aggregation function is automatically selected such as for a default configuration and may be based on selection intelligence. In one embodiment the selection intelligence is based on the inherent properties of the data visualization. The summation function is appropriate for a 2 dimensional space filling data visualization technique. For example a treemap data visualization maps a data dimension to cell area. The default configuration may select the summation aggregation function. As previously described the values for groups are determined by adding the values of the children nodes. For 2 D space filling visualizations the summation function allows the end user to make more accurate comparisons of cells across various groupings.

In another embodiment the selection intelligence is based on the metric used to measure the values of the nodes i.e. the type of data and selecting the aggregate function which is the same as the metric used to measure the values of the nodes. For example if the data dimension that is mapped to a graphical attribute such as area is an average value the end user expects the aggregate group representation to be an average as well. Thus when data that is mapped to graphical attributes is an average the default configuration selects an average aggregate function. An average aggregation function may include mean median and other known average functions. In another embodiment if the data dimension is a total or aggregate value i.e. summation of other values the summation function is selected as the default.

In another embodiment the selection intelligence is dependent upon the type of graphical attribute. For the color graphical attribute the default configuration selects an average aggregation function. A data value may be associated with the color graphical attribute. In large groupings the aggregation of these data values using the summation function for the color graphical attribute become similar shades of a single color. The relevant information for the end user becomes obscured. Using a mean or median aggregation function enables the end user to garner meaningful information from the visualization.

The aforementioned intelligence models the central tendencies and or expectations of end users. Other selection intelligence may be used based on the task to be performed by the user. For example if the user s task is to find the groups with the largest average value the Average aggregation function might be used. In another embodiment if the user s task is to find the groups with the largest total value the Summation aggregation function might be used. Additional selection intelligence may be used based on the metric of the data dimension type of graphical attribute and the inherent properties of the data visualization itself. In one embodiment the selection intelligence may be ranked such that one selection of an aggregate function takes priority over another. In another embodiment aggregate functions may be selected by a combination of receiving the selection from the user interface and selection intelligence.

Another example of intelligence may be based on user role. For novice users the Summation aggregation function may be used to allow accurate comparisons of areas across groups while other aggregation functions may be reserved for more experienced users. Combinations of different types of intelligence may be implemented. For example user role and metric of data dimension can be combined such that for novice users the Summation aggregation function is used unless the data dimension mapped to cell area is an average value in which case the Average aggregation function is used.

At step the aggregate values for each group are determined. The selected aggregate function is used to determine the aggregate values for each of the hierarchical groupings. In one embodiment the aggregate values are determined recursively from the leaf nodes to the highest level of hierarchy. The aggregate values for subsequent levels of hierarchy are determined in successive increasing order. In one embodiment a data table for each hierarchical depth level is generated where each data table includes the aggregate values for a hierarchical depth level.

For purposes of this example the hierarchy depth levels have been determined to include the following data dimensions in decreasing order of hierarchy Organization Customer and Item as indicated by hierarchy tab of . Hierarchy groups the data entries of data table based on the values of the data entries in the organization column for a top level hierarchy in the customer column for a second level hierarchy and in the item column for a third level hierarchy. More specifically the values in each of hierarchical columns e.g. organization customer and item in the data table are examined. Rows with identical values of organization customer and item are considered to belong to a same category or group. The category may take a name that is equal to the value. Other grouping methods may also be implemented for example grouping methods which match as determined by an application specific matching function. For example a function that considers two values to match if their prefixes of a certain length match if they are dates occurring in the same year and month or if they are numerical values with differences that lie within a specified range.

Starting at the leaf nodes of the hierarchy Organization Customer Item the data values in data table fragment are grouped by the lowest level of hierarchy in this case by Item. The value of each data entry associated with the data dimension mapped to a graphical attribute within the group are aggregated using the selected aggregate function. For example the data dimension that is mapped to the area graphical attribute is Dollar Value. The values of each data entry under the Dollar Value column within each of the Item groups are aggregated. In another embodiment the AvgDaysLate column is mapped to the color graphical attribute. Accordingly the values of each data entry associated with the AvgDaysLate column within each of the Item groups are aggregated. For example the values of 21 and 3 for the group San Antonio Sports Authority Item MRX013 are aggregated. The item MRX013 may be a soccer ball for example. The value of 47 comprises the group of Budapest Sports Authority Item MRX013. The value of 8 comprises the group of Fort Worth Sports Authority Item MRX013. The value of 48 comprises the group of San Antonio Target Item MRX013. The values of 26 and 13 are aggregated for the group of Budapest Target Item MRX013. Using summation for example the value for this group is 39. The values of 35 and 37 are aggregated for the group of Fort Worth Target Item MRX013. Using summation the value for this group is 72.

For the TRBZ007 Item groupings the item TRBZ007 may be soccer cleats for example. The values of 34 and 22 comprise the group of Fort Worth Sports Authority Item TRBZ007. Using summation for example the value for this group is 56. The value of 9 comprises the Budapest Target Item TRBZ007 group. The values of 3 and 21 are aggregated for the Fort Worth Target Item TRBZ007group. Using summation the value for this group is 24. Thus the aggregate values for each group for the Organization Customer Item hierarchy level have been determined.

Referring back to processing continues to step where it is determined if the aggregate values for the highest level of hierarchy have been determined. The determination is made by comparing the current level of hierarchy to the hierarchy depth levels determined in step . If the values for the highest level of hierarchy have been determined then processing continues to step . Otherwise the current hierarchy is incremented to the next higher level of hierarchy and processing loops back to step . In one embodiment if the graphical attribute for which aggregate values have been determined is the color cell characteristic processing ends after step because color values are not required when performing layout in step .

For example the current hierarchy is incremented to the Organization Customer hierarchy level. The aggregate values for the area and or color data dimensions are determined for each group within the Organization Customer depth level using the values computed within the previous iteration of the recursive loop. For the color data dimension the previously computed values of 8 Item MRX013 and 56 Item TRBZ007 are aggregated for the Fort Worth Sports Authority group. The value for this group using summation is 64. The values of 72 Item MRX013 and 24 Item TRBZ007 are aggregated for the Fort Worth Target group. The value for this group using summation is 96. The value of 47 Item MRX013 comprises the Budapest Sports Authority group. The values of 39 Item MRX013 and 9 Item TRBZ007 are aggregated for the Budapest Target group. The value for this group using summation is 48. Likewise the aggregate values for all groups within the level of hierarchy are determined.

Since the Organization Customer depth level is not the highest level of hierarchy processing once again loops back to step . At the Organization depth level the aggregate values for the area and or color data dimensions are determined for each group. The groups include San Antonio Budapest and Fort Worth. The values of 96 Target and 64 Sports Authority are aggregated for the Fort Worth group. Using summation the value for the Fort Worth group is 160. The values of 47 Sports Authority and 48 Target are aggregated for the Budapest group. Using summation the value of the Budapest group is 95. The values of 24 Sports Authority and 48 Target are aggregated for the San Antonio group. Using summation the value of the San Antonio group is 72.

A same or different aggregate function may also be applied for determining aggregate values of various graphical attributes. The aggregation is performed in a similar manner as described above. Also a same or different aggregate function may be applied for determining aggregate values for each depth level. Thus for a current level of hierarchy and for each group within the current level of hierarchy the data values within the data dimension being mapped to the color graphical attribute is aggregated.

Referring back to once it is determined that the aggregate values for the highest level of hierarchy have been determined processing continues to step where layout is performed in a graphical layout area. In the context of treemap data visualizations areas for layout are determined from the top level of hierarchy to the lowest level of hierarchy. During layout of the data visualization the magnitude of the value of the graphical attribute of each group may be proportional to the magnitude of the result of each group s aggregation function. For example the treemap component of shows the area occupied by the groups within each level of hierarchy is proportional to the magnitude of the group s value for area. It should be noted that not all graphical attributes may be proportional to the group value. For example the treemap shows the Organization groups i.e. Fort Worth San Antonio and Budapest and the Customer groups i.e. Target Sports Authority Costco etc. without the color graphical attribute and are all the same shade of gray.

At step of the data visualization is rendered onto a graphical display region. In one embodiment the graphical display region is placed within a graphical display page. The graphical display page may include a graphical user interface GUI such as a menu to enable a user to select or change the aggregate functions used per depth level and or per graphical attribute. When it is detected that a user has selected or changed the aggregate functions to be used processing may loop back to step and the new aggregate values are determined. Further when it is detected that the data dimensions mapped to hierarchy depth levels have changed such as if a user changed the hierarchy from Organization Customer Item to Customer Organization Item processing may loop back to step .

In another embodiment the data visualization technique may be used in a more flexible manner that enables users to choose a graph family rather than a specific graph type. For example a user could specify a graph family such as bar graph and switch between various aggregation functions. Choosing summation would show the data as a stacked bar graph while choosing percentage would show the data as a percent stacked bar graph. The advantage of such a system is that users can focus on extracting information from their data without first having to understand the properties of different graph types and matching the graph type to fit the data.

The data values corresponding to these cells reveal that the apparent difference in size is an accurate depiction of the difference in the magnitude of the cell values. Table fragment shows that the dollar value of cell is 146 293 which is the summation of the dollar values of 68150 and 78143. The dollar value of cell is 24142. The area occupied by cell may appear to be proportionally larger than the area occupied by cell . In this example cell appears to be about six times larger than cell . Thus even though the areas for cells and are in separate groups and separate parts of the treemap configuration the comparison between the cells can be made accurately.

The determination of aggregate values and layout of those aggregate values may be implemented for various types of hierarchical data visualizations. For example a cluster bar graph could be extended to replace one or more cluster of bars with a single aggregate bar. The length of the aggregate bar is determined by any one of a number of selectable aggregation functions. The user or designer may select the aggregate function using for example a GUI API etc. In another embodiment instead of aggregating clusters each series of differently colored bars could be aggregated to form a single cluster using any one of a number of aggregation functions selectable by the user. Another example may include a hierarchical pie chart where a user may drill in and view an aggregation of the children nodes of a selected slice. Similar aggregation methods can be applied to various graphical attributes such as area and color for the selected slice of the pie chart.

The interactive control may enforce various constraints or limitations. In cases where multiple levels of hierarchy are possible the depth level interactive control may limit the number of depth levels that are rendered in the treemap to a maximum threshold number. This limitation ensures that the inner most nested cells of the treemap are large enough for the cell area and color to be visible and distinguishable. The maximum threshold may be determined automatically using intelligence that associates a max threshold with each type of data visualization. In one embodiment treemaps are generally less useful when displaying more than about four levels of hierarchy. Accordingly the maximum threshold may be four levels of hierarchy rendered for a treemap component. Other types of hierarchical data visualizations may be associated with other thresholds. In another embodiment the maximum threshold may be selected by a designer through an API or GUI.

At step the particular depth levels to display are identified. Where multiple depth levels are possible and a subset of the possible depth levels are to be displayed the particular depth levels may be identified by a user. In one embodiment a rendered root may be selected. As used herein a rendered root is a hierarchical data dimension which is displayed as if it were the root of the hierarchical data set. In this example the rendered root i.e. Organization of the treemap component is not the actual root of the hierarchical dataset. Moreover rendered leaf nodes may be selected. As used herein rendered leaf nodes are nodes which correspond to a hierarchical data dimension which is displayed as if it were the leaves of the hierarchical data set. In one embodiment a user may specify contiguous levels of hierarchy to be displayed in the data visualization. Alternatively non contiguous depth levels may also be specified. In one embodiment an interactive control is presented to a user for example in a user interface region of a treemap display page for enabling the user to select the particular depth levels. For example if the determined number of depth levels to be displayed is two it is determined whether the Organization Customer depths levels will be displayed or the Customer Item depth levels will be displayed. Where non contiguous depth levels may be selected it will also be determined whether Organization Item depth levels will be displayed. The interactive control may be in the form of a double ended slider checkboxes corresponding to each possible level of hierarchy or similar user selectable interfaces used to control the visible depth levels of a hierarchical dataset.

The interactive control may be subject to other constraints. For example a constraint may be implemented to limit the user s selection such that the innermost nested rectangles correspond to groups that are at some level above the level of the leaf nodes. In another embodiment the root node may be removed such that the user may not have the option to select the root node for display.

At step a current visualization is rendered to include the selected number of visible depth levels and or the particular depth levels. In one embodiment aggregate values and layout have already been computed and any change in the visible depth levels does not require re computation of the aggregate values or layout. It should be noted that although the depth levels and hierarchical values have been described in the context of hierarchy tables and aggregate values the interface enabling a user to specify currently visible depth levels as described herein may be used in conjunction with other hierarchical methods and aggregation techniques.

The interactive control could be implemented for various hierarchical visualization techniques. For example the interactive control may be implemented on a hierarchy grid or tree table which displays the hierarchical tree structure in a first column and data attributes in subsequent columns. In another embodiment of a tree structure the first column includes the root node parent nodes and child nodes for each row and the attributes associated with the nodes in a second column. The tree table may include a slider bar to control either or both of the number of depth levels to view and the particular depth levels to view. Once the selections have been made the data visualization is rendered with the updated information. The interactive control may also be implemented on a multidimensional viewer MDV which is an extension to a data table with graphic bars representing textual data. Each graphic bar represents a data entry in the specified levels of hierarchy. The MDV may also include a slider bar to control either or both of the number of depth levels to view and the particular depth levels to view. Once the selections have been made the data visualization is rendered with the updated information.

At step aggregate values for each group are determined. Where the data set is hierarchical aggregate values for each group are re computed to account for the one or more filtered data values. The selected graphical element is effectively a child node and is not considered when determining the updated aggregate values for the parent node. Known methods of performing aggregation may be used. Alternatively the aggregation method as described herein with reference to may be used. In one embodiment the data values to be filtered are flagged. All flagged data values are excluded from the aggregate value. If a last child of the parent node is selected to be filtered the parent node may be filtered as well.

At step the layout is re determined taking the one or more filtered data values into account. The area occupied by a parent node may be reduced due to the filtered data value depending on the aggregation function. Likewise the area occupied by other elements and or groups may also be affected. At step the data visualization is rendered to reflect the filtered element.

The feature of filtering user selected elements is further described with regard to . shows an exemplary data table. In this example the data table represents sales orders for Cycles Incorporated Cycles Inc. . The table includes ID or index Location Order Size Order Frequency Root and Severity columns.

Although the preceding embodiments have been described using a treemap visualization the method of filtering as taught herein may be implemented for other visualization techniques. In one embodiment visualization techniques which map data values to ratios of areas such as pie graphs are greatly affected by outliers which can consume an inordinate amount of the visible area making secondary effects particularly difficult to appreciate. Filtering as taught herein may serve as an effective tool for realizing those secondary effects.

At step a user selected cell is determined for a drill action. In one embodiment an initial treemap configuration is generated. The treemap configuration may serve as a user interface which receives the user selections of cells. A user may designate using a cursor a treemap cell upon which a drill action is to be performed. The user may select the designated cell by a mouse click. The selected cell which represents one or more data entries of the data table is then determined. Upon selection of the cell a graphical user interface such as a menu may be presented including an option to display related information such as an option to drill. A user may specify the option to drill by selecting the option in the menu. Other known methods of determining a user selected graphical element for a drill action may also be used.

At step a content identifier is generated using string substitution. The selected cell is associated with one or more data entries each of which are associated with a unique identifier. In one embodiment each row of the data table is a leaf node of the data visualization. The first column of the data table is expected to be an index. In another embodiment a unique identifier may be determined for each data entry by other methods. Once the drill action is specified by a user the index value is used as a unique identifier for each data entry or row. The URL paired to the data table name in step includes the generic substring which is then replaced by the identifier of the selected treemap cell node. For example URL http bug.cyclesinc.com48 queryId TM ID secondaryId TM LABEL may be associated with a particular data table of the dataset. Other URLs may be associated with other data tables of the dataset. The URL includes a generic substring TM ID that will be replaced by the unique identifier of the selected treemap cell node. Referring to data table fragment of the first column is an index column. The data value 10011 under the index ID column for a data entry corresponding to a selected cell with order number ORD 272536 for example replaces the generic substring TM ID in the URL. In other words the generic substring occurrences in the URL string are replaced with another string that is the index identifier of the user selected cell. In an alternative embodiment a URL including a TM LABEL in addition to the identifier substring will be replaced by a label of the data entry corresponding to the selected cell. The labels are determined by the current values of the hierarchical categories.

For example a user may select leaf element or leaf cell of . A leaf cell is at the lowest displayed level of hierarchy which in treemap is of type Item. The particular leaf cell may map to the last row in table . In one embodiment the generic substring TM ID may be replaced by the value in the ID column 10023 and the generic substring TM LABEL may be replaced by the value in the column that holds the values associated with Items or MRX013 . In another embodiment if a user selected a non leaf node cell such as the Target cell within the Fort Worth cell the generic substring TM LABEL might be replaced by a string to indicate the selected group such as Fort Worth Target .

In another embodiment a group element or group cell representing an aggregate value of a plurality of leaf nodes may be selected. In this case a data table of aggregate values is created during aggregation. Aggregate values may be determined as described with regard to or using prior art aggregation methods. Each row of the aggregate data table represents an aggregate value of a plurality of leaf nodes. Aggregate data tables may be determined for each level of hierarchy. Each aggregate value in the aggregate data table corresponds with a unique identifier. In one embodiment the aggregate data table includes an index column which may be used as the unique identifier. The index identifier corresponding to the selected aggregate cell replaces the substring TM ID in the URL. Likewise the substring TM LABEL may also be replaced with the current values determined from the hierarchical table.

At step a request for the related information is sent. In one embodiment a standard web browser is used to request the web content related with the generated content identifier URL. At step the requested information is received. For example the web browser may receive the requested content. At step layout is performed. This step may be bypassed if layout is not required. At step the requested information is rendered. Thus the functions of drilling to details of a cell or drilling through for example to a report are enabled. Moreover the drilling functions are enabled within a web environment across various applications in addition to the application schema associated with the data table and across various web servers.

Moreover the methods as taught herein may be extended to various other data visualizations with user selectable graphical elements such as a pie graph or a bar graph. Code within the visualization component may replace the substrings in the content identifier with an ID and possibly a Label of a selected slice of a pie or a bar of a bar graph. A standard web browser may then be used to request the web content associated with the generated URL. In one embodiment the content identifiers are specified as applet parameters. Applet parameters may be implemented for thick clients. In another embodiment content identifiers may also be specified as JavaScript string literals using JavaScript Object Notation JSON or HTML attribute tags which are stored in a web page s document object model DOM . These are retrieved and processed by JavaScript code. String literals or attribute tags may be implemented for thin clients.

In one embodiment a drill through function such as the drill to report function of links a selected cell to related information such as a report. In one embodiment the treemap components and are generated from a snapshot of the Bugs data table whereas reports or other functions performed beyond the visualization component are generated from a current state of the sourced data table or database if a data object spans multiple tables.

In most embodiments the system includes some type of network . The network may can be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example the network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

The system may also include one or more server computers which can be general purpose computers specialized server computers including merely by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. One or more of the servers e.g. may be dedicated to running applications such as a business application a Web server application server etc. Such servers may be used to process requests from user computers . The applications can also include any number of applications for controlling access to resources of the servers .

The Web server can be running an operating system including any of those discussed above as well as any commercially available server operating systems. The Web server can also run any of a variety of server applications and or mid tier applications including HTTP servers FTP servers CGI servers database servers Java servers business applications and the like. The server s also may be one or more computers which can be capable of executing programs or scripts in response to the user computers . As one example a server may execute one or more Web applications. The Web application may be implemented as one or more scripts or programs written in any programming language such as Java C C or C and or any scripting language such as Perl Python or TCL as well as combinations of any programming scripting languages. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase IBM and the like which can process requests from database clients running on a user computer .

The system may also include one or more databases . The database s may reside in a variety of locations. By way of example a database may reside on a storage medium local to and or resident in one or more of the computers . Alternatively it may be remote from any or all of the computers and or in communication e.g. via the network with one or more of these. In a particular set of embodiments the database may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers may be stored locally on the respective computer and or remotely as appropriate. In one set of embodiments the database may be a relational database such as Oracle 10g that is adapted to store update and retrieve data in response to SQL formatted commands.

The computer system may additionally include a computer readable storage media reader a communications system e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments the computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

The computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. The communications system may permit data to be exchanged with the network and or any other computer described above with respect to the system .

The computer system may also comprise software elements shown as being currently located within a working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . It should be appreciated that alternate embodiments of a computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by the computer. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

Although the present invention has been described in detail with regarding the exemplary embodiments and drawings thereof it should be apparent to those skilled in the art that various adaptations and modifications of the present invention may be accomplished without departing from the spirit and the scope of the invention. Thus by way of example and not of limitation the present invention is discussed with regard to treemap components as illustrated by the figures. However the methods may be implemented for various data visualizations both hierarchical and non hierarchical in nature unless specified otherwise. Accordingly the invention is not limited to the precise embodiment shown in the drawings and described in detail herein above. The scope of the invention should therefore be determined not with reference to the above description but instead should be determined with reference to the pending claims along with their full scope or equivalents.

For the Examiner s convenience Applicants note that this application is a continuation of U.S. application Ser. No. 11 773 895. The claims of the present application are different and possibly at least in some aspects broader in scope than the claims pursued in the parent application. To the extent any prior amendments or characterizations of the scope of any claim or cited document made during prosecution of the parent could be construed as a disclaimer of any subject matter supported by the present disclosure Applicants hereby rescind and retract such disclaimer. Accordingly the references previously presented in the parent applications may need to be revisited.

