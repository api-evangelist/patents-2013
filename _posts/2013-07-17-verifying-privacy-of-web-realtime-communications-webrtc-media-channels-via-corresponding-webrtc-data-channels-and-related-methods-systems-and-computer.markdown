---

title: Verifying privacy of web real-time communications (WebRTC) media channels via corresponding WebRTC data channels, and related methods, systems, and computer-readable media
abstract: Verification of privacy of Web Real-Time Communications (WebRTC) media channels via corresponding WebRTC data channels, and related methods, systems, and computer-readable media are disclosed. In this regard, in one embodiment, a method for verifying privacy of a WebRTC media channel comprises establishing the WebRTC media channel between first and second WebRTC clients using a keying material. The method further comprises establishing a corresponding WebRTC data channel between the first and second WebRTC clients using the keying material, and negotiating, in the WebRTC data channel, a cryptographic key exchange. The method also comprises generating a first and a second Short Authentication String (SAS) based on the cryptographic key exchange in the WebRTC data channel. The method further comprises displaying the first SAS and the second SAS, such that a mismatch between the first SAS and the second SAS indicates an existence of a man-in-the-middle (MitM) attacker.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09112840&OS=09112840&RS=09112840
owner: Avaya Inc.
number: 09112840
owner_city: Basking Ridge
owner_country: US
publication_date: 20130717
---
The technology of the disclosure relates generally to Web Real Time Communications WebRTC interactive sessions.

Web Real Time Communications WebRTC represents an ongoing effort to develop industry standards for integrating real time communications functionality into web clients such as web browsers to enable direct interaction with other web clients. This real time communications functionality is accessible by web developers via standard markup tags such as those provided by version 5 of the Hypertext Markup Language HTML5 and client side scripting Application Programming Interfaces APIs such as JavaScript APIs. More information regarding WebRTC may be found in WebRTC APIs and RTCWEB Protocols of the HTML5 Real Time Web by Alan B. Johnston and Daniel C. Burnett 2Edition 2013 Digital Codex LLC which is incorporated herein in its entirety by reference. WebRTC provides built in capabilities for establishing real time video audio and or data streams in both point to point interactive sessions and multi party interactive sessions. The WebRTC standards are currently under joint development by the World Wide Web Consortium W3C and the Internet Engineering Task Force IETF . Information on the current state of WebRTC standards can be found at e.g. http www.w3c.org and http www.ietf.org.

To establish a WebRTC video audio and or data exchange two WebRTC clients such as WebRTC enabled web browsers may retrieve WebRTC enabled web applications from a WebRTC application server. Through the web applications the two WebRTC clients engage in a WebRTC offer answer exchange of Session Data Protocol SDP objects or other data objects used to describe the WebRTC media and or data streams to be established via a signaling i.e. non media related channel. The objects are used by the WebRTC clients to communicate and reach an agreement on parameters that define characteristics of the WebRTC interactive session. Once the WebRTC offer answer exchange is complete the WebRTC clients may then establish a direct peer connection with one another and may begin an exchange of media or data packets transporting the real time communications.

WebRTC requires media packets being exchanged in a real time interactive media session to be encrypted. Typically the Secure Real time Transport Protocol SRTP defined in RFC 3711 is used to provide a secure real time media flow. Two keying mechanisms are currently employed by WebRTC clients to generate a symmetric cryptographic key i.e. a secret key used by both WebRTC endpoints to encrypt WebRTC media. The first mechanism known as SDP Security Descriptions SDES and defined in RFC 4568 transmits a key from one WebRTC client to another as part of an SDP object exchanged during a WebRTC offer answer exchange over a signaling channel which passes through one or more intermediate servers. Another keying mechanism is Datagram Transport Layer Security for SRTP DTLS SRTP defined in RFC 5764. Instead of including a key during the WebRTC offer answer exchange DTLS SRTP generates or exchanges a key in a media channel separate from the signaling channel used for the WebRTC offer answer exchange. The most secure approach generates a key based on a Diffie Hillman DH key exchange between the WebRTC clients. Because the key used for encryption is never sent over the signaling channel through intermediate servers but rather is transmitted directly between the WebRTC clients DTLS SRTP offers a higher level of security than SDES.

However neither SDES nor DTLS SRTP can guarantee privacy of a WebRTC media channel against a man in the middle MitM attacker. A MitM attacker may be a third party that eavesdrops on communications between two WebRTC clients by secretly interposing itself in a WebRTC media channel between the WebRTC clients. As illustrated in a MitM attacker may intercept communications between WebRTC clients and by covertly establishing two WebRTC media channels a MitM WebRTC media channel for a compromised WebRTC media flow with the WebRTC client and a MitM WebRTC media channel for a compromised WebRTC media flow with the WebRTC client . In doing so the MitM attacker makes it appear that the WebRTC clients and are communicating directly via an apparent WebRTC media flow over an apparent WebRTC media channel when in fact the MitM attacker is secretly eavesdropping on the communications. SDES provides no protection against the MitM attacker because the key intended to encrypt the WebRTC media channel could be intercepted and subsequently stored or changed by the MitM attacker . Likewise DTLS SRTP alone offers no guarantee of privacy because the MitM attacker could carry out a DH key exchange with each of the WebRTC clients and while making it appear that they are conducting a DH key exchange with each other.

Embodiments disclosed in the detailed description provide verifying privacy of Web Real Time Communications WebRTC media channels via corresponding WebRTC data channels. Related methods systems and computer readable media are also disclosed. In some embodiments a first WebRTC client and a second WebRTC client include a first WebRTC privacy verification agent and a second WebRTC privacy verification agent respectively. The first WebRTC client and the second WebRTC client establish a WebRTC media channel using a keying material such as for example public private cryptographic key pairs. The first WebRTC privacy verification agent and the second WebRTC privacy verification agent then communicate via a WebRTC data channel that is established with the same keying material used to establish the WebRTC media channel i.e. the same public private cryptographic key pairs are used for establishing both channels such that a fingerprint or hash of the keying material matches . The first WebRTC privacy verification agent and the second WebRTC privacy verification agent negotiate a cryptographic key exchange via the WebRTC data channel by for example exchanging messages based on the ZRTP protocol defined by RFC 6189. Based on the cryptographic key exchange the first WebRTC privacy verification agent and the second WebRTC privacy verification agent then each generate a Short Authentication String SAS . If each generated SAS is determined to not match the other e.g. by displaying each SAS to users of the first and second WebRTC clients who read the SAS values aloud via the WebRTC media channel to compare the existence of a man in the middle MitM attacker in the WebRTC data channel can be indicated. For additional security if the SAS values are determined to match the first WebRTC privacy verification agent and the second WebRTC privacy verification agent may compare the fingerprints used to establish the WebRTC media channel and WebRTC data channel. If the fingerprints do not match the existence of a MitM attacker in the WebRTC media channel is indicated. Otherwise the WebRTC media channel is confirmed as private.

In this regard in one embodiment a method for verifying privacy of a WebRTC media channel is provided. The method comprises establishing by a first WebRTC client executing on a first computing device and a second WebRTC client executing on a second computing device a WebRTC media channel between the first WebRTC client and the second WebRTC client using a keying material. The method further comprises establishing using the same keying material a WebRTC data channel between the first WebRTC client and the second WebRTC client corresponding to the WebRTC media channel. The method additionally comprises negotiating in the WebRTC data channel a cryptographic key exchange between the first WebRTC client and the second WebRTC client. The method also comprises generating a first SAS and a second SAS based on the cryptographic key exchange in the WebRTC data channel. The method further comprises displaying the first SAS via the first WebRTC client and the second SAS via the second WebRTC client such that a mismatch between the first SAS and the second SAS indicates an existence of a MitM attacker.

In another embodiment a system for verifying privacy of a WebRTC media channel is provided. The system comprises at least one communications interface and first and second computing devices associated with the at least one communications interface. The first computing device comprises a first WebRTC client comprising a first WebRTC privacy verification agent. The second computing device comprises a second WebRTC client comprising a second WebRTC privacy verification agent. The first WebRTC client and the second WebRTC client are configured to establish a WebRTC media channel between the first WebRTC client and the second WebRTC client using a keying material. The first WebRTC privacy verification agent and the second WebRTC privacy verification agent are configured to establish using the same keying material a WebRTC data channel between the first WebRTC client and the second WebRTC client corresponding to the WebRTC media channel. The first WebRTC privacy verification agent and the second WebRTC privacy verification agent are further configured to negotiate in the WebRTC data channel a cryptographic key exchange between the first WebRTC client and the second WebRTC client. The first WebRTC privacy verification agent and the second WebRTC privacy verification agent are additionally configured to generate a first SAS and a second SAS based on the cryptographic key exchange in the WebRTC data channel. The first WebRTC privacy verification agent and the second WebRTC privacy verification agent are also configured to display the first SAS via the first WebRTC client and the second SAS via second WebRTC client such that a mismatch between the first SAS and the second SAS indicates an existence of a MitM attacker.

In another embodiment a non transitory computer readable medium is provided. The non transitory computer readable medium has stored thereon computer executable instructions to cause a processor to implement a method comprising establishing a WebRTC media channel between a first WebRTC client and a second WebRTC client using a keying material. The method implemented by the computer executable instructions further comprises establishing using the same keying material a WebRTC data channel between the first WebRTC client and the second WebRTC client corresponding to the WebRTC media channel. The method implemented by the computer executable instructions additionally comprises negotiating in the WebRTC data channel a cryptographic key exchange between the first WebRTC client and the second WebRTC client. The method implemented by the computer executable instructions also comprises generating a first SAS and a second SAS based on the cryptographic key exchange in the WebRTC data channel. The method implemented by the computer executable instructions further comprises displaying the first SAS via the first WebRTC client and the second SAS via the second WebRTC client such that a mismatch between the first SAS and the second SAS indicates an existence of a MitM attacker.

With reference now to the drawing figures several exemplary embodiments of the present disclosure are described. The word exemplary is used herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

Embodiments disclosed in the detailed description provide verifying privacy of Web Real Time Communications WebRTC media channels via corresponding WebRTC data channels. Related methods systems and computer readable media are also disclosed. In some embodiments a first WebRTC client and a second WebRTC client include a first WebRTC privacy verification agent and a second WebRTC privacy verification agent respectively. The first WebRTC client and the second WebRTC client establish a WebRTC media channel using a keying material such as for example public private cryptographic key pairs. The first WebRTC privacy verification agent and the second WebRTC privacy verification agent then communicate via a WebRTC data channel that is established with the same keying material used to establish the WebRTC media channel i.e. the same public private cryptographic key pairs are used for establishing both channels such that a fingerprint or hash of the keying material matches . The first WebRTC privacy verification agent and the second WebRTC privacy verification agent negotiate a cryptographic key exchange via the WebRTC data channel by for example exchanging messages based on the ZRTP protocol defined by RFC 6189. Based on the cryptographic key exchange the first WebRTC privacy verification agent and the second WebRTC privacy verification agent then each generate a Short Authentication String SAS . If each generated SAS is determined to not match the other e.g. by displaying each SAS to users of the first and second WebRTC clients who read the SAS values aloud via the WebRTC media channel to compare the existence of a man in the middle MitM attacker in the WebRTC data channel can be indicated. For additional security if the SAS values are determined to match the first WebRTC privacy verification agent and the second WebRTC privacy verification agent may compare the fingerprints used to establish the WebRTC media channel and WebRTC data channel. If the fingerprints do not match the existence of a MitM attacker in the WebRTC media channel is indicated. Otherwise the WebRTC media channel is confirmed as private.

In this regard in one embodiment a method for verifying privacy of a WebRTC media channel is provided. The method comprises establishing by a first WebRTC client executing on a first computing device and a second WebRTC client executing on a second computing device a WebRTC media channel between the first WebRTC client and the second WebRTC client using a keying material. The method further comprises establishing using the same keying material a WebRTC data channel between the first WebRTC client and the second WebRTC client corresponding to the WebRTC media channel. The method additionally comprises negotiating in the WebRTC data channel a cryptographic key exchange between the first WebRTC client and the second WebRTC client. The method also comprises generating a first SAS and a second SAS based on the cryptographic key exchange in the WebRTC data channel. The method further comprises displaying the first SAS via the first WebRTC client and the second SAS via the second WebRTC client such that a mismatch between the first SAS and the second SAS indicates an existence of a MitM attacker.

As discussed above illustrates a MitM attack in which the MitM attacker covertly eavesdrops on communications between the WebRTC clients and while making it appear as though the WebRTC clients and are communicating directly with each other. Both Session Description Protocol SDP Security Descriptions SDES and Datagram Transport Layer Security for SRTP DTLS SRTP two keying mechanisms used to generate cryptographic keys for encrypting WebRTC media channels may be susceptible to MitM attacks. Accordingly illustrates an exemplary WebRTC interactive system providing verification of privacy of a WebRTC media channel via a corresponding WebRTC data channel as disclosed herein. In particular the exemplary WebRTC interactive system provides WebRTC privacy verification agents and . The WebRTC privacy verification agents and handle negotiation of a cryptographic key exchange within a WebRTC data channel and generation of SAS values for detecting a MitM attack.

As used herein a WebRTC media channel refers to a connection between two WebRTC clients for securely exchanging video and or audio media while a WebRTC data channel refers to a connection between two WebRTC clients for exchanging binary data in one or more arbitrary formats. It is to be understood that a WebRTC media channel and a WebRTC data channel may be multiplexed over a single peer connection between the WebRTC clients and or may be associated with the same User Datagram Protocol UDP port of the WebRTC clients. A WebRTC media flow as referenced herein refers to video and or audio data packets passing over a WebRTC media channel. As non limiting examples a WebRTC media flow may include a real time audio stream and or a real time video stream or other real time media or data streams.

For purposes of illustration the operation of the WebRTC privacy verification agents and is discussed with respect to a WebRTC media channel established between computing devices and a MitM WebRTC media channel established between the computing device and a MitM attacker and a MitM WebRTC media channel established between the computing device and the MitM attacker . It is to be understood that the computing devices and may both be located within a same public or private network or may be located within separate communicatively coupled public or private networks. Some embodiments of the WebRTC interactive system of may provide that each of the computing devices and may be any computing device having network communications capabilities such as a smartphone a tablet computer a dedicated web appliance a media server a desktop or server computer or a purpose built communications device as non limiting examples. The computing devices and include communications interfaces and respectively for connecting the computing devices and to one or more public and or private networks. The computing devices and also include persistent data stores and respectively for providing persistent data storage that is accessible to the computing devices and . The persistent data stores and each may be for instance a data storage device. In some embodiments the elements of the computing devices and may be distributed across more than one computing device .

The computing devices and of include WebRTC clients and respectively. The WebRTC clients and each may be a WebRTC enabled web browser application a dedicated communications application a mobile application or an interface less application such as a daemon or service application as non limiting examples. The WebRTC clients and implement the protocols codecs and Application Programming Interfaces APIs necessary to enable WebRTC media and data channels between the WebRTC clients and .

To establish communications via WebRTC the WebRTC clients and of download WebRTC web applications not shown from a WebRTC application server via Hyper Text Transfer Protocol HTTP Hyper Text Transfer Protocol Secure HTTPS connections and respectively. In the example of the HTTP HTTPS connections and may constitute signaling channels for establishing the WebRTC media and or data channels. In some embodiments each of the WebRTC web applications may comprise an HTML5 JavaScript web application that provides a rich user interface using HTML5 and uses JavaScript to handle user input and to communicate with the WebRTC application server . The WebRTC clients and then engage in a WebRTC offer answer exchange by exchanging WebRTC Session Description Protocol SDP objects not shown via the WebRTC application server or another media negotiation method. The exchanged WebRTC SDP objects are used to determine the media types and capabilities for the desired WebRTC interactive session. After the WebRTC offer answer exchange is complete the WebRTC media channel is established directly between the WebRTC clients and via a peer connection.

As noted above to secure the WebRTC media channel a keying mechanism is used during establishment of the WebRTC media channel to generate a keying material e.g. a cryptographic key and or a hash generated based on a cryptographic key for each of the WebRTC clients and to use for encrypting media packets for a private WebRTC media flow . As non limiting examples the keying mechanism may be SDES or DTLS SRTP. When SDES is used the keying material for each of the WebRTC clients and is sent as part of the WebRTC offer answer exchange. If DTLS SRTP is used a Diffie Hellman DH exchange is carried out between the WebRTC clients and and each of the WebRTC clients and generates the keying material based on the DH exchange. It is to be understood that a DH exchange may be any variant of DH including for example the classic finite field DH approach as well as the elliptic curve DH approach.

In the example of users not shown of the WebRTC clients and wish to verify the privacy of the WebRTC media channel by ensuring that the MitM attacker is not secretly eavesdropping on the WebRTC media channel . Accordingly a WebRTC data channel is established between the WebRTC privacy verification agent of the WebRTC client and the WebRTC privacy verification agent of the WebRTC client . In some embodiments the WebRTC data channel may have been established prior to the WebRTC media channel while some embodiments may provide that the WebRTC data channel is established subsequent to the establishment of the WebRTC media channel . The WebRTC data channel is established using the same keying material as was used to establish the WebRTC media channel and thus the fingerprints not shown exchanged over the signaling channel e.g. the HTTP HTTPS connections should be the same.

The WebRTC privacy verification agents and then negotiate a cryptographic key exchange in the WebRTC data channel . The cryptographic key exchange between the WebRTC privacy verification agents and may be based on any suitable public key cryptographic algorithm or mechanism. As a non limiting example the cryptographic key exchange may include a DH key exchange. In some embodiments the cryptographic key exchange between the WebRTC privacy verification agents and may be carried out by exchanging messages based on the ZRTP protocol defined by RFC 6189. Some embodiments may provide that the cryptographic key exchange is authenticated based on the keying material used to establish the WebRTC media channel and the WebRTC data channel and or by a digital signature provided by a trusted third party known as an Identity Provider not shown .

The WebRTC privacy verification agents and generate a SAS and a SAS respectively based on the cryptographic key exchange in the WebRTC data channel . In some embodiments the SAS and the SAS are short e.g. 8 bit or 16 bit values that may be generated according to the ZRTP protocol modified to include local and remote fingerprints as a non limiting example. The SAS and the SAS may be based on cryptographic key material not shown that is generated as part of the cryptographic key exchange and or may be generated based on the keying material used to establish the WebRTC media channel and the WebRTC data channel .

In some embodiments the SAS and or the SAS are calculated as described in RFC 6189 but with an additional hash of a fingerprint included. For example the standard SAS calculation as described in Section 4.5.3 in RFC 6189 is sashash KDF s0 SAS KDF Context 256 . In contrast an exemplary SAS according to some embodiments disclosed herein may be sashash KDF s0 Fingerprints KDF Context 256 where Fingerprints represents a concatenation of a fingerprint of a ZRTP initiator a colon and a fingerprint of a ZRTP responder. It is to be understood that the exemplary SAS and or described above is a non limiting example of how a fingerprint pair could be included in an SAS hash. Operations for generating the SAS and or the SAS may include any mechanism for which different fingerprints result in different SAS hashes and that is used by both of the WebRTC privacy verification agents and to calculate the SAS and the SAS respectively.

If the communications between the WebRTC clients and are being routed through the MitM attacker any SAS pair generated by the WebRTC privacy verification agents and will be based on different cryptographic key material and or keying material and consequently will not match. For example assume that the WebRTC clients and are not communicating directly with each other but instead have unknowingly established the MitM WebRTC media channels and respectively and corresponding compromised WebRTC media flows and with the MitM attacker . When attempting to verify the privacy of the WebRTC media communications the WebRTC privacy verification agents and will establish respective MitM WebRTC data channels and and will negotiate separate cryptographic key exchanges and . Based on the cryptographic key exchange the WebRTC privacy verification agent will generate a MitM SAS . Likewise the WebRTC privacy verification agent will generate a MitM SAS based on the cryptographic key exchange . Because the MitM SAS and the MitM SAS are generated based on different cryptographic key exchanges they will not match thus indicating the presence of the MitM attacker .

However if the WebRTC clients and are in fact communicating directly with each other the SAS and the SAS are generated in the same fashion based on the same cryptographic key material and or the same keying material used to establish the WebRTC media channel and the WebRTC data channel . Consequently the SAS and the SAS generated by the WebRTC privacy verification agents and will match indicating that there is no MitM attacker eavesdropping on the WebRTC data channel . To facilitate comparison of the SAS and the SAS some embodiments may provide that the SAS and the SAS are displayed via the WebRTC clients and for comparison. For example in some embodiments the SAS and the SAS are displayed to users not shown of the WebRTC clients and who may then compare the SAS and the SAS by reading them aloud over the WebRTC media channel . If the users determine that the SAS and the SAS match they can be assured that the WebRTC data channel is not being intercepted by the MitM attacker .

It is to be understood that whether the WebRTC media channel can be verified as private based on a match between the SAS and the SAS may depend on the keying mechanism used. For example if the DTLS SRTP keying mechanism was originally used to generate the cryptographic keys used to establish the WebRTC media channel and the WebRTC data channel and the same keys were used by each WebRTC client and to establish both the WebRTC media channel and the WebRTC data channel the privacy of the WebRTC media channel is assured by a match between the SAS and the SAS . The WebRTC privacy verification agents and can confirm the privacy of the WebRTC media channel by comparing a first fingerprint not shown corresponding to the keying material for establishing the WebRTC media channel with a second fingerprint not shown corresponding to the keying material for establishing the WebRTC data channel . If the first and second fingerprints do not match the existence of the MitM attacker is indicated.

If SDES was used as the keying mechanism no conclusion regarding the privacy of the WebRTC media channel may be drawn from a match between the SAS and the SAS . In this latter scenario if the SAS and the SAS match the WebRTC clients and may re key the WebRTC media channel using cryptographic key material generated during the cryptographic key exchange . In this manner the privacy of the WebRTC media channel may be assured.

Some embodiments may provide that after a private WebRTC media channel is established as described above cryptographic key material created during the cryptographic key exchange may be cached by the WebRTC privacy verification agents and for later use. For example the WebRTC privacy verification agents and may each store a derivation of cryptographic key material on the persistent data store and the persistent data store respectively. In some embodiments the derivation of cryptographic key material may include a combination or hash of the cryptographic key material from the cryptographic key exchange along with other data to increase security. The cached cryptographic key material may be stored as a cached browser cookie or other data file on the persistent data store and the persistent data store . In later WebRTC communication sessions between the WebRTC client and the WebRTC client the cached cryptographic key material may be used to sign the first SAS and the second SAS . In this manner the first SAS and the second SAS may be automatically compared thus avoiding the need for a verbal comparison by the users.

In some embodiments functionality of the WebRTC privacy verification agents and may be provided as part of the WebRTC application downloaded from the WebRTC application server and may be implemented in JavaScript or other scripting language. To provide additional assurance that the WebRTC privacy verification agents and are secure from tampering by a potential MitM attacker able to intercept and modify HTML and JavaScript in transit the WebRTC privacy verification agents and or may be stored on local media such as a USB flash drive or other portable storage device. The WebRTC privacy verification agents and or may then be loaded by the WebRTC clients and or upon execution of the WebRTC application. Some embodiments may provide that each of the WebRTC privacy verification agents and constitute a plug in or extension of the WebRTC clients and or .

It is to be understood that in some embodiments the WebRTC media channel and the WebRTC data channel may be established by the same WebRTC application not shown downloaded from the WebRTC application server by the WebRTC clients and . As a non limiting example the WebRTC application may establish the WebRTC media channel as well as provide the WebRTC privacy verification agents and or to utilize the WebRTC data channel to verify the privacy of the WebRTC media channel . According to some embodiments disclosed herein a first WebRTC application may establish the WebRTC media channel while a second WebRTC application provides the WebRTC privacy verification agents and or to verify the privacy of the WebRTC media channel using the WebRTC data channel . For instance users of the WebRTC clients and may establish the WebRTC media channel using a first WebRTC application whose trustworthiness is suspect. Assuming that the WebRTC privacy verification agents and or have access to the keying material and or the fingerprints of the keying material used to establish the WebRTC data channel by the first WebRTC application the users may verify the privacy of the WebRTC media channel using the WebRTC privacy verification agents and or and the WebRTC data channel .

To generally describe exemplary operations of the WebRTC clients and and the WebRTC privacy verification agents and of for verifying the privacy of the WebRTC media channel is provided. For the sake of clarity elements of are referenced in describing . In the example of operations begin with a first WebRTC client and a second WebRTC client establishing a WebRTC media channel using a keying material block . To establish the WebRTC media channel the WebRTC clients and may download WebRTC web applications from a WebRTC application server and engage in a WebRTC offer answer exchange. The keying material may be generated using a keying mechanism such as SDES or DTLS SRTP. The WebRTC privacy verification agents and then establish using the keying material a WebRTC data channel between the first WebRTC client and the second WebRTC client corresponding to the WebRTC media channel block .

The WebRTC privacy verification agents and next negotiate in the WebRTC data channel a cryptographic key exchange between the first WebRTC client and the second WebRTC client block . The cryptographic key exchange between the WebRTC privacy verification agents and may be based on any suitable public key cryptographic algorithm or mechanism that offers perfect forward secrecy such as a DH key exchange. Some embodiments may provide that the cryptographic key exchange between the WebRTC privacy verification agents and may be carried out by exchanging messages based on the ZRTP protocol defined by RFC 6189 with a suitably modified SAS hash.

The WebRTC privacy verification agents and generate a first SAS and a second SAS based on the cryptographic key exchange in the WebRTC data channel block . According to some embodiments disclosed herein the SAS and the SAS are short e.g. 8 bit or 16 bit values that may be generated according to the ZRTP protocol as a non limiting example. The SAS and the SAS may be based on cryptographic key material generated as part of the cryptographic key exchange and or may be generated based on the keying material used to establish the WebRTC media channel and the WebRTC data channel .

The WebRTC privacy verification agents and next display the first SAS via the first WebRTC client and the second SAS via the second WebRTC client such that a mismatch between the first SAS and the second SAS indicates an existence of a MitM attacker block . For example in some embodiments the SAS and the SAS are displayed to users of the WebRTC clients and who may then compare the SAS and the SAS by reading them aloud over the WebRTC media channel . In this manner privacy of the WebRTC media channel may be guaranteed against the MitM attacker .

As seen in the establishment of a WebRTC media channel begins with the WebRTC client sending an SDP object to the WebRTC application server in an encrypted format in this example via an HTTPS connection . In this example the WebRTC session description object is referred to as SDP Object A and is indicated by bidirectional arrow . SDP Object A represents the offer in a WebRTC offer answer exchange. SDP Object A specifies the media types and capabilities that the WebRTC client supports and prefers for use in the WebRTC interactive session. The WebRTC application server then forwards the SDP Object A to the WebRTC client by an HTTPS connection as indicated by bidirectional arrow . In some embodiments if the DTLS SRTP keying mechanism is used the a fingerprint SDP attribute will be present and may be used to verify the public key to be used by user B for the DTLS exchange.

After the WebRTC client receives the SDP Object A from the WebRTC application server the WebRTC client in response sends a WebRTC session description object referred to as SDP Object B to the WebRTC application server as indicated by bidirectional arrow . The SDP Object B in this example represents the answer in the WebRTC offer answer exchange. The WebRTC application server in turn forwards the SDP Object B to the WebRTC client as shown by bidirectional arrow . Some embodiments may provide that if DTLS SRTP is used as the keying mechanism the a fingerprint SDP attribute will be present and may be used to verify the public key to be used by user A for the DTLS exchange.

With continuing reference to the WebRTC clients and then begin hole punching to determine the best way to establish direct communications. This is indicated by bidirectional arrows and in . Hole punching is a technique often using protocols such as Interactive Connectivity Establishment ICE in which both WebRTC clients establish a connection with an unrestricted third party server not shown that uncovers external and internal address information for use in direct communications. Once the hole punching indicated by arrows and is successful the WebRTC clients and begin key negotiations to establish a secure peer connection indicated by bidirectional arrow . Upon establishing a secure peer connection the WebRTC client and the WebRTC client begin exchanging secure media via a secure WebRTC media channel as shown by bidirectional arrow . Establishment of the secure WebRTC media channel is based on a keying material resulting from an SDES or DTLS SRTP key exchange as non limiting examples.

The WebRTC privacy verification agents and then establish a secure WebRTC data channel using the same keying material used for encrypting media packets passed over the secure WebRTC media channel as indicated by arrow . In some embodiments the WebRTC data channel may have been established prior to the WebRTC media channel while some embodiments may provide that the WebRTC data channel is established subsequent to the establishment of the WebRTC media channel. The WebRTC privacy verification agents and next negotiate a cryptographic key exchange via the WebRTC data channel as shown by bidirectional arrow . As noted above with respect to the cryptographic key exchange between the WebRTC privacy verification agents and may be based on any suitable public key cryptographic algorithm or mechanism with perfect forward secrecy such as a DH key exchange. In some embodiments the cryptographic key exchange between the WebRTC privacy verification agents and may be carried out by exchanging messages based on the ZRTP protocol defined by RFC 6189.

Based on the cryptographic key exchange the WebRTC privacy verification agent generates a first SAS referred to in this example as SAS A and displays the SAS A to the user A as indicated by arrow . Similarly the WebRTC privacy verification agent generates a second SAS referred to in this example as SAS B and displays the SAS B to the user B as indicated by arrow . The user A and the user B may then verify whether the SAS A and the SAS B match as shown by bidirectional arrow . In some embodiments the user A and or the user B may read an SAS value aloud over the WebRTC media channel and or provide a visual indication of the SAS value over the WebRTC media channel. If the SAS A displayed to the user A matches the SAS B displayed to the user B then the WebRTC data channel may be assumed to be private. A mismatch between the SAS A and the SAS B would indicate the presence of a MitM attacker in the WebRTC data channel.

In some embodiments the WebRTC privacy verification agent and the WebRTC privacy verification agent may further compare a fingerprint of the keying material used to establish the WebRTC media channel with a fingerprint of the keying material used to establish the WebRTC data channel as shown by bidirectional dashed arrow . If the fingerprints do not match then the presence of a MitM attacker in the WebRTC media channel is directly indicated. The WebRTC client and the WebRTC client may also re key the WebRTC media channel based on the cryptographic key exchange in the WebRTC data channel as indicated by bidirectional dashed arrow to ensure the privacy of the WebRTC media channel.

In processing begins with a first WebRTC client and a second WebRTC client establishing a WebRTC media channel using a keying material block . In some embodiments the keying material may be generated using a keying mechanism such as SDES or DTLS SRTP as non limiting examples. The WebRTC privacy verification agents and then establish using the keying material a WebRTC data channel between the first WebRTC client and the second WebRTC client corresponding to the WebRTC media channel block .

The WebRTC privacy verification agents and next negotiate in the WebRTC data channel a cryptographic key exchange between the first WebRTC client and the second WebRTC client block . The cryptographic key exchange between the WebRTC privacy verification agents and may be based on any suitable public key cryptographic algorithm or mechanism such as a DH key exchange. Some embodiments may provide that the cryptographic key exchange between the WebRTC privacy verification agents and may be carried out by exchanging messages based on the ZRTP protocol defined by RFC 6189.

The WebRTC privacy verification agents and then generate a first SAS and a second SAS based on the cryptographic key exchange in the WebRTC data channel block . Some embodiments may provide that the SAS and the SAS are short e.g. 8 bit or 16 bit values that may be generated according to the ZRTP protocol as a non limiting example. The SAS and the SAS may be based on cryptographic key material generated as part of the cryptographic key exchange and or may be generated based on the keying material used to establish the WebRTC media channel and the WebRTC data channel .

The WebRTC privacy verification agents and then determine whether to use previously cached cryptographic key material to compare the first SAS and the second SAS block . For example cryptographic key material may have been cached during a previous WebRTC media communication and may be accessible via the persistent data store and the persistent data store . If cached cryptographic key material is not to be used e.g. because cryptographic key material has not been cached before or one of the WebRTC clients has cleared a cache in which cryptographic key material was stored processing resumes at block of . If the WebRTC privacy verification agents and determine that previously cached cryptographic key material is to be used for SAS comparison processing continues at block of .

Referring now to the WebRTC privacy verification agents and retrieve cached cryptographic key material from the persistent data store and the persistent data store respectively block . In some embodiments the cached cryptographic key material may be stored on the persistent data store and the persistent data store as browser cookies or other data files. The WebRTC privacy verification agents and sign the first SAS and the second SAS using the cached cryptographic key material block . Each of the WebRTC privacy verification agents and then automatically compares the first SAS and the second SAS respectively based on the cached cryptographic key material block . Processing then resumes at block of .

In if the WebRTC privacy verification agents and determine at decision block of that previously cached cryptographic key material is not to be used for SAS comparison the WebRTC privacy verification agents and display the first SAS via the first WebRTC client and the second SAS via the second WebRTC client block . In this manner users of the WebRTC clients and may compare the first SAS and the second SAS to determine whether they match. In some embodiments comparison of the first SAS and the second SAS may be accomplished by the users reading the first SAS and or the second SAS aloud or providing a visual indication of the first SAS and or the second SAS via the WebRTC media channel .

Whether the comparison is carried out by users of the WebRTC clients and or is carried out automatically based on signing the first SAS and the second SAS with cached cryptographic values the WebRTC privacy verification agents and next determine based on the comparison whether the first SAS and the second SAS match block . If the first SAS and the second SAS do not match the presence of a MitM attacker is indicated and the WebRTC media channel may be assumed to be compromised block . However if the first SAS and the second SAS match then a MitM attacker is not present and the WebRTC data channel may be assumed to be private block . Processing then proceeds to block of .

As noted above whether or not the WebRTC media channel can be verified as private based on a match between the first SAS and the second SAS may depend on the keying mechanism used. If the DTLS SRTP keying mechanism was originally used to generate the cryptographic keys used to establish the WebRTC media channel and the WebRTC data channel and the same keys were used by each WebRTC client and to establish both the WebRTC media channel and the WebRTC data channel the privacy of the WebRTC media channel is assured by a match between the SAS and the SAS . Accordingly as seen in the WebRTC privacy verification agents and may compare a first fingerprint corresponding to the keying material for establishing the WebRTC media channel and a second fingerprint corresponding to the keying material for establishing the WebRTC data channel block . If the first fingerprint and the second fingerprint do not match then the presence of the MitM attacker is indicated on the WebRTC media channel block . If the first fingerprint and the second fingerprint match then the WebRTC media channel may be assumed to be private block .

If the SDES keying mechanism or another less secure keying mechanism was used no conclusion regarding the privacy of the WebRTC media channel may be drawn from a match between the first SAS and the second SAS . Thus the WebRTC privacy verification agents and may optionally re key the WebRTC media channel based on the cryptographic key exchange in the WebRTC data channel block .

The WebRTC privacy verification agents and may also optionally cache cryptographic key material created during the cryptographic key exchange to automate the comparison of the first SAS and the second SAS during a subsequent WebRTC media communication. To do so the first WebRTC client may store a first derivation of cryptographic key material created during the cryptographic key exchange in a persistent data store block . Likewise the second WebRTC client may store a second derivation of cryptographic key material created during the cryptographic key exchange in a persistent data store block . In some embodiments the first and second derivations of cryptographic key material may include a combination or hash of the cryptographic key material from the cryptographic key exchange along with other data in order to increase security.

The exemplary computer system includes a processing device or processor a main memory as non limiting examples read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. and a static memory as non limiting examples flash memory static random access memory SRAM etc. which may communicate with each other via a bus . Alternatively the processing device may be connected to the main memory and or the static memory directly or via some other connectivity means.

The processing device represents one or more processing devices such as a microprocessor central processing unit CPU or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor a reduced instruction set computing RISC microprocessor a very long instruction word VLIW microprocessor a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device is configured to execute processing logic in instructions and or cached instructions for performing the operations and steps discussed herein.

The computer system may further include a communications interface in the form of a network interface device . It also may or may not include an input to receive input and selections to be communicated to the computer system when executing the instructions . It also may or may not include an output including but not limited to display s . The display s may be a video display unit as non limiting examples a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device as a non limiting example a keyboard a cursor control device as a non limiting example a mouse and or a touch screen device as a non limiting example a tablet input device or screen .

The computer system may or may not include a data storage device that includes using drive s to store the functions described herein in a computer readable medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The functions can include the methods and or other functions of the processing system a participant user device and or a licensing server as non limiting examples. The one or more sets of instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system . The main memory and the processing device also constitute machine accessible storage media. The instructions and or may further be transmitted or received over a network via the network interface device . The network may be an intra network or an inter network.

While the computer readable medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media as non limiting examples a centralized or distributed database and or associated caches and servers that store one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies disclosed herein. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

The embodiments disclosed herein may be embodied in hardware and in instructions that are stored in hardware and may reside as non limiting examples in Random Access Memory RAM flash memory Read Only Memory ROM Electrically Programmable ROM EPROM Electrically Erasable Programmable ROM EEPROM registers a hard disk a removable disk a CD ROM or any other form of computer readable medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an Application Specific Integrated Circuit ASIC . The ASIC may reside in a remote station. In the alternative the processor and the storage medium may reside as discrete components in a remote station base station or server.

It is also noted that the operational steps described in any of the exemplary embodiments herein are described to provide examples and discussion. The operations described may be performed in numerous different sequences other than the illustrated sequences. Furthermore operations described in a single operational step may actually be performed in a number of different steps. Additionally one or more operational steps discussed in the exemplary embodiments may be combined. It is to be understood that the operational steps illustrated in the flow chart diagrams may be subject to numerous different modifications as will be readily apparent to one of skill in the art. Those of skill in the art would also understand that information and signals may be represented using any of a variety of different technologies and techniques. As non limiting examples data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

The previous description of the disclosure is provided to enable any person skilled in the art to make or use the disclosure. Various modifications to the disclosure will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other variations without departing from the spirit or scope of the disclosure. Thus the disclosure is not intended to be limited to the examples and designs described herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

