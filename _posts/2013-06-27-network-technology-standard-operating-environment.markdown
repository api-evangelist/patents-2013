---

title: Network technology standard operating environment
abstract: Method, device, and storage medium to provision virtual machines, software, storage, and network resources of a standard operating environment including devices having identical software, hardware, and configurations. A provisioning device uses dedicated flows based on the resource to be provisioned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274824&OS=09274824&RS=09274824
owner: VERIZON PATENT AND LICENSING INC.
number: 09274824
owner_city: Basking Ridge
owner_country: US
publication_date: 20130627
---
Large scale service providers are hampered with enormous infrastructures to manage and maintain. For example an enterprise may have to manage thousands of devices and a multitude of applications in a data center. Typically there exists a diversity of network devices that operate according to various operating systems middleware systems etc. to accommodate the diversity of applications.

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

Data centers in an enterprise framework support a multitude of applications. However typically in such an infrastructure there exists a diversity of network devices e.g. servers that operate according to various operating systems middleware systems etc. Such an approach adds an unnecessary complexity to budgeting purchasing and procurement of resources deployment of resources maintenance migration elasticity redundancy efficiency etc. A standard operating environment may address the drawbacks of such existing infrastructures.

According to an exemplary embodiment a network provides applications and services based on a standard operating environment SOE . For example the network may be implemented as a data center. According to an exemplary embodiment as illustrated in a standard operating environment includes a core infrastructure element a server element a storage element a network element and a hardware and software management tool . The elements of standard operating environment are designed to support an application infrastructure and the tools needed to integrate these elements. Standard operating environment provides a common infrastructure on which applications and services may be deployed and managed.

Core infrastructure element includes an operating system. For example the operating system of a server of server element may be implemented using the Linux operating system or the Windows operating system. Core infrastructure element also includes a hypervisor. For example the hypervisor may be implemented using Oracle VM Server virtualization software VMware virtualization software a combination thereof etc. The hypervisor provides a virtual operating platform for an application allows for automation and provides a layer of abstraction that separates an application from the infrastructure. This separation allows for the infrastructure to be manipulated e.g. serviced changed upgraded etc. with minimal impact to the application.

Server element includes commodity servers. The physical machines to implement the commodity servers are identical to ensure consistency and uniformity. For example each physical machine may be implemented using an HP BladeSystem c7000 enclosure. Each physical machine includes identical hardware to ensure consistency and uniformity among the servers. For example each physical machine may be implemented using a multi core 64 bit x86 processor having a mid power two socket configuration. Additionally for example each physical machine may be implemented using the same dual in line memory module DIMM e.g. 192 GB DDR3 1333 Hz the same hard drive e.g. 2 146 GB 15 k HDD and the same blades e.g. 16 BL460 G7 Half high Dual Socket Blades 

Each physical machine is connected to links of network element . For example each physical machine may be connected to multiple 10 Gbps Ethernet links or greater. For example 2 4 Port 10 GbE VPC trunks per chassis and 2 1 GbE out of band OOB connections per chassis may be implemented to provide interconnectivity. The out of band connections may be used for remote access while the VPC trunks may be used for customer access. The distance between physical machines e.g. within a data center may be such to allow copper 10 Gbps Ethernet links versus optical links. However increased server densities can yield power and cooling challenges. According to an exemplary implementation a hot aisle containment arrangement may be used.

According to an exemplary embodiment each physical machine of server element may boot off of storage element . According to such an implementation the hard drive of a physical machine e.g. associated with a server may only store the hypervisor. As a result power consumption heat generation and cost pertaining to server element may be reduced. Additionally through the use of server virtualization storage virtualization and a scalable network technology refreshes of the infrastructure e.g. server storage and network elements may be performed with no application outage and application regression testing.

Storage element includes network attached storage NAS . The physical machines to implement the NAS are identical to ensure consistency and uniformity. For example NetApp FAS6280 enterprise storage system may be used to provide storage. Each storage system is connected to links of network element . For example storage arrays may be connected to multiple 10 Gbps Ethernet links or greater using virtual port channels VPCs or Multi Chassis Link Aggregation Groups MLAGs . By way of further example 1 4 port 10 GbE VPC trunk per filer and 1 GbE OOB connection per filer may be implemented to provide interconnectivity.

Storage element includes other capabilities. For example software included with NetApp FAS6280 enterprise storage system provides various services such as de duplication thin provisioning snapshot replication compression and data cloning. For example de duplication identifies duplicate blocks of data and replaces the duplicate blocks with pointers to a single copy of the block of data. As a result storage consumption may be reduced for storage element particularly for data sets that have a high amount of duplicative data. Thin provisioning presents a static capacity to a client while reserving space on a storage array necessary to store the data written by the client. As a result over allocation of a storage array of storage element and higher utilization of the storage array may be achieved. Snapshot provides a form of backup within the standard operating environment . Snapshot allows for a point in time backup of the data on a storage array of storage element . According to an exemplary implementation for data that needs to be protected a copy of the data may be transmitted to a separate storage array of storage element . Additionally if off site copies are needed according to an exemplary implementation the data is copied to another storage array at an off site location. Alternatively for example the data may be copied to tape for off site storage. A backup of data residing on a storage array of storage element remains stored on the storage array until aged off or needed for recovery.

Storage element allows for the automation of storage provisioning and management e.g. increase storage decrease storage recovery duplication etc. . An automated process may provide consistent results and may be logged and audited. Storage element may also allow for post provisioning automated processes such as off frame and or off site data copying storage. Storage element also allows for the gathering of performance information e.g. metrics pertaining to storage arrays and the analysis thereof. For example the number of input output operations per second TOPS may be gathered from a storage array. This information may be analyzed to determine whether the storage array is properly allocated. As described further below standard operating environment includes tools to allow users to automate and manage other elements e.g. storage element etc. of the standard operation environment .

Network element includes links to server element and storage element . Network element may include other types of physical machines such as switches load balancers firewalls DNS servers IP address management etc. and links thereto. According to an exemplary embodiment each physical machine is connected via multiple 10 Gbps links or greater which are bonded together for redundancy. Depending on the type of switches used VPCs or MLAGs may be used to interconnect active active redundant connections from the servers to the switches. Various network elements may also be implemented to allow for automation. For example load balancers and firewalls may be implemented to allow for automatic creation and modification.

Hardware and software management tool allows a user to manage the standard operating environment . For example hardware and software management tool may be implemented with a workflow tool an automation tool a monitoring and performance tool an inventory tool an administration tool and an alerts and reports tool. The workflow tool allows a user to create a request that can alter the hardware the software or a combination thereof of standard operating environment . The automation tool allows the user to automate the execution of the request. The monitoring and performance tool allows the user to monitor usage and performance of resources of the standard operating environment . The inventory tool allows the user to view resources e.g. physical machines virtual machines etc. of the standard operating environment . The administration tool allows the user to perform various administrative and management functions such as views of departments end user permissions etc. The alerts and reports tools allow the user to receive alerts and generate reports pertaining to the standard operating environment .

Standard operating environment should be deployed in a consistent and uniform manner. For example the configuration of a blade chassis a network switch a storage array an operating system and a database is deployed in a consistent and uniform manner. Additionally the consistency and uniformity of standard operating environment allows for expedited problem resolutions application of a resolution throughout the infrastructure and facilitates support.

The physical infrastructure of standard operating environment is deployed in set units or blocks. According to such an approach there is a predictability for an organization e.g. a service provider a network provider etc. pertaining to purchasing operations e.g. how much power cooling space etc. is needed physical installation e.g. plugs needed how to cable it etc. resource availability e.g. how much capacity is provided etc. etc.

While exemplary embodiments provided in this description may be implemented based on the use of a particular network architecture platform etc. such implementations are not intended to be restrictive or provide an exhaustive treatment as such. In other words the embodiments described herein may be implemented using other suitable network architectures platforms etc. which may not be specifically described.

Infrastructure may be implemented to include wired and or wireless connections among the devices and the network illustrated. A connection may be direct or indirect and involve intermediary device s and or network s not illustrated in .

According to other embodiments a single device in may be implemented as multiple devices. Additionally or alternatively according to other embodiments multiple devices may be implemented as a single device. A device may be implemented according to a centralized computing architecture a distributed computing architecture or a cloud computing architecture. Additionally a device may be implemented according to one or multiple network architectures e.g. a client device a server device a peer device a proxy device or a combination thereof . Also according to other embodiments one or more functions and or processes described as being performed by a particular device may be performed by a different device or some combination of devices which may or may not include the particular device.

User interface provides interfaces for use of the standard operating environment. For example user interface allows a user to make a provisioning request and automate the provisioning thereof. By way of further example the provisioning request allows the user to provision a resource e.g. a virtual machine software and storage . User interface allows the user to view the status of the provisioning request and manage the resource after provisioning is completed. Additionally for example user interface allows the user to view real time usage data and to track inventory e.g. by owner application server name etc. . User interface may display user interfaces based on various standards such as for example HyperText Markup Language HTML Cascading Style Sheets CSS JavaScript Application Development Framework ADF Faces Rich Client components Flex components and Flash components. User interface may include a client e.g. a web client etc. .

Access logic provides access to the standard operating environment. For example access logic provides connectors to other entities of the standard operating environment. Access logic may provide single sign on services and Lightweight Directory Access Protocol LDAP services. Access logic may include an Oracle WebLogic server and ADF components. For example the ADF components may include ADF business components ADF BC ADF controller ADFc components and ADF binding layer ADFm components. Access logic may include a server e.g. a web server etc. .

Database provides database services for use of the standard operating environment. For example database stores provisioning request information inventory information real time usage information authorization authentication information product catalog information and organization information. According to an exemplary implementation an Extract Transform and Load ETL application maintains database . The ETL application may periodically refresh information stored in database such as real time information inventory information etc.

Provisioning request information includes information pertaining to provisioning requests. Provisioning request includes parameter information to provision a resource. Depending on the type of provisioning request the parameter information specified for the provisioning request may be different than another provisioning request. For example a provisioning request to create a primary storage volume create a secondary storage volume and perform data replication includes different parameter information than a provisioning request to resize an existing volume. Provisioning request information also includes status information pertaining to the provisioning request. By way of example the status information includes information indicating whether a provisioning request submitted successfully e.g. by a user is currently being processed is successfully processed and resource provisioned or failed.

Inventory information includes information pertaining to resources associated with data centers . For example inventory information includes information pertaining to the physical resources e.g. server devices storage devices storage disks storage controllers hypervisors etc. and virtual resources e.g. virtual servers software instances storage volumes storage directories etc. .

Real time usage information includes usage information pertaining to resources. For example real time usage information includes usage information pertaining to virtual machines such as central processing unit CPU and memory usage factors. Additionally real time usage information includes usage information pertaining to storage such as used and free. Real time usage information may be compiled based on a user specified time period e.g. every fifteen minutes hourly daily weekly monthly etc. . Real time usage information may be filtered based on user parameters e.g. line of business executive director application level etc. .

Authorization authentication information includes information that permits access to the standard operating environment. For example authorization information includes user name and password information pertaining to users.

Product catalog information includes information pertaining to the entities used in the standard operating environment. For example product catalog information includes information pertaining to infrastructures software platforms and templates. For example infrastructure information indicates virtual machines available to a user for provisioning such as a Windows server etc. Software information indicates software available to a user for provisioning such as System Applications and Products in Data Processing SAP ERP Central Component EEC Oracle database for SAP etc. Platforms and templates includes predefined templates such as SAP with Oracle database on Linux VSII platform on three servers or other logical combinations of virtual machines software and storages.

Organization information includes information pertaining to a company or a department of a company associated with a resource users within a company or a department provisioning requests made by a user of the company of the department status of the provisioning requests and applications used by the users of the company or the department.

Provisioning engine controls the provisioning of resources. For example provisioning engine reads a provisioning request e.g. from database and selects and invokes the appropriate workflow to perform the provisioning. Provisioning engine monitors the status of a provisioning job. Provisioning engine is described further below.

Referring to data center storage includes storage element as previously described. Referring to data center hypervisors includes a virtual machine manager. For example hypervisors may be implemented using Oracle Virtual Machine OVM and VMware hypervisor. Physical machines include server element as previously described.

Referring to data center software repository may include a variety of applications. For example software repository may include in house applications. For example the in house applications may include financial applications e.g. pertaining to invoicing payroll revenue received etc. and business applications. Additionally or alternatively software repository may include applications available to customers. For example a service provider may host applications available to customers pertaining to various services e.g. Internet service television service mobile service etc. .

Hypervisor includes a virtual machine manager. For example hypervisors may be implemented using Oracle Virtual Machine. Physical machines include server element as previously described.

Process orchestrator controls a process such as creating deploying and managing a resource in standard operating environment . For example process orchestrator reads and interprets a provisioning request selects and invokes a provisioning flow to perform a provisioning and tracks the status of the provisioning.

Operations orchestrator performs a process controlled by process orchestrator . For example operations orchestrator may create a virtual machine install software and or perform other processes as described herein to fulfill a request. Operations orchestrator may interact with various components of standard operating environment such as virtual machines storage devices network etc.

Process orchestrator is implemented using Oracle SOA Suite Business Process Execution Language BPEL software . Process orchestrator is described further in relation to .

Operations orchestrator is implemented using HP Operations Orchestration OO software . According to such an implementation in cases when HP Operations Orchestration software is unable to integrate with a system of standard operating environment or if the available integration is not suitable for the given requirements Java code or other suitable programming language code may be used to build an integration to the system. For example Java code may be made available to HP Operations Orchestration software using the Action interface provided by HP Operations Orchestration software .

As further illustrated operations orchestrator includes flows . Flows include instructions to complete a task stemming from a request. For example a flow may indicate that a series of scripts are to be executed to perform a flow . Scripts include various types of scripts to perform flows . For example as described further below scripts include Enterprise Manager Command Line Interface EMCLI scripts Shell scripts and deployment procedure scripts.

Rule engine includes business rules pertaining to decision making and policies. Event delivery network allows different processes applications to communicate with each other using events. Human workflow allows users to implement a workflow for a provisioning process. For example human workflow allows a user to start a work flow after a provisioning request is created to secure the required approvals and information e.g. IP address storage details etc. to perform a workflow.

Cloud orchestrator is the master controller that controls processes pertaining to the provisioning of resources in standard operating environment . Cloud orchestrator integrates with HP OO . For example cloud orchestrator uses JAVA APIs to delegate provisioning to HP OO . Cloud orchestrator uses rule engine to make provisioning decisions. For example cloud orchestrator may use rule engine to decide on which server pool a virtual machine needs to be provisioned.

Deployment flows include flows pertaining to the provisioning of a resource such as an application storage etc. According to an exemplary implementation deployment flows include VM operation flows software install flows storage operation flows and network operation flows . VM operation flows include flows pertaining to the provisioning of virtual machines. Software install flows include flows pertaining to the installation of software. Storage operation flows include flows pertaining to the provisioning of storage. Network operation flows include flows pertaining to the provisioning of network resources.

Framework flows includes flows pertaining to common and re occurring tasks such as logging e.g. to a database etc. and other tasks to used to perform a flow. According to an exemplary implementation framework flows include utility flows validation flows and custom action flows . Utility flows include flows pertaining to common tasks such as logging into a physical resource of data centers database etc. Validation flows include flows pertaining to validation such as a user s name password parameter validation network address validation etc. Custom action flows include flows that are not entirely supported by HP Operations Orchestration software . For example as previously described HP Operations Orchestration software may be unable to integrate with a system of standard operating environment or the available integration may not suitable for the given requirements.

Java code or other suitable programming language code may be used to build integration to the system. As illustrated in OO Extension may serve as an extension to HP OO . For example OO Extension may be implemented using Java code . OO Extension includes an integration layer . Integration layer includes HP OO Actions VMware Integration NetApp Integration Data Access Layer and Framework Components .

HP OO Actions includes logic to execute and or integrate the custom flows of custom action . VMware Integration includes a VMware Application Programming Interface API to integrate with hypervisor e.g. a VMware hypervisor . NetApp Integration includes a NetApp API e.g. a workflow automator WFA to integrate with storage e.g. NetApp FAS6280 enterprise storage system .

Data Access Layer includes a relational data structure of database . For example the relational data structure includes connectivity specification data that allows for communication between the components of integration layer . For example the connectivity specification data may include data indicating network ports service ports etc.

Framework Components include the necessary tools to communicate to the framework elements Net app storage network components tools provided by the vendors e.g. APIs to communicate with the component.

Scripting Layer includes Enterprise Manager Command Line Interface EMCLI scripts Shell scripts and deployment procedure scripts .

EMCLI scripts includes scripts that communicate with Oracle Enterprise Grid Control to perform specific tasks on various entities e.g. a host a database software etc. via a text based console e.g. shells command windows etc. . For example framework flows may call EMCLI scripts to communicate commands via a hypervisor e.g. an OVM hypervisor to create a guest instance.

Shell scripts include customized operating system scripts to complete specific tasks during deployment creation destruction installation etc. of various entities such as VMs databases and software. For example framework flows may call shell scripts to communicate commands to an operating system e.g. a VM to complete additional configurations. According to an exemplary implementation shell scripts are written in Linux scripting languages e.g. Perl Python Bash etc. .

Deployment procedure scripts include scripts provided by Oracle Enterprise Manager that include logic to deploy databases operation systems and software. For example framework flows call deployment scripts to communicate commands to an OVM hypervisor. As an example the commands may provide details pertaining to the VM e.g. name of VM size of the VM etc. .

Provisioning engine is communicatively coupled to data centers and database as previously illustrated in . According to an exemplary implementation referring to data center storage is implemented with a NetApp FAS6280 enterprise storage system. According to such an implementation Netapp provides workflow automation software i.e. Netapp Workflow Automator . The workflow automation software is illustrated in as workflow automator . Workflow automator enables the design and automated execution of administrative tasks such as storage capacity provisioning system setup data migration and storage reclamation.

Referring to data center according to an exemplary implementation hypervisors and may be implemented with Oracle VM Server virtualization software and VMware virtualization software to accommodate different software on physical machines . According to such an implementation EMCLI of provisioning engine provides an interface to Virtual Machine hypervisor and VMware of provisioning engine includes an API to VMware hypervisor . Referring to data center EMCLI also provides an interface to Virtual Machine hypervisor . Operations orchestrator may interface with software repository .

Processor may include one or multiple processors microprocessors data processors co processors application specific integrated circuits ASICs controllers programmable logic devices chipsets field programmable gate arrays FPGAs application specific instruction set processors ASIPs system on chips SoCs central processing units e.g. one or multiple cores microcontrollers and or some other type of component that interprets and or executes instructions and or data. Processor may be implemented as hardware e.g. a microprocessor etc. or a combination of hardware and software e.g. a SoC an ASIC etc. . Processor may include one or multiple memories e.g. memory storage etc.

Processor may control the overall operation or a portion of operation s performed by device . Processor may perform one or multiple operations based on an operating system and or various applications or programs e.g. software . Processor may access instructions from memory storage from other components of device and or from a source external to device e.g. a network another device etc. .

Memory storage may include one or multiple memories and or one or multiple other types of storage mediums. For example memory storage may include one or multiple types of memories such as random access memory RAM dynamic random access memory DRAM cache read only memory ROM a programmable read only memory PROM a static random access memory SRAM a single in line memory module SIMM a phase change memory PCM a dual in line memory module DIMM a flash memory and or some other type of memory. Memory storage may include a hard disk e.g. a magnetic disk an optical disk a magneto optic disk a solid state disk etc. a Micro Electromechanical System MEMS based storage medium and or a nanotechnology based storage medium. Memory storage may include drives for reading from and writing to the storage medium.

Memory storage may be external to and or removable from device such as for example a Universal Serial Bus USB memory stick a dongle a hard disk mass storage off line storage or some other type of storing medium e.g. a compact disk CD a digital versatile disk DVD a Blu Ray disk BD etc. . Memory storage may store data software and or instructions related to the operation of device .

Software may include an application or a program that provides a function and or a process. Software may include firmware. Communication interface may permit device to communicate with other devices networks systems etc. Communication interface may include one or multiple wireless interfaces and or wired interfaces. Communication interface may include one or multiple transmitters receivers and or transceivers. Communication interface may operate according to one or multiple protocols standards and or the like.

Input may permit an input into device . For example input may include a keyboard a mouse a display a touchscreen a touchless screen a button a switch an input port speech recognition logic and or some other type of visual auditory tactile etc. input component. Output may permit an output from device . For example output may include a speaker a display a touchscreen a touchless screen a light an output port and or some other type of visual auditory tactile etc. output component.

Device may perform processes and or functions as described herein in response to processor executing software stored by memory storage . By way of example instructions may be read into memory storage from another memory storage or read into memory storage from another device via communication interface . The instructions stored by memory storage may cause processor to perform one or more processes described herein. Alternatively for example according to other implementations device may perform one or more processes described herein based on the execution of hardware processor etc. or the execution of software e.g. processor executing software .

Referring back to user interface allows a user to make a provisioning request and automate the provisioning thereof. The provisioning request may be stored in database . Provided below is a description of an exemplary process for executing a provisioning request. A description of Operations Orchestrator OO scripts or flows is provided in the Appendix to this specification.

Referring to block process begins with receiving a provisioning request. For example an administrator of the standard operating environment creates a provisioning request via the workflow tool of hardware and software management tool . The workflow tool may be implemented in user interface . For example user interface may be implemented as a web service for the administrator. The provisioning request may for example serve as a request to provision a virtual machine in one of the data centers or . Access logic manages the authorization and privileges associated with the administrator relating to the creation of the provisioning request.

In block the provisioning request is stored. For example the workflow tool stores the provisioning request in database .

In block an attempt to lock the provisioning request and actions is initiated. According to an exemplary embodiment provisioning engine locks the processing of the provisioning request to avoid conflicts with other users provisioning requests. For example the administrator may invoke the execution of the provisioning request via user interface . In order for the provisioning engine to lock the provisioning request for execution the administrator may ensure that the resources are available. For example the administrator via user interface may analyze the capacity or check the availability of the resource to be provisioned. For example assume the provision request pertains to provisioning a virtual machine. In this case the administrator may analyze or check the availability of computing resources e.g. CPU to execute the provisioning of the virtual machine storage e.g. memory to store provisioning details pertaining to the virtual machine capacity in the network e.g. bandwidth that allows the provisioned virtual machine to perform within the standard operating environment and a virtual network interface card that allows communication between the provisioned virtual machine and other components in the standard operating environment.

In block it is determined whether the lock is successful. For example if user interface indicates a confirmation that the resources are available block YES then provisioning engine e.g. operations orchestrator is locked for processing the provisioning request and process continues to block . If it is determined that the lock unsuccessful block NO then process ends block . For example is user interface indicates that the resources are not available a time out period may occur or provisioning engine may proceed to satisfy another provisioning request.

In block the request details are retrieved. For example in response to obtaining an indication that the request and actions are locked provisioning engine retrieves the provisioning request information of the provisioning request from database . For example the provisioning engine may use an identifier associated with the provisioning request to retrieve the particular provisioning request information.

In block an action is selected. For example provisioning engine e.g. operations orchestrator selects an action for satisfying the provisioning request to be performed. For example in the case of a provisioning request to provision a VM provisioning engine determines which virtualization solution e.g. VMWare or OVM is to be used to satisfy the provisioning request. Additionally for example provisioning engine determines which data center e.g. one of data centers or that the VM is to be provisioned. A provisioning request may require multiple actions to be performed before the provisioning request is satisfied.

In block OO scripts and parameters are obtained. For example provisioning engine e.g. operations orchestrator selects the appropriate flow s e.g. deployment flows framework flows etc. and parameters pertaining to the action to be performed. According to this example in which a VM is provisioned provisioning engine selects one of VM operation flows from deployment flows based on the provisioning request information. For example the provisioning request information may include the amount of resources needed e.g. in terms of memory CPU disk space etc. which data center the VM is to be provisioned e.g. data center data center etc. which type of virtual machine etc.

In block an XML for OO scripts is prepared. For example in the case of a provisioning request to provision a VM of the OVM type a script included in the selected VM operations flow converts the parameters to a format e.g. Extensible Markup Language XML to allow those parameters to be ingested or understood by the selected VM operation flow . That is for example an XML file is generated based on input values obtained during the creation of the provisioning request. The XML file may be a format that is understood by the OO scripts. According to another example in the case of a provisioning request to provision a VM of the VMWare type provisioning engine determines that the VM needs to be deployed on a VMWare Hypervisor. In response thereto provisioning engine selects the appropriate custom action e.g. a custom script that is not supplied or not supplied natively by HP Operations Orchestration software . In addition provisioning engine selects VMWare integration e.g. a VMware API that integrates with hypervisor for VM provisioning.

Referring to block an OO flow is invoked. For example provisioning engine e.g. operations orchestrator executes the OO flow. Depending on the data center to which the OO flow pertains provisioning engine provisions on a physical machine e.g. physical machine physical machine etc. via a hypervisor e.g. hypervisor hypervisor etc. a virtual machine. By way of example the Appendix includes exemplary OO flows that may be executed by provisioning engine .

For purposes of description assume a flow used to deploy a Linux operating system on a physical host or a virtual host is invoked. It may be assumed that all of the necessary parameters used in the flow have been obtained and that a physical machine or a virtual machine is ready for deployment.

In block provisioning engine waits a period of time for the OO flow to execute. In block it is determined whether the action is complete. For example during the execution of the OO flow provisioning engine may receive messages indicating the status of an operation e.g. success or failure of the flow and or the point of the flow in which execution of the flow is occurring. Provisioning engine may monitor the execution of the OO flow based on receiving messages from integration layer .

A description of the execution of the flow to deploy the Linux operating system on a physical or virtual machine is provided. For an exemplary first step a Network File System NFS Share is mounted on the virtual machine that contains the operating system packages needed to install the operating system. A script obtains an IP address of a media server and a path to the operating system packages. The IP address of the media server is auto obtained based on a network range to which the physical machine or the virtual machines belongs. For an exemplary second step a kickstart file is generated. The kickstart file includes values needed to build the unique host. For example these values include the IP address of the host the subnet mask of the host the default gateway of the host the IP address NFS server that stores the operating system packages and the path to the packages. The script collects all of the necessary information by interrogating the running physical or virtual machine. The script may also use hard coded values. Once all of the values are collected the script generates the kickstart file.

For an exemplary third step the script determines how to partition the disks in the host most efficiently and then generates the kickstart file parameters necessary to do so. Since not all of the physical or virtual hosts have the same disk size or number of disks the script determines if the root partition and the swap partition should be on the same disk or different disks if the system has multiple disks based on an interrogation of the running host. The script also determines the necessary size of each partition by calculating the amount of memory in the host and basing the swap partition size on memory size. The remaining disk space may be given to the root partition. For an exemplary fourth step the script deploys an agent on the host. For an exemplary fifth step the script determines if the system model is XEN i.e. an OVM type . If the system model is XEN then the script deploys a file needed to properly partition the disk to the file system. For example the file includes instructions of a kickstart file process so as to properly partition and format the disks on a XEN host before attempting to store a file system on the disks.

For an exemplary sixth step the script creates a bootable partition with all of the necessary kickstart files on the disk needed to boot the host and begin a kickstart process. For an exemplary seventh step the script reboots the host into the newly created bootable partition. In some instances in the seventh step the bootable disk is improperly identified. In such cases for an exemplary eighth step the script interrogates the physical or virtual machine and properly identifies which disk should be bootable and sets that disk to boot from in a grub menu.

For an exemplary ninth step the script reboots the host into the bootable partition and waits a predetermined period of time for the host to be available again. It may be assumed that the host reboots within the predetermined period of time. For an exemplary tenth step the script remounts a previous media server share location on the newly booted host in order to use the operation system packages for install. The script may tail the installation logs and display the logs on a screen e.g. a user interface in order pass information back to a user about what is occurring on the host. For an exemplary eleventh step the script stages the installation of an agent on the host that will be used later for system management.

For an exemplary twelfth step the script begins the configuration of the newly installed operating system. The script configures a secure shell ssh daemon to conform to business rules e.g. a user may not be inactive for more than a predetermined period of time etc. . For an exemplary thirteenth step the script sets the hostname of the host. According to an exemplary implementation if the hostname is not pre defined the script interrogates the host for a correct value. Additionally the script configures a crontab entry on the host to clear the mail of the root user every quarter. In this way the mail account of the root user may not fill up the file system.

For an exemplary fourteenth step the script configures the proper time servers of the host. For example the script determines the location of the host and then dynamically configures the network time protocol NTP servers on the host. In some instances not all of the NTP servers are accessible to all hosts. Thus using the proper time server is the only way to guarantee correct time on the host.

For an exemplary fifteenth step the script configures a logrotate daemon to comply with business log retention policies. For example the script may modify the configuration to retain twelve weeks of server logs on the system. The script stages the files necessary to install an agent e.g. a tivoli agent etc. on the host during the next reboot. For an exemplary sixteenth step the script stages the files necessary to install an agent e.g. a CA e trust agent on the host during the next reboot. The script also stages the files necessary to install an agent e.g. a BMC patrol agent on the host during the next reboot.

For an exemplary seventeenth step the script determines if the host is a VMware VM by interrogating the running machine and if so pre stages the files necessary to deploy the VMware Tools on the host. If the host is not a VMware VM the script will perform an auto skip.

For an exemplary eighteenth step the script configures the host to auto start or auto stop various system services e.g. network time protocol daemon ntpd on xinetd on iptables off multipathd on kudzu off cups off smartd off avahi daemon off avahi dnsconfd off required for normal operation. The script also deploys a number of configuration files on the host needed for its proper operation. The files may be pulled from the media share mounted earlier. The files may be deployed to their necessary locations on the host.

For an exemplary nineteenth step the script determines if the host is a physical host and if so configures the system to use network bonding. The script cycles through each network interface on the host configures them with the proper network settings and then pings a default gateway. If the gateway can be pinged then that network interface is determined to be a part of the network bond. Once all of the network interfaces have been cycled through the network interfaces that were determined to be a part of the bond are configured in a bonded network setup. If the host is a virtual machine the script will perform an auto skip. Additionally when the host is a physical host an Emulex fiber channel adapter drivers and application are installed on the host. Similarly if the host is a virtual machine the script will perform an auto skip.

For an exemplary twentieth step the script deploys a script that will have the system auto mount a media repository during the next boot. For example this may be performed to complete the installation of the agents e.g. eTrust Tivoli etc. and or other applications. Once the script mounts the media share the script performs an auto remove of itself from the host.

For an exemplary twenty first step the script reboots the host to complete the installation. For an exemplary twenty second step the script writes a completion file to the host file system in a particular path e.g. tmp builddone that will allow other scripts to identify when the server is done building itself. The script also updates a file e.g. etc motd file and sets the date the server was built. The script waits e.g. a configurable amount of time for the system to return from the reboot and become available.

For an exemplary twenty third step the script checks for the existence of the completion file. If the completion file is found the build process continues. If the completion file is not found with a predetermined time the build will fail. For purposes of description it may be assumed that the completion file is found.

For an exemplary twenty fourth step the script determines the operating system version and the location of the host. For example the script interrogates the host. Once the values are determined the script auto configures a configuration file e.g. etc yum.repos.d ULN Base yum.repo for the proper operation system version and will use the yum repository that is geographically closest to the host. The script also performs a system update on the host and applies operation system patches from the yum repository previously configured.

For an exemplary twenty fifth step the script determines if the host is a XEN host and if so blacklists various kernel modules on the host. In this way for example the host may not load certain kernel modules but only proper modules. That is this may be necessary for obtaining optimal performance of XEN virtual machines. If the host is determined not to be a XEN host the script performs an auto skip. Additionally if the host is a XEN host the script reconfigures the initrd to not probe the ide0 and ide1 channels and also preloads various XEN modules into the initrd for proper booting of the XEN virtual machine.

For an exemplary twenty sixth step the script determines if the virtual machine is a XEN guest and if so the script configures a file e.g. etc sysctl.conf to allow the virtual machine to independently set its system time and not use a hypervisor time. If the system is not a XEN virtual machine the script performs an auto skip. Additionally the script determines if the host is a XEN virtual machine and if so the script configures various storage settings on the virtual machine. If the host is not a XEN virtual machine the script performs an auto skip.

For an exemplary twenty seventh step the script sets a build date variable on the host. The build date variable may be used to help determine what date the host was initially provisioned.

For an exemplary twenty eighth step the script determines if the host is a XEN virtual machine and if so the script configures the auto.home settings on the host which may be necessary for proper use. The script determines the geographical location of the host and configures the proper share home directory based on the geographic location of the host. If the host is not a XEN virtual machine the script performs an auto skip.

For an exemplary twenty ninth step the script determines if the host is properly identified by its operating system type. If it is determined that the host has an operating system type of unknown then the script properly sets the operating system name.

For an exemplary thirtieth step the script deploys agents e.g. DDMI DDMA etc. on the host. Additionally the script determines in which data center e.g. data center the host is located. The script also checks the configuration file e.g. etc ntpd.conf file to determine if the proper network time protocol servers are configured on the host. The configuration may be changed if necessary.

For an exemplary thirty first step the script deploys an agent e.g. an ILMT agent on the host. The script also deploys Phython Opsware API files on the host and software policies pertaining to the host.

For an exemplary thirty second step the script determines if the host is a VMware virtual machine and if so the script auto runs a command e.g. the usr bin vmware config tools.pl d command . For example it may be necessary to auto run the command because the kernel may have been updated and the system may not be running a new kernel. In response thereto the system will update the VMware tools for the currently running kernel. If the host is determined not to be a VMware virtual machine the script performs an auto skip.

For an exemplary thirty third step the script determines if the network interfaces have randomly changed their names. For example if a name changed from eth0 to eth1 or eth1 to eth0. If this occurred then the script reconfigures the names back to their original names. The script also sets a configuration setting that will allow other systems to determine which group e.g. business group owns the host and in turn which system administrator s has have access to this host.

For an exemplary thirty fourth step the script reboots the host after all configuration changes and updates have been made. Additionally the script removes the Dynamic Host Configuration Protocol DHCP configuration for the host from the DHCP servers. In this way the host may have a statically assigned IP address.

If it is determined that the action is not complete block NO then it is determined whether a maximum iteration is reached block . For example based on messages received provisioning engine may store a counter to keep track of the iterations for execution. Provisioning engine determines whether a maximum number of iterations have been attempted. By way of further example provisioning engine determines whether the maximum number of iterations has been attempted to provision the host.

If it is determined that the maximum iteration is not reached block NO then process continues to block . If it is determined that the maximum iteration is reached block YES then the action and request is marked as a failure block . For example provisioning engine stores information e.g. in database that the action and the provisioning request has failed. In block the action and the request are released. For example provisioning engine releases the resource and unlocks the provisioning request. In block process ends.

Referring back to block if it is determined that the action is complete block YES then it is determined whether there is another action block . For example provisioning engine determines whether another flow to satisfy the provisioning request needs to be performed. If it is determined that there is another action block YES then process continues to block .

If it is determined that there is not another action block NO then the action and the request is marked as a success block . For example provisioning request stores information e.g. in database that the action and the provisioning request has succeeded. In block the action and the request are released. For example provisioning engine releases the resource and unlocks the provisioning request. In block process ends.

Although illustrate an exemplary process pertaining to a workflow for provisioning in the standard operating environment according to other embodiments process may include additional operations fewer operations and or different operations than those illustrated in and described herein. For example the actions described in relation to the script for building the host are exemplary and other types of automated provisioning will include a different set of actions.

The number of devices the number of networks and the configuration in environment are exemplary and provided for simplicity. According to other embodiments environment may include additional devices fewer devices different devices and or differently arranged devices than those illustrated in . Additionally or alternatively environment may include an additional network and or a differently arranged network than the network illustrated in .

The foregoing description of embodiments provides illustration but is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Accordingly modifications to the embodiments described herein may be possible.

The terms a an and the are intended to be interpreted to include one or more items. Further the phrase based on is intended to be interpreted as based at least in part on unless explicitly stated otherwise. The term and or is intended to be interpreted to include any and all combinations of one or more of the associated items. The term exemplary is intended to be interpreted to mean serving as an example. 

In addition while a series of blocks has been described with regard to the process illustrated in the order of the blocks may be modified according to other embodiments. Further non dependent blocks may be performed in parallel. Additionally other processes described in this description may be modified and or non dependent operations may be performed in parallel.

The embodiments described herein may be implemented in many different forms of software firmware and or hardware. For example a process or a function may be implemented as logic or as a component. This logic or this component may include hardware e.g. processor etc. or a combination of hardware and software e.g. software . The embodiments have been described without reference to the specific software code since software can be designed to implement the embodiments based on the description herein.

Additionally embodiments described herein may be implemented as a non transitory storage medium that stores data and or information such as instructions program code data structures program modules an application etc. A non transitory storage medium includes one or more of the storage mediums described in relation to memory storage .

In the preceding specification various embodiments have been described with reference to the accompanying drawings. Various modifications and changes may be made thereto and additional embodiments may be implemented without departing from the broader scope of the invention as set forth in the claims that follow. The specification and drawings are accordingly to be regarded as illustrative rather than restrictive.

In the specification and illustrated by the drawings reference is made to an exemplary embodiment an embodiment embodiments etc. which may include a particular feature structure or characteristic in connection with an embodiment s . However the use of the phrase or term an embodiment embodiments etc. in various places in the specification does not necessarily refer to all embodiments described nor does it necessarily refer to the same embodiment nor are separate or alternative embodiments necessarily mutually exclusive of other embodiment s . The same applies to the term implementation implementations etc.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

No element act or instruction described in the present application should be construed as critical or essential to the embodiments described herein unless explicitly described as such.

