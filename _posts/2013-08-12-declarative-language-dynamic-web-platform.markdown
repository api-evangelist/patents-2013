---

title: Declarative language dynamic web platform
abstract: Described is a dynamic web platform configured to provide content rendered with one or more rendering systems. The rendering systems and the modules making up the rendering modules may interact with one another by way of declarative data. Administrators may configure the platform using the declarative data. The declarative data may express operational parameters, business rules, and so forth and may be modified while the platform is operating. The modules in the rendering system may be loosely bound, allowing for concurrent operations, dynamic changes to what content is to be rendered, and so forth.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507882&OS=09507882&RS=09507882
owner: Amazon Technologies, Inc.
number: 09507882
owner_city: Reno
owner_country: US
publication_date: 20130812
---
Users use client devices to access a wide variety of content from online providers. This content may be associated with various endeavors such as ecommerce communication medicine education and so forth.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

Users may use client devices to access a wide variety of content available from online resources. The content may support various endeavors such as ecommerce communication medicine education and so forth. The content may be expressed as web pages which are rendered in a markup language for presentation by the client devices.

The content may be customized to provide information which is specific to a particular user or group of users. Traditional dynamic web platforms may include one or more servers which are configured to access various pieces of data and render content for delivery to the client device.

These traditional platforms may use many different modules to provide the various functions associated with rendering the content. These modules may provide functionality such as accessing data generating views controlling the functionality and so forth. In these traditional platforms these modules are tightly bound to one another with the binding expressed in program code.

Modules which are tightly bound to one another are closely interconnected. As a result changes to one may impact another. Tight binding may be expressed as a condition where modules are interconnected more than necessary to function. For example a first module may be considered tightly bound when the first module requests all fields in a table from a second module when only one of those fields is actually used by the first module.

In comparison loosely bound modules are less interconnected. Changes to one module need not impact another module. As a result the loosely bound modules may be expressed as being interconnected just enough to function. Continuing the example when the first module is loosely bound to the second module the first module requests from the table only the single field actually used. Other changes to the table in the second module such as adding fields would not adversely impact the operation of the first module.

By loosening the binding between modules various benefits may be realized. Some functions in the modules may be performed concurrently reducing overall elapsed time to deliver rendered content. Changes to one module are less likely to impact other modules reducing development deployment complexity and costs.

Described in this disclosure is a dynamic web platform which incorporates a declarative language and corresponding declarative data to configure interactions between loosely bound modules. The declarative language is consistent across the platform allowing for ease of development deployment and maintenance. The declarative data may express operational parameters business rules and so forth. For example the declarative data may specify uniform resource locators URLs which are supported by the platform information about what content to present how to interact with a user and so forth.

The platform is made up of rendering systems which may be deployed across one or more devices including servers and client devices. The rendering systems may operate in a cooperative fashion with little or no established hierarchy. The rendering system includes a controller module and an assembler module. Additional modules such as a view module data module event module and so forth may also be present.

The controller module is configured to accept requests for content or information based on those requests and generate a strategy for rendering the content. The controller module accesses declarative data and uses one or more selectors to process information in the request using the declarative data and determine a strategy about the content to be rendered. The controller module in one rendering system may send inquiries to other controller modules and receive back declarative data.

The controller module determines one or more jobs based on the determined strategy and passes these jobs to the assembler module. The assembler module is configured to coordinate performance of the jobs by scheduling ordering optimizing and so forth. The assembler module is configured to provide assembler feedback to the controller module which is indicative of the status of the jobs. Based on the assembler feedback the controller module may modify the strategy and the operation of the assembler module make inquiries for declarative data and so forth. The feedback between the controller module and the assembler module allows the rendering system to be reactive to changes in the declarative data describing the rendering. For example as additional declarative data is received and determined new jobs may be created existing jobs may be canceled and so forth.

Furthermore because of the comparatively loose binding between the modules in the rendering system the assembler module may direct various jobs to be executed concurrently avoiding the blocking problems of traditional platforms and reducing time to generate the rendered content. For example the assembler module may direct a job to begin generating a view of a webpage which includes non user specific elements while data is retrieved for user specific content such as particular product recommendations.

The rendering systems operate in concert with one another using the declarative data expressed in the same declarative language. As a result an administrator or other party may easily modify operation of a particular rendering system or the entire platform by changing declarative data. The rendering platform as a whole may be implemented as a decentralized distributed system with little or no hierarchy between the individual rendering systems. As a result the rendering platform is not subject to outages resulting from failure of a central authoritative system. Furthermore the rendering platform may be highly resistant to failure of individual rendering systems. For example inoperability of a particular rendering system may impact the delivery of a particular portion of the rendered content but the user may still receive some content.

In certain circumstances some hierarchy may be established between the rendering systems. For example a server implementing a bootstrap module may provide initial configuration details to a rendering system which comes online. Inquiries for declarative data or other information may be directed to this server to other servers or to a combination thereof.

By defining different pieces of declarative data a single platform may provide rendered content for different entities domains and so forth. For example a single platform may provide dynamic content to users for many different domains having different content business rules and so forth. This improves overall utilization of the platform resources which may reduce costs. Flexibility provided by the use of the common declarative language and the loose binding between the modules of the rendering system eases development deployment and maintenance. Additionally the flexibility may allow for easier customization of the rendered content to a particular user and a reduction in time to deliver the rendered content which improves the overall experience of the user.

Coupled to the network are one or more client devices . The client devices may include televisions tablet computers smartphones personal computers electronic book eBook readers gaming consoles set top boxes portable media players servers and so forth. The client device is discussed in more detail below with regard to . The client device may communicate with the servers or other devices in the rendering platform by way of the network .

Executing on one or more of the servers are one or more rendering systems . . . R . The rendering system provides at least a portion of the functionality of dynamically generating content. The rendering system may be envisioned as a stack of modules. In some implementations the rendering system may execute as a single thread.

The modules may either be discrete with each performing a particular set of one or more functions or may be merged in various combinations. The rendering system may include one or more of a controller module an assembler module a view module a data module and an event module . For example as shown here the rendering system may include all of these modules while the rendering system may contain only the controller module and the assembler module . These modules may be written in a variety of languages including imperative or procedural languages such as Java C C Fortran and so forth. One or more modules in the system may implement one or more machine learning techniques for use in operation. These machine learning techniques may include a neural network Bayesian network and so forth. For example the controller module the assembler module and so forth may use machine learning techniques to modify operation based at least in part on ongoing inputs and operating characteristics such as latencies processing requirements memory requirements bandwidth requirements and so forth.

The rendering system includes or accesses declarative data and other data such as user information product information markup language and so forth. When in operation the rendering system accepts a request or information based on the request and produces rendered content . For example the client device may send a request using the network to the rendering platform . The rendering platform passes the request or information based on the request to the rendering system .

The rendered content may include one or more of executable script markup language data cascading style sheet CSS data image data text data binary data audio data or video data. For example the rendered content may include JavaScript hypertext markup language HTML files pictures and so forth.

The modules of the rendering system may be considered loosely bound to one another as compared to being tightly bound. Modules which are tightly bound to one another are closely interconnected. As a result changes to one may impact another. Tight binding may be expressed as a condition where modules are interconnected more than necessary to function. For example a first module may be considered tightly bound when the first module requests all fields in a table from a second module when only one of those fields is actually used by the first module.

In comparison loosely bound modules are less interconnected. Changes to one module need not impact another module. As a result the loosely bound modules may be expressed as being interconnected just enough to function. Continuing the example when the first module is loosely bound to the second module the first module requests from the table only the single field actually used. Other changes to the table in the second module such as adding fields would not adversely impact the operation of the first module. Said another way the loose binding may indicate that respective inputs and outputs of one module are coupled to another module such that functionality between modules is maintained after modification of one or more modules.

By loosening the binding between modules various benefits may be realized. Some functions in the modules may be performed concurrently reducing overall elapsed time to deliver the rendered content . Changes to one module are less likely to impact other modules reducing development complexity and costs.

The controller module receives the request and begins processing. The request may include some information such as network address of the client device a particular uniform resource locator URL which the request is intended for and so forth. The controller module accesses the declarative data and begins processing the request using this declarative data . The controller module is described briefly below and in more detail with regard to .

The declarative data includes expressions which are indicative of one or more of business rules operational parameters and so forth. For example the business rules may specify that particular domain names such as a.com and b.com are supported by the rendering platform or designate a particular sales tax module to be used. Similarly the operational parameters may specify how to distribute processing loads across the servers in the rendering platform . The expressions in the declarative data implement a declarative language.

The declarative language allows a user such as an administrator to designate an outcome without specifying how to achieve that outcome. In some implementations the declarative data may specify one or more operations without explicitly defining a sequence of performing the one or more operations. In this way the declarative language differs from imperative languages such as Java C C. For example the declarative data may specify ACCEPT REQUEST FROM .A.COM RENDER CONTENT FOR .A.COM . By implementing the use of the declarative data based on a declarative language to configure the behavior of the rendering platform the administration of the rendering platform may be made simpler. For example responsibility for generating or modifying the declarative data may be taken over by individuals which are operationally closer to a particular business unit rather than handing off to a programmer familiar with Java. The declarative data is described in more detail below with regard to .

The controller module uses the declarative data to build a strategy as to how to satisfy the request . The building of the strategy may be based at least in part on one or more machine learning techniques. For example the controller module may learn based on previous strategies and their outcomes to predict certain behaviors modify operation to account for anticipated constraints such as limitations on network bandwidth and so forth. In some implementations the controller module may require additional declarative data to complete the request . As a result the rendering system may inquire of other rendering systems R for additional declarative data . Continuing the example the rendering system may request more detail about what RENDER CONTENT FOR .A.COM entails. The rendering system may send an inquiry to rendering system which may return declarative data indicating IF TODAY HOLIDAY THEN SHOW HOLIDAY BANNER . The acquisition of this declarative data may be recursive in that many rendering systems may be implicated to gather the declarative data . In some implementations the declarative data may be locally stored or cached by the rendering system to reduce the frequency of inquiries.

Once the controller module has built a strategy to begin satisfying the request the controller may send one or more jobs or data indicative of jobs to the assembler module . The assembler module is responsible for initiating the execution coordinating scheduling sequencing terminating and so forth of the jobs. The operation of the assembler module may be based at least in part on one or more machine learning techniques such that operation of the assembler module is adaptive to changing conditions in the rendering platform . For example based on particular jobs the assembler module may predict particular blocking events and adjust the sequencing of the jobs to proactively avoid or minimize these blocking events. Because the machine learning is automated the assembler module and thus the overall rendering platform is able to be responsive to changes without the need for human intervention. The assembler module may be configured to optimize the jobs by consolidating redundant jobs and so forth. Because of the loose binding between the modules some of the one or more jobs may be executed concurrently may be executed before all of the data needed by the job is available and so forth.

The assembler module may send the jobs to the other modules in the rendering system such as the view module the data module the event module and so forth. As described above in some situations the jobs may be executed by different modules concurrently.

The view module is configured to generate a user interface or data which may be configured to generate a user interface when processed by the client device . This user interface may be expressed as one or more markup language data files cascading style sheets CSS script such as JavaScript and so forth. For example the view module may be configured to generate JavaScript which when executed by the client device provides an interactive control.

The data module is configured to perform one or more data operations. These data operations may include retrieving data writing data modifying data transforming data and so forth. For example the data module may be configured to query a database management system to store user input.

The event module is configured to perform one or more of logging data generating metrics issuing alerts and so forth. For example the event module may be configured to responsive to a job enter a log entry into a log data file indicating that a particular job has been performed. In another example the event module may generate metrics such as a number of transactions processed per second store processor usage details and so forth.

One or more of the modules of the rendering system may be configured to generate telemetry data . For example the controller module may be configured to generate telemetry data . The telemetry data may comprise information indicative of the operation of the modules the rendering system hardware and so forth. The telemetry data may be exchanged between the rendering systems or other devices. For example the telemetry data from the rendering systems may be provided to an administrative server. The administrative server may use the telemetry data to manage operation of the rendering platform .

As described above responsive to the request one or more of the rendering systems produce the rendered content . The rendered content may comprise one or more files which are configured to present information or support other actions on the client device . The rendered content may be sent by the rendering platform by way of the network to the client device . The client device includes an application module . The application module is configured to accept the rendered content . The application module may be configured to present output receive input and so forth based at least in part on the rendered content .

In one implementation the rendering system may extend to the client device . In this implementation the rendering system or a subset thereof may be operable on the client device . Prior to sending the request the local rendering system L may be configured to process the request and work in conjunction with other rendering systems R in the rendering platform to produce the rendered content .

Different selector modules in the controller module may perform different parsing operations implementing different logic which in turn are used to determine what is to be included in the rendered content . For example the selector module may be configured to gather information associated with rendering content based on an item identifier while the selector module may be configured to select banner advertisements.

In some situations the controller module may require additional declarative data . For example additional details about how to present a particular piece of content may need to be gathered. The controller module may issue one or more inquiries . . . Q . Other controller modules may respond with additional declarative data . below describes this situation in more detail.

The controller module is configured to generate and send one or more jobs . . . J to the assembler module . In some implementations the controller module may send other data to the assembler module which in turn generates the jobs .

The assembler module receives the jobs and is responsible for managing the operation of those jobs . The assembler module may coordinate schedule initiate terminate and so forth the jobs . The assembler module may be configured to process the jobs by consolidating jobs which result in the same data terminating or not initiating jobs which produce duplicative results and so forth.

In one implementation the assembler module may use one or more machine learning techniques to learn how to manage the jobs . The assembler module may learn based on jobs received using operational information such as blocking events latencies and so forth. In some implementations the assembler module may be initially configured with details about how to manage the jobs . However over time based on the experiences of the assembler module the behavior of the assembler module may be modified relative to the initial configuration adapting to the changing needs of the rendering platform . In this way instead of requiring programmers to manually update and manage operation of the assembler modules ongoing operation of the assembler module may be automated removing the need for manual intervention.

The jobs which may have been modified or generated by the assembler module are sent to other modules for processing. Because of the loose binding between the modules some of the jobs may be executed concurrently. For example the job to generate a view of the basic web page may begin processing by the view module while the data module retrieves detailed information about a particular product. The data module may send results of that retrieval to the view module and to the controller module . The one or more of the selector modules of the controller module may then use those results to generate the rendered content instantiate additional selector modules and so forth. For example the selector module based on the declarative data may call for additional filtering of the results . This filtering may invoke selector module to perform this processing.

The assembler module may be configured to provide assembler feedback to the controller module . The assembler feedback is information indicative of the status or progress of the jobs or is otherwise indicative of the execution of the jobs . For example the assembler feedback may indicate that a particular job has reached a timeout limit or has completed but is waiting for a blocking event such as another job to finish. In some implementations the assembler feedback may be omitted and the controller module may use the results themselves as the feedback.

As illustrated here the controller module and the assembler module are coupled to one another in a feedback loop. As a result the strategy of the controller module and the jobs which the assembler module is processing may change from time to time. The strategy associated with responding to the request may change as additional information in the form of declarative data assembler feedback and so forth is received. This in turn may result in changes to the activity of the assembler module . As a result the rendering system is highly dynamic in operation. For example as additional declarative data is received from other controller modules the information about the rendered content may continue to be refined and focused. While that refinement is occurring jobs which have become unnecessary due to changing information are terminated while new jobs are initiated.

The operation of the rendering system may reduce a quantity of data processed or cached. For example the controller module and the assembler module may be configured to request and cache information which is actually implicated by the request and declarative data . Compared to purely predictive caching this may reduce the transfer and storage of cached data which may go unused. However in some implementations the rendering system may cache both data actually implicated as well as data predicted to be used. By reducing the amount of data transferred stored or otherwise processed the rendering system frees up resources for processing additional requests or other tasks.

Operation of the rendering system as described above significantly reduces blocking events and their impact. As a result a time to first byte delivered responsive to the request may be reduced from milliseconds to microseconds. For example the rendering system as described need not wait for operation of the data module or other input output bound actions to begin generating and providing at least a portion of the rendered content to the client device . Additionally the action of the controller module and the assembler module allows for the jobs to be executed in parallel where possible as described next in .

As shown here the rendering system accepts the request or information based on the request. While processing the request the controller module determines additional declarative data is called for. For example the declarative data may specify RENDER CONTENT FOR .A.COM but may not provide details about exactly what is to be rendered. Lacking these details the rendering system may generate one or more inquiries which are sent to other rendering systems seeking declarative data associated with rendering the content for the domain .A.COM . As shown here the rendering system may send inquiry to the rendering system and inquiry to the rendering system .

The rendering system accepts the inquiry . The rendering system has some relevant declarative data and returns this to the rendering system . The rendering system accepts the inquiry and responsive to the inquiry generates additional inquiries and which are sent along to rendering system and respectively. The rendering system sends declarative data to the rendering system . However the rendering system does not respond to the inquiry perhaps because no declarative data is available. The rendering system provides declarative data to the rendering system . The declarative data may be based on declarative data stored on the rendering system as well as the declarative data which was received.

The rendering platform may thus process the request by having the rendering systems in the platform working in concert to gather declarative data associated with the request . The rendering systems operate in a collaborative and decentralized fashion in that no centralized administrative or authoritative system may be present. As a result the rendering platform or the components therein may be easily scaled to support higher or lower processing loads. Additionally this improves fault tolerance by removing a single point of failure in the form of the centralized authority.

Given the distributed nature of the rendering platform the user experience may vary should one of the rendering systems fail to return declarative data . For example when the rendering platform is fully operational the rendered content may comprise a webpage which is highly customized to the particular user including controls advertisements products and details which have been tailored to be of greatest relevance to the user . Should one of the rendering systems fail to return a particular piece of declarative data the rendered content would still be delivered but may be slightly less specific to the user . For example should the rendering system fail to return declarative data which defines how to present a particular product to a particular user the rendered content from the rendering system may omit that particular product.

The operation of the rendered platform may also be expressed in terms of an expansion of information based on the initial request . Based on information in the initial request the processing by the rendering system based on the declarative data may expand this information into a detailed expression describing the user . For example based on source Internet Protocol IP address and a URL the rendering platform may be configured to generate data indicating 

Ms. Jones purchases and reads her detective stories using an Ignite model eBook reader which has a color display.

Detective story purchases by Ms. Jones are delivered to her Ignite using a digital fulfillment system.

The purchase of these stories is made 90 of the time responsive to weekly banner ads for detective stories.

The weekly banner ads are placed on the introductory page to the a.com website between the hours of 12 p.m. and 1 p.m. local time on weekdays.

As described above because the declarative data is more easily manipulated by administrators changes to the rendering platform may be made by a variety of different parties responsible for maintaining the rendered content . For example a business unit responsible with maintaining the banner ads may more readily change banner ads so Ms. Jones and other similar users may receive color banner ads which take advantage of the color display on the Ignite eBook reader.

Additionally the declarative data associated with a particular entity domain name business and so forth may be copied or transferred to another rendering platform . This allows for easy transfer to a different service provider eases deployment and so forth. For example a business which operates a website selling shoes in the United States may copy the declarative data associated with that website to a rendering platform executing in France. That copy of the declarative data may then be modified to account for the different business environment of France. As a result the French website may be brought online more quickly by reusing at least some of the declarative data .

In the illustrative example of declarative data is distributed across rendering systems . Each piece of declarative data contributes to the website to be supported by the rendering platform . For example each piece is used to determine what and how the website is produced in the rendered content . For example as shown here the declarative data used by the rendering system specifies that the rendering system will respond to and render content for the domain .A.COM where the asterisk acts as a wildcard. As described above with regard to the rendering systems may inquire and receive declarative data from other rendering systems . As shown here the rendering system may have inquired and received the declarative data and from the rendering system which provide for a holiday banner and identification of the user respectively.

The rendering system may in turn make inquiries for additional pieces of declarative data as shown below. Continuing the example the rendering system may contain declarative information and which relates to user preferences and user interface elements. Meanwhile the rendering system may provide declarative data which determines whether the request comes from the identified user s home address and if the user is home a local advertisement is presented.

As described above the controller modules of the rendering system may be configured to parse and act on the request based at least in part on the declarative data available. In one implementation the declarative data may be returned to the rendering system for processing and generation of the rendered content .

In another implementation the inquiry may include data which the recipient controller modules process according to the declarative data stored locally. In this implementation the processing and subsequent execution of the jobs may be distributed across many different rendering systems .

The rendering platform may support different entities at the same time. For example as shown here entity and entity coexist within the same rendering platform . In this example entity may be an online merchant while entity is an organization such as a food bank.

The entity may provide content associated with one or more websites . The websites operated by the entity may have different functionality different look and feel and so forth. For example the entity may operate the website for selling books and another website for selling shoes. Furthermore each website may have a different network name such as a domain name. Based on which domain the user accesses different rendered content may be provided. For example the shoe website may provide the b.com domain localized for users in the United States while the c.com domain is localized for users in the United Kingdom. Both may present the same inventory but sizing prices and so forth may vary between the two.

Business logic comprises the rules with which the rendered content is generated. This may include decision logic as to how ads are presented what sales are shown how prices are calculated and so forth. Some business logic may be specific to a particular website or even domain. For example as shown here the website may have business logic designed for recommending books for readers in the United States. Likewise the website may have business logic which is designed to help users sign up for services offered by the food bank.

Some business logic may be common across at least a portion of the rendering platform . For example the business logic which provides shopping cart functionality may be used in both the websites and . However since the food bank does not provide shopping cart functionality this business logic is not available to the website .

Likewise user data such as user account information preferences and so forth may be maintained and used in the rendering platform . For example the entity may have common user data available across both websites and . In comparison entity maintains separate user data .

Other functions may also be distributed within the rendering platform . For example logistical services for the physical delivery of goods and user authentication services may be used by all the websites .

However as needs of the entities websites domains administrators and users change the rendering platform may be readily adjusted by modifying the declarative data . For example should a new shipping carrier become available a change in the declarative data associated with the logistical service may make this additional freight carrier available to all users of the rendering platform . Likewise should a particular entity wish to cease using a particular freight carrier the administrator for that entity may readily edit the declarative data to exclude use of that carrier.

Permissions may be implemented in the rendering platform . These permissions may control which declarative data may be modified by an administrator and how. For example the administrator authorized by the entity may be allowed to make changes to the declarative data for websites but not to website which is controlled by administrator .

Subject to the permissions implemented changes to the declarative data may be range in scope from very narrow to encompassing the entire rendering platform and may be configured to operate across entities websites and so forth. For example declarative data may specify that user does not like animated advertisements presented on his tablet client device but does like animated advertisements on any other client device D he may use. As a result regardless of which website the user accesses which is provided by the rendering platform implementing that rule he would never see an animated advertisement on his tablet client device . In comparison updates to the declarative data may allow for all rendered content provided by the rendering platform to use a new function available in the application module .

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a keyboard sensors and so forth. The I O devices may also include output devices such as one or more of a display printer and so forth. In some embodiments the I O devices may be physically incorporated with the server or may be externally placed.

The server may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the server and other devices such as other servers the client devices routers access points and so forth. The communication interfaces may include devices configured to couple to one or more networks including local area networks wide area networks and so forth.

The server may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the server .

As shown in the server includes one or more memories . The memory comprises one or more computer readable storage media CRSM . The CRSM may be any one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the server .

The memory may include at least one operating system OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module is configured to provide the user interface to the administrators or other users . For example the user interface module may implement an application programming interface API web interface and so forth which allows the administrator to modify the declarative data .

A communication module is configured to support communication between the servers the client devices and so forth using the network . For example the communication module may implement a transmission control protocol internet protocol TCP IP stack for communication.

The server may implement one or more of the modules present in the rendering system described above. For example the server may include the controller module the assembler module the view module and the data module .

Other modules may also be present. For example a digital rights management module may provide support for presenting or processing content which is protected using one or more digital rights management schemes.

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

As depicted here the datastore may store one or more of the declarative data data such as images text or audio files or rendered content . Other data may also be stored. For example the other data may include administrator permissions configuration files and so forth.

The client device may include one or more processors configured to execute one or more stored instructions. The processors may comprise one or more cores. The client device may include one or more I O interface s to allow the processor or other portions of the client device to communicate with other devices. The I O interfaces may comprise I2C SPI USB RS 232 and so forth.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a camera a microphone a touch sensor a button and so forth. The I O devices may also include output devices such as one or more of a display audio speakers haptic output devices and so forth. The display may comprise an electrophoretic display projector liquid crystal display interferometric display light emitting diode display and so forth. In some embodiments the I O devices may be physically incorporated with the server or may be externally placed.

The client device may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the client device routers access points servers and so forth. The communication interfaces may include devices configured to couple to one or more networks including personal area networks local area networks wide area networks wireless wide area networks and so forth.

The client device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the client device .

As shown in the client device includes one or more memories . The memory comprises one or more CRSM. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the client device .

The memory may include at least one OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module is configured to provide a user interface on the client device . This user interface may comprise a graphical user interface audible user interface haptic user interface or a combination thereof. The user interface module is configured to process inputs and provide corresponding outputs to the user such as on the display.

A communication module is configured to support communication with the servers other client devices routers and so forth using the network . In some implementations the communication module may implement the TCP IP stack and may also support encrypted communications. For example hypertext transport protocol secured HTTPS or transport layer security TLS may be supported.

The memory may also store an application module . The application module is configured to accept the rendered content . The application module may be configured to use the user interface module to present output receive input and so forth based at least in part on the rendered content . For example the application module may implement the WebKit engine as promulgated at www.webkit.org.

In some implementations at least a portion of the rendering system may be stored in the memory and executed by the one or more processors . For example the rendering system local L may include a controller module an assembler module a view module and a data module . The rendering system local L is configured to operate and process declarative data as described above. The rendering system local L may make inquiries of the rendering systems executing on the one or more servers .

The rendering system local L may provide performance enhancements by allowing for initial processing of the request on the client device . For example the declarative data stored with the rendering system local L may specify that for a particular website information about the current state of the memory display and processor of the client device is required. When the rendering system local L is not available the request may be sent to the rendering platform which then sends back a query to the client device for this information. This may introduce significant delays and result in an adverse user experience. In comparison the rendering system local L may use onboard declarative data to ascertain that this information is requested gather it and then pass that information along to the servers in the rest of the rendering platform . When combined with the concurrent operation of the jobs facilitated by the loose binding between the modules of the rendering system latency in providing the rendered content to the user may be significantly reduced.

The rendering system local L may be identical to the rendering system on the servers . In some implementations the rendering system local L may be configured to operate in the resource constrained environment of the client device .

Other modules may also be present. For example application modules to support email word processing calendaring and so forth may be present.

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

As depicted here the datastore may store one or more of the declarative data or the rendered content . Other data may also be stored. For example the other data may include user preferences configuration files and so forth.

At the controller module receives the request . For example the request may be for a webpage containing dynamically generated content.

At the controller module accesses the declarative data . This may be declarative data available locally or may result from sending one or more inquiries and receiving declarative data in response.

At the controller module generates strategy based on the request and the declarative data . The strategy is sent to the assembler module . At the assembler module begins executing the strategy by distributing one or more jobs for processing. In one implementation the assembler module may be configured to schedule and initiate jobs first which implicate data modules event modules and so forth followed by jobs which implicate the view modules . In this example a job is sent to the data module . At the data module receives the job is received by the data module which performs the data operation . For example the data module may retrieve store or transform data. As part of performance of the data operation the data module may send a job to the event module to generate an event indicative of the data operation . For example the event module may maintain an audit log.

Returning to the assembler module the strategy being executed at may include generating one or more views which are not dependent on user specific data. At the view module receives the job from the assembler module to begin creating the data independent view. For example the view may include JavaScript which provides for standard navigation controls on a webpage.

Because of the loose binding between the modules some jobs may be performed concurrently. For example as shown here at least a portion of the performance of the data operation the event generation and the generation of the data independent views may be occurring concurrently with one another. This concurrency may decrease overall latency in delivering the rendered content to the client device . In some implementations the resulting view may then be passed to the client device while the other operations are pending.

Continuing the example illustrated here the assembler module receives data back from the job as performed by the data module . For example the data operation may have retrieved product detail information. As described above the operation of the assembler module and the controller module may involve assembler feedback which may result in a change in strategy. As shown here the assembler module may send assembler feedback to the controller module . The controller module may then send updated strategy to the assembler module . Meanwhile the assembler module may send a job to the event module to which generates another event .

As described above the assembler module may optimize or consolidate the jobs . For example the job may include several discrete queries to the data module into one avoiding the need to send queries for duplicative information. As a result overall efficiency of the rendering system is improved.

The assembler module meanwhile has received the updated strategy from the controller module and sends a job to the view module to generate a data dependent view . For example the data dependent view may be based on the product detail information returned by the data operation . At the view module generates one or more data dependent views. For example the view module may create a portion of the webpage which will present product detail information and associated controls for manipulating that data.

As illustrated here the various jobs resulting from the controller module and coordinated by the assembler module may be performed at least in part concurrently. Because of the loose binding between the modules some activities can be performed without blocking. For example as shown here the generation of the data independent views may occur before the generation of the data dependent views .

Block accesses a request or information based at least in part thereon. For example the rendering system may receive the request or a dispatch based on the request . The access may include receiving the request from a requestor or a queue of pending requests .

Block accesses a first set of declarative data . For example the first set of declarative data may have been previously acquired from one or more inquiries as a result of a preload of data following initialization of the rendering system and so forth. As described above the declarative data may comprise one or more expressions indicative of one or more of a business rule an operational parameter of at least a portion of the system and so forth. For example these expressions may include text numbers symbols and so forth which comprise the declarative language. The one or more expressions of the declarative language may specify one or more operations without explicitly defining a sequence of performing the one or more operations. For example the declarative data may state RETRIEVE USER PREFERENCES but does not explicitly define the steps involved in accessing the user preferences.

The declarative data may include one or more expressions configured to recursively generate a plurality of inquiries configured to retrieve from a plurality of rendering systems or other systems additional declarative data . For example the declarative data may include references to additional declarative data stored on another rendering system . These references may in turn refer to further declarative data .

Block processes the request using the first set of declarative data to generate a first set of one or more jobs . These jobs may use functionality in one or more view modules data modules event modules and so forth.

Block sends the first set of one or more jobs for execution. For example the first set of one or more jobs may be sent from the controller module to the assembler module .

Block accesses a second set of declarative data . For example the controller may have issued one or more inquiries or may receive unsolicited updates. In another example the access to the second set of declarative data may be based at least in part on the assembler feedback . For example the assembler feedback may indicate that additional information is necessary to complete the processing of a job . In yet another example the access may be response to a job .

Block processes the request using the first and second sets of declarative data. The processing may modify the first set of one or more jobs may generate a second set of one or more jobs or both. For example the strategy developed by the controller module may be changed based on second set of declarative data .

Block sends the modified first set of one or more jobs the second set of one or more jobs or both to the assembler module . The assembler module may then adjust modify consolidate or generate additional jobs based on this input. For example one of the jobs in the first set of one or more jobs may be terminated while the second set of one or more jobs includes three new jobs to be executed.

Block receives results based at least in part on one or more of the first set or the second set of one or more jobs . For example the results from the data module may be received. In another implementation the results may be returned to other modules or to the client device . In some implementations the process may iterate such that s number of sets of jobs for execution and d number of sets of declarative data may be processed where s and d are nonzero integer values.

Block generates based at least in part on the results rendered content . The rendered content may include one or more expressions in a markup language. For example the rendered content may include a hypertext markup language HTML file.

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above can be eliminated or taken in an alternate order. Moreover the methods described above may be implemented as one or more software programs for a computer system and are encoded in a computer readable storage medium as instructions executable on one or more processors.

The computer readable storage medium can be any one of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. Separate instances of these programs can be executed on or distributed across separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations.

Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art and it is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

