---

title: Object extraction from presentation-oriented documents using a semantic and spatial approach
abstract: Automatic extraction of objects in a presentation-oriented document comprises receiving the presentation-oriented document (POD) in which content elements are spatially arranged in a given layout organization for presenting contents to human users; receiving a set of descriptors that semantically define the objects to extract from the POD based on attributes comprising the objects; using the set of descriptors to identify content elements in the POD that match the attributes in the set of descriptors defining the objects, and assigning semantic annotations to the identified elements based on the descriptors; creating a semantic and spatial document model (SSDM) containing spatial structures of the identified content elements in the POD and the semantic annotations assigned to the identified contents elements; extracting the identified content elements from the POD based on the set of descriptors and the SSDM to create a set of object instances; and performing at least one of: i) using the object instances to generate semantic and spatial wrappers that can be reused on a different POD, and ii) storing the object instances in a data repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582494&OS=09582494&RS=09582494
owner: Altilia s.r.l.
number: 09582494
owner_city: Rende (CS)
owner_country: IT
publication_date: 20130222
---
The greater part of Web contents are made available by documents which internal formats have been conceived for presenting documents on screen to human users such as Web and PDF documents . In such documents contents arrangement is designed to provide visual patterns that help human readers to make sense of document contents. So a human reader is able to look at an arbitrary document and intuitively recognizing its logical structure understand the various layout conventions and complex visual patterns that have been used in the documents presentation. This aspect is particularly evident for instance in deep web pages where Web designers always arrange data records and data items with visual regularity and in tables where the meaning of a table cell entry is most easily defined by the leftmost cell of the same row and the topmost cell of the same column in Western languages . Documents that are conceived for presenting documents on the screen to users are referred to as presentation oriented documents PODs .

Approaches have been proposed to automatically access data from PODs for purposes such as automatic information extraction from web and PDF documents. Existing automatic information extraction approaches can be classified into two main groups i approaches that mainly use the internal representation of deep web pages and ii approaches that exploit the visual appearance of deep web pages.

Approaches based on the internal document representation depend from the HTML structure of deep web Pages. Such HTML based approaches can be further classified as manual semi supervised and unsupervised. In manual approaches a programmer finds patterns expressed for example by XPath from the page and then writes a program wrapper that allows for identifying and extracting all the data records along with their data items fields. Manual approaches are not scalable and are not usable in the current Web because of the very large number of different arrangement of data records in available deep web pages.

In supervised approaches based on HTML internal structure extraction rules are learned by using supervised machine learning algorithms from a set of manually labelled pages through a graphical user interface. Learned rules are used for extracting data records from similar pages. Such kinds of approaches still require a significant manual effort for selecting and labelling information in the training set.

Unsupervised approaches based on HTML internal structure exploit two main types of algorithms instance and wrapper learning. Instance learning approaches exploit regularities available in deep web pages in terms of DOM structures for detecting data records and their data items. These approaches exploit unsupervised machine learning algorithms based on tree alignment techniques hierarchical clustering etc. Approaches falling in this category are strongly dependent from the HTML structure of deep web Pages.

In unsupervised wrapper learning approaches patterns or grammars are learned from a set of pages containing similar data records. In these approaches pages used for generating or learning wrappers have to be found manually or by another system then a set of heuristic rules based on highest count tags repeating tags or ontology matching etc. is used for identifying record boundaries. Furthermore many approaches falling in this category need two or more Web pages for generating the wrapper.

An analysis of many deep web pages reveals the following i HTML is continuously evolving. When new versions of HTML or new tags are introduced approaches based on previous versions have to be updated. ii Web designers use presentation features and spatial arrangement of data items for helping human user to identify data records. They do not take into account the complexity of underlying HTML encoding. Thus iii the complexity of the source code of Web pages is ever increasing. In fact the final appearance of a deep web page depends from a complex combination of HTML XML XHTML scripts javaScript XSLT and CSS. iv Data records and pages are laid out either as lists or matrices where data items are indifferently organized in vertical or horizontal way. v The data records can be contained in non contiguous portions of a Web page multiple data regions . All of these aspects make it very difficult for existing approaches to learn instances and generate wrappers by using the internal encoding of Web pages and thus have strong limitations.

Visual based approaches such as LixTo ViNTS ViPERS and ViDE exploit some visual features of the deep web pages for defining wrappers. In LixTo a graphical user interface showing a browser helps in manually designing the wrapper. In this case the programmer doesn t have to write code s he can design the wrapper by using only mouse click on the target deep web page. The user visually selects data items and records then the system computes HTML patterns associated to visual area selected by the user and writes a wrapper that allows for applying such patterns in similar pages. So LixTo is essentially a supervised approach based on the HTML encoding of Web pages where examples are labelled by using a graphical user interface.

ViNTS uses visual features in order to construct wrappers that extract answers to queries on search engines. The approach detects visual regularities i.e. content lines in search engine answers and then uses the HTML tag structure to combine content lines into records. ViPER incorporates visual information on a web page for identifying and extracting data records by using a global multiple sequence alignment technique. Both last two approaches are strongly dependent from the HTML structure of Web page whereas visual information play a small role which is a limitation. Furthermore ViPER is able to identify and extract only the main data region.

ViDE is the most recent visual based approach. It makes use of the page segmentation algorithm ViPS. This algorithm takes in as input a web page and returns a visual block tree i.e. a hierarchical visual segmentation of a web page in which children blocks are spatially contained in ancestor blocks. The algorithm exploits some heuristics in order to identify similar groups of blocks that constitute data records in which constituent blocks represent data items.

The ViDE approach suffers from several limitations. First the approach strongly depends from the page segmentation algorithm ViPS that in turn depends from the HTML encodings of Web Pages and from the set of assumptions made for segmenting Web pages. The ViPS algorithm attempts to compute a spatial representation in terms of visual blocks of a Web page by considering the document object model DOM structure and visual information of a Web page produced by the layout engine of a Web browser. In particular a page segmentation algorithm strongly exploits the concept of a separator. Separators are identified in ViPS by heuristic rules that make use of weights experimentally set. The ViPS algorithm and the ViDE approach suffer when data records are spread in multiple data regions each contained in different page segments and also when data records are arranged as a matrix.

An example of an existing patent related to this approach is U.S. Pat. No. 8 205 153 B2. This patent describes techniques for extracting information from formatted documents. Such techniques combine visual mark up text based and layout based rules for identifying information to extract form formatted documents. The method i makes use of geographical spatial databases typically adopted in geographical information systems ii works only on web pages and not other presentation oriented formats and iii does not make use of any semantic processing of document elements.

Some of the main problems that the existing approaches fail to address are i the internal encoding of a POD may change frequently while the presentation remains essentially the same and ii the same kind of object can be presented by using different layout conventions and presentation arrangements in different kinds of PODs.

Accordingly it would be desirable to provide an improved method and system for automatically extracting objects from generic PODs. The method should allow a high level abstract description of objects to extract and the generation of wrappers independently from internal encodings and presentation arrangements of the PODs.

The exemplary embodiment provides methods and systems for automatic extraction of objects in a presentation oriented document. Aspects of exemplary embodiment include receiving the presentation oriented document POD in which content elements are spatially arranged in a given layout organization for presenting contents to human users receiving a set of descriptors that semantically define the objects to extract from the POD based on attributes comprising the objects using the set of descriptors to identify content elements in the POD that match the attributes in the set of descriptors defining the objects and assigning semantic annotations to the identified elements based on the descriptors creating a semantic and spatial document model SSDM containing spatial structures of the identified content elements in the POD and the semantic annotations assigned to the identified contents elements extracting the identified content elements from the POD based on the set of descriptors and the SSDM to create a set of object instances and performing at least one of i using the object instances to generate semantic and spatial wrappers that can be reused on a different POD and ii storing the object instances in a data repository.

The exemplary embodiment relates to extracting objects from presentation oriented documents PODs using a semantic and spatial approach. The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements. Various modifications to the exemplary embodiments and the generic principles and features described herein will be readily apparent. The exemplary embodiments are mainly described in terms of particular methods and systems provided in particular implementations. However the methods and systems will operate effectively in other implementations. Phrases such as exemplary embodiment one embodiment and another embodiment may refer to the same or different embodiments. The embodiments will be described with respect to systems and or devices having certain components. However the systems and or devices may include more or less components than those shown and variations in the arrangement and type of the components may be made without departing from the scope of the invention. The exemplary embodiments will also be described in the context of particular methods having certain steps. However the method and system operate effectively for other methods having different and or additional steps and steps in different orders that are not inconsistent with the exemplary embodiments. Thus the present invention is not intended to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features described herein.

The exemplary embodiments provide methods and systems for automatically extracting object instances and generating learning wrappers from presentation oriented documents PODs using a semantic and spatial approach. Aspects of the exemplary embodiment include the processing of PODs based on a set of descriptors that allow for automatically recognizing and extracting objects having a given semantic as defined by the set of descriptors.

The exemplary embodiments recognize that automatic information extraction from PODs needs to consider the semantics of laid out content elements and their mutual spatial relationships in the PODs. In fact the tree based structures of HTML and the flat structure of PDF language are often not convenient and sometimes even not expressive enough in order to represent the semantics and the visual relationships that are implicitly represented in the presentation layout and that indicate the meaning of document contents to the reader. In internal structures of real world presentation oriented documents spatial arrangements and semantics are rarely explicit and frequently hidden in complex nesting of layout elements corresponding to intricate internal structures that are conceptually difficult to query. Conventional information extraction systems do not consider the semantics of textual contents when navigating and querying PODs for information extraction purposes.

The exemplary embodiments provide an automatic method for navigating and combining textual content elements and images other graphics etc. contained in PODs that exploits both the spatial arrangement of content elements resulting from documents rendering as well as the semantics of the spatial content expressed in natural language. The semantics are based on descriptors that are general expressions describing the structure and the semantics of abstract objects to extract from generic PODs.

The exemplary embodiments construct domain specific wrappers by using the descriptors to express not only the visual and spatial structure of objects to recognize and extract but also the semantics of such objects. For example the exemplary embodiments allow a user to recognize and extract instances of photo cameras or to construct a wrapper for properties by defining simple descriptors in which are expressed as attributes of such class of object. For example the descriptors can be used to define a photo camera as an object comprising attributes such as a number of MegaPixels for the image sensor a zooming capability etc. As another example the descriptors can be used to define a real property as an object comprising attributes such as an area in square meters a number of rooms etc. In one embodiment the descriptors may be created using a graphical user interface and without a need for a user to write code.

Unlike HTML based approaches the exemplary embodiments are completely independent from the HTML structure of the webpages because the spatial representation of webpages is based on page presentations produced by layout engines of Web browsers. Further unlike supervised extraction approaches that need two or more Web pages for generating a wrapper the exemplary embodiments may generate a wrapper from a single POD page.

As stated above the ViPS algorithm and the Vi DE approach suffer when data records are spread in multiple data regions each contained in different page segments and also when data records are arranged as a matrix. The exemplary embodiments provide an improved method that constructs a semantic and spatial document model SSDM of PODs by exploring presentation information returned by a layout engine for instance of web browsers in the form of a DOM or PDF layout engines and acquires positions and presentation features assigned to content elements by the layout engine. Data region records and items recognition is then performed directly on the SSDM by using a heuristic algorithm and descriptors that allow for discovering objects such as for instance product records spread across multiple data regions and objects having all possible spatial arrangements.

The system may include one or more clients that interact with an object extraction service operating in cloud which may be designed to meet fluctuating and unpredictable business demand. In this embodiment the object extraction service comprises software components or applications executing on one or more servers in the cloud . In one embodiment the applications may include a descriptor compiler a presentation oriented document analyzer a semantic and spatial instance learner and a semantic and spatial wrapper learner . The applications data repositories and other resources may be made available in cloud mode.

In one embodiment an end user may access the applications through a web browser or by using a light weight desktop or mobile application not shown executing on the client . In particular the browser may connect to the applications by calling APIs exposed by the servers . The applications may store resulting data in one or more local or remote data repositories .

Different types of deployment models can be used. For instance in public cloud applications storage and servers may be made available to the general public by a service provider. Hybrid cloud architecture requires both on premises resources and off site remote server based cloud infrastructure. Private cloud infrastructures may be operated solely for a single organization whether managed internally or by a third party and hosted internally or externally.

According to the exemplary embodiment a user who desires to have object instances extracted from a presentation oriented document POD such as deep webpages and PDF documents writes and or loads a set of descriptors that semantically describe a given set of objects to extract. The descriptors may be written in a text based language and stored in order to be reused or combined with other descriptors.

Through the web browser of the client the user inputs the POD and the descriptors to the cloud . A cloud API invokes the applications running on the servers for processing the POD and descriptors and for generating learning instances of objects generating wrappers that extract the object instances and finally applying the wrappers to new PODs. More specifically the descriptor compiler and the presentation oriented document analyzer pre process the POD and the descriptors . The semantic and spatial instances learner and the semantic and spatial wrapper learner then compute objects to extract from the POD based on the descriptors and may generate a semantic and spatial wrapper that can be subsequently accessed or queried by users. In one embodiment the semantic spatial wrapper is program that automatically identifies and extracts objects from PODs.

The servers may send results to the client for result visualization via a browser. The servers may also make available extracted objects by a web API so that developers can obtain the extracted objects in JavaScript Object Notation JSON Extensible Markup Language XML and other formats. An API can be used to integrate the capabilities of the system in external applications such as for instance analysis applications.

In the second embodiment not shown a traditional client server computing environment could be used where the server exposes the applications where several instances of servers may be installed on different systems. In order to manage growing request and to meet load increase a pool of servers could be used. In a traditional client server model the above described process may be realized by using a traditional API or REST services rather than a cloud API.

In another deployment embodiment a dispatcher not shown may be used to act as a gateway between client and the servers . At boot time each resource may first connect to a dispatcher instance and form a link to the dispatcher. The client communicates to the dispatcher an instance of the type of service connect to. All communication between the dispatcher and any of the servers or between any client and the dispatcher can occur on TCP IP connections. Thus software components can be independently distributed with in the network.

The dispatcher and architecture may be suitable for fault tolerance because it can deal with varying situations such as when one of the servers fails for a hardware problem for instance the failover may managed by the dispatcher which redistributes the load to the survivor servers.

In a third embodiment the system can run on a single computer and the steps described above may be performed in a standalone mode. For example the system can be installed on a desktop notebook or tablet computer and the applications can be accessed through a graphical user interface GUI or API.

Although the descriptor compiler the presentation oriented document analyzer the semantic and spatial instance learner and the semantic and spatial wrapper learner are shown as separate applications components the functionality of each may be combined into a lesser or greater number of modules components.

Both the server and the client may include hardware components of typical computing devices not shown including a processor input devices e.g. keyboard pointing device microphone for voice commands buttons touchscreen etc. and output devices e.g. a display device speakers and the like . The server and the client may include computer readable media e.g. memory and storage devices e.g. flash memory hard drive optical disk drive magnetic disk drive and the like containing computer instructions that implement the functionality disclosed when executed by the processor. The server and the client may further include wired or wireless network communication interfaces for communication.

According to one embodiment the system is capable of processing different types of presentation oriented documents PODs where a POD refers to a document designed to be presented to human reader. The POD may have HTML Portable Document Format PDF Postscript PS format image file formats presentation formats e.g. PowerPoint or word processing formats e.g. Word and the like. An example of HTML PODs is deep Web pages which are parts of the Web not indexed by standard search engines.

PODs typically contain a plurality of content elements spatially arranged on a page by a designer for aiding humans and making sense of the document contents for example by arranging shopping web pages in table format. The content elements may include text images or other graphics. From webpages content elements may include Document Object Model DOM nodes while for PDF and word processing documents the content elements may comprise atomic pieces of information e.g. a character a word a string an image and the like that has all the information needed by a document viewer for rendering the document.

Referring again to the server also receives as input a set of descriptors that semantically define the objects to extract from the POD based on attributes comprising the objects block . In one embodiment the set of descriptors define visual spatial relationships between the objects in the POD as well as semantics of the objects expressed as zero or more attributes comprising the objects. In one embodiment the descriptors may be created by a user through a graphical user interface GUI eliminating the need to write code.

In one embodiment attributes specify properties of the objects to be found for instance a price a brand and megapixel of a photo camera or a name an age and a role position of a person. Attributes and objects can be recognized by exploiting semantic annotation of content elements visual presentation features and spatial layout such as for a text the attributes may specify font size colour and or HTML tag. In one embodiment the spatial constraints may specify zero or more of distance from one attribute or element to another direction from one attribute or element to another alignment between elements and conditional operators.

For example as shown in eBay records are internally represented by an HTML tag table product properties are laid out horizontally and records are listed vertically. As shown in Amazon records are internally represented in a nested DOM structure base on HTML tag div product properties are arranged vertically and records have a grid layout.

According to the exemplary embodiments the user would use the descriptors to describe a laptop object as follows 

In this example the annotation descriptors define content elements to be recognized on a page to be found as a photo a brand and a price. The photo is defined as an image greater than five pixels in size that is positioned within the record area. The brand is defined as any laptop brand listed in an external source e.g. dictionaries . The price is defined as a sequence of an optional currency symbol and a number.

The object descriptor describes a laptop object as a set of three attributes photo brand and price. This may constitute the object schema . The condition photo E S price may constitute the spatial constraints and preferences and indicates the expected direction of the price from the photo i.e. that the price of the laptop is expected to be on the East of E or on South of S the photo.

In the embodiment above X Y and Z may represent variables and each descriptor rule is independent from each other. For instance brand X 

If the annotation descriptors are too general the system may recognize attributes in the POD incorrectly. However the presentation oriented document analyzer that recognizes objects is able to disambiguate content elements by using spatial proximities alignments and visual similarities among semantically annotated attributes. For instance in a given POD many numbers can be individuated also when they do not represent prices of a laptop. However the descriptor defines that a number is a price of a laptop only when it is recognized close to the photo brand and descriptions of the laptop and is located in the same records area.

As described below the descriptors enable the system to identify a laptop in the PODs independently from an inner HTML structure and the layout structure of the pages. The same approach can be used to process other types of internal format of documents such as objects listed in a table in a PDF document for instance.

Laptops are only examples of objects. Apartments persons companies news etc. can be recognized in presentation oriented documents by imitating human behaviour.

For instance illustrates an example where a set of descriptors is used to recognize news objects in an electronic newspaper. A news article can be described through the descriptors as follows.

The annotation descriptors may define attributes such as a news title a person and an abstract where a person is defined as a sequence of an entity persons the title is an emphasized text in a particular colour e.g. blue and the abstract is an arbitrary block of text. The object descriptors may further define a news object shown in as a concatenation in south directions of a news title authors and an abstract and 20 located south of the news title where authors is further defined as a sequence of an entity persons

Referring again to after the set of descriptors are received the set of descriptors are used to identify content elements in the POD that match the attributes in the set of descriptors that define the objects and semantic annotations are then assigned to the identified elements based on the descriptors block . A semantic and spatial document model SSDM may be created containing one or more of spatial structures of the identified content elements presentation visual features of the identified content elements and the semantic annotations assigned to the identified contents elements block . In one embodiment the SSDM contains not only spatial structures of the identified content elements but also general spatial relations and presentation visual features.

Prior to using the descriptors to identify content elements that match the attributes the descriptors may first be compiled in one embodiment. As shown in the descriptors may be received by the descriptor compiler and compiled into a set of rules that the system is able to process. More specifically the descriptor compiler may compile the descriptors into a set of compiled annotation descriptors and a set of compiled object descriptors .

The compiled annotation descriptors are then input to the presentation oriented document analyzer . The presentation oriented document analyzer processes the layout of the POD and applies the set of compiled annotation descriptors to the POD to identify the matching content elements which are output in the SSDM . Parts or regions of the POD may be split and the content elements may be annotated semantically. For example a particular identified content element may be annotated as being a brand of a laptop object. Accordingly a fine grained annotation of the content elements in the POD may be obtained. Therefore the SSDM combines both the spatial arrangement of the identified content elements of the POD with the fine grained semantic annotation of the identified content elements.

According to one exemplary embodiment the SSDM may be represented as a graph in which the nodes of the graph represent the identified content elements along with their semantic annotations assigned by applying the content elements annotation descriptors . Edges in the graph connecting the nodes represent spatial relationships between the connected nodes. In one embodiment the annotation for each node may specify the semantic category to which the node belongs. For example a number can be annotated as being a number of the currency.

By using the compiled annotation descriptors the presentation oriented document analyzer is able to process not only web pages but also Postscript PDF and word processing documents. According to the exemplary embodiments the presentation oriented document analyzer is able to locate and identify content elements within data records that are contained in multiple data regions and or in different page segments or when data records are arranged in a matrix. Further details of the presentation oriented document analyzer are provided with respect to .

Referring again to the set of descriptors and the SSDM are used to extract the identified content elements from the POD to create a set of object instances block . Referring again to this step may be implemented in one embodiment by inputting the set of descriptors and the SSDM to the semantic and spatial instance learner which produces the object instances .

In one embodiment the semantic and spatial instance learner applies the compiled object descriptors to the SSDM in order to discover the spatial organization of the content elements in the POD that together represent the objects to extract. The semantic and spatial instance learner searches for content elements that compose a given object as defined by the object descriptors . If the object descriptors described for example a laptop computer as brand megabytes of memory and gigabytes of a hard disk and a given type of display the semantic and spatial instance learner tries to discover objects having the specified layout of attributes. This is a discovery process based on semantics of the content the spatial layout and the presentation features of the content elements.

The output of the semantic and spatial instance learner is the set of object instances . In one embodiment the set of object instances represents the set of extracted objects. For example the object instances may be a set of objects organized as records such as laptops from the POD that are represented by vertical or horizontal records e.g. a photo a brand and a price .

Referring again to as a last step the system may perform one or both of the following i use the object instances to generate semantic and spatial wrappers that can be reused on a different POD and or ii store the object instances in at least one of the data repositories block .

Referring to in one embodiment the object instances are input to the semantic and spatial wrapper learner which automatically generates a semantic and spatial wrapper for the specific POD . The semantic and spatial wrapper represents a type of object for example a laptop which can be recognized in other PODs that are visually and semantically described in the same way.

In another embodiment the object instances and or the semantic and spatial wrapper may be stored in the data repositories shown in . Additional details of regarding the processing of the applications shown in are provided below.

In one embodiment the descriptors compiler comprises a lexical analyzer a syntax analyzer a type checker a consistency checker a code generator and a dependency graph builder . The lexical analyzer is a scanner that reads the descriptors while the syntax analyzer is a syntax parser that scans tokens of the language of the descriptors and determines if the syntax of descriptors is written correctly e.g. that a descriptor comprises a name of an object and a set of one or more attributes that describe the object. The type checker determines that all components are computable by other descriptors or by built in functions. The consistency checker determines that objects and attributes in the descriptors are bounded and validated. The code generator generates the compiled annotation descriptors and the compiled object descriptors .

The dependency graph builder creates a graph of the dependences among the compiled descriptors . For instance the object descriptor for laptops in Descriptor depends from the annotation descriptor for brands that depends in turn from the built in dictionary. A dependency graph is useful to manage cycles among descriptors and optimize the annotation and object recognition processes. For instance in order to recognize laptops objects a bottom up process may be performed. Firstly annotation descriptors are recognized that describe basic pieces of content such as dictionaries regular expressions and built in functions e.g. for querying presentation features then attributes e.g. brand are recognized by combining basic pieces of content and finally objects are recognized by using object descriptors that combine lower level annotation descriptors. Dependency graphs can be used for selecting only those descriptors needed for recognizing a given objects type for instance the object descriptors for laptop needs only annotation descriptors for photo brand and price that can be selected among many others annotation descriptors useful for recognizing other objects .

The POD analyzer may include a document layout analyzer and visual presentation feature extractor a spatial feature extractor and a content element analyzer . The document layout analyzer and visual presentation feature extractor reads and analyzes PODs and may use a visualizer e.g. a layout engine of a web browser to automatically extract content elements e.g. blocks of text images other graphics from PODs. For each content element a layout analyzer extracts the area of the screen in which the content element is visualized while a visual presentation feature extractor extracts presentation features that express how each content element is displayed to the human readers e.g. font colour size type style etc. . The document layout analyzer and visual presentation feature extractor may output a document model that for each content element represents the area in which it is visualized and the presentation features assigned by the layout engine.

The spatial feature extractor receives the document model and extracts spatial features for each element and between elements. In particular in an exemplary embodiment visualization areas of content elements are rearranged so that i each area associated to a content element corresponds to the minimum bounding box that surrounds the content element and ii spatial relations between content elements are computed. For instance for each attribute belonging to an object the area of the attribute is contained in the visualization area of the whole object. Spatial relations among elements may be explicitly represented in the output model. For instance relation South between an image and its caption can be represented in the graph as a labelled arc between the image and its caption. So in an exemplary embodiment the spatial feature extractor may output a spatial document model .

The content element analyzer receives the spatial document model and annotates semantically content elements in the input model by matching compiled annotation descriptors to the content elements and then outputs the spatial and semantic document model SSDM .

The output of the POD analyzer is the semantic and spatial document model SSDM which may be used to recognize objects instances and the wrappers. The contents of the SSDM are described in .

In this embodiment each content element in the SSDM may be associated with spatial features presentation visual features and semantic annotation . The spatial features may store the spatial relations among content elements the presentation visual features may store the minimum bounding rectangles and visual features of the content elements and the semantic annotation may store the assigned annotations.

The SSDM is an internal representation of the POD that constitutes a unified representation of the content elements laid out in the POD. In one exemplary embodiment the SSDM may be represented as a graph in which vertices are content elements of PODs augmented with associated minimum bounding rectangles and visual features of the content elements and the semantic annotation .

Edges linking the nodes in the graph may represent hierarchy relations e.g. a cell is contained in its table and spatial relations e.g. a title is on top of the section content between connected content element nodes. Each vertex of the SSDM may include i coordinates assigned to the rectangle that surround the content element ii semantic annotations obtained by applying descriptors to the textual content of DOM nodes or PDF content elements and iii presentation visual features.

In an alternative embodiment the spatial features the presentation visual features and the semantic annotation assigned to the identified content elements may be represented using other types of data structures such as Hash mapping R tree or making spatial relations computable on demand rather than a graph.

In one embodiment the semantic and spatial instance learner may comprise a candidate object builder a candidate object clusters builder and an object instance filterer and selector . In one embodiment the compiled object descriptors are used by the candidate object builder the candidate object clusters builder and the object instance filterer and selector .

The candidate object builder attempts to find candidate object instances to extract by searching the SSDM for all possible combinations of annotated content elements attributes corresponding to a particular object descriptor. For instance assume the compiled object descriptors define a photo camera as a specific set of attributes brand name price. The candidate object builder would search sets of tuples in the SSDM and recognizes similar sets of content elements to create the candidate object instances . The candidate objects may not be complete and may have errors.

The candidate object clusters builder narrows the results and reduces these errors by grouping the candidate object instances by presentation and spatial similarity to create clusters of candidate objects . For example an alignment of elements in each row of a table may be used to recognize records.

The object instances filterer and selector may i generate the object instances by filtering the clusters of candidate objects based on the spatial constraints and preferences expressed by the compiled object descriptors or by general filtering rules e.g. records in deep web pages do not overlap each other ii select and annotate new attributes not already annotated content elements and generate new objects instances by using similarities with already recognized object instances. The object instances represent a set of objects of the specific types described by the compiled object descriptors and recognized in a POD such as a webpage PDF or other type of document.

The path inductor may receive as input the learned object instances and for each object attribute induces a general pattern that represents the object attribute in the SSDM . In an exemplary embodiment starting from a set of attributes of the same type belonging to different object instances of the same type the pattern inductor computes which is the generalized path in the graph of the SSDM which represents all attributes of the same type for all object instances. The output of the path inductor may be a set of general paths that identify annotated vertices of the graph that represent attributes of the object instances

The spatial relations inductor may receive as input the learned object instances and by considering spatial relations among attributes of object instances computes generalized spatial relations between each pairs of attributes that are valid for each object instance. The spatial relations inductor may output a set of general spatial relations among attributes .

The wrapper composer may receive as input the set of general attribute paths generated by the path inductor and the set of generalized spatial relations among attributes valid for each of the object instances. The wrapper composer composes elements in the input by collecting for each of the attribute of an object type the attribute path and the set of spatial relations existing between the given attribute and other attributes of the object and the wrapper composer outputs the semantic and spatial wrapper of the object.

The semantic and spatial wrapper comprises a set of attribute paths in the SSDM and a set of spatial relations between pairs of attributes in the SSDM . In one embodiment the spatial wrapper may be represented as a graph where each node is accompanied by an attribute path and edges represent spatial relations among nodes but other representations are also possible e.g. a visualization area pattern where a typical visual and semantic configuration of an object is represented .

Embodiments for automatically extracting objects from a presentation oriented document using a semantic and spatial approach have been disclosed. The processing of the system of the exemplary embodiments is different from existing approaches because while prior approaches may utilize a spatial component to identify objects the exemplary embodiments use both a semantic and a spatial approach. The conventional VIDE approach for example is not a semantic based approach just syntactic and structural approach.

In addition the exemplary embodiments utilize a spatial approach that is different to prior approaches. That is the semantic and spatial document model SSDM is an original internal representation in which each content element of the POD may include i presentation visual features including a minimum bounding rectangle that corresponds to the visualization area assigned to each of the content elements by the document visualizer ii the semantic annotation assigned by the content element annotator and iii spatial relations among content elements.

For example a shopping webpage that has an image followed horizontally by a blue hyperlink of the name of the product could be defined by the descriptor picture EAST blue link which describes the direction that the URL is laid out on the page in relation to the image. The picture and the URL are both nodes in the graph EAST in the edge that connects the two nodes. In this way all spatial relations can be expressed that are present between all nodes of the document page. Algorithms may be used that are able to navigate the semantic spatial document model to automatically to discover sub graphs represented in the records.

The exemplary embodiments also do not use a segmentation approach that needs to segment a page to learn the records. The exemplary embodiments apply algorithms directly on the semantic and spatial document model to identify minimum boundary rectangle that contains all and only attributes that compose a given record.

The system of the exemplary embodiments is more abstract than conventional approach because the system uses semantics but also more general because the system uses a SSDM capable of unifying different kinds of PODs. Current approaches are incapable of extracting information from PDF documents in addition to HTML and other type of documents.

The present invention has been described in accordance with the embodiments shown and there could be variations to the embodiments and any variations would be within the spirit and scope of the present invention. For example the exemplary embodiment can be implemented using hardware software a computer readable medium containing program instructions or a combination thereof. Software written according to the present invention is to be either stored in some form of computer readable medium such as a memory a hard disk or a CD DVD ROM and is to be executed by a processor. Accordingly many modifications may be made by one of ordinary skill in the art without departing from the spirit and scope of the appended claims.

