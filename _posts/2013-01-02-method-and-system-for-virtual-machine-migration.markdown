---

title: Method and system for virtual machine migration
abstract: Virtual machine (VM) technology allows multiple operating systems each deploying multiple applications to run on a single host. This invention presents an effective method and system for virtual machine migration from a source host to a target host. The method and system concern the migration of both the service VM and the element managing it. State of the migrating VM is preserved so that it can resume its execution on the target host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732705&OS=08732705&RS=08732705
owner: Embotics Corporation
number: 08732705
owner_city: Ottawa
owner_country: CA
publication_date: 20130102
---
The present patent application is a Continuation of U.S. patent application Ser. No. 11 839 481 filed on Aug. 15 2007 which is a Continuation in Part of U.S. patent application Ser. No. 11 748 816 to Anthony WHITE entitled A METHOD AND SYSTEM FOR VIRTUAL MACHINE MIGRATION filed May 15 2007 and claims priority from the Canadian patent application serial number 2 547 047 to Anthony WHITE entitled MANAGEMENT OF VIRTUAL MACHINES USING MOBILE AUTONOMIC ELEMENTS filed on May 15 2006 and U.S. patent application Ser. No. 11 748 816 to Anthony WHITE entitled A METHOD AND SYSTEM FOR VIRTUAL MACHINE MIGRATION filed May 15 2007 both of which are incorporated herein by reference.

The present invention relates to the management of virtual machines and particularly to the management of virtual machine while it is migrated from one host system to another by using mobile autonomic elements.

The drive to make more effective use of physical resources within an enterprise information technology IT infrastructure has led to the introduction of virtual machine technology. Virtual machine VM technology allows one or more guest operating systems to run concurrently on one physical device. There are several approaches to providing virtualization technology the most recent being para virtualization and native central processing unit CPU with basic input output system BIOS or Extensible Firmware Interface EFI support. Concurrent with these approaches the emergence of the management plane has occurred as the means by which hardware operating system and applications are managed within the service plane.

One or more virtual machines may be operational on a single host computing system that will be referred to simply as a host system. A VM that may include an operating system with its concurrent applications is often separated from the elements that manage the VMs on the host system. The separation of management and service functionality has a number of distinct advantages that include separation of concerns management of change and security improvements.

Finally delegated management through the paradigm of Autonomic Computing has emerged. Autonomic Computing is a relatively recent field of study that focuses on the ability of computers to self manage. Autonomic Computing is promoted as the means by which greater independence will be achieved in systems. This incorporates self diagnosis self healing self configuration and other independent behaviors both reactive and proactive. Such systems will adapt and learn normal levels of resource usage and predict likely points of failure in the system. Certain benefits of computers that are capable of adapting to their usage environments and recovering from failures without human interaction have also been known to reduce the total cost of ownership of a device and increasing levels of system availability. Repetitive work performed by human administrators is reduced knowledge of the system s performance over time is retained assuming that the machine records or publishes information about the problems it detects and the solutions it applies and events of significance are detected and handled with more consistency and speed than a human could likely provide. Such autonomic elements are used in the context of this invention for virtual machine management.

The introduction of virtualization along with management and service plane separation has produced a new important problem. A VM may be required to migrate from one host system to another. Such a migration may be necessary in various situations. These include an increase in the load of the system currently hosting the VM the occurrence of a fault in the host system and the temporary unavailability of the system for hosting a VM due to routine maintenance. Specifically if a virtual machine migrates the associated units of manageability need to move as well where the problem extends to more than simply moving code.

The general area of code mobility is well researched. Various environments for the general mobility of software and state have been built. However there has been no such infrastructure for an autonomic element which applies specifically to the system management domain where virtual machines are under management. In particular there is no effective mechanism for transferring a VM from one host to another on which the VM and the management of it can resume operation seamlessly. Thus there is a need in the industry for an effective method and system for virtual machine migration by using mobile autonomic elements.

Therefore there is an object of the present invention to provide a method and system for the management of virtual machine migration from one host system to another by using mobile autonomic elements.

According to one aspect of the invention there is provided a method for migrating a service Virtual Machine VM comprising a VM managed element and its dependent elements including components providing a service from a source host to a target host the method comprising the steps of 

 a migrating the service VM during its execution by using an autonomic element including a sensor interface comprising a sensor service and an effector interface for managing the migration of the service VM b migrating policies managing the service VM in synchronization with the migrating of the service VM and c resuming execution of the service VM under control of the policies migrated in step b .

The step a of the method further comprises d queueing events to be processed by the service VM at the source host e sending information regarding a state of the VM managed element and its dependent elements from the source host to the target host f sending information regarding a state of the events queued in step d from the source host to the target host g sending components of the VM managed element that have changed during the execution of step d step f from the source host to the target host h processing the information sent in step e at the target host and i processing the information sent in step f at the target host. The step b of the method further comprises the steps of v storing policies within the autonomic element and w migrating the policies contained in the autonomic element prior to executing the service VM on the target host. The step d further comprises the steps of locating a sensor service and creating a queue of events within the sensor service and preventing further events to be forwarded to the VM managed element. The step e further comprises the steps of j serializing the state of the VM managed element and its dependent elements and k sending a message containing a serialized state of the VM managed element and its dependent elements generated in step j from the source host to the target host. Step f further comprises the steps of l serializing the queued events for the VM managed element and its dependent elements at the source host and m sending a message including a serialized queue of events generated in step l to the target host. Step g further comprises the steps of n serializing the components of the VM managed element and its dependent elements that have changed and o sending serialized components of the VM managed element produced in step n from the source host to the target host. Step h further comprises the step of deserializing the state of the VM managed element and extracting dependencies for its dependent elements at the target host. Step i further comprises the steps of x deserializing the queued events and creating queues of events at the target host and y locating a sensor service and inserting the queues of events created in step x into the sensor service.

The step c further comprises the steps of p starting events for the VM managed element and its dependent elements at the target host and q destroying the VM managed element at the source host. Step p further comprises the steps of locating the sensor service adding the events for the VM managed element to a time ordered queue of events stored within the sensor service and adding the events the dependent elements of the VM managed element to a time ordered queue of events stored within the sensor service. Step q further comprises the step of stopping the events for the VM managed element and its dependent elements.

According to another aspect of the invention there is provided a method for migrating a service Virtual Machine VM comprising a VM managed element and its dependent elements including components providing a service from a source host to a target host the method comprising the steps of r migrating the service VM during its execution s migrating policies managing the service VM in synchronization with the migrating of the service VM and t resuming execution of the service VM on the target host under control of the policies migrated in step s .

According to yet another aspect of the invention there is provided a computer program product for migrating a service VM comprising a computer usable medium having computer readable program code means embodied in said medium for causing said computer to perform the steps of the method as described in steps a to c .

According to one more aspect of the invention there is provided a system for migrating a service Virtual Machine VM comprising a VM managed element and its dependent elements including components providing a service from a source host to a target host the system comprising a means for migrating the service VM during its execution by using an autonomic element including a sensor interface comprising a sensor service and an effector interface for managing the migration of the service VM b means for migrating policies managing the service VM in synchronization with the migrating of the service VM and c means for resuming execution of the service VM under control of the policies migrated by the means b .

Means a further comprises d means for queueing events to be processed by the service VM at the source host e means for sending information regarding a state of the VM managed element and its dependent elements from the source host to the target host f means for sending information regarding a state of the events queued from the source host to the target host g means for sending components of the VM managed element that have changed during the processing performed by the means d f from the source host to the target host h means for processing the information sent by the means e at the target host and i means for processing the information sent by the means f at the target host.

Means b further comprises v means for storing policies within the autonomic element and w means for migrating the policies contained in the autonomic element prior to executing the service VM on the target host. Means d further comprises means for locating a sensor service and means for creating a queue of events within the sensor service and preventing further events to be forwarded to the VM managed element. Means e further comprises j means for serializing the state of the VM managed element and its dependent elements and k means for sending a message containing a serialized state of the VM managed element and its dependent elements generated by the means j from the source host to the target host. Means f further comprises l means for serializing the queued events for the VM managed element and its dependent elements at the source host and m means for sending a message including a serialized queue of events generated by the means l to the target host. Means g further comprises n means for serializing the components of the VM managed element and its dependent elements that have changed and o means for sending serialized components of the VM managed element produced by the means n from the source host to the target host. Means h further comprises means for deserializing the state of the VM managed element and extracting dependencies for its dependent elements at the target host. Means i further comprises x means for deserializing the queued events and creating queues of events at the target host and y means for locating a sensor service and inserting the queues of events created by the means x into the sensor service.

Means c further comprises p means for starting events for the VM managed element and its dependent elements at the target host and q means for destroying the VM managed element at the source host. Means p further comprises means for locating the sensor service means for adding the events for the VM managed element to a time ordered queue of events stored within the sensor service and means for adding the events the dependent elements of the VM managed element to a time ordered queue of events stored within the sensor service. Means q further comprises means for stopping the events for the VM managed element and its dependent elements.

According to yet one more aspect of the invention there is provided a system for migrating a service Virtual Machine VM comprising a VM managed element and its dependent elements including components providing a service from a source host to a target host the system comprising of r means for migrating the service VM during its execution s means for migrating policies managing the service VM in synchronization with the migrating of the service VM and t means for resuming execution of the service VM on the target host under control of the policies migrated by the means s .

According to yet another aspect of the invention there is provided a method for migrating a service Virtual Machine VM comprising a VM managed element and its dependent elements including components providing a service from a source host to a target host the method comprising the steps of 

In the method described above the step y further comprises the steps of storing policies for managing the service VM within the autonomic elements and migrating the policies prior to executing the service VM on the target host. Conveniently the autonomic elements include respective sensor interfaces and effector interfaces for managing the migration of the service VM.

According to yet another aspect of the invention there is provided a system for migrating a service Virtual Machine VM comprising a VM managed element and its dependent elements including components providing a service from a source host to a target host comprising 

Conveniently the autonomic elements include respective sensor interfaces and effector interfaces for managing the migration of the service VM.

To facilitate the understanding of the present invention a reference is made herein to the previously filed applications of Embotics Corporation all of which are incorporated herein by reference 

Canadian patent applications serial numbers 2 435 655 and 2 475 387 to Shannon et al both entitled Embedded System Administration and

Canadian patent applications serial numbers 2 504 333 and 2 543 938 to White et al both entitled Programming and Development Infrastructure For An Autonomic Element .

The present invention focuses on systems that use autonomic computing principles to manage virtual machines in a scenario where management and service are separated in distinct execution environments also referred to as management and service planes respectively. A single management plane may provide manageability for one or more service planes. The invention provides a method and system for VM migration and the infrastructure to support the mobility of manageability components that provide autonomic management for a migrating virtual machine or more generally an execution container which constitutes a service plane.

The notion of the co existence of a management and a service plane is explained with the help of . The management plane shown in runs an application framework that provides a set of management services. One service is the management module runtime which provides an execution environment for embots. All embots execute within this environment which provides significant abstractions with respect to the service plane being managed. Embots are the smallest runtime units of manageability as provided by this invention. Embots are autonomic elements and created when a management module is deployed to the management plane and loaded. A management module is the smallest unit of deployable system administration. The nature of the management module is the subject of separate previous patent applications of Embotics Corporation cited above.

In some systems referring to and an embot may represent the monitor analyze plan execution and knowledge parts of an autonomic manager. On other systems several embots communicating through the channels shown by arrows connecting them in could collectively constitute the same functionality.

As shown in the notified policies contact their embot containers indicating that migration should occur. One embot can store or contain one or more policies as shown by the one to many mapping on along with managed elements representing the resources being managed in the service plane s . Embot containers include behavior that support movement of manageability from one management plane to another including the ability to move both code and state. A service for moving code and data provided as part of a mobile code infrastructure may be used by the affected embots to schedule themselves for migration. provides a view of the plug in nature of the infrastructure that can be used to support migration.

A typical scenario that provides an example of the utility of VM migration for achieving load distribution is provided next.

The method for the VM migration is explained with the help of flowcharts that are captured in . The service VM including the VM managed element as well as the VM managing element for this service VM are migrated from a source host to a target host. Note that both the managed element as well as its manageability units are objects of migration. The steps of the methods illustrated in are executed on the source host.

The step of Proceed Migration box is explained with the help of the flowchart shown in . Upon start box the procedure queues the events to be processed by the service VM. These include events for the VM managed element as well as for its dependant elements box . Instead of letting the events be processed the events are queued because the VM responsible for processing the events is being migrated to a different host. The procedure then serializes the state for the VM managed elements and its dependent elements for building a message . This message containing the management state that includes the current state of the VM managed element and the state of its dependant elements is sent to the target host and the source host waits for a response box . If a timeout occurs before the arrival of a response the procedure exits YES from box cleans up the system memory generates an exception aborts the migration box and exits box . If the response arrives before the timeout occurs the procedure exits NO from box and checks whether a Managed Object Instantiation Error response is received box . If such a response is received it means that the target host was unable to instantiate the desired management objects and the procedure exits YES from box cleans up the system memory generates an exception aborts the migration box and exits box . If such a response is not received the procedure exits NO from box and checks whether a Managed State Failed response message is received box . If such a message is received the procedure exits YES from box cleans up the system memory generates an exception aborts the migration box and exits box . If such a message is not received it means that a message signifying the ability of the target host to continue with the migration is received the procedure exits NO from box and proceeds to process the management event state box and exits box .

The step of Process management event state box is explained further with the help of the flowchart presented in . The role of this procedure is to transfer the queued events from the source host for processing at the target host once the VM migration is completed. Upon start box the procedure serializes the queued events for building a message . This message containing the management event state that corresponds to the state of the queued events is then sent to the target host and the source host waits for a response box . If a timeout occurs before the arrival of a response the procedure exits YES from box cleans up the system memory generates an exception aborts the migration box and exits box . If the response arrives before the timeout occurs the procedure exits NO from box and checks whether a Managed Object Instantiation Error response is received box . If such a response is received it means that the target host was unable to instantiate the desired object and the procedure exits YES from box cleans up the system memory generates an exception aborts the migration box and exits box . If such a response is not received the procedure exits NO from box and checks whether a Managed Event State Failed response message is received . If such a message is received the procedure exits YES from box cleans up the system memory generates an exception aborts the migration box and exits box . If such a message is not received it means that a message signifying the ability of the target host to continue with the migration is received as response the procedure proceeds to migrate the VM box and exits box .

The step of Migrate VM box in the flowchart of is explained further with the help of the flowchart presented in . Upon start box the procedure attempts to migrate the VM from the source host to the destination host. If the attempt is not successful the procedure exits NO from box cleans up the system memory generates an exception aborts the migration box and exits box . If the migration attempt is successful the procedure exits YES from box and checks if there are dirty objects for the VM to be migrated box . Note that since the VM being migrated is still in operation on the source host some of the objects may change become dirty after the migration attempt is started. These objects include the components of the VM managed element that have changed. These dirty objects thus need to be transferred to the target host where the VM is designated to execute. If there are no dirty objects the procedure exits NO from box completes the VM migration box and exits box . If dirty objects exist the procedure exits YES from box and serializes these dirty managed objects and prepares a message box . The message containing the serialized dirty managed objects are then sent to the target host and the procedure waits for a response box . If a timeout occurs before the arrival of a response the procedure exits YES from box logs the occurrence of the timeout box cleans up the system memory generates an exception aborts the migration box and exits box . If a response is received before the occurrence of the timeout the procedure exits NO from box and checks whether a Migration State Success response is received. If such a response is received it means that the dirty managed objects sent are successfully deployed at the target host and the procedure exits YES from box and loops back to the entry of box to check if new dirty objects have been created. If the response received is not Migration State Success it means that the target host is unable to continue with the migration the procedure exits NO from box cleans up the system memory generates an exception aborts the migration box and exits box .

The step of Complete VM migration box in the flowchart of is explained with the help of the flowchart presented in . Upon start box the procedure sends a Migration Complete Message that indicates the completion of the VM migration to the target host and waits for a response box . If a timeout occurs before the response is received the procedure exits YES from box generates an exception box and exits box . If the response is received before the occurrence of the timeout the procedure exits NO from box and checks whether a Migration Complete Ack that indicates that the migration is successfully completed is received. If such a response is not received the procedure exits NO from box generates an exception box and exits box . If the Migration Complete Ack response is received the procedure exits YES from box terminates the service VM and the VM managing element at the source host box and exits box . The migration of the service VM is now complete and the execution of the service VM and the VM managing element are resumed on the target host.

A number of steps of the procedures described in the context of the flowcharts presented in the previous paragraph is further discussed. The steps of the procedure that are executed on the target host in response to the Start Migration message sent from the source host in box of is explained with the help of the flowchart presented in . The procedure executed on the target host allows the target management plane to decide whether to accept the migrating virtual machine. A migration policy associated with the migration service on the target management plane is used to process the message. Upon start box the migration policy associated with the migration service is notified of the migration request from the source host box . This request includes the location of the source of the request either IP address or full qualified domain name . The policy checks to see if migration from the requesting source is allowed box . If such a migration is not allowed the procedure exits NO from box sends a Migartion Denied message to the source host box and exits box . If the migration is allowed the procedure exits YES from box and checks to see if sufficient resources are available to run the migrating virtual machine on the target host box . If not the procedure exits NO from box sends a Migartion Denied message to the source host box and exits box . If sufficient resources are available the procedure exits YES from box returns a Migration Permitted message to the source host box and exits box .

Executed on the source host the steps of the procedure used in box in is explained further with the help of the flowchart presented in . The procedure starts the process of queueing events for the managed elements that are being migrated to the target management plane. Upon start box the Sensor service is located using the service registry provided by Embotics Application Framework EAF box . In the next step a queue of events is created within the Sensor service such that no further events are forwarded to the VM managed element box they are simply queued pending reactivation of event forwarding. A similar queue of events is also created for each dependent element of this VM managed element. After completing this step the procedure exits box .

Executed on the source or the destination host the steps of the procedure displayed in the flowchart in are executed when it is required to re start the process of dispatching events to managed elements. The queue of events is destroyed once messages are processed by the managed elements. Upon start box the Sensor service is located using the service registry provided by EAF box . Events for the VM managed element are then started by adding the queue of events created within the Sensor service for the VM managed element to a time ordered queue of events stored within the Sensor service box . The queue associated with the VM managed element is destroyed. In the next step events for each dependent element of the VM managed element are started in a similar way box after which the procedure exits box .

The step of the procedure captured in box of is explained further with the help of the flowchart presented in . Executed on the source host the procedure removes the event queues associated with the managed elements and deregisters the now migrated managed elements. Upon start box the Sensor service is located using the service registry provided by EAF box . The next steps are to stop forwarding events to the VM managed element box and all the dependent elements of the managed element box . The Managed Object service is located next using the service registry provided by EAF box . The procedure then deregisters the VM managed element from the Managed Object service box and exits box .

The step of the procedure captured in box of is explained further with the help of the flowchart presented in . Executed on the source host this procedure serializes state associated with the VM managed element and all of its dependent elements. Upon start box the stream containing the state associated with the managed element is serialized for transmission to the target host box . The procedure then serializes the stream associated with each dependent element of the managed element box and exits box .

The step of the procedure captured in box of is explained further with the help of the flowchart presented in . Executed on the target host for processing the message sent by the source host this procedure deserializes the VM managed element state and all the dependant element states. Upon start box the procedure deserializes the serialized objects associated with body of the message and recreates the dependencies among them step . Whether or not the deserialization was successful is checked next box . If the deserialization was not successful the procedure exits NO from box returns a Management State Failed message to the source host box and exits box . If the deserialization was successful the procedure exits YES from box and checks whether or not the object classes can be located box . In the situation where classes are not resident locally the source migration service is contacted in order to send the required classes. This process may be recursive dependent upon the class hierarchy represented in the managed objects. If unable to locate the object classes the procedure exits NO from box returns a Managed Object Instantation Error message to the source host box and exits box . If all the object classes are located the procedure returns a Management State Success message to the source host box and exits box .

The steps of the procedure executed on the target host for processing the message sent by the source host in box of are explained with the help of flowchart displayed in . The procedure deserializes a queue of events containing information to be processed by the VM managed element and its dependant elements. Upon start box the serialized queue of events associated with the body of the message is deserialized box . The next step is to check whether or not the deserialization was completed successfully box . If deserialization is not successful the procedure exits NO from box sends a Management Event State Failed message to the source host box and exits box . On the other hand if deserialization is successful the procedure exits YES from box and checks whether or not all objects can be located box . In the situation where classes are not resident locally the source migration service is contacted in order to send the required classes. This process may be recursive dependent upon the class hierarchy represented in the managed object. If an object class cannot be located either locally or retrieved from the source migration service the procedure exits NO from box returns a Managed Object Instantiation Error message box and exits box . Otherwise the procedure exits YES from box and locates the Sensor service using the service registry provided by EAF box . The queue of event messages is then passed on to the Sensor service. Whether or not an error is generated is checked next box . If an error is generated the procedure exits YES from box reports the error box and exist box . If no errors have been detected the procedure exits NO from box returns a Management Event State Success message box and exits box .

The procedure executed on the source host for dealing with aborting the migration when a timeout occurs or when an error message is received from the target host is explained with the help of flowchart presented in . Upon start box all deserialized managed objects are destroyed box . The Sensor service is looked up next box . The procedure then removes all events from the Sensor service box and exits box .

The step of the procedure executed on the source host in box of is explained further with the help of the flowchart displayed in . The procedure serializes a queue of events containing information to be processed by the VM managed element and its dependent managed elements. Upon start box the procedure looks up the Sensor service box . The procedure then serializes the queue of events returns the resulting byte stream box and exits box .

Executed on the target host a procedure that is similar to the procedure presented in is described with the help of flowchart presented in . It performs the cleaning up operations on the target management plane. Upon start box all deserialized managed objects are destroyed box . The Sensor service is looked up next box . The procedure then removes all events from the Sensor service box and exits box .

Executed on the source host the procedure that processes changes that occur to the managed elements as captured in box and box of while the VM migration is in process is explained with flowchart presented in . While migration is in progress there is a potential for state to change affected managed elements are then marked as dirty in this case. Access to the VM managed element is synchronized for the execution of the procedure captured in flowchart . Upon start box the procedure checks whether or not the managed element is dirty box . If the managed element is dirty the procedure exits YES from box writes the state of the managed element to the serialization stream to be returned box . The procedure then resets the dirty bit in the ManagedElement box and exits box . If the managed element is not dirty the procedure exits NO from box and exits box . Note that this procedure is recursively invoked for dependents of the managed element.

The steps of the method for the procedure executed on the target host in response to the Migration Complete message sent from the source host in box of is explained with the help of flowchart displayed in . The procedure is used to restart the migrated VM on the target host after the reception of the message. Upon start box the VM managed element is located within the set of migrated managed objects box . Note that the migrated managed objects are already registered with the Sensor service for events and thus the VM managed element can be easily located. The procedure then invokes the procedure described in with the VM managed element as context box and exits box .

The system used in the embodiment of this invention includes computing devices. A computing device has a memory for storing the program that performs the steps of the method for achieving VM migration.

Numerous modifications and variations of the present invention are possible in light of the above teachings. It is therefore to be understood that within the scope of the given system characteristics the invention may be practiced otherwise than as specifically described herein.

