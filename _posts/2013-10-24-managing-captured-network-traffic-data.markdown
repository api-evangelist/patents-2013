---

title: Managing captured network traffic data
abstract: A system and method for managing captured network traffic data is provided. The invention comprises a plurality of capture agents, each being configured to capture the network traffic associated with one or more applications. Each application is associated with one or more capture agents according to an application profile that is stored and maintained in a capture server. When analysis of an application's network traffic is required, the capture server contacts the corresponding capture agents according to the application profile. The capture server then effects the identification and archiving of the network traffic that corresponds to a user-defined capture condition. A database at the capture server maintains a record that associates the corresponding network traffic with the user-defined capture condition such that the corresponding network traffic can later be retrieved and analyzed using an analysis engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09054965&OS=09054965&RS=09054965
owner: RIVERBED TECHNOLOGY, INC.
number: 09054965
owner_city: San Francisco
owner_country: US
publication_date: 20131024
---
This application is a continuation of U.S. patent application 13 424 005 filed 19 Mar. 2012 which is a continuation of U.S. patent application 11 507 114 filed on 19 Aug. 2006 now U.S. Pat. No. 8 140 665 which claims the benefit of U.S. Provisional Patent Application 60 709 762 filed 20 Aug. 2005.

This invention relates to the field of network application performance analysis and in particular to a method and system that facilitates managing network traffic data that is recorded at a variety of sources.

As corporate IT infrastructures continue to grow and become more complex so does the task of supporting the mix of applications and the networks they run on. There are a variety of problems that can affect the performance of a network application. To start with the application may not have been engineered to handle certain network conditions. Additionally dropped packets excessive delays and other network errors can cause the application to run slowly or improperly. In some scenarios there may be hundreds or even thousands of users working with a network intensive application. Problems with the network can then lead to a serious decrease in productivity as well as a major increase in costs. Accordingly the industry could benefit from both proactive and reactive approaches for addressing network application performance issues.

Many of the prior art approaches for addressing network application performances issues involve the use of capture agents. A capture agent is a network monitoring tool commonly referred to as a sniffer or protocol analyzer that is used to capture network traffic data. Multiple capture agents can be placed at various points within a network and are configured to monitor the traffic flowing through those points. The captured data can then be analyzed by application developers or expert troubleshooters to improve an application s performance or resolve network or application problems. In some scenarios however there may be hundreds or even thousands of capture agents in a network. The task of determining which agents are best associated with a particular application or problem can thus be very cumbersome. The present invention addresses this issue by employing a centrally located capture server that manages the potentially large number of capture agents and provides an array of capture management services.

Some of the capture management services provided by the capture server are configured to improve upon prior art troubleshooting techniques. For example larger organizations such as corporations governments and universities traditionally employ teams of troubleshooters that are tasked with maintaining the integrity of the internal network and its devices. When problems occur the users typically communicate with the troubleshooters via web based trouble ticketing systems which provide services for reporting the details associated with the problems. Such details might include the application with which a user is experiencing a problem and the time at which the problem occurred. These details make up a trouble ticket which then serves as a primary source for determining an appropriate resolution to the problem. A fundamental drawback to this approach is that the user may know little more about the problem than the simple fact that there is one. Accordingly the trouble ticket will only reflect the symptoms experienced by the user and not the network conditions associated with the problem at hand. One objective of the present invention is to automatically identify the captured network traffic data that is associated with a reported problem and to make that data accessible for analysis to anyone investigating the problem.

Some other capture management services provided by the capture server are configured to improve upon prior art network application development techniques. In an ideal world application developers would have the knowledge time and resources to adequately test their software in a variety of network environmental conditions. The real world however doesn t offer the necessary time and resources for this degree of testing. Application developers must instead rely upon simulations that can quickly determine how an application will perform in different network environments. These simulations require a baseline set of network traffic data that is captured while running the application in a live network. As the size and complexity of a network increases so does the task of gathering the relevant network traffic data. The developer must first identify and or configure the one or more capture agents that are associated with the application under development. Then the developer must coordinate the capturing of network traffic data with the execution of the application. Finally the relevant traffic data must be extracted from each of the capture agents downloaded to the developer s workstation and loaded into the simulation software. Another objective of the present invention is to automate the tasks of identifying the capture agents associated with a particular application coordinating the capturing of network traffic data and extracting the relevant data for analysis.

The aforementioned objectives and others are achieved by a system and method for managing captured network traffic data. The invention comprises a plurality of capture agents each being configured to capture the network traffic associated with one or more applications. Each application is associated with one or more capture agents according to an application profile that is stored and maintained in a capture server. When analysis of an application s network traffic is required the capture server contacts the corresponding capture agents according to the application profile. The capture server then effects the identification and archiving of the network traffic that corresponds to a user defined capture condition. A database at the capture server maintains a record that associates the corresponding network traffic with the user defined capture condition such that the corresponding network traffic can later be retrieved and analyzed using an analysis engine.

Throughout the drawings the same reference numerals indicate similar or corresponding features or functions. The drawings are included for illustrative purposes and are not intended to limit the scope of the invention.

In the following description for purposes of explanation rather than limitation specific details are set forth such as the particular architecture interfaces techniques etc. in order to provide a thorough understanding of the concepts of the invention. However it will be apparent to those skilled in the art that the present invention may be practiced in other embodiments which depart from these specific details. In like manner the text of this description is directed to the example embodiments as illustrated in the Figures and is not intended to limit the claimed invention beyond the limits expressly included in the claims. For purposes of simplicity and clarity detailed descriptions of well known devices circuits and methods are omitted so as not to obscure the description of the present invention with unnecessary detail.

The present invention is designed to address many of the drawbacks associated with the prior art means for troubleshooting network application performance problems and for predicting a network application s performance under a variety of network conditions. illustrates an exemplary configuration of the inventive system wherein a variety of components are connected through network . Further details on each of these components are provided below.

The first major component of the invention is the capture agent . A plurality of capture agents can be placed at various points within the network and are configured to monitor and record the traffic flowing through those points. In most cases the capture agents are placed near or at the application servers operating in the network . This insures that the application traffic associated with each network application will be properly recorded. In some scenarios there may even be multiple capture agents installed at the same location wherein each capture agent is configured to capture only a specific subset of the total traffic. For example one capture agent could be configured to capture only HTTP traffic on port while another capture agent could be configured to capture FTP traffic on port .

The capture agents typically operate in one of two modes. The first mode is a continuous mode wherein data is always being captured. In this mode new capture data replaces older data after a predetermined storage threshold has been reached. Continuous capturing is most effective for troubleshooting unexpected problems or events. For example when new network application performance problems occur the troubleshooters can identify the one or more capture agents that are likely to have captured the traffic associated with the problem download the corresponding data and troubleshoot the problem using one or more analysis tools such as the analysis engine .

The second mode is an on demand mode wherein the capturing of network traffic is explicitly started and stopped by a user or some predefined triggering event. This mode is best suited for application development or other controlled scenarios. For example application developers may wish to capture traffic while testing a specific transaction. By having complete control over when the capture is started and stopped the developers can more easily capture only the traffic that is of interest.

Without the present invention consistently using the capture agents in either of the two aforementioned modes can be difficult. As the size of the network increases so does the task of understanding the locations and configurations of each of the capture agents. Additionally as the numbers of applications and problems increase there may be no way to easily manage and archive the interesting capture data. The capture server provides the organizational services that are necessary to address these weaknesses.

The capture server is preferably a computer system that is configured to provide numerous services to other computing devices over the network . Many of these services are dependent upon the association of the capture agents in the network with the network applications they are configured to monitor. The associations are created by configuring one or more application profiles within the capture server . Application profiles map a particular network application to all of the capture agents that might be associated with it. For example a network application might be implemented using an application server and a database server. If a capture agent is installed near or at both the application server and the database server the application profile would include the hostname of each along with any additional information necessary to access the capture data. In a preferred embodiment a hostname port number and capture name are sufficient to access the capture data. Application profiles are preferably stored in a database located within the capture server .

User access to the capture server is preferably provided via a graphical user interface or GUI . Interaction with any GUI is commonly achieved through the use of one or more input devices. Typical input devices include the mouse and keyboard both of which are designed to manipulate a plurality of graphical elements on a display through various clicks and key presses. The GUI of the present invention is preferably a secure web based interface comprising one or more web pages wherein the one or more web pages are configured to enable each registered user to utilize one or more of the capture management services. Access to the GUI is preferably facilitated by a web browser installed at a user workstation . It should be understood by one of ordinary skill in the art that the GUI need not be a web interface and could alternatively be provided as part of an alternative software application.

The capture server is preferably configured by one or more network administrators. Administrators are primarily tasked with managing user accounts and application profiles. User accounts are stored in the database and preferably include at least a user name and one or more user privileges. The user name attribute is the name or moniker associated with a user that is registered to access the system and the user privileges attribute identifies the one or more services that a user can or cannot utilize at the capture server . Administrators are free to create modify and delete user accounts as necessary preferably using the GUI .

As discussed above an application profile links a particular software application with each capture agent that is configured to capture the application s network traffic. Administrators can preferably use the GUI to add modify and delete application profiles as desired. To create a new application profile an administrator might input an application name and then create an entry for each capture agent that is to be associated with the application. illustrates an example of a web page with which an administrator could create an application profile. The application name can be inputted into field and capture agent entries can be created by selecting the Add Capture Agent button and subsequently inputting the capture agent s network address the port number with which access to the capture agent can be achieved and the name of the corresponding capture file .

The application profiles are used in conjunction with two primary embodiments of the present invention. The first is a troubleshooting embodiment in which the capture agents operate in a continuous mode. In this embodiment after the application profiles have been configured the capture server is capable of accepting problem reports. Problem reports are supplied by users that are experiencing difficulties with the network applications. For example if a user executes a certain application transaction and the response time is abnormally slow or the transaction fails completely the user can report the problem using the GUI . As an added convenience shortcuts installed within the problem application or within the user s operating system could provide the user with instant access to the GUI . A problem report preferably comprises the name of the problem application the time at which the problem occurred and a description of the problem. Web page in provides one example of a user interface that could be used to create a problem report. The application drop down box enables the user to select an application while the time drop down box enables the user to select the time at which the problem occurred. The description box enables the user to input a textual description of the problem and the Submit button effectively causes the problem report to be processed by the capture server .

As soon as a user selects the Submit button of web page several procedures are automatically performed. The capture server first creates a new capture record comprising the user supplied problem details and stores the record in the database . In addition to the user supplied information the capture record preferably includes the user s username an automatically generated capture ID CID and a timestamp of when the problem was reported. Additional information such as problem status problem severity or the name of a troubleshooter assigned to address the problem can also be included. Next the CID the time of the reported problem and the corresponding application profile information are supplied as input to a notification utility . The notification utility is highly configurable but is primarily responsible for notifying the capture agents and other users of a reported problem. To perform these tasks the notification utility utilizes the application profile information to determine which capture agents are associated with the problem application. The notification utility then generates a problem notification message which is sent to the capture agents using the corresponding hostname port and capture name information. The notification message causes the capture agents to create a snapshot of the application traffic that corresponds to the time at which the problem occurred. For example if a user reports that a problem occurred around 3 35 pm the notification message might instruct the capture agent to retain all data captured between 3 30 pm and 3 40 pm. The capture window size is determined according to a plurality of padding factors that are dependent upon the user the application and the nature of the reported problem. The padding factors are configurable by the administrators and can vary from one user or application to another. In general however a few minutes of capture data is usually sufficient for most problems.

In one embodiment the snapshot can be an actual snapshot in which the capture data of interest is directly copied to a separate capture file. In a preferred embodiment the snapshot is a virtual snapshot. In this embodiment the capture agent is notified of a time region to save along with additional identifying information about the reported problem e.g. the CID . By using one of several locking mechanisms known in the art for example in memory locking or file based locking the capture agent is able to differentiate between the data that can be safely overwritten and the data that needs to be retained. When aging out data as part of the continuous capture process the capture agent will retain any data that has been locked i.e. identified as part of one or more snapshots . In one embodiment capture agent configuration options control the maximum amount of snapshot data to store. The snapshot can be stored at the same location as the capture agent or in the preferred embodiment be automatically downloaded to a repository at the capture server . The downloading can occur immediately or at regular times of low network activity e.g. 2 00 am every Monday Wednesday and Friday . The speed of the download can further be limited in order to conserve bandwidth. With each successful creation of a snapshot the capture server appends the details preferably the name time time size and location of the snapshot to the corresponding capture record.

By centrally managing the snapshot data administrators are able to configure through the capture server rules and policies for deleting outdated snapshot data. In a network with hundreds or thousands of capture agents managing the snapshot data in a central location is appealing for a variety of other reasons. For one this ensures that the snapshot data is in a known location when a troubleshooter is ready to investigate the problem. Central management further allows the snapshot data to be archived thereby increasing the likelihood of being able to investigate multiple instances of a single intermittent problem. For example if the same intermittent problem is seen by each of three different user groups the central management of snapshot data and capture records makes it more likely that a troubleshooter will be able to identify a new problem as really being another occurrence of a previously reported problem.

As mentioned above the notification utility is also responsible for notifying other users of a reported problem. One major advantage of the notification utility is that it can integrate with existing trouble ticketing systems. For example the notification utility can be configured to automatically transmit a notification message to a trouble ticketing system wherein the notification message comprises a CID and problem description. The existing trouble ticketing system can then create a new trouble ticket according to the notification message and process it according to a company s own specifications. Such specifications might include notifying a particular expert troubleshooter directly or notifying a team of troubleshooters and allowing them to claim the trouble ticket according to their current workload expertise etc. It should be easily recognized by one of ordinary skill in the art that the notification utility could be integrated with nearly any trouble ticketing system comprising any set of independent policies and procedures.

In an alternative embodiment the notification utility can be configured to notify other users directly by sending electronic messages posting problem reports to a web page generating voice messages or by performing other types of notification.

Once the notification utility completes its designated tasks the capture server enables the expert troubleshooters to review the details of a reported problem and begin the analysis process. For example a particular troubleshooter or a group of troubleshooters might be notified of a reported problem according to one of the notification procedures described above. A troubleshooter then connects to the capture server accesses the GUI and reviews the capture record. As discussed above the capture record comprises a listing of each snapshot associated with the problem. Should the troubleshooter determine that further investigation is required he can download one or more snapshots from the capture agents or in the preferred embodiment the repository to his workstation and analyze them using the analysis engine . The analysis engine could be integrated into the capture server but is preferably installed at the troubleshooter s workstation.

In a preferred embodiment the analysis engine is capable of communicating directly with the capture server . In this manner when a troubleshooter wishes to analyze the snapshot data associated with a particular problem the capture server can provide the analysis engine with listings of all available snapshots . These listings preferably include many of the details from the corresponding capture records e.g. the CID the problem description the name of the user that reported the problem etc. illustrates a sample GUI that could be used in accordance with the present invention. The GUI includes a listing of each snapshot presently available for analysis. The troubleshooter can highlight a particular listing that corresponds with the problem he is investigating and select the View Selected Snapshot button to download the snapshot and load it into the analysis engine . The capture manager facilitates the downloading process by indicating the location of a selected snapshot to the analysis engine . Other options in GUI include selecting the Update Snapshot List button the Open Problem Server button or the Find button which enables the troubleshooter to search for a particular snapshot listing according to any of the available capture record details.

In the same or an additional embodiment the troubleshooter can preview the snapshot prior to downloading and can selectively download only a portion of the snapshot for analysis. In this manner a potentially large snapshot can be viewed in a simplified form prior to downloading and any non relevant traffic positioned before and or after the traffic of interest can be easily excluded.

After downloading and loading the snapshot into the analysis engine the troubleshooter can preferably execute a variety of analytical and simulation procedures designed to help identify the cause of an application performance problem. One such analysis engine is the Application Characterization Interface ACE traffic analysis system from OPNET Technologies Inc. Bethesda Md. One of ordinary skill in the art will recognize that any tool capable of analyzing the snapshot data could be used in accordance with the present invention.

Once the troubleshooter has completed his investigation of a problem he can re access the capture manager to update the capture record accordingly. For example if no further action needs to be taken the troubleshooter might update the problem details to include the results of the analysis and mark the problem as resolved.

The second primary embodiment of the present invention is a development embodiment in which the capture agents operate in an on demand mode. In this embodiment application developers can explicitly control the capturing of application traffic associated with applications under development. Developers wishing to analyze or predict the performance of their applications can preferably connect to the capture server and access the GUI . The developers are then presented with a list of applications wherein each application is associated with one or more capture agents according to its application profile. Upon selecting a particular application a CID is automatically generated along with a capture record. The capture record preferably comprises the CID and any user supplied descriptive information. Next using controls embedded in the GUI the developer can cause each of the capture agents associated with the selected application to begin capturing network traffic. In other words when a user selects a start capturing control e.g. a button in a web page a start command and the CID are supplied as input to the notification utility . The notification utility generates a notification message which is transmitted to each of the corresponding capture agents thereby causing the capture agents to begin capturing data. In the preferred embodiment the developer can choose which of the associated capture agents to include in the capture.

At this point the developer is free to execute one or more transactions using the selected application. The traffic associated with each of the transactions will be consequently recorded by the capture agents . Upon completing the desired transactions the developer can return to the GUI and select a stop capturing control. This time the notification utility generates a notification message comprising a stop command and the CID. The notification message is sent to each of the running capture agents thereby causing them to cease capturing network traffic. The traffic captured between the start and stop operations is subsequently saved as a snapshot according to one of the methods described above and the capture server appends a listing of each successfully created snapshot to the corresponding capture record. Finally the developer can load one or more of the snapshots into the analysis engine and perform numerous performance analyses and performance prediction simulations the results of which will aid the developer in producing a more robust application.

In an alternative embodiment the capture agents corresponding to the developer embodiment could operate in a continuous mode. In this embodiment instead of signaling the capture agents to start and stop the capture server would simply record timestamps at each selection of a start and stop command. After a stop command the notification utility would then notify the capture agents to create snapshots of data corresponding to the time between the recorded timestamps. The snapshots would be stored and analyzed in the same manner as above.

As a further enhancement to any of the aforementioned embodiments additional traffic filtering techniques could be automatically applied to the snapshots in order to remove extraneous traffic. For example copending U.S. patent application Ser. No. 11 506 649 entitled SYSTEM AND METHOD FOR IDENTIFYING A TRANSACTION OF INTEREST WITHIN A NETWORK filed 18 Aug. 2006 for Malloy et al. Attorney Docket OP 050826 and incorporated by reference herein describes techniques for identifying and extracting only the transactions associated with a particular user level action ULA . Such techniques could be employed in the present invention to automatically reduce the snapshots to only transactions of interest.

The foregoing merely illustrates the principles of the invention. It will thus be appreciated that those skilled in the art will be able to devise various arrangements which although not explicitly described or shown herein embody the principles of the invention and are thus within its spirit and scope. For example instead of mapping applications to capture agents the capture server could map users to capture agents according to the particular applications the users most frequently utilize. It should further be recognized that the capture services provided by the capture server need not be limited to troubleshooting and development embodiments and could be used in any embodiment requiring the centralized management of capture data. As a final note because the capture server maintains a location for each snapshot it should be recognized that the snapshots can be stored and maintained in a variety of locations and configurations that may not have been explicitly mentioned above.

These and other system configuration and optimization features will be evident to one of ordinary skill in the art in view of this disclosure and are included within the scope of the following claims.

a the word comprising does not exclude the presence of other elements or acts than those listed in a given claim 

b the word a or an preceding an element does not exclude the presence of a plurality of such elements 

d several means may be represented by the same item or hardware or software implemented structure or function 

e each of the disclosed elements may be comprised of hardware portions e.g. including discrete and integrated electronic circuitry software portions e.g. computer programming and any combination thereof 

g any of the disclosed devices or portions thereof may be combined together or separated into further portions unless specifically stated otherwise 

i the term plurality of an element includes two or more of the claimed element and does not imply any particular range of number of elements that is a plurality of elements can be as few as two elements and can include an immeasurable number of elements.

