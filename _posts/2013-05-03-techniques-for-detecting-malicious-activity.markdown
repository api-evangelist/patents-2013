---

title: Techniques for detecting malicious activity
abstract: Techniques for detecting malicious activity are disclosed. In one particular embodiment, the techniques may be realized as a method for detecting malicious activity including receiving information indicating a first process being executed, the first process including a plurality of first process components, receiving information specific to at least one of the plurality of first process components, determining whether the first process exhibits malicious behavior; and identifying which of the plurality of first process components is responsible for the malicious behavior based on the received information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141795&OS=09141795&RS=09141795
owner: Symantec Corporation
number: 09141795
owner_city: Mountain View
owner_country: US
publication_date: 20130503
---
The present disclosure relates generally to computer viruses and malware and more particularly to techniques for detecting malicious activity.

Computer viruses and malware can create serious problems for computing systems including for example unauthorized access to private data degradation of system performance and hijacking of system resources. Accordingly detection of such malicious activity has become very important. However traditional methods of detecting malicious activity are not capable of sufficiently detecting malware or viruses that are non process threats and appear as extensions of trusted operating system processes or applications.

In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with traditional malicious activity detection.

Techniques for detecting malicious activity are disclosed. In one particular embodiment the techniques may be realized as a method for detecting malicious activity comprising receiving information indicating a first process being executed the first process including a plurality of first process components receiving information specific to at least one of the plurality of first process components determining whether the first process exhibits malicious behavior and identifying which of the plurality of first process components is responsible for the malicious behavior based on the received information.

In accordance with other aspects of this particular embodiment the first process is an operating system process.

In accordance with other aspects of this particular embodiment the plurality of first process components are dynamic link libraries.

In accordance with other aspects of this particular embodiment the information specific to at least one of the plurality of first process components is received from a first client executing the first process.

In accordance with other aspects of this particular embodiment the at least one of the plurality of first process components is determined to not be trusted.

In accordance with additional aspects of this particular embodiment determining whether the first process exhibits malicious behavior includes monitoring network activity.

In accordance with further aspects of this particular embodiment determining whether the first process that exhibits the malicious behavior is trusted wherein identifying which of the plurality of first process components is responsible for the malicious behavior is based on the determination of whether the first process that exhibits the malicious behavior is trusted.

In accordance with further aspects of this particular embodiment anonymizing the information indicating the first process being executed.

In accordance with additional aspects of this particular embodiment anonymizing the information indicating the first process being executed includes removing client user specific data.

In accordance with additional aspects of this particular embodiment anonymizing the information indicating the first process being executed includes performing a hash operation.

In accordance with other aspects of this particular embodiment anonymizing the information indicating the first process being executed includes performing a hash operation for the first process and a hash operation on the process component to generate a hash pair.

In accordance with further aspects of this particular embodiment receiving information indicating a plurality of processes being executed on a plurality of clients each of the plurality of processes including a plurality of process components determining whether the plurality of processes exhibit malicious behavior and identifying which of the plurality of process components for the plurality of processes are associated with the malicious behavior.

In accordance with additional aspects of this particular embodiment the first process is executed at a first client.

In accordance with further aspects of this particular embodiment receiving information indicating a second process being executed at a second client different from the first client the second process including second process components receiving information specific to at least one of the second process components that has been determined to be not trusted determining whether the second process exhibits malicious behavior determining whether one of the second process components is the same as one of the first process components when the first and second processes exhibit malicious behavior and identifying the second process component that is the same as the first process component as malicious.

In accordance with further aspects of this particular embodiment determining whether the first process and the second process are operating system processes wherein identifying the second process component as malicious is based on the determination of whether the first and second processes are the operating system processes.

In accordance with further aspects of this particular embodiment containing the first process component identified as being responsible for the malicious behavior.

In accordance with additional aspects of this particular embodiment containing the first process component includes blocking the first process component.

In accordance with other aspects of this particular embodiment the first process component is blocked from being loaded into a process address space.

In another particular embodiment the techniques may be realized as least one non transitory processor readable storage medium storing a computer program of instructions configured to be readable by at least one processor for instructing the at least one processor to execute a computer process for performing the method for detecting malicious activity comprising receiving information indicating a first process being executed the first process including a plurality of first process components receiving information specific to at least one of the plurality of first process components determining whether the first process exhibits malicious behavior and identifying which of the plurality of first process components is responsible for the malicious behavior based on the received information.

In another particular embodiment the techniques may be realized as a system for detecting malicious activity comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to receive information indicating a first process being executed the first process including a plurality of first process components receive information specific to at least one of the plurality of first process components determine whether the first process exhibits malicious behavior and identify which of the plurality of first process components is responsible for the malicious behavior based on the received information.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client systems and to network . Client systems and may access information on servers A and B using for example a web browser or other client software not shown . Such a client may allow client systems and to access data hosted by any one of servers A and B or one of storage devices A N B N and or N . In some embodiments client systems and may have a security agent implemented thereon to protect the client systems from computer viruses and or malware and be in communication with a backend security system implemented on server A.

Networks and may be local area networks LANs wide area networks WANs the Internet cellular networks satellite networks or other networks that permit communication between clients servers and other devices communicatively coupled to networks and . Networks and may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and may utilize one or more protocols of one or more clients or servers to which they are communicatively coupled. Networks and may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as one network it should be appreciated that according to one or more embodiments networks and may each comprise a plurality of interconnected networks.

Storage devices A N B N and or N may be network accessible storage and may be local remote or a combination thereof to any one of servers A and B. Storage devices A N B N and or N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices A N B N and or N may be used for backup or archival purposes. For example storage devices B N and or N may be used to store data replicated from storage devices A N .

According to some embodiments clients and may be smartphones PDAs desktop computers laptop computers servers other computers or computing devices or other devices coupled via a wireless or wired connection to network . Clients and may receive data from user input a database a file a web service and or an application programming interface.

Servers A and B may be application servers archival platforms backup servers network storage devices media servers email servers document management platforms enterprise search servers anti malware virus security servers or other devices communicatively coupled to network . Servers A and B may utilize one of storage devices A N B N and or N for the storage of application data backup data or other data. Servers A and B may be hosts such as an application server which may process data traveling between clients and and a backup platform a backup process and or storage.

According to some embodiments servers A and B may be platforms used for backing up and or archiving data. One or more portions of data may be backed up or archived based on a backup policy and or an archive applied attributes associated with the data source space available for backup space available at the data source or other factors. Further the one or more portions of data that have been backed up or archived may be recovered upon occurrence of a particular event according to a failover policy. According to other embodiments servers A and B may identify malicious malware and computer viruses based on collected information from any source including clients and . As a result servers A and B may distribute information to clients and to prevent malware and viruses from infecting the clients and .

According to some embodiments clients and may contain one or more portions of software for detection of malicious activity such as for example malicious activity detection module . In addition server A may contain one or more portions of software for detection of malicious activity such as for example malicious activity detection module . As illustrated one or more portions of the malicious activity detection module may reside at a network centric location. According to some embodiments network may be an external network e.g. the Internet and server A may be a gateway or firewall between one or more internal components and clients and the external network. According to some embodiments the malicious activity detection module may be implemented as part of a cloud computing environment.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit a removable disk unit e.g. Universal Serial Bus drive or other storage medium. According to some embodiments the malicious activity detection module may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

The process information collection module may collect information on processes being executed. In some embodiments the processes being executed may be associated with an operating system such as MS WINDOWS or any other program. For example the processes being executed may include winlogon.exe lsass.exe and svchost.exe as part of the operating system. In addition the process information collection module may collect information on processes components modules associated with the processes being executed. In at least one embodiment the processes components modules may be dynamic link library files or DLL files.

In at least one example the process information collection module may be implemented on client and collect information about process and process components executed at the client . Additionally the process information collection module may remove any user information associated with the processes and process components modules executed at client . For example the process information collection module may create a hash of a process and a hash of a process component module to create a hash pair. As a result the hash pair may contain information about the process and process component but has been anonymized to remove user specific information or any other particular information.

The process analysis module may analyze the process components identified by the process information collection module to determine whether the processes and the process components are trusted or untrusted. In some embodiments the process analysis module may determine whether the processes and the process components are trusted based on a preset list. In at least one example the process analysis module may be implemented at the client to determine whether the processes and the process components loaded into the processes executed on the client are trusted.

The process component selection module may select the process components that were not determined by the process analysis module to be trusted. For example the process analysis module may determine that ten out of 100 process components loaded into process A are not trusted and the process component selection module may select those ten untrusted process components for further analysis. Accordingly the process component selection module may select the hash pairs for the ten untrusted process components for further analysis. In some embodiments the process component selection module may transmit these hash pairs to a separate location for the further analysis. In at least one example the process component selection module may be implemented on client and transmit the hash pairs for the untrusted process components to server A functioning as a backend security system for further analysis.

The network activity monitoring module may monitor and collect network and system activity to detect malicious behavior. The network activity monitoring module may detect malicious behavior based on a number of different methods including monitoring network traffic. In addition the network activity monitoring module may monitor for writing to the operating system and termination of security application to detect malicious activity. In some embodiments the network activity monitoring module may be a network based intrusion prevention system. In at least one example the network activity monitoring module may be implemented on client to detect malicious network activity at the client . In another example the network activity monitoring module may be implemented on server A to detect malicious network activity across the entire network.

The process component and network activity analysis module may examine the hash pairs from the process component selection module and any malicious activity detected by the network activity monitoring module to determine whether a process component is associated with malicious activity. For example the process component and network activity analysis module may determine whether a process component is a non process threat NPT . In at least one embodiment the process component and network activity analysis module may be implemented on a backend security system and receive hash pairs from a plurality of clients. For example the process component and network activity analysis module may be implemented at server A and analyze hash pairs received from each of the clients and . Accordingly if a process is trusted and one or more of the same hash pairs process and process component appear across multiple clients that exhibit malicious activity then the associated process component may be identified or flagged as malicious.

In another embodiment the process component and network activity analysis module may determine whether an untrusted process component is malicious when the untrusted process component is only loaded into trusted operating system processes. For example if an untrusted process component e.g. a DLL is only loaded into multiple trusted MS WINDOWS processes e.g. winlogon.exe lsass.exe svchost.exe etc. across multiple clients where the operating system processes do not share any common functionality necessitating the untrusted process component then the untrusted process component may be identified as malicious.

The action determination module may determine an appropriate action to take with respect to the malicious process component. For example the action determination module may block a malicious process component from being loaded into a process address space. In other embodiments the action determination module may generate a new rule based on the malicious process component.

The user interface may provide a user or administrator with control over the malicious activity detection module . For example the user or administrator may specify via the user interface how a newly detected malicious process component should be handled.

At block information for processes being executed may be collected. In some embodiments the process information may be collected by the process information collection module . In addition information about processes being executed at a plurality of different clients may be collected at this step. In at least one example processes executing on a first client may be collected at the first client and processes executing on a separate second client may be collected at the second client. The collection of process information at each of the clients may be performed concurrently sequentially or at any different time at each client.

The processes may be an operating system process or any program executing on the client. For example the processes being executed may be associated with an operating system such as MS WINDOWS and include winlogon.exe lsass.exe and svchost.exe. Additionally the process being executed may be associated with any other appropriate operating system including those capable of loading external process components into a process address space. Additionally at block information indicating each of the process components or modules loaded into or with the processes being executed may be collected. One example of the processes components modules is dynamic link library files or DLL files. However the process components modules are not limited to DLL files and may include any number of different formats. Further a process may have multiple process components loaded e.g. etc. and these process components may be different formats.

Further at block the information collected regarding the processes being executed and the associated process components modules may be anonymized. In some embodiments a hash function may be utilized to anonymize the processes and the associated process components. For example each process may be hashed and each process component may also be hashed to remove any user specific or client specific information. Based on the hashed process and hashed process component a hash pair indicating the process and process component may be created. This may be performed for each process process component to generate a plurality of hash pairs. After the process information has been collected the overall process may then proceed to block .

At block each process component identified at block may be analyzed to determine whether or not it is a trusted process component. In some embodiments each process component may be analyzed by the process analysis module . The determination of whether a process component is trusted may be based on a preset list of trusted components such as a white list a signature within the component itself or any other appropriate method. In some embodiments each process component may be analyzed at the respective clients after the information has been collected or may be analyzed at a central backend location e.g. server A . After each of the process components is analyzed to determine whether or not it is trusted the overall process may then proceed to block .

At block the process components that were determined to be not trusted may be selected for further analysis. In some embodiments the selection of the process components for further analysis may be performed by the process component selection module . The process components that are not trusted may or may not be malicious. For example the untrusted process component may be malware a nonmalicious process component associated with an enterprise application or any other nonmalicious component. In some embodiments the hash pair associated with the process component that was determined to not be trusted may also be selected for further analysis. The trusted process components may be excluded from further analysis since these components are less likely to cause malicious activity. In certain embodiments the selection of the process components may be performed at the respective clients executing the processes or may be performed at a central backend location e.g. server A . After the process components have been selected the process may then proceed to block .

At block network activity may be monitored for malicious behavior. In some embodiments the network activity may be monitored by the network activity monitoring module . The network activity of the clients executing the processes and the associated process components may be monitored for malicious behavior or activity. In some embodiments each client may include a security agent which is a network intrusion prevention system capable of detecting any malicious traffic or content on the wire and block it. In at least one example the malicious activity may be downloading a file to the client which is determined to include a virus or malware by an anti virus component at a client. Additionally a security agent at each client may monitor any other activity at the client to determine if it is malicious. For example the security agent may determine whether there is any unauthorized writing to the operating system termination of security applications such as anti virus applications or any other known malicious activity. When a security event or malicious activity is detected a process associated with the security event or malicious activity may be determined. Accordingly the process information including the untrusted process components for the process that exhibited the malicious activity may be submitted for further analysis.

In some embodiments the activity at each client may be monitor by the client for malicious activity or behavior at the client. For example each client may monitor its own network activity to determine if a security event has occurred. In other embodiments activity of a network that includes each client having processes operating thereon may be monitored at a separate location. Monitoring for malicious behavior is not limited to the monitoring of network activity. For example any other process that are capable of exhibiting malicious behavior such as run time processes may be monitored.

The process of monitoring for malicious activity may occur continuously while any other portion of method is being performed. Additionally the process of monitoring for malicious activity may occur periodically. If malicious activity has not been detected the overall process may proceed back to block . However if malicious activity has been detected the overall process may then proceed to block .

At block the detected malicious activity and the collected process information may be analyzed. In some embodiments the malicious activity and the process information may be analyzed by the process component and network activity analysis module . The detected malicious activity and the collected process information may be analyzed at each client or all of the malicious activity and associated process information may be collected at a separate location for analysis. For example each of a plurality of clients e.g. clients may detect malicious activity at the respective client and transmit associated process information to a separate backend system e.g. server A for analysis.

In some embodiments the backend system e.g. server A may receive detected malicious activity and associated process information from discrete clients. The system may then analyze the malicious activity to determine whether there exist any common security events across multiple clients. If it is determined that a particular security event or malicious activity has occurred across multiple clients the associated process exhibiting the security event from each client may be determined. Based on the associated process information from each client the responsible process process component pairs may be identified. Accordingly if the same process associated with the malicious activity on the different clients is trusted and a particular process process component pair appears across several clients then the particular process component may be assumed malicious.

In additional embodiments the particular process component potentially associated with the malicious activity may be further analyzed to determine whether the process component is only loaded into selected trusted operating system processes. Accordingly if it is determined that the potentially malicious process component is only loaded into selected trusted operating system processes that do not share any common functionality and justifies the loading of this process components into the OS processes then the particular process component e.g. DLL may be flagged as malicious. After the detected malicious activity and the collected process information have been analyzed the overall process may then proceed to block .

At block an appropriate action to handle the malicious process component may be determined. In some embodiments how the malicious process component is handled may be determined by the action determination module . In some instances it may be determined that the malicious process component is to be blocked from being loaded at all times. Additionally it may be determined that before the malicious process component is allowed to be loaded into a process address space a security agent at a client must query a separate backend system for approval. In additional embodiments when a backend system determines that the process component is malicious a new rule may be generated and distributed to all clients to prevent the malicious process component from being loaded into a process. Further the appreciate action may be determined in accordance with an input from a user or administrator via the user interface . After the appropriate action to handle the malicious process component has been determined the overall process may then proceed to block .

At block the process may end. In some embodiments the process may proceed back to step . Additionally the process may repeat periodically or continuously.

The above noted method may be applied to any process implemented on a computing system including operating system processes and non operating system processes. In some embodiments the method may be applied to trusted processes that are commonly targeted or to any process. In addition the method may be applied to any type of non process threat e.g. executable or non executable that may be loaded into an untrusted process a trusted process an operating system process or any other process.

Further the method may be applied to non process threats that are downloaded or created by an untrusted process on the system. In at least one example if the security agent determines that a process component is malicious e.g. NPT and was downloaded the associated uniform resource locator URL may also be flagged as malicious based on the malicious process component and or heuristics.

At this point it should be noted that detection of malicious activity in accordance with the present disclosure as described above may involve the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in the detection of malicious activity or similar or related circuitry for implementing the functions associated with detecting malicious activity in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with detecting malicious activity in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more non transitory processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of at least one particular implementation in at least one particular environment for at least one particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

