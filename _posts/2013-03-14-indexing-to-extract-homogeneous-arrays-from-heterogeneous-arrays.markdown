---

title: Indexing to extract homogeneous arrays from heterogeneous arrays
abstract: A device receives, in a technical computing environment (TCE), a heterogeneous array that includes columns and rows, and receives a command that references multiple columns and one or more rows of the heterogeneous array. The device determines, based on the command, that the referenced multiple columns of the heterogeneous array include a same data type. The device creates, based on the command and based on determining that the referenced multiple columns of the heterogeneous array include the same data type, a homogeneous array that includes the referenced multiple columns and the referenced one or more rows of the heterogeneous array. The device outputs the homogeneous array for further processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152657&OS=09152657&RS=09152657
owner: The MathWorks, Inc.
number: 09152657
owner_city: Natick
owner_country: US
publication_date: 20130314
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

Indexing may refer to the act of extracting information from data containers such as homogeneous arrays heterogeneous arrays etc. Every element of a homogeneous array may include the same data type e.g. numbers text etc. whereas at least one element of a heterogeneous array may include a different data type than at least one other element of the heterogeneous array. In one particular heterogeneous array e.g. a dataset array elements of each column must have the same data type but different columns may have different data types. In some cases a heterogeneous array may include homogeneous data.

Systems and or methods described herein may provide an indexing command to extract homogeneous information from heterogeneous arrays such as dataset arrays and an assigning command to replace homogeneous information provided in the heterogeneous arrays. The homogeneous information may include multiple values e.g. numeric data non numeric data etc. with the same data type or that can be converted to the same data type.

As further shown in the device may receive an indexing command such as x d1 3 A C . In some implementations the indexing command may include additional characters different characters or differently arranged characters. The indexing command may be utilized by the device to extract information from the heterogeneous array. For example the indexing command shown in may seek to extract rows 1 to 3 e.g. 1 3 of columns A and C from the heterogeneous array. The indexing command may cause the device to extract rows 1 to 3 of columns A and C from the heterogeneous array and to output a result as a homogeneous array x . The result may be a homogeneous array since the information extracted from the heterogeneous array has the same numeric data type.

Such an arrangement may provide simple and convenient commands to extract and or assign homogeneous information from to heterogeneous arrays. The commands may make writing code more intuitive and less time consuming for a user e.g. a programmer a software developer etc. which may enable the user to accomplish tasks more quickly and efficiently. The commands may make heterogeneous arrays useful to more people. For example heterogeneous arrays may not support mathematical operations and may suffer from poor performance for some operations. However with the commands a user may store numeric data in a heterogeneous array extract data as needed to perform fast mathematical operations and restore the transformed numeric data into the heterogeneous array.

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

User interfaces as described herein may include graphical user interfaces GUIs or non graphical user interfaces such as text based interfaces. The user interfaces may provide information to users via customized interfaces e.g. proprietary interfaces and or other types of interfaces e.g. browser based interfaces etc. . The user interfaces may receive user inputs via one or more input devices may be user configurable e.g. a user may change the sizes of the user interfaces information displayed in the user interfaces color schemes used by the user interfaces positions of text images icons windows etc. in the user interfaces etc. and or may not be user configurable. Information associated with the user interfaces may be selected and or manipulated by a user of a technical computing environment TCE e.g. via a touch screen display a mouse a keyboard a keypad voice commands etc. .

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices. In some implementations client device may include a TCE described below.

Server device may include one or more server devices or other types of computation and communication devices. Server device may include a device that is capable of communicating with client device e.g. via network . In some implementations server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. In some implementations server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN or a cellular network an intranet the Internet or a combination of networks.

As indicated above TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In some implementations TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In some implementations TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . In some implementations TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhapsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in some implementations environment may include fewer components different components differently arranged components or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in some implementations device may include fewer components different components differently arranged components or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more tasks described as being performed by one or more other components of device .

As shown in process may include receiving a heterogeneous array that includes multiple columns block . For example client device TCE may receive a heterogeneous array that includes multiple columns and one or more rows. In some implementations client device TCE may receive the heterogeneous array from server device may retrieve the heterogeneous array from memory e.g. main memory may receive the heterogeneous array from a user of client device TCE e.g. via user inputs etc.

The heterogeneous array may include an array of multiple columns and one or more rows that include elements e.g. text numbers etc. . The columns of the heterogeneous array may include different data types based on the elements provided in the rows associated with the columns. For example one or more columns of the heterogeneous array may include textual data types while other columns of the heterogeneous array may include numeric data types. In some implementations the heterogeneous array may be inverted and the rows of heterogeneous array may include different data types based on the elements provided in the columns associated with the rows. The user may instruct client device to load the heterogeneous array into TCE using a command e.g. a load command and client device may load the heterogeneous array into TCE based on the command.

As further shown in process may include receiving a command that references multiple columns and row s of the heterogeneous array block . For example client device TCE may receive an indexing command. In some implementations client device TCE may receive the indexing command from a user of client device TCE e.g. via user inputs etc. The indexing command may include syntax of a general form 

Braces may be utilized to indicate that information is to be extracted from the heterogeneous array. A colon may be provided between the rows Rand Rto indicate that all consecutive rows are to be extracted from the heterogeneous array and a comma may be provided between the rows Rand Rto indicate that specific rows are to be extracted from the heterogeneous array. For example 1 3 may indicate that rows 1 through 3 are to be extracted from the heterogeneous array and 1 3 may indicate that rows 1 and 3 are to be extracted from the heterogeneous array. A colon may be provided between the columns Cand Cto indicate that consecutive columns are to be extracted from the heterogeneous array and a space may be provided between the columns Cand Cto indicate that specific columns are to be extracted from the heterogeneous array. For example A C may indicate that columns A through C are to be extracted from the heterogeneous array and A C may indicate that columns A and C are to be extracted from the heterogeneous array.

In some implementations the indexing command may include additional characters different characters or differently arranged characters. For example the indexing command may include a number a vector of numbers a string an array of strings etc. In some implementations the user of client device TCE may specify a different syntax for the indexing command. For example the user may specify the indexing command by the general form hR R C C.

The indexing command may be utilized by client device TCE to extract information from the heterogeneous array. The indexing command may be used by client device TCE to extract information from the heterogeneous array by referencing multiple columns and one or more rows of the heterogeneous array. For example the indexing command may reference one or more rows e.g. 1 4 of two or more columns from the heterogeneous array.

As further shown in process may include determining based on the command whether the referenced columns of the heterogeneous array include the same data type block . For example client device TCE may determine based on the indexing command whether the referenced columns of the heterogeneous array include the same data type. Client device TCE may make this determination by analyzing elements provided in each of the referenced columns to determine data types for each of the referenced columns. Client device TCE may compare the determined data types to determine whether the data types match. If the determined data types match client device TCE may determine that the referenced columns of the heterogeneous array include the same data type. If the determined data types do not match client device TCE may determine that the referenced columns of the heterogeneous array do not include the same data type.

Returning to if the referenced columns of the heterogeneous array include the same data type block SAME DATA TYPE process may include creating based on the command a homogeneous array that includes the referenced columns and row s of the heterogeneous array block . For example if the determined data types match client device TCE may determine that the referenced columns of the heterogeneous array include the same data type. Based on this determination the indexing command may cause client device TCE to extract the referenced columns and rows from the heterogeneous array. Client device TCE may create a homogeneous array based on the information extracted from the heterogeneous array. The homogeneous array may include homogeneous information since the information extracted from the heterogeneous array has the same data type.

In some implementations the indexing command may cause client device TCE to extract the referenced columns from the heterogeneous array. The indexing command may cause client device TCE to combine the extracted columns to generate a temporary homogeneous array. The temporary homogeneous array may include all of the elements of the extracted columns. The indexing command may cause client device TCE to remove rows unreferenced by the indexing command from the temporary homogeneous array. Removal of the unreferenced rows from the temporary homogeneous array may generate the homogeneous array. In some implementations the homogeneous array may include numbers strings other data types etc. In some implementations client device TCE may create the homogeneous array in other ways.

As further shown in process may include outputting the homogeneous array for further processing block . For example client device TCE may output the homogeneous array for further processing by the user. In some implementations client device TCE may provide homogeneous array for display to the user and or may store the homogeneous array in memory e.g. main memory . In some implementations the user via client device TCE may perform additional operations on the homogeneous array. For example assume that the heterogeneous array stores numeric data in multiple columns. The user via client device TCE may extract the homogeneous array from such a heterogeneous array and may perform fast mathematical operations on the homogeneous array e.g. which may not be performed on the heterogeneous array . The user via client device TCE may restore the transformed numeric data to the heterogeneous array.

Returning to if the referenced columns of the heterogeneous array do not include the same data type block DIFF. DATA TYPES process may include generating and or outputting an error message based on the command block . For example client device TCE may analyze the heterogeneous array based on the indexing command and determine that the referenced columns of the heterogeneous array do not include the same data type. Since the referenced columns of the heterogeneous array include different data types client device TCE may be unable to combine the referenced information into a homogeneous array. Thus client device TCE may generate an error message that may be displayed to the user. In some implementations the error message may indicate that it is impossible to combine data from the referenced columns into a single homogeneous array since the referenced columns have different data types. In some implementations int32 and int16 may include different data types but may be extracted as a homogeneous array without an error message since int16 may be cast into int32. 

In some implementations client device TCE may provide a suggestion to the user to facilitate extracting a homogeneous array from the heterogeneous array. For example client device TCE may identify the data type of each column of the heterogeneous array referenced by the indexing command. Assume that the indexing command references three columns and the data type of one of the three columns does not match the data type of the other two columns. In this situation client device TCE may identify other columns of the heterogeneous array that are of the same data type as the two columns referenced by the indexing command. Client device TCE may provide a user interface to the user which allows the user to select one of the other identified columns of the heterogeneous array of the same data type to replace the one column referenced by the indexing command of the different data type.

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

In example assume further that heterogeneous array includes an array of four columns e.g. labeled LastName Sex Age and Weight and five rows e.g. 1 5 . The column names of heterogeneous array may not be considered a row of heterogeneous array . The columns of heterogeneous array may include different data types based on the elements provided in the columns. For example the LastName column may be a textual data type the Sex column may be a textual data type the Age column may be a numeric data type and the Weight column may be a numeric data type. Thus the LastName and Sex columns may have the same data type i.e. a textual data type and the Age and Weight columns may have the same data type i.e. a numeric data type .

As shown in assume that client device TCE receives an indexing command from the user of client device TCE . For example assume that the user enters the command via a command line. Indexing command may include syntax such as for example y h3 5 Age Weight . Indexing command may be utilised by client device TCE to extract information from heterogeneous array . For example assume that the user wishes to extract the ages and weights of three people listed in heterogeneous array so that the user may calculate the average ages and weights of the three people. Indexing command may attempt to extract information from heterogeneous array by referencing multiple columns and one or more rows of heterogeneous array . For example indexing command may reference rows 3 to 5 e.g. 3 5 of the Age and Weight columns from heterogeneous array .

Client device TCE may determine based on indexing command whether the referenced columns of heterogeneous array include the same data type. Client device TCE may analyze elements provided in the Age and Weight columns of heterogeneous array to determine data types of the Age and Weight columns. Client device TCE may compare the determined data types to determine whether the data types match. In example the determined data types of the Age and Weight columns are the same i.e. numeric data types .

Since the determined data types match indexing command may cause client device TCE to extract rows 3 to 5 of columns Age and Weight from heterogeneous array . Client device TCE may create a homogeneous array y based on the information extracted from heterogeneous array . Homogeneous array may include homogeneous information since the information extracted from heterogeneous array has the same numeric data type. As shown in client device TCE may provide homogeneous array for display to the user. In some implementations client device may store homogeneous array in memory e.g. main memory .

As shown in the user of client device TCE may perform further processing on homogeneous array . For example the user may wish to calculate the average age and weight for the elements provided in homogeneous array . As further shown in the user may provide a command e.g. z mean h 1 to client device TCE and client device TCE may calculate the average age and weight based on the command. For example client device TCE may determine that the average age is 42.33 and that the average weight is 127.66 and may provide this information for display to the user as further indicated by reference number .

As shown in assume that the user inputs an indexing command instead of indexing command . Indexing command may reference columns of heterogeneous array that have different data types. For example indexing command may reference the Sex column e.g. a textual data type and the Age column e.g. a numeric data type of heterogeneous array . Thus client device TCE may determine that the data types of the Sex column and the Age column are different.

Since the referenced Sex column and Age column of heterogeneous array include different data types client device TCE may be unable to combine the referenced information into a homogeneous array. Thus client device TCE may generate an error message that may be displayed to the user as shown in . In some implementations error message may indicate that it is impossible to combine data from the referenced columns into a single homogeneous array since the referenced columns have different data types.

In some implementations client device TCE may display a suggestion to the user when error message is generated. For example client device TCE may suggest replacing the Sex column of heterogeneous array with the Weight column of heterogeneous array since the Weight column has a numeric data type like the Age column.

As shown in process may include receiving a heterogeneous array that includes multiple columns block . For example client device TCE may receive a heterogeneous array that includes multiple columns and one or more rows. In some implementations client device TCE may receive the heterogeneous array from server device may retrieve the heterogeneous array from memory e.g. main memory may receive the heterogeneous array from a user of client device TCE e.g. via user inputs etc. The heterogeneous array may include the features of the heterogeneous array described above in connection with . The user may instruct client device to load the heterogeneous array into TCE using a command e.g. a load command and client device may load the heterogeneous array into TCE based on the command.

As further shown in process may include receiving a command that references multiple columns of the heterogeneous array and includes data to replace information in the referenced multiple columns of the heterogeneous array block . For example client device TCE may receive an assigning command. In some implementations client device TCE may receive the assigning command from the user of client device TCE e.g. via user inputs etc. The assigning command may include syntax of a general form 

Braces may be utilized to indicate that information is to be replaced in the heterogeneous array by the data. A colon may be provided between the rows Rand Rto indicate that consecutive rows are to be replaced in the heterogeneous array and a comma may be provided between the rows Rand Rto indicate that specific rows are to be replaced in the heterogeneous array. For example 1 5 may indicate that rows 1 through 5 are to be replaced in the heterogeneous array and 1 5 may indicate that rows 1 and 5 are to be replaced in the heterogeneous array. A colon may be provided between the columns Cand Cto indicate that consecutive columns are to be replaced in the heterogeneous array and a space may be provided between the columns Cand Cto indicate that specific columns are to be replaced in the heterogeneous array. For example A C may indicate that columns A through C are to be replaced in the heterogeneous array and A C may indicate that columns A and C are to be replaced in the heterogeneous array.

In some implementations the assigning command may include additional characters different characters or differently arranged characters. For example the assigning command may include a number a vector of numbers a string an array of strings etc. In some implementations the user of client device TCE may specify a different syntax for the assigning command. For example the user may specify the assigning command by the general form hR R C C data.

The assigning command may be utilized by client device TCE to replace information e.g. data in the heterogeneous array. The assigning command may cause client device TCE to replace information in the heterogeneous array by referencing multiple columns of the heterogeneous array. For example the assigning command may reference one or more rows e.g. 1 4 of two or more columns from the heterogeneous array.

As further shown in process may include determining based on the command whether data types of the referenced columns of the heterogeneous array match data types of the data block . For example client device TCE may determine based on the assigning command whether the data types of the referenced columns of the heterogeneous array match the data types of the data provided in the assigning command. Client device TCE may analyze elements provided in each of the referenced columns to determine data types for each of the referenced columns. Client device TCE may also analyze elements provided in the data of the assigning command to determine data types associated with the data. Client device TCE may compare the data type for each referenced column with the data type for the corresponding data of the assigning command to determine whether the data types match. If the data types for the referenced columns and corresponding data of the assigning command match client device TCE may determine that the referenced columns of the heterogeneous array and the corresponding data of the assigning command include the same data types. If the data types for the referenced columns and corresponding data of the assigning command do not match client device TCE may determine that the referenced columns of the heterogeneous array and the corresponding data of the assigning command do not include the same data type.

Returning to if the data types of the referenced columns of the heterogeneous array match the data types of the data of the assigning command block SAME DATA TYPES process may include replacing based on the command the information of the referenced multiple columns with the data of the assigning command to create a modified heterogeneous array block . For example if the data types for the referenced columns and corresponding data match client device TCE may determine that the referenced columns of the heterogeneous array and the corresponding data include the same data types. Based on this determination client device TCE may replace the information in the referenced columns of the heterogeneous array with the corresponding data of the assigning command to generate a modified heterogeneous array.

In some implementations the assigning command may cause client device TCE to extract the referenced columns from the heterogeneous array. The assigning command may cause client device TCE to replace elements of the referenced columns with the corresponding data of the assigning command. Replacing the elements of the referenced columns with the corresponding data of the assigning command may create modified columns. The assigning command may cause client device TCE to return the modified columns to the heterogeneous array. Returning the modified columns to the heterogeneous array may generate the modified heterogeneous array. Other ways of replacing the information from the referenced columns of the heterogeneous array with the data of the assigning command may alternatively be used.

As further shown in process may include outputting the modified heterogeneous array block . Client device TCE may provide the modified heterogeneous array for display to the user. In some implementations client device may store the modified heterogeneous array in memory e.g. main memory .

Returning to if the data types of the referenced columns of the heterogeneous array do not match the data types of the data of the assigning command block DIFF. DATA TYPES process may include generating and or outputting an error message based on the command block . For example if the data types for the referenced columns and corresponding data of the assigning command do not match client device TCE may determine that the referenced columns of the heterogeneous array and the corresponding data of the assigning command are not of the same data type. Based on this determination client device TCE may determine that the corresponding data of the assigning command cannot be used to replace the information in the referenced columns of the heterogeneous array. Thus client device TCE may generate an error message that may be displayed to the user. In some implementations the error message may indicate that it is impossible to replace the information in the referenced columns of the heterogeneous array with the data since the referenced columns and the data have different data types.

In some implementations client device TCE may provide a suggestion to the user to facilitate replacing the information in the referenced columns of the heterogeneous array with the data. For example client device TCE may identify the data type of each column of the heterogeneous array referenced by the assigning command. Client device TCE may also identify the data types of the corresponding data of the assigning command. Assume that the assigning command references particular corresponding data that does not match the data type of a referenced column. In this situation client device TCE may identify other columns of the heterogeneous array that are of the same data type as the particular corresponding data. Client device TCE may provide a user interface to the user which allows the user to select one of the other identified columns of the heterogeneous array of the same data type to replace the one column referenced by the assigning command of the different data type.

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

As shown in assume that client device TCE receives an assigning command from the user of client device TCE . For example assume that the user enters assigning command via a command line. Assigning command may include syntax such as for example 

Client device TCE may determine based on assigning command whether the Age and Weight columns of heterogeneous array include the same data types as the data of assigning command . Client device TCE may analyze elements provided in the Age and Weight columns of heterogeneous array to determine data types of the Age and Weight columns. Client device TCE may analyze elements provided in the data of assigning command to determine data types associated with the data. Client device TCE may compare the determined data types to determine whether the data types match. In example the determined data types of the Age and Weight columns and the data of assigning command are the same i.e. numeric data types .

Since the determined data types match assigning command may cause client device TCE to replace the information in the referenced columns of heterogeneous array with the corresponding data of assigning command to generate a modified heterogeneous array h . Modified heterogeneous array may include the elements of heterogeneous array except that the age and weight of the second person is replaced with the data 47 and 150 respectively and the age and weight of the third person is replaced with the data 41 and 148 respectively. As shown in client device TCE may cause modified homogeneous array to be displayed to the user. In some implementations client device may store modified homogeneous array in memory e.g. main memory . In some implementations client device TCE may highlight e.g. with different fonts different colors etc. the corresponding data in modified heterogeneous array .

As shown in assume that the user inputs an assigning command instead of assigning command . Assigning command may reference columns of heterogeneous array that have different data types than data associated with assigning command . For example assigning command may reference the Sex column e.g. a textual data type and the Age column e.g. a numeric data type of heterogeneous array . However the data e.g. Mary and Bob of assigning command that corresponds to the Age column may include a textual data type rather than a numeric data type. Thus client device TCE may determine that assigning command references columns of heterogeneous array that have different data types than data associated with assigning command .

Based on this determination client device TCE may determine that the corresponding data cannot be used to replace the information in the referenced columns of heterogeneous array . Thus client device TCE may generate an error message that may be displayed to the user as shown in . In some implementations error message may indicate that it is impossible to replace the information in the referenced columns of heterogeneous array with the data of assigning command since the referenced columns and the data of assigning command have different data types.

In some implementations client device TCE may display a suggestion to the user when error message is generated. For example client device TCE may suggest replacing the Age column of heterogeneous array with the LastName column of heterogeneous array since the LastName column has a textual data type like the data e.g. Mary and Bob of assigning command .

Systems and or methods described herein may provide an indexing command to extract homogeneous information from heterogeneous arrays such as dataset arrays and an assigning command to replace homogeneous information provided in the heterogeneous arrays. The homogeneous information may include multiple values e.g. numeric data non numeric data etc. with the same data type or that can be converted to the same data type.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an ASIC or a FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

