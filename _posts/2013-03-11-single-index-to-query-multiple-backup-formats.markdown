---

title: Single index to query multiple backup formats
abstract: The disclosed techniques include generation of a single index table when backing up data in a first backup format to a backup storage system that uses a second backup format. Using the single index table, a query for a data item can be answered by searching the single index table. The single index table avoids having to search through multiple index tables, each corresponding to a different backup format that may be used for backing up the searched data item.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09459968&OS=09459968&RS=09459968
owner: Commvault Systems, Inc.
number: 09459968
owner_city: Tinton Falls
owner_country: US
publication_date: 20130311
---
Computer systems contain large amounts of information. This information includes personal information such as financial information customer client patient contact information business information audio visual information and much more. This information also includes information related to the correct operation of the computer system such as operating system files application files user settings and so on. With the increased reliance on computer systems to store critical information the importance of protecting information has grown. Traditional storage systems receive an identification of a file to protect and then create one or more secondary copies such as backup files containing the contents of the file. These secondary copies can then later be used to restore the original data should anything happen to the original data.

The system described herein provides techniques that can simplify data backup and recovery operations for data stored in multiple backup formats. Data storage in multiple backup formats may occur due to a backup operation being performed on one type of backup data e.g. a zip file or a snapshot into another type of backup format e.g. a tape archive or a cloud based backup or a disk array backup .

As further described in greater detail below a computer backup operation may not only back up typical user files such as documents emails pictures audio files video files etc. but also files that themselves are backup files or compressed zip files. For example a zip file on a user s hard drive may itself include multiple files compressed within the zip folder. When the zip file is backed up to e.g. a tape drive the restoration of the files included in the zip folder may be performed using a two step process first restore the zip file from the backup storage and then run an unzip application to find out a list of files contained within the zip file.

As another example snapshots which are quick captures of the state of a file system may be stored on a local drive and may get copied to a backup drive such as a tape drive. When a user wants to restore files contained within the snapshot the user may first have to restore the snapshot using a first GUI and then use a snapshot browsing GUI to locate a desired file within the snapshot.

The task of locating a user file in data stored in multiple backup formats that may be nested within each other e.g. a tape backup that contains a snapshot that contains a zip file becomes cumbersome for a system administrator because to locate a file that a user is interested in restoring the system administrator may need to open multiple windows for multiple applications programs each window allowing the administrator to browse files in one particular backup format.

Technologies described herein in some implementations simplify the backup restoration process. In some implementations during data backup a single index table called a master index table is generated for all files being backed up. In some implementations information is stored in the master index table so that in response to a search query looking up only the master index table is sufficient regardless of the backup format of the queried file to obtain information about how to locate the queries file. In some implementations during restoration a user may be able to navigate through backed up files of multiple backup formats by simply interactive with a single GUI window. These features and other techniques are further discussed below.

Various examples of the invention will now be described. The following description provides certain specific details for a thorough understanding and enabling description of these examples. One skilled in the relevant technology will understand however that the invention may be practiced without many of these details. Likewise one skilled in the relevant technology will also understand that the invention may include many other obvious features not described in detail herein. Additionally some well known structures or functions may not be shown or described in detail below to avoid unnecessarily obscuring the relevant descriptions of the various examples.

The terminology used below is to be interpreted in its broadest reasonable manner even though it is being used in conjunction with a detailed description of certain specific examples of the invention. Indeed certain terms may even be emphasized below however any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.

Aspects of the technologies described herein may be practiced in an information management environment which will now be described while referencing . As shown in the environment includes multiple computing devices that execute numerous software applications to facilitate the operations of an organization or multiple affiliated organizations such as a household corporation or other business entity a non profit organization an educational institution or a governmental agency. The computing devices may include one or more servers such as mail servers file servers database servers print servers and web servers personal computers workstations or other types of fixed computing systems such as mainframe computers and minicomputers not shown . The servers may include network attached storage NAS filers.

The environment may include virtualized computing resources such as a virtual machine provided to the organization by a third party cloud service vendor or a virtual machine running on a virtual machine host operated by the organization. For example the organization may use one virtual machine A as a database server and another virtual machine B as a mail server. The environment may also include mobile or portable computing devices such as laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc.

Of course other types of computing devices may form part of the environment . As part of their function each of these computing devices creates accesses modifies writes and otherwise uses production copies of data and metadata that are typically stored in a persistent storage medium having fast I O times. For example each computing device may regularly access and modify data files and metadata stored on semiconductor memory a local disk drive or a network attached storage device. Each of these computing devices may access data and metadata via a file system supported by an operating system of the computing device.

The environment may also include hosted services that provide various online services to the organization or its constituent members e.g. the organization s departments employees independent contractors etc. such as social networking services e.g. Facebook Twitter Pinterest hosted email services e.g. Gmail Yahoo Mail Hotmail or hosted productivity applications or other hosted applications e.g. Microsoft Office 365 Google Docs Salesforce.com . Hosted services may include software as a service SaaS platform as a service PaaS application service providers ASPS cloud services and all manner of delivering computing or functionality via a network. As it provides services to users each hosted service may generate additional hosted data and metadata that is associated with each user. For example Facebook may generate and store photos wall posts notes videos and other content that are associated with a particular Facebook user s account.

The organization directly or indirectly employs an information management system to protect and manage the data and metadata used by the various computing devices in the environment and the data and metadata that is maintained by hosted services on behalf of users associated with the organization. One example of an information management system is the CommVault Simpana system available from CommVault Systems Inc. of Oceanport N.J. The information management system creates and manages non production copies of the data and metadata to meet information management goals such as permitting the organization to restore data metadata or both data and metadata if an original copy of the data metadata is lost e.g. by deletion corruption or disaster or because of a service interruption by a hosted service allowing data to be recovered from a previous time complying with regulatory data retention and electronic discovery e discovery requirements reducing the amount of data storage media used facilitating data organization and search improving user access to data files across multiple computing devices and or hosted services and implementing information lifecycle management ILM or other data retention policies for the organization. The information management system may create the additional non production copies of the data and metadata on any suitable non production storage medium such as magnetic disks magnetic tapes other storage media such as solid state storage devices or optical disks or on cloud data storage sites e.g. those operated by third party vendors . Further details on the information management system may be found in the assignee s U.S. patent application Ser. No. 12 751 850 filed Mar. 31 2010 entitled DATA OBJECT STORE AND SERVER FOR A CLOUD STORAGE ENVIRONMENT INCLUDING DATA DEDUPLICATION AND DATA MANAGEMENT ACROSS MULTIPLE CLOUD STORAGE SITES now U.S. Patent Publication Number 2010 0332456 which is hereby incorporated by reference herein in its entirety.

The information management system accesses or receives copies of the various production copies of data objects and metadata and via an information management operation such as a backup operation archive operation or snapshot operation creates non production copies of these data objects and metadata often stored in one or more non production storage mediums different than the production storage medium where the production copies of the data objects and metadata reside. A non production copy of a data object represents the production data object and its associated metadata at a particular point in time non production objects A C . Since a production copy of a data object or metadata changes over time as it is modified by an application hosted service or the operating system the information management system may create and manage multiple non production copies of a particular data object or metadata each representing the state of the production data object or metadata at a particular point in time. Moreover since a production copy of a data object may eventually be deleted from the production data storage medium and the file system from which it originated the information management system may continue to manage point in time representations of that data object even though a production copy of the data object itself no longer exists.

For virtualized computing devices such as virtual machines the operating system and applications A D may be running on top of virtualization software and the production data storage medium may be a virtual disk created on a physical medium such as a physical disk. The information management system may create non production copies of the discrete data objects stored in a virtual disk file e.g. documents email mailboxes and spreadsheets and or non production copies of the entire virtual disk file itself e.g. a non production copy of an entire .vmdk file .

Each non production object A C may contain copies of or otherwise represent more than one production data object. For example non production object A represents three separate production data objects C and C represented as C and respectively . Moreover as indicated by the prime mark a non production object may store a representation of a production data object or metadata differently than the original format of the data object or metadata e.g. in a compressed encrypted deduplicated or otherwise optimized format. Although shows that a single production data object e.g. C and its associated data object metadata e.g. Meta11 are represented by the contents of only a single non production object e.g. A the entire contents of a single production data object and or its metadata at a particular point in time may instead span across numerous non production objects. Also a single non production object may contain copies of or otherwise represent production data objects that originated from different computing devices.

Non production copies include backup copies archive copies and snapshot copies. Backup copies are generally used for shorter term data protection and restoration purposes and may be in a native application format or in a non native format e.g. compressed encrypted deduplicated and or otherwise modified from the original application format . Archive copies are generally used for long term data storage purposes and may be compressed encrypted deduplicated and or otherwise modified from the original application format. In some examples when an archive copy of a data object is made a logical reference or stub may be used to replace the production copy of the data object in the production storage medium . In such examples the stub may point to or otherwise reference the archive copy of the data object stored in the non production storage medium so that the information management system can retrieve the archive copy if needed. The stub may also include some metadata associated with the data object so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object. A snapshot copy represents a data object at a particular point in time. A snapshot copy can be made quickly and without significantly impacting production computing resources because large amounts of data need not be copied or moved. A snapshot copy may include a set of pointers derived from the file system or an application where each pointer points to a respective stored data block so collectively the set of pointers reflect the storage location and state of the data object at a particular point in time when the snapshot copy was created. In copy on write if a block of data is to be deleted or changed the snapshot process writes the block to a particular data storage location and the pointer for that block is now directed to that particular location. The set of pointers and or the set of blocks pointed to by a snapshot may be stored within the production data storage medium .

Non production copies of a data object or metadata may be distinguished from a production copy of a data object or metadata in several ways. First a non production copy of a data object is created to meet the different information management goals described above and is not directly used or modified by applications A D hosted services or the operating system . Second a non production copy of a data object is stored as one or more non production objects that may have a format different from the native application format of the production copy of the data object and thus often cannot be directly used by the native application or a hosted service without first being modified. Third non production objects are often stored on a non production storage medium that is inaccessible to the applications A D running on computing devices and hosted services . Also some non production copies may be offlline copies in that they are not readily available e.g. not mounted tape or disk. Offline copies include copies of data that the information management system can access without any human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the information management system can access only with at least some human intervention e.g. tapes located at an offsite storage site .

The information management system also generates information management data such as indexing information which permit the information management system to perform its various information management tasks. As shown in a computing device may include one or more data management agents that provide client side functions for the information management system.

The storage manager may be a software module or other application that coordinates and controls information management operations performed by one or more information management cells to protect and control copies of non production data objects and metadata. As shown by the dashed lines and the storage manager may communicate with some or all elements of the information management cell such as the media agents and computing devices to initiate and manage backup operations snapshot operations archive operations data replication operations data migrations data distributions data recovery and other information management operations. The storage manager may control additional information management operations including ILM deduplication content indexing data classification data mining or searching e discovery management collaborative searching encryption and compression. Alternatively or additionally a storage manager may control the creation and management of disaster recovery copies which are often created as secondary high availability disk copies using auxiliary copy or replication technologies.

The storage manager may include a jobs agent a management agent a network agent and an interface agent all of which may be implemented as interconnected software modules or application programs. The jobs agent monitors the status of information management operations previously performed currently being performed or scheduled to be performed by the information management cell . The management agent provides an interface that allows various management agents in multiple information management cells or in a global storage manager to communicate with one another. This allows each information management cell to exchange status information routing information capacity and utilization information and information management operation instructions or policies with other cells. In general the network agent provides the storage manager with the ability to communicate with other components within the information management cell and the larger information management system e.g. via proprietary or non proprietary network protocols and application programming interfaces APIs including HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs hosted service provider APIs . The interface agent includes information processing and display software such as a graphical user interface GUI an API or other interactive interface through which users and system processes can retrieve information about the status of information management operations or issue instructions to the information management cell and its constituent components. The storage manager may also track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases within its information management cell or another cell to be searched in response to certain queries.

The storage manager may also maintain information management data such as a database of management data and policies. The database may include a management index that stores logical associations between components of the system user preferences user profiles that among other things map particular information management users to computing devices or hosted services management tasks or other useful data. The database may also include various information management policies which are generally data structures or other information sources that each includes a set of criteria and rules associated with performing an information management operation. The criteria may be used to determine which rules apply to a particular data object system component or information management operation an may include 

As noted above each computing device may include one or more data management agents . Each data management agent is a software module or component that helps govern communications with other system components. For example the data management agent receives commands from the storage manager and sends to and receives from media agents copies of data objects metadata and other payload as indicated by the heavy arrows . Each data management agent accesses data and or metadata stored in a production data storage medium and arranges or packs the data and metadata in a certain format e.g. backup or archive format before it is transferred to another component. Each data management agent can also restore a production copy of a data object or metadata in a production data storage medium from a non production copy. A data management agent may perform some functions provided by a media agent which are described further herein such as compression encryption or deduplication. Each data management agent may be specialized for a particular application e.g. a specified data management agent customized to handle data generated or used by Exchange by Microsoft Corp. . Alternatively or additionally a more generic data management agent may handle data generated or used by two or more applications.

Each computing device may also include a data distribution and live browsing client module herein distribution client module . The distribution client module is responsible for inter alia associating mobile devices and or hosted service accounts with users of the information management system setting information management policies for mobile and other computing devices pushing data objects to a distribution module for distribution to other computing devices providing unified access to a user s data via an interface and providing live browsing features. The various functions of the distribution client module are described in greater detail herein.

A media agent which may be implemented as a software module conveys data as directed by the storage manager between a computing device or hosted service and one or more non production storage mediums . Each media agent may control one or more intermediary storage devices such as a cloud server or a tape or magnetic disk library management system to read write or otherwise manipulate data stored in a non production storage medium . Each media agent may be considered to be associated with a storage device and its related non production storage media if that media agent is capable of routing data to and storing data in the storage media managed by the particular storage device. A media agent may communicate with computing devices hosted services storage devices A D and the storage manager via any suitable communications path including SCSI a Storage Area Network SAN a Fibre Channel communications link or a wired wireless or partially wired wireless computer or telecommunications network including the Internet.

To perform its functions the media agent may include a media file system module a data classification module a content indexing module a deduplication module an encryption module a compression module a network module a distribution module and a media agent database . The media file system module is responsible for reading writing archiving copying migrating restoring accessing moving sparsifying deleting sanitizing destroying or otherwise performing file system operations on various non production storage devices of disparate types. The media file system module may also instruct the storage device to use a robotic arm or other retrieval means to load or eject certain storage media such as a tape.

The network module permits the media agent to communicate with other components within the system and hosted services via one or more proprietary and or non proprietary network protocols or APIs including cloud service provider APIs virtual machine management APIs and hosted service provider APIs . The deduplication module performs deduplication of data objects and or data blocks to reduce data redundancy in the cell. The deduplication module may generate and store data structures to manage deduplicated data objects such as deduplication tables in the media agent database . The encryption module performs encryption of data objects data blocks or non production objects to ensure data security in the cell. The compression module performs compression of data objects data blocks or non production objects to reduce the data capacity needed in the cell.

The content indexing module analyzes the contents of production copies or non production copies of data objects and or their associated metadata and catalogues the results of this analysis along with the storage locations of or references to the production or non production copies in a content index stored within a media agent database . The results may also be stored elsewhere in the system e.g. in the storage manager along with a non production copy of the data objects and or an index cache. Such index data provides the media agent or another device with an efficient mechanism for locating production copies and or non production copies of data objects that match particular criteria. The index data or other analyses of data objects or metadata may also be used by the data classification module to associate data objects with classification identifiers such as classification tags in the media agent database or other indices to facilitate information management policies and searches of stored data objects.

The distribution module may be a set of instructions that coordinates the distribution of data objects and indices of data objects. The distribution may occur from one computing device to another computing device and or from hosted services to computing devices . As a first example the distribution module may collect and manage data and metadata from hosted services or mobile devices . As another example the distribution module may synchronize data files or other data objects that are modified on one computing device so that the same modified files or objects are available on another computing device. As yet another example the distribution module may distribute indices of data objects that originated from multiple computing devices and or hosted services so a user can access all of their data objects through a unified user interface or a native application on their computing device. The distribution module may also initiate live browse sessions to permit communications between different computing devices so that the devices can interchange data and metadata or so the devices can provide computing resources such as applications to each other.

Computer users often back up or copy files from their computers and store the backed up or copied files as archives. In a managed network e.g. a corporate or a small business network data backup copy operations are typically controlled by system administrators. Using tools such as software modules and dedicated backup storage servers system administrators typically perform backups of user computers on a periodic basis e.g. every day every week etc. . While the following description uses backup or like terms as a shorthand all manner of secondary copies are contemplated and encompassed by the present document. 

The periodic backups using dedicated backup storage servers often take up valuable computational and bandwidth resources in a local area network. One solution to alleviate the network bandwidth utilization is to perform periodic backup of computer files locally at each user s computer. Such backups which may use snapshots of the file system may be performed in a short time e.g. few seconds and store information about user and system directories and files on the user s computer at the time the snapshot is taken or depending on the type of snapshot store information regarding blocks of data that may have changed. Snapshots may be abbreviated listing of files and directories present on the local computer at the time the snapshot is taken. Further details on snapshots may be found in the assignee s U.S. application Ser. No. 12 979 101 filed Dec. 27 2011 entitled SYSTEMS AND METHODS FOR PERFORMING DATA MANAGEMENT OPERATIONS USING SNAPSHOTS incorporated by reference in its entirety herein.

Many vendors offer products for the above described snapshot operation or some variations thereof. Some examples include QSnap by CommVault volume shadow copying services offered with Microsoft Windows XP Vista and 2003 operating systems NetWare software by Novell products from EMC corporation NetApp Snapshot technology Hitachi Shadowlmage and so on. Some hard drive manufacturers also offer a way for taking hardware based snapshot of the data stored on a hard drive.

While these snapshot technology solutions offers the benefit of making quick and frequent backups of local data at a computer these solutions create operational problems and inefficiencies that remain unaddressed by the present day solutions. For example if multiple snapshot technologies are used on different client computers in a network an additional overhead of deploying multiple snapshot browsing applications and training information technology IT personnel to be able to use these multiple different applications each possibly using its own proprietary snapshot storage and index format is incurred by an organization. Second the snapshot and the corresponding index table that allows a user to browse through a snapshot to see names of the directories and files included in the snapshot are both typically stored on the client computer. Therefore when a computer goes down the snapshot data becomes unrecoverable and unbrowsable. Even when local snapshots from client computers are backed up to an external storage system data browsing and recovery may be difficult because snapshots often use pointers and diff data and it may not be possible to restore complete data files without recovering multiple snapshots one at a time and browsing individually through the multiple snapshots to locate the base file and all diff snapshots.

The use of a single index to query multiple backup formats overcomes the above discussed problems and others. The disclosed techniques streamline the operations of data backups and browsing and restoring backed up data. For example when a user or a system administrator is looking for a particular file from a client computer by browsing backups the user may only have to look up a single index that holds information about where the file can be found on the backup system either in its primary backup format or in its snapshot backup format or both.

The multiple backup formats may be backup device specific or may be due to different backing up techniques. In some implementations a single index table can be created so that the backed up data irrespective of the backup format can be stored or accessed using the single access table. The disclosed techniques offer several advantages over current practices. For example data can be restored by looking up a single index thereby reducing the amount of menus that an operator has to navigate through to browse through backup data and restore data files. In another advantageous aspect the use of a single index eliminates an intermediate step during a backup or restoration stage of having to stage data in an intermediate formats thereby reducing the amount of memory and processor power used during the backup or restoration operation. These and other advantages are further disclosed below.

Snapshot technology is briefly discussed in this patent document for improving a reader s understanding of the claimed subject matter but the discussion does not in any way limit the scope of the claimed technology. As previously described a snapshot can include a picture of data storage at a given point in time. For example some snapshots only reflect changed blocks in a data storage device e.g. on a disk . Alternatively a snapshot can include a listing of the directory file structure on a storage device at a given point in time and it is this type of snapshot that is generally described below though all types of snapshots may be used.

A snapshot may include only file names and directory names or may include partial data for some of the files e.g. modifications since the last snapshot or may include data underlying some or all files in the snapshot. In other words some snapshots are browsable only to see which files and directories were present on the hard drive at a given time while other snapshots may be browsable to not only see the folders but also access contents of the files. In some cases when file content is only incrementally available as changes from previous stored versions multiple snapshots may have to be browsed for locating or creating a complete version of a file. Further details may be found in the assignee s U.S. application Ser. No. 12 979 101 filed Dec. 27 2011 entitled SYSTEMS AND METHODS FOR PERFORMING DATA MANAGEMENT OPERATIONS USING SNAPSHOTS.

As previously described various vendors offer software only hardware only or combined hardware software solutions for taking snapshots of the above described production data. Each vendor typically stores the snapshots and the associated indexing information in a unique vendor proprietary format. Furthermore all the snapshot and indexing formats are different from storage and indexing formats for other storage media such as tape drives optical disks and so on.

The snapshot module may be programmed or controlled by a system administrator to take snapshots of the production data from time to time e.g. once every hour . The production data may include snapshot storage in which one or more previously captured snapshots are stored. At the time of taking the snapshot a snapshot index S index may also be generated and stored with the snapshot in the snapshot storage or elsewhere in the system. The S index may store multiple snapshot index tables each corresponding to a previously captured snapshot. For example in some implementations the S index may be stored via a media agent. In some implementations the S index may include a catalog of all items files folders etc. corresponding to the snapshot. The S index may enable keeping track of file names file size last modified access authorization etc. for the files included in the snapshot.

The backup module may from time to time perform backup operation on the data stored on the client computer including production data and snapshot data . In some implementations the production data may be indistinguishable from the snapshot data to the backup module . In other words in some implementations the snapshot data and the corresponding S index may look like just another file in the production data . The backup module may transfer the data from the client computer over the network to the external backup system . During the backup operation the backup system may create backed up production data and backed up snapshot data with the snapshot data appearing to be a file in the production data. The backup system may also produce an index file cataloging the files stored on production and snapshot data .

A P index file resides on or is controlled by a media agent i.e. the media agent that performed the corresponding backup operation . The snapshot and backup operations may be centrally controlled by a computer that itself may not store actual indexes from all client computers. A central database may not have sufficient resources to store indexing information for thousands of clients and millions of files on the client computers. A given media agent may include index information for multiple clients similarly a given client s index information may be available on multiple different media agents as defined by storage policy. Some implementations may share indexes among different media agents because they use the same format of indexing e.g. index cache server . The various client indexes may each store data on all files stored on or managed by the client.

Some present day systems have different index tables for different media e.g. one format for tape another format for hard drive and so on. However the above described P index may be stored in a backup media agnostic format. For example copies of backup e.g. a copy from a tape drive to a disk thus may have the same index. Maintaining media agnostic indexes avoids regeneration of index data during the copying operation.

As previously described snapshots may be created in a variety of formats that are vendor dependent. Typically each vendor may also provide a software application or a snap format specific GUI that can be used to display files stored in a snapshot back to a user. These typical S index formats are different from the format of the P index generated using data backup to the external backup system.

When the operation finds the snapshot during the search operation the operation may either notify the operator that data having another backup format as found and request further command by the operator about how to browse the snapshot . Alternatively the operation may also launch a browsing operation for the snapshot . A second GUI window may be launched for the operator to browse through the files in the snapshot using the corresponding S index . The operation may stage the snapshot into a second copy that is used by the GUI2 for browsing by the operator .

While as described above the operation enables restoration and browsing of files stored in multiple backup formats the presence of multiple backup files e.g. multiple snapshots or nested backup files in different formats may make the process of file browsing and producing results of search queries cumbersome to the operator because the operator may need to interact with multiple GUIs etc. each of which having a different format and menu structure.

Thus as an alternative depicts a system in which data is backed up using a single index multiple backup formats to permit among other things easier browsing searching. Compared to system depicted in the system includes a backup module that creates an SP index during a backup operation. The SP index may contain a single master table that provides a catalog of files stored in backed up production data and backed up snapshot data that may be included within the data .

During a backup operation when transferring data from the client computer including production data and data in other backup formats such as snapshot storage the backup module may create or facilitate creation of a single master index table called SP index table. The SP index table described in greater detail below may include entries corresponding to data items such as files and e mails being backed up to the backed up production data which also includes backed up snapshot data . In some implementations during data transfer to the external backup system the backup module may determine that a next block of data being backed up corresponds to a backup archive in another format e.g. a zipped file or S indexed snapshot data . Upon this determination the backup module may use the corresponding indexes e.g. S index or zip index to populate entries within the SP index with information about what files are included in the backup archive of another format and how these files can be accessed only using the entry in the SP index. Alternatively in some embodiments the task of building the SP index may be performed at a computer running the above described media agent. The SP index may include data regarding all non production copies and may be normalized to permit access and display by the single GUI

Using GUI the operation may present a catalog of data items listed in the SP index to the operator . Because the SP index is generated by listing all files regardless of their backup format the single GUI advantageously avoids the need for multiple GUIs for the operator to browse search through the backed up data items.

The table may include the following columns. The column may list various data items for which indexing information is included in table . The data items may be e.g. files individual e mails or other logically independent data in which a user may be interested. In some implementations the same data item may be listed twice due to its inclusion in multiple backup formats e.g. once in a first backup format such as a zip folder and once in a second backup format such as the backup format used by the external backup storage system .

The table may include a column in which version information associated with each data item may be listed. In column archive file identification may be listed e.g. a magnetic tape ID or GUID . In column a logical offset to the data item within the listed archive file may be provided e.g. a tape offset value . In column an Access Control List ACL may be provided listing which users are authorized to access the corresponding data items. In column hierarchy information for the data item may be provided. In column attributes such as file size last modified creation date etc. may be listed.

The format information column may provide additional information about data items that are stored in multiple backup formats. In some implementations when a data items is backed up from a primary location e.g. production data to a backup storage system the format info column may not include any entry or may simply include a value e.g. zero indicating that the data item is stored in the backup storage using traditional indexing. For a data item that is stored in the backup storage as being a part of data stored in another backup format the column may provide additional information about the level of nesting of backup formats which backup formats are used where to locate the data item within the archive and so on.

In some implementations the archive file identification column may indicate whether the data item is stored in a multiple backup format. For example archive file IDs in a certain range may indicate that the data item is available in a zip file stored using the primary data backup format.

In some implementations the table may be organized in a format that is very similar to the P index format used by the backup and restore operations. This can advantageously simplify the implementation of GUI because GUI may look and feel very similar to GUI . The entries in the table that provide the enhanced information about backup format may be grouped and appended to the primary index entries. In some implementations for a data item in a snapshot that is backed up on the backup storage system the format info may include a unique identification of a piece of data storage media e.g. tape GUID unique ID of the snapshot e.g. a time stamp and a logical offset to the particular data item within that snapshot. The format info may also include information about whether the data item can be fully recovered by itself or whether the data item is a diff entry in a snapshot and a full recovery of the data item requires access to additional data items. The format info may include additional information about the base file from which this diff data item can be recovered. Alternatively this information may be listed in the hierarchy info column . Further details may be found in the assignee s U.S. application Ser. No. 12 979 101 filed Dec. 27 2011 entitled SYSTEMS AND METHODS FOR PERFORMING DATA MANAGEMENT OPERATIONS USING SNAPSHOTS.

One of skill in the art will appreciate that the techniques described herein can be advantageously used to manage snapshot operations on a client computer by backing up the snapshots to a secondary backup system such as a tape drive without sacrificing the ease and efficiency of restoration. After a snapshot is taken at some later time the snapshot may be moved to a tape. As a part of moving to tape an SP index can be created. The SP index table can be used to browse data items stored within the snapshot while the snapshot is stored on tape. In some implementations when a snapshot is created an associated handle is created and stored in a central database. At some later time a media agent may write the snapshot to a tape. The snapshot can be taken and made available for read write access only to a pre identified set of media agents from all media agents that have access to the tape drive. During the snapshot generation no S index is generated thereby reducing the use of CPU cycles during the snapshot operation.

In conventional systems when a computer went down the operator may be still able to access the S index for the computer and look at the file names that were stored in snapshots on the computer. However because the computer is inaccessible the operator could not recover or read the actual data items listed in the S index. In other words when a computer broke down the S index for the snapshots stored on the computer had no or minimal value. By generating SP indexes only for snapshots that are backed up on a secondary storage medium e.g. a tape drive the presently disclosed techniques optimally use computer resources to generate indexes that are useful in data recovery even when the computer from which these indexes are generated has gone down.

At a first backup operation is performed to generate first backup data in a first backup format without generating a corresponding index for browsing the first backup data in the first backup format. In some implementations the first backup operation is performed by instructing a snapshot module to take a snapshot to generate the first backup data. Alternatively or additionally the first backup operation includes taking a snapshot and the second backup operation comprises copying the snapshot to a secondary backup device.

The data items in the index table may include e.g. a name or an identifier for the data item. For example when the data item is a file the index table entry may include either the file name or a unique ID associated with the file. As another illustrative example the data item may corresponding to a particular e mail item in a user s mail box and the data item may be listed using a unique identifier number or a unique identifier string for the e mail item e.g. from to and a time stamp .

Various techniques may be used to identify that a data item belongs to the second backup format. For example in some embodiments a set of archive file IDs is pre defined as indicating that the data item is stored in the second backup format. In some implementations e.g. of 8K possible archive IDs 8 1024 8192 IDs in the range 2K to 4K 2048 to 4095 decimal may be used to indicate that the corresponding data items are stored in a backed up snapshot IDs in the range 4K to 6K 4096 to 6143 decimal may be pre defined to indicate data items backed up in the cloud backup format and so on.

In some implementations an additional entry may be used for each data item e.g. an additional column in table depicted in to indicate the corresponding second backup format if any . In some implementations the entry for a data item may also include a pointer to a second index table that includes information about how to locate the data item within the backup data in the second storage format.

At a second backup operation is performed on the first backup data in the first backup format to generate a second backup data in a second backup format.

At an index table comprising entries for one or more data items from the first backup data stored in the second backup data in the second backup format is generated. Each entry including first access information for a data item to allow access to the data item in the second backup data and second access information to allow access to the data item in the first backup data thereby allowing direct access to the data item based on information from the index table.

At a search query from a user is received at a computer. The search query is for a data item stored in the backup storage system. The search query may be received through an operator interface at a system administrator s computer or may be received from a user computer from which the data item was originally backed up. In various embodiments the backup storage system may include a tape drive a disk array or a cloud based storage system and so on.

At the process looks up an entry corresponding to the data item in an index table. In some implementations e.g. index table disclosed previously the index file includes an archive file identification number that is pre associated with the second backup format.

At based on the entry the process determines that the selected data item corresponds to backup data of a second backup format.

At the process performs a restoration operation to restore the data item from the first backup format to a format for presentation to the user.

In some implementations the process may perform the restoration operation by performing first and second data staging operations. In the first data staging operation data from the first backup format is staged into the second backup format. The process stores the data for use by the second data staging operation. The second staging operation stages the data from the second backup format to a presentation format for the user.

As an illustrative example in some implementations snapshot data representing a state of files on a client computer may originally be stored on a tape drive. During restoration the process of restoration may first stage the data from the tape format to a temporary storage space on a computer e.g. on disk or in solid state memory . The conversion from the tape format to the temporary storage space may include e.g. regenerating data by removing de duplication. The restoration process may then convert the temporarily stored data into a presentation format suitable for the GUI used by the user. For example the presentation format may enable the user to search file names using a search window may provide an expandable file listing or provide a flat list of all files restored.

Those of ordinary skill in the relevant art will appreciate from the detailed description above that several techniques are now disclosed for backing up and restoring data items that are stored in multiple nested backup formats. In one advantageous aspect the disclosed technique can be used to restore data stored in multiple backup formats using a single index table or a single graphical user interface GUI . Those of ordinary skill in the relevant art will also appreciate that the disclosed techniques can be used to provide search results to a single query for a data item in a backup storage even when the data item may be stored in one of many possible backup formats or may be stored in nested backup formats.

The disclosed and other embodiments modules and the functional operations described in this document can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this document and their structural equivalents or in combinations of one or more of them. The disclosed and other embodiments can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more them. The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a standalone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this document can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of nonvolatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling or connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above Detailed Description of examples of the invention is not intended to be exhaustive or to limit the invention to the precise form disclosed above. While specific examples for the invention are described above for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative implementations may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified to provide alternative or subcombinations. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed or implemented in parallel or may be performed at different times. Further any specific numbers noted herein are only examples alternative implementations may employ differing values or ranges.

The teachings of the invention provided herein can be applied to other systems not necessarily the system described above. The elements and acts of the various examples described above can be combined to provide further implementations of the invention. Some alternative implementations of the invention may include not only additional elements to those implementations noted above but also may include fewer elements.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the invention in light of the above Detailed Description. While the above description describes certain examples of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in its specific implementation while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific examples disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed examples but also all equivalent ways of practicing or implementing the invention under the claims.

To reduce the number of claims certain aspects of the invention are presented below in certain claim forms but the applicant contemplates the various aspects of the invention in any number of claim forms. For example while only one aspect of the invention is recited as a means plus function claim under 35 U.S.C sec. 112 sixth paragraph other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 6 will begin with the words means for but use of the term for in any other context is not intended to invoke treatment under 35 U.S.C. 112 6. Accordingly the applicant reserves the right to pursue additional claims after filing this application to pursue such additional claim forms in either this application or in a continuing application.

