---

title: Associated information propagation system
abstract: An associated information system is provided that propagates visibility of associated information. The associated information system traces a data lineage of a data warehouse. The associated information system further identifies an association between a primary data element and an associated object, where the association between the primary data element and the associated object is identified as a primary link. The associated information system further stores a first associated object mapping system record within an associated object mapping system table that represents the primary link. The associated information system further identifies an association between a secondary data element and the associated object using the data lineage, where the association between the secondary data element and the associated object is identified as a secondary link, and where the secondary data element is related to the primary data element within the data lineage. The associated information system further stores a second associated object mapping record within the associated object mapping system table that represents the secondary link.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09063998&OS=09063998&RS=09063998
owner: Oracle International Corporation
number: 09063998
owner_city: Redwood Shores
owner_country: US
publication_date: 20130314
---
This application claims priority of U.S. Provisional Patent Application Ser. No. 61 715 428 filed on Oct. 18 2012 the subject matter of which is hereby incorporated by reference.

One embodiment is directed to a computer system and more particularly to a computer system that manages data.

A data warehouse can be used to store data used for reporting and analysis. A computer system can collect data from multiple distributed sources and store the integrated data in data models within the data warehouse. Users can apply transformations to the data in preparation for data review data analysis and data mining based on the stored data. Further the data can often be associated with associated information such as comments error reports tags and flags state information.

One embodiment is a system that propagates visibility of associated information. The system traces a data lineage of a data warehouse including one or more data tables. The system further stores a first associated object mapping system record within an associated object mapping system table that represents an association between a primary data element of the data lineage and an associated object where the association between the primary data element and the associated object is identified as a primary link. The system further identifies an association between a secondary data element and the associated object using the data lineage where the secondary data element is related to the primary data element within the data lineage. The system further stores a second associated object mapping system record within the associated object mapping system table that represents the association between the secondary data element of the data lineage and the associated object and that represents an association between the primary data element and the secondary data element and where the association between the secondary data element and the associated object is identified as a secondary link.

In one embodiment a system is provided that can provide a data lineage tracing through a pathway of one or more transformations performed on a set of data that can be stored within a data warehouse where the set of data is stored within one or more tables where each table includes one or more data records. A transformation or data transformation is a conversion of one or more data records of a first format into one or more data records of a second format where a data record can include one or more data values. For a given target data element the system can identify a set of source data elements that produced the target data element as well as a path from the set of source data elements to the target data element where a data element includes a data value stored in a column of a data record. Similarly for a given source data element the system can identify an exact set of target data elements that are derived from the source data element as well as a path from the source data element to each of the target data elements. Thus the system can provide data lineage tracing information in addition to the stored data within the data warehouse to further facilitate an in depth analysis of the stored data. In certain embodiments the stored data within the data warehouse can be stored within one or more data records and the data lineage tracing information can be stored within one or more system records. As defined here a data record can be any type of record that stores data of the data warehouse and a system record can be any type of record that stores data lineage tracing information.

According to the embodiment in order to trace data lineage from a source data element to a target data element and vice versa the system can store the following data lineage tracing information for each transformation a one or more metadata mappings from one or more columns in one or more source table definitions to each column in a target table of a transformation identified as column mapping data which is metadata information regarding the data reorganization carried out by the transformation b one or more mappings from one or more actual data records in one or more source tables to each actual data record in a target table populated by the execution of a transformation identified as record mapping data and c additional data lineage tracing information specific to the transformation such as the type of the transformation. The column mapping data can be stored when a transformation is defined or it can be stored to describe the behavior of an existing transformation program. Such transformation column mapping data can include a a source table and source column b a target table and target column c a transformation type and d additional information required for the specific transformation. Record mapping data associated with data records processed by a transformation can be stored when a transformation is executed. The record mapping data can include a the identity of a source data record b the identity of the target data record and c additional information for the specific transformation. The identity of a data record can be a single column or can include multiple columns whose value s uniquely identify the data record within the data table also known as a primary or unique key. According to the embodiment each data record in a target table of a transformation can store an identity for a source data record that provided the data for one or more columns in the transformation for that target data record where this identity is identified as a source key. In certain embodiments these identifying values can be combined into a single value or surrogate source key that can be used to identify the data record. In certain embodiments the surrogate key can include additional information regarding the transformation used to transform the source data record into the target data record. In situations where a target data record contains data from multiple source data records the target table can be extended with an appropriate number of columns so that the target data record can store an appropriate number of source surrogate keys. The system can then store the relationships between the one or more source surrogate key columns in the target table that hold the record mapping data and the target columns associated with the corresponding source tables stored as the column mapping data. This combined data can be used by the system to provide a source or target data lineage trace for a data element.

In another embodiment a system is provided that can leverage data lineage tracing information to support the visibility of associated information or associated objects that are linked to data elements and to propagate the associated information i.e. associated objects to related source data elements and target data elements for display and access. The system can also support the export of associated information i.e. associated objects to an external system through a path of transformations within the data lineage to an external source for the data.

According to the embodiment an associated object can be any associated information i.e. any information other than the data element that the associated object is associated with or any other data element in the data warehouse that is already associated by data lineage that is associated with a data element stored within the data warehouse. One type of an associated object is an operational object. One or more associated objects can also be identified as associated information. An example of an associated object is a discrepancy. A discrepancy is an indication that one or more characteristics of the data element deviate from an expected characteristic. Such a deviation can be human detected or machine detected based on one or more data driven rules. Further a discrepancy can be created manually by a user of a system or can be created automatically by the system for example as a result of a validation of the data. An example of a discrepancy is an error report. Other examples of associated objects can include but are not limited to a comment a status flag a state indicator a tag an image a recording a file a link and a document. A comment is a collection of text entered by a user that pertains to the data element. A status flag is an indication of a status of the data element. A state indicator is an indication of a state of the data element. A tag is a word or phrase that pertains to the data element. An image is an image that pertains to the data element. A recording is a recording of any audio or video that pertains to the data element. A file is a computer file that pertains to the data element. A link is a Hypertext Markup Language HTML link that pertains to the data element. A document is an external document that pertains to the data element. An associated object may be linked to either a data element or to an entire data record.

According to the embodiment the system can store links between associated objects and the data elements or data records associated with the associated object. The data element or data record where the associated object was initially created or originally associated as the associated object can be a pre existing associated object can be marked as a primary link. The links generated by the system to provide visibility of the associated object within the data lineage including both upstream of the data element or data record and downstream of the data element or data record can be marked as secondary links. Thus according to the embodiment an associated object such as a discrepancy can be visible both upstream of the data element or data record and downstream of the data element or data record within the data lineage. To provide this visibility the system can a store a primary link between the associated object and the data element or data record b trace source and target lineage of the data element or data record c store one or more secondary links between the associated object and each data element in the source and target trace from the primary data element and d provide both primary and secondary link information to a user interface for display of associated object visibility. Further the links generated by the system can be used to obtain direct access to an associated object from an upstream or downstream data element as opposed to traversing a data lineage to detect the existence of the associated object.

A computer readable medium may be any available medium that can be accessed by processor . A computer readable medium may include both a volatile and nonvolatile medium a removable and non removable medium a communication medium and a storage medium. A communication medium may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any other form of information delivery medium known in the art. A storage medium may include RAM flash memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disc read only memory CD ROM or any other form of storage medium known in the art.

Processor can also be operatively coupled via bus to a display such as a Liquid Crystal Display LCD . Display can display information to the user. A keyboard and a cursor control device such as a computer mouse can also be operatively coupled to bus to enable the user to interface with system .

According to one embodiment memory can store software modules that may provide functionality when executed by processor . The modules can include an operating system an associated information propagation module as well as other functional modules . Operating system can provide an operating system functionality for system . Associated information propagation module can provide functionality for propagating visibility of associated information as will be described in more detail below. In certain embodiments associated information propagation module can comprise a plurality of modules where each module provides specific individual functionality for propagating visibility of associated information. System can also be part of a larger system. Thus system can include one or more additional functional modules to include the additional functionality. For example functional modules may include modules that provide additional functionality such as a module of the Oracle Life Sciences Data Hub product from Oracle Corporation. In one embodiment functional modules may include a data lineage module that can provide functionality for tracing a data lineage as will be described in more detail below.

Processor can also be operatively coupled via bus to a database . Database can store data in an integrated collection of logically related data records system records or data files. Database can be an operational database an analytical database a data warehouse a distributed database an end user database an external database a navigational database an in memory database a document oriented database a real time database a relational database an object oriented database a data management workbench or any other database known in the art.

According to the embodiment data lineage propagation module can produce record mapping data column mapping data and associated object mapping data . As previously described record mapping data includes a source surrogate key i.e. an identity of a source data record that is stored in a data record in a target table of a transformation. As also previously described column mapping data includes a source table and column of a transformation a target table and column of the transformation a transformation type and any additional information required for the transformation. Further column mapping data can be derived from a transformation definition. Finally as also previously described associated object mapping data includes links between associated objects and the data elements or data records associated with the associated object identified as primary links . Associated object mapping data also includes links generated by data lineage propagation module to provide visibility of the associated object in upstream and downstream data models identified as secondary links . Such visibility can include efficient access of the associated object especially for visually identifying data elements or data records that are associated with the associated object in data displays. Data lineage propagation module can further include public application programming interface API . Public API is an API that can be provided so that a user of the system can enter column mapping data into data lineage propagation module . This can allow a user to store mappings for the data using a custom computer program such as a custom procedural language structured query language PL SQL program or a custom statistical analysis system SAS program.

According to the embodiment the logical data model can further include transformation module validation module and query builder . Transformation module can identify unique sources of mapped data and add source surrogate keys to a definition of one or more target data tables. Further based on one or more transformation definitions transformation module can store column mapping data for one or more transformations. Transformation module can further allow a user to provide custom column mapping data for a custom transformation that is identified to transformation module . Transformation module can implement validation module and query builder where validation module can read one or more data records test the data values of one or more data records and create one or more discrepancies for the data values and where query builder can build a query or database view of data coming from one or more data tables while maintaining the same metadata source column to target column mapping as a transformation. In certain embodiments transformation mapping data can also include a preferred source path. When a target column of a transformation has multiple immediate source columns one column can be identified as a preferred source column. This information can be tracked as part of column mapping data . Thus a preferred source path is a path through transformations of preferred source columns. In other words a preferred source path is a single source path that is identified from multiple possible source paths as being preferred over the other possible source paths. This can be done to provide a unique path to a single source data element for attaching queries or other associated objects that may be sent to a source system that provided the source data.

During execution of a transformation illustrated in as transformation execution processing record mapping data can be stored in one or more source surrogate keys where the one or more surrogate keys can be stored in one or more auxiliary columns of one or more target tables of the transformation illustrated in as data table . According to the embodiment a combination of record mapping data and column mapping data as well as other data lineage tracing information can be used to display a trace of a data lineage of source or target data elements illustrated in as lineage trace as is described below in greater detail.

According to the embodiment the logical data model can further include associated object module and adaptor . Associated object module can enter data within associated object mapping data for each associated object. Data from associated object mapping data can be used to visually highlight a display of one or more data elements that have associated objects associated with them illustrated in as highlight associated objects . According to certain embodiments associated object module can request a preferred source path for each data element associated with an associated object. Further one or more associated objects can be created within the system using adaptor . Adaptor can use associated object module to create the one or more associated objects within the system and then associated object module can use data lineage propagation module to propagate the visibility of the associated objects within the trace of the data lineage of the source or target data elements. In certain embodiments the logical data module can further include an additional module not illustrated in that displays one or more data elements from one or more data tables and that highlights the existence of one or more associated objects that are associated with the one or more data elements.

A direct mapping transformation is a transformation where one or more columns of a source data record in a source table are renamed and or reordered in a target data record of a target table. In certain embodiments one or more columns of a source data record in a source table can be propagated unchanged within a direct mapping transformation. A union transformation is a transformation where one or more source data records from two or more source tables are combined into two or more target data records of a single target table so that the target table includes some or all of the one or more source data records from the two or more source tables. A join transformation is a transformation where one or more source data records from two or more source tables are combined into a single target data record of a single target table so that the target data record of the target table include all the columns of the one or more source data records from the two or more source tables.

Further a horizontal to vertical unpivot transformation is a transformation where one or more source data records from a source table are converted into one or more target data records of a target table where each set of one or more columns of each source data record is transformed into a separate target data record of the target table. For example if a source table has a single source data record that includes columns A B C then an unpivot transformation transforms the source data record into three target data records a first target data record that includes column A a second target data record that includes column B and a third target data record that includes column C. A vertical to horizontal pivot transformation is a transformation where one or more source data records from a source table are converted into a target data record of a target table where the one or more source data records are combined into a single target data record. For example if a source table includes three source data records data record 1 data record 2 and data record 3 then a pivot transformation transforms the three source data records into a single target data record that includes one or more of the columns of data records 1 2 and 3. A case transformation is a transformation where data values for a target data record are populated from one or more source columns which may be from different source tables based on a condition.

According to an embodiment data lineage trace information can be made available for display within a user interface of the system. The information that can be provided to the user interface is now described in greater detail according to an example embodiment. For a source lineage of a selected data element a hierarchy of data elements that produced the selected data element can be provided. This is a path of data elements that traverses through all associated transformations back to the raw source data in the data warehouse. The path can include several path branches through the data. Similarly for a target lineage of the selected data element a hierarchy of data elements that are derived from the selected data element can be provided.

According to the embodiment one or more of the following attributes can be provided for each data element in the path a placement of the data element within the hierarchy e.g. identity of data element and identity of its parent data element within the hierarchy b data model name c table name d column name e data type of the data element f data element value g preferred source route yes or no h primary key i indicator whether the data is or might be masked data j indicator whether the data is from an internal staging table k indicator that one or more associated objects such as discrepancies are primarily linked to the data element or l underlying data e.g. table object identity column object identity surrogate key value and any other relevant data . A data model is a data schema associated with one or more data tables of a data warehouse.

According to the embodiment a system can display the above data within a user interface of the system. A user of a system may want to investigate the source data for Subject 1007 a female age 42 with a BMI value of 33.3. The user can select the data value 33.3 for Subject 1007 within the user interface and indicate that the user wishes to review the source data lineage of the data value. In response the system can display data lineage of within the user interface which is further described in greater detail.

According to the illustrated embodiment data lineage includes a plurality of rows i.e. rows and where each row includes information about one of the source data elements. The rows traverse the paths through the set of transformations shown in . Thus the immediate ancestor data elements are at a hierarchy level below the selected data element within data lineage and their ancestors follow in a similar fashion. Thus the hierarchy path is traversed from the data elements closest to the selected data element upstream to raw source data elements. Therefore in the illustrated embodiment of row represents the selected data element i.e. the data value 33.3 for Subject 1007 . Rows and represent immediate ancestor data elements for the data element represented by row . Thus the immediate ancestor tables of the selected data element represented by row are demography table and milestone visits table of . Row represents an immediate ancestor data element for the data element represented by row . Row represents an immediate ancestor data element for the data element represented by row . Row represents an immediate ancestor data element for the data element represented by row . Row represents an immediate ancestor data element for the data element represented by row . Thus the immediate ancestor table of the data element represented by row and the data element represented by row is visits table . Further the immediate ancestor table of the data element represented by and the data element represented by row is site B visits table . While data lineage is an example of a source data lineage a target data lineage can be displayed within the user interface in an alternate embodiment where one or more descendant data elements for a selected data element can be displayed where the target data lineage includes a plurality of rows and where each row includes information about one of the target data elements.

Data lineage further includes a plurality of columns i.e. columns and . Column represents a data model name table name and column name of the data element. Column represents a data value of the data element. Column represents a data type and size of the data element. Column represents an indication of whether the data element is part of a preferred source path i.e. Yes or No . Column represents a primary key value for the data element.

Thus data lineage can be a tree table that displays a hierarchy of data elements where the column headings are static and a user can open or close portions of the hierarchy using tree table components. Further in one embodiment a data element that is linked to an associated object illustrated in as data element can be highlighted with a background color. The highlighted background color can represent a primary link between a data element and an associated object. In the instance of a primary link the user can select a highlighted data element and request to display the details of the associated object linked to the data element.

In one embodiment if data lineage includes a path through an internal staging table a corresponding data value can be marked with a symbol such as an asterisk not illustrated in . Further a footnote can be displayed below data lineage explaining the meaning of the symbol. Additionally in one embodiment if a data element is from a table or column where security has been applied to the table or column and masked data is displayed in place of actual data then the data element can be marked with a symbol such as the symbol illustrated in as symbol . Further a footnote can be displayed below data lineage explaining the meaning of the symbol. In addition in one embodiment a full data lineage trace may not be able to be completed either because the user does not have access to some of the data in the path of the trace either upstream or downstream due to security applied to the data or because a data record has been deleted from a table and the deletion has not yet been propagated to downstream tables. In either case according to the embodiment the user interface can display a message that indicates that the data trace has been terminated not illustrated in .

Thus in one embodiment a user of a system can navigate through a data browser to a data listing page and select a data element on a data grid that is displayed within a user interface. A data grid is a display that presents rows and columns of a data table or a view of data. In selecting the data element the user can indicate that the user desires to see the source data that the selected data element is derived from. In response the system can obtain a collection of source data elements and display a collection of source data element values along with corresponding information about a data model table and column for each source data element. The collection can be organized and include information so that the collection can be displayed in a user interface as a tree of paths that make up the source data for the selected data element. Information can also be included so that a preferred source path can be displayed.

In another embodiment a user can navigate through a data browser to a data listing page and select a data element on a data grid that is displayed within a user interface. In selecting the data element the user can indicate that the user desires to see the target data that is derived from the selected data element. In response the system can obtain a collection of target data elements and display a collection of target data element values along with corresponding information about a data model table and column for each target data element. The collection can be organized and include information so that the collection can be displayed in a user interface as a tree of paths that make up the target data for the selected data element.

Further with respect to associated objects in one embodiment an associated object that is created within a data warehouse or otherwise associated with a data element of the data warehouse can be viewed in upstream or downstream data models as though these objects have been propagated to the different associated models. The system can automatically associate an associated object created in one data model with its corresponding source and target data elements in other data models. The associations between the associated objects and the data elements in the source and target data models can be displayed within a user interface of the system where the existence of associated objects can be displayed along with associated data elements as well as associated object categories. Further when multiple source data elements are used to derive a target data element then one of the source data elements can be selected during transformation definition as a preferred source data element. The preferred source data elements can form a data lineage path upstream through source data. The most upstream source data element can be used to export an associated object to an external system. Further when data associated with an associated object is updated one or more flags of the associated object can be set to indicate that the data has been updated.

As previously described links between data elements and associated objects can be made available for display within a user interface that displays data lineage . Information that is provided to the user interface by the system for identifying data elements or data records that have associated objects that are associated with the data elements or data records is now further described in greater detail. The system can provide information to the user interface so that each data element that has an associated object associated with the data element is highlighted in the display. This can include the data elements in a table where an associated object is originally created or otherwise associated i.e. a primary link .

In one embodiment the system can provide a an associated object identity which can be used to access the associated object and its properties b a data element reference such as a table object identity a column object identity and a surrogate key c an indication whether the associated object that is associated with the data element is a primary link or a secondary link d an indication whether the link is in the source path or target path of the primary data element for a secondary link and e a state of the associated object. According to the embodiment as illustrated in by data element the system can highlight a data element with a background color to indicate that the data element is linked to an associated object. The system can highlight the data element using a first background color to indicate a primary link. Alternatively the system can highlight the data element using a second background color to indicate a secondary link. As previously described a user is able to request a source or target lineage of a data element where an associated object is linked. When a user reaches a data element that includes a primary link to the associated object the user can view the associated object including one or more characteristics of the associated objects. The user can also export the associated object to an external source. In alternate embodiments rather than highlighting a data element with a color to indicate that the data element is associated with an associated object the system can use an alternate indication. Some examples of alternate indications include but are not limited to an icon a colored border or an audio indication.

Thus in one embodiment a user of a system can navigate to a data listing select a data element on a data grid that is displayed within a user interface create an associated object and associate the associated object with the selected data element. The system can then associate the associated object with data elements that are related to selected data element. The system can link the newly created associated object to the selected data element and designate the link as a primary link. The system can further recursively find all source and target data elements for the selected data element by using column mapping data and record mapping data associated with the existing transformations within the data warehouse. The system can subsequently link the same associated object to the related source and target data elements and designate these links as secondary links. Thus in each related source or target data model a data element with a secondary link to the associated object can be highlighted within the user interface of the system.

In another embodiment a user of the system can navigate to a data listing where the system can provide primary links and secondary links between associated objects and primary source data. The system can further obtain properties from the associated objects such as a state of each associated object to filter the display. In yet another embodiment a user can delete a data element that includes links to one or more associated objects. The system can remove the primary and or secondary links to associated objects associated with the deleted data. When the data for a primary link is deleted the system can remove the primary and secondary links to an associated object that is associated with a data element and the system can delete the associated object. When the data for a secondary link is deleted the system can remove the secondary link and determine if further links should be removed and remove any further links as necessary . In a further embodiment the system can allow a user to create a query that can access the column mapping data as well as the linked associated objects to support visibility of the associated objects.

In a flow of control for a data lineage propagation module such as data lineage propagation module of according to one embodiment one or more data models can be defined within a data warehouse. Metadata for each data model is created or loaded. One or more transformations are defined for one or more target tables using a transformation module such as transformation module of . One or more auxiliary columns are added to each target table as required for the particular transformation. These auxiliary columns are further described below in greater detail. Subsequently a data lineage mapping table is populated with data lineage tracing information i.e. metadata information regarding column mapping which is distinct from the data stored within the one or more data tables of the data warehouse and where the data lineage mapping table is further described below in greater detail. The auxiliary column identity is part of the column mapping metadata so that mapped target columns can be linked with the auxiliary column that holds the identity of the source table record for the mapped source column. The one or more data models are installed with one or more tables. One or more source tables are loaded with data. The transformations are executed and populate one or more target tables. Subsequent to the one or more target tables being loaded with data a shadow table is populated or updated with data lineage tracing information i.e. record mapping information which is also distinct from the data stored within the one or more data tables of the data warehouse where the shadow table is further described below in greater detail. Finally one or more secondary links for associated objects are propagated within the data. The secondary links can be used to obtain an association of an upstream or downstream data element with an associated object without traversing the data lineage tracing information of the data lineage mapping table and the shadow table in order to detect an existence of the associated object.

Thus according to an embodiment a data lineage propagation module such as data lineage propagation module of can maintain one or more associations and can trace between two types of objects a a data element of a data record in a table and b a complete data record in a table. Regarding a the following can be used to uniquely identify a data element and also to trace the names of installed objects when needed for obtaining data elements 1 a model object identity that identifies a data model of the data warehouse 2 a table instance object identity that identifies a table of the data warehouse 3 a surrogate key value that identified a surrogate key and 4 a column object identity that identifies a column of the table. Regarding b some associated objects can be linked to a data record rather than a specific data element within the data record. In this scenario since there is no specific column within the data record a column object identity for a surrogate key is used rather than a column object identity that identifies a column of the table. Thus the following can be used to uniquely identify a data record 1 a model object identity that identifies a data model of the data warehouse 2 a table instance object identity that identifies a table of the data warehouse 3 a surrogate key value that identified a surrogate key and 4 a column object identity for the surrogate key. In an alternate embodiments a unique table identifier that uniquely identifies a table of the data warehouse across all data models of a data warehouse can be used to uniquely identify a data record.

Further according to the embodiment the data lineage propagation module maintains and propagates associations with associated objects. The data lineage propagation module further provides two types of relationship mappings a a mapping of a specific data element to one or more source or target data elements i.e. data lineage traceability and b a mapping between associated objects and data elements or data records i.e. associated objects visibility .

According to the embodiment in order to provide data lineage traceability the data lineage propagation module populates a data lineage mapping table with data lineage tracing information after one or more tables are defined with a data warehouse. A data lineage mapping table is further described below in greater detail. As one or more transformations are executed within the data warehouse one or more auxiliary columns are populated and a shadow table is loaded with data lineage tracing information for tracing the data lineage of one or more data elements. The auxiliary columns and the shadow table are further described below in greater detail. As associated objects are created and or associated with a data element the data lineage propagation module can index associated objects that are associated with source and target data elements for efficient visualization by other processes. Thus an association of an upstream or downstream data element with the associated object can be directly obtained without traversing the data lineage tracing information of the data lineage mapping table and the shadow table.

During data model and transformation definition phases a target table of a transformation can be identified and one or more auxiliary columns can be added to the identified table as one or more metadata definitions. The number of auxiliary columns can depend on the type of transformation. The main use of the one or more auxiliary columns is to store source surrogate key values from the source table of the transformation. A surrogate key as previously described is an identity of a data record where a source surrogate key is an identity of a source data record. The one or more auxiliary columns can be populated with one or more source surrogate key values or other data values appropriate for the transformation. The data lineage propagation module can use the surrogate key values or other appropriate data values stored within the auxiliary columns to trace back through a path of source data elements that contribute to the target data.

As previously described one or more auxiliary columns can be added to one or more target tables as required for a specific transformation. Examples of auxiliary columns that can be added for different types of transformations are as follows 

According to the embodiment tracing the data lineage of a data element is dependent on one or more surrogate keys. Each table can include a surrogate key column which can serve as an indexed unique key for the table. In order to trace from a target table of a transformation back to a source table the surrogate keys from the source table are stored in the target table. In an example of a simple transformation in order to trace a source data element for a selected data element in a target table the target table is looked up in a data lineage mapping table described below in greater detail in order to obtain a source table source column and auxiliary column where a source surrogate key is stored. Using the auxiliary column a value of the source surrogate key is obtained and stored in the target table record that contains the selected data element. The source table source column and source surrogate key value is used to find the source data value for the selected target data element. Data lineage tracing for more complex transformations are described below in greater detail.

In order to trace a target data element for a selected source data element a separate table of data lineage tracing information identified as a shadow table described below in greater detail is maintained. The shadow table includes one or more mappings of a source data record to a target data record. More specifically the shadow table can include de normalized source record target record mapping using a particular source key together with a context map identifying metadata relationship between columns and source keys. Thus according to the embodiment at the end of an execution of a transformation the shadow table can include one or more system records that provide an indexed version of mapping data that allow a target data element to be traced from a source data element using the data lineage mapping table.

Together data lineage mapping component shadow table component and transformations component along with table definition component provide a data lineage subsystem which is further described below in greater detail in relation to . Further associated object mapping component along with table definition component and associated object component provide an associated information subsystem which is further described below in greater detail in relation to .

According to an embodiment the information stored within data lineage mapping table makes up a first major portion of data lineage tracing information used to trace a data lineage. A second major portion of data lineage tracing information used to trace a data lineage is one or more auxiliary columns that are added to table definitions of target tables of transformations to trace back to source data records. The auxiliary columns can contain surrogate keys from each source table that contribute to the data record in the target table. When necessary the auxiliary columns can hold a table identity of the source table and or identifying filter values for a specific transformation. Data lineage mapping table and the one or more auxiliary columns include the data used by a data lineage propagation module such as data lineage propagation module of to trace back from a target data element to a source data element. A third major portion of data lineage tracing information used to trace a data lineage is a shadow table which is further described in greater detail in relation to .

In the illustrated embodiment of data lineage mapping table which includes column mapping data includes a TMAP ID column which corresponds to a transform table level map identity i.e. identifies a transformation . Data lineage mapping table further includes a TMAP TYPE RC column which defines how source columns are related to target columns i.e. identifies a transformation type . Data lineage mapping table further includes a SRC DM OBJ ID column which corresponds to a source data model identity a SRC TAB OBJ ID column which corresponds to a source table identity and a SRC COL OBJ ID column which corresponds to a source column identity. Data lineage mapping table further includes a TRG DM OBJ ID column which corresponds to a target data model identity a TRG TAB OBJ ID column which corresponds to a target table identity and a TRG COL OBJ ID column which corresponds to a target column identity. Data lineage mapping table further includes a SRC SKEY COL OBJ ID column which corresponds to an object identity for an auxiliary column in a target table which stores a source table data record surrogate key for the source table identified by the source table identity stored within the SRC TAB OBJ ID column for the data record. According to the illustrated embodiment data lineage mapping table further includes a FILTER COL OBJ ID column which optionally provides information about a filter column identity in either a source table or a target table for certain transformation types and a FILTER VALUE column which optionally provides information about a filter value in a table filter column for certain transformation types.

In the illustrated embodiment of shadow table includes a TRG TAB OBJ ID column which corresponds to a target table instance identity. Shadow table further includes a SRC TAB OBJ ID column which corresponds to a source table instance identity. Shadow table further includes a SRC SKEY COL OBJ ID column which corresponds to an object identity for an auxiliary column in a target table which stores a source table data record surrogate key. Shadow table further includes a TRG SKEY VALUE which corresponds to a surrogate key value of a target table data record and a SRC SKEY VALUE which corresponds to a surrogate key value of a source table data record that is also a value for an auxiliary column of the aforementioned target table data record. According to the illustrated embodiment shadow table further includes a FILTER VALUE column which optionally provides information about a filter value in a table filter column for certain transformation types.

According to the embodiment when data is generated within or loaded into a data warehouse and when one or more transformations have been defined for the data warehouse a data lineage propagation module such as data lineage propagation module of can generate data lineage tracing information within the physical model of the data lineage subsystem. More specifically for each transformation of the one or more transformations the data lineage propagation module can store each target to source mapping within data lineage mapping table . The data lineage propagation module can further map one or more target data values of one or more target tables to one or more source data values of one or more source tables. The data lineage propagation module can further add one or more auxiliary columns to the one or more target tables by modifying one or more table definitions of table definition component where each auxiliary column can store a source surrogate key that identifies a source table. Further for each transformation of the one or more transformations the data lineage propagation module can store each source to target mapping within shadow table . The data lineage propagation module can further map one or more source data values of one or more source tables to one or more target data values of one or more target tables.

With respect to the one or more target to source mappings stored within data lineage mapping table the data lineage propagation module can store the following information for each target column data value in data lineage mapping table a a source table instance object identity and a source column object identity b a target table instance object identity and a target column object identity c an object identity of each auxiliary column that has been added to the target table where each auxiliary column stores a source surrogate key value for a source data record used to produce the target data value and d any additional data required for the mapping such as an indicator e.g. flag that the mapping is a preferred source route. If a same source data record is used to populate values in more than one target column then the same auxiliary column that stores the source surrogate key column identity can be repeated in multiple mapping system records within data lineage mapping table .

Data lineage tracing information can provide support for transformations of a data warehouse where example transformation types include direct map transformations conversion transformations derivation transformations union transformations vertical to horizontal pivot transformations horizontal to vertical pivot transformations case transformations and custom types of transformations. In certain embodiments data lineage tracing information can be produced using a data lineage mapping technique. The data lineage mapping technique involves mapping one or more source columns to a target column and adding one or more auxiliary columns to hold one or more source surrogate keys where each source surrogate key corresponds to a source table that contributes to the values of the target column.

Direct map transformations conversion transformations and derivation transformations can produce straightforward entries in data lineage mapping table using the data lineage mapping technique one or more source columns map to each target column. These transformations often map from a single source table to a single target table so there is often just a single auxiliary column that stores source surrogate key values.

Data lineage tracing information can also be used to support union transformations and case transformations using the data lineage mapping technique. However the data lineage mapping technique can require more than one auxiliary column per transformation to ensure correcting tracing to the source data elements. For example in a union of five source tables into one target table any data record in the target table could be from any of the five source tables. To avoid ambiguity in identifying an origin of a particular data record the target table can be extended to include five auxiliary columns one per source table . When a union transformation is executed a source data record surrogate key is inserted into an auxiliary column which mapped to the correct source table. Thus for each data record in the target table only one of the five auxiliary columns would contain a source surrogate key value and the other four auxiliary columns would remain empty.

The same scenario can apply for a case transformation. In a case transformation the values from different data records in one column of the target tables may be populated from different source columns which may be from different source tables. For example in the first data record the target case column might be populated from source Tab1.ColX. In the second data record the target case column might be populated from source Tab1.ColY. In the third data record the target case column may be populated from source Tab2.ColX. Each assignment is controlled by the condition of the case transformation. Thus each source table and column combination that might be used to populate a target column must be identified in order to trace between source and target data elements. One auxiliary column would be added for each possible source table and column combination. As with the union transformation only one of the auxiliary columns will be populated with a value in each data record depending on which case condition is true for that data record. Further there will be column data mappings to the target column where each mapping source record includes a different source key column identity.

The data lineage mapping technique can be modified to support vertical to horizontal pivot transformations and horizontal to vertical pivot transformations. The modification can involve storing additional information within data lineage map table e.g. information about a pivot column and a list of filter values used for the transformation. For example the vertical to horizontal pivot transformation can take multiple data records as input each with a different filter value in the pivot column and can create multiple columns in the target table one or more columns for each of the filter values. The result can be a target table where multiple source data records contributed to a single data record. Therefore multiple auxiliary columns can be added to the target table one or more columns for each of the source data records that contribute to the target data record.

In certain embodiments advanced techniques can be used to store data lineage mapping data. In one advanced technique for a union transformation an advanced technique for storing data lineage mapping data can involve including a source table instance object identity within a source surrogate key stored within an auxiliary column. An algorithm to trace back to a source data record from a target data record can use the source surrogate key value stored within the auxiliary column of the target data record to look up the source data record in the specified source table where the source table can be extracted from the source surrogate key value. For both union transformations and case transformations another advanced technique for storing data lineage tracing information can involve including a filter auxiliary column that stores a filter value and another auxiliary column that stores a source surrogate key. For union transformations the filter auxiliary column that stores the filter value stores a source table instance object identity. Thus an algorithm to trace back to a source data record from a target data record can use the source surrogate key value stored within the auxiliary column of the target data record to look up the source data record in the source table where the source table is identified in the filter auxiliary column. For case transformations a user can provide filter values which are text strings to identify every source table and column combination that might populate a case target column. These filter values are stored in data lineage mapping table along with the appropriate source table column combination and the case transformation target table column combination. In each data record of the target table the corresponding filter value can be entered into the filter auxiliary column. Thus an algorithm to trace back to a source data record from a target data record can use a source surrogate key value from the target data record along with the filter value and the information stored within data lineage mapping table .

To avoid a requirement of multiple auxiliary columns other advanced techniques can be used to store data lineage tracing information. One advanced technique involves a smart surrogate key where a smart surrogate key is a concatenation of one or more source surrogate key values prefixed with a source table identity. As a result the smart surrogate key can be used to obtain the source table identity and therefore a separate auxiliary column to store the source table identity is not required. Further only a single auxiliary column would be required to store the smart surrogate key thereby removing the requirement for multiple auxiliary columns in the case of union transformations vertical to horizontal pivot transformations and horizontal to vertical pivot transformations. Another advanced technique involves including a pivot column value as a filter value within the smart surrogate key for the vertical to horizontal pivot transformations and horizontal to vertical pivot transformations.

According to an embodiment the aforementioned data lineage tracing information or other data lineage tracing information can be leveraged to support the visibility of associated objects that are linked to either data elements or data records and to propagate the associated objects to related source data elements and target data elements. Further the aforementioned data lineage tracing information or other data lineage tracing information can also be leveraged to support the export of associated objects through a path of transformations within the data lineage to an external source for the data. According to an embodiment an associated object mapping table can store data about one or more links between associated objects and either data elements or data records. A data lineage propagation module such as data lineage propagation module of can identify an association with the associated object and the data element or data record where the associated object is created as a primary link and can further store the primary link within the associated object mapping table. The data lineage propagation module can further create and store secondary links to source and target data elements data records of the primary data element or data record . This can provide efficient visualization of the associated object when a user of a system is viewing source or target data as well as when the user views the primary data element or data record . Thus according to the embodiment each associated object can have one primary link and can have one or more secondary links.

In the illustrated embodiment of associated object mapping table includes an OPOOBJ ID column which corresponds to an associated object identity i.e. identifies an associated object . Associated object mapping table further includes an OPOOBJ TYPE ID column which corresponds to an associated object type identity i.e. identifies a type of the associated object . In alternate embodiments an identity of an associated object can be a complex identity that includes an identity value and at least one value.

According to the illustrated embodiment associated object mapping table further includes a DM OBJ ID column which corresponds to a data element model identity i.e. identifies a data model of a data table of a data element that the associated object is associated with . Associated object mapping table also includes a TAB OBJ ID column which corresponds to a data element table identity i.e. identifies a data table of a data element that the associated object is associated with . Associated object mapping table further includes a COL OBJ ID column which corresponds to a data element column identity i.e. identifies a column of a data element that the associated object is associated with . Associated object mapping table also includes a SKEY VALUE column which corresponds to a data element data record identity i.e. identifies a data record of a data element that the associated object is associated with . The data element data record identity is also a surrogate key.

According to the illustrated embodiment associated object mapping table also includes an IS PRIMARY RC column which identifies whether the association between the associated object and the data element is a primary link or a secondary link. Associated object mapping table further includes an IS RECORD LEVEL RC column which identifies whether the associated object is associated with a data element or a data record. Associated object mapping table also includes a PREFERRED ROUTE RC column which identifies whether the data element is a preferred source data element for the associated object and whose value is inherited from data lineage mapping table . Associated object mapping table further includes a TRACE TO RC column which identified whether a link between the associated object and the data element is a primary link a upstream secondary link or a downstream primary link.

According to an embodiment a user of a system or an automatic program executed within the system can select a data element and create an associated object such as a discrepancy related to the selected data element. The system can call a data lineage propagation module such as data lineage propagation module of and the data lineage propagation module can create a primary association between the new associated object and the selected data element identified as a primary link . The data lineage propagation module can further store the primary association i.e. the primary link within associated object mapping table . The data lineage propagation module can further create one or more secondary associations between the new associated object and one or more source data elements and or target data elements by tracing a full data lineage path from the selected data element to the one or more source data elements and or target data elements. The data lineage propagation module can further store the one or more secondary associations i.e. the one or more secondary links within associated object mapping table . In certain scenarios when tracing upstream to source data elements multiple source data elements may be mapped to a single target data element. A source data element which is a preferred source data element for the associated object can be identified as such in associated object mapping table . The preferred source data element can be identified as a preferred path and the preferred path data lineage tracing information can be stored in a data lineage mapping table such as data lineage mapping table of .

According to an embodiment the system can display a presence of an associated object in a display of a data model of a data table in which the associated object was created or otherwise associated using the primary link stored within associated object mapping table . The system can further display the associated object in upstream and or downstream data models using the one or more secondary links stored within associated object mapping table . When there are multiple source data elements for a particular target data element the system can mark one or more preferred source data elements as a preferred path. When the system displays a data model the system can also display the one or more associated objects associated with each data element of the data table of the data model whether the associated object is associated with the data element by a primary link or a secondary link.

In one embodiment when a data record is deleted that contains a data element with a primary link to an associated object a state of the associated object can be modified to a closed state. The data for the associated object can be removed from associated object mapping table . Alternatively the data for the associated object can be retained within associated object mapping table but modified to indicate that the data has been virtually deleted such as associating a deleted flag or a timestamp with the data . The associated object can be retained rather than deleted and saved for auditing purposes. If a data element associated with an associated object via a primary link is deleted the primary and all secondary links to the associated object can be deleted and a state of the associated object can be modified to a closed state. If a data element associated with an associated object via a secondary link is deleted the secondary link can be deleted.

Additional aspects of tracing a data lineage as well as propagating visibility of associated information i.e. associated objects are now described in greater detail according to certain embodiments. In certain embodiments a system can support user or system navigation from any data field on any data record back through source data fields records in a source side data lineage until the data lineage reaches source data records fields that originated in an external system i.e. source system . The system can then allow the user to choose a source data record or data field on which to act. Examples of actions are sending a query or message to the source system about a data record or data field value sending a document invoking an API that can directly or indirectly take an action on the source system and opening an application window of the source system with the source data record field or its manifestation in the source system in context.

An extension to the above functionality involves transformation definition metadata that defines a preferred source path from each table or column to an immediately preceding source table or column . This preferred path enables the system to select a single branch of the source lineage at a data record or data field that originated in an external system without the user having to explicitly navigate the source data lineage. The system is then able to take the actions described above on that data record or data field in the external system.

In other certain embodiments when displaying data records and their data fields in a user interface such as a tabular display or a formatted form including displayed fields an optimized index of associated information i.e. one or more associated objects such as an associated object mapping table can be used to provide a visual indication such as highlighting or an icon that associated information is present for data records and or data fields that are associated with the associated information.

The system can also allow the user to restrict the information displayed to a subset of the associated information i.e. one or more associated objects by some attribute of that information. Examples include types of associated objects such as discrepancies error reports documents comments and subtypes of a particular type of associated objects such as types of documents statuses of error reports or categories of tags or status flags . This functionality can be optimized by including within an associated object table that associates the data record or data field with the associated object to all other related data records or fields information about the types or subtypes of the associated objects so that the system does not have to look beyond the table itself to perform the restriction.

The system can also allow the user to restrict the associated information i.e. associated objects displayed based on a relationship of the data record or data field associated with the associated object to the associated object currently displayed. Examples include only displaying associated objects associated with data records or data fields upstream of the displayed data element in the data lineage only displaying associated objects associated with data records or data fields downstream of the displayed data element only displaying associated objects associated directly with displayed data elements via a primary link or only displaying associated objects from a specific source or target table or specific set of source tables or target tables. This can be optimized by including in an associated object table that associates the data record or data field associated with the associated object to all other related data records or data fields information about a relative position of each associated object so that the system does not have to look beyond the table itself to perform the restriction.

According to certain embodiments in order to display visual indications of associated information i.e. associated objects it can be necessary to efficiently associate each associated object to a specific displayed data field or data record . In one embodiment the system can perform the association by using the capabilities of a structured query language SQL to first pivot on an identity for an associated data record such that each associated object is in a tabular format where a name or identity of each column has the same tabular structure as the information being displayed and where the data elements in the pivoted table have a data value only when the associated object is present. The system can then use the name or column identity match for a given data record identity between the actual data being displayed and the pivoted table to efficiently turn on an indication of the associated object s presence. In another embodiment the system can perform the association by separately retrieving the associated object into a local data structure that has an efficient access method to retrieve information about a particular data record identity or a particular column identity. The system can then efficiently identify data records and data fields in the displayed data lineage by accessing this local data structure using the data record identity or the column identity. In one embodiment for a data lineage of a data element the system can also display for each data record or data field in the data lineage the presence of one or more associated objects.

In certain embodiments when a user interface of the system displays indications of the presence of one or more associated objects the system allows the user to invoke an action on a particular data record or data field using for instance a mouse click a mouse right click and menu selection or cursor navigation to the target data record or data field and a keyboard action. The invoked actions can include displaying lists of the associated objects and navigations to details about the associated objects. For instance the system can display a popup table of associated comments with an indication for each data table or data field to which the comment is attached. Another example can be to display a list of associated discrepancies which can be used to select and display the detailed information about the discrepancy. Further the system can instead place the user in an interface whether the user can take action on the associated object such as responding to a comment or changing the status of a discrepancy.

In certain embodiments the system can use security information about the user s rights and the privileges necessary to access different types of associated objects or the privileges needed to access associated objects attached to particular upstream or downstream data tables to either restrict the visibility of associated objects in the user interface the level of detail about the associated objects available to the user or the ability of the user to take action upon the associated objects.

According to certain embodiments the system can use the tracking timestamp information associated with upstream or downstream data records and the associated objects such as discrepancies or comments that are associated with them to enable the user to understand whether the data before or after the data the user is currently viewing is consistent with the upstream or downstream data. For instance if a user is viewing a data element and invokes a function to show associated comments attached to data in the current data element s data lineage the system can indicate whether the source data and associated comments in the source data lineage are more recent than the data element and therefore may reflect a change that has not yet propagated to the current data table. Similarly in the target data lineage the user can see whether data and associated comments are older than the current data and therefore may reflect data that has not yet been updated to reflect changes that have already been made to the current data element. Another manifestation of the same capability is where the user initiates an action to raise a query on the preferred source data element associated with the current data and the system detects and alerts the user that the source data element has been modified more recently than the current data element. This functionality can prevent the user from taking action through the lineage facility on data which may have already been modified.

As previously described the system can minimize data storage through the use of surrogate keys and can optimize lookup performance through the use of a shadow table that extracts the source surrogate keys into a single table for optimized lookup. According to one embodiment an alternative to this design does not require the generation and use of surrogate keys. In this embodiment a full primary key of a source table is stored within one or more target tables as a source key and additional data fields on the target table are added to hold any auxiliary information captured in the surrogate key such as pivot values or table selectors associated with the source primary key fields. In this embodiment system metadata describes each such source key and any functions that operate using the surrogate key operate using the full set of data fields that make up the source key. Further the optimization that extracts the surrogate key to the shadow table for optimized query performance without having to query each individual table can be accomplished through the use of a similar shadow table that has a number of columns reserved for each source or target key that are used as needed to hold the values for the components of each source key. The system metadata about the key structure for each table would then enable the system to construct queries against this single shadow table by appropriate joins on the columns used by the particular table to hold the full source key information. An appropriate concatenated index on the set of source keys and another on the set of target keys would optimize performance using the single shadow table.

In certain embodiments the system can act as an application generator that uses metadata descriptions of one or more applications to generate runtime elements of the data lineage. For example there can be a user interface in which a user defines a mapping between one or more source tables and a target table. The mapping can differ depending on a type of transformation e.g. join pivot or unpivot . A definition process can record the column level mapping between one or more source data elements and one or more target data element. Then as part of deploying the transformation the system can a add one or more auxiliary columns to the target table before the target table is installed in the database where the one or more auxiliary columns store one or more source keys b record metadata mapping information about a relationship between the one or more source data elements and the target data element and c generate the computer code that can be executed to perform the transformation. The computer code can include logic to populate the one or more source keys in the target table in order to record the relationship between the one or more source data elements and the target data element. According to certain embodiments the generated computer code can be re used in new application deployment of an identical or similar structure without user intervention.

Further in the example embodiment the data lineage propagation module can find target data elements for the following source data element in source table column RBC and data record identity i.e. surrogate key LAB1 103 1 LAB1. The data lineage propagation module can look in data lineage mapping table and find source table LAB1 i.e. source table as a source table and find column RBC as a source column in system record 9. From this information the data lineage propagation module can determine that it needs to look for the target data element in the RBC column of target table . The data lineage propagation module can then search shadow table using the combination of the target table LAB SUM the source table LAB1 the SRC SKEY COLNAME UNION SRC SKEY and the source table surrogate key LAB1 103 1 LAB1 to determine that the surrogate key of the desired data record in target table is LAB SUM 103 1. Thus the data lineage propagation module can identify that the target data element is in target table in column RBC of the data record with a surrogate key value LAB SUM 103 1. The data lineage propagation module can further identify that the target data value is 5.3. 

In the example embodiment a data lineage propagation module such as data lineage propagation module of can find source data elements for the following target data element in target table column PULSE and data record identity i.e. surrogate key VITALS 101 2 . The data lineage propagation module can look up data lineage mapping table and find for the target table VITALS i.e. target table and a target column PULSE only one system record system record 3 identified in as filtered data lineage mapping table . This system record has a transformation map type of PIVOT for a TALL SKINNY SOURCE table VS with a pivot column VSTSTCD and a source data item column VSORES. The same system record system record 3 identified in as filtered data lineage mapping table defines a target record auxiliary column to get a source record surrogate key value as VS SK1. According to the algorithm a value from this column VS 101 2 can be combined by a data lineage propagation module such as data lineage propagation module of with the filter value PULSE i.e. VS 101 2 PULSE to find a correct record in the source table Thus the data lineage propagation module can further identify that the source data value is 68. 

In the example embodiment a data lineage propagation module such as data lineage propagation module of can find source data elements for the following target data element in target table column VSORES and data record identity i.e. surrogate key VS 101 2 PULSE. The data lineage propagation module can look in data lineage mapping table and find target table VS i.e. target table as a target table and find column VSORES as a target column in five system records system records 1 2 3 4 and 5. Target column VSTSTCD is marked as target table VS pivot column. The data lineage propagation module can then filter the system records in data lineage mapping table using the target data record data value in column VSTSTCD i.e. PULSE to determine the correct system record in data lineage mapping table . Thus the data lineage propagation module can identify system record 3 as the correct system record in data lineage mapping table identified in as filtered data lineage mapping table . This system record has a transformation map type i.e. column TMAP TYPE of UNPIVOT a pivot column i.e. column PIVOT COL of VSTSTCD a source table i.e. column SRC TAB of VITALS and a source column i.e. column SRC COL of PULSE. From the source surrogate key value i.e. column VITALS SK1 of target table the data lineage propagation module can determine that the surrogate key of the source data record is VITALS 101 2. Thus the data lineage propagation module can identify that the source data element is in source table in column PULSE with a surrogate key value VITALS 101 2. The data lineage propagation module can further identify that the source data value is 68. 

In the example embodiment a data lineage propagation module such as data lineage propagation module of can find source data elements for the following target data element in target table column HEMOGLOBIN and data record identity i.e. surrogate key LAB1 SUM 105 1 LAB1. The data lineage propagation module can look up data lineage mapping table and find target table LAB1 SUM i.e. target table as a target table and find column HEMOGLOBIN as a target column in system record 10. From this the data lineage propagation module knows that the source data element is in source table LAB1 i.e. source table and source column HEMOGLOBIN. The data lineage propagation module also knows that the source surrogate key value is found in the column LAB1 SKEY of target table . In target table the data lineage propagation module can look in the column LAB1 SKEY for the target data record. This column contains the surrogate key value LAB1 105 1 LAB1 and the data lineage propagation module knows the source table source column and the surrogate key value. Thus the data lineage propagation module can identify that the source data element is in source table in column HEMOGLOBIN with a surrogate key value LAB1 105 1 LAB1. The data lineage propagation module can further identify that the source data value is 111. 

Further in the example embodiment the data lineage propagation module can find target data elements for the following source data element in source table column HEMOGLOBIN and data record identity i.e. surrogate key LAB1 105 1 LAB1. The data lineage propagation module can look up data lineage mapping table and find source table LAB1 i.e. source table as a source table and find column HEMOGLOBIN as a source column in system record 10. From this information the data lineage propagation module can determine that it needs to look for the target data element in the HEMOGLOBIN column of target table LAB1 SUM i.e. target table . The data lineage propagation module can then search shadow table using surrogate key LAB1 105 1 LAB1 of source table and determine that the surrogate key of the desired data record in target table is LAB1 SUM 105 1 LAB1. Thus the data lineage propagation module can identify that the target data element is in target table in column HEMOGLOBIN with a surrogate key value LAB1 SUM 105 1 LAB1. The data lineage propagation module can further identify that the target data value is 111. 

In the example embodiment a data lineage propagation module such as data lineage propagation module of can find source data elements for the following target data element in target table column RBC NR and data record identity i.e. surrogate key LAB SUM 103 1. The data lineage propagation module can look up data lineage mapping table and find target table LAB SUM i.e. target table as a target table and find column RBC NR as a target column in four system records system records 11 12 13 and 14. These four system records have a transformation map type i.e. column TMAP TYPE of CASE. The data lineage propagation module uses two auxiliary columns in target table to determine the correct system record in data lineage mapping table column NRANGE SKEY and column CASE FVAL . Column NRANGE SKEY stores a source table surrogate key and has a corresponding identity in data lineage mapping table i.e. column SRC SKEY COLNAME. Column CASE FVAL stores a case condition clause tag and has a corresponding identity in data lineage mapping table i.e. column FILTER COL . The data lineage propagation module can determine that the data record in target table includes the value MALE in the filter column i.e. COLUMN CASE FVAL . The data lineage propagation module can further determine that the correct system record in data lineage mapping table is the system record with the matching identity in the FILTER VAL column. Thus from the four system records the data lineage propagation module can determine that the system record that includes MALE in the FILTER VAL column is system record 11. Thus the source data element is from source table NRANGE i.e. source table and has the column MALE. The data lineage propagation module can further determine that the source surrogate key value is located in column NRANGE SKEY of target table and that the source surrogate key value is NRANGE LAB1 RBC. The data lineage propagation module can further determine that the source data value is 4.7 6.1. 

Further in the example embodiment the data lineage propagation module can find target data elements for the following source data element in source table column MALE and data record identity i.e. surrogate key NRANGE LAB1 RBC. The data lineage propagation module can look up data lineage mapping table and find source table NRANGE i.e. source table as a source table and find column MALE as a source column in system record 11. From this information the data lineage propagation module can determine that it needs to look for the target data element in the RBC NR column of target table LAB SUM i.e. target table . The data lineage propagation module can then search shadow table using surrogate key NRANGE LAB1 RBC of source table and determine that the surrogate keys of the desired data records in target table are LAB SUM 103 1 and LAB SUM 104 1. Thus the data lineage propagation module can identify that the two target data elements are in target table in column RBC NR with surrogate key values LAB SUM 103 1 and LAB SUM 104 1. The data lineage propagation module can further identify that the target data value for both of these target data elements is 4.7 6.1. 

The flow begins and proceeds to . At a target data element is mapped to one or more source data elements as part of a data lineage of a data warehouse including one or more data tables where each data table includes one or more data records. The target data element includes a column of a target data record. Each source data element includes a column of a source data record. The target data element is derived from the one or more source data elements using a data transformation. In one embodiment the data warehouse includes one or more ordered data models. Each ordered data model includes one or more data tables. Further one or more data tables of a subsequent data model are formed from at least one table of a previous data model using a data transformation. In one embodiment the data transformation is one of a direct mapping transformation a union transformation a join transformation a horizontal to vertical unpivot transformation a vertical to horizontal pivot transformation or a case transformation. The flow proceeds to .

At one or more source surrogate keys are stored within one or more auxiliary columns of the target data record. Each source surrogate key includes an identity of the source data record that includes a corresponding source data element. In one embodiment each surrogate key of the one or more surrogate keys includes an identity of a source data table that comprises the source data record. In one embodiment the one or more auxiliary columns are automatically added to the target data record based on the mapping of the target data element to the one or more source data elements. The flow proceeds to .

At for each source data element a data lineage mapping system record is stored within a data lineage mapping system table that represents the mapping of the target data element and the corresponding source data element. The data lineage mapping system record includes the corresponding source data element the target data element and the one or more auxiliary columns. According to the embodiment the data lineage mapping system record also includes a type of the data transformation. The flow proceeds to .

At a source data element is mapped to one or more target data elements as part of the data lineage. The one or more target data elements are derived from the source data element using a data transformation. The flow proceeds to .

At for each target data element a shadow system record is stored within a shadow system table that represents the mapping of the source data element and the corresponding target data element. The shadow system record includes a source surrogate key that identifies the source data element a target surrogate key that identifies the corresponding target data element and the one or more auxiliary columns. Thus according to the embodiment the data lineage includes the one or more data lineage mapping system records the one or more shadow system records and the one or more source surrogate keys. The flow proceeds to .

At a data element is selected from the one or more data elements that are mapped using the data lineage. The flow proceeds to .

At one or more data elements that are mapped to the selected data element are displayed within a user interface using the data lineage. In one embodiment the displaying of the one or more data elements that are mapped to the selected data element further includes displaying for each data element a position of the data element within the data lineage. The flow proceeds to .

At for each target data element one source data element of the one or more source data elements is selected as a preferred source data element. The flow proceeds to .

At a preferred source path of the data lineage is created based on the selected one or more preferred source data elements. The flow proceeds to .

At a pivot column identity is stored within an auxiliary column of the target data record. The pivot column identity identifies a pivot column of the source data record. The flow proceeds to .

At a filter column identity is stored within a first auxiliary column of the target data record. The filter column identity identifies a filter column of the source data record. The flow proceeds to .

At a filter value is stored within a second auxiliary column of the target data record wherein the filter value is a filter value of the source data record. The flow then ends.

At an association between a primary data element and an associated object is identified. The primary data element includes a column of a primary data record. The associated object comprises associated information. The association between the primary data element and the associated object is identified as a primary link. In one embodiment the associated object is one of a discrepancy a comment a status flag a state indicator a tag an image a recording a file a link or a document. Also in one embodiment instead of the primary data element including a column of the primary data record the primary data element includes the primary data record.

At a first associated object mapping system record is stored within an associated object mapping system table that represents the primary link. The first associated object mapping system record includes an identity of the primary data element an identity of the associated object and a primary link indicator. In one embodiment the first associated object mapping system record includes a data element model identity that identifies a data model of the primary data element a data element table identity that identifies a data table of the primary data element and a data element column identity that identifies a column of the primary data element. The flow proceeds to .

At an association between a secondary data element and the associated object is identified using the data lineage. The secondary data element includes a column of a secondary data record. The secondary data element is related to the primary data element within the data lineage. The association between the secondary data element and the associated object is identified as a secondary link. In one embodiment the secondary data element is a source data element of the primary data element. Also in one embodiment the identity of the primary data element and the identity of the secondary data element are each surrogate keys. Further in one embodiment instead of the secondary data element including a column of the secondary data record the secondary data element includes the secondary data record. In one embodiment the association between the secondary data element and the associated object is identified by using the data lineage to identify the secondary data element based on the primary data element. In an embodiment additional associations between additional secondary data elements and the associated object are also identified using the data lineage. The flow proceeds to .

At a second associated object mapping system record is stored within the associated object mapping system table that represents the secondary link and that represents an association between the primary data element and the secondary data element. The second associated object mapping system record includes an identity of the secondary data element an identity of the associated object and a secondary link indicator. In one embodiment the second associated object mapping system record includes a data element model identity that identifies a data model of the secondary data element a data element table identity that identifies a data table of the secondary data element and a data element column identity that identifies a column of the secondary data element. Further in one embodiment the second associated object mapping system record includes an indication that the secondary data element is a preferred source data element. In an embodiment where additional associations between additional secondary data elements and the associated object are also identified using the data lineage additional associated object mapping system records are stored within the associated object mapping system table. The flow proceeds to .

At the primary data element or the secondary data element is displayed within a user interface. In one embodiment both the primary data element and the secondary data element are displayed within the user interface. The flow then proceeds to .

At either the primary data element or the secondary data element is selected. The flow then proceeds to .

At the associated object is displayed within the user interface using either the first associated object mapping system record or the second associated object mapping system record. More specifically if the primary data element is selected the associated object is displayed within the user interface using the first associated object mapping system record. If the secondary data element is selected the associated object is displayed within the user interface using the second associated object mapping system record. In one embodiment the display of the associated object is filtered by an associated object type. The flow proceeds to .

Thus in one embodiment a system can be provided that can provide a data lineage trace of a set of data that can be stored within a data warehouse where the set of data is stored within one or more tables and where each table includes one or more data records. For a given target data element the system can identify a set of source data elements that produced the target data element where a data element includes a column of a data record. Similarly for a given source data element the system can identify an set of target data elements that are derived from the source data element as well as a path from the source data element to the set of target data elements. The data lineage trace provided by the system can further facilitate an in depth analysis of the stored data.

Further in another embodiment a system can be provided that can leverage a data lineage trace to support the visibility of associated information or associated objects that are linked to data elements and to propagate the associated information i.e. associated objects to related source data elements and target data elements. According to the embodiment the system can store both primary links and secondary links between associated objects and the data elements or data records associated with the associated object. Thus according to the embodiment an associated object such as a discrepancy can be visible both upstream of the data element and downstream of the data element within the data lineage. This associated object visibility can further facilitate an in depth analysis of the stored data.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of one embodiment some embodiments certain embodiment certain embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases one embodiment some embodiments a certain embodiment certain embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order and or with elements in configurations which are different than those which are disclosed. Therefore although the invention has been described based upon these preferred embodiments it would be apparent to those of skill in the art that certain modifications variations and alternative constructions would be apparent while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention therefore reference should be made to the appended claims.

