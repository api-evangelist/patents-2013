---

title: Optimized log storage for asynchronous log updates
abstract: A log-structured data store may implement optimized log storage for asynchronous log updates. In some embodiments, log records may be received indicating updates to data stored for a storage client and indicating positions in a log record sequence. The log records themselves may not be guaranteed to be received according to the log record sequence. Received log records may be stored in a hot log portion of a block-based storage device according to an order in which they are received. Log records in the hot log portion may then be identified to be moved to a cold log portion of the block-based storage device in order to complete a next portion of the log record sequence. Log records may be modified, such as compressed, or coalesced, before being stored together in a data block of the cold log portion according to the log record sequence.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223843&OS=09223843&RS=09223843
owner: Amazon Technologies, Inc.
number: 09223843
owner_city: Reno
owner_country: US
publication_date: 20131202
---
Log structured storage developed in order to provide a more efficient means for storing data in persistent storage devices. Data and metadata changes are sequentially recorded as log records in a log structure reducing the number of operations to persist the data and metadata changes. For systems that frequently add and or modify data such as database systems log structured storage reduces the latency for recording new data as well as modifying data already stored. Log records are typically stored in storage according to a log record sequence so that log records that are dependent upon prior log records may be processed in a correct order.

Situating log structured storage systems in a distributed system architecture may introduce various complications that blunt the efficiency of log structured storage. For example distributed storage systems may have to ensure consistency across multiple systems or devices. Various different schemes may be employed to ensure consistency. However ensuring consistency may increase the cost and or time to record new log records at the log structured storage. For example synchronous approaches may require that each log record be persisted in the distributed storage system and acknowledged back to a storage client before a next log record may be sent to be recorded. Alternatively asynchronous approaches may allow for other log records to be sent and recorded while prior log records have not yet been recorded. While changes to a log processed synchronously may be easily ordered when received at a storage node of a log structured distributed storage system if ordered according to the log record sequence asynchronous updates may prove more challenging. Acknowledgments of log records may be delayed until prior log records are received or log records may be stored out of order which burdens the storage node when it is time to perform various operations dependent on the ordering of log records.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . The words include including and includes indicate open ended relationships and therefore mean including but not limited to. Similarly the words have having and has also indicate open ended relationships and thus mean having but not limited to. The terms first second third and so forth as used herein are used as labels for nouns that they precede and do not imply any type of ordering e.g. spatial temporal logical etc. unless such an ordering is otherwise explicitly indicated.

Various components may be described as configured to perform a task or tasks. In such contexts configured to is a broad recitation generally meaning having structure that performs the task or tasks during operation. As such the component can be configured to perform the task even when the component is not currently performing that task e.g. a computer system may be configured to perform operations even when the operations are not currently being performed . In some contexts configured to may be a broad recitation of structure generally meaning having circuitry that performs the task or tasks during operation. As such the component can be configured to perform the task even when the component is not currently on. In general the circuitry that forms the structure corresponding to configured to may include hardware circuits.

Various components may be described as performing a task or tasks for convenience in the description. Such descriptions should be interpreted as including the phrase configured to. Reciting a component that is configured to perform one or more tasks is expressly intended not to invoke 35 U.S.C. 112 paragraph six interpretation for that component.

 Based On. As used herein this term is used to describe one or more factors that affect a determination. This term does not foreclose additional factors that may affect a determination. That is a determination may be solely based on those factors or based at least in part on those factors. Consider the phrase determine A based on B. While B may be a factor that affects the determination of A such a phrase does not foreclose the determination of A from also being based on C. In other instances A may be determined based solely on B.

The scope of the present disclosure includes any feature or combination of features disclosed herein either explicitly or implicitly or any generalization thereof whether or not it mitigates any or all of the problems addressed herein. Accordingly new claims may be formulated during prosecution of this application or an application claiming priority thereto to any such combination of features. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the appended claims.

Various embodiments of optimized log storage for asynchronous log updates are described herein. Log records may be received indicating changes to data or metadata maintained as part of a log structured data store. Log records may be in some embodiments ordered according to a log record sequence. For example each log record may be assigned a unique Log Sequence Number LSN which indicates that log record s position in the log record sequence. A log structured data store may implement a hot log portion of the block based storage device to store log records as they are received and a cold log portion of the block based storage device to stored log records in data blocks or in groups of data blocks such as pages according to the log record sequence. As log records may be sent to log structured storage stored and acknowledged asynchronously log records are not guaranteed to arrive in the log record sequence order. However once log records are moved from the hot log to cold log portion the log records may be stored according to the log record sequence as each data block in the cold log storage may maintain a group of log records within a range of the log record sequence that are not maintained in any other blocks e.g. LSNs 1 20 . In at least some embodiments the log records in a data block may be stored sequentially.

As illustrated in log records may be received at storage node s and stored in a hot log portion of block based storage devices. Log records may be stored in free or available data blocks or data pages of block based storage device s in the hot log portion as they are received in some embodiments. Log records may not be guaranteed to arrive and or be stored in the hot log portion according to the log record sequence and or the sequence in which they are sent . For example log record may come in the log record sequence after log records and and yet may be the first stored or received in hot log portion . In at least some embodiments log records such as and may each be acknowledged back to storage client when received. A hot log index structure may be updated to reflect the current contents of hot log . If log records are identified as garbage collectible and thus not to be moved to cold log various indicators may be updated in the hot log index structure to identify garbage collectible log records in the hot log.

In various embodiments log records may be identified to be moved to the cold log portion of block based storage device s . These log records may complete a next portion of the log record sequence that is not currently stored in cold log storage . For example illustrates that log records and may be the next 4 log records in the log record sequence not stored in cold log storage as the log record sequence in cold log storage currently ends at . These identified log records may then be read from hot log and stored together into a data block in cold log . In some embodiments log records identified for storage may be modified to generate modified versions of the log records that are then stored in cold log . For example if log records linked in a dependency chain exceed a coalesce threshold then the log records may be coalesced into a single log record including the effects of the updates from the read log records. In another example log records may each be compressed to generate compressed versions of log records to be stored in cold log .

As noted above log records in cold log may be stored according to the log record sequence as may be indicated by LSNs. For example illustrates that log records and are stored in order in data block while log records and are stored together in data block . Similarly log records and are stored together in order in data block . Log records stored in sequential order may be efficiently index in a cold log index such as by maintaining a single log record position entry sufficient to indicate positions of the log records of a data block in the log record sequence and efficiently searched such as by a binary search algorithm.

Cold log storage may be optimized to perform various different operations for the log structured data stored. Efficient replication of log records among protection group members such as discussed below with regard to may be implemented. In another example efficient garbage collection of log records from cold log storage may also be implemented as discussed below with regard to .

Please note is provided as a logical illustration of optimized log storage for asynchronous log updates and is not intended to be limiting as to the physical arrangement size or number of components modules or devices implementing a log structured data store. For example data blocks may hold varying sizes and or numbers of log records.

The specification first describes an example of a log structured data store implemented as a distributed storage service that implements optimized log storage for asynchronous log updates. The distributed storage service may store data for many different types of clients in various embodiments. One such client may be a network based database service describe in further detail below. Included in the description of the example network based database service are various aspects of the example network based database service along with the various interactions between the database service and the distributed storage service. The specification then describes a flowchart of various embodiments of methods for implementing optimized log storage for asynchronous log updates. Next the specification describes an example system that may implement the disclosed techniques. Various examples are provided throughout the specification.

The systems described herein may in some embodiments implement a network based service that enables clients e.g. subscribers to operate a data storage system in a cloud computing environment. In some embodiments the data storage system may be an enterprise class database system that is highly scalable and extensible. In some embodiments queries may be directed to database storage that is distributed across multiple physical resources and the database system may be scaled up or down on an as needed basis. The database system may work effectively with database schemas of various types and or organizations in different embodiments. In some embodiments clients subscribers may submit queries in a number of ways e.g. interactively via an SQL interface to the database system. In other embodiments external applications and programs may submit queries using Open Database Connectivity ODBC and or Java Database Connectivity JDBC driver interfaces to the database system.

More specifically the systems described herein may in some embodiments implement a service oriented architecture in which various functional components of a single database system are intrinsically distributed. For example rather than lashing together multiple complete and monolithic database instances each of which may include extraneous functionality such as an application server search functionality or other functionality beyond that required to provide the core functions of a database these systems may organize the basic operations of a database e.g. query processing transaction management caching and storage into tiers that may be individually and independently scalable. For example in some embodiments each database instance in the systems described herein may include a database tier which may include a single database engine head node and a client side storage system driver and a separate distributed storage system which may include multiple storage nodes that collectively perform some of the operations traditionally performed in the database tier of existing systems .

As described in more detail herein in some embodiments some of the lowest level operations of a database e.g. backup restore snapshot recovery log record manipulation and or various space management operations may be offloaded from the database engine to the storage layer or tier such as a distributed storage system and distributed across multiple nodes and storage devices. For example in some embodiments rather than the database engine applying changes to a database or data pages thereof and then sending the modified data pages to the storage layer the application of changes to the stored database and data pages thereof may be the responsibility of the storage layer itself. In such embodiments redo log records rather than modified data pages may be sent to the storage layer after which redo processing e.g. the application of the redo log records may be performed somewhat lazily and in a distributed manner e.g. by a background process . In some embodiments crash recovery e.g. the rebuilding of data pages from stored redo log records may also be performed by the storage layer and may also be performed by a distributed and in some cases lazy background process.

In some embodiments because only redo logs and not modified data pages are sent to the storage layer there may be much less network traffic between the database tier and the storage layer than in existing database systems. In some embodiments each redo log may be on the order of one tenth the size of the corresponding data page for which it specifies a change. Note that requests sent from the database tier and the distributed storage system may be asynchronous and that multiple such requests may be in flight at a time.

In general after being given a piece of data a primary requirement of a database is that it can eventually give that piece of data back. To do this the database may include several different components or tiers each of which performs a different function. For example a traditional database may be thought of as having three tiers a first tier for performing query parsing optimization and execution a second tier for providing transactionality recovery and durability and a third tier that provides storage either on locally attached disks or on network attached storage. As noted above previous attempts to scale a traditional database have typically involved replicating all three tiers of the database and distributing those replicated database instances across multiple machines.

In some embodiments the systems described herein may partition functionality of a database system differently than in a traditional database and may distribute only a subset of the functional components rather than a complete database instance across multiple machines in order to implement scaling. For example in some embodiments a client facing tier may be configured to receive a request specifying what data is to be stored or retrieved but not how to store or retrieve the data. This tier may perform request parsing and or optimization e.g. SQL parsing and optimization while another tier may be responsible for query execution. In some embodiments a third tier may be responsible for providing transactionality and consistency of results. For example this tier may be configured to enforce some of the so called ACID properties in particular the Atomicity of transactions that target the database maintaining Consistency within the database and ensuring Isolation between the transactions that target the database. In some embodiments a fourth tier may then be responsible for providing Durability of the stored data in the presence of various sorts of faults. For example this tier may be responsible for change logging recovery from a database crash managing access to the underlying storage volumes and or space management in the underlying storage volumes.

In various embodiments a database instance may include multiple functional components or layers each of which provides a portion of the functionality of the database instance. In one such example a database instance may include a query parsing and query optimization layer a query execution layer a transactionality and consistency management layer and a durability and space management layer. As noted above in some existing database systems scaling a database instance may involve duplicating the entire database instance one or more times including all of the example layers and then adding glue logic to stitch them together. In some embodiments the systems described herein may instead offload the functionality of durability and space management layer from the database tier to a separate storage layer and may distribute that functionality across multiple storage nodes in the storage layer.

In some embodiments the database systems described herein may retain much of the structure of the upper half of the database instance such as query parsing and query optimization layer a query execution layer and a transactionality and consistency management layer but may redistribute responsibility for at least portions of the backup restore snapshot recovery and or various space management operations to the storage tier. Redistributing functionality in this manner and tightly coupling log processing between the database tier and the storage tier may improve performance increase availability and reduce costs when compared to previous approaches to providing a scalable database. For example network and input output bandwidth requirements may be reduced since only redo log records which are much smaller in size than the actual data pages may be shipped across nodes or persisted within the latency path of write operations. In addition the generation of data pages can be done independently in the background on each storage node as foreground processing allows without blocking incoming write operations. In some embodiments the use of log structured non overwrite storage may allow backup restore snapshots point in time recovery and volume growth operations to be performed more efficiently e.g. by using metadata manipulation rather than movement or copying of a data page. In some embodiments the storage layer may also assume the responsibility for the replication of data stored on behalf of clients and or metadata associated with that data such as redo log records across multiple storage nodes. For example data and or metadata may be replicated locally e.g. within a single availability zone in which a collection of storage nodes executes on its own physically distinct independent infrastructure and or across availability zones in a single region or in different regions.

In various embodiments the database systems described herein may support a standard or custom application programming interface API for a variety of database operations. For example the API may support operations for creating a database creating a table altering a table creating a user dropping a user inserting one or more rows in a table copying values selecting data from within a table e.g. querying a table canceling or aborting a query creating a snapshot and or other operations.

In some embodiments the database tier of a database instance may include a database engine head node server that receives read and or write requests from various client programs e.g. applications and or subscribers users then parses them and develops an execution plan to carry out the associated database operation s . For example the database engine head node may develop the series of steps necessary to obtain results for complex queries and joins. In some embodiments the database engine head node may manage communications between the database tier of the database system and clients subscribers as well as communications between the database tier and a separate distributed storage system.

In some embodiments the database engine head node may be responsible for receiving SQL requests from end clients through a JDBC or ODBC interface and for performing SQL processing and transaction management which may include locking locally. However rather than generating data pages locally the database engine head node or various components thereof may generate redo log records and may ship them to the appropriate nodes of a separate distributed storage system. In some embodiments a client side driver for the distributed storage system may be hosted on the database engine head node and may be responsible for routing redo log records to the storage system node or nodes that store the segments or data pages thereof to which those redo log records are directed. For example in some embodiments each segment may be mirrored or otherwise made durable on multiple storage system nodes that form a protection group. In such embodiments the client side driver may keep track of the nodes on which each segment is stored and may route redo logs to all of the nodes on which a segment is stored e.g. asynchronously and in parallel at substantially the same time when a client request is received. As soon as the client side driver receives an acknowledgement back from a write quorum of the storage nodes in the protection group which may indicate that the redo log record has been written to the storage node it may send an acknowledgement of the requested change to the database tier e.g. to the database engine head node . For example in embodiments in which data is made durable through the use of protection groups the database engine head node may not be able to commit a transaction until and unless the client side driver receives a reply from enough storage node instances to constitute a write quorum. Similarly for a read request directed to a particular segment the client side driver may route the read request to all of the nodes on which the segment is stored e.g. asynchronously and in parallel at substantially the same time . As soon as the client side driver receives the requested data from a read quorum of the storage nodes in the protection group it may return the requested data to the database tier e.g. to the database engine head node .

In some embodiments the database tier or more specifically the database engine head node may include a cache in which recently accessed data pages are held temporarily. In such embodiments if a write request is received that targets a data page held in such a cache in addition to shipping a corresponding redo log record to the storage layer the database engine may apply the change to the copy of the data page held in its cache. However unlike in other database systems a data page held in this cache may not ever be flushed to the storage layer and it may be discarded at any time e.g. at any time after the redo log record for a write request that was most recently applied to the cached copy has been sent to the storage layer and acknowledged . The cache may implement any of various locking mechanisms to control access to the cache by at most one writer or multiple readers at a time in different embodiments. Note however that in embodiments that include such a cache the cache may not be distributed across multiple nodes but may exist only on the database engine head node for a given database instance. Therefore there may be no cache coherency or consistency issues to manage.

In some embodiments the database tier may support the use of synchronous or asynchronous read replicas in the system e.g. read only copies of data on different nodes of the database tier to which read requests can be routed. In such embodiments if the database engine head node for a given database receives a read request directed to a particular data page it may route the request to any one or a particular one of these read only copies. In some embodiments the client side driver in the database engine head node may be configured to notify these other nodes about updates and or invalidations to cached data pages e.g. in order to prompt them to invalidate their caches after which they may request updated copies of updated data pages from the storage layer .

In some embodiments the client side driver running on the database engine head node may expose a private interface to the storage tier. In some embodiments it may also expose a traditional iSCSI interface to one or more other components e.g. other database engines or virtual computing services components . In some embodiments storage for a database instance in the storage tier may be modeled as a single volume that can grow in size without limits and that can have an unlimited number of IOPS associated with it. When a volume is created it may be created with a specific size with a specific availability durability characteristic e.g. specifying how it is replicated and or with an IOPS rate associated with it e.g. both peak and sustained . For example in some embodiments a variety of different durability models may be supported and users subscribers may be able to specify for their database a number of replication copies zones or regions and or whether replication is synchronous or asynchronous based upon their durability performance and cost objectives.

In some embodiments the client side driver may maintain metadata about the volume and may directly send asynchronous requests to each of the storage nodes necessary to fulfill read requests and write requests without requiring additional hops between storage nodes. For example in some embodiments in response to a request to make a change to a database the client side driver may be configured to determine the one or more nodes that are implementing the storage for the targeted data page and to route the redo log record s specifying that change to those storage nodes. The storage nodes may then be responsible for applying the change specified in the redo log record to the targeted data page at some point in the future. As writes are acknowledged back to the client side driver the client side driver may advance the point at which the volume is durable and may acknowledge commits back to the database tier. As previously noted in some embodiments the client side driver may not ever send data pages to the storage node servers. This may not only reduce network traffic but may also remove the need for the checkpoint or background writer threads that constrain foreground processing throughput in previous database systems.

In some embodiments many read requests may be served by the database engine head node cache. However write requests may require durability since large scale failure events may be too common to allow only in memory replication. Therefore the systems described herein may be configured to minimize the cost of the redo log record write operations that are in the foreground latency path by implementing data storage in the storage tier as two regions a small append only log structured region into which redo log records are written when they are received from the database tier and a larger region in which log records are coalesced together to create new versions of data pages in the background. In some embodiments an in memory structure may be maintained for each data page that points to the last redo log record for that page backward chaining log records until an instantiated data block is referenced. This approach may provide good performance for mixed read write workloads including in applications in which reads are largely cached.

In some embodiments because accesses to the log structured data storage for the redo log records may consist of a series of sequential input output operations rather than random input output operations the changes being made may be tightly packed together. It should also be noted that in contrast to existing systems in which each change to a data page results in two input output operations to persistent data storage one for the redo log and one for the modified data page itself in some embodiments the systems described herein may avoid this write amplification by coalescing data pages at the storage nodes of the distributed storage system based on receipt of the redo log records.

As previously noted in some embodiments the storage tier of the database system may be responsible for taking database snapshots. However because the storage tier implements log structured storage taking a snapshot of a data page e.g. a data block may include recording a timestamp associated with the redo log record that was most recently applied to the data page block or a timestamp associated with the most recent operation to coalesce multiple redo log records to create a new version of the data page block and preventing garbage collection of the previous version of the page block and any subsequent log entries up to the recorded point in time. For example the log page reclamation point may be determined so that log pages storing the log entries included in the snapshot are not reclaimed as part of efficient garbage collection techniques such as those described below with regard to . In such embodiments taking a database snapshot may not require reading copying or writing the data block as would be required when employing an off volume backup strategy. In some embodiments the space requirements for snapshots may be minimal since only modified data would require additional space although user subscribers may be able to choose how much additional space they want to keep for on volume snapshots in addition to the active data set. In different embodiments snapshots may be discrete e.g. each snapshot may provide access to all of the data in a data page as of a specific point in time or continuous e.g. each snapshot may provide access to all versions of the data that existing in a data page between two points in time . In some embodiments reverting to a prior snapshot may include recording a log record to indicate that all redo log records and data pages since that snapshot are invalid and garbage collectable and discarding all database cache entries after the snapshot point. In such embodiments no roll forward may be required since the storage system will on a block by block basis apply redo log records to data blocks as requested and in the background across all nodes just as it does in normal forward read write processing. Crash recovery may thereby be made parallel and distributed across nodes.

One embodiment of a service system architecture that may be configured to implement a network based services based database service is illustrated in . In the illustrated embodiment a number of clients shown as clients may be configured to interact with a network based services platform via a network . Network based services platform may be configured to interface with one or more instances of a database service a distributed storage service and or one or more other virtual computing services . It is noted that where one or more instances of a given component may exist reference to that component herein may be made in either the singular or the plural. However usage of either form is not intended to preclude the other.

In various embodiments the components illustrated in may be implemented directly within computer hardware as instructions directly or indirectly executable by computer hardware e.g. a microprocessor or computer system or using a combination of these techniques. For example the components of may be implemented by a system that includes a number of computing nodes or simply nodes each of which may be similar to the computer system embodiment illustrated in and described below. In various embodiments the functionality of a given service system component e.g. a component of the database service or a component of the storage service may be implemented by a particular node or may be distributed across several nodes. In some embodiments a given node may implement the functionality of more than one service system component e.g. more than one database service system component .

Generally speaking clients may encompass any type of client configurable to submit network based services requests to network based services platform via network including requests for database services e.g. a request to generate a snapshot etc. . For example a given client may include a suitable version of a web browser or may include a plug in module or other type of code module configured to execute as an extension to or within an execution environment provided by a web browser. Alternatively a client e.g. a database service client may encompass an application such as a database application or user interface thereof a media application an office application or any other application that may make use of persistent storage resources to store and or access one or more databases. In some embodiments such an application may include sufficient protocol support e.g. for a suitable version of Hypertext Transfer Protocol HTTP for generating and processing network based services requests without necessarily implementing full browser support for all types of network based data. That is client may be an application configured to interact directly with network based services platform . In some embodiments client may be configured to generate network based services requests according to a Representational State Transfer REST style network based services architecture a document or message based network based services architecture or another suitable network based services architecture.

In some embodiments a client e.g. a database service client may be configured to provide access to network based services based storage of databases to other applications in a manner that is transparent to those applications. For example client may be configured to integrate with an operating system or file system to provide storage in accordance with a suitable variant of the storage models described herein. However the operating system or file system may present a different storage interface to applications such as a conventional file system hierarchy of files directories and or folders. In such an embodiment applications may not need to be modified to make use of a storage system service model. Instead the details of interfacing to network based services platform may be coordinated by client and the operating system or file system on behalf of applications executing within the operating system environment.

Clients may convey network based services requests e.g. a snapshot request parameters of a snapshot request read request restore a snapshot etc. to and receive responses from network based services platform via network . In various embodiments network may encompass any suitable combination of networking hardware and protocols necessary to establish network based based communications between clients and platform . For example network may generally encompass the various telecommunications networks and service providers that collectively implement the Internet. Network may also include private networks such as local area networks LANs or wide area networks WANs as well as public or private wireless networks. For example both a given client and network based services platform may be respectively provisioned within enterprises having their own internal networks. In such an embodiment network may include the hardware e.g. modems routers switches load balancers proxy servers etc. and software e.g. protocol stacks accounting software firewall security software etc. necessary to establish a networking link between given client and the Internet as well as between the Internet and network based services platform . It is noted that in some embodiments clients may communicate with network based services platform using a private network rather than the public Internet. For example clients may be provisioned within the same enterprise as a database service system e.g. a system that implements database service and or distributed storage service . In such a case clients may communicate with platform entirely through a private network e.g. a LAN or WAN that may use Internet based communication protocols but which is not publicly accessible .

Generally speaking network based services platform may be configured to implement one or more service endpoints configured to receive and process network based services requests such as requests to access data pages or records thereof . For example network based services platform may include hardware and or software configured to implement a particular endpoint such that an HTTP based network based services request directed to that endpoint is properly received and processed. In one embodiment network based services platform may be implemented as a server system configured to receive network based services requests from clients and to forward them to components of a system that implements database service distributed storage service and or another virtual computing service for processing. In other embodiments network based services platform may be configured as a number of distinct systems e.g. in a cluster topology implementing load balancing and other request management features configured to dynamically manage large scale network based services request processing loads. In various embodiments network based services platform may be configured to support REST style or document based e.g. SOAP based types of network based services requests.

In addition to functioning as an addressable endpoint for clients network based services requests in some embodiments network based services platform may implement various client management features. For example platform may coordinate the metering and accounting of client usage of network based services including storage resources such as by tracking the identities of requesting clients the number and or frequency of client requests the size of data tables or records thereof stored or retrieved on behalf of clients overall storage bandwidth used by clients class of storage requested by clients or any other measurable client usage parameter. Platform may also implement financial accounting and billing systems or may maintain a database of usage data that may be queried and processed by external systems for reporting and billing of client usage activity. In certain embodiments platform may be configured to collect monitor and or aggregate a variety of storage service system operational metrics such as metrics reflecting the rates and types of requests received from clients bandwidth utilized by such requests system processing latency for such requests system component utilization e.g. network bandwidth and or storage utilization within the storage service system rates and types of errors resulting from requests characteristics of stored and requested data pages or records thereof e.g. size data type etc. or any other suitable metrics. In some embodiments such metrics may be used by system administrators to tune and maintain system components while in other embodiments such metrics or relevant portions of such metrics may be exposed to clients to enable such clients to monitor their usage of database service distributed storage service and or another virtual computing service or the underlying systems that implement those services .

In some embodiments network based services platform may also implement user authentication and access control procedures. For example for a given network based services request to access a particular database platform may be configured to ascertain whether the client associated with the request is authorized to access the particular database. Platform may determine such authorization by for example evaluating an identity password or other credential against credentials associated with the particular database or evaluating the requested access to the particular database against an access control list for the particular database. For example if a client does not have sufficient credentials to access the particular database platform may reject the corresponding network based services request for example by returning a response to the requesting client indicating an error condition. Various access control policies may be stored as records or lists of access control information by database service distributed storage service and or other virtual computing services .

It is noted that while network based services platform may represent the primary interface through which clients may access the features of a database system that implements database service it need not represent the sole interface to such features. For example an alternate API that may be distinct from a network based services interface may be used to allow clients internal to the enterprise providing the database system to bypass network based services platform . Note that in many of the examples described herein distributed storage service may be internal to a computing system or an enterprise system that provides database services to clients and may not be exposed to external clients e.g. users or client applications . In such embodiments the internal client e.g. database service may access distributed storage service over a local or private network shown as the solid line between distributed storage service and database service e.g. through an API directly between the systems that implement these services . In such embodiments the use of distributed storage service in storing databases on behalf of clients may be transparent to those clients. In other embodiments distributed storage service may be exposed to clients through network based services platform to provide storage of databases or other information for applications other than those that rely on database service for database management. This is illustrated in by the dashed line between network based services platform and distributed storage service . In such embodiments clients of the distributed storage service may access distributed storage service via network e.g. over the Internet . In some embodiments a virtual computing service may be configured to receive storage services from distributed storage service e.g. through an API directly between the virtual computing service and distributed storage service to store objects used in performing computing services on behalf of a client . This is illustrated in by the dashed line between virtual computing service and distributed storage service . In some cases the accounting and or credentialing services of platform may be unnecessary for internal clients such as administrative clients or between service components within the same enterprise.

Although not illustrated in various embodiments distributed storage service may be configured to interface with backup data store system service or device. Various data such as data pages log records and or any other data maintained by distributed storage service internal clients such as database service or other virtual computing services and or external clients such as clients through may be sent to a backup data store.

Note that in various embodiments different storage policies may be implemented by database service and or distributed storage service . Examples of such storage policies may include a durability policy e.g. a policy indicating the number of instances of a database or data page thereof that will be stored and the number of different nodes on which they will be stored and or a load balancing policy which may distribute databases or data pages thereof across different nodes volumes and or disks in an attempt to equalize request traffic . In addition different storage policies may be applied to different types of stored items by various one of the services. For example in some embodiments distributed storage service may implement a higher durability for redo log records than for data pages.

As previously noted each database instance may include a single database engine head node that receives requests e.g. a snapshot request etc. from various client programs e.g. applications and or subscribers users then parses them optimizes them and develops an execution plan to carry out the associated database operation s . In the example illustrated in a query parsing optimization and execution component of database engine head node may perform these functions for queries that are received from database client and that target the database instance of which database engine head node is a component. In some embodiments query parsing optimization and execution component may return query responses to database client which may include write acknowledgements requested data pages or portions thereof error messages and or other responses as appropriate. As illustrated in this example database engine head node may also include a client side storage service driver which may route read requests and or redo log records to various storage nodes within distributed storage service receive write acknowledgements from distributed storage service receive requested data pages from distributed storage service and or return data pages error messages or other responses to query parsing optimization and execution component which may in turn return them to database client .

In this example database engine head node includes a data page cache in which data pages that were recently accessed may be temporarily held. As illustrated in database engine head node may also include a transaction and consistency management component which may be responsible for providing transactionality and consistency in the database instance of which database engine head node is a component. For example this component may be responsible for ensuring the Atomicity Consistency and Isolation properties of the database instance and the transactions that are directed that the database instance. As illustrated in database engine head node may also include a transaction log and an undo log which may be employed by transaction and consistency management component to track the status of various transactions and roll back any locally cached results of transactions that do not commit.

Note that each of the other database engine head nodes illustrated in e.g. and may include similar components and may perform similar functions for queries received by one or more of database clients and directed to the respective database instances of which it is a component.

In some embodiments the distributed storage systems described herein may organize data in various logical volumes segments and pages for storage on one or more storage nodes. For example in some embodiments each database is represented by a logical volume and each logical volume is segmented over a collection of storage nodes. Each segment which lives on a particular one of the storage nodes contains a set of contiguous block addresses. In some embodiments each data page is stored in a segment such that each segment stores a collection of one or more data pages and a change log also referred to as a redo log e.g. a log of redo log records for each data page that it stores. As described in detail herein the storage nodes may be configured to receive redo log records which may also be referred to herein as ULRs and to coalesce them to create new versions of the corresponding data pages and or additional or replacement log records e.g. lazily and or in response to a request for a data page or a database crash . In some embodiments data pages and or change logs may be mirrored across multiple storage nodes according to a variable configuration which may be specified by the client on whose behalf the databases are being maintained in the database system . For example in different embodiments one two or three copies of the data or change logs may be stored in each of one two or three different availability zones or regions according to a default configuration an application specific durability preference or a client specified durability preference.

As used herein the following terms may be used to describe the organization of data by a distributed storage system according to various embodiments.

Volume A volume is a logical concept representing a highly durable unit of storage that a user client application of the storage system understands. More specifically a volume is a distributed store that appears to the user client application as a single consistent ordered log of write operations to various user pages of a database. Each write operation may be encoded in a User Log Record ULR which represents a logical ordered mutation to the contents of a single user page within the volume. As noted above a ULR may also be referred to herein as a redo log record. Each ULR may include a unique identifier e.g. a Logical Sequence Number LSN . Each ULR may be persisted to one or more synchronous segments in the distributed store that form a Protection Group PG to provide high durability and availability for the ULR. A volume may provide an LSN type read write interface for a variable size contiguous range of bytes.

In some embodiments a volume may consist of multiple extents each made durable through a protection group. In such embodiments a volume may represent a unit of storage composed of a mutable contiguous sequence of Volume Extents. Reads and writes that are directed to a volume may be mapped into corresponding reads and writes to the constituent volume extents. In some embodiments the size of a volume may be changed by adding or removing volume extents from the end of the volume.

Segment A segment is a limited durability unit of storage assigned to a single storage node. More specifically a segment provides limited best effort durability e.g. a persistent but non redundant single point of failure that is a storage node for a specific fixed size byte range of data. This data may in some cases be a mirror of user addressable data or it may be other data such as volume metadata or erasure coded bits in various embodiments. A given segment may live on exactly one storage node. Within a storage node multiple segments may live on each SSD and each segment may be restricted to one SSD e.g. a segment may not span across multiple SSDs . In some embodiments a segment may not be required to occupy a contiguous region on an SSD rather there may be an allocation map in each SSD describing the areas that are owned by each of the segments. As noted above a protection group may consist of multiple segments spread across multiple storage nodes. In some embodiments a segment may provide an LSN type read write interface for a fixed size contiguous range of bytes where the size is defined at creation . In some embodiments each segment may be identified by a Segment UUID e.g. a universally unique identifier of the segment .

Storage page A storage page is a block of memory generally of fixed size. In some embodiments each page is a block of memory e.g. of virtual memory disk or other physical memory of a size defined by the operating system and may also be referred to herein by the term data block . More specifically a storage page may be a set of contiguous sectors. It may serve as the unit of allocation in SSDs as well as the unit in log pages for which there is a header and metadata. In some embodiments and in the context of the database systems described herein the term page or storage page may refer to a similar block of a size defined by the database configuration which may typically a multiple of 2 such as 4096 8192 16384 or 32768 bytes.

Log page A log page is a type of storage page that is used to store log records e.g. redo log records or undo log records . In some embodiments log pages may be identical in size to storage pages. Each log page may include a header containing metadata about that log page e.g. metadata identifying the segment to which it belongs. Note that a log page is a unit of organization and may not necessarily be the unit of data included in write operations. For example in some embodiments during normal forward processing write operations may write to the tail of the log one sector at a time.

Log Records Log records e.g. the individual elements of a log page may be of several different classes. For example User Log Records ULRs which are created and understood by users clients applications of the storage system may be used to indicate changes to user data in a volume. Control Log Records CLRs which are generated by the storage system may contain control information used to keep track of metadata such as the current unconditional volume durable LSN VDL . Null Log Records NLRs may in some embodiments be used as padding to fill in unused space in a log sector or log page. In some embodiments there may be various types of log records within each of these classes and the type of a log record may correspond to a function that needs to be invoked to interpret the log record. For example one type may represent all the data of a user page in compressed format using a specific compression format a second type may represent new values for a byte range within a user page a third type may represent an increment operation to a sequence of bytes interpreted as an integer and a fourth type may represent copying one byte range to another location within the page. In some embodiments log record types may be identified by GUIDs rather than by integers or enums which may simplify versioning and development especially for ULRs.

Payload The payload of a log record is the data or parameter values that are specific to the log record or to log records of a particular type. For example in some embodiments there may be a set of parameters or attributes that most or all log records include and that the storage system itself understands. These attributes may be part of a common log record header structure which may be relatively small compared to the sector size. In addition most log records may include additional parameters or data specific to that log record type and this additional information may be considered the payload of that log record. In some embodiments if the payload for a particular ULR is larger than the user page size it may be replaced by an absolute ULR an AULR whose payload includes all the data for the user page. This may enable the storage system to enforce an upper limit on the size of the payload for ULRs that is equal to the size of user pages.

Note that when storing log records in the segment log the payload may be stored along with the log header in some embodiments. In other embodiments the payload may be stored in a separate location and pointers to the location at which that payload is stored may be stored with the log header. In still other embodiments a portion of the payload may be stored in the header and the remainder of the payload may be stored in a separate location. If the entire payload is stored with the log header this may be referred to as in band storage otherwise the storage may be referred to as being out of band. In some embodiments the payloads of most large AULRs may be stored out of band in the cold zone of log which is described below .

User pages User pages are the byte ranges of a fixed size and alignments thereof for a particular volume that are visible to users clients of the storage system. User pages are a logical concept and the bytes in particular user pages may or not be stored in any storage page as is. The size of the user pages for a particular volume may be independent of the storage page size for that volume. In some embodiments the user page size may be configurable per volume and different segments on a storage node may have different user page sizes. In some embodiments user page sizes may be constrained to be a multiple of the sector size e.g. 4 KB and may have an upper limit e.g. 64 KB . The storage page size on the other hand may be fixed for an entire storage node and may not change unless there is a change to the underlying hardware.

Data page A data page is a type of storage page that is used to store user page data in compressed form. In some embodiments every piece of data stored in a data page is associated with a log record and each log record may include a pointer to a sector within a data page also referred to as a data sector . In some embodiments data pages may not include any embedded metadata other than that provided by each sector. There may be no relationship between the sectors in a data page. Instead the organization into pages may exist only as an expression of the granularity of the allocation of data to a segment.

Storage node A storage node is a single virtual machine that on which storage node server code is deployed. Each storage node may contain multiple locally attached SSDs and may provide a network API for access to one or more segments. In some embodiments various nodes may be on an active list or on a degraded list e.g. if they are slow to respond or are otherwise impaired but are not completely unusable . In some embodiments the client side driver may assist in or be responsible for classifying nodes as active or degraded for determining if and when they should be replaced and or for determining when and how to redistribute data among various nodes based on observed performance.

SSD As referred to herein the term SSD may refer to a local block storage volume as seen by the storage node regardless of the type of storage employed by that storage volume e.g. disk a solid state drive a battery backed RAM a non volatile RAM device e.g. one or more NV DIMMs or another type of persistent storage device. An SSD is not necessarily mapped directly to hardware. For example a single solid state storage device might be broken up into multiple local volumes where each volume is split into and striped across multiple segments and or a single drive may be broken up into multiple volumes simply for ease of management in different embodiments. In some embodiments each SSD may store an allocation map at a single fixed location. This map may indicate which storage pages that are owned by particular segments and which of these pages are log pages as opposed to data pages . In some embodiments storage pages may be pre allocated to each segment so that forward processing may not need to wait for allocation. Any changes to the allocation map may need to be made durable before newly allocated storage pages are used by the segments.

One embodiment of a distributed storage system is illustrated by the block diagram in . Although discussed in the context of the interacting with database system distributed storage system may more broadly illustrate the various components of a distributed storage system implementing log structured storage. Thus storage system server nodes through may each implement optimized log storage for asynchronous log updates as discussed in further detail below with regard to B and . In some embodiments storage nodes may perform garbage collection at the same or near the same time i.e. synchronously or independently asynchronously from one another. A centralized authority such as volume manager which may be another node or instance implemented for the distribute storage system such as on one or more computing devices such as computer system described below with regard to or other module may determine a log reclamation point for the storage nodes according to the various methods and techniques discussed below with regard to and broadcast the log reclamation point to the storage nodes upon a change increment or other modification of the log reclamation point in various embodiments. For example volume manager may direct detect and or determine the archival of log records and or other data maintained by distributed storage system to backup data storage and determine a log reclamation point such that data blocks containing log records that are currently archived may be garbage collected. Volume manager may then send a Garbage Collection LSN GCL to indicate the log reclamation point to storage nodes . Volume manager may also implement various other techniques such as those described below with regard to in order to determine a reclamation point for the log page reclamation point. In some embodiments storage nodes may also determine the log reclamation point such as by requesting the log reclamation point from volume manager or querying other storage nodes to reach a consensus on log records that may be garbage collected.

In at least some embodiments storage nodes may store data for different clients as part of a multi tenant storage service. For example the various segments discussed above and below with regard to may correspond to different protection groups and volumes for different clients. As noted above some storage nodes may perform garbage collection independent from other storage nodes. Consider the scenario where a storage node maintains data for two different clients. One client s data may be actively accessed modified causing the log structure for that data to grow quickly. Though the other data maintained for the other client may be accessed infrequently garbage collection may be performed to reclaim data blocks storing log records for the other data in order to make more data blocks available for the more active log.

In some embodiments a database system may be a client of distributed storage system which communicates with a database engine head node over interconnect . As in the example illustrated in database engine head node may include a client side storage service driver . In this example distributed storage system includes multiple storage system server nodes including those shown as and each of which includes storage for data pages and redo logs for the segment s it stores and hardware and or software configured to perform various segment management functions. For example each storage system server node may include hardware and or software configured to perform at least a portion of any or all of the following operations replication locally e.g. within the storage node coalescing of redo logs to generate data pages snapshots e.g. creating restoration deletion etc. log management e.g. manipulating log records crash recovery and or space management e.g. for a segment . Each storage system server node may also have multiple attached storage devices e.g. SSDs on which data blocks may be stored on behalf of clients e.g. users client applications and or database service subscribers .

In the example illustrated in storage system server node includes data page s segment redo log s segment management functions and attached SSDs . Again note that the label SSD may or may not refer to a solid state drive but may more generally refer to a local block based storage volume regardless of its underlying hardware. Similarly storage system server node includes data page s segment redo log s segment management functions and attached SSDs and storage system server node includes data page s segment redo log s segment management functions and attached SSDs .

As previously noted in some embodiments a sector is the unit of alignment on an SSD and may be the maximum size on an SSD that can be written without the risk that the write will only be partially completed. For example the sector size for various solid state drives and spinning media may be 4 KB. In some embodiments of the distributed storage systems described herein each and every sector may include have a 64 bit 8 byte CRC at the beginning of the sector regardless of the higher level entity of which the sector is a part. In such embodiments this CRC which may be validated every time a sector is read from SSD may be used in detecting corruptions. In some embodiments each and every sector may also include a sector type byte whose value identifies the sector as a log sector a data sector or an uninitialized sector. For example in some embodiments a sector type byte value of 0 may indicate that the sector is uninitialized.

In some embodiments each of the storage system server nodes in the distributed storage system may implement a set of processes running on the node server s operating system that manage communication with the database engine head node e.g. to receive redo logs send back data pages etc. In some embodiments all data blocks written to the distributed storage system may be backed up to long term and or archival storage e.g. in a remote key value durable backup storage system .

In this example one or more client processes may send database query requests which may include read and or write requests targeting data stored on one or more of the storage nodes to database tier components and may receive database query responses from database tier components e.g. responses that include write acknowledgements and or requested data . Each database query request that includes a request to write to a data page may be parsed and optimized to generate one or more write record requests which may be sent to client side driver for subsequent routing to distributed storage system . In this example client side driver may generate one or more redo log records corresponding to each write record request and may send them to specific ones of the storage nodes of distributed storage system . Distributed storage system may return a corresponding write acknowledgement for each redo log record to database engine specifically to client side driver . Client side driver may pass these write acknowledgements to database tier components as write responses which may then send corresponding responses e.g. write acknowledgements to one or more client processes as one of database query responses .

In this example each database query request that includes a request to read a data page may be parsed and optimized to generate one or more read record requests which may be sent to client side driver for subsequent routing to distributed storage system . In this example client side driver may send these requests to specific ones of the storage nodes of distributed storage system and distributed storage system may return the requested data pages to database engine specifically to client side driver . In at least some embodiments the requested data pages may be serviced from a data page entry in a backstop data structure maintained at a storage node that maintains the data. Client side driver may send the returned data pages to the database tier components as return data records and database tier components may then send the data pages to one or more client processes as database query responses .

In some embodiments various error and or data loss messages may be sent from distributed storage system to database engine specifically to client side driver . These messages may be passed from client side driver to database tier components as error and or loss reporting messages and then to one or more client processes along with or instead of a database query response .

In some embodiments the APIs of distributed storage system and the APIs of client side driver may expose the functionality of the distributed storage system to database engine as if database engine were a client of distributed storage system . For example database engine through client side driver may write redo log records or request data pages through these APIs to perform or facilitate the performance of various operations of the database system implemented by the combination of database engine and distributed storage system e.g. storage access change logging recovery and or space management operations . As illustrated in distributed storage system may store data blocks on storage nodes each of which may have multiple attached SSDs. In some embodiments distributed storage system may provide high durability for stored data block through the application of various types of redundancy schemes.

In at least some embodiments a synchronization or replication technique may be implemented to ensure that storage nodes of protection group may catch up to the same or similar version of data. discussed in further detail below illustrates various methods and techniques that may be implemented to replicate log records among storage nodes in a protection group. The log records stored in the cold log portion may be evaluated to determine a completion point for log records maintained at a particular storage node. A completion point may be the point in the log record sequence for which the log records are maintained at the storage node have no holes or gaps for missing log records. As the cold log portion may store log records in data blocks according to the log record sequence the first gap or missing log record may be easily identified such as at the end of a respective data block storing log records. Indexing structures for the cold log portion may be maintained which may be searched to determine the completion point. Based on the sequence completion points storage nodes such as storage node may identify another storage node that is further advanced in the log record sequence such as and request log records from to complete the log record sequence at up to the sequence completion point at . This replication process may be performed amongst the storage nodes of protection group in the background while still processing and responding to the various requests illustrated in . In various embodiments the log records that are received from other storage nodes may be directly stored to the cold log portion of the block based storage device by passing the hot log portion altogether as illustrated at . However in other embodiments log records may be sent to other storage nodes and first placed in the hot log portion.

Note that in various embodiments the API calls and responses between database engine and distributed storage system e.g. APIs and or the API calls and responses between client side driver and database tier components e.g. APIs in may be performed over a secure proxy connection e.g. one managed by a gateway control plane or may be performed over the public network or alternatively over a private channel such as a virtual private network VPN connection. These and other APIs to and or between components of the database systems described herein may be implemented according to different technologies including but not limited to Simple Object Access Protocol SOAP technology and Representational state transfer REST technology. For example these APIs may be but are not necessarily implemented as SOAP APIs or RESTful APIs. SOAP is a protocol for exchanging information in the context of network based services. REST is an architectural style for distributed hypermedia systems. A RESTful API which may also be referred to as a RESTful network based service is a network based service API implemented using HTTP and REST technology. The APIs described herein may in some embodiments be wrapped with client libraries in various languages including but not limited to C C Java C and Perl to support integration with database engine and or distributed storage system .

As noted above in some embodiments the functional components of a database system may be partitioned between those that are performed by the database engine and those that are performed in a separate distributed storage system. In one specific example in response to receiving a request from a client process or a thread thereof to insert something into a database e.g. to update a single data block by adding a record to that data block one or more components of the database engine head node may perform query parsing optimization and execution and may send each portion of the query to a transaction and consistency management component. The transaction and consistency management component may ensure that no other client process or thread thereof is trying to modify the same row at the same time. For example the transaction and consistency management component may be responsible for ensuring that this change is performed atomically consistently durably and in an isolated manner in the database. For example the transaction and consistency management component may work together with the client side storage service driver of the database engine head node to generate a redo log record to be sent to one of the nodes in the distributed storage service and to send it to the distributed storage service along with other redo logs generated in response to other client requests in an order and or with timing that ensures the ACID properties are met for this transaction. Upon receiving the redo log record which may be considered an update record by the storage service the corresponding storage node may update the data block and may update a redo log for the data block e.g. a record of all changes directed to the data block . In some embodiments the database engine may be responsible for generating an undo log record for this change and may also be responsible for generating a redo log record for the undo log both of which may be used locally in the database tier for ensuring transactionality. However unlike in traditional database systems the systems described herein may shift the responsibility for applying changes to data blocks to the storage system rather than applying them at the database tier and shipping the modified data blocks to the storage system .

A variety of different allocation models may be implemented for an SSD in different embodiments. For example in some embodiments log entry pages and physical application pages may be allocated from a single heap of pages associated with an SSD device. This approach may have the advantage of leaving the relative amount of storage consumed by log pages and data pages to remain unspecified and to adapt automatically to usage. It may also have the advantage of allowing pages to remain unprepared until they are used and repurposed at will without preparation. In other embodiments an allocation model may partition the storage device into separate spaces for log entries and data pages. Once such allocation model is illustrated by the block diagram in and described below.

In allocation approach illustrated in valid log pages may be packed into the beginning of the flat storage space. Holes that open up due to log pages being freed may be reused before additional log page slots farther into the address space are used. For example in the worst case the first n log page slots contain valid log data where n is the largest number of valid log pages that have ever simultaneously existed. In this example valid data pages may be packed into the end of the flat storage space. Holes that open up due to data pages being freed may be reused before additional data page slots lower in the address space are used. For example in the worst case the last m data pages contain valid data where m is the largest number of valid data pages that have ever simultaneously existed.

In some embodiments before a log page slot can become part of the potential set of valid log page entries it may need to be initialized to a value that cannot be confused for a valid future log entry page. This is implicitly true for recycled log page slots since a retired log page has enough metadata to never be confused for a new valid log page. However when a storage device is first initialized or when space is reclaimed that had potentially been used to store application data pages the log page slots may need to be initialized before they are added to the log page slot pool. In some embodiments rebalancing reclaiming log space may be performed as a background task.

In the example illustrated in the current log page slot pool includes the area between the first usable log page slot and the last reserved log page slot. In some embodiments this pool may safely grow up to last usable log page slot without re initialization of new log page slots e.g. by persisting an update to the pointer that identifies the last reserved log page slot . In this example beyond the last usable log page slot the pool may grow up to the first used data page slot by persisting initialized log page slots and persistently updating the pointer for the last usable log page slot. In this example the previously uninitialized and unassigned portion of the SSD storage space shown as may be pressed into service to store log pages. In some embodiments the current log page slot pool may be shrunk down to the position of the last used log page slot which is identified by pointer by persisting an update to the pointer for the last reserved log page slot.

In the example illustrated in the current data page slot pool includes the area between the last usable log page slot and the end of SSD storage space . In some embodiments the data page pool may be safely grown to the position identified by the pointer to the last reserved log page slot by persisting an update to the pointer to the last usable log page slot. In this example the previously initialized but unassigned portion of the SSD storage space shown as may be pressed into service to store data pages. Beyond this the pool may be safely grown to the position identified by the pointer to the last used log page slot by persisting updates to the pointers for the last reserved log page slot and the last usable log page slot effectively reassigning the portions of SSD storage space shown as and to store data pages rather than log pages. In some embodiments the data page slot pool may be safely shrunk down to the position identified by the pointer to the first used data page slot by initializing additional log page slots and persisting an update to the pointer to the last usable log page slot.

In embodiments that employ the allocation approach illustrated in page sizes for the log page pool and the data page pool may be selected independently while still facilitating good packing behavior. In such embodiments there may be no possibility of a valid log page linking to a spoofed log page formed by application data and it may be possible to distinguish between a corrupted log and a valid log tail that links to an as yet unwritten next page. In embodiments that employ the allocation approach illustrated in at startup all of the log page slots up to the position identified by the pointer to the last reserved log page slot may be rapidly and sequentially read and the entire log index may be reconstructed including inferred linking ordering . In such embodiments there may be no need for explicit linking between log pages since everything can be inferred from LSN sequencing constraints.

In some embodiments a segment may consist of different parts or zones one that contains a hot log one that contains a cold log one that contains user page data and a base page portion that includes an entry corresponding to an oldest or historical version of each user data page. Zones are not necessarily contiguous regions of an SSD. Rather they can be interspersed at the granularity of the storage page or a data block . In addition there may be a root page for each segment that stores metadata about the segment and its properties. For example the root page for a segment may store the user page size for the segment the number of user pages in the segment the current beginning head of the hot log zone which may be recorded in the form of a flush number the volume epoch access control metadata and or base page storage metadata or location information.

In some embodiments the hot log zone may accept new writes from the client as they are received by the storage node. Both Delta User Log Records DULRs which specify a change to a user data page in the form of a delta from the previous version of the page and Absolute User Log Records AULRs which specify the contents of a complete user data page may be written completely into the log. Log records may be added to this zone in approximately the order they are received e.g. they are not sorted by LSN and they can span across log pages. The log records may be self describing e.g. they may contain an indication of their own size. In some embodiments no garbage collection is performed in this zone. Instead space may be reclaimed by truncating from the beginning of the log after all required log records have been copied into the cold log. Log sectors in the hot zone may be annotated with the most recent known unconditional VDL each time a sector is written. Conditional VDL CLRs may be written into the hot zone as they are received but only the most recently written VDL CLR may be meaningful. Thus VSL CLRs may in some embodiments be marked as garbage collectible in the hot log and not moved to cold log storage.

In some embodiments every time a new log page is written it may be assigned a flush number. The flush number may be written as part of every sector within each log page. Flush numbers may be used to determine which log page was written later when comparing two log pages. Flush numbers are monotonically increasing and scoped to an SSD or storage node . For example a set of monotonically increasing flush numbers is shared between all segments on an SSD or all segments on a storage node .

In some embodiments in the cold log zone log records may be stored in increasing order of their LSNs. In this zone AULRs may not necessarily store data in line depending on their size. For example if they have large payloads all or a portion of the payloads may be stored in the data zone and they may point to where their data is stored in the data zone. In some embodiments log pages in the cold log zone may be written one full page at a time rather than sector by sector. Because log pages in the cold zone are written a full page at a time any log page in the cold zone for which the flush numbers in all sectors are not identical may be considered to be an incompletely written page and may be ignored. In some embodiments in the cold log zone DULRs may be able to span across log pages up to a maximum of two log pages . However AULRs may not be able to span log sectors e.g. so that a coalesce operation will be able to replace a DULR with an AULR in a single atomic write.

Base page storage may store the current or historical versions of user data pages in entries corresponding to user data pages. For example a user page table or other index may include pointers links addresses or some other form of mapping information or identifiers that lead to entries corresponding to particular user data pages. In some embodiments individual entries may vary with some entries comprising one or more data blocks or pages while others comprise less than a block or page. Alternatively in some other embodiments each entry corresponding to a user page may be a fixed same size such as 1 page. The data stored in entries may be compressed and or encrypted according to user and or system preference.

In some embodiments the distributed storage systems described herein may maintain various data structures in memory. For example for each user page present in a segment a user page table may store a bit indicating whether or not this user page is cleared i.e. whether it includes all zeroes the LSN of the latest log record from the cold log zone for the page and an array list of locations of all log records from the hot log zone for page. For each log record the user page table may store the sector number the offset of the log record within that sector the number of sectors to read within that log page the sector number of a second log page if the log record spans log pages and the number of sectors to read within that log page. In some embodiments the user page table may also store the LSNs of every log record from the cold log zone and or an array of sector numbers for the payload of the latest AULR if it is in the cold log zone.

In various embodiments efficient garbage collection may be implemented to reclaim data blocks from the cold log zone. is a data flow diagram illustrating optimized log structured storage for asynchronous updates according to some embodiments. As noted above log records received at a storage node may be stored in a hot log zone . Log records may be received out of order appended to the hot log zone as they are received. For example in the ordering of log records proceeds from record then and finally contrary to a sequential ordering which might start with to . Log records sent to a distributed storage system such as described above in may be sent asynchronously leading to log records received out of order at hot log .

As discussed above log records may be moved from the hot log to the cold log . The cold log zone is populated by copying log records from the hot log zone. In some embodiments only log records whose LSN is less than or equal to the current unconditional volume durable LSN VDL or some other completion point such as segment completion point SCL may be eligible to be copied to the cold log zone. When moving log records from the hot log zone to the cold log zone some log records such as many CLRs may not need to be copied because they are no longer necessary. In addition some additional coalescing of user pages may be performed at this point as illustrated at which may reduce the amount of copying required. For example multiple DULRs may be coalesced to generate a single AULR. In addition to coalescing in some embodiments log records may be compressed according to various compression techniques that may be implemented by compression engine . For example various different loss less compression techniques may be performed to generate compressed versions of log records which may be tightly packed into a data block. In some embodiments log records stored in data blocks may be grouped together in log pages although in the discussion with regard to illustrates data blocks . In some embodiments once a given hot zone block has been completely written and is no longer the newest hot zone data block and all ULRs on the hot zone data block have been successfully copied to the cold log zone the hot zone data block may be freed and identified as garbage collectible. In some embodiments garbage collection may be performed on hot log at the end of the log and thus available storage space in the hot log portion may not be reclaimed until surrounding log records are also deemed collectible. Consider the example illustrated in . Log records and make up the next four log records in the log record sequence to be persisted after log record . Log record may for example be less than the current unconditional VDL or SCL and thus as illustrated by the dashed line log records and may be stored in a new data block in cold log as well one or more log records linked to the same user page may be coalesced and along with all the log records sent to the cold log portion compressed .

Cold log zone may in various embodiments maintain log records for a log structured data store in data blocks such as data blocks described above. Data blocks and for example each maintain different log records and respectively. The log records of which many various descriptions presented above may be AULRs DULRs or any other type of log record for the example distributed storage system described above or any other log structured data store. These log records may be linked to or associated with a data page. For example a log record may describe an update change modification for some portion or all of the data page such as change relative to a previous record or version of the data page e.g. a DULR . In some embodiments log records may be stored sequentially in data blocks. Thus the latest LSN in the ordering of log records maintained in a data block may indicate that all log records in the log page are prior to the latest LSN. Note that although data blocks are illustrated as containing the same number of log records the number of log records stored in a data block may vary and thus the illustration in is not intended to be limiting.

Base page storage similar to base page storage above may maintain entries or versions of user pages through . For example each entry in base page storage may maintain a replica or copy of the respective user page. In some embodiments each entry may be compressed encrypted or otherwise modified. Other data such as other log records linked to the data page may also be stored with the data page in the entry for the data page in backstop .

A storage node or other system maintaining cold log may determine when to perform reclamation for log pages storing log records in cold log such as detecting a reclamation event or receiving an indication to reclaim data blocks. For example the workload of a storage node such as the amount of foreground processing being performed e.g. servicing write requests or read requests may fall below a workload threshold or some other measure which may indicate that operational resources are available to perform data block reclamation. In some embodiments available storage space such as the number of pages available to store new data such as log records user data or any other data may be implemented. A storage node may also receive an indication or instruction to perform reclamation of log pages from another system or component of the distributed storage system such as volume manager discussed above with regard to .

The log records in cold log may then be evaluated to identify data blocks to reclaim based at least in part on a cold log reclamation point . In some embodiments of the distributed storage systems described herein an LSN index may be stored in memory. An LSN index may map LSNs to data blocks within the cold log zone. Given that log records in cold log zone are sorted the index may include one entry per data block. However in some embodiments every non obsolete LSN may be identified in the index and mapped to the corresponding sector numbers offsets and numbers of sectors for each log record.

In some embodiments of the distributed storage systems described herein a log page table may be stored in memory and the log page table may be used during garbage collection of the cold log zone. For example the log page table may identify which log records are obsolete e.g. which log records can be garbage collected and how much free space is available on each log page. As noted above in some embodiments groups of data blocks storing log records may be grouped together into log pages upon which the various efficient garbage collection techniques may be performed in order to reclaim one or more whole log pages at a time.

As noted above log reclamation point may be determined in different ways. For example in some embodiments log reclamation point may be a garbage collection LSN GCL or some other indicator that is received from another storage system component such as volume manager in . The GCL may indicate that log records prior to the GCL i.e. log records with lower LSNs may have already been backed up to a data archive. For example as illustrated in other virtual computing services may be a network based data archive to which distributed storage service may backup data to. Other data archive systems may also be implemented. A GCL may also be generated in response to user client storage action such as the creation of a snapshot of the database. A snapshot may be an indication that versions of data indicated by log records prior to the data pages may not need to be preserved at the storage node. Log reclamation point may also be determined based at least in part on service level agreement protocol or some other data retention policy for preserving data. Storage nodes storing a segment may enforce the service level agreement protocol or schema individual or concert with the distributed storage system such as via a volume manager.

In various embodiments the evaluation of the log records in the cold log may be performed by comparing the most recent log record e.g. in a particular data block with log reclamation point as the log records in a data block may be sorted according to their sequence. Alternatively in some embodiments mapping information such as an index such as the index described in further detail below or other data structure may include information such as the range of log records located in a particular data block thus cold log may be evaluated by evaluating the index structure for the cold log . Data blocks that are identified as maintaining log records in the log record sequence prior to the log reclamation point may be identified for reclamation.

For data blocks that have been identified for reclamation the log records from the data block may be obtained and used to generate a new version of the respective user pages to which they are linked. As illustrated in the newly generated versions of data pages may be stored in entries for the respective data pages in base page storage . In some embodiments the log records may be applied to a previous version of the page to which they are linked and then a new version of the page may be generated. Log records may also indicate a new value for the data page or the entire data page itself e.g. AULR . Please note that the records log pages data pages etc. illustrated in are provided for illustrative purposes only and are not intended to be limiting. For example log pages may contain different numbers of log records. Moreover log pages may not be laid out in sequential order in physical storage.

Data blocks identified for reclamation such as data block may be reclaimed. The log records in the data block may be read. Then the changes indicated by the log record may be applied to a previous version of a user data page to which they are linked. For example if the log record indicates that a particular record value is to state blue instead of the prior value of red then the version of the user data page with the prior value read may also be obtained read and the new value blue written in to replace red. This process and or similar processes of applying log records in identified data blocks may ultimately generate new versions of user pages which may then be stored in their corresponding entries in base page storage . For example multiple log records in data blocks being reclaimed may be linked to the same user page. For example each log record may be updating the same record value e.g. daily sales . Each of the log records in data blocks being reclaimed may be applied to the user page to which they are linked. In some embodiments the log records from multiple data blocks may be applied in a batch or in one or more groups to generate one or more successive versions of the corresponding user page.

Once all of the log records from data blocks being reclaimed have been applied to generate new versions the data blocks themselves may be reclaimed for storing new data. For example in some embodiments the log page table or other index listing or metadata describing available data blocks or pages may be updated to include the newly reclaimed data blocks. In some embodiments a reformat process may be applied to make the data blocks ready for new data while in other embodiments the data blocks may already be in the correct format to store new data.

In the storage systems described herein an extent may be a logical concept representing a highly durable unit of storage that can be combined with other extents either concatenated or striped to represent a volume. Each extent may be made durable by membership in a single protection group. An extent may provide an LSN type read write interface for a contiguous byte sub range having a fixed size that is defined at creation. Read write operations to an extent may be mapped into one or more appropriate segment read write operations by the containing protection group. As used herein the term volume extent may refer to an extent that is used to represent a specific sub range of bytes within a volume.

As noted above a volume may consist of multiple extents each represented by a protection group consisting of one or more segments. In some embodiments log records directed to different extents may have interleaved LSNs. For changes to the volume to be durable up to a particular LSN it may be necessary for all log records up to that LSN to be durable regardless of the extent to which they belong. In some embodiments the client may keep track of outstanding log records that have not yet been made durable and once all ULRs up to a specific LSN are made durable it may send a Volume Durable LSN VDL message to one of the protection groups in the volume. The VDL may be written to all synchronous mirror segments for the protection group. This is sometimes referred to as an Unconditional VDL and it may be periodically persisted to various segments or more specifically to various protection groups along with write activity happening on the segments. In some embodiments the Unconditional VDL may be stored in log sector headers.

In various embodiments the operations that may be performed on a segment may include writing a DULR or AULR received from a client which may involve writing the DULR or AULR to the tail of the hot log zone and then updating the user page table reading a cold user page which may involve locating the data sectors of the user page and returning them without needing to apply any additional DULRs reading a hot user page which may involve locating the data sectors of the most recent AULR for the user page and apply any subsequent DULRs to the user page before returning it replacing DULRs with AULRs which may involve coalescing DULRs for a user page to create an AULR that replaces the last DULR that was applied manipulating the log records etc. As described herein coalescing is the process of applying DULRs to an earlier version of a user page to create a later version of the user page. Coalescing a user page may help reduce read latency because until another DULR is written all DULRs written prior to coalescing may not need to be read and applied on demand. It may also help reclaim storage space by making old AULRs and DULRs obsolete provided there is no snapshot requiring the log records to be present . In some embodiments a coalescing operation may include locating a most recent AULR and applying any subsequent DULRs in sequence without skipping any of the DULRs. As noted above in some embodiments coalescing may not be performed within the hot log zone. Instead it may be performed within the cold log zone. In some embodiments coalescing may also be performed as log records are copied from the hot log zone to the cold log zone.

In some embodiments the decision to coalesce a user page may be triggered by the size of the pending DULR chain for the page e.g. if the length of the DULR chain exceeds a pre defined threshold for a coalescing operation according to a system wide application specific or client specified policy or by the user page being read by a client.

More specifically in this example protection group includes extents a c which include data from ranges respectively and these extents are mapped to segments . Protection group includes extent d which includes data striped from range and this extent is mapped to segments . Similarly protection group includes extent e which includes data striped from range and is mapped to segments and protection group includes extent f which includes data striped from range and is mapped to segment . In this example protection group includes extent g which includes data striped from range and is mapped to segments and protection group includes extent h which also includes data striped from range and is mapped to segments .

The various embodiments of a distributed storage system described with regard to above may implement one or more different techniques for implementing optimized log storage for asynchronous log updates. Optimized log storage is not limited to such systems however. Various other kinds of log structured storage may implement optimized log storage for asynchronous log updates. For example log structured data stores may not be organized into protection groups or quorum sets but instead may propagate changes from one storage node implementing the optimized log storage to another in order to provide updates to multiple nodes in a distributed system. Alternatively a single system or device implementing optimized log storage may provide a private backing store for a client system device or application that issues asynchronous updates to a log. is a high level flowchart illustrating a method to implement optimized log storage for asynchronous log updates according to some embodiments. Different combinations of systems and or devices may implement the various techniques discussed below.

As indicated at log records indicating updates to data stored for a storage client and indicating respective positions in a log record sequence may be received in various embodiments. Log records may generally describe represent indicate or contain updates changes or modifications to data or the data itself as well as updates changes or modifications to metadata or the metadata itself. Different storage clients may generate specific types of log records such as the various redo log records undo log records AULRs DULRs CLRs etc. . . . described above with regard to . Log records may also indicate a respective position in a log record sequence. For example an indicator such as a log sequence number LSN may be used to indicate a position in a log record sequence.

As indicated at in some embodiments the received log records may be stored in a hot log portion of a non volatile storage device. A non volatile storage device may provide data storage that maintains data in the event of a system failure. For example in some embodiments a non volatile storage device may non volatile RAM NV RAM battery or super capacitor backed RAM various different post NAND flash and or system memory technologies such as memristor based resistive random access memory ReRAM three dimensional NAND technologies Ferroelectric RAM magnetoresistive RAM MRAM or any of various types of phase change memory PCM . However in some embodiments the non volatile storage device may be a block based storage device such as the same block based storage device that may include a cold log portion. Thus in the discussion below the hot log portion of the non volatile storage device may be referred to as the hot log portion of the block based storage device. Therefore the following discussion with the hot log portion being presented as part of the same block based storage device is not intended to be limiting to other embodiments where the non volatile storage device is different from the block based storage device e.g. is implemented by one of the various technologies discussed above .

The log records may be stored according to an order in which they are received. For instance if log records with LSNs and are received then these log records may be stored in the hot log portion of the block based storage device in this order. However the log records themselves may not necessarily be received according to the log record sequence in some embodiments. For example a log record with an LSN which indicates the log record s position in the log sequence order may be received before a log record with LSN and stored before it in the hot log portion. Log records may arrive out of order for various reasons. Log records may be sent from a storage client out of order for example. Log records may also become delayed corrupted and re sent or affected by some other network or communication error between the storage client and log storage optimized for asynchronous log updates. Although various embodiments may process log records synchronously in at least some embodiments asynchronous processing and storage of log records may lead to log records being received out of order.

The hot log records may in some embodiments be stored in the hot log portion by packing together the stored log records such that the log records themselves may cross write or storage units of the storage device e.g. across data block or sector boundaries . In at least some embodiments log records may be stored in separate or distinguishable units of the storage device such that each log record may be stored in a distinguishable and or separately accessible location.

Upon storing log records in the hot log portion an index structure for the hot log portion may be updated. The hot log index structure may be proportionate to the number of log records stored in the hot log portion. The hot log index may include various metadata about the log records such as their position in the log record sequence e.g. LSN relationship or dependencies upon other log records type or size as well as various other status indicators about the log record e.g. whether or not the log record is garbage collectible .

In some embodiments in response to storing each log record an acknowledgment of the log record may be sent as indicated at . As noted above asynchronous processing of log records may allow a log structured storage system to acknowledge log records out of order compared to the log record sequence. A storage client may be able to receive these acknowledgments and determine a completion point in the sequence of log records sent for storage.

As indicated at log records in the hot log portion to move to a cold log portion of the block based storage device may be identified in various embodiments. The identified log records may complete a next portion of a log record sequence that is not currently stored in the cold log portion of the block based storage device. Consider the scenario where the cold log portion stores log records with LSNs and where the hot log portion stores log records with LSNs and . Those log records that complete a next portion of the log record sequence in the cold log portion log records after LSN may be identified as completing a next portion of the log record sequence. Thus log records with LSNs and may be identified to move from the hot log portion to the cold log portion. Please note that in some embodiments LSNs may be sparsely assigned to log records and thus the previous LSN in the log record sequence may not necessarily be the previous contiguous LSN. For example given the example log records above LSN may be the log record immediately prior to LSN in the log record sequence instead of LSN .

In order to determine or identify log records that are to be move the hot log index structure may in various embodiments be evaluated to identify log records currently stored in the hot log portion ascertain the completeness of the log records according to the log record sequence and exclude log records that may or may not be eligible for storage in the cold log portion of the block based storage device. For example some log records may be marked or identified as garbage collectible and may not be persisted in the cold log storage.

As indicated at log records may be stored together in a data block of the cold log portion according to the log record sequence in various embodiments. These log records may be exact or nearly exact copies of log records identified in the hot log portion or these log records may be a modified version of the log records. discussed in further detail below provides various examples of modifications made to log records prior to storage in the cold log portion. A combination of modified and unmodified log records may also be stored in the cold log portion. The updates included in the identified log records at may be included the log records stored in the cold log portion even though they may not be represented by the log records stored in the cold log in the same way. For example if multiple log records that update a user data page are coalesced together to one log record e.g. such as by combining DULRs into an AULR then the updates of the multiple log records may be considered to be included in the one log record though not necessarily distinguishable from other updates also included in the one log record .

A cold log portion index may be updated to reflect the storage of log records in the cold log portion of the storage device in some embodiments. As log records may be stored in order of the log record sequence within the data blocks of the cold log storage the cold log portion index may be lightweight and quickly traversed using such search algorithms as binary search.

In some embodiments log records may be stored to the cold log portion in such a way as to prevent or identify torn writes or incomplete writes. For example a two phase commit process may be used where it may first be determined that the cold log portion is ready to accept the log records and a determination that the log records have actually been stored in the cold log portion before index structures for the hot and cold log are updated to reflect the change.

In various embodiments a queue or some other data structure may maintain a listing of or plan of identified log records to store in the cold log portion. Moving log records from the hot log portion to the cold log portion may in some embodiments be performed as a background process and or when resources are available to identify and or move log records. The data structure maintaining identified log records may be evaluated to determine the next one or more log records to move or modify for movement to cold log storage. In some embodiments log records may not be stored in the cold log storage until exceeding a block write threshold such that free space in a minimum write size for a storage device e.g. block or sector is not wasted i.e. fragmented .

Although identifying and or storing log records in the cold log portion may be implemented as a background process in some embodiments foreground processing such as receiving storing and acknowledging log records at the hot log portion may be throttled delayed or halted. For example the hot log portion of the block based storage device may exceed a hot log maximum size threshold. In response new log records sent to a storage device may not be stored in the hot log until the enough log records are moved from the hot log portion to the cold log portion and space in the hot log garbage collected sufficient to lower the size of the hot log below the hot log maximum size threshold.

Garbage collection at the hot log may be performed from the tail of the log in various embodiments. In other embodiments various moving and compaction techniques may be performed. The hot log portion or the hot log portion index may be evaluated to identify log records that may no longer need to be persisted and thus be identified as garbage collectible. For example the UVCL record discussed above with regard to checkpoint indicators two phase commit acknowledgments log records that are no longer to be retained due a retention policy or any other type of log record that is obsolete may be marked or identified for garbage collection.

In some embodiments the techniques described above with regard to may be performed at log structured storage systems that are multi tenant e.g. such as the distributed storage service described above with regard to storing data for multiple different storage clients. A single hot log portion may be maintained that receives log records from each the multiple storage clients storing them in the same hot log portion. Upon identifying possibly modifying and log records to be moved to the cold log log records may be stored in dedicated cold logs for each storage client that are distinct from e.g. on another storage device or separate partition of a storage device the other cold logs. In this way a single process may receive store and or acknowledge log records for multiple storage clients.

As discussed above some log records identified for movement to the cold log portion may be modified prior to storage in the cold log portion. is a high level flowchart illustrating methods and techniques to modify log records prior to cold log storage according to some embodiments. As indicated at log records may be read from a hot log portion which have been identified for movement to a cold log portion of a block based storage device in some embodiments. At least one of the read log records may be modified to generate a modified log record as indicated at . In some embodiments a modified log record may include updates from one or more log records and combined to create a single log record. In some embodiments a single log record may be modified to generate multiple modified log records. Log records may also be modified to create altered or changed versions of the same log record.

In at least some embodiments multiple log records may be coalesced to form one or more other log records including the changes indicated in the multiple log records. For example in some embodiments the number of log records linked in a dependency chain e.g. linked to the same data page in the hot log portion of the storage device and identified for movement to the cold log portion may exceed a coalesce threshold. In response to exceeding the coalesce threshold as described above with regard to log records may be coalesced to generate a new log record that indicates the changes or the result of the changes in a log record in the log records linked in the chain of dependencies. Thus for example if 5 DULRs are linked to the same user data page and the coalesce threshold is 3 the 5 DULRs may be coalesced to form an AULR which includes the effects of the 5 DULRs in the log record. The AULR may be included with log records written to the cold log portion instead of the 5 DULRs which may be marked as garbage collectible . In at least some embodiments the modified log record may be assigned the latest LSN or indicator of position in the log record sequence of the log records used to generate the modified version.

In at least some embodiments modified log records may be compressed log records. For example one or more compression techniques may be applied to log records identified for movement to the cold log portion of the block based storage device to generate compressed versions of the log records. Various different loss less data compression techniques may be implemented including but not limited to Lempel Ziv run length dictionary based or bzip. Similarly or in addition to compression one or more different encryption techniques may be implemented to generate encrypted versions of log records prior to storage in the cold log portion.

As indicated at the modified log record s may be included in the log records stored to the cold log portion of the block based storage device in various embodiments. For instance if 3 out of 10 identified log records are coalesced to generate a single log record then it may be that only the 8 log records 1 modified 7 remaining may be stored in the cold log. In some embodiments the characteristics of modified log records may be included in determinations of how many log records to store in the cold log and or when to store them. For example if after compressing identified log records a minimum block write size threshold is not met leaving a certain amount of wasted space storing the compressed log records may be delayed until other log records are identified that may meet the minimum block write size threshold criteria.

As indicated at in some embodiments log records from the hot log portion of the block based storage device that have been stored in the cold log portion of the block based storage device may be identified as garbage collectible. For example the log records illustrated as stored in the cold log portion in log records and from the hot log may be marked as garbage collectible. Garbage collection in the hot log may be performed in a variety of different ways. In some embodiments an in memory data structure that provides an index of specific log records may be used to determine where log records marked as garbage collectible are located. As a majority of log records eventually are moved to the cold log portion of the block based storage device the in memory data structure for the hot log portion may be more detailed as the relative number of log records in the hot log portion as compared to the total number of stored log records may be very small. The in memory data structure of log records in the hot log portion of the storage device may make garbage collection more efficient. For example moving and compacting techniques may be able to easily determine which log records can be combined into different data blocks or data pages as well as which data blocks or data pages can be quickly reclaimed. Once garbage collection for log records in the hot log portion is complete the reclaimed portions of the block based storage device may be ready to store new log records for the hot log.

In various embodiments optimized log structured storage may be used to implement various other log structured storage operations. For example the cold log portion may be used to implement efficient garbage collection for log records as described above with regard to . Similarly replication of log records may also utilize optimized log storage for asynchronous writes such as illustrated in . is a high level flowchart of efficient log record replication across storage nodes in a protection group using optimized log storage according to some embodiments. The methods and techniques discussed below may be performed in parallel with the techniques discussed above with regard to as well as other foreground processes such as illustrated in .

As indicated at log records stored according to log record sequence in a cold log portion of a block based storage device may be evaluated to identify log records indicating updates to data stored for a storage client that are not currently persisted in the cold log portion. In various embodiments a cold log index may be maintained that indicates a respective entry for each data block in cold log storage indicating a position in the log record sequence for a first log record in the data block. The indicated position for the first log record in a data block may for instance indicate whether positions of log records in the log record sequence below or above the log record may be stored as a result of the log records stored in the cold log portion according to the log record sequence. Consider the scenario where log records stored in a data block are stored according to LSN value. The cold log index entry for some data blocks may indicate an LSN value for each data block e.g. block has LSN block has LSN block has LSN etc. . . . . As the log records are stored in the data blocks in the cold log portion according to LSN order the cold log index may be evaluated to identify which data block would for instance contain LSN which would be data block in this scenario . In this way a light weight index for searching the cold log may be maintained which may not have to provide a direct mapping for every log record position in the log record sequence.

In various embodiments the cold log index may be scanned to identify the last log record in the log record sequence that is complete. A completion point may be the point in the log record sequence for which the log records are maintained at the storage node have no holes or gaps for missing log records. As the cold log portion may store log records in data blocks according to the log record sequence the first gap or missing log record may be easily identified such as at the end of a respective data block storing log records. A storage node such as illustrated in may receive completion points from other storage nodes storing log records for the storage client using various peer to peer or gossip protocols. Based on the received sequence completion points for other storage nodes another storage node may be identified that is further advanced in the log record sequence e.g. by having a higher completion point . The range of log records between the two completion points that of the current node and that of the advanced node may identify the log records in the log record sequence that are not persisted on the current storage node.

As indicated at the identified log records may be requested from other storage nodes storing log records for the storage client in various embodiments. For example the current storage node may request from the storage node that is further advanced some or all of the requested log records. In some embodiments different requests may be sent to different storage nodes for the same or different log records. The identified log records may be received from the various storage nodes in the protection group as indicated at . In some embodiments log records received at a storage node may be processed according to the technique illustrated in storing first in the hot log and subsequently moving to the cold log. However in at least some embodiments as indicated at the received log records may be stored directly into data blocks in the cold log portion of the block based storage device according to the log record sequence. In this way the cold log portion may act as a second append point for log records in the replication saving operational resources at the hot log for performing foreground operations and or client requests. Once stored in the cold log portion the cold log record index may be updated to reflect the received log records.

Please note that the method illustrated in is not to be construed as limiting to the various other ways log records may be processed. As noted above log records received from other storage nodes may be first stored in the hot log portion of the block based storage device. In some embodiments some log records received from the storage node may be stored in the hot log portion while other log records such as those fill a data block in the cold log portion may be stored in the cold log portion of the block based storage device.

The methods described herein may in various embodiments be implemented by any combination of hardware and software. For example in one embodiment the methods may be implemented by a computer system e.g. a computer system as in that includes one or more processors executing program instructions stored on a computer readable storage medium coupled to the processors. The program instructions may be configured to implement the functionality described herein e.g. the functionality of various servers and other components that implement the database services systems and or storage services systems described herein . The various methods as illustrated in the figures and described herein represent example embodiments of methods. The order of any method may be changed and various elements may be added reordered combined omitted modified etc.

Computer system includes one or more processors any of which may include multiple cores which may be single or multi threaded coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface . In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA. The computer system also includes one or more network communication devices e.g. network interface for communicating with other systems and or components over a communications network e.g. Internet LAN etc. . For example a client application executing on system may use network interface to communicate with a server application executing on a single server or on a cluster of servers that implement one or more of the components of the database systems described herein. In another example an instance of a server application executing on computer system may use network interface to communicate with other instances of the server application or another server application that may be implemented on other computer systems e.g. computer systems .

In the illustrated embodiment computer system also includes one or more persistent storage devices and or one or more I O devices . In various embodiments persistent storage devices may correspond to disk drives tape drives solid state memory other mass storage devices or any other persistent storage device. Computer system or a distributed application or operating system operating thereon may store instructions and or data in persistent storage devices as desired and may retrieve the stored instruction and or data as needed. For example in some embodiments computer system may host a storage system server node and persistent storage may include the SSDs attached to that server node.

Computer system includes one or more system memories that are configured to store instructions and data accessible by processor s . In various embodiments system memories may be implemented using any suitable memory technology e.g. one or more of cache static random access memory SRAM DRAM RDRAM EDO RAM DDR 10 RAM synchronous dynamic RAM SDRAM Rambus RAM EEPROM non volatile Flash type memory or any other type of memory . System memory may contain program instructions that are executable by processor s to implement the methods and techniques described herein. In various embodiments program instructions may be encoded in platform native binary any interpreted language such as Java byte code or in any other language such as C C Java etc. or in any combination thereof. For example in the illustrated embodiment program instructions include program instructions executable to implement the functionality of a database engine head node of a database tier or one of a plurality of storage nodes of a separate distributed storage system that stores databases and associated metadata on behalf of clients of the database tier in different embodiments. In some embodiments program instructions may implement multiple separate clients server nodes and or other components.

In some embodiments program instructions may include instructions executable to implement an operating system not shown which may be any of various operating systems such as UNIX LINUX Solaris MacOS Windows etc. Any or all of program instructions may be provided as a computer program product or software that may include a non transitory computer readable storage medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to various embodiments. A non transitory computer readable storage medium may include any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . Generally speaking a non transitory computer accessible medium may include computer readable storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM coupled to computer system via I O interface . A non transitory computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computer system as system memory or another type of memory. In other embodiments program instructions may be communicated using optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals etc. conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

In some embodiments system memory may include data store which may be configured as described herein. For example the information described herein as being stored by the database tier e.g. on a database engine head node such as a transaction log an undo log cached page data or other information used in performing the functions of the database tiers described herein may be stored in data store or in another portion of system memory on one or more nodes in persistent storage and or on one or more remote storage devices at different times and in various embodiments. Similarly the information described herein as being stored by the storage tier e.g. redo log records coalesced data pages and or other information used in performing the functions of the distributed storage systems described herein may be stored in data store or in another portion of system memory on one or more nodes in persistent storage and or on one or more remote storage devices at different times and in various embodiments. In general system memory e.g. data store within system memory persistent storage and or remote storage may store data blocks replicas of data blocks metadata associated with data blocks and or their state database configuration information and or any other information usable in implementing the methods and techniques described herein.

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the system including through network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems which may implement one or more storage system server nodes database engine head nodes and or clients of the database systems described herein for example. In addition network interface may be configured to allow communication between computer system and various I O devices and or remote storage . Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of a distributed system that includes computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of a distributed system that includes computer system through a wired or wireless connection such as over network interface . Network interface may commonly support one or more wireless networking protocols e.g. Wi Fi IEEE 802.11 or another wireless networking standard . However in various embodiments network interface may support communication via any suitable wired or wireless general data networks such as other types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol. In various embodiments computer system may include more fewer or different components than those illustrated in e.g. displays video cards audio cards peripheral devices other network interfaces such as an ATM interface an Ethernet interface a Frame Relay interface etc. 

It is noted that any of the distributed system embodiments described herein or any of their components may be implemented as one or more network based services. For example a database engine head node within the database tier of a database system may present database services and or other types of data storage services that employ the distributed storage systems described herein to clients as network based services. In some embodiments a network based service may be implemented by a software and or hardware system designed to support interoperable machine to machine interaction over a network. A network based service may have an interface described in a machine processable format such as the Web Services Description Language WSDL . Other systems may interact with the network based service in a manner prescribed by the description of the network based service s interface. For example the network based service may define various operations that other systems may invoke and may define a particular application programming interface API to which other systems may be expected to conform when requesting the various operations.

In various embodiments a network based service may be requested or invoked through the use of a message that includes parameters and or data associated with the network based services request. Such a message may be formatted according to a particular markup language such as Extensible Markup Language XML and or may be encapsulated using a protocol such as Simple Object Access Protocol SOAP . To perform a network based services request a network based services client may assemble a message including the request and convey the message to an addressable endpoint e.g. a Uniform Resource Locator URL corresponding to the network based service using an Internet based application layer transfer protocol such as Hypertext Transfer Protocol HTTP .

In some embodiments network based services may be implemented using Representational State Transfer RESTful techniques rather than message based techniques. For example a network based service implemented according to a RESTful technique may be invoked through parameters included within an HTTP method such as PUT GET or DELETE rather than encapsulated within a SOAP message.

Although the embodiments above have been described in considerable detail numerous variations and modifications may be made as would become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

