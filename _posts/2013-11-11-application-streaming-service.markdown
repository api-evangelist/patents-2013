---

title: Application streaming service
abstract: A method can include a node receiving a token redemption request from a client computing device. The node can determine a destination host management service based at least in part on a geographic proximity of the destination host management service to the client computing device. The destination host management service can be one of a plurality of host management systems distributed across a plurality of data centers. The node can route the token redemption request to the destination host management service. The destination host management service can determine a destination host running an application in one of the plurality of data centers and provision a session between the client computing device and the application running in the destination host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09413830&OS=09413830&RS=09413830
owner: Amazon Technologies, Inc.
number: 09413830
owner_city: Reno
owner_country: US
publication_date: 20131111
---
This application is related to the following applications each of which is hereby incorporated by reference in its entirety U.S. patent application Ser. No. 14 076 718 filed Nov. 11 2013 entitled VIDEO ENCODING BASED ON AREAS OF INTEREST U.S. patent application Ser. No. 14 076 821 filed Nov. 11 2013 entitled ADAPTIVE SCENE COMPLEXITY BASED ON SERVICE QUALITY U.S. patent application Ser. No. 14 077 127 filed Nov. 11 2013 entitled SERVICE FOR GENERATING GRAPHICS OBJECT DATA U.S. patent application Ser. No. 14 077 136 filed Nov. 11 2013 entitled IMAGE COMPOSITION BASED ON REMOTE OBJECT DATA U.S. patent application Ser. No. 14 077 165 filed Nov. 11 2013 entitled MULTIPLE PARALLEL GRAPHICS PROCESSING UNITS U.S. patent application Ser. No. 14 077 084 filed Nov. 11 2013 entitled ADAPTIVE CONTENT TRANSMISSION U.S. patent application Ser. No. 14 077 180 filed Nov. 11 2013 entitled VIEW GENERATION BASED ON SHARED STATE U.S. patent application Ser. No. 14 077 186 filed Nov. 11 2013 entitled MULTIPLE STREAM CONTENT PRESENTATION U.S. patent application Ser. No. 14 077 149 filed Nov. 11 2013 entitled DATA COLLECTION FOR MULTIPLE VIEW GENERATION U.S. patent application Ser. No. 14 077 142 filed Nov. 11 2013 entitled STREAMING GAME SERVER VIDEO RECORDER U.S. patent application Ser. No. 14 076 815 filed Nov. 11 2013 entitled LOCATION OF ACTOR RESOURCES U.S. patent application Ser. No. 14 077 146 filed Nov. 11 2013 entitled SESSION IDLE OPTIMIZATION FOR STREAMING SERVER U.S. patent application Ser. No. 61 902 740 filed Nov. 11 2013 entitled EFFICIENT BANDWIDTH ESTIMATION .

Developers produce applications that can be run on computing devices. The applications can provide a user of the computing device with functionality. For example email client applications can provide users with the ability to compose send and receive email messages on the computing device social network applications can allow users to interact within a social network from the computing device gaming applications can allow a user to play a game on the computing device and or participate in an online multiplayer game using the computing device music and audio applications can allow a user to listen to and or edit music and audio on the computing device photo and video applications can allow a user to capture and or edit pictures and video and so forth.

Any number of applications can be run on a computing device. Each application provides a user of the mobile device with some functionality. The ability to run different applications each of which can provide different functionality on a computing device can allow a user of the computing device to perform many different functions using the same computing device.

One difficulty with running many applications on a single computing device is the possibility that the computing device has limited computing resources. For example in the case of a cell phone or a tablet computer the amount of memory and processing power in the computing device may be less than the amount of memory and processing power that may be available in other types of computing device such as a desktop computer or a laptop computer. Limitations on computing resources in a computing devices can limit the number of applications that can be installed on a computing device and limit the types of applications that can properly run on a computing device.

The present disclosure generally describes techniques and systems for hosting and running applications on a host computing system and streaming application content to remote computing devices. A computing system can request that an application be executed by a remote host computing system. The host computing system can include a host that executes the application and streams audio and video application content to the computing devices. The computing device can render the video and audio information and accept control inputs from a user. The computing device can send the control inputs to the host for controlling the application running on the host computing system.

The host computing system can include a host management service that can manage the provisioning and usage of hosts requests by computing devices for operation of applications informing computing devices how to communicate with the appropriate hosts for their applications and the like. The computing devices and the hosts running the applications can communication application content and control inputs directly with each other. In this way the host management service can perform system management without being overloaded by handling data communicated between the computing devices and the hosts running the applications.

Host computing systems can have significantly greater access to computing resources than remote computing devices. This can allow a computing device to have access to applications that the computing device would not normally be able to run. In addition a client application can operate on the computing device to enable the computing device to interact with the application running remotely in a host computing system. However the size and computing requirements of the client application operating on the computing device can be significantly less than the size and computing requirements of the application operating on the host computing system.

The system may also include a host computing system that includes a host management service and one or more hosts . The host management service can manage the one or more hosts one or more developer applications running on the one or more hosts sessions between the one or more developer applications and the developer client and requests from developer client to initiate new sessions with the one or more developer applications . Each of the one or more hosts can be a computing device e.g. a server or desktop computer an instance operating in a virtualized environment or any other type of environment that can run applications.

The one or more hosts can host developer applications and sessions with client computing devices in a number of different ways. In one example each of the one or more hosts can run a single developer application in a single session with a client computing device. In another example each of the one or more hosts can host multiple instances of a single developer application and each of the instances can be run as part of a single session with a client computing device. In another example one host can run a multi tenant application that allows for multiple sessions with different computing devices. In yet another example multiple hosts can run a single application that is either a single tenant application or a multi tenant application that permits one or more session with one or more computing devices. The one or more hosts can host developer applications and sessions with client computing devices in any number of other ways.

The system includes one or more developer applications . A developer application can include computer instructions provided by the developer of the developer application . The computer instructions can include instructions that when executed provide particular functions for a computing device. As is described in greater detail below the developer applications can be embedded with particular computer instructions such as predefined software libraries or modules that permit application content such as audio and video application content of the developer applications to be captured and streamed to the developer client to handle session interaction with the developer client to encode and decode streamed application content and to receive input controls from the developer client . Such embedded computer instructions can be provided to developers of developer applications by an operator of the host computing system.

The system includes a developer entitlement service . The developer entitlement service can manage developer client entitlements for access to sessions with developer applications . The developer entitlement service can be provided by a developer of the developer client and the developer applications . The developer entitlement service could be hosted in the host computing system that includes the host management service and the one or more hosts . The developer entitlement service could be hosted and or provided by a third party entitlement service.

If the developer entitlement service decides to allow a session between developer client and developer application the developer entitlement service can send an entitlement request to the host management service to create a session. The entitlement request can be in the form of a call or other request. The host management service can create and store a session identifier and an entitlement token. The host management service can store the session identifier for later use. The entitlement token can be in the form of a particular link such as a uniform resource locator URL that is valid only one time and expires after a particular period of time. The host management service can send a communication back to the developer entitlement service that includes the entitlement token and the developer entitlement service can send a communication back to the developer client that includes the entitlement token.

Once the developer client has the entitlement token it can send a request to the host management service to initiate a session with the developer application . As will be described in greater detail below the request can be routed to one of a number of host management services based on a number of factors such as a determination that host management service is located geographically close to the developer client a determination that the host management service is an optimal host management service for the session and so forth. The host management service can send a communication to provision a host to run the developer application . The communication can be in the form of a call to the host . The host can send a communication to the host management service with an indication of an internet protocol IP address and authentication information of the host . The authentication information can include information such as one or more ports of the host that will be used for the session between the developer client and the developer application . The host management service can then send a communication to the developer client that includes an indication of the IP address and the authentication information of the host .

After the developer client receives the communication from the host management service the developer client can send a communication to host to initiate direct communication between the developer client and developer application . The communication from the developer client to host can be a single data packet sent to one or more ports of the IP address identified in communication . The host can identify an IP address and one or more ports of the client computing device from the communication and the host can initiate a stream of application content from developer application to developer client .

Turning now to depicted is a method that could be used by a host management service to fulfill a request for initiating a session. At block the host management service can receive a request from an entitlement service to create a session for an application. The request could include an identification of the application to be run. The request may or may not identify the client computing device making the request. The entitlement service may authenticate the client computing device or a user of the client computing device prior to making the request to create the session for an application. At block the host management service can send a token to the entitlement service. The token can be anything used by the requesting client computing device to initiate contact with the host management service. For example the token can be a particular URL that the client computing device can follow to make contact with the host management service. The entitlement service may pass the token on to the client computing device.

At block the host management service can receive a token redeem request from the client computing device. The token redeem request can be a call to a URL identified by the token. At block the host management service can determine whether the token redeem request is appropriate. This determination can be made based on a time between sending the token to the entitlement service at block and receiving the token redeem request at block based on a authentication information in the token redeem request based on an IP address of the client computing device and or based on any other type of information. If at block it is determined that the token redeem request is not appropriate then at block the host management service can send an error message to the client computing device and or the entitlement service. Such an error message can indicate the reason why the token redeem request was deemed not to be appropriate. However if at block is determined that the token redeem request is appropriate then at block the host management service can provision an application host for the session. Provisioning the application host can include activating the application host spinning up an instance in a virtualized environment to be the host launching the application on an existing application host and or any other action to provide an application host with the appropriate application. At block the host management service can send an indication of application session information to the client computing device. The application session information can include information that can be used by the client computing device to initiate direct communication with the application host such as an IP address of the application host one or more ports associated with the application host and the like.

Referring back to the host management service can also store information about application sessions for various users. For example when a session is used by a particular user or by a particular user identifier the host management service can store information about that session. When the user identifier is used to initiate a subsequent session with the same application the host management service can identify that information about the prior session has been saved and use that when provisioning a new session. For example when the developer entitlement service sends the entitlement request to the host management service the developer entitlement service can include an identifier of the user of the client computing device. In response to receiving the identifier of the user of the client computing device the host management service can locate the stored information about the prior session. When the request is received by the host management service from the developer client the host management service can send the information about the prior session to the host with the communication to provision the host . The host can configure the application according to the information about the prior session.

The system can include additional resources to support operation of the host management service . The system can include a management console . The management console can permit developers to interact with the host computing system to manage any of the developer applications that belong to the developer. For example a developer can register developer applications that can be hosted by the one or more hosts the developer can indicate resources used to support their developer applications the developer can request and or purchase a number and or a type of hosts that can be used to host the developer s applications and the like. The applications registered with the management console by a developer may need to be properly formatted to render video and audio for streaming to a client computing device to receive input controls from the client computing device and so forth. Such formatting of the application can be done by a developer using a software development kit SDK or other information provided by an operator of the host computing system.

The system can also include a resource formation service . Once a developer application is properly registered the developer application can be installed on a base machine image. A base machine image can include an operating system and virtual software that can be used to create an instance in a virtual machine environment. A snapshot of the base machine image with the installed developer application can be stored in the resource formation service . Later when the host machine service receives a request for a session provisioning a new host can include the host management service retrieving the snapshot of the base machine image with the installed developer application and create a host that is an instance based on the snapshot. In one embodiment each of the hosts running a particular developer application can be included in a virtual private cloud for that particular developer application.

To reduce any latency from the perspective of a user of a client computing device the host management service may provision a number of hosts with a particular developer application. In this way when the host management service receives a request to redeem a token for a session for the particular developer application the time it takes for the host management service to respond to the client computing device with the session information e.g. communication will be less if a host is already running with the developer application than if the host management service must start up a new instance with the particular developer application.

In addition to creating a developer application and registering the developer application with the management console the developer can also create the developer client to properly interact with the developer application on one of the hosts . The developer client can be distributed to client computing devices by the developer. With a developer application properly registered with the management console and the developer client distributed to client computing device s client computing device s are able to establish an application session following the procedure outlined above starting with sending the communication to the developer entitlement service .

The system can also include one or more databases . The databases can be used to store state information about the developer applications running on the hosts . In this way the hosts themselves can be stateless. While sessions are operating most of the interactions of the host are directly with the developer client . In this way host management service is not burdened by the load of the data passed between the host and the developer client . However hosts may communicate certain information to the host management service . For example the hosts may send certain messages such as server event messages session event messages heartbeat calls and other messages to the host management service . The hosts can be configured to send such messages on instance start instance end session start session end and once a minute while a session is active. The host management service can record each of these messages in the databases .

Heartbeat messages can be sent from a host to the host management service for each active session in the host . The heartbeat messages can contain session information of each session. The host management service can write the state information of the heartbeat messages to the databases . When a heartbeat message is written to the databases the databases can verify whether the state information is consistent with previously recorded information about the state of the host . If there is any discrepancy the host management service can determine the actual state of the host and information about the actual state of the host can be written to the databases . In this way regular heartbeats from the hosts can trigger events to ensure that state information written to the databases is current and correct. The heartbeats can be sent from the hosts on a regular basis such as once per minute.

One advantage to using heartbeat messages is that hosts without any active sessions will not send heartbeat messages to the host management service and the host management service can identify which of the hosts are not sending heartbeat messages. The host management service may maintain a particular number of hosts running a particular developer application that are not currently hosting a session sometimes called buffer hosts to reduce latency in provisioning hosts after a request for a session from a client computing device. However if the number of hosts not sending heartbeat messages rises above the number of buffer hosts the host management service can remove some of the hosts that are not sending heartbeat messages.

The management console can also allow a developer to update a developer application without having to provide updates to all of the client devices. The developer can register a new version of a developer application with the management console . A new snapshot of the base machine image with the new version of the installed developer application can be stored in the resource formation service . The new snapshot can be used for all new hosts . For existing hosts with the older version of the developer application those hosts can continue operating with the old version until all sessions are closed on one of the hosts . Once all sessions on one of the hosts are closed the host can be removed and a new host with the new version of the developer application can be started. In some cases the new version of the developer application may be time sensitive such as an update as a result of a major bug or a security fix. With a time sensitive update hosts can be forcibly terminated even if there are open sessions on the hosts. Immediately or soon after terminating the hosts with the old version of the developer application new hosts with the new version of the developer application can be deployed to replace the terminated hosts. A notice can be sent by the host management service to the hosts that will be forcibly terminated such that any desired data may be saved prior to the forcible termination.

Referring now to depicted is an example of the communications between a developer client on a client computing device and a developer application on a host . The host is responsible for running the developer application for streaming application content from the developer application to the developer client for accepting control inputs sent from the developer client and for interacting with a host management service to manage sessions and report status.

The developer client can include a streaming service monger developer code and a streaming experience client . The streaming service monger can redeem entitlements with the host management service via communications . The host management service can determine when to initiate a session for the client computing device with host . The host management service can make a call via communication on a host proxy service of the host to provision a session. If the developer application on the host is not already launched the host proxy service can launch the developer application on the host . The host proxy service can also provision a session and monitor the health of the application and the status of the session. The developer application can include a streaming service wrangler to interface the developer application with the host proxy service . Once a session is provisioned the streaming service wrangler can return session information to the host proxy service . The session information can include an IP address of the host session authentication information e.g. ports to be used to transmit data to and from the developer client and or a session identifier. The host proxy service can pass the session information back to the host management service which can pass the session information back to the developer client . The developer client can use the session information to initiate a streaming connection with the host .

The streaming experience client of the developer client can initiate a streaming connection with a streaming experience server library of the developer application on the host . The streaming experience client can initiate a control and input connection . The control and input connection can be established using a secure protocol such as a transport layer security TLS protocol or a secure sockets layer SSL protocol. The streaming experience client can be authenticated by the streaming experience server by the streaming experience client passing information such as the session authentication information received by the developer client to the streaming experience server .

If the streaming experience server authenticates the streaming experience client the streaming experience server can send port information to the streaming experience client via the control and input connection . The port information can include one or more ports for establishing one or more streaming connections and one or more ports for establishing one or more streaming control connections . The ports can be expressed using a protocol such as a user datagram protocol UDP . The streaming experience client can send at least one packet to each of the ports of the one or more streaming connections and the ports of the one or more streaming control connections . The streaming experience server can identify the ports from which the streaming experience client sent the at least one packet. At this point the one or more streaming connections and the one or more streaming control connections will be established because both the streaming experience client and the streaming experience server will know the ports used by the other of the streaming experience client and the streaming experience server .

Once the one or more streaming connections and the one or more streaming control connections are established the one or more streaming connections can be mostly unidirectional from the streaming experience server to the streaming experience client . On the other hand the one or more streaming control connections can be mostly bidirectional between the streaming experience server and the streaming experience client . The one or more streaming connections can use a real time transport protocol RTP to stream an audio stream a video stream a forward error correction FEC stream and a UDP bandwidth test stream. The RTP of the one or more streaming connections can be implemented using standards such as RFC 3350 RFC 4585 and RFC 6184. RTP packets in the one or more streaming connections can be streamed from streaming experience server to streaming experience client over a UDP transport layer. The one or more streaming control connections can communicate congestion and quality of service QoS information is transmitted between the streaming experience server and the streaming experience client using an RTP control protocol RTCP . The RTCP packets in the one or more streaming control connections can be streamed over a UDP transport layer. Additional QoS information can be transmitted reliably over the control and input connection along with remote procedure call RPC messages and control inputs.

In one embodiment the streaming connections include four streaming connections one streaming connection for each of an audio stream a video stream an FEC stream and a UDP bandwidth test stream. The UDP bandwidth test stream can test the stream at the start of a session to provide an estimate for an initial video bit rate. In the same embodiment the one or more streaming control connections include four streaming control connections one streaming control connection for each of the audio stream the video stream the FEC stream and the UDP bandwidth test stream. The four streaming control connections can be used for transmitting corresponding control information in both directions.

Streaming RTP packets over a UDP transport layer provide real time or near real time delivery of packets at the expense of packet losses. One mechanism for recovering lost packets is the use of FEC. FEC encodes source symbols and generates redundant parity bits. Both the encoded source symbols and parity bits are transmitted to the client. In the event of packet losses below a certain threshold the client regenerates the source symbols without retransmission. In one embodiment Didier Reed Solomon implementation of FEC can be used for protecting audio and video streams. In another embodiment symbol size can be defined as a maximum transmission unit MTU size and an FEC block as the number of packets for a single video frame. If an audio packet is approximately 200 bytes in size the audio packet can be padded to an MTU size for FEC encoding. Such an embodiment can protect audio and video streams in multiplexed source blocks.

Referring now to depicted is a method that can be used by a developer application to establish direct communication links with a developer client. At block the developer application can send session information to a host management service. The host management service can pass the session information to the developer client. The session information can include an IP address of the host and a port to be used by the developer application for a control and input connection. The session information can also include authentication session information that can be used to authenticate the developer client. At block the developer application can receive a message from the developer client at the port to be used by the developer application for a control and input connection. The message can include a single data packet. The message can also include authentication information such as the authentication session information.

At block the developer application can determine whether the developer application message is authentic. The determination can be made based at least in part on the content of the message. In one embodiment the determination can be made by comparing the authentication session information received in the message to the authentication session information sent in block . If at block it is determined that the developer application message is not authentic then at block the developer application can send an error message to the developer client indicating an error with the message. However if at block it is determined that the developer application message is not authentic then at block the developer application can send port information for one or more streaming connections and one or more streaming control connections to the developer client.

At block the developer application can receive a data packet from the developer client on each port of the one or more streaming connections and the one or more streaming control connections. The developer application can determine a port used by the developer client to send each of the data packets. At block the developer application can stream application content to the developer client via the one or more streaming connections and the developer application can send and receive control information via the one or more streaming control connections.

The developer code generates an audio stream that is fed to an audio data capture component . The audio data can include information that can be used to render audio associated with the application on a client computing device. The audio data can include an audio stream that can be encoded. In one embodiment the audio data capture component can include an audio encoder. The audio data capture component does not need to have an encoder as it may be possible for a client computing device to encode some or all of the audio data for rendering on the client computing device. The audio data can be passed to a data transmission control unit such as an FEC codec or other channel coding or error correction coding. In an ideal case such as in the case of perfect network conditions the data transmission control unit would be optional as indicated by the dashed lines and data. The developer code can also generate video data that can be fed to a video data capture component . The video data can include information that can be used to render video associated with the application on a client computing device. The video data can include a video stream that can be encoded by a video encoder. In one embodiment the video data capture component can include a video encoder such as an X264 encoder. The video data capture component does not need to have an encoder as it may be possible for a client computing device to encode some or all of the video data for rendering on the client computing device. The video data can be passed from the video data capture component to the data transmission control unit . The data transmission control unit can generate three streams one for each of the audio stream the video stream and an FEC stream or other channel coding or error correction coding . The three streams generated by the data transmission control unit can be passed to content protocol component . The content protocol component can place the three streams generated by the data transmission control unit into data packets such as RTP data packets and transmit the data packets to the client application such as over a UDP transport layer.

The developer application can also include a content control protocol component . The content control protocol component can generate synchronization information such as presentation timestamps for each of the content streams. The content control protocol component can place the synchronization information in data packets such as RTCP packets and transmit the data packets to the client application such as over over a UDP transport layer. The developer application can also include an input and control protocol component that can receive input and control data packets transmitted from the client application over a channel such as in TCP data packets over a TCP channel and remove the input and control data from the packets. The input and control data can be sent to an input and control interface which passes the input and control data to the developer code .

The developer application can also include an adaptive streaming controller . As shown in the adaptive streaming controller can receive inputs from the input and control component and content control protocol component . The inputs to the adaptive streaming controller from the input and control component can include the input and control data sent by the client application. The inputs to the adaptive streaming controller from the content control protocol component can include information about dropped packets packet jitter error rates throughout rates and other QoS information. The adaptive streaming controller can take all of the inputs into account to monitor real time network conditions. The adaptive streaming controller can send control signals to the video data capture component and the data transmission control unit to control video bitrates and error correction rates. In one embodiment the adaptive streaming controller can implement a mathematical algorithm that takes the inputs into account and outputs the desired video bit rate and FEC rate for a given bandwidth margin. Controlling the video bit rate can control the quality of the subsequent video frames and minimize the possibility for disruption of the video stream to the client application.

A video encoder in video data capture component can include a number of capabilities that can balance the quality of the video with the available bandwidth. Such a balance can compensate for poor network conditions to provide the client application with an appropriate video stream given the network conditions. The video encoder capabilities can be dynamically changed based on changing network conditions such as in response to receiving a control signal from the adaptive streaming controller . In one embodiment the video encoder can implement one or more of the following techniques I frame requests slice based encoding gradual decoder reset GDR sweeps long term reference frames frame rate changes and or resolution changes.

The client application can also include a content protocol packet receiver such as an RTP packet receiver. The content control protocol can receive content streams such as video audio and FEC streams in packets and extracts the data from the content stream packets. The data from the content streams is passed to the data transmission control unit . The data transmission control unit can address any transmission loss issues that are correctable using an error correction protocol. Video data can be passed from the data transmission control unit to a video renderer . The video renderer can include a video decoder that can decode encoded video data. The video renderer can render the video on the client computing device . In one embodiment the video rendered can include a video decoder such as an H.264 video decoder. Audio data can be passed from the data transmission control unit to an audio renderer . The audio renderer can include an audio decoder that can decode encoded audio data. The audio renderer can render the audio on the client computing device . In one embodiment the audio renderer can include an audio decoder.

The data transmission control unit can also pass feedback information to a content control protocol component . The feedback information can include information about dropped packets packet jitter error rates throughout rates and other QoS information. The content control protocol component can send the feedback information to the server application as packets such as RTCP packets over a transport layer such as a UDP transport layer. The content control protocol component can also receive synchronization information such as presentation timestamps for each of the audio video and FEC streams. The content control protocol component can pass the synchronization information to an audio video synchronization controller that can ensure that the video rendered by the video renderer and the audio rendered by the audio renderer are in sync or close to in sync.

The second data center includes host management services and VPCs and for each of the applications hosted in the second data center . VPC includes hosts that run the first application. The VPC can be part of the same VPC as VPC as each of VPC and VPC are running the same first application. VPC includes hosts that run an nth application. The VPC can be part of the same VPC as VPC as each of VPC and VPC are running the same nth application. Any number of other VPCs could be included in the second data center and any number of hosts running different applications could be included in the data center . Any number of other data centers may be used beyond the first and second data centers and depicted in .

The depiction in also shows a token redemption node . The token redemption node can receive token redemption requests from client computing devices. The token redemption node can verify an authenticity of tokens sent by the client computing devices and route token redemption requests to a host management service in a particular data center. The depiction in also shows two client computing devices a first client computing device used by a first user and a second client computing device used by a second user . The first and second computing devices and can be located in different geographic locations such as the west coast of the United States and the east coast of the United States respectively. The first and second data centers and can also be located in different geographic locations such as in San Francisco and Washington D.C. respectively.

As is also depicted in the example in the second computing device sends a token redemption request to the token redemption node . The token redemption node can identify one of the available host management services with the nearest IP address to the IP address of the second computing device . The IP of the second computing device could have been provided to the token redemption node by a developer entitlement service not shown when the second computing device requested that the developer entitlement service initiate a session. The token redemption node can identify one of the available host management services that is geographically closer to the client computing device based on a latency of communications between the client computing device and the available host management services. In the case in the token redemption service routes the token redemption request to the host management service in the second data center on the basis that the second computing device is closer geographically to the second data center than to the first data center . The host management service can get any state information for a session of the first application from the database and provision a session in host . In this example the host management service in the second data center obtains data from the database in the first data center . It may be advantageous to store all information about sessions related to a single application in a single database . The amount of communication between the host management service and the database may be sufficiently low that there is little to no effect on latency of provisioning sessions. Conversely it is also possible to have databases in each of the first and second data centers and . Once session information is sent back to the second computing device the second computing device and the host can establish a direct connection to stream application content e.g. video and audio streams from the host to the second computing device and to pass input and control information from the second computing device to the host .

The host management service and host management service can send communications to each other to share information. The host management service and host management service can share information about active sessions hosted in their respective data centers and . The host management service and host management service can share information about availability and or capacity in their respective data centers and . The host management service and host management service can also share any other information. The information communicated between the host management service and host management service can be used when one of the host management service and host management service determines to provision a session with a host in one of the data centers and .

In the interactions between the second computing device the token redemption node the host management service and the host are the same as in . In other words the second computing device sends the token redemption request to the token redemption node . The token redemption node routes the token redemption request to the host management service . The host management service provisions a session with host and a direct connection between the second computing device and the host is established.

In the example shown in the first computing device sends a token redemption request to the token redemption node . The token redemption service routes the token redemption request to the host management service in the first data center on the basis that the first computing device is closer geographically to the first data center than to the second data center . In this particular instance the host management service in the first data center provisions a session with host in the second data center . A direct connection between the first computing device and the host is established.

The decision by the host management service to provision a session with host in the second data center despite the first computing device being closer geographically to the first data center than to the second data center may be based on one or more of a number of factors. In one example the first computing device and the second computing device may need to establish sessions with the same multi tenant application operating in the same host. The host management service can determine that an active session is already in place between the host and the second computing device and then provision an additional session between the host and the first computing device . In another example the host management service can determine that a session with the first computing device and a session with the second computing device will frequently communicate with each other. Provisioning the sessions with the first computing device and the second computing device in the same data center may reduce latency in communications between the sessions and overcome any latency issues with the direct connection between the first computing device and the host spanning a long geographic distance. In yet another example host management service can determine that computing efficiencies in host may overcome any latency issues with the direct connection between the first computing device and the host spanning a long geographic distance. Many other reasons for the decision by the host management service to provision a session with host in the second data center are possible.

At block the destination host management service can determine whether the token redemption request is authentic. Such a determination can be based on the token redemption request being received within a particular time period based on an identity of the client computing device that sent the token redemption request or based on any other type of information. If at block it is determined that the token redemption request is not authentic then at block an error message can be sent to the client computing device. However if at block it is determined that the token redemption request is authentic then at block the destination host management service can identify a session host from among hosts distributed across the multiple data centers. The determination of a session host can be based on a geographic location of the data center in which the session host is located with respect to the client computing device based on the existence of one or more other sessions in the data center in which the session host is located based on computing efficiencies of the session host based on latency of communications between a data center and the client computing device or based on any other type of information. At block the destination host management service can provision a session with the session host for the client computing device. Provisioning the session with the session host can include sending session information to the client computing device so that the client computing device can initiate a direct connection with the session host.

Referring back to the depiction illustrates some of the benefits of the embodiments described herein. One possible benefit is the scalability of number of hosts available for running applications and hosting developer applications. For example the first and second data centers and can spin up instances of hosts as additional hosts are needed. In addition if the first and second data centers and are reaching a capacity of the number of active hosts additional data centers can be employed without adding significant additional burden on the first and second data centers and . Because the sessions operating on the hosts are stateless the adding of new hosts whether within an existing data center or adding a new data center should scale network demands nearly linearly.

Another possible benefit is the availability of the system components. Since the hosts are stateless additional data centers and or hosts can be added in multiple regions. Adding data centers in multiple regions can reduce latency between hosts and users in those regions. If the database is located in only one location there is a possibility that network conditions in that one location could affect the availability of all the hosts. However it is possible to relocate the database if needed or to distribute the database across multiple locations.

Another possible benefit is the potential of recovery from loss of hosts and or data centers. Because the sessions between hosts and client computing devices are stateless the loss of a data center or individual hosts will not prevent the system from operating. For example if the second data center was located in a location that suffered a natural disaster that destroyed the second data center the second computing device could re establish a session for the same application by sending a new session request and having a new session established with a host in the first data center . Because all of the state information for the use of the application by the user is stored in the database the new session established with a host in the first data center will contain the same state information as the previous session with data center . If the database is located in a single data center such as the first data center the single location of the database could create a single point of failure. However a copy of the database could be stored in another location such as in data center on a regular basis so that data loss stemming from loss of the database would be limited to the data stored in the database in the time since the last backup.

Another possible benefit is the performance gained by separating the application content connections from the management connection. As is shown in the direct connections and between the first and second computing devices and and the hosts and respectively do not burden the host management services and in any way. This allows the host management services and to perform management functions such as responding to request for tokens provisioning hosts storing session information from heartbeat signals and the like without also have to handle the session streams. In this way the host management services and can handle entitlement and token redemption requests in as little time as possible. This will reduce any perceived latency to a user following a request to use an application.

Another possible benefit is the security risk of an application code being transferred from client computing devices to host computing devices. Developer applications can be malicious or have security flaws that allow the applications to become malicious. Client computing devices may not be as well equipped to handle such issues as host computing devices host computing devices may be more capable of identifying and neutralizing malicious code or behavior. The host system can also incorporate a number of security functions. In one example applications from one developer can be hosted within a single virtual private cloud to limit access of the developer s application s to other applications. In another example an operator of the hosts can deliver credentials to sign interaction from the host. In another example none of the hosts stores any information about the client computing device or a user of the client computing device.

Computing device can also include one or more hard buttons integrated into housing . In one embodiment the one or more hard buttons can include a single button such as a home button or a power button. In another embodiment the one or more hard buttons can include a small set of buttons such as a power button a home button and a back button. In yet another embodiment the one or more hard buttons can include a large set of buttons such as a full QWERTY keyboard a keypad and the like. The one or more hard buttons can be part of the user interaction system of the computing device .

Computing device can also include a speaker configured to emit sounds and a microphone configured to receive sounds. In the embodiment where computing device is a cell phone speaker and microphone can be used to carry on a telephone call. In one embodiment speaker can be configured to play sounds associated with graphics displayed on display such as during play of audiovisual material on computing device . In another embodiment microphone can receive audio sounds which the computing device can interpret as user inputs. In addition while not depicted in computing device can also include an audio port which can be connected to an external microphone and or an external speaker or speakers. Computing device can send and receive audio signals via the audio port and interpret the received audio signals via the audio port just as it would interpret audio signals generated from sounds received by the microphone .

Computing device can also include one or more optical devices . In one embodiment an optical device can include an optical sensor such as an infrared sensor a visible light sensor and or any device that can sense light and or electromagnetic energy. The detection of light and or electromagnetic energy can be used by the computing device to control components of the computing device such as a level of light emitted by a backlight of display illumination of one or more hard buttons and any other aspect of computing device . In another embodiment an optical device can include an image capturing device such as a digital camera. An image capturing device can include any device configured to capture an image such as a complementary metal oxide semiconductor CMOS active pixel sensor APS and a charged coupled device CCD . Images captured by one or more optical devices can be stored by the computing device as individual image or as a series of images in a video. Individual images and or video images can be processed by computing device and interpreted as user inputs. While depicts one of the optical devices pointing in the same direction as the display it is possible for computing device to have any number of optical devices and it is possible for one or more optical devices to be pointed in other directions such as a rear facing camera pointing in the opposite direction of display .

Computing device can include a power source . Power source can provide power to any or all of the other components in computing device . As depicted in power source can be connected to and provide power to each of processor memory display network interface and user interface . Power source can be any type of power source such as one or more disposable batteries a rechargeable battery and the like. In the embodiment where computing device is a portable device such as a laptop computer a tablet computer a cell phone a handheld computer and the like the power source may need to provide power for a period of time during recharging of the power source . When power source is not connected to an external power source computing device is drawing on the power stored in power source . The capacity of power source can vary with the type and size of power source . The rate at which power source discharges depends on a number of factors such as which components of computing device are active how much power each of the active components are drawing from power source and the like.

Each type or configuration of computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. Customers may choose to allocate a number of small processing resources as web servers and or one large processing resource as a database server for example.

Data center may include servers which may be referred herein singularly as server or in the plural as servers that provide computing resources. These resources may be available as bare metal resources or as virtual machine instances and which may be referred herein singularly as virtual machine instance or in the plural as virtual machine instances . Virtual machine instances and are interest virtual machine instances. The interest virtual machine instances and may be configured to perform all or any portion of the encoding techniques based on areas of interest in accordance with the present disclosure and described in detail below. As should be appreciated while the particular example illustrated in includes one interest virtual machine in each server this is merely an example. A server may include more than one interest virtual machine or may not include any interest virtual machines.

The availability of virtualization technologies for computing hardware has provided benefits for providing large scale computing resources for customers and allowing computing resources to be efficiently and securely shared between multiple customers. For example virtualization technologies may allow a physical computing device to be shared among multiple users by providing each user with one or more virtual machine instances hosted by the physical computing device. A virtual machine instance may be a software emulation of a particular physical computing system that acts as a distinct logical computing system. Such a virtual machine instance provides isolation among multiple operating systems sharing a given physical computing resource. Furthermore some virtualization technologies may provide virtual resources that span one or more physical resources such as a single virtual machine instance with multiple virtual processors that spans multiple distinct physical computing systems.

Referring to communications network may for example be a publicly accessible network of linked networks and possibly operated by various distinct parties such as the Internet. In other embodiments communications network may be a private network such as a corporate or university network that is wholly or partially inaccessible to non privileged users. In still other embodiments communications network may include one or more private networks with access to and or from the Internet.

Communications network may provide access to computers . User computers may be computers utilized by users or other customers of data center . For instance user computer or may be a server a desktop or laptop personal computer a tablet computer a wireless telephone a personal digital assistant PDA an e book reader a game console a set top box or any other computing device capable of accessing data center . User computer or may connect directly to the Internet e.g. via a cable modem or a Digital Subscriber Line DSL . Although only two user computers and are depicted it should be appreciated that there may be multiple user computers.

User computers may also be utilized to configure aspects of the computing resources provided by data center . In this regard data center might provide a gateway or web interface through which aspects of its operation may be configured through the use of a web browser application program executing on user computer . Alternately a stand alone application program executing on user computer might access an application programming interface API exposed by data center for performing the configuration operations. Other mechanisms for configuring the operation of various web services available at data center might also be utilized.

Servers shown in may be standard servers configured appropriately for providing the computing resources described above and may provide computing resources for executing one or more web services and or applications. In one embodiment the computing resources may be virtual machine instances . In the example of virtual machine instances each of the servers may be configured to execute an instance manager or which may be referred herein singularly as instance manager or in the plural as instance managers capable of executing the virtual machine instances . The instance managers may be a virtual machine monitor VMM or another type of program configured to enable the execution of virtual machine instances on server for example. As discussed above each of the virtual machine instances may be configured to execute all or a portion of an application.

It should be appreciated that although the embodiments disclosed above discuss the context of virtual machine instances other types of implementations can be utilized with the concepts and technologies disclosed herein. For example the embodiments disclosed herein might also be utilized with computing systems that do not utilize virtual machine instances.

In the example data center shown in a router may be utilized to interconnect the servers and . Router may also be connected to gateway which is connected to communications network . Router may be connected to one or more load balancers and alone or in combination may manage communications within networks in data center for example by forwarding packets or other data communications as appropriate based on characteristics of such communications e.g. header information including source and or destination addresses protocol identifiers size processing requirements etc. and or the characteristics of the private network e.g. routes based on network topology etc. . It will be appreciated that for the sake of simplicity various aspects of the computing systems and other devices of this example are illustrated without showing certain conventional details. Additional computing systems and other devices may be interconnected in other embodiments and may be interconnected in different ways.

In the example data center shown in a server manager is also employed to at least in part direct various communications to from and or between servers and . While depicts router positioned between gateway and server manager this is merely an exemplary configuration. In some cases for example server manager may be positioned between gateway and router . Server manager may in some cases examine portions of incoming communications from user computers to determine one or more appropriate servers to receive and or process the incoming communications. Server manager may determine appropriate servers to receive and or process the incoming communications based on factors such as an identity location or other attributes associated with user computers a nature of a task with which the communications are associated a priority of a task with which the communications are associated a duration of a task with which the communications are associated a size and or estimated resource usage of a task with which the communications are associated and many other factors. Server manager may for example collect or otherwise have access to state information and other information associated with various tasks in order to for example assist in managing communications and other operations associated with such tasks.

It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. These network topologies and devices should be apparent to those skilled in the art.

It should also be appreciated that data center described in is merely illustrative and that other implementations might be utilized. Additionally it should be appreciated that the functionality disclosed herein might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art. It should also be appreciated that a server gateway or other computing device may comprise any combination of hardware or software that can interact and perform the described types of functionality including without limitation desktop or other computers database servers network storage devices and other network devices PDAs tablets cellphones wireless phones pagers electronic organizers Internet appliances television based systems e.g. using set top boxes and or personal digital video recorders and various other consumer products that include appropriate communication capabilities. In addition the functionality provided by the illustrated modules may in some embodiments be combined in fewer modules or distributed in additional modules. Similarly in some embodiments the functionality of some of the illustrated modules may not be provided and or other additional functionality may be available.

In at least some embodiments a server that implements a portion or all of one or more of the technologies described herein may include a general purpose computer system that includes or is configured to access one or more computer accessible media. depicts a general purpose computer system that includes or is configured to access one or more computer accessible media. In the illustrated embodiment computing device includes one or more processors and or which may be referred herein singularly as processor or in the plural as processors coupled to a system memory via an input output I O interface . Computing device further includes a network interface coupled to I O interface .

In various embodiments computing device may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors Y may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripherals in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computing device and other device or devices attached to a network or networks such as other computer systems or devices for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs storage area networks or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computing device via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computing device as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as those that may be implemented via network interface . Portions or all of multiple computing devices such as those illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality. In some embodiments portions of the described functionality may be implemented using storage devices network devices or special purpose computer systems in addition to or instead of being implemented using general purpose computer systems. The term computing device as used herein refers to at least all these types of devices and is not limited to these types of devices.

A compute node which may be referred to also as a computing node may be implemented on a wide variety of computing environments such as commodity hardware computers virtual machines web services computing clusters and computing appliances. Any of these computing devices or environments may for convenience be described as compute nodes.

A network set up by an entity such as a company or a public sector organization that provides one or more web services such as various types of cloud based computing or storage accessible via the Internet and or other networks to a distributed set of clients may be termed a provider network. Such a provider network may include numerous data centers hosting various resource pools such as collections of physical and or virtualized computer servers storage devices networking equipment and the like needed to implement and distribute the infrastructure and web services offered by the provider network. The resources may in some embodiments be offered to clients in various units related to the web service such as an amount of storage for storage processing capability for processing as instances as sets of related services and the like. A virtual computing instance may for example comprise one or more servers with a specified computational capacity which may be specified by indicating the type and number of CPUs the main memory size and so on and a specified software stack e.g. a particular version of an operating system which may in turn run on top of a hypervisor .

A number of different types of computing devices may be used singly or in combination to implement the resources of the provider network in different embodiments including general purpose or special purpose computer servers storage devices network devices and the like. In some embodiments a client or user may be provided direct access to a resource instance e.g. by giving a user an administrator login and password. In other embodiments the provider network operator may allow clients to specify execution requirements for specified client applications and schedule execution of the applications on behalf of the client on execution platforms such as application server instances Java virtual machines JVMs general purpose or special purpose operating systems platforms that support various interpreted or compiled programming languages such as Ruby Perl Python C C and the like or high performance computing platforms suitable for the applications without for example requiring the client to access an instance or an execution platform directly. A given execution platform may utilize one or more resource instances in some implementations in other implementations multiple execution platforms may be mapped to a single resource instance.

In many environments operators of provider networks that implement different types of virtualized computing storage and or other network accessible functionality may allow customers to reserve or purchase access to resources in various resource acquisition modes. The computing resource provider may provide facilities for customers to select and launch the desired computing resources deploy application components to the computing resources and maintain an application executing in the environment. In addition the computing resource provider may provide further facilities for the customer to quickly and easily scale up or scale down the numbers and types of resources allocated to the application either manually or through automatic scaling as demand for or capacity requirements of the application change. The computing resources provided by the computing resource provider may be made available in discrete units which may be referred to as instances. An instance may represent a physical server hardware platform a virtual machine instance executing on a server or some combination of the two. Various types and configurations of instances may be made available including different sizes of resources executing different operating systems OS and or hypervisors and with various installed software applications runtimes and the like. Instances may further be available in specific availability zones representing a logical region a fault tolerant region a data center or other geographic location of the underlying computing hardware for example. Instances may be copied within an availability zone or across availability zones to improve the redundancy of the instance and instances may be migrated within a particular availability zone or across availability zones. As one example the latency for client communications with a particular server in an availability zone may be less than the latency for client communications with a different server. As such an instance may be migrated from the higher latency server to the lower latency server to improve the overall client experience.

In some embodiments the provider network may be organized into a plurality of geographical regions and each region may include one or more availability zones. An availability zone which may also be referred to as an availability container in turn may comprise one or more distinct locations or data centers configured in such a way that the resources in a given availability zone may be isolated or insulated from failures in other availability zones. That is a failure in one availability zone may not be expected to result in a failure in any other availability zone. Thus the availability profile of a resource instance is intended to be independent of the availability profile of a resource instance in a different availability zone. Clients may be able to protect their applications from failures at a single location by launching multiple application instances in respective availability zones. At the same time in some implementations inexpensive and low latency network connectivity may be provided between resource instances that reside within the same geographical region and network transmissions between resources of the same availability zone may be even faster .

Thus as set forth above a content provider may provide content to a destination over a network such as the Internet using for example streaming content delivery techniques. A content provider may for example provide a content delivery service that may reside on one or more servers. The service may be scalable to meet the demands of one or more customers and may increase or decrease in capability based on the number and type of incoming client requests. The content delivery service may in some cases process a content item in parallel across multiple nodes of the content delivery service. This may be done in one embodiment to reduce the latency for rendering the content item. Portions of the content delivery service may also be migrated to be placed in a position of reduced latency with a requesting client. In some cases the content provider may determine an edge of a system or network associated with the content provider that is physically and or logically closest to a requesting client. The content provider may then for example spin up migrate resources or otherwise employ components associated with the determined edge for interacting with requests from the client. Such an edge determination process may in some cases provide an efficient technique for identifying and employing components that are well suited to interact with a particular client and may in some embodiments reduce the latency for communications between a content provider and one or more clients.

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computers or computer processors. The code modules may be stored on any type of non transitory computer readable medium or computer storage device such as hard drives solid state memory optical disc and or the like. The processes and algorithms may be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of non transitory computer storage such as e.g. volatile or non volatile storage.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition certain method or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial in parallel or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

It will also be appreciated that various items are illustrated as being stored in memory or on storage while being used and that these items or portions of thereof may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software modules and or systems may execute in memory on another device and communicate with the illustrated computing systems via inter computer communication. Furthermore in some embodiments some or all of the systems and or modules may be implemented or provided in other ways such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the modules systems and data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The systems modules and data structures may also be transmitted as generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission media including wireless based and wired cable based media and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly the present invention may be practiced with other computer system configurations.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

While certain example embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions disclosed herein. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein.

