---

title: Module-based device interaction system
abstract: A system that enables a person to monitor and/or control a device via a network, such as the Internet, via an interactive hardware module that interfaces with the device and communicates with a module server located locally or remotely from the placement of the module. The hardware module allows for the transmission and receipt of data between the device interfaced to the hardware module and the module server, thereby enabling the user manually or automatically to control or monitor the device via an access medium, such as an API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09497272&OS=09497272&RS=09497272
owner: ioBridge, Inc.
number: 09497272
owner_city: Marlborough
owner_country: US
publication_date: 20131230
---
This application is a continuation of U.S. patent application Ser. No. 13 585 362 filed Aug. 14 2012 which is a continuation of U.S. patent application Ser. No. 12 629 455 filed Dec. 2 2009 now issued U.S. Pat. No. 8 271 629 which claims the benefit of U.S. provisional application No. 61 200 692 filed Dec. 2 2008. Each of these applications is incorporated by reference herein in their entireties for all purposes.

This application relates generally to the control of remote mechanisms via a network. More particularly the present invention relates to a system and method for a Web based medium for controlling or monitoring devices using a wireless or wired network and or Internet connections.

Controlling devices over the Internet requires considerable knowledge across several fields. For example to manipulate a device via the Internet such as via an interactive Web site a person may need to understand Web site design networking server management communication protocols multiple programming languages embedded systems and mechatronics. As such the vast majority of people do not possess the necessary skills to configure a system allowing for the control a device via the World Wide Web.

In addition to the knowledge required the hardware requirements of such an undertaking are prohibitive small entities such as individuals or small organizations. Current Web based device monitoring and control interface systems are meant for industrial applications. The expense and power requirements of industrial equipment are too great to make this a realistic solution. In addition the equipment is rather large consuming large cabinets and racks impractical for home or small business use. This solution may also require familiarity with the equipment s programming interface and custom cabling and hardware.

Other current solutions for Web based device control require a person to establish a server which accepts requests from the Internet. These servers are typically embedded Web servers that host their own Web pages for device interaction. The Internet connections employed by small entities are typically based on dynamic internet protocol IP address assignment. Hosting a server on a dynamic IP address is problematic because the IP address may change causing a disruption in the server s connection to the Internet and preventing a remote user from contacting the server. Additionally hosting a server requires the user to configure the local network. An average person may have difficulty with the intricacies of remapping router ports and other such matters. Furthermore some individuals may not have access to their Internet connection networking equipment such as people living in apartment complexes or dormitories. Internet Service Providers ISPs may cause additional problems for server based architectures. Many ISPs frown upon users hosting servers and may block ports used for this.

Both the aforementioned industrial and server solutions lack convenient mechanisms for Web site and Web service integration. Considerable knowledge of Hypertext Markup Language HTML JavaScript and Application Programming Interfaces APIs is required to place any controls on a Web site or to establish access via a Web service such as a social network web application desktop program mobile application or the like. As a result such a solution requires customized Web site integration which again is beyond the skills of the average user.

What is needed is a convenient system and method that enables an average person to configure an architecture to control or monitor a device via a Web based medium.

The present invention addresses the aforementioned needs by providing a system that enables a person to monitor and or control a device via a network such as the Internet via an interactive hardware module that interfaces with the device and communicates with a module server located locally or remotely from the placement of the module. The hardware module allows for the transmission and receipt of data between the device interfaced to the hardware module and the module server thereby enabling the user manually or automatically to control or monitor the device via an access medium such as an API.

Various embodiments of the invention are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person with ordinary skill in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the invention.

The module server can receive data messages sent by the hardware module such as those relayed from an interfaced device . The module server can relay such communication to an access medium and or another hardware module connected to the network . The module server can interface with an access medium to transmit communications to or from the hardware module and to configure the hardware module .

An access medium can be a mechanism by which a user can control or monitor a device . For example an access medium can enable a user to operate a device monitor the status of a device receive and or review data generated by a device or the like. In one embodiment an access medium can be accessible by various agents such as a personal computer a mobile device or the like. For example an access medium can be a Web service such as for example a streaming server a push driven server an email server a social network a database an event notification service a scripting server a Web page or the like. Additionally an access medium can comprise an API such as a Web widget or gadget another convenient programming interface or the like. Alternatively an access medium can be a Web interface such as a dynamic scripting a Flash interface or the like.

Data transmitted between one or more of the device the hardware module the module server and the access medium can be encrypted such as via a compressible encryption technique encapsulated and translated over common internetworking protocols and networking technologies.

The hardware module can act as a client to the module server . This configuration enables the MBDIS to overcome problems inherent in hosting a server. A dynamic IP address is no longer problematic. The hardware module can initiate the connection to the module server and as such there is no need to keep track of the user s IP address. Additionally an ISP does not block outbound traffic from a user s location as opposed to in bound traffic as would be the case if the user employed a local server as this would be the equivalent to preventing the user from accessing the Internet entirely. Furthermore as the hardware module itself establishes the connection as a client to the module server there is no need for any network configuration on the part of the user. All traffic generated by the use of the hardware module is viewed as normal traffic by the network . This enables the hardware module to work through firewalls and proxy servers.

The design of the hardware module can vary per implementation. In one example the hardware module may be constructed of a two sided 0.060 inch thick printed circuit board PCB . A top and bottom plate of 0.125 inch clear acrylic fixed in place by spacers and screws may provide a simple exterior structure for the hardware module . A label on the top surface of the hardware module may indicate the model number serial number connection assignments media access control MAC address and I O channel pin out and the like. In totality the hardware module may be 3.8 inches 2.5 inches 1.24 and weighs approximately 90 grams. In other scenarios the hardware module may be smaller or larger and may be constructed of different materials.

As illustrated by in one embodiment the hardware module can include a network connection mechanism a controller mechanism a memory mechanism a power mechanism an initialization mechanism an initialization status display a connectivity status display an I O channel port and an event processor .

The hardware module can be located at a location convenient to the entity employing it. For example an individual may employ a hardware module at his residence or a small business owner may employ a hardware module at his work location. The hardware module can be located anywhere so long as the device to be controlled or monitored can connect with the network connection mechanism .

The controller mechanism can communicate with the components of the hardware module to direct the flow of data monitor and or direct the activity of components and the like. For example the controller mechanism can communicate with the network connection mechanism to enable the communication of data to and from the hardware module . In one embodiment the controller mechanism is a microcontroller. In addition to enabling the transmission of messages from an interfaced device to the module server the controller mechanism can relay messages from a device interfaced with one I O channel port e.g. I O channel port A to another device interfaced with a different I O channel port e.g. I O channel port B .

The network connection mechanism can enable the hardware module to connect to the network and thereby transmit and receive data from the module server . In one embodiment the network connection mechanism can connect with the network via a local network . For example the hardware module may function on any 10 100 1000 Base T auto negotiated network. In one embodiment the network connection mechanism can enable a wired connection. For example the network connection mechanism may be an Ethernet controller. Alternatively the network connection mechanism can enable a wireless connection. The hardware module can function via a Dynamic Host Configuration Protocol DHCP or static addressing. If the local network is configured for MAC filtering the MAC address of the hardware module can be added to the local network router s list of allowable addresses. Alternatively the hardware module can be connected to a non MAC filtered network first and management tools can be used to change the MAC address of the hardware module . Alternatively the hardware module can connect to the network directly.

When the hardware module connects to the network it can establish a communication link with the module server . The communication link may be established through any known protocol such as via Transmission Control Protocol Internet Protocol TCP IP . The hardware module can accept communications from and transmit messages to the module server .

The hardware module can include a memory mechanism to store settings. For example the memory mechanism may be non volatile random access memory RAM .

The power mechanism can enable the distribution of power to the hardware module . For example the power mechanism may enable and monitor the receipt of electricity to power the hardware module from an electrical cord or battery.

The initialization mechanism can be used to establish a connective link between the hardware module and a user account at the module server . Additionally the initialization mechanism can enable a user to reset the hardware module to a previous condition such as its factory condition. The initialization mechanism can be a manual implement. For example the initialization mechanism may be a button that the user pushes or holds down. Alternatively the initialization mechanism can be accessible electronically. For example the user may operate the initialization mechanism via his computer such as via an access medium .

The hardware module can include one or more display mechanisms such as an initialization status display . The initialization status display can relate information associated with the hardware module s connection to the module server . For example the initialization status display may indicate one or more of the following 

The hardware module can also include a connectivity status display . The connectivity status display can indicate the state of connectivity between the hardware module and the module server . For example the connectivity status display may indicate one or more of the following 

The hardware module can also include one or more I O channel ports that can interface with a device . Although four I O channel ports have been depicted in i.e. A B C D this is not to be construed as limiting and amount can vary depending upon implementation. The device can be any appropriate apparatus such as a conventional device A or a smart device B described in detail below . The hardware module can interface with a device via a wired or wireless connection. For example an I O channel port can include an outlet to receive a wired plug. Alternatively an I O channel port can be configured to receive a wireless signal. In one embodiment the user can employ a medium adapter to interface a device with the hardware module wirelessly. The medium adapter can enable various wireless communication methods and can enable the conversion of various communication methods. For example the medium adapter may enable the conversion of an electronic signal to a fiber optic or radio frequency signal.

The hardware module can discover an interfaced device manually or automatically. To manually discover a device the user can access his user account and indicate the type of device he had interfaced. For example a user may access a MBDIS Web site log into his user account and indicate the type of device such as via a dropdown menu or from a checkbox list. Alternatively the controller mechanism can include a discovery protocol which can enable plug and play functionality. For example the discovery protocol may interrogate the controller mechanism to determine whether an interfaced device is a conventional device A or a smart device B .

In one embodiment each I O channel port has a separate digital input analog input and digital output. Each I O channel port can be configured to employ digital input output analog input output serial data input output pulse and frequency counting generation audio input output video input output or the like. The hardware module can be configured to set the state i.e. the digital voltage level of output on a particular I O channel port and can also read a voltage input level. As described below in regard to smart mode an I O channel port can serve as a data channel for communication with interfaced smart devices B .

The I O channel ports can be independent from one another and may be the input and output means for the MBDIS . Communication from the module server to the hardware module can instruct the hardware module to change output lines on the I O channel ports while communication from the hardware module to the module server can relay information about device values and other inputs.

An I O channel port can include multiple lines or pins. The functionality of each pin may vary dependent upon the operating mode of the particular I O channel port . An I O channel port can be capable of operating in one of two modes normal mode and smart mode.

When an I O channel port is set to normal mode the hardware module can use digital I O and analog input capabilities native to the controller mechanism to interact with an interfaced device . For example an I O channel port set to normal mode may be enabled for discreet digital input and or output pulse counting frequency counting serial input and or output and analog input and or output or the like. In normal mode the hardware module can interface with conventional devices such as analog sensors switches lights liquid crystal displays LCDs microcontroller units MCUs relays or the like. A device connected to an I O channel port set to normal mode can be considered a conventional device A .

When an I O channel port is set to smart mode the hardware module can interface with more sophisticated devices . Smart mode can convert the I O channel port into a digital communication port allowing other equipment to interface with the hardware module and an I O channel port set for this mode may be capable of serial communication via standard and proprietary protocols. For example smart mode may be employed if a particular function is beyond the scope of a simple analog sensor or digital I O device. A device interfaced to a smart mode enabled I O port channel can be considered a smart device B . A smart device B can include its own controller mechanism such as a microcontroller to manage communication via its particular I O port channel . For example smart devices B may be serial or servo controllers Infrared receivers and transmitters video devices audio devices USB hardware wireless transceiver medium adapters other peripheral hardware or the like. Smart devices B provide data to the hardware module which can relay it to the module server which can in turn transmit it to an access medium or another hardware module . For example the data can be sent to a networked database for logging. Likewise messages intended for a smart device B can be received by the module server relayed to the hardware module and then transmitted to the smart device B . The hardware module need not directly manage a smart device B . In one embodiment the hardware module merely registers the existence of the smart device B on startup and directs messages to and from it.

The hardware module can act as a client while the interfaced smart device B may function as a server. Despite these roles this configuration allows for the smart device B to generate and transmit a message unsolicited to the hardware module and in turn the module server .

The hardware module can also include an event processor . The event processor can monitor behavior of an interfaced device and when a particular event occurs the event processor can push a message to another device interfaced with the hardware module or to the module server and in turn an access medium or one or more additional hardware modules . For example if the device interfaced with the hardware module is a thermometer the event processor can send a message to a second interfaced device or to the module server when a particular temperature is reached. As another example the event processor may receive video or audio data and in turn initiate a message transmission. In addition to or instead of initiating the pushing of data based upon a particular device event the event processor can push messages via an established schedule. For example the interfaced device may be a lamp and a user may configure the hardware module to turn on the lamp at a certain time on a certain day. Furthermore the event processor can communicate data when requested by an access medium . For instance continuing with the thermometer example the user can employ an access medium to request the thermometer s current temperature reading.

As is detailed below the module server can also include an event processor . The event processor located at the module server can be functionally equivalent to the event processor of the hardware module . In one embodiment the hardware module event processor can be synchronized with the configuration maintained by the module server event processor . Once configured the hardware module event processor can enable the hardware module to function autonomously regardless of whether it has an active connection to the module server .

Either or both the hardware module event processor and the module server event processor can cause the transmission of a message based on an event associated with one device to a second device . In one embodiment both the first and second devices can be interfaced with the same hardware module either via separate I O channel ports or the same I O channel port . As such the event processor can cause the relaying of data between two or more devices interfaced with the same hardware module .

The module server can relay data and instructions between a hardware module and an access medium or a second hardware module . The module server can be located remotely from the hardware module but need not be. The module server can include a server controller one or more module connections one or more access medium connections an authentication database a user account database a transaction identifying mechanism a transaction logging mechanism and an event processor .

The server controller can enable the flow of data amongst the various components of the module server .

A module connection can be a socket waiting and listening for incoming communication from a hardware module . A module connection can enable the pulling and pushing of data between the module server and a hardware module and in turn a device . An access medium connection is a socket used by the module server to communicate with an access medium . An access medium connection can wait and listen for incoming communication from an access medium and can receive conventional requests from Web services such as Hypertext Transfer Protocol HTTP requests. For example an access medium connection can receive communication originating from a web browser or an automated Common Gateway Interface CGI script desktop application Web service API or mobile application. In one embodiment the module connections and the access medium connections wait and listen on different ports to ensure proper communication.

The authentication database can maintain information pertinent to module identifiers e.g. serial numbers . The authentication database can maintain a record of all module identifiers for all hardware modules distributed by the MBDIS service provider. The authentication database can also maintain data pertaining to encryption. For example when a hardware module initiates a connection with the module server the server controller may access the authentication database to locate a module identifier and its corresponding encryption key to authenticate the connection. If the module identifier is located and the encryption is successful the hardware module can interface with the module server and in turn an access medium . Alternatively if a corresponding module identifier is not found or encryption fails the server controller can close the connection.

The module server can include a transaction logging mechanism to record transactions with one or more hardware modules . The transaction logging mechanism can be configured to record all transactions that are handled by the module server and or those indicated by the configurations established via the module server event processor or the hardware module event processor . The recorded data can be employed to analyze system data such as to create charts plots or calculate values for record keeping or event triggering.

The module server can also include a transaction identifying mechanism . As described in detail below the transaction identifying mechanism can associate a transaction identifier with each transmission sent to the hardware module to ensure successful interaction between the module server and the hardware module .

A user account database can maintain user accounts for individuals who have registered their hardware modules with the MBDIS . A user account can include various information associated with the user such as contact information name mailing address email address phone numbers latitude longitude etc. information particular to the user s hardware module s model data make data a module identifier etc. authentication information e.g. username and password financial account information e.g. credit card numbers etc. or the like. An individual can create a user account prior to initializing his hardware module . To create a user account the user can provide the MBDIS service provider with the necessary information via a Web site email mail verbally e.g. via a customer service representative fax or the like.

As aforementioned the module server can include an event processor . The event processor can push a message to an access medium or second hardware module per an event that has occurred at a device that is interfaced with a first hardware module . This configuration can enable a user to monitor the performance of a device in real time. In one scenario the access medium may be an email service a text messaging service e.g. Short Message Service SMS etc. a social network service or the like. For example if the device is a thermometer the event processor can push a message to a social networking service such as Facebook when the thermometer reaches a certain temperature and the temperature data can be displayed as a status update. As another example the temperature data can be sent to an email service and the user can receive the data in an email message. As with the hardware module event processor the module server event processor can also transmit messages on a scheduled periodic basis. In addition to pushing messages the event processor can provide such data when requested by an access medium or another hardware module .

A user can access his user account via for example the MBDIS Web site and configure one or more triggers and corresponding action for his registered hardware module s . As mentioned above the user can also initiate a synchronization process whereby the module server event processor settings are synchronized with those of a hardware module event processor .

Regarding communication between a first hardware module and a second hardware module the event processor can provide instructions to the second hardware module based on an event that occurred at the first hardware module . For example the event processor may receive temperature data from a thermometer device interfaced with the first hardware module and if the temperature data indicates a temperature higher than a certain threshold the event processor may send a message to the second hardware module instructing it to activate an interfaced cooling device . The event processor can act in a similar fashion to relay messages between two or more devices interfaced with the same hardware module . For instance the event processor may receive temperature data from a thermometer device interfaced with one I O channel port and send a message to a cooling device interfaced with a second I O channel port on the same hardware module . In another example the device interfaced with the hardware module may be a data storage medium and the user can employ the data storage medium to record data regarding a second device interfaced with a different I O channel port or another hardware module .

In addition or instead of sending a message to an access medium or a hardware module the event processor can send data to the transaction logging mechanism . The user can employ this configuration when he wishes to for example record data from a device but does not desire real time monitoring. Additionally the transaction logging mechanism can enable various visualization processes so that data recorded via the event processor can be analyzed. For example data recorded by the transaction logging mechanism can be accessible via an access medium such as a Web widget that can display the recorded data as a chart or graph.

The event processor can also be enabled to transmit data to an external database for recordation analysis or the like.

The access medium can be a mechanism by which a user can interact via the module server with a device interfaced with a hardware module . For example an access medium may be an API a Web service a Web interface or the like. As aforementioned via an access medium a user can control or monitor a device . For example an access medium can request data from a device translate data generated by a device into a useful syntax and display it push a command to a device or the like. The access medium can be provided by portable client side scripting that allows for embedding control and monitoring resources into Web sites mobile device applications and widgets Web service feeds social networks Web service APIs or the like. The access medium interpret data received from a device and present the data to users and Web services in current and appropriate scales formats and syntaxes. For example an access medium can receive data from a thermometer device and present that data in degrees Fahrenheit or Centigrade. The access medium can receive data based upon push data transmission initiated by an event processor can request data itself or it can access data recorded in the transaction logging mechanism e.g. to display such logged data a chart graph or the like .

Additionally an access medium can also allow a user to configure the hardware module and or its interfaced devices via the module server . For example the user may set an I O channel port to normal mode or smart mode.

An access medium can be accessible via Web enabled devices such as personal computers and mobile devices e.g. mobile phones smart phones personal digital assistant etc. .

To enhance user convenience the MBDIS service provider can offer one or more access mediums to users. For example a user may visit an MBDIS Web site and access ready made Web widget coding that can be input into the coding of a Web page in order to control or monitor a device from the Web page. The MBDIS service provider can provide access mediums for common functionalities such as light levels temperature display weather information and the like. The MBDIS sever provider can also provide a convenient interface by which a user can create a customized access medium . For example an MBDIS Web site may include a point and click interface a wizard interface or another form of customized programming interface by which a user may generate a customized access medium suitable to the user s needs and or the particular functionality of a device .

In order for a user to employ to a hardware module he may be required to authenticate it with the module server thereby linking his hardware module to his user account. The MBDIS service provider can employ an authentication process in order to confirm that an actual individual wishing to employ a particular hardware module is initializing the hardware module rather than an automated process. This can ensure the hardware module is being employed with the user s permission.

To begin initialization the user can connect his hardware module to the network step . As aforementioned the user may connect his hardware module to the network via a local network . The hardware module can then transmit a connection request to the module server step . The module server can be configured to listen to the network and enabled to await such requests. Once a connection has been established between the module server and the hardware module step the connectivity status display can indicate this e.g. by displaying a green light .

The user can then register a module identifier associated with the hardware module with the module server step . In one embodiment the user can register a module identifier by associating it with a user account maintained by the module server . The module identifier can be for example a serial number included on the hardware module and or documentation provided to the user when the hardware module was acquired. The module identifier can also be included in firmware maintained by the hardware module . In addition to registering the module identifier the user can register contact information authentication information e.g. username and password financial account information or the like.

The registration process can involve the user establishing a user account with the MBDIS service provider. The user can establish the user account prior to the initialization. Additionally the user can be allowed to register multiple hardware modules with the same user account and therefore can employ the initialization process to add an additional hardware module to an existing user account. In one embodiment the user can establish a user account by employing a computing device e.g. personal computer mobile device etc. to access a Web site linked to the module server . Once at the Web site the user can register the module identifier and other information. In alternate embodiments the user can establish and or augment a user account via other methods. For example a user may verbally establish an account by calling the MBDIS service provider and providing the necessary information to a customer service representative. As another example a user may complete a registration form and mail email or email it to the MBDIS service provider.

Once the user has registered the module identifier with his user account he can activate the initialization mechanism step . For example if the initialization mechanism is an external button the user may hold the button for particular amount of time e.g. five seconds . The initialization status display can indicate to the user that initialization has commenced.

The hardware module can receive authentication data transmitted from the module server step . The hardware module can display this authentication data to the user via the initialization status display mechanism . For example the module server may transmit a series of digits to the hardware module and the initialization status display mechanism may display the digits to the user.

The user can provide the transmitted authentication data to the MBDIS service provider step . In one embodiment the user can enter the displayed authentication data at a Web site linked to the module server . The user may do so during the same session with which he registered the module identifier. In alternate embodiments the user can provide the authentication data by verbally relating it to a customer service representative e.g. via telephone or by mailing emailing or faxing the authentication data to the MBDIS service provider.

The provided authentication data is relayed to the module server which analyzes it to determine if it is valid. If the provided authentication data is incorrect the user may be requested to provide it again. If the user cannot successfully do so the hardware module can receive a termination signal from the module server step and the hardware module may not be activated. If the authentication data is deemed valid the hardware module can receive a signal from the module server indicating that the initialization is complete step . The hardware module can now have an active connection with the module server and the initialization display mechanism can signal the end of initialization.

As aforementioned the configuration of the MBDIS can enable the hardware module to serve as a client rather than a server. The hardware module can issue transmissions via the network to the module server without the module server replying immediately. In one embodiment Internet Protocol IP such as HTTP protocol can be used for communication between the hardware module and the module server . The hardware module can act as a client and issue requests to the module server . The module server need not reply immediately thereby allowing the hardware module to send another request to push data to the module server . Although it may the hardware module need not request anything from the module server . Once the hardware module makes its initial connection requests can be generated by the module server . The hardware module can push data to the module server and can do so without being solicited. In one embodiment the hardware module can transmit HTTP POST requests which are not cached by web proxy servers. Furthermore the use of HTTP POST transmissions with no immediate reply from the module server enables web proxy servers to manage the communication between the hardware module and module server as standard HTTP traffic thereby alleviating unnecessary burden upon the MBDIS .

The module server can manage numerous connections simultaneously. Since the module server can request data from the hardware module in addition to the hardware module being able to send data to the module server there is the possibility that data messages may cross in transit. As illustrated by the transaction identifying mechanism can prevent any problem that may occur due to such a situation. The server controller can receive a transmission to be sent to the hardware module step . For example a user may employ an access medium to send control instructions to the hardware module or the event processor may wish to send data to a hardware module per an event triggered by a device . The transaction identifying mechanism of the module server can associate a transaction identifier with each transmission to be sent to the hardware module step . The transaction identifying mechanism can record this transaction identifier step . For example the module server may issue a unique six digit transaction identification code with each request sent to the hardware module . The module server can send the transmission with its associated transaction identifier to the hardware module step . The module server can receive a response transmission from the hardware module and the response can include a transaction identifier such as in a Uniform Resource Identifier step . The transaction identifying mechanism can compare the received transaction identifier with those it has recorded to determine if the response is a valid transmission step . If the received transaction identifier does not match one recorded the response can be rejected step . If the received transaction identifier matches on record the response is deemed a valid transmission and accepted step . As aforementioned the hardware module can transmit data unsolicited. For such transmissions the controller mechanism of the hardware module can associate a particular transaction identifier with all unsolicited transmissions and the transaction identifying mechanism can be configured to treat all such transmissions as valid. For example the hardware module may use the transaction identifier 000000 for all unsolicited transmissions.

As another example a request from the module server to the hardware module may be formatted as the following 

In this example the transaction identifier is included and encrypted in the message body e.g. 059611 .

As mentioned the hardware module can generate and transmit messages on its own volition. For example rather than the module server periodically polling the hardware module for the status of a digital input the event processor of the hardware module can push a message at the instant it receives an indication from an I O channel port that an event has occurred at an interfaced device . The hardware module can push data to the module server or a device on a separate I O channel port via auto messaging triggered messaging or a smart device push. Auto messaging and triggered messaging can be accomplished via an I O channel port set to normal mode while a smart device push can be handled via smart mode.

To push data via auto messaging the event processor of the hardware module can be configured to send the state of the I O channel port and therefore the interfaced conventional device A automatically at a set schedule. For example an analog input value can be sent every fifteen seconds. Each I O channel port can be set to send either its analog input or digital input at a user determined schedule. Each I O channel port auto message interval can be set independently.

Data can be pushed via triggered messaging when the state of a digital or analog input from the interfaced conventional device A changes. Each I O channel port can have a configurable trigger and reset value. The hardware module can send a message when an input reaches a certain level.

If the I O channel port is set to smart mode the hardware module can transmit an unsolicited message from the smart device B . The message can be sent on behalf of the configuration of the smart device B itself. For example particular events activities actions or the like that occur via the smart device B may initiate the transmission of data to the hardware module and in turn the module server or another device interfaced with a separate I O channel port .

These and other aspects of the present invention will become apparent to those skilled in the art by a review of the preceding detailed description. Although a number of salient features of the present invention have been described above the invention is capable of other embodiments and of being practiced and carried out in various ways that would be apparent to one of ordinary skill in the art after reading the disclosed invention. Therefore the description should not be considered to be exclusive of these other embodiments. Also it is to be understood that the phraseology and terminology employed herein are for the purposes of description and should not be regarded as limiting.

