---

title: Remote control of an application using dynamic-linked library (DLL) injection
abstract: Systems and methods for providing remote access to an application using Dynamic-Linked Library (DLL) injection. A server remote access application executes a connect application that receives an identifier of the application as an argument. The application may be a game, etc., to which remote access is provided to one or more client devices. The connect application injects a Remoting DLL into the address space of the application, where the Remoting DLL provides a mechanism to communicate with a server remote access application. The server remote access application establishes a communications session between a client application on the client device and the application. Instructions directed by the application to the client application are captured by the Remoting DLL and provided to server remote access application. Similarly, inputs from the client device are communicated to the server remote access application and captured by the Remoting DLL, and then communicated to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09602581&OS=09602581&RS=09602581
owner: Calgary Scientific Inc.
number: 09602581
owner_city: Calgary, AB
owner_country: CA
publication_date: 20130302
---
The present application claims priority to U.S. Patent Application No. 61 606 001 filed Mar. 2 2012 entitled REMOTE CONTROL OF AN APPLICATION USING DYNAMIC LINKED LIBRARY DLL INJECTION which is incorporated herein by reference in its entirety.

Ubiquitous remote access to services application programs and data has become commonplace as a result of the growth and availability of broadband and wireless network access. However there exist application programs that were not designed for remote network access over e.g. the Internet. These application programs range from older mainframe applications that have been traditionally accessed by terminals to single user applications designed to be executed on a local computing device. Further such applications were not designed to be executed on the variety of computing devices that exist today. For example many applications are developed to be executed on a specific computing architecture making it impossible for them to be used by smart phones tablet devices etc.

In addition there has been a push toward a cloud computing model i.e. providing applications and data as services over a network. The goal of cloud computing is provide end users an experience as if the applications and data were installed and accessed locally on an end user computing device. In the cloud computing model end users access cloud based applications through e.g. a web browser or other light weight desktop or mobile app where the applications may be any type of application and or data executed and or are stored on a remote server. Cloud computing has several benefits in that services may be provided quickly and easily as computing resources can be dedicated and removed based on needs.

However while there are many benefits to providing remote access to applications there exist many applications which cannot be remotely provided to end users or implemented in the cloud computing model because of the complexities of rewriting such applications.

Systems and methods for providing remote access to an application using Dynamic Linked Library DLL injection. In accordance with some implementations a server remote access application executes a connect application that receives an identifier of the application as an argument. The application may be a game etc. to which remote access is provided to one or more client devices. The connect application injects a Remoting DLL into the address space of the application where the Remoting DLL provides a mechanism to communicate with a server remote access application. The server remote access application establishes a communications session between a client application on the client device and the application. Instructions directed by the application to the client application are captured by the Remoting DLL and provided to server remote access application. Similarly inputs from the client device are communicated to the server remote access application and captured by the Remoting DLL and then communicated to the application.

In accordance with some implementations there is provided a method of communicating rendering and or audio information from a server based application to the client computing device operating in a tiered infrastructure having a client tier a server tier and an application tier. The method may include executing a server remote access application within the server tier the server remote access application being a proxy to communicate data between the application tier and the client tier generating data at a server based application executing on a processor of a computing device executing in the application tier capturing the data using a Remoting DLL executing on the computing device in the server tier relaying the data using the Remoting DLL to the server remote access application formatting the data at the server remote access application and communicating the data from the remote access application to a client remote access application executing in the client tier.

Other systems methods features and or advantages will be or may become apparent to one with skill in the art upon examination of the following drawings and detailed description. It is intended that all such additional systems methods features and or advantages be included within this description and be protected by the accompanying claims.

Unless defined otherwise all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art. Methods and materials similar or equivalent to those described herein can be used in the practice or testing of the present disclosure. While implementations will be described for remotely accessing applications it will become evident to those skilled in the art that the implementations are not limited thereto but are applicable for remotely accessing any type of data or service via a remote device.

Referring to a system for providing remote access to an application data or other service via a computer network. The system comprises a client computer A or B such as a wireless handheld device such as for example an IPHONE A or a BLACKBERRY B connected via a computer network such as for example the Internet to a server B. Similarly the client computing devices may also include a desktop notebook personal computer C or a tablet device N that are connected by the communication network to the server B. It is noted that the connections to the communication network may be any type of connection for example Wi Fi IEEE 802.11x WiMax IEEE 802.16 Ethernet 3G 4G etc.

The server B is connected for example via the computer network to a Local Area Network LAN or may be directly connected to the computer network . For example the LAN may be an internal computer network. A mainframe computer A and a database may be connected to the LAN . Numerous application programs A may be stored in memory A of the mainframe computer A and executed on a processor A. Similarly numerous application programs B may be stored in memory B of the server B and executed on a processor B. The application programs A and B may be remotely accessible by the client computing devices A B C or N. The mainframe computer A the server B and the client computing devices A B C or N may be implemented using hardware such as that shown in the general purpose computing device of .

A client remote access application A B C N may be designed for providing user interaction for displaying data and or imagery in a human comprehensible fashion and for determining user input data in dependence upon received user instructions for interacting with the application program using for example a graphical display with touch screen A or a graphical display B N and a keyboard B C of the client computing devices A B C N respectively. The client remote access application A B C N communicates with a user interaction program such as for example a web browser or native application. For example the client remote access application is performed by executing executable commands on processor A B C N with the commands being stored in memory A B C N of the client computer A B C N respectively.

A server remote access application B interacts with the client remote access application s any of A B C N and or one of application programs A B as a proxy to communicate data commands and other information between the application program s A B and the user interaction program executing on the client computing device s A B C N. An example of the server remote access application B is PUREWEB available from Calgary Scientific Inc. Alberta Canada. Further details of the server remote access application B are detailed below with reference to .

In the client tier the user interaction program may be a web browser a SILVERLIGHT application a FLASH application or a native application that interfaces with the client remote access application A B C N. The client remote access application A B C N communicates with the server remote access application B in the server tier . Data commands and other information may be exchanged between the client remote access application and the server remote access application to enable the user interaction program to interact with one or more of application programs A B.

With reference to the server tier includes the server remote access application B which initially communicates with a connect application in the application tier . The connect application may take one or more arguments that includes an indication of an application e.g. application program A B in order to begin the execution of the application program A B on the server computing device. The connect application may include two components an API hooking library not shown and a Remoting DLL . An example of the API hooking library is the Easy Hook library available at easyhook.codeplex.com releases. The API hooking library operates to inject the Remoting DLL code into an address space of the application program A B. After the DLL injection is complete the connection between the application program A B and the connect application is closed.

Thereafter as shown in the application program A B is able to communicate with the server remote access application B via the Remoting DLL . Thus the Remoting DLL when injected into the application program A B provides a mechanism for the application program A B to interact with the server remote access program B without a need to change the source code of the application programs A B. The Remoting DLL will communicate commands drawing operations or sound to the server remote access application B which are communicated to the connected client computing devices for output to the user in a human comprehensible fashion. The Remoting DLL will communicate commands e.g. client inputs from the server remote access application B which are communicated to the application programs A B.

In some implementations the application tier and server tier may be implemented within a cloud computing environment to provide remote access to the application programs A B. As described above cloud computing is a model for enabling network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be provisioned and released with minimal interaction. The cloud computing model promotes high availability on demand self services broad network access resource pooling and rapid elasticity. In such an environment the application programs A B may be accessed by the client computing devices A B C or N through a client interface such as a client remote access application A B C N. As in the above the application programs A B may be put in the cloud without a need to change the source code.

In accordance with aspects of the present disclosure the client remote access applications A B C N may access the server remote access application B via a Uniform Resource Locator URL using the user interaction program which may be for example a web browser executing on the client computing devices A B C or N. A user interface may be implemented using for example Hyper Text Markup Language HTML and displayed by the user interaction program on the client computing devices A B C or N.

Additionally or alternatively client computing devices A B C or N and or the server B may participate in a collaborative session by accessing the server remote access application B at a predetermined URL. As such each of the participating client computing devices A B C . . . N and or the server B may present a synchronized view of the display of the application program.

With reference to there is illustrated operational details of the Remoting DLL. Generally the Remoting DLL provides a communications link to the server based application and also consumes commands from the server based application or inputs from the client computing device. For example the Remoting DLL may copy drawing calls and data from the application program A B and send them to the server remote access program B. Similarly audio data from the application program A B may be copied and communicated to the server remote access program B. With regard to inputs from client computing devices the Remoting DLL may also inject the input modules as appropriate input events and provide them to the application program A B. It is noted while illustrates the operation of the Remoting DLL in the MICROSOFT WINDOWS operating system environment it is contemplated that the Remoting DLL may operate in other environments such as Linux Mac OS.

With reference to there is illustrated an operation flow diagram of processes performed to provide remote access capabilities to a server based application such as a gaming or other interactive application. As used herein a server based application may be any application that is executed remotely from a client computing device e.g. mainframe applications server applications cloud based applications etc . At the server remote access application is launched in the server tier. For example a user may launch the server remote access application B at the server B. At the server remote access application executes the connect application to inject the Remoting DLL into the application. For example the client user interaction program may contact the server remote access application B which may launch the connect application . Alternatively the server remote access application B may launch the connect application in accordance with other criteria. The connect application may take as an argument an indication of the application program A B e.g. a game and launches the API hooking library to inject the Remoting DLL into the address space of the application. At the connect application closes after the Remoting DLL is injected into the application. At the Remoting DLL is now ready to communicate with the server remote access application in order to render video and or audio from the application program A B or to receive inputs directed to the application program A B from a client computing device A B C N. Thus in accordance with the above DLL injection is used to provide a mechanism for the application program A B to communicate with the remote access server.

At the Remoting DLL captures information to relay to the remote access server. In accordance with the above the Remoting DLL consumes and copies the video rendering commands data and or audio information from the application program A B and sends it to the to the remote access application B.

At the remote access server formats and sends data to the client device. At the client receives and processes the data. For example the client remote access application A B C N may receive data from the server remote access application B and process the data for presentation in the user interaction program .

Thus in accordance with the operational flow instead of the application program A B drawing to the screen of the computing device in communication with the application program A B the application draws to the remote access application B and that information is communicated to the client remote access application A B C N in the client tier .

At the remote access server formats and sends data to the Remoting DLL. The server remote access application B may forward the input module and associated data to the Remoting DLL . At the Remoting DLL captures the input information to relay to the inputs to the server based application. In accordance with the above the Remoting DLL consumes and copies input module from user interaction program and sends it to the application program A B as an appropriate input event.

Thus in accordance with the operational flow instead of the user interaction program providing an input directly to the application program A B the inputs are communicate to the remote access application B which in turn communicates the client input to the application program A B.

In some implementations the operation of a server remote access application B with the client remote access application any of A B C N or one of application programs A B may be optionally performed in cooperation with a state model as illustrated in which illustrates the state model of the present disclosure. As noted above use of the state model is not required to implement the systems and methods disclosed herein however the state model may provide additional functionalities to a remote session. For example a chat log may be provided or configuration buttons on a toolbar etc. These may be features that do not directly involve the application program A B. When employing the state model the client remote access application updates the state model in accordance with user input data received from a user interface program. The remote access application may generate control data in accordance with the updated state model and provide the same to the server remote access application B running on the server B.

Upon receipt of application data from an application program A or B the server remote access application B updates the state model in accordance with the screen or application data generates presentation data in accordance with the updated state model and provides the same to the client remote access application A B C N on the client computing device. The state model comprises an association of logical elements of the application program with corresponding states of the application program with the logical elements being in a hierarchical order. For example the logical elements may be a screen a menu a submenu a button etc. that make up the application program user interface. This enables the client device for example to natively display the logical elements. As such a menu of the application program that is presented on a mobile phone will look like a native menu of the mobile phone. Similarly the menu of the application program that is presented on desktop computer will look like a native menu of the desktop computer operating system.

The state model is determined such that each of the logical elements is associated with a corresponding state of the application program A or B. The state model may be determined such that the logical elements are associated with user interactions. For example the logical elements of the application program are determined such that the logical elements comprise transition elements with each transition element relating a change of the state model to one of control data and application representation data associated therewith.

The state model may be represented in e.g. an Extensible Markup Language XML document. Other representations of the state model are possible. Information regarding the application program and the measuring tool are communicated in the state model. The state model may thus contain session information about the application itself an application extension information about views and how to tie the functionality of the application to the specific views.

In some implementations two or more of the client computing devices A B C N and or the server B may collaboratively interact with the application program A or B. As such by communicating state information between each of the client computing devices A B C . . . N and or the server B and or the mainframe computer A participating in a collaborative session each of the participating client computing devices A B C . . . N may present a synchronized view of the display of the application program A or B.

Numerous other general purpose or special purpose computing system environments or configurations may be used. Examples of well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems network personal computers PCs minicomputers mainframe computers embedded systems distributed computing environments that include any of the above systems or devices and the like.

Computer executable instructions such as program modules being executed by a computer may be used. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Distributed computing environments may be used where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules and other data may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects described herein includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as random access memory RAM non volatile such as read only memory ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Computing device may have additional features functionality. For example computing device may include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage .

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by device and includes both volatile and non volatile media removable and non removable media.

Computer storage media include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM electrically erasable program read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may contain communications connection s that allow the device to communicate with other devices. Computing device may also have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed subject matter. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs may implement or utilize the processes described in connection with the presently disclosed subject matter e.g. through the use of an application programming interface API reusable controls or the like. Such programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and it may be combined with hardware implementations.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

