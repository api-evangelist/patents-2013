---

title: Capacity accounting for heterogeneous storage systems
abstract: Techniques to account for storage consumption and capacity allocation across heterogeneous storage objects are disclosed. A capacity accountability system can ascertain a set of heterogeneous storage objects provisioned for a storage consumer, where the heterogeneous storage objects is categorized by storage object hierarchy levels. The capacity accountability system can then identify an association between the storage consumer and a storage object hierarchy level and account for storage object consumption and storage capacity allocation of the storage consumer by normalizing storage consumption data and capacity allocation data at the storage object hierarchy level across the heterogeneous storage objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396459&OS=09396459&RS=09396459
owner: NETAPP, INC.
number: 09396459
owner_city: Sunnyvale
owner_country: US
publication_date: 20130312
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings hereto Copyright 2013 NetApp Inc. All Rights Reserved.

Storage of large quantities of data for application services is costly and complex. Typically an information technology IT department of an enterprise works with different vendors to individually track purchase and usage of storage capacity for different storage needs. Because of differences in storage needs a business entity may use different types of storage objects stored on different storage devices accessible via different storage access protocols and utilize different storage services. Typically different manual accounting methods are used for keeping track of storage capacity of storage objects for different types of storage objects. However a manual process to account for the storage capacity consumption and for the storage capacity allocation often result in inaccurate e.g. duplicate accounting due to the heterogeneous storage objects used. The resulting capacity accounting report thus is inaccurate and may result in a failure to optimize for a cost effective storage solution for the business entity.

In the following detailed description of embodiments of the invention reference is made to the accompanying drawings in which like references indicate similar elements and in which is shown by way of illustration specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical mechanical electrical functional and other changes may be made without departing from the scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims. References in this specification to an embodiment one embodiment or the like mean that the particular feature structure or characteristic being described is included in at least one embodiment of the present invention. However occurrences of such phrases in this specification do not necessarily all refer to the same embodiment.

The techniques introduced here enable storage administrators to account for provisioned and used storage capacity for capacity consumers accurately across data centers having heterogeneous storage objects. Storage capacity consumers can be for example applications business entities or physical or virtual hosts. The storage infrastructure across the data centers can be based on multiple storage device vendors utilizing multiple storage architectures. The storage infrastructure can maintain different storage tiers differing in terms the storage access capability and storage service capability. The storage infrastructure can also include multiple protocol access mechanisms allowing block access file access or both.

Today s applications use multiple storages across data centers with shared storage infrastructure. Each type of storage objects has a different format in terms of virtualization and indirection making storage capacity consumption tracking error prone. Hence tracking capacity across the multiple storages across different storage technologies is subject to inaccuracy.

To allow for accurate capacity accounting across the heterogeneous storage objects the techniques introduced here reconcile different storage object hierarchy containment levels across the heterogeneous storage objects to accurately reflect associations between storage capacity consumers and provisioned or used storage capacity. The disclosed capacity accountability system tracks the relationships amongst multiple storage capacity consumers and heterogeneous storage objects. The tracked relationship data structure is then used to normalize the storage object hierarchy containment levels of the heterogeneous storage objects when accounting for storage capacity.

The normalization technique introduced here allows for transparent addition of new storage technologies into the managed storage space of the capacity accountability system requiring almost no development time for the addition. Having multiple technologies in a single capacity accounting datamart allows storage administrators to quickly determine how new storage space is utilized. The capacity accounting datamart here refers to an accessible data store capable of returning specific capacity accounting data for specific storage consumer s .

The disclosed capacity accountability system further provides an on the fly generation of capacity accounting reports. Because of the normalization technique users of the system can quickly retrieve the necessary data regarding storage costs without technical knowledge of the storage architecture implementations in the managed storage space.

In various embodiments a capacity trending mechanism that provides valuable business analytics for both a storage provider and a capacity consumer. The capacity trending mechanism enables the storage provider to accurately allocate storage devices and storage capacity tailor fitted for various storage capacity consumers based on the trending information. The capacity consumer can efficiently select a cost effective capacity usage plan from the storage providers based on the trending information and generated capacity provision modification from the capacity trending mechanisms.

Some embodiments have other aspects elements features and steps in addition to or in place of what is described above. These potential additions and replacements are described throughout the rest of the specification.

Turning now to the figures is a block diagram illustrating a system environment for a capacity accountability system . The capacity accountability system can be connected via a network channel to a managed storage space . The capacity accountability system can be a general or special purpose computer system. The capacity accountability system includes one or more devices with computer functionalities each device including a computer readable storage medium e.g. a non transitory storage medium storing executable instructions and a processor for executing the executable instructions. The managed storage space includes a plurality of storage devices. For example the managed storage space can include at least one data center . The network channel can be any form of communication network that is capable of providing access to a data storage system. The network channel can be wired wireless or a combination of both. For example the network channel can include Ethernet networks cellular networks storage networks or any combination thereof.

The network channel may be for example a local area network LAN wide area network WAN metropolitan area network MAN global area network GAN such as the Internet a Fiber Channel fabric or any combination of such interconnects. The network channel may include multiple network storage protocols including a media access layer of network drivers e.g. gigabit Ethernet drivers that interface with network protocol layers such as the Internet Protocol IP layer and its supporting transport mechanisms the Transmission Control Protocol TCP layer and the User Datagram Protocol UDP layer. The network channel may include a file system protocol layer providing multi protocol file access and to that end includes support for one or more of the Direct Access File System DAFS protocol the Network File System NFS protocol the Common Internet File System CIFS protocol and the Hypertext Transfer Protocol HTTP protocol. A VI layer can be implemented together with the network channel to provide direct access transport DAT capabilities such as Remote Direct Memory Access RDMA as required by the DAFS protocol. An Internet Small Computer System Interface iSCSI driver layer can be implemented with the network channel to provide block protocol access over the TCP IP network protocol layers while a Fibre Channel FC driver layer receives and transmits block access requests and responses to and from the storage server. In certain cases a Fibre Channel over Ethernet layer may also be operative in the network channel to receive and transmit requests and responses to and from the storage server. The FC and iSCSI drivers provide respective FC and iSCSI specific access control to the blocks and thus manage exports of logical unit numbers LUNs to either iSCSI or FCP or alternatively to both iSCSI and FCP when accessing data blocks on the storage server.

Each datacenter can include at least a filesystem that accounts for the hosts and storage objects within the filesystem . The filesystem can be an interactive store that is capable of providing access to a set of storage objects such as files Logical Unit Numbers LUNs partitions qtrees and volumes. A qtree is a subset of a volume to which a quota can be applied to limit its size. The filesystem can include multiple hierarchical levels of storage objects. A storage object hierarchical level is to an enumerated level of containment for a storage object. For example a LUN can be at a higher storage object hierarchical level than a Q tree and a Q tree can be at a higher storage object hierarchical level than a volume. A storage object is a form of data container. Thus the highest storage object hierarchical level can denote the largest accessible data container capable of storing smaller containers all the way down to the smallest accessible data container denoted by the lowest storage object hierarchical level.

The filesystem can be hosted by a cluster of storage hosts . The storage hosts can be storage servers such as the storage servers described in discussed below.

The capacity accountability system is for keeping an accurate capacity accounting of the managed storage space . The capacity accounting can include accounting for storage object consumption of storage consumers in the managed storage space across heterogeneous storage objects. The capacity accounting can further include accounting for storage capacity allocation of the storage consumers in the managed storage space across the heterogeneous storage objects. The capacity accounting can also include generating reporting of other metadata relating to the storage usage by each of the storage consumers including idle capacity and storage usage trends. The storage usage trends can be used to calculate storage usage estimations and to recommend changes to the storage capacity provisions.

A storage consumer in this disclosure is defined as an account on the capacity accountability system associated with an entity having control over the use of certain storage spaces on the managed storage space . For example the storage consumer can be a business entity a service application of a business entity a division of a business entity a physical host or a virtual host. Heterogeneous storage objects in this disclosure are defined as storage objects virtual or physical that have at least two different manners of storing data. For example heterogeneous storage objects can be accessible by at least two different access protocols. For another example heterogeneous storage objects can be stored under at least two different storage architectures. For yet another example heterogeneous storage objects can be stored on at least two different storage devices. As a more specific example the storage objects can be LUNs fixed partitions or flexible partitions virtual volumes or physical volumes across different types of filesystem architectures.

A client device can access the capacity accountability system across the network channel . The client device can be any electronic device with a processor capable of data communication through the network channel . The client device can access the capacity accounting reports generated by the capacity accountability system . For example the client device can be a computer operated by a storage network administrator or a computer operated by one of the storage consumer accounts.

Storage of data in storage units is managed by storage servers which receive and respond to various I O requests from clients directed to data stored in or to be stored in storage units . Data is accessed e.g. in response to the I O requests in units of blocks which in the present embodiment are 4 KB in size although other block sizes e.g. 512 bytes 2 KB 8 KB etc. may also be used. For one embodiment 4 KB as used herein refers to 4 096 bytes. For an alternate embodiment 4 KB refers to 4 000 bytes. Storage units constitute mass storage devices which can include for example flash memory magnetic or optical disks or tape drives illustrated as disks A B . The storage devices can further be organized into arrays not illustrated implementing a Redundant Array of Inexpensive Disks Devices RAID scheme whereby storage servers access storage units using one or more RAID protocols. Although illustrated as separate components for one embodiment a storage server and storage unit may be a part of housed within a single device.

Storage servers can provide file level service such as used in a network attached storage NAS environment block level service such as used in a storage area network SAN environment or both file level and block level service or other data access services. Although storage servers are each illustrated as single units in a storage server can in other embodiments be a distributed entity for example a storage server may include a separate network element or module an N module and disk element or module a D module . In one embodiment the D module includes storage access components configured to service client requests. The N module includes functionality that enables client access to storage access components e.g. the D module and may include protocol components such as CIFS NFS or an IP module for facilitating such connectivity. Details of a distributed architecture environment involving D modules and N modules are described further below with respect to .

In other embodiments storage servers are referred to as network storage subsystems. A network storage subsystem provides networked storage services for a specific application or purpose. Examples of such applications include database applications web applications Enterprise Resource Planning ERP applications etc. e.g. which maybe at least partially implemented in a client. Examples of such purposes include file archiving backup mirroring and etc. provided for example on archive backup or secondary storage server connected to a primary storage server. A network storage subsystem can also be implemented with a collection of networked resources provided across multiple storage servers and or storage units.

In the embodiment of one of the storage servers e.g. storage server A may function as a primary provider of data storage services to client . Data storage requests from client are serviced using storage device A organized as one or more storage objects. In such an embodiment a secondary storage server e.g. storage server B takes a standby role in a mirror relationship with the primary storage server replicating storage objects from the primary storage server to storage objects organized on storage devices of the secondary storage server e.g. disks B . In operation the secondary storage server does not service requests from client until data in the primary storage object becomes inaccessible such as in a disaster with the primary storage server such event considered a failure at the primary storage server. Upon a failure at the primary storage server requests from client intended for the primary storage object are serviced using replicated data i.e. The secondary storage object at the secondary storage

It will be appreciated that in other embodiments network storage system may include more than two storage servers. In these cases protection relationships may be operative between various storage servers in system such that one or more primary storage objects from storage server A may be replicated to a storage server other than storage server B not shown in this figure . Secondary storage objects may further implement protection relationships with other storage objects such that the secondary storage objects are replicated e.g. to tertiary storage objects to protect against failures with secondary storage objects. Accordingly the description of a single tier protection relationship between primary and secondary storage objects of storage servers should be taken as illustrative only.

Nodes may be operative as multiple functional components that cooperate to provide a distributed architecture of system . To that end each node may be organized as a network element or module N module A B a disk element or module D module A B and a management element or module M host A B . In one embodiment each module includes a processor and memory for carrying out respective module operations. For example N module may include functionality that enables node to connect to client via network and may include protocol components such as a media access layer IP layer TCP layer UDP layer and other protocols known in the art. N module can be the client module of .

In contrast D module may connect to one or more storage devices via cluster switching fabric and may be operative to service access requests on devices . In one embodiment the D module includes storage access components such as a storage abstraction layer supporting multi protocol data access e.g. the CIFS protocol the NFS protocol and the HTTP a storage layer implementing storage protocols e.g. RAID protocol and a driver layer implementing storage device protocols e.g. SCSI protocol for carrying out operations in support of storage access operations. In the embodiment shown in a storage abstraction layer e.g. file system of the D module divides the physical storage of devices into storage objects. Requests received by node e.g. via N module may thus include storage object identifiers to indicate a storage object on which to carry out the request.

Also operative in node is M host which provides cluster services for node by performing operations in support of a distributed storage system image for instance across system . M host provides cluster services by managing a data structure such as a replicated database RDB RDB A RDB B which contains information used by N module to determine which D module owns services each storage object. The various instances of RDB across respective nodes may be updated regularly by M host using conventional protocols operative between each of the M hosts e.g. across network to bring them into synchronization with each other. A client request received by N module may then be routed to the appropriate D module for servicing to provide a distributed storage system image.

It should be noted that while shows an equal number of N modules and D modules making up a node in the illustrative system a different number of N and D modules can make up a node in accordance with various embodiments of instantaneous cloning. For example there may be a number of N modules and D modules of node A that does not reflect a one to one correspondence between the N and D modules of node B. As such the description of a node comprising one N module and one D module for each node should be taken as illustrative only.

Memory includes storage locations addressable by processor network adapter and storage adapter configured to store processor executable instructions and data structures associated with implementation of a storage architecture. Storage operating system portions of which are typically resident in memory and executed by processor functionally organizes the storage server by invoking operations in support of the storage services provided by the storage server . It will be apparent to those skilled in the art that other processing means may be used for executing instructions and other memory means including various computer readable media may be used for storing program instructions pertaining to the inventive techniques described herein. It will also be apparent that some or all of the functionality of the processor and executable software can be implemented by hardware such as integrated currents configured as programmable logic arrays ASICs and the like.

Network adapter comprises one or more ports to couple the storage server to one or more clients over point to point links or a network. Thus network adapter includes the mechanical electrical and signaling circuitry needed to couple the storage server to one or more client over a network. The network adapter may include protocol components such as a Media Access Control MAC layer CIFS NFS IP layer TCP layer UDP layer and other protocols known in the art for facilitating such connectivity. Each client may communicate with the storage server over the network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

Storage adapter includes one or more of ports having input output I O interface circuitry to couple the storage devices e.g. disks to bus over an I O interconnect arrangement such as a conventional high performance FC or SAS link topology. Storage adapter typically includes a device controller not illustrated comprising a processor and a memory the device controller configured to control the overall operation of the storage units in accordance with read and write commands received from storage operating system . As used herein data written by or to be written by a device controller in response to a write command is referred to as write data whereas data read by or to be read by device controller responsive to a read command is referred to as read data. 

User console enables an administrator to interface with the storage server to invoke operations and provide inputs to the storage server using a command line interface CLI or a graphical user interface GUI . In one embodiment user console is implemented using a monitor and keyboard.

When implemented as a node of a cluster such as cluster of the storage server further includes a cluster access adapter shown in phantom broken lines having one or more ports to couple the node to other nodes in a cluster. In one embodiment Ethernet is used as the clustering protocol and interconnect media although it will be apparent to one of skill in the art that other types of protocols and interconnects can by utilized within the cluster architecture.

Each of the modules can operate individually and independently of other modules. Some or all of the modules can be combined as one module. A single module can also be divided into sub modules each performing separate method step or method steps of the single module. The modules can share access to a memory space. One module can be coupled another module and access data processed by the another module by sharing a physical connection or a virtual connection directly or indirectly.

The capacity accountability system can include additional fewer or different modules for various applications. Conventional components such as network interfaces security functions load balancers failover servers management and network operations consoles and the like are not shown so as to not obscure the details of the system.

The capacity accountability system includes a consumer account store a capacity provision store an allocation module a storage relation module a storage object relation store a capacity accounting module an interface module an application programming interface API module a capacity datamart and an analytics module . Alternatively the allocation module and the capacity provision store can instead be outside of the capacity accountability system not shown communicating with modules of the capacity accountability system via the API module .

The consumer account store maintains a record entry for each of the storage consumers including a consumer account profile. The record entry can include one or more of the following including an identifier unique to the storage consumer a configuration file defining the reporting format of the capacity accounting generated by the capacity accountability system . The storage consumer accounts can be stored in graph structures relational tables linked lists tree structures or any combination thereof. The structure can denote how one storage consumer account has control over another storage consumer account. For example the storage consumer accounts can be stored in a hierarchical structure where a root node includes a business entity consumer account and the specific business divisions service applications content groups and data volumes are consumer accounts constituting branch nodes or leaf nodes. Access to the record entries can be restricted such that a security entry or key associated with the storage consumer is required for access.

The capacity provision store maintains a record of capacity allocation provisions for each storage consumer accounts. The capacity allocation provisions can be allocated by the allocation module . Each of the capacity allocation provisions specifies an allocation of a storage object to the each storage consumer account. Each capacity allocation provision can include a constant capacity allocation such as 1 TB of data capacity. The capacity allocation can also be variable defined by a capacity provision rule. For example the capacity allocation can be ten percent of storage capacity in a storage cluster where the storage capacity of the storage cluster can increase or decrease during operation. The allocation module can further specify a tier level for each capacity allocation provision. The tier level is defined by storage object type and storage object service type. The storage object type for example can include a storage device model such as a NetApp 6000 series storage server a storage architecture type such as NAS or SAN a file system layout architecture such as a write anywhere file layout WAFL an access protocol such as NFS SCSI or CIFS a storage device type such as solid state drive 7200 RPM hard disk or 15000 RPM hard disk or any combination thereof. The storage object service type for example can include replication service backup service mirroring service deduplication service or any combination thereof.

The allocation module stores a set of rules to determine the specific tier level based on the storage object type or the storage object service type for each storage object or each set of storage objects. Storage objects having different storage object types and or different storage object service types can be assigned the same storage tier level based on the set of rules. The tier level of a storage object can be re configured based on available hardware and available storage services. For example a storage object type of a storage object can be changed by reconfiguring the storage object to utilize a different set of storage host servers. A storage object service type of a storage object can be changed by removing replication service of the storage object.

Specific storage objects can be allocated for the storage consumer account through the allocation module . The allocation module can store one or more network paths to access the storage objects associated with the storage consumer in the consumer profile stored on the consumer account store . The allocation module can generate and store the capacity allocation provisions on the capacity provision store .

The storage relation module is configured to generate a relationship data structure of heterogeneous storage objects available on the managed storage space of . The relationship data structure can associate each of the heterogeneous storage objects with at least one of the storage consumer accounts known to the capacity accountability system . The relationship data structure can be stored on a storage object relation store . The relationship data structure can be for example a data graph a relational database or a tree structure. The relationship data structure can also store a specific storage content associated with each of the heterogeneous objects. The specific storage content can be based on a specific service application provided by the storage consumer. For example the specific storage content can be profile picture photographs provided by an indexed photograph content provider service of a storage consumer.

The storage relation module can generate the relationship data structure by traversing each instance of the filesystem across the managed storage space . The storage relation module can also generate the relationship data structure based on the associations generated through the allocation module .

The capacity accounting module performs capacity accounting for one or more of the storage consumers. The capacity accounting module is configured to generate a storage object consumption accounting that is specific for the one or more storage consumers. A storage object consumption accounting is a structured report to present how much storage capacity is used by one or more particular storage consumer. The capacity accounting module is further configured to be able to generate a storage capacity allocation accounting. A storage capacity allocation accounting is a structured report to present how much storage capacity is provisioned allocated to one or more particular storage consumers. The structured reports can be interactive to answer questions from a report reader about specific storage objects and about specific storage consumers. For example the report reader can query regarding specific storage consumers. The report reader can also sort or filter based on specific storage consumers or storage object types. The capacity accounting module can be configured and activated via an interface module . Once configured the capacity accounting module can generate the capacity accounting reports periodically. The capacity accounting module can also be configured and activated via an API module application programming interface module .

When accounting for storage capacity allocation and storage object consumption the capacity accounting module normalizes the storage capacity allocation data and the storage consumption data from the storage object relation store to avoid duplicate accounting. For example when a first storage object includes a second storage object or vice versa the capacity accounting module can discount a first consumption data of a first storage object when a second consumption data of a second storage object has already been accounted for. That is when the first storage object and the second storage object are within the same branch of storage object containment hierarchy the consumption data is accounted for once. For another example the capacity accounting module can account for a single storage object consumption when a plurality of storage hosts maps to a single storage object. A host group table including storage object types of each host storage server and paths to storage objects on the host storage server can be stored on the storage object relation store for the purpose of capacity accounting.

The capacity accounting module also includes a mechanism to reconcile duplicate capacity accounting due to the relationships between the storage consumers. The capacity accounting module can normalize the capacity accounting by tracking the relationships amongst the multiple storage capacity consumers including a relationship tree of the storage consumers in the consumer account store . For example when accounting for storage capacity the capacity accounting module can account a single storage capacity allocation for a plurality of application services of a business entity sharing storage space on a single storage object. Here the plurality of application services each can have a storage consumer account that is a subservient storage consumer account under the storage consumer account of the business entity. In this normalization scheme the capacity accounting module identifies a single storage consumer that can account for the entirety of the storage capacity allocation. The association between the application services of the business entity can be identified from the consumer account store .

These normalization mechanisms can apply to both accounting of capacity allocation and capacity consumption. The normalized capacity accounting data can be stored in a capacity datamart . The capacity datamart can be indexed for easy querying of the capacity accounting for individual or groups of storage consumers.

The capacity accountability system can include an analytics module . The analytics module can calculate a storage usage trend based on the capacity accounting by the capacity accounting module . The storage usage trend can be generated based on ratio of storage capacity consumed over allocated capacity. The storage usage trend can also be based on read write access frequency of the storage objects for the storage consumer. The storage trend generated can be specific to a service application of the storage consumer. The analytics module can determine a modification to a capacity allocation provision based on the storage usage trend calculated.

The storages or stores described in this disclosure are hardware components or portions of hardware components for storing digital data. Each of the storage can be a single physical entity or distributed across multiple physical devices. Each of the storage can be on separate physical device or share the same physical device or devices. Each of the stores can allocate specific storage spaces for run time applications.

The techniques introduced in the modules herein can be implemented by programmable circuitry programmed or configured by software and or firmware or they can be implemented by entirely by special purpose hardwired circuitry or in a combination of such forms. Such special purpose circuitry if any can be in the form of for example one or more application specific integrated circuits ASICs programmable logic devices PLDs field programmable gate arrays FPGAs etc.

In this example the mechanism ensures that when performing a capacity accounting a storage object such as a LUN is not charged to one storage consumer while another storage object such as a Q tree of the LUN or a volume of the LUN with a higher storage object hierarchy level i.e. a larger data container is charged to another storage consumer. Any capacity which was not charged to any storage consumer is reported as not charged capacity and the storage provider administrator can be prompted about unaccounted for capacity consumption or capacity allocation.

In this example at the top level LUNs V2 and V3 are first charged to respective associated storage consumers i.e. BU1 and BU3 . Then Q tree QT2 is charged to the storage consumer BU4 because QT2 has an assigned storage consumer but the LUNs of QT2 does not have an assigned consumer. Then at the volume level internal volume IV2 is charged to the storage consumer BU5 because none of its child storage objects have an assigned storage consumer.

An accounting table illustrates the resulting capacity accounting under the mechanism to avoid duplicates of capacity accounting. In one example each LUN can be restricted to only one storage consumer. The accounting table does not include the storage objects V1 V4 V5 V6 V7 QT3 and QT4 because they do not have an assigned storage consumer. The storage objects QT1 and IV1 were not included in the accounting table because their children were not included.

The mechanism described above implements support for capacity accounting of heterogeneous storage systems in the managed storage space spanning storage access technologies SAN NAS HTTP or any other technology data centers the physical storages can be in different geographical or logical locations storage architectures different RAIDS disk types and data protection technologies virtualization physical and virtual storages and or physical and virtual hosts or any combination thereof. The mechanism described enables capacity accounting where each storage consumer can have assigned storage capacity on different storage systems and each storage system supports multiple storage consumers.

The method continues on to a step where the capacity accountability system identifies an association between the storage consumer and a storage object hierarchy level. The step can be performed via the interface module or the capacity accounting module . The association can be selected from the storage object hierarchy levels of the identified set of the heterogeneous storage objects. The selection can be made based on a configuration parameter to the capacity accounting module .

Following the step in a step the capacity accountability system can account for storage object consumption of the storage consumer by normalizing storage consumption data at the storage object hierarchy level across the set of the heterogeneous storage objects. The capacity accountability system can also in a step account for storage capacity allocation of the storage consumer by normalizing storage capacity allocation data at the storage object hierarchy level across the heterogeneous storage objects. The normalizing step can be based on the normalizing mechanisms described above for the capacity accounting module . Optionally the step includes calculating an idle capacity of the storage consumer based on the accounting of storage object consumption and the accounting of storage capacity allocation for the storage consumer. Both the step and the step can be performed by the capacity accounting module .

Once an accounting of the storage object consumption is determined the capacity accountability system can calculate a storage usage trend based on the accounting of storage object consumption in a step . The storage usage trend can be calculated based on a percentage of the storage capacity allocated in a storage object that is actually consumed by the storage consumer. For example a capacity consumed percentage per time period such as day week or month can be calculated. The storage usage trend can also be calculated based on access pattern of the storage object including how frequently the storage object is written to or how frequently the storage object is read.

With the storage usage trend calculated the capacity accountability system can then determine a modification suggestion to a capacity allocation provision of the storage consumer based on the storage usage trend in a step . For example when the provisioned capacity usage percentage is low a modification suggestion to decrease provisioned capacity can be determined. For another example when the access frequency of a storage object is low a modification suggestion to lower the provisioned tier level can be determined where the suggested modification tier level includes a less frequent replication service. Both step and step can be performed by the analytics module .

From the relationship data structure the storage relation module can determine a storage tier label for each of the heterogeneous storage objects based on a storage object service type and a storage object technology type in a step . The storage tier label can be associated with a storage cost. The step can be performed by the allocation module . The storage cost of the storage tier can be calculated in at least two different ways. The storage cost can be based on a charge as you go model where the storage cost is presented as a cost per storage capacity consumed. The storage cost can also be based on a provision cost model where the storage cost is presented as a cost per capacity allocated.

Following step the method includes a step of generating a storage cost accounting of a storage consumer by traversing the relationship data structure based on the storage tier label. For example a list of storage objects connected to the storage consumer or sub divisions of the storage consumer can be determined from the relationship data structure. The list of storage objects can be normalized by discounting storage objects contained by other storage objects on the list. The list can also be normalized by discounting storage objects associated with sub divisions of the storage consumer that is already accounted for. Then the storage costs of the tier levels of the remaining storage objects on the normalized list is accrued to determine the storage cost accounting.

The storage cost accounting can include a storage cost specifically associated with the storage content referred to in the step . For example the accounting can be performed by traversing through the storage objects having a relationship associated with the storage content. The accounting in the step can be performed by the capacity accounting module .

Following the step the method can also include accounting for storage object consumption of the storage consumer across the heterogeneous storage objects in a step . The step can be performed by the capacity accounting module . Based on the accounting of the storage object consumption the method can further include the analytics module determining a storage consumption pattern in a step . For example the storage consumption pattern can include a minimum and a maximum storage capacity consumed in the past year. The storage consumption pattern can also include an average storage space consumed by a storage consumer. The storage consumption pattern can also include a storage consumption trend such as an average storage capacity consumed per day per month or per week. The storage consumption pattern allows the storage provider to determine what to charge the storage consumers using what kind of cost model. The accounting can be used to calculate the potential revenue from the storage consumers and the potential cost of maintaining the storage service. From the storage consumer side the storage consumption pattern allows a storage consumer to determine how much is paid to the storage provider and whether a change in payment plan or storage tier can benefit the storage consumer.

From the storage consumption pattern the analytics module can assign a new storage tier for a first storage object of the storage consumer to reduce an original storage cost of the first storage object. The original storage cost can be identified from the storage cost accounting of the step . The assignment of the new storage tier includes determining the new storage tier at a reduced storage cost compared to the original storage cost that can satisfy the storage consumption pattern.

The user interface includes an example of the report generated for a number of storage consumers. For example the report includes a consumer identity such as by business units a tier level a tier cost a provisioned capacity and a consumed capacity . The report can be sorted by any of the above variables. The example interface also includes a menu . The menu includes additional ways to sort filter and organize the report . For example the menu can include sorting or filtering of the report by a service application a data center a host an internal volume or a virtual machine each of which can be a storage consumer account. The menu can also include sorting or filtering of the report by a protection type a resource name a resource type a service cost a storage object identifier a storage access type a storage pool identifier or a specific containment level each of which can be a storage object type or a storage object service type that defines the tier level . Here for example the specific containment level enables the capacity accounting module to sort the report by the identifier of a specific storage object hierarchy level such as a Q tree.

The user interface can be access in a variety of ways. For example configuration and generation of the report is available to storage provider and storage consumer administrators in at least three ways 

The capacity accountability system supports multi tenancy of storage consumer administrators limiting a storage consumer administrator user access only to the capacity related data which was made available for the storage consumer administrator user by the storage provider administrator. The multi tenancy is achieved by creating groups that include business entities at different levels of hierarchy can be tenant line of business business unity or project and assigning the storage consumer administrator user to certain groups.

Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense.

Therefore it is manifestly intended that embodiments of this invention be limited only by the following claims and equivalents thereof.

