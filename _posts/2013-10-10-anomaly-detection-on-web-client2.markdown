---

title: Anomaly detection on web client
abstract: Embodiments for anomaly detection on a web client are generally described herein. A processor on the web client is monitored, where a web browser is installed on the web client, with the web browser arranged to render a web page, the web page including content originating from a plurality of origins. A request from the web page to store data on the web client is intercepted, with the request originating from a particular origin of the plurality of origins. The request is analyzed and approved or denied based on the particular origin.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09544319&OS=09544319&RS=09544319
owner: Intel Corporation
number: 09544319
owner_city: Santa Clara
owner_country: US
publication_date: 20131010
---
This application is a U.S. National Stage Application under 35 U.S.C. 371 from International Application No. PCT US2013 064395 filed Oct. 10 2013 which is hereby incorporated by reference in its entirety.

Embodiments described herein generally relate to computer monitoring and in particular to anomaly detection on a web client.

When a user browses a website small amounts of information are stored on the user s machine. The information may be stored in a file that persists between browser restarts. When the user browses the same website in the future the information may be retrieved from the file and used. One mechanism that is common is the use of cookies. A cookie also known as an HTTP cookie web cookie or browser cookie is a file that stores a limited amount of data for use during a user s browsing session e.g. session cookie or for multiple sessions e.g. persistent cookie . Cookies are useful to preserve state maintain user authentication information or save user preferences for a website. However cookies are limited in functionality partly due to their maximum allowable size.

In more modern browsers a standard known as Web Storage supports larger storage allocation. Web Storage offers two different storage types local storage and session storage which act similar to persistent and session cookies respectively. Data stored in local storage is per domain and persists after the browser is closed. Session storage is per page per window and is limited to the lifetime of the window. Session storage is intended to allow separate instances of the same web application to run in different windows without interfering with each other a use case that s not well supported by cookie.

However with the increase of allowable size of storage objects both local and session types there is a threat of a malicious activity causing large amounts of data to be written or stored at a user s machine resulting in instability inaccessibility or other denial of service types of attacks.

Hypertext Markup Language version 5 HTML5 is a markup language for structuring and presenting content for the World Wide Web WWW . Web Storage is a standard supported by HTML5 and provides a client side method for saving session information. Using a client side scripting language such as JavaScript a webpage is able to store and retrieve data from a web storage container. Thus using Web Storage a web application e.g. web page a mashup web content is able to store information for reuse within a session or from session to session.

Web Storage containers are typically limited to a maximum size such as 2 megabytes MB 5 MB or 10 MB. There are two types of Web Storage containers sessionStorage and localStorage. Each act similarly but the sessionStorage object is only available for the immediate session while the localStorage object persists between browsing sessions. Web storage containers are linked to an origin. An origin is a tuple of domain name application layer protocol and port number of the HTML5 document running the script. In this manner a web storage container may be constrained to a maximum size per origin. For example the website http www.example.com home.html may be associated with a localStorage container. Another website https www.example.com home.html cannot access the localStorage container of http www.example.com home.html because the protocols are different http versus https .

In many modern web applications content from multiple origins is presented within the same presentation area. This may be referred to generically as a mashup. A mashup typically uses and combines data presentation or functionality from two or more sources to create a new presentation or service. Mashups may provide related information in an aggregate display for easier consumption of data for the end user.

Some mashups are combinations of related data from several related sources. For example a mashup for the fictional corporation Example Inc. may use example.com as their domain and may provide information from subdomains such as news.example.com sports.example.com and weather.example.com in a combined interface e.g. mashup . Alternatively as a user navigates through the example.com website the user may navigate to content from subdomains such as weather.example.com. In either situation the question arises as to whether the distinct subdomains should be granted three quotas of Web Storage allocation e.g. three time 5 MB for a total of 15 MB or whether the entire web application e.g. mashup should be constrained to the Web Storage quota e.g. 5 MB for the example.com and subdomains . If the first model is followed then it may open the platform up for abuse. For example someone with a malicious intent may create artificial subdomains or affiliate domains and cause the user s computer to store many 5 MB Web Storage containers perhaps thousands or millions. Such activity would likely produce an error cause the machine to become unresponsive or otherwise wreak havoc. If the second model is followed then a legitimate web application may be unnecessarily restricted from using disk space that is needed for proper operation. Similar problems may exist with affiliate domains web applications that are related or affiliated with each other and presented together either in a mashup or with cross linking . What is needed is a mechanism to monitor and manage Web Storage allocation requests.

The present disclosure describes a mechanism to assess web browser activity and ensure that such activity is consistent with a storage policy. Such a mechanism is useful to detect anomalies in web browser behavior. Some described embodiments work with a plurality of browsers. Such embodiments are independent from how content is delivered by any one browser reducing the vulnerability caused by poor implementation of the web storage mechanism in a particular browser and also reducing or eliminating the need for an end user to choose the correct web browser for the safest experience.

Mechanisms for monitoring and managing Web Storage allocation requests may be implemented in various forms including but not limited to a browser plug in client software or firmware. The mechanisms may detect suspicious behavior from web applications alarm users of such behavior or enforce proper policies to reduce risks. The mechanisms may use various detection algorithms based on intrusion detection or machine learning.

A user may operate the computing device to access a web application provided by the web server . When the web application attempts to store data in a localStorage or sessionStorage object via HTML5 on the computing device a monitoring module on the computing device intercepts the attempt and determines whether the storage instruction should proceed. In an embodiment the monitoring module accesses a local database that has data rules or other information that the monitoring module may use to make the determination of whether to permit or deny the web application s storage request. In another embodiment the monitoring module uses a remote service such as one hosted on the service provider system to assess the web application s storage request. If the storage request is granted then the monitoring module may interface with the browser on the computing device or other portions of the computing device e.g. memory manager file system resource scheduler or other aspects of the operating system or firmware to process the storage request.

The client plug in monitor includes a browser interface a monitoring module a monitoring database DB and a hardware HW interface . When monitoring for Web Storage write requests the monitoring module may interface with the monitoring DB an enterprise monitoring service or a cloud monitoring service . The monitoring DB includes information about websites domains and web application storage usage policies. The web application storage usage policies may be user defined or centrally defined e.g. by an enterprise administrator or a commercial service . Use of enterprise wide or other wide area services may provide deeper analysis of traffic or data behavior resulting in more intelligent algorithms to distinguish legitimate requests from potential malicious activity.

In operation the browser interface intercepts storage requests initiated by web pages that are served by a website and processed by the web browser . The monitoring module receives a notification of the request from the browser interface and may check the request against the monitoring DB enterprise monitoring service or cloud monitoring service for the legitimacy of the request. The monitoring module provides responsive actions accordingly e.g. user alert deny permit storage request . When the monitoring module denies a request the monitoring module may add the requesting origin to a blacklist to block future storage requests from the origin. Additionally or alternatively the monitoring module may be arranged to block storage of data on the apparatus such as by interfacing with the HW interface .

The HW interface may interface with a resource scheduler or an input output memory management unit IOMMU where the resource scheduler or the IOMMU may perform reads or writes to storage . The IOMMU may restrict memory access based on some policies while the resource scheduler may restrict access to various resources based on other policies.

In addition to monitored behavior a machine learning or other decision making mechanism may be used to determine what actions should be permitted or denied in a particular policy. This determination may be performed at the server level e.g. service provider system or the client level e.g. computing device or using both client and server in combination. It may also be performed using a collaborative cloud based approach distributed between many clients.

A policy may include one or more rules. A rule may be composed of two parts an object and a property. Objects may be things or actions. For example objects may be a domain name subdomain name or web application. Further examples of objects as actions include write request or read request. 

Properties are used to define permissions with respect to the object. Examples of properties include permit 5 MB per subdomain restrict subdomains from using web storage permit 20 MB per web application etc. Objects and properties may be conveyed in a standardized language such as extensible markup language XML or some specific schema using a standardized language.

At block a browser interface module intercepts the request and sends the request to a monitoring module. The browser interface module may be incorporated into the browser using an application programming interface API such that when a script in a web application attempts to store data in a localStorage or sessionStorage object the operation is trapped by the browser interface module.

At block optionally the monitoring module may send the request to an external analysis engine. The external analysis engine may provide an enterprise wide or network wide service to analyze and determine the validity of write requests. Using enterprise wide or network wide services may have the advantage of using data metrics and statistics from a larger pool of machines to make more intelligent decisions on whether to permit or deny a storage request.

At block a check is made of whether the request originated from the same web application. If the request is from the same web application as a previous request then at block a check is made to verify the legitimacy of the request. In an embodiment the monitoring module may access a monitoring database to verify the legitimacy of the request. The monitoring database may include whitelists or blacklists which when available may provide an automatic determination of whether to permit or deny a request from a given web application domain or other identifying characteristic contained in the whitelist or blacklist. Additionally the monitoring database may include parameters thresholds or other data used by the monitoring module to determine the legitimacy.

At decision block it is determined whether the request is OK. For example if the request originated from a known web application that exists on a whitelist then the request may be approved. Alternatively if the request is from a web application on a blacklist then the request may be denied. If the request is approved then at block the storage request is allowed. If the request is denied then at block the storage request is denied and a user alert is generated. The user alert may be in the form of a popup window a log entry a status bar indication or other types of notifications audio video multimedia graphical etc. .

Returning to block if the request is not from the same web application then at decision block a determination is made as to whether each individual storage request is within a storage limit. The storage limit may be set by the browser or by a setting for the monitoring module. The storage limit may be user defined. If for example the storage limit is 5 MB per origin then at block it is determined whether the storage request is within this quota for the script and related origin. If the individual requests are under the storage limit then at block the storage request is allowed. Alternatively if the individual request is over the storage limit then at block the storage request is denied and the user may be alerted.

In an embodiment at block additional processing may occur to examine the individual requests. For example even when each individual request is within a limit a malicious app may add a large number of subdomains to create denial of service attack. So in addition to checking each individual limit for a particular subdomain in a web application a total storage amount is calculated or accessed and the total storage amount is analyzed to determine whether it is within a limit Additionally or alternatively processing may include determining whether a total number of subdomains making storage requests is reasonable e.g. under subdomains in a given session .

Although illustrates one mechanism for detecting client side web browser anomalies it is understood that other types of analysis may be used by the monitoring module or the external analysis engines. For example the monitoring module or external analysis engines may provide a script malware detection service. Scripts that have no white space have loops that appear to be an infinite loop or long running use recursion or have other attributes may be considered unsafe. Such scripts may be denied a storage request due to this conclusion. External analysis engines may be used to analyze network traffic and data behavior. For example if an unusually large number of storage requests are made by a certain domain origin group of subdomains or group of affiliated domains then the web application may be blacklisted. The domain origin may be blacklisted until or unless approved by a user.

At block a request is intercepted from the web page where the request is to store data on the web client and where the request originates from a particular origin of the plurality of origins.

At block the request is analyzed. In an embodiment the request from the web page to store data on the apparatus is a HTML5 request to store data in a localStorage object.

At block the request is approved or denied based on the particular origin. In an embodiment analyzing and approving the request comprises identifying the particular origin querying a database with the particular origin to determine whether the particular origin is on a white list of origins and approving the request when the particular origin is on the white list. In an embodiment the database is stored at the web client. In another embodiment the database is stored at a server remote from the web client.

In an embodiment analyzing and approving the request comprises analyzing a characteristic of web browser behavior and approving the request based on the characteristic of web browser behavior. In various embodiments the characteristic of web browser behavior is at least one of a speed of storing data to the apparatus a number of subdomains of the origin requesting to store data a frequency of subdomain changes or a ratio of reads and writes of stored data.

In a further embodiment a notification is presented to a user of the web client when denying the request. For example the user may be notified of a request to store data and may be provided to option to allow the request to continue e.g. the storage to occur thereby overriding the automatic response to the potentially malicious activity.

Embodiments may be implemented in one or a combination of hardware firmware and software. Embodiments may also be implemented as instructions stored on a machine readable storage device which may be read and executed by at least one processor to perform the operations described herein. A machine readable storage device may include any non transitory mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable storage device may include read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices and other storage devices and media.

Examples as described herein may include or may operate on logic or a number of components modules or mechanisms. Modules are tangible entities e.g. hardware capable of performing specified operations and may be configured or arranged in a certain manner. In an example circuits may be arranged e.g. internally or with respect to external entities such as other circuits in a specified manner as a module. In an example the whole or part of one or more computer systems e.g. a standalone client or server computer system or one or more hardware processors may be configured by firmware or software e.g. instructions an application portion or an application as a module that operates to perform specified operations. In an example the software may reside on a machine readable medium. In an example the software when executed by the underlying hardware of the module causes the hardware to perform the specified operations.

Accordingly the term module is understood to encompass a tangible entity be that an entity that is physically constructed specifically configured e.g. hardwired or temporarily e.g. transitorily configured e.g. programmed to operate in a specified manner or to perform part or all of any operation described herein. Considering examples in which modules are temporarily configured each of the modules need not be instantiated at any one moment in time. For example where the modules comprise a general purpose hardware processor configured using software the general purpose hardware processor may be configured as respective different modules at different times. Software may accordingly configure a hardware processor for example to constitute a particular module at one instance of time and to constitute a different module at a different instance of time.

Example computer system includes at least one processor e.g. a central processing unit CPU a graphics processing unit GPU or both processor cores compute nodes etc. a main memory and a static memory which communicate with each other via a link e.g. bus . The computer system may further include a video display unit an alphanumeric input device e.g. a keyboard and a user interface UI navigation device e.g. a mouse . In one embodiment the video display unit input device and UI navigation device are incorporated into a touch screen display. The computer system may additionally include a storage device e.g. a drive unit a signal generation device e.g. a speaker a network interface device and one or more sensors not shown such as a global positioning system GPS sensor compass accelerometer or other sensor.

The storage device includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory static memory and or within the processor during execution thereof by the computer system with the main memory static memory and the processor also constituting machine readable media.

While the machine readable medium is illustrated in an example embodiment to be a single medium the term machine readable medium may include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more instructions . The term machine readable medium shall also be taken to include any tangible medium that is capable of storing encoding or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure or that is capable of storing encoding or carrying data structures utilized by or associated with such instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media. Specific examples of machine readable media include non volatile memory including by way of example semiconductor memory devices e.g. electrically programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks.

The instructions may further be transmitted or received over a communications network using a transmission medium via the network interface device utilizing any one of a number of well known transfer protocols e.g. HTTP . Examples of communication networks include a local area network LAN a wide area network WAN the Internet mobile telephone networks plain old telephone POTS networks and wireless data networks e.g. Wi Fi 3G and 4G LTE LTE A or WiMAX networks . The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying instructions for execution by the machine and includes digital or analog communications signals or other intangible medium to facilitate communication of such software.

Example 1 includes subject matter such as a device apparatus or machine comprising a system for anomaly detection on a web client comprising a monitoring module arranged to monitor a web browser installed on the apparatus the web browser arranged to render a web page the web page including content originating from a plurality of origins intercept a request from the web page to store data on the apparatus the request originating from a particular origin of the plurality of origins analyze the request and approve or deny the request based on the particular origin.

In Example 2 the subject matter of Example 1 may optionally include wherein the web browser is one of a plurality of web browsers installed on the apparatus and wherein to analyze the request the monitoring module is arranged to analyze the request according to a setting specific to the web browser the setting specifying a policy to a handle storage request from one of a plurality of related origins.

In Example 3 the subject matter of any one or more of Examples 1 to 2 may optionally include wherein each of the plurality of web browsers include a different setting for handling a storage request from one of a plurality of related origins.

In Example 4 the subject matter of any one or more of Examples 1 to 3 may optionally include wherein to analyze and approve the request the monitoring module is arranged to identify the particular origin query a database with the particular origin to determine whether the particular origin is on a white list of origins and approve the request when the particular origin is on the white list.

In Example 5 the subject matter of any one or more of Examples 1 to 4 may optionally include wherein the database is stored at the apparatus.

In Example 6 the subject matter of any one of Examples 1 to 5 may optionally include wherein the database is stored at a server remote from the apparatus.

In Example 7 the subject matter of any one or more of Examples 1 to 6 may optionally include wherein the monitoring module is a plug in for the web browser.

In Example 8 the subject matter of any one or more of Examples 1 to 7 may optionally include wherein to analyze and approve the request the monitoring module is arranged to analyze a characteristic of web browser behavior and approve the request based on the characteristic of web browser behavior.

In Example 9 the subject matter of any one or more of Examples 1 to 8 may optionally include wherein the characteristic of web browser behavior is at least one of a speed of storing data to the apparatus a number of subdomains of the origin requesting to store data on the apparatus a frequency of subdomain changes or a ratio of reads and writes of stored data.

In Example 10 the subject matter of any one or more of Examples 1 to 9 may optionally include wherein the request from the web page to store data on the apparatus is a HTML5 request to store data in a localStorage object.

In Example 11 the subject matter of any one or more of Examples 1 to 10 may optionally include comprising a notification module arranged to present a notification to a user of the apparatus when the monitoring module denies the request.

In Example 12 the subject matter of any one or more of Examples 1 to 11 may optionally include wherein to deny the request the monitoring module is arranged to add the particular origin to a blacklist to block future storage requests from the particular origin.

In Example 13 the subject matter of any one or more of Examples 1 to 12 may optionally include wherein to deny the request the monitoring module is arranged to block storage of data on the apparatus.

Example 14 includes subject matter for anomaly detection on a web client such as a method means for performing acts machine readable medium including instructions that when performed by a machine cause the machine to performs acts or an apparatus configured to perform comprising monitoring using a processor on the web client a web browser installed on the web client the web browser arranged to render a web page the web page including content originating from a plurality of origins intercepting a request from the web page to store data on the web client the request originating from a particular origin of the plurality of origins analyzing the request and approving or denying the request based on the particular origin.

In Example 15 the subject matter of Example 14 may optionally include wherein the web browser is one of a plurality of web browsers installed on the web client and wherein analyzing the request comprises analyzing the request according to a setting specific to the web browser the setting specifying a policy to a handle storage request from one of a plurality of related origins.

In Example 16 the subject matter of any one or more of Examples 14 to 15 may optionally include wherein each of the plurality of web browsers include a different setting for handling a storage request from one of a plurality of related origins.

In Example 17 the subject matter of any one or more of Examples 14 to 16 may optionally include wherein analyzing and approving the request comprises identifying the particular origin querying a database with the particular origin to determine whether the particular origin is on a white list of origins and approving the request when the particular origin is on the white list.

In Example 18 the subject matter of any one or more of Examples 14 to 17 may optionally include wherein the database is stored at the web client.

In Example 19 the subject matter of any one of Examples 14 to 18 may optionally include wherein the database is stored at a server remote from the web client.

In Example 20 the subject matter of any one or more of Examples 14 to 19 may optionally include wherein the method is performed using a plug in for the web browser.

In Example 21 the subject matter of any one or more of Examples 14 to 20 may optionally include wherein analyzing and approving the request comprises analyzing a characteristic of web browser behavior and approving the request based on the characteristic of web browser behavior.

In Example 22 the subject matter of any one or more of Examples 14 to 21 may optionally include wherein the characteristic of web browser behavior is at least one of a speed of storing data a number of subdomains of the origin requesting to store data a frequency of subdomain changes or a ratio of reads and writes of stored data.

In Example 23 the subject matter of any one or more of Examples 14 to 22 may optionally include wherein the request from the web page to store data on the apparatus is a HTML5 request to store data in a localStorage object.

In Example 24 the subject matter of any one or more of Examples 14 to 23 may optionally include presenting a notification to a user of the web client when denying the request.

In Example 25 the subject matter of any one or more of Examples 14 to 24 may optionally include adding the particular origin to a blacklist to block future storage requests from the particular origin.

In Example 26 the subject matter of any one or more of Examples 14 to 25 may optionally include blocking storage of data on the web client.

Example 27 includes a machine readable medium including instructions for anomaly detection on a web client which when executed by a machine cause the machine to perform operations of any one of the examples 1 26.

Example 29 includes an apparatus for anomaly detection on a web client comprising means for monitoring using a processor on the web client a web browser installed on the web client the web browser arranged to render a web page the web page including content originating from a plurality of origins means for intercepting a request from the web page to store data on the web client the request originating from a particular origin of the plurality of origins means for analyzing the request and means for approving or denying the request based on the particular origin.

The above detailed description includes references to the accompanying drawings which form a part of the detailed description. The drawings show by way of illustration specific embodiments that may be practiced. These embodiments are also referred to herein as examples. Such examples may include elements in addition to those shown or described. However also contemplated are examples that include the elements shown or described. Moreover also contemplate are examples using any combination or permutation of those elements shown or described or one or more aspects thereof either with respect to a particular example or one or more aspects thereof or with respect to other examples or one or more aspects thereof shown or described herein.

Publications patents and patent documents referred to in this document are incorporated by reference herein in their entirety as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference the usage in the incorporated reference s are supplementary to that of this document for irreconcilable inconsistencies the usage in this document controls.

In this document the terms a or an are used as is common in patent documents to include one or more than one independent of any other instances or usages of at least one or one or more. In this document the term or is used to refer to a nonexclusive or such that A or B includes A but not B B but not A and A and B unless otherwise indicated. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein. Also in the following claims the terms including and comprising are open ended that is a system device article or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim. Moreover in the following claims the terms first second and third etc. are used merely as labels and are not intended to suggest a numerical order for their objects.

The above description is intended to be illustrative and not restrictive. For example the above described examples or one or more aspects thereof may be used in combination with others. Other embodiments may be used such as by one of ordinary skill in the art upon reviewing the above description. The Abstract is to allow the reader to quickly ascertain the nature of the technical disclosure for example to comply with 37 C.F.R. 1.72 b in the United States of America. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. Also in the above Detailed Description various features may be grouped together to streamline the disclosure. However the claims may not set forth every feature disclosed herein as embodiments may feature a subset of said features. Further embodiments may include fewer features than those disclosed in a particular example. Thus the following claims are hereby incorporated into the Detailed Description with a claim standing on its own as a separate embodiment. The scope of the embodiments disclosed herein is to be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

