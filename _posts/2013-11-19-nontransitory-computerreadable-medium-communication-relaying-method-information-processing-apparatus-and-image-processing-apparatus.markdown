---

title: Non-transitory computer-readable medium, communication relaying method, information processing apparatus, and image processing apparatus
abstract: A communication relaying method, which is used in an information processing apparatus that is communicated to an image processing apparatus through a first communication interface, the method comprising: processes data, which is transmitted to and received from the image processing apparatus by execution of an application program, according to a particular protocol in accordance with transmission/reception through a second communication interface different from the first communication interface; registering a predetermined own-device address to feed transmission data according to the protocol, back to the information processing apparatus; and transmitting, in a case where the transmission destination address of transmission data processed by the processing is the own-device address transmit the transmission data through the first communication interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09213514&OS=09213514&RS=09213514
owner: Brother Kogyo Kabushiki Kaisha
number: 09213514
owner_city: Nagoya-shi, Aichi-ken
owner_country: JP
publication_date: 20131119
---
This application claims priority from Japanese Patent Application No. 2012 253290 filed on Nov. 19 2012 the entire subject matter of which is incorporated herein by reference.

There is an image processing apparatus having a web server function and displaying a setting screen and the like of the image processing apparatus on a web browser executed in a client terminal such as an information processing apparatus.

Also there is a standard referred to as Internet Printing Protocol IPP for transmitting and receiving a variety of data such as print data and control information between an image processing apparatus and a client terminal through a Transmission Control Protocol Internet Protocol TCP IP network such as the Internet.

Further there is a draft of a standard for performing communication based on the above described IPP through a Universal Serial Bus USB interface in an environment where an image processing apparatus and a client terminal are connected by the USB and is referred to as IPP over USB .

However in the current draft of the IPP over USB standard it is not specifically described how to transmit transmission data processed in the procedure of the IPP through a USB interface. Also it is not described how to transmit reception data of the IPP received through a USB interface to an IPP processing section.

In view of the above this disclosure provides at least a specific mechanism to transmit and receive data of a particular protocol for example the IPP through a specific communication interface for example a USB using a method different from a communication interface in accordance with the particular protocol while suppressing modifications on existing software for transmitting and receiving data by the particular protocol.

A non transitory computer readable medium according to this disclosure has instructions which is executed by an information processing apparatus The information processing apparatus includes a transceiver section configured to communicate to an image processing apparatus through a first communication interface and a transmission reception data processing section configured to process transmission reception data which is transmitted to and received from the image processing apparatus by execution of an application program according to a particular protocol in accordance with transmission reception through a second communication interface different from the first communication interface.

The instruction causes the information processing apparatus to function as a own device address registering section that registers a predetermined own device address to feed transmission data according to the protocol back to the information processing apparatus and a data transmission control section that controls in a case where the transmission destination address of transmission data processed by the transmission reception data processing section is the own device address the transceiver section to transmit the transmission data.

According to this configuration the own device address is registered in the information processing apparatus and if data is transmitted from an application to the own device address the transmission data is processed according to the above described protocol and is transmitted from the first communication interface by the data transmission control section.

A non transitory computer readable medium according to another aspect of this disclosure has instructions which is executed by an image processing apparatus. The image processing apparatus includes a transceiver section configured to communicate to an information processing apparatus through a first communication interface and a transmission reception data processing section configured to process data which is transmitted to and received from the information processing apparatus according to a particular protocol in accordance with transmission reception through a second communication interface different from the first communication interface.

The instruction causes the image processing apparatus to function as a own device address registering section that registers a predetermined own device address to feed transmission data according to the protocol back to the image processing apparatus and a data transmission control section that controls in a case where the transmission destination address of transmission data processed by the transmission reception data processing section is the own device address the transceiver section to transmit the transmission data.

According to this configuration the own device address is registered in the image processing apparatus and if data is transmitted to the own device address the transmission data is processed according to the above described protocol and is transmitted from the first communication interface by the data transmission control section. Also if data according to the above described protocol is received from the information processing apparatus through the first communication interface the reception data is transmitted to the transmission reception data processing section by the data reception control section and is processed.

Therefore it is possible to transmit data of a particular protocol through a specific communication interface using a method different from a communication line in accordance with the particular protocol while suppressing modifications on existing software for example software for implementing a transmission reception data processing section for transmitting and receiving data by the particular protocol.

Hereinafter an embodiment of this disclosure will be described with reference to the accompanying drawings.

As shown in an image information processing system of the present embodiment is configured by communicating a client PC with three printers and through USB cables and between the client PC and the printers and respectively.

The client PC serves as an information processing apparatus and has a known configuration including a variety of hardware a CPU a ROM a RAM a storing section a display section an operation section a USB interface I F and a network interface I F .

The CPU controls each section of the client PC by executing programs stored in the ROM and the storing section . The ROM stores a variety of programs to be executed by the CPU data and so on. The RAM is used as a main storage section which is used for the CPU to perform a variety of processes. The operation section is configured by a mouse a keyboard and so on not shown to be operated by a user. The display section is configured by a display such as a liquid crystal display.

The storing section is configured by a storage device such as a hard disk. In the storing section a variety of software is installed. The variety of software includes an operating system OS a client side printer proxy and an application . The application is so called application software such as word processing software and spreadsheet software and the user can control any one of the printers and such that documents and the like created by using the application are printed. The client side printer proxy is one of the characteristic software in the image information processing system of the present embodiment and sets the client PC as a local host that is the client PC sets a local host in the client PC such that the client PC serves as a printer as seen from the application or the OS .

The USB I F includes not only a USB host controller but also three USB connection jacks and for connection of USB cables. The USB connection jack of them is connected to the USB connection to be connected to the first printer through the USB cable . Another USB connection jack is connected to the USB cable to be connected to the second printer through the USB cable . A further USB connection jack is connected to the USB cable to be connected to the third printer through the USB cable . That is the client PC is configured to be able to perform data communication with the three printers and according to a USB standard through the USB cables respectively. Also the USB corresponds to an example of a first communication interface of this disclosure.

The network I F is an interface for connecting the client PC to a network of a standard different from USB and is configured as an interface for connection with a local area network LAN in the present embodiment. This LAN corresponds to an example of a second communication interface of this disclosure. Also the network I F may be an interface corresponding to a wired LAN or may be an interface corresponding to a wireless LAN.

The printers and serving as image processing apparatuses are basically the same in the software configuration and the hardware configuration. Therefore in as a representative only the internal configuration of the second printer is shown and the internal configurations of the first printer and the third printer are omitted. This is the same in the software configuration of . Therefore in the following description with respect to the printers the second printer will be described in detail and the other printers and will not be described in detail.

The second printer is an apparatus for printing images onto recording sheets such as printing paper by an electrophotographic system or an inkjet system. The second printer is connected to the client PC through the USB cable . Therefore it is possible to transmit print data of documents and the like created by the application of the client PC to the second printer through the USB cable thereby printing images represented by the print data.

The second printer includes a variety of software such as a CPU a ROM a RAM a non volatile memory a display section an operation section a print engine a USB I F and a network I F .

The CPU controls each section of the second printer by executing programs stored in the ROM and the non volatile memory . The ROM stores a variety of programs to be executed by the CPU data and so on. The RAM is used as a main storage section which is used for the CPU to perform a variety of processes. The operation section is configured by a mouse a keyboard and so on not shown to be operated by a user. The display section is configured by a display such as a liquid crystal display. The print engine is configured by a variety of mechanisms for printing images on recording sheets for example in a case of an inkjet system an inkjet nozzle a cartridge a motor a sheet conveying mechanism and so on .

The USB I F basically has the same function as that of the USB I F of the client PC for performing data communication with the client PC through the USB cable according to the USB standard. However the USB I F of the second printer has one USB connection jack . The network I F also has the same function and configuration as those of the network I F of the client PC . That is the second printer has a so called a network printing function capable of printing images of print data transmitted through a LAN.

In the image information processing system configured as described above the client PC performs a variety of data communication with each of the printers and through USB interface. This data communication includes communication for transmitting print data to any one of the printers and thereby printing images communication for using the client PC to perform a variety of setting of the printers and communication for using the client PC to acquire the set state operating state and the like of each of the printers and etc.

This data communication is performed according to an IPP over USB standard. The IPP and the IPP over USB have been already described in brief and they are known standards for implementing communication between an information processing apparatus and a printer and thus they will not be described in detail.

Subsequently the software configuration of the image information processing system will be described with reference to . First the software configuration of the client PC will be described. As shown in the client PC has the OS the client side printer proxy and the application as software. More specifically the OS includes a printer port client hereinafter referred to as a PPC TCP IP software a USB driver and a network driver . Each software is associated with a hierarchy of an OSI reference model roughly as follows. That is the network driver corresponds to a data link layer an IP function of the TCP IP software corresponds to a network layer a TCP function and a UDP function of the TCP IP software correspond to a transport layer the USB driver corresponds to each layer from the data link layer to the transport layer as a whole and the PPC corresponds to a session layer. Also the client side printer proxy corresponds to the session layer and the application corresponds to an application layer. Further the USB driver corresponds to an example of a transceiver section of an information processing apparatus of this disclosure.

The PPC is software taking charge of the IPP. That is the PPC takes charge of determining a procedure for printing according to the IPP standard between the client PC and a printer which is a communication partner. The PPC determines which procedure is to be used to transmit print data other data or the like from the application to a printer and which procedure is to be used to perform a receiving process on data from a printer and transmit the data to the application and thus performs data communication between the application and the printer. More specifically for example in a case where print data is received from the application the print data is stored in a predetermined frame according to the PPC hereinafter referred to as a PPC frame and the PPC frame is transmitted to a lower layer protocol the TCP IP software in the present embodiment . On the other hand if a PPC frame transmitted from the printer is input through the TCP IP software data is read from the PPC frame and is transmitted to the application . Also the PPC corresponds to an example of a transmission reception data processing section of the information processing apparatus of this disclosure and the IPP and the TCP IP correspond to an example of a protocol of this disclosure.

The TCP IP software is known software a protocol stack taking charge of processes associated with protocols of IP TCP and UDP. The USB driver is known driver software for implementing data communication according to USB and the network driver is known driver software for implementing data communication through a LAN.

The client side printer proxy is software acting as a local host in the client PC and acts as a printer a server as seen from the OS . That is the client side printer proxy transmits data of a local host destination a destination having an IP address 127.0.0.1 received from the TCP IP software to the USB driver and then transmits data received from the USB driver to the TCP IP software . Also the client side printer proxy corresponds to an example of a communication relaying program which is implemented by the information processing apparatus of this disclosure.

As a method of implementing data communication according to the IPP over USB standard while changing existing components such as the OS as little as possible this disclosure focuses on the concept of a local host. That is if a proxy using the local host is provided between the TCP IP software and the USB driver and control is performed such that the proxy relays data it is possible to implement data communication of the IPP over USB standard.

In a TCP IP protocol the IP address of a local host is predetermined to 127.0.0.1 . This IP address 127.0.0.1 is an address for feeding back transmission data transmitted from the application for a network back in the client PC and is generally referred to as a loopback address.

The client side printer proxy registers the IP address 127.0.0.1 of the local host with respect to the TCP IP software . Therefore in a case where the application requests the local host destination the destination having the IP address 127.0.0.1 to transmit print data the TCP IP software does not transmit the print data to a network but transmits the print data to the client side printer proxy serving as the local host. If receiving the print data from the TCP IP software the client side printer proxy transmits the print data to the USB driver which transmits the print data by USB.

Also the client side printer proxy manages association between the printers and connected to the USB connection jacks and and port numbers of the local host respectively.

That is the client side printer proxy sets the IP address to 127.0.0.1 and sets a port number for each USB connection jack thereby setting an end point. Specifically as shown in a port number is set for a USB number corresponding to the USB connection jack and a port number is set for a USB number corresponding to the USB connection jack and a port number is set for to a USB number corresponding to the USB connection jack .

As a method of associating the USB numbers and the port numbers with each other for example it can be considered a method in which the client side printer proxy performs an exchange of information with the USB driver thereby investigating the number of USB ports which are managed by the USB driver that is the number of USB connection jacks and a port number is set for each USB port that is for each USB connection jack . In the present embodiment the associating according to this method will be mainly described. That is in the present embodiment the client side printer proxy generates a socket for each USB port as will be described below. A socket is well known as a standard application programming interface API which is used when an application uses a TCP IP function and thus will not be described in detail.

Also as the method of associating the USB numbers and the port numbers a variety of methods can be considered. For example it can also be considered a method in which a user inputs the USB numbers and the port numbers to correspond in one to one correspondence by using a predetermined user interface UI screen for the associating in the client PC .

Since the USB numbers and the port numbers are associated with each other the user can investigate the port number of an arbitrary USB port for example through the predetermined UI screen the port number can be displayed . Further if the USB numbers and the port numbers are associated with each other the user can register an arbitrary USB printer a printer subjected to USB connection as a printer which can be used from the client PC . Specifically for example a screen for adding a printer may be displayed and a TCP IP port may be designated as a new printer and the IP address of the printer here 127.0.0.1 indicating the local host and a port number for example may be input. Also all of the USB connection jacks and in other words the USB ports correspond to an example of a connection section of this disclosure.

Also when the user controls a USB printer such that the USB printer prints a document or the like created by the application the user can perform predetermined input operation for designating a desired USB printer such that the designated USB printer performs printing. Specifically for example a method of inputting a command IPP 127.0.0.1 50001 ipp to designate a USB printer can be considered. If the port of the local host is designated as a USB port which is corresponding to a printing destination by that command print data is input to a corresponding socket of the client side printer proxy through the TCP IP software . On the basis of the port number corresponding to the socket the client side printer proxy transmits the print data from a USB port corresponding to the port number by the USB driver .

Also in this disclosure since the client PC has the plurality of USB connection jacks as described above arbitrary port numbers are set. However in a case where there is one USB connection jack a port number known as a default port number of the IPP may be used.

By the way since a port number is associated with each USB port the user can designate an arbitrary USB printer and transmit print data to the designated USB printer. It is difficult for the user to easily specify a desired printer only by a port number. Moreover it is troublesome for the user to input a command for designating a desired printer like in the above described example.

Therefore the client side printer proxy has a mechanism for efficiently managing a plurality of USB printers thereby making it easy for the user to select. Specifically the client side printer proxy receives printer retrieval data a multicast request which will hereinafter be referred to as a device search request from the PPC and requests a printer name from each USB port. Then if a printer name is received as a response from a printer the client side printer proxy sends back the printer name in association with a port number and the IP address of the local host to the PPC . The printer name corresponds to an example of apparatus information of this disclosure.

As described above the client side printer proxy manages the port numbers in association with the USB numbers and further manages the retrieved printer names in association with the USB numbers. That is as shown in the client side printer proxy holds management data in which a printer name and a port numbers are associated with each other for each USB port.

The IPP originally has a function of performing multicast for a network thereby retrieving a printer connected to the network and the PPC takes that role. Therefore if the local host destination performs that multicast it is possible to retrieve printers using USB connection through the local host that is through the client side printer proxy .

As described above since a printer name and a port number are associated with each other for each USB in a case where the user wants any USB printer to perform printing the user can easily designate the desired USB printer on the basis of the printer name.

Also the user may use a predetermined UI screen to issue the device search request for the local host accordingly for a USB connection printer at an arbitrary timing. Alternatively regardless of a request form the user the client side printer proxy may periodically retrieve USB connection printers and sends back the latest information to the PPC .

Subsequently the software configuration of the second printer will be described. The second printer includes a printer side client proxy a printer port server hereinafter referred to as a PPS TCP IP software a USB driver and a network driver as software. If each piece of the software is associated with a hierarchy of an OSI reference model the printer side client proxy and the PPS correspond to a session layer. The hierarchies of the network driver the TCP IP software and the USB driver are the same as those of the client PC . Also the USB driver corresponds to an example of a transceiver section of an image processing apparatus of this disclosure.

The PPS is software taking charge of the IPP in the second printer . That is the PPS takes charge of determining a procedure of processing a variety of printing related data to be transmitted to and received from the client PC which is a communication partner. A basic function of the PPS is the same as that of the PPC of the client PC and it relays data between the print engine and the TCP IP software according to the IPP standard. Also the PPS corresponds to an example of a transmission reception data processing section of the image processing apparatus of this disclosure.

The TCP IP software is basically the same as the TCP IP software of the client PC and the network driver is basically the same as the network driver of the client PC and thus they will not be described. Also a basic function of USB driver taking charge of data communication according to the USB standard is the same as the USB driver of the client PC . However since the second printer has one USB connection jack the USB driver controls USB communication with an apparatus the client PC in the present embodiment connected to the one USB connection jack .

The printer side client proxy is software acting as a local host in the second printer and acts as a client as seen from the PPS or the TCP IP software . That is the printer side client proxy transmits data the TCP IP software of the local host destination the destination having the IP address 127.0.0.1 received from the TCP IP software to the USB driver and then transmits data received from the USB driver to the TCP IP software .

That is similarly to the client side printer proxy of the client PC the printer side client proxy is provided for implementing data communication of the IPP over USB standard. Also the printer side client proxy corresponds to an example of a communication relaying program which is implemented by the image processing apparatus of this disclosure.

Subsequently a basic operation example of the image information processing system will be described with reference to . For example if the user operates a predetermined UI of the application of the client PC thereby issuing a device search request for a USB connection printer the PPC issues a device search request for the USB connection printer addressed to the local host that is the client side printer proxy . Then the TCP IP software transmits the device search request to the client side printer proxy .

If receiving the device search request from the PPC the client side printer proxy issues a printer name request inquiry to each USB port. Specifically first the client side printer proxy inquires of the first printer connected to the USB connection jack about the printer name. Then the printer side client proxy of the first printer transmits the printer name of the first printer for example NPR as a response. If receiving the printer name as a response from the first printer the client side printer proxy registers the received printer name as one management data item see and sends back the received printer name in association with a port number and an IP address 127.0.0.1 to the PPC through the TCP IP software .

Similarly the client side printer proxy inquires two printers and connected to the other two USB connection jacks and about their printer names. If receiving the responses the client side printer proxy registers the printer names as management data and it sends back the printer names in association with port numbers and IP addresses to the PPC .

If the USB connection printer names are returned from the client side printer proxy the PPC collects them and sends back them as the search result to the application . The application displays the search result thereby presenting the latest information of USB connection printer to the user.

If the latest information of the USB connection printers is obtained by doing so the user can easily select a USB connection printer for printing. Also for example if the user designates the second printer that is a printer name PR on a printer selection screen and requests to print a document or the like created by the application a printing request from the application is transmitted from the PPC to the client side printer proxy through the TCP IP software . More specifically the printing request is input from a socket which is one of the sockets generated for each USB port and corresponds to the second printer to the client side printer proxy . If receiving the printing request addressed to the second printer the client side printer proxy controls the USB driver such that the printing request is transmitted to the second printer .

If the second printer receives the printing request from the client PC through USB interface the printer side client proxy transmits the printing request to the PPS . At this time as the transmission source 127.0.0.1 is designated as the IP address and the IPP default is designated as the port number. If receiving the printing request the PPS outputs print data to the print engine such that printing is performed. Then if the printing is completed the PPS transmits a reception response addressed to the local host which is the printing request transmission source. The reception response is transmitted to the printer side client proxy through the TCP IP software . The printer side client proxy controls the USB driver such that the reception response is transmitted.

If the client PC receives the reception response from the second printer through USB interface the client side printer proxy transmits the reception response to the PPC . On the basis of the reception response the PPC can display information representing that the printing has been completed by the second printer on a predetermined UI screen.

Subsequently the specific process contents of the client side printer proxy of the client PC will be described with reference to which is composed of and . After activation the CPU of the client PC starts a client side printer proxy process of and at a predetermined timing.

If starting the client side printer proxy process of first in processes of steps S to S the CPU prepares TCP sockets. That is in step S the CPU generates a TCP socket by a command socket . In step S the CPU registers the IP address 127.0.0.1 in the TCP socket by a command bind and designates a port number with respect to any one USB port USB connection jack . In step S the CPU determines whether generating of sockets relative to all USB ports has been completed and if the generating of the sockets has not been completed the CPU returns to step S. In this way the CPU sequentially generates sockets for the USB ports thereby completing the generating. Next in step S the CPU generates a UDP socket by a command socket . In step S the CPU registers a multicast address for printer retrieval ... by a command bind and designates a port number . In this way a printer retrieval device search request is issued. Then a corresponding UDP socket also becomes a multicast object of the device search.

If the processes of steps S to S are completed in step S the CPU performs socket connection preparation by a command listen . Then in step S the CPU enters an event waiting state.

If any event occurs in step S the CPU determines whether that event is an event from a TCP socket that is whether data has been input from a TCP socket. In a case where data has been input from a TCP socket in step S the CPU determines whether the data from the TCP socket is printing related data such as a printing request including print data . If the data from the TCP socket is not printing related data the CPU performs predetermined error handling in step S and returns to step S. In a case where the data from the TCP socket is printing related data in step S the CPU issues a command usb send such that the printing related data is output to a USB connection printer of a designated port a port number associated with the TCP socket to which the data has been input . Then the CPU returns to step S.

In a case where it is determined in step S that data has not been input from a TCP socket in step S the CPU determines whether the event is an event from the USB driver . In a case where data has been input from the USB driver in step S the CPU determines whether the data from the USB driver is printing related data for example such as the above described reception response . If the data from the USB driver is not printing related data in step S the CPU performs predetermined error handling and returns to step S. In a case where the data from the USB driver is printing related data in step S the CPU issues a command send such that the printing related data is transmitted to the PPC through TCP IP and returns to step S.

In a case where it is determined in step S that any data has not been input from the USB driver in step S the CPU determines whether the event is an event from the UDP socket that is whether data has been input from the UDP socket. In a case where data has been input from the UDP socket in step S the CPU determines whether the data from the UDP socket is retrieval data a device search request . If the data from the UDP socket is not retrieval data the CPU performs predetermined error handling in step S and returns to step S. In a case where the data from the UDP socket is retrieval data in step S the CPU inquires of any one USB port about the printer name of the USB connection printer. In step S the CPU sends back the result of the inquiring that is the printer name transmitted as a response to the inquiring from the USB connection printer which is the inquiring destination through TCP IP. In step S the CPU determines whether inquiring of all USB ports about their printer names has been completed. If the inquiring is completed the CPU returns to step S. In this way the CPU sequentially acquires the printer names of the USB connection printers If acquiring of the printer names of all USB connection printers is completed the CPU returns to step S.

In a case where it is determined in step S that any data has not been input from the UDP socket the CPU performs a process corresponding to the occurred event in step S and returns to step S.

Subsequently the specific process contents of the printer side client proxy of the second printer will be described with reference to . After activation the CPU of the second printer start a printer side client proxy process of at a predetermined timing.

If starting the printer side client proxy process of first in step S the CPU generates a TCP socket by a command socket . In step S the CPU registers the IP address 127.0.0.1 of the local host in the TCP IP software by a command bind and designates the port number for the USB port USB connection jack . Then in step S the CPU enters an event waiting state.

If any event occurs in step S the CPU determines whether that event is an event from a TCP socket that is whether data has been input from a TCP socket. In a case where data has been input from a TCP socket in step S the CPU determines whether the data from the TCP socket is printing related data. If the data from the TCP socket is not printing related data the CPU performs predetermined error handling in step S and returns to step S. In a case where the data from the TCP socket is printing related data in step S the CPU issues a command usb send such that the printing related data is transmitted to the client PC through USB interface and returns to step S.

In a case where it is determined in step S that data has not been input from a TCP socket in step S the CPU determines whether the event is an event from the USB driver . In a case where data has been input from the USB driver in step S the CPU determines whether the data from the USB driver is printing related data. In a case where the data from the USB driver is printing related data the CPU transmits the printing related data to the PPS through TCP IP by a command send in step S and returns to step S.

In a case where the data from the USB driver is not printing related data in step S in step S the CPU determines whether the data from the USB driver is retrieval data a device search request . If the data from the USB driver is not retrieval data the CPU performs predetermined error handling in step S and returns to step S. In a case where the data from the USB driver is retrieval data the CPU sends back the printer name of the second printer to the client PC through USB interface and returns to step S.

In a case where it is determined in step S that any data has not been input from USB the CPU performs a process correspond to the occurred event in step S and returns to step S.

As described above in the image information processing system of the present embodiment since the client PC includes the client side printer proxy for conversion relay between TCP IP and USB the client PC acts as the local host. That is the client side printer proxy has the local host address 127.0.0.1 and acts as a network printer. Meanwhile since each of the printers and includes the printer side client proxy for conversion relay between TCP IP and USB each of the printers and acts as a local host. That is each of the printers and has a local host address 127.0.0.1 and acts as a network client.

Then if a device search request is issued in the client PC the device search request is also input to the client side printer proxy serving as a local host. If receiving the device search request the client side printer proxy sequentially inquires of the USB connection printers about their printer names and sends back the results of the inquiring in association with the port numbers and the IP addresses to the PPC . Also the IP addresses are a common address 127.0.0.1 . However the printer names and the port numbers are different depending on the USB connection printers.

According to this configuration if print data addressed to any one USB connection printer is transmitted from the application of the client PC the print data is processed according to the IPP by the PPC and is transmitted to the client side printer proxy . The client side printer proxy transmits the received print data to the USB connection printer of the corresponding port number. That is the client side printer proxy transmits the print data of the IPP standard to the printer through USB interface.

Therefore according to the image information processing system of the present embodiment it is possible to transmit and receive data of the IPP standard through USB interface according to the IPP over USB standard while suppressing modifications on existing software for example the PPC for transmitting and receiving data by the IPP.

In the current draft of the IPP over USB standard any specific mechanism for connecting IPP and USB is not defined and any specific method or the like for connecting a plurality of printers by USB and properly using the printers is not mentioned. In order to handle this situation since proxies for relaying TCP IP and USB are provided to both the client side and the printer side like in the present embodiment it is possible to specifically and easily implement data communication according to the IPP over USB standard.

Further in the present embodiment since a printer name and a port number are individually managed in association with each USB connection printer the user can easily and surely designate a desired USB connection printer.

It goes without saying that embodiments of this disclosure are not limited to the above described embodiment but can use various forms as long as they belong to the technical scope of this disclosure.

For example in the above described embodiment as the own device address for feeding back transmission data in the image processing apparatus the local host address 127.0.0.1 which is general as a own device address loopback address in the TCP IP protocol has been exemplified however this address is merely an example. With respect to how to specifically set the own device address it is possible to appropriately determine it according to a corresponding protocol or the like. For example in a case where the OS supports any other address as the own device address the corresponding address may be used as the own device address. Also for example an address family such as AF UNIX registered as a trade mark or the like which a BSD socket is supporting can be used.

Also in the above described embodiment as the image processing apparatus of this disclosure a printer has been exemplified. However the image processing apparatus of this disclosure is not limited to an apparatus configured as a single printer and may be an apparatus having not only a printer function printing function but also other functions.

Also this disclosure is not limited to the application to data communication between the above described client PC and the printers and . That is this disclosure can be applied to a variety of information processing systems configured to be able to data communication between an information processing apparatus client and a server through a predetermined communication interface by a particular protocol and be able to perform transmission reception according to the particular protocol even by using a different method of communication interface.

