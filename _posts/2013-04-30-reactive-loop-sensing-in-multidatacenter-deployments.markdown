---

title: Reactive loop sensing in multi-datacenter deployments
abstract: Technologies are generally provided for reactive loop sensing in multi-datacenter deployments. In some examples, tagged metrics from deployment elements on different datacenter or platform providers may be used by a stability module to generate a synthetic generalized deployment model that aliases multiple system elements into general state vectors. The state vectors may include a transfer vector on the border between each datacenter or platform, and the feedback from the metrics may cause the states of the datacenters/platforms to match the deployment's unobserved variables allowing stability analysis before failure. For example, the metrics may be associated with a portion of the deployment on one of the multiple datacenters. The stability analysis module may compare the received metrics with model metrics derived from a model of the multi-datacenter deployment to determine the stability of the deployment and/or adjust the model for increased stability.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274822&OS=09274822&RS=09274822
owner: EMPIRE TECHNOLOGY DEVELOPMENT LLC
number: 09274822
owner_city: Wilmington
owner_country: US
publication_date: 20130430
---
This Application is the National Stage filing under 35 U.S.C 371 of PCT Application Ser. No. PCT US13 38894 filed on Apr. 30 2013. The PCT Application is herein incorporated by reference in its entirety.

Unless otherwise indicated herein the materials described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

As cloud services and service providers proliferate many web applications may actually span multiple applications services and datacenters. In many cases such multiple applications services datacenters and similar entities may implement automation feedback loops to reduce costs efficiently distribute loads and optimize performance. However these automation feedback loops may not necessarily be visible to users. In a situation where a web application spans multiple entities applications services and or datacenters such automation feedback loops may interact in unexpected and undesirable ways.

The present disclosure generally describes techniques for reactive loop sensing in multi datacenter deployments.

According to some examples a method is provided for stabilizing feedback loops in a multi entity deployment. The method may include receiving a first metric from a first entity executing a first portion of a deployment receiving a second metric from a second entity executing a second portion of the deployment determining a stability parameter of the deployment associated with an interaction between the first entity and the second entity based on the first metric and the second entity and providing an alert and or adjusting the deployment based on the stability parameter.

According to other examples a virtual machine manager VMM is provided for stabilizing feedback loops in a multi entity deployment. The VMM may include a stability module and a processing module. The stability module may be configured to receive a first metric corresponding to a first portion of a deployment being executed by a first entity receive a second metric corresponding to a second portion of the deployment being executed by a second entity and determine a stability parameter of the deployment associated with an interaction between the first entity and the second entity based on the first metric and the second metric. The processing module may be configured to provide an alert and or adjust the deployment based on the stability parameter.

According to further examples a cloud based datacenter is provided for stabilizing feedback loops in a multi entity deployment. The datacenter may include at least one virtual machine VM operable to be executed on one or more physical machines and a datacenter controller. The datacenter controller may be configured to receive a first metric from a first portion of a deployment executing on the VM receive a second metric from another entity executing a second portion of the deployment determine a stability parameter of the deployment associated with an interaction between the VM and the other entity based on the first metric and the second metric and provide an alert and or adjust the deployment based on the stability parameter.

According to yet further examples a computer readable medium may store instructions for stabilizing feedback loops in a multi entity deployment. The instructions may include receiving a first metric from a first entity executing a first portion of a deployment receiving a second metric from a second entity executing a second portion of the deployment determining a stability parameter of the deployment associated with an interaction between the first entity and the second entity and providing an alert and or adjusting the deployment based on the stability parameter.

The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects embodiments and features described above further aspects embodiments and features will become apparent by reference to the drawings and the following detailed description.

In the following detailed description reference is made to the accompanying drawings which form a part hereof. In the drawings similar symbols typically identify similar components unless context dictates otherwise. The illustrative embodiments described in the detailed description drawings and claims are not meant to be limiting. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure as generally described herein and illustrated in the Figures can be arranged substituted combined separated and designed in a wide variety of different configurations all of which are explicitly contemplated herein.

This disclosure is generally drawn inter alia to methods apparatus systems devices and or computer program products related to reactive loop sensing in multi datacenter deployments.

Briefly stated technologies are generally provided for reactive loop sensing in multi datacenter deployments. In some examples tagged metrics from deployment elements on different datacenter or platform providers may be used by a stability module to generate a synthetic generalized deployment model that aliases multiple system elements into general state vectors. The state vectors may include a transfer vector on the border between each datacenter or platform and the feedback from the metrics may cause the states of the modeled datacenters platforms to match the deployment s unobserved variables e.g. inter datacenter interactions and gains allowing stability analysis before failure. For example the metrics may be associated with a portion of the deployment on one of the multiple datacenters. The stability analysis module may compare the received metrics with model metrics derived from a model of the multi datacenter deployment to determine the stability of the deployment and or adjust the model for increased accuracy.

A datacenter as used herein refers to an entity that hosts services and applications for customers through one or more physical server installations and one or more virtual machines executed in those server installations. Customers of the datacenter also referred to as tenants may be organizations that provide access to their services for multiple users. One example configuration may include an online retail service that provides retail sale services to consumers users . The retail service may employ multiple applications e.g. presentation of retail goods purchase management shipping management inventory management etc. which may be hosted by one or more datacenters. Thus a consumer may communicate with those applications of the retail service through a client application such as a browser over one or more networks and receive the provided service without realizing where the individual applications are actually executed. This scenario contrasts with conventional configurations where each service provider would execute their applications and have their users access those applications on the retail service s own servers physically located on retail service premises. One result of the networked approach described herein is that customers like the retail service may move their hosted services applications from one datacenter to another without the users noticing a difference.

As shown in a diagram a physical datacenter may include one or more physical servers and each of which may be configured to provide one or more virtual machines . For example the physical servers and may be configured to provide four virtual machines and two virtual machines respectively. In some embodiments one or more virtual machines may be combined into one or more virtual datacenters. For example the four virtual machines provided by the physical server may be combined into a virtual datacenter . The virtual machines and or the virtual datacenter may be configured to provide cloud related data computing services such as various applications data storage data processing or comparable ones to a group of customers such as individual users or enterprise customers via a cloud .

In some embodiments a synthetic generalized deployment model may be generated by the system using metrics from deployment elements on different datacenters providers. The model may alias multiple system elements into general state vectors which may include a transfer vector on the border between each datacenter. A transfer vector is the coefficient of feedback that describes how the states on one side of a multi datacenter deployment influence the states on another side. Results from the metrics may be used to adjust the states of the datacenters to increase stability and reduce failure. In contrast conventional analysis systems either may not detect resonance conditions or detect them for systems where all loops and policies are known and controlled. Example systems according to embodiments may provide the ability to manage feedback across arbitrary federated datacenter domains servers.

As shown in a diagram a customer deployment e.g. a customer service or application may provide data or computing services to a group of customers similar to the customers in via a network . In some embodiments the customer deployment may be implemented across multiple datacenters. For example the customer deployment may be implemented across a datacenter A and a datacenter B both of which may be similar to the physical datacenter in . In some embodiments the customer deployment may be implemented on one or more virtual machines in the datacenter A and also on one or more virtual machines in the datacenter B . While the customer deployment is shown as being implemented on two datacenters the datacenter A and the datacenter B in other embodiments a customer deployment may be implemented on more than two datacenters.

As shown in a diagram a deployment may be implemented across a datacenter A similar to the datacenter A and a datacenter B similar to the datacenter B . In particular the datacenter A may be an application provider and host a load balancer while the datacenter B may be an infrastructure provider and host a power optimizer as well as a virtual server 1 and a virtual server 2 . The virtual server 1 and the virtual server 2 may be similar to the virtual machines in . The load balancer located at the datacenter A may dynamically distribute incoming requests to the deployment e.g. from customers such as the customers between the virtual server 1 and the virtual server 2 in order to balance the load between the two virtual servers located on the infrastructure datacenter. The loop in the diagram may be unstable because the load balancer is separate from the power optimizer .

In some embodiments the load balancer may operate in a control loop associated with a time period. After each time period the load balancer may evaluate and compare the current loads of the virtual server 1 and the virtual server 2 based on server response time statistics during the previous time period. Based on the evaluation and comparison in the next time period the load balancer may then redistribute more of the incoming requests to the virtual server with less load.

The power optimizer located at the datacenter B may dynamically adjust the power and operating speed of the virtual server 1 and the virtual server 2 based on server load in order to decrease power consumption and increase efficiency. As with the load balancer the power optimizer may also operate in a control loop associated with a time period. After each time period the power optimizer may measure the current loads of the virtual server 1 and the virtual server 2 based on for example processor core utilization during the previous time period. Based on the load measurement in the next or subsequent time period the power optimizer may reduce the power and or operating speed of a server with or having less load and increase the power and or operating speed of a server with or having more load.

While the control loops of the load balancer and the power optimizer may be individually stable when combined they may form an unstable positive feedback loop especially if their associated time periods are similar. For example supposing that the time periods associated with the load balancer and the power optimizer control loops are both approximately the same their endpoints may be relatively closely aligned. At the end of one time period the load balancer may detect that the virtual server 2 has a slightly higher load than the virtual server 1 and may subsequently redistribute more load from the virtual server 2 to the virtual server 1 in the next time period. However the power optimizer upon detecting that the virtual server 2 has a slightly higher load than the virtual server 1 may subsequently increase the operating speed power of the virtual server 2 while reducing the operating speed power of the virtual server 1 in the next time period. As a result in the next time period the virtual server 1 may have more load due to the load balancer but decreased operating speed power due to the power optimizer whereas the virtual server 2 may have less load and increased operating speed power. Upon detecting this situation the load balancer may then shift load back to the virtual server 2 whereas the power optimizer may decrease the operating speed power of the virtual server 2 . In some embodiments this interaction may cause overcompensation where the load balancer and the power optimizer cause larger and larger swings in load distribution and operating speed power between the virtual server 1 and the virtual server 2 . This positive feedback loop may eventually lead to large oscillations potentially causing system instability and failure. As such the ability to detect and respond to unstable feedback loops in multi datacenter deployments may be desirable.

As shown in a diagram a deployment similar to the customer deployment may be implemented across a datacenter A similar to the datacenter A and a datacenter B similar to the datacenter B . The deployment may generate metrics A specifically associated with the datacenter A and metrics B specifically associated with the datacenter B. In some embodiments the metrics A and the metrics B may be associated with physical servers e.g. the physical servers and and or virtual machines e.g. the virtual machines and may include load performance speed and or power consumption.

The metrics A and the metrics B may then be compared with model metrics A and model metrics B generated from a generalized deployment model . The generalized deployment model may be configured to model the performance of the deployment and in this instance may include a side A corresponding to the datacenter A and a side B corresponding to the datacenter B . For example each side may include a number of model states S and gains G modeling the behavior of the datacenters implementing the deployment . In some embodiments one or more of the model states S may directly correspond to the model metrics A and the model metrics B . The deployment model may further include interaction terms K in the form of a transfer vector that represent interactions between the datacenters implementing the deployment i.e. the datacenter A and the datacenter B . In some embodiments the gains G and the interaction terms K may result from the interaction of automation processes and feedback loops in the different datacenters and as such may represent parameters that may not be directly observed in the actual deployment . In some embodiments the generalized deployment model may implement a generalized tree model and or a generalized mesh model. A system may be referred to as being observable if for any possible sequence of state and control vectors a current state can be determined in finite time using the outputs. Thus it may be possible to determine a behavior of an entire system from the system s outputs.

As mentioned above the metrics A and the metrics B may be compared with the model metrics A and the model metrics B generated from the deployment model . The comparison may be performed by a feedback module which may use the comparison results to refine the gains G and the interaction terms K such that the behavior of the deployment model more closely matches the behavior of the deployment . In some embodiments the feedback module may also use the comparison results to refine the model states S . In some embodiments the metric comparison and feedback may be implemented using Kalman filtering or linear quadratic estimation .

A stability analysis module may then assess the stability of the deployment model and the actual deployment which the deployment model models . For example the stability analysis module may analyze the gains G and the interaction terms K of the deployment model to determine a stability parameter associated with the deployment . In some embodiments the stability analysis module may use stability analysis techniques such as the Routh Hurwitz stability criterion the Nyquist stability criterion root locus analysis or any other suitable stability analysis technique. The stability analysis module may also compare the determined stability parameter s with predefined and or dynamically determined thresholds to evaluate stability.

A transfer vector is the coefficient of feedback that describes how the states on side A of the multi datacenter deployment influence the states on side B. In the diagram K21 the transfer between state 2 and state 1 K12 from state 1 to state 2 etc. form the transfer vector. The states S may be measurable but the K values in the transfer vector may not be. Thus the transfer vector is what is being computed using feedback the K vector in the feedback module . K may also be used in the stability analysis module for the stability analysis. In addition to being a vector the transfer vector may be realized as a list of terms each of which may for example simply be a real or complex number or a polynomial transfer function e.g. K12 may be 2s 3s 1 .

Based on the results of the stability analysis the stability analysis module may then cause an alert adjustment module to issue alerts regarding the stability of the deployment and or adjust the deployment to reduce potential instability. For example the alert adjustment module may be configured to provide alerts to the owners of the deployment and or the datacenters if instability is detected. In some embodiments the alert adjustment module may provide an application programming interface API which other automation systems may call on to determine if their automation feedback loop s appear to conflict with loops in the deployment and or the datacenters.

The alert adjustment module may also be configured to adjust the deployment by modifying timing and or load distribution. For example the alert adjustment module may adjust the time period and or magnitude for one or more automation feedback loops associated with the deployment . The alert adjustment module may be configured to dither the timing of automation feedback loops by adding randomness in order to decrease the likelihood that the feedback loops will combine to form an unstable positive feedback loop. In some embodiments the alert adjustment module may also be configured to adjust the load distribution between the datacenters implementing the deployment and or the amount of work actually sent to each datacenter.

In some embodiments instead of or in addition to comparing the metrics A and the metrics B to model metrics generated by a deployment model e.g. the deployment model a Fourier extraction module may be used to process the metrics. Specifically the Fourier extraction module may detect the oscillations of parameters within the deployment based on the metrics A and the metrics B . Such parameters may include load or performance e.g. speed and or power consumption parameters associated with physical servers and or virtual machines in the datacenter A and or the datacenter B . Once oscillating parameters have been detected an oscillation analysis module may determine whether the oscillations are increasing in magnitude and or frequency. Based on the results of the oscillation analysis the oscillation analysis module may then cause the alert adjustment module to issue alerts regarding the stability of the deployment and or adjust the deployment to reduce potential instability similar to the stability analysis module described above.

While the example deployment is described as being implemented across two different datacenters i.e. the datacenter A and the datacenter B and the deployment model includes sides corresponding to the different datacenters this need not necessarily be the case. In some embodiments a deployment may be implemented across different entities such as different applications executing on the same or different datacenters or different services executing on the same or different datacenters. Moreover the deployment and the deployment model may include more than two entities. Regardless of the number and types of entities included in a deployment or deployment model the stability oscillation analysis techniques described above may still be applicable. For example a deployment model may include and model interactions between a side corresponding to a datacenter and another side corresponding to an application or service implemented on that datacenter. A deployment model with multiple entities may model their interactions with multiple transfer vectors as described above.

For example the computing device may be used to provide reactive loop sensing in multi datacenter deployments as described herein. In an example basic configuration the computing device may include one or more processors and a system memory . A memory bus may be used for communicating between the processor and the system memory . The basic configuration is illustrated in by those components within the inner dashed line.

Depending on the desired configuration the processor may be of any type including but not limited to a microprocessor P a microcontroller C a digital signal processor DSP or any combination thereof. The processor may include one more levels of caching such as a cache memory a processor core and registers . The example processor core may include an arithmetic logic unit ALU a floating point unit FPU a digital signal processing core DSP Core or any combination thereof. An example memory controller may also be used with the processor or in some implementations the memory controller may be an internal part of the processor .

Depending on the desired configuration the system memory may be of any type including but not limited to volatile memory such as RAM non volatile memory such as ROM flash memory etc. or any combination thereof. The system memory may include an operating system a virtual machine manager VMM application and program data . The VMM application may include a deployment modeling application and a stability analyzer for providing reactive loop sensing in multi datacenter deployments as described herein. The program data may include among other data deployment model data or the like as described herein.

In some embodiments a central management system e.g. one or more applications executed on one or more other computing devices may perform actions associated with stabilizing feedback loops in a multi entity deployment such as receiving a first metric from a first entity executing a first portion of a deployment receiving a second metric from a second entity executing a second portion of the deployment determining a stability parameter of the deployment associated with an interaction between the first entity and the second entity based on the first metric and the second entity and providing an alert and or adjusting the deployment based on the stability parameter. The central management system may then provide instructions to the VMM application for implementing the feedback loop stabilization.

The computing device may have additional features or functionality and additional interfaces to facilitate communications between the basic configuration and any desired devices and interfaces. For example a bus interface controller may be used to facilitate communications between the basic configuration and one or more data storage devices via a storage interface bus . The data storage devices may be one or more removable storage devices one or more non removable storage devices or a combination thereof. Examples of the removable storage and the non removable storage devices include magnetic disk devices such as flexible disk drives and hard disk drives HDD optical disk drives such as compact disk CD drives or digital versatile disk DVD drives solid state drives SSD and tape drives to name a few. Example computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data.

The system memory the removable storage devices and the non removable storage devices are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD solid state drives or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be used to store the desired information and which may be accessed by the computing device . Any such computer storage media may be part of the computing device .

The computing device may also include an interface bus for facilitating communication from various interface devices e.g. one or more output devices one or more peripheral interfaces and one or more communication devices to the basic configuration via the bus interface controller . Some of the example output devices include a graphics processing unit and an audio processing unit which may be configured to communicate to various external devices such as a display or speakers via one or more A V ports . One or more example peripheral interfaces may include a serial interface controller or a parallel interface controller which may be configured to communicate with external devices such as input devices e.g. keyboard mouse pen voice input device touch input device etc. or other peripheral devices e.g. printer scanner etc. via one or more I O ports . An example communication device includes a network controller which may be arranged to facilitate communications with one or more other computing devices over a network communication link via one or more communication ports . The one or more other computing devices may include servers at a datacenter customer equipment and comparable devices.

The network communication link may be one example of a communication media. Communication media may be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. A modulated data signal may be a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF microwave infrared IR and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

The computing device may be implemented as a part of a general purpose or specialized server mainframe or similar computer that includes any of the above functions. The computing device may also be implemented as a personal computer including both laptop computer and non laptop computer configurations.

Example embodiments may also include methods for preventing network tomography in software defined datacenter networks. These methods can be implemented in any number of ways including the structures described herein. One such way may be by machine operations of devices of the type described in the present disclosure. Another optional way may be for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some of the operations while other operations may be performed by machines. These human operators need not be collocated with each other but each can be with a machine that performs a portion of the program. In other examples the human interaction can be automated such as by pre selected criteria that may be machine automated.

Example methods may include one or more operations functions or actions as illustrated by one or more of blocks and or and may in some embodiments be performed by a computing device such as the computing device in . The operations described in the blocks may also be stored as computer executable instructions in a computer readable medium such as a computer readable medium of a computing device .

An example process for reactive loop sensing in multi datacenter deployments may begin with block RECEIVE METRICS FROM A MULTI DATACENTER DEPLOYMENT where metrics associated with the datacenters that implement a deployment e.g. the datacenter A and the datacenter B may be received from the datacenters and or the deployment at a model feedback module e.g. the feedback module as described above in relation to . As mentioned these metrics may be associated with physical and or virtual machines and may include indications of load performance speed and or power consumption.

In some embodiments block may be followed by optional block USE THE RECEIVED METRICS TO REFINE THE MULTI DATACENTER DEPLOYMENT MODEL where the feedback module may use the metrics received in block to refine a model e.g. the deployment model of the deployment. In some embodiments as described above the feedback module may compare the metrics received from the deployment with model metrics generated from the deployment model. The feedback module may then use the comparison results to adjust the model e.g. the gains G and or the interaction terms K to more closely reflect the actual deployment.

Block or optional block if present may be followed by block PERFORM STABILITY ANALYSIS OF THE MULTI DATACENTER DEPLOYMENT USING THE RECEIVED METRICS where a stability analysis module e.g. the stability analysis module and or an oscillation analysis module e.g. the oscillation analysis module may analyze the received metrics and or model parameters to determine one or more stability parameters associated with the deployment as described above.

Finally block may be followed by block ADJUST THE MULTI DATACENTER DEPLOYMENT AND OR PROVIDE ALERTS BASED ON THE RESULTS OF THE STABILITY ANALYSIS where an alert adjustment module e.g. the alert adjustment module may be configured to provide alerts and or adjust the deployment based on the stability parameter s determined in block as described above.

In some examples as shown in the computer program product may include a signal bearing medium that may also include one or more machine readable instructions that when executed by for example a processor may provide the functionality described herein. Thus for example referring to the processor in the scale out service may undertake one or more of the tasks shown in in response to the instructions conveyed to the processor by the signal bearing medium to perform actions associated with reactive loop sensing in multi datacenter deployments as described herein. Some of those instructions may include for example receiving metrics from a multi datacenter deployment using the received metrics to refine the multi datacenter deployment model performing stability analysis of the multi datacenter deployment using the received metrics and or model parameters and or adjusting the multi datacenter deployment and or providing alerts based on the results of the stability analysis according to some embodiments described herein.

In some implementations the signal bearing medium depicted in may encompass a computer readable medium such as but not limited to a hard disk drive a solid state drive a Compact Disc CD a Digital Versatile Disk DVD a digital tape memory etc. In some implementations the signal bearing medium may encompass a recordable medium such as but not limited to memory read write R W CDs R W DVDs etc. In some implementations the signal bearing medium may encompass a communications medium such as but not limited to a digital and or an analog communication medium e.g. a fiber optic cable a waveguide a wired communications link a wireless communication link etc. . Thus for example the computer program product may be conveyed to one or more modules of the processor by an RF signal bearing medium where the signal bearing medium is conveyed by the wireless communications medium e.g. a wireless communications medium conforming with the IEEE 802.11 standard .

According to some examples a method for stabilizing feedback loops in a multi entity deployment may include receiving a first metric from a first entity executing a first portion of a deployment receiving a second metric from a second entity executing a second portion of the deployment determining a stability parameter of the deployment associated with an interaction between the first entity and the second entity based on the first metric and the second entity and providing an alert and or adjusting the deployment based on the stability parameter.

According to some embodiments the first entity may be a datacenter an application executing at a datacenter or a service executing at a datacenter. The method may further include generating a synthetic generalized model of the deployment using the model to determine a first model metric corresponding to the first metric using the model to determine a second model metric corresponding to the second metric comparing the first model metric with the first metric and the second model metric with the second metric updating the model based on the comparison and determining the stability parameter based on the model. The synthetic generalized model may include a transfer vector representing the interaction between the first entity and the second entity. The method may further include implementing a Kalman filter with the synthetic generalized model and or including a generalized tree model and or a generalized mesh model in the synthetic generalized model.

According to other embodiments the method may further include determining the stability parameter based on a Routh Hurwitz stability criterion a Nyquist stability criterion and or a root locus analysis. The stability parameter may include an oscillation frequency and or an oscillation amplitude of a deployment parameter and the method may further include comparing the stability parameter to a predefined threshold. The deployment parameter may include a load on the first entity a load on the second entity a performance of the first entity and or a performance of the second entity. The method may further include determining the stability parameter based on a Fourier extraction.

According to further embodiments the method may further include adjusting the deployment based on the stability parameter by adjusting a time period for automation feedback a magnitude for automation feedback a timing dithering for automation feedback a load distribution for the first entity and the second entity an amount of work to be sent to the first entity and or an amount of work to be sent to the second entity. The method may further include offering an application programming interface API for determining whether another automation feedback loops conflicts with the deployment.

According to other examples a virtual machine manager VMM configured to stabilize feedback loops in a multi entity deployment may include a stability module and a processing module. The stability module may be configured to receive a first metric corresponding to a first portion of a deployment being executed by a first entity receive a second metric corresponding to a second portion of the deployment being executed by a second entity and determine a stability parameter of the deployment associated with an interaction between the first entity and the second entity based on the first metric and the second metric. The processing module may be configured to provide an alert and or adjust the deployment based on the stability parameter.

According to some embodiments the first entity may be a datacenter an application executing at a datacenter or a service executing at a datacenter. The processing module may be further configured to generate a synthetic generalized model of the deployment and the stability analysis module may be further configured to use the model to determine a first model metric corresponding to the first metric use the model to determine a second model metric corresponding to the second metric compare the first model metric with the first metric and the second model metric with the second metric and determine the stability parameter based on the model. The processing module may be further configured to update the model based on the comparison. The synthetic generalized model may include a transfer vector representing the interaction between the first entity and the second entity be used to implement a Kalman filter and or include a generalized tree model and or a generalized mesh model.

According to other embodiments the stability analysis module may be further configured to determine the stability parameter based on a Routh Hurwitz stability criterion a Nyquist stability criterion and or a root locus analysis. The stability parameter may include an oscillation frequency and or an oscillation amplitude of a deployment parameter and the method may further include comparing the stability parameter to a predefined threshold. The deployment parameter may include a load on the first entity a load on the second entity a performance of the first entity and or a performance of the second entity. The stability analysis module may be further configured to determine the stability parameter based on a Fourier extraction.

According to further embodiments the processing module may be further configured to adjust the deployment based on the stability parameter by adjusting a time period for automation feedback a magnitude for automation feedback a timing dithering for automation feedback a load distribution for the first entity and the second entity an amount of work to be sent to the first entity and or an amount of work to be sent to the second entity. The processing module may be further configured to offer an application programming interface API for determining whether another automation feedback loops conflicts with the deployment.

According to further examples a cloud based datacenter configured to stabilize feedback loops in a multi entity deployment may include at least one virtual machine VM operable to be executed on one or more physical machines and a datacenter controller. The datacenter controller may be configured to receive a first metric from a first portion of a deployment executing on the VM receive a second metric from another entity executing a second portion of the deployment determine a stability parameter of the deployment associated with an interaction between the VM and the other entity based on the first metric and the second metric and provide an alert and or adjust the deployment based on the stability parameter.

According to some embodiments the other entity may be another datacenter an application executing at another datacenter or a service executing at another datacenter. The datacenter controller may be further configured to generate a synthetic generalized model of the deployment use the model to determine a first model metric corresponding to the first metric use the model to determine a second model metric corresponding to the second metric compare the first model metric with the first metric and the second model metric with the second metric update the model based on the comparison and determine the stability parameter based on the model. The synthetic generalized model may include a transfer vector representing the interaction between the VM and the other entity be used to implement a Kalman filter and or include a generalized tree model and or a generalized mesh model.

According to other embodiments the datacenter controller may be further configured to determine the stability parameter based on a Routh Hurwitz stability criterion a Nyquist stability criterion and or a root locus analysis. The stability parameter may include an oscillation frequency and or an oscillation amplitude of a deployment parameter and the datacenter controller may be further configured to compare the stability parameter to a predefined threshold. The deployment parameter may include a load on the VM a load on the other entity a performance of the VM and or a performance of the other entity. The stability analysis module may be further configured to determine the stability parameter based on a Fourier extraction.

According to further embodiments the datacenter controller may be further configured to adjust the deployment based on the stability parameter by adjusting a time period for automation feedback a magnitude for automation feedback a timing dithering for automation feedback a load distribution for the VM and the other entity an amount of work to be sent to the VM and or an amount of work to be sent to the other entity. The datacenter controller may be further configured to offer an application programming interface API for determining whether another automation feedback loops conflicts with the deployment.

According to yet further examples a computer readable storage medium may store instructions which when executed on one or more computing devices execute a method for stabilizing feedback loops in a multi entity deployment. The method may include receiving a first metric from a first entity executing a first portion of a deployment receiving a second metric from a second entity executing a second portion of the deployment determining a stability parameter of the deployment associated with an interaction between the first entity and the second entity and providing an alert and or adjusting the deployment based on the stability parameter.

According to some embodiments the first entity may be a datacenter an application executing at a datacenter or a service executing at a datacenter. The method may further include generating a synthetic generalized model of the deployment using the model to determine a first model metric corresponding to the first metric using the model to determine a second model metric corresponding to the second metric comparing the first model metric with the first metric and the second model metric with the second metric updating the model based on the comparison and determining the stability parameter based on the model. The synthetic generalized model may include a transfer vector representing the interaction between the first entity and the second entity. The method may further include implementing a Kalman filter with the synthetic generalized model and or including a generalized tree model and or a generalized mesh model in the synthetic generalized model.

According to other embodiments the method may further include determining the stability parameter based on a Routh Hurwitz stability criterion a Nyquist stability criterion and or a root locus analysis. The stability parameter may include an oscillation frequency and or an oscillation amplitude of a deployment parameter and the method may further include comparing the stability parameter to a predefined threshold. The deployment parameter may include a load on the first entity a load on the second entity a performance of the first entity and or a performance of the second entity. The method may further include determining the stability parameter based on a Fourier extraction.

According to further embodiments the method may further include adjusting the deployment based on the stability parameter by adjusting a time period for automation feedback a magnitude for automation feedback a timing dithering for automation feedback a load distribution for the first entity and the second entity an amount of work to be sent to the first entity and or an amount of work to be sent to the second entity. The method may further include offering an application programming interface API for determining whether another automation feedback loops conflicts with the deployment.

There is little distinction left between hardware and software implementations of aspects of systems the use of hardware or software is generally but not always in that in certain contexts the choice between hardware and software may become significant a design choice representing cost vs. efficiency tradeoffs. There are various vehicles by which processes and or systems and or other technologies described herein may be effected e.g. hardware software and or firmware and that the preferred vehicle will vary with the context in which the processes and or systems and or other technologies are deployed. For example if an implementer determines that speed and accuracy are paramount the implementer may opt for a mainly hardware and or firmware vehicle if flexibility is paramount the implementer may opt for a mainly software implementation or yet again alternatively the implementer may opt for some combination of hardware software and or firmware.

The foregoing detailed description has set forth various embodiments of the devices and or processes via the use of block diagrams flowcharts and or examples. Insofar as such block diagrams flowcharts and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams flowcharts or examples may be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof. In one embodiment several portions of the subject matter described herein may be implemented via Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs digital signal processors DSPs or other integrated formats. However those skilled in the art will recognize that some aspects of the embodiments disclosed herein in whole or in part may be equivalently implemented in integrated circuits as one or more computer programs executing on one or more computers e.g. as one or more programs executing on one or more computer systems as one or more programs executing on one or more processors e.g. as one or more programs executing on one or more microprocessors as firmware or as virtually any combination thereof and that designing the circuitry and or writing the code for the software and or firmware would be well within the skill of one of skill in the art in light of this disclosure.

The present disclosure is not to be limited in terms of the particular embodiments described in this application which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its spirit and scope as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure in addition to those enumerated herein will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims. The present disclosure is to be limited only by the terms of the appended claims along with the full scope of equivalents to which such claims are entitled. It is to be understood that this disclosure is not limited to particular methods reagents compounds compositions or biological systems which can of course vary. It is also to be understood that the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting.

In addition those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the subject matter described herein applies regardless of the particular type of signal bearing medium used to actually carry out the distribution. Examples of a signal bearing medium include but are not limited to the following a recordable type medium such as a floppy disk a hard disk drive a Compact Disc CD a Digital Versatile Disk DVD a digital tape a computer memory a solid state drive etc. and a transmission type medium such as a digital and or an analog communication medium e.g. a fiber optic cable a waveguide a wired communications link a wireless communication link etc. .

Those skilled in the art will recognize that it is common within the art to describe devices and or processes in the fashion set forth herein and thereafter use engineering practices to integrate such described devices and or processes into data processing systems. That is at least a portion of the devices and or processes described herein may be integrated into a data processing system via a reasonable amount of experimentation. Those having skill in the art will recognize that a data processing system may include one or more of a system unit housing a video display device a memory such as volatile and non volatile memory processors such as microprocessors and digital signal processors computational entities such as operating systems drivers graphical user interfaces and applications programs one or more interaction devices such as a touch pad or screen and or control systems including feedback loops and control motors e.g. feedback for sensing position and or velocity of gantry systems control motors for moving and or adjusting components and or quantities .

A data processing system may be implemented utilizing any suitable commercially available components such as those found in data computing communication and or network computing communication systems. The herein described subject matter sometimes illustrates different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely exemplary and that in fact many other architectures may be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality may be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermediate components. Likewise any two components so associated may also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality and any two components capable of being so associated may also be viewed as being operably couplable to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically connectable and or physically interacting components and or wirelessly interactable and or wirelessly interacting components and or logically interacting and or logically interactable components.

With respect to the use of substantially any plural and or singular terms herein those having skill in the art can translate from the plural to the singular and or from the singular to the plural as is appropriate to the context and or application. The various singular plural permutations may be expressly set forth herein for sake of clarity.

It will be understood by those within the art that in general terms used herein and especially in the appended claims e.g. bodies of the appended claims are generally intended as open terms e.g. the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to embodiments containing only one such recitation even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an e.g. a and or an should be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations. In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should be interpreted to mean at least the recited number e.g. the bare recitation of two recitations without other modifiers means at least two recitations or two or more recitations .

Furthermore in those instances where a convention analogous to at least one of A B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . It will be further understood by those within the art that virtually any disjunctive word and or phrase presenting two or more alternative terms whether in the description claims or drawings should be understood to contemplate the possibilities of including one of the terms either of the terms or both terms. For example the phrase A or B will be understood to include the possibilities of A or B or A and B. 

As will be understood by one skilled in the art for any and all purposes such as in terms of providing a written description all ranges disclosed herein also encompass any and all possible subranges and combinations of subranges thereof. Any listed range can be easily recognized as sufficiently describing and enabling the same range being broken down into at least equal halves thirds quarters fifths tenths etc. As a non limiting example each range discussed herein can be readily broken down into a lower third middle third and upper third etc. As will also be understood by one skilled in the art all language such as up to at least greater than less than and the like include the number recited and refer to ranges which can be subsequently broken down into subranges as discussed above. Finally as will be understood by one skilled in the art a range includes each individual member. Thus for example a group having 1 3 cells refers to groups having 1 2 or 3 cells. Similarly a group having 1 5 cells refers to groups having 1 2 3 4 or 5 cells and so forth.

While various aspects and embodiments have been disclosed herein other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration and are not intended to be limiting with the true scope and spirit being indicated by the following claims.

