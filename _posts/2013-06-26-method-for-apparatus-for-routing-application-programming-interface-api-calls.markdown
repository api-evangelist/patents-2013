---

title: Method for apparatus for routing application programming interface (API) calls
abstract: A method and apparatus for routing Application Programming Interface (API) calls from a partner entity to a telephony service provider (TSP) network are provided herein. In some embodiments, a method for routing API calls may include receiving a first message including an API call and a partner API key used to authenticate the partner entity on the TSP network to access a partner API layer disposed on the TSP network, extracting the partner API key from the first message, performing an authentication process to authenticate an identity of the partner entity using at least the extracted partner API key, and routing the first message based on results of the authentication process. In some embodiments, the first message is routed to the partner API layer disposed on the TSP network when the identity of the partner entity is authenticated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09325699&OS=09325699&RS=09325699
owner: Vonage America Inc.
number: 09325699
owner_city: Holmdel
owner_country: US
publication_date: 20130626
---
This application claims benefit of U.S. provisional patent application Ser. No. 61 791 285 filed Mar. 15 2013 which is herein incorporated by reference.

Embodiments of the present invention generally relate to a scalable secure and reliable partner interface system for establishing and authenticating third party business service providers and receiving and routing API calls to and from a telephony service provider s network.

Telephony service providers TSP may partner with external service providers to provide telephony services to each other s customers. In some situations service providers may sign up customers for telephony service but may not possess the capability or capacity to handle certain types or volumes of service. The service provider may partner with another TSP to provide those telephony services or other types of services. In other situations a TSP may partner with regional business partners to sign up customers on the TSP s behalf.

To facilitate the above mentioned partnership as well as applications of third party business service providers a scalable secure and reliable infrastructure and interface to the TSP network is needed. Accordingly there exists a need in the art for a method and apparatus to support provisioning of accounts devices services and features in the TSP network.

A method and apparatus for routing Application Programming Interface API calls from a partner entity to a telephony service provider TSP network are provided herein. In some embodiments a method for routing API calls may include receiving a first message including an API call and a partner API key used to authenticate the partner entity on the TSP network to access a partner API layer disposed on the TSP network extracting the partner API key from the first message performing an authentication process to authenticate an identity of the partner entity using at least the extracted partner API key and routing the first message based on results of the authentication process. In some embodiments the first message is routed to the partner API layer disposed on the TSP network when the identity of the partner entity is authenticated.

In some embodiments an apparatus for routing API calls from a partner entity to a TSP network includes at least one processor at least one input device and at least one storage device storing processor executable instructions which when executed by the at least one processor performs a method including receiving a first message including an API call and a partner API key used to authenticate the partner entity on the TSP network to access a partner API layer disposed on the TSP network extracting the partner API key from the first message performing an authentication process to authenticate an identity of the partner entity using at least the extracted partner API key and routing the first message based on results of the authentication process.

In some embodiments a non transient computer readable medium for storing computer instructions that when executed by at least one processor causes the at least one processor to perform a method for routing API calls may include receiving a first message including an API call and a partner API key used to authenticate the partner entity on the TSP network to access a partner API layer disposed on the TSP network extracting the partner API key from the first message performing an authentication process to authenticate an identity of the partner entity using at least the extracted partner API key and routing the first message based on results of the authentication process.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures. The figures are not drawn to scale and may be simplified for clarity. It is contemplated that elements and features of one embodiment may be beneficially incorporated in other embodiments without further recitation.

Embodiments of the present invention generally relate to a scalable secure and reliable partner interface system for establishing partners and provisioning telephony customers in a telephony service provider s network. Some embodiments of the present invention include a partner API that may be accessed by a partner service provider referred to herein as the partner to provide a set of services and or modules that support provisioning of accounts devices services and features using the TSP network. For example a TSP may agree with a partner to provide Voice over Internet Protocol VOIP network services to customers that sign up for service through the partner using the TSP s VOIP network. In other examples other types of services providers may agree to provide services to customers signed by external partners. Although described herein in terms of telephony service providers the TSPs may provide other types of services that embodiments of the present invention may be used with for example Web based services and the like.

When a TSP establishes a service relationship with a partner on whose behalf the TSP will provide telephony services to customers that the partner signs up the partner first needs to be setup to securely access the TSP network via an API and related systems. Furthermore when a partner signs up a customer for telephony service that is to be provided by the TSP certain information also described as entities herein need to be managed in the TSP network including but not limited to partner information customer account information service type information device information and the like.

Partner information may be associated with a specific partner in the system. Each partner has a unique partner ID and associated security keys. When a partner is added to the system the set of applicable features and default feature values can be specified for the partner.

Customer account information may be contained in information objects representing customers in the TSP network. Each customer may be given a globally unique network account number within the TSP system. In some embodiments this network account information may not be the same as the partner s Customer Relationship management CRM information regarding the customer or billing account information which may be housed in different partner Business Support Systems BSS .

Service type information may be contained in information objects representing the types of telephony service the TSP can provide for example VOIP short message service SMS and the like. Each service type may be represented by a globally unique service Identifier. A service type may include a number of other attributes related to the type of service represented. The service identifier identifies an instance of a service type that is associated with a partner account. For example partner account 1001 may have two service types VoIP and SMS with service identifiers 8001 and 8002 respectively. Similarly partner account 1002 may have two service types VoIP and SMS with service identifiers 8003 and 8004 respectively.

Device information may include information about the hardware devices used if any in providing the service that the customer signed up for. For example if a customer signs up for VOIP service the device information may include information regarding a VOIP Telephony adapter on which service is provided. In some embodiments devices are identified by their globally unique MAC address. It is noted that not all service types require hardware devices.

For the above information objects there are various operations that may be performed on each object. Such operations may include adding a new entity in to the system and associating them with other entities changing the settings for an existing entity change the status of an entity and retrieving the settings for a given entity.

To create access and manage the aforementioned information exemplary embodiments include a security proxy layer that provides scalable secure and reliable access to a partner API layer and is described below.

Some portions of the detailed description which follow are presented in terms of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

In some embodiments the partner BSS may be disposed on the partner s network . A customer may subscribe for telephony service or login to an existing account using the partner BSS . In some embodiments the partner API layer may be disposed on the TSP network . The telephony service that is to be provided to the customer may be provided by the TSP network . In addition a partner service agent may subscribe for a new account on behalf of a customer or may access existing customers account information e.g. to add modify remove features etc. through the partner BSS.

In some embodiments the secure proxy layer will perform key management for partners and will authenticate authorize all requests from the partner BSS before authorizing allowing access to the partner API layer . The secure proxy layer can also perform other API management tasks like data throttling of API calls if required. In some embodiments the throttling rate of API calls can be individually configured on a per partner level or on particular sets of partners grouped together based on one or more common features between the partners e.g. partners for a specific country size of partner and the like . In some embodiments the secure proxy layer may be a cloud based security proxy into the partner API layer . In other embodiments the secure proxy layer may be located within the TSP network .

As new partners are added there will be an onboarding process required to setup the new partner via the secure proxy layer . This will involve generating security keys for communication between partner BSS and the TSP network and between the TSP network and partner BSS . In some embodiments the partner will need to provide list of servers devices e.g. a whitelist of approved devices identified by a MAC address or an Internet Protocol IP address that will be sending requests to partner API layer via the secure proxy layer . Similarly for embodiments where is a cloud based service the secure proxy layer may be required to provide a whitelist of servers to the partner API layer that can send authenticated requests to partner API layer .

With the secure proxy layer as a proxy between the partner BSS and the partner API layer on the TSP network the partner BSS will be able to access API services such as adding modifying network accounts services devices and features. This may be done by making predefined calls to API modules disposed in partner API layer . In addition the partner API layer will also be able to access customer data stored in partner BSS by also making predefined API module calls e.g. call backs . In some embodiments the secure proxy layer will authenticate the call backs using a separate API key before routing the requests to the partner BSS . The secure proxy layer may be required to provide a whitelist of servers to the BSS that that can send authenticated requests to partner BSS . All API module calls from the partner BSS that are made directly to the partner API layer will be redirected through the secure proxy layer . In some embodiments the redirected calls may be delivered over a Hypertext Transfer Protocol Secure HTTPS connection.

For each of the TSP s partners established at least one API key will be generated by the secure proxy layer . In some embodiments the secure proxy layer may include an API management dashboard to create establish a partner and create said keys. In some embodiments a first API key is used by partner BSS to access the partner API layer and a second API key is used by the partner API layer to call back the partner BSS . These bidirectional communications are secured by the API keys created by the secure proxy layer . In some embodiments the API keys together with a partner ID may be embedded into a Simple Object Access Protocol SOAP envelope body and delivered in service request messages. When the secure proxy layer receives messages from partner BSS or the partner API layer the secure proxy layer will automatically extract the API key values from the SOAP message body and validate it against the key value generated for the partner. In some embodiments only API key matched messages will pass through the secure proxy layer to appropriate endpoints. In some embodiments non matching messages will be discarded with a response message Access Denied or the equivalent.

As shown in the secure proxy layer may include one or more Central Processing Units CPU support circuits and memory . The CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage. The various support circuits facilitate the operation of the CPU and include one or more clock circuits power supplies cache input output circuits and the like. The memory comprises at least one of Read Only Memory ROM Random Access Memory RAM disk drive storage optical storage removable storage and or the like. In some embodiments the memory comprises an operating system partner setup module API key authentication module approved server list throttling module and API call routing module .

The operating system OS generally manages various computer resources e.g. network resources file processors and or the like . The operating system is configured to execute operations on one or more hardware and or software modules such as Network Interface Cards NICs hard disks virtualization layers firewalls and or the like. Examples of the operating system may include but are not limited to LINUX MAC OSX BSD UNIX MICROSOFT WINDOWS IOS ANDROID and the like.

The partner setup module creates the one or more API keys as described above when establishing a new partner with the TSP. The API key authentication module may be used to authenticate the API keys received. After the API keys are matched authenticated the API call routing module may route the API calls to their appropriate destination.

In some embodiments after a partner is authenticated additional authorization may be performed for each API call made by the partner. Specifically when a partner is authenticated and identified the partner may only be authorized to use a subset of the total API calls available on the partner API layer . The API features and functions that are authorized to be used by that partner are the only ones that will be acted upon by the partner API layer . If a partner requests a feature function that it is not authorized for use the partner API layer will respond with an error and will not route the message to the relevant downstream internal network components. In some embodiments the partner API layer may perform the additional partner API call authorization described above. The API call authorization information is stored in a database table. The information is checked for each API call. In some embodiments the API call authorization database table is set up when provisioning a partner. The table can be modified at any time to change permissions. Since these permissions are typically governed by business agreements the changes are usually few and far in between and thus in some embodiments the changes may be made manually. In other embodiments the API call authorization database table may be updated automatically.

Before routing the API calls to their appropriate destination the secure proxy layer may authenticate the identity of the partner BSS servers devices against an approved server list . If the originating server of the API call to the partner API layer from the partner BSS is not on the list the API call may return an ACCESS DENIED error message or other error message including the reason for the denial of access.

In some embodiments if the volume of API calls becomes a problem for the partner API layer a throttling module may be used to throttle the number of API calls to or from the partner API layer .

In some embodiments the partner API layer may perform functions that provide performance data and business intelligence associated with use of the partner API layer . Specifically in some embodiments the partner API layer may gather timing data for each API call. Such timing data may provide insight regarding performance issues and bottlenecks in the API system. In some embodiments the secure proxy layer may gather counts and information regarding the different API calls made by each partner both authorized and unauthorized calls . Such API call information may provide business intelligence with respect to new customer signups or terminations API calls features most often used modified and the like.

A method in accordance with the subject invention is illustrated in which depicts a flowchart having a series of steps for establishing and authenticating partners in a TSP s network. In detail the method starts at and proceeds to where a request to establish a new partner is received. In some embodiments the request is received by the secure proxy layer from the partner BSS . The request may be an HTTP request in the form of SOAP or Representational State Transfer REST message or embedded in the body of the SOAP or REST message or similar type of message. In some embodiments the request may be sent over a Hypertext Transfer Protocol Secure HTTPS connection or over a dedicated Virtual Private Network VPN connection between the partner BSS and the secure proxy layer .

At the secure proxy layer may generate a first API key used to provide the partner access to a partner API layer . In some embodiments the API key may be an encrypted key or secure token generated which is used by the TSP to authenticate the partner. At the generated partner API key is sent to the partner. The API key may be in the form of a SOAP or a REST message or embedded in the body of the SOAP or REST message or similar type of message. In some embodiments the request may be sent over a HTTPS connection or over a dedicated VPN connection between the partner BSS and the secure proxy layer . In response to the request to establish a new partner the secure proxy layer and or modules devices disposed on the TSP network will create partner information objects that include a unique partner ID associated with the generated API keys for the partner. In addition when establishing a new partner on the TSP network the partner may be requested to provide list of servers devices i.e. a whitelist of approved devices identified by a MAC address for example that will be sending generating API calls to partner API layer via the secure proxy layer . Additional information regarding the partner may also be stored in the partner information objects such as partner contact information customer billing rates authorized API calls and the like. The method ends at

After the partner has been established the partner can set up i.e. provision and manage telephony customers on the TSP network by making API calls to the partner API layer via the secure proxy layer .

For example depicts a flowchart of a method for receiving and routing API calls according to one or more embodiments of the invention. In detail the method starts at and proceeds to where the secure proxy layer may receive one or more API calls from the partner including the generated API key. In some embodiments the API keys together with a partner ID may be embedded into a SOAP envelope body and delivered in service request messages as described above. The API calls received at may include requests to establishing new customers and managing and provisioning telephony services for customers on the TSP s network. At after the secure proxy layer receives messages from partner BSS or the partner API layer the secure proxy layer will perform an authentication process to authenticate the identity of the partner entity. In some embodiments the authentication process may automatically extract the API key value s from the message body and validate it against the key value s generated for the partner to authenticate the partner. In some embodiments validating the API key values generated may include performing a direct comparison of API key value pairs. In other embodiments information derived using the API keys may be used to authenticate the partner entity e.g. such as hash values and the like . At if the partner is authenticated the API key matched messages will pass through the secure proxy layer and be routed by the secure proxy layer to the partner API layer at . The partner API layer will then direct the messages to appropriate endpoints on the TSP network. As noted above the API call may be in the form of a SOAP or REST message. In some embodiments the secure proxy layer will transparently pass the message after authentication to the partner API layer which will then extract relevant fields and construct a new message s and send it to downstream components. If the partner is not authenticated at non matching messages may be discarded with a response message being sent to the partner denying access to the partner API at . The method ends at .

The embodiments of the present invention may be embodied as methods apparatus electronic devices and or computer program products. Accordingly the embodiments of the present invention may be embodied in hardware and or in software including firmware resident software micro code and the like which may be generally referred to herein as a circuit or module . Furthermore the present invention may take the form of a computer program product on a computer usable or computer readable storage medium having computer usable or computer readable program code embodied in the medium for use by or in connection with an instruction execution system. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. These computer program instructions may also be stored in a computer usable or computer readable memory that may direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer usable or computer readable memory produce an article of manufacture including instructions that implement the function specified in the flowchart and or block diagram block or blocks.

The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device. More specific examples a non exhaustive list of the computer readable medium include the following hard disks optical storage devices magnetic storage devices an electrical connection having one or more wires a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber and a compact disc read only memory CD ROM .

Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java Smalltalk or C and the like. However the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language and or any other lower level assembler languages. It will be further appreciated that the functionality of any or all of the program modules may also be implemented using discrete hardware components one or more Application Specific Integrated Circuits ASICs or programmed Digital Signal Processors or microcontrollers.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present disclosure and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.

Various embodiments of method and apparatus for routing calls based upon internal network conditions and or external carrier network information as described herein may be executed on one or more computer systems which may interact with various other devices. One such computer system is computer system illustrated by which may in various embodiments implement any of the elements or functionality illustrated in . In various embodiments computer system may be configured to implement methods described above. The computer system may be used to implement any other system device element functionality or method of the above described embodiments. In the illustrated embodiments computer system may be configured to implement method as processor executable executable program instructions e.g. program instructions executable by processor s in various embodiments.

In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard and display s . In various embodiments any of the components may be utilized by the system to receive user input described above. In various embodiments a user interface may be generated and displayed on display . In some cases it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions or instances of various embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements. In another example multiple nodes may implement computer system in a distributed manner.

In different embodiments computer system may be any of various types of devices including but not limited to personal computer systems mainframe computer systems handheld computers workstations network computers application servers storage devices a peripheral devices such as a switch modem router or in general any type of computing or electronic device.

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs . In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM non volatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing any of the elements of the embodiments described above may be stored within system memory . In other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from system memory or computer system .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices . In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network e.g. network such as one or more external systems or between nodes of computer system . In various embodiments network may include one or more networks including but not limited to Local Area Networks LANs e.g. an Ethernet or corporate network Wide Area Networks WANs e.g. the Internet wireless data networks some other electronic data network or some combination thereof. In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

In some embodiments the illustrated computer system may implement any of the methods described above such as the methods illustrated by the flowchart of . In other embodiments different elements and data may be included.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of embodiments. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions of various embodiments including computers network devices Internet appliances PDAs wireless phones pagers and the like. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium or via a communication medium. In general a computer accessible medium may include a storage medium or memory medium such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM and the like ROM and the like.

The methods described herein may be implemented in software hardware or a combination thereof in different embodiments. In addition the order of methods may be changed and various elements may be added reordered combined omitted or otherwise modified. All examples described herein are presented in a non limiting manner. Various modifications and changes may be made as would be obvious to a person skilled in the art having benefit of this disclosure. Realizations in accordance with embodiments have been described in the context of particular embodiments. These embodiments are meant to be illustrative and not limiting. Many variations modifications additions and improvements are possible. Accordingly plural instances may be provided for components described herein as a single instance. Boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally structures and functionality presented as discrete components in the example configurations may be implemented as a combined structure or component. These and other variations modifications additions and improvements may fall within the scope of embodiments as defined in the claims that follow

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

