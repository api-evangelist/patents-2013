---

title: Backup systems and methods for a virtual computing environment
abstract: Improved backup and storage operations are disclosed for virtual computing environments using a backup proxy server to perform storage operations on one or more virtual machine disks. The proxy server can include a module that intercepts application programming interface (API) calls, for writing backup data to a first location, prior to the data arriving on the proxy disk. During the intercept process, the data can be compressed in memory pages of the proxy server and redirected to an alternative backup disk location. The proxy server can also include a differential engine that identifies changes to the virtual machine disk at the block level since the last full backup. The differential engine can advantageously leverage memory pages of the proxy server to compare differences between signatures of blocks of the last full backup with signatures of new blocks. Subsequently, only blocks with non-matching signatures are processed for backup.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311318&OS=09311318&RS=09311318
owner: Dell Software Inc.
number: 09311318
owner_city: Aliso Viejo
owner_country: US
publication_date: 20130211
---
This application is a continuation of U.S. patent application Ser. No. 13 244 187 filed Sep. 23 2011. U.S. patent application Ser. No. 13 244 187 is a continuation of U.S. patent application Ser. No. 12 502 052 filed Jul. 13 2009 which claims the benefit of priority under 35 U.S.C. 119 e of U.S. Provisional Patent Application No. 61 080 531 filed Jul. 14 2008 and of U.S. Provisional Patent Application No. 61 085 745 filed Aug. 1 2008. Each of the foregoing provisional and nonprovisional applications is hereby incorporated by reference herein in its entirety to be considered part of this specification.

Embodiments of the invention relate to performing storage operations in a virtual environment and in particular to backing up data of one or more virtual machines.

Many companies take advantage of virtualization solutions to consolidate several specialized physical servers and workstations into fewer servers running virtual machines. Each virtual machine can be configured with its own set of virtual hardware e.g. processor memory ports and the like such that specialized services that each of the previous physical machines performed can be run in their native operating system. In particular a virtualization layer or hypervisor allocates the computing resources of one or more host servers to one or more virtual machines and further provides for isolation between such virtual machines. In such a manner the virtual machine is a representation of a physical machine by software.

Associated with each virtual machine is at least one virtual machine disk that is located in one or more files on a datastore. The virtual machine disk can be copied moved archived or the like. For instance certain vendors offer solutions that operate from inside the guest operating system of a virtual machine to back up the virtual machine disk s . This approach however has significant drawbacks in that such backup copies being performed from within the guest operating system cannot capture a backup of the entire virtual machine. Moreover other backup solutions require a full copy of the virtual machine disk to a backup proxy device each time a backup is to be performed.

Given the aforementioned issues and challenges a need exists for systems and methods that perform backup operations in a virtual computing environment without operating through the server s hosting the virtual machines. Moreover there is a need for data management solutions that back up virtual machine disks without consuming the resources and time required for a full copy of the virtual machine disks to be made to a backup proxy prior to being stored to a final destination on disk.

In view of the foregoing certain systems and methods disclosed herein are directed to improved backup and storage operations for virtual computing environments. In certain embodiments a backup proxy server is utilized to perform LAN free storage operations by directly accessing virtual machine disk data stored on a storage attached network SAN . The backup proxy server can further include an intercept engine executing thereon that intercepts a data stream from the SAN prior to the data stream arriving on the proxy server disk. During the intercept process individual data blocks of the data stream can be optionally compressed in memory pages of the proxy server and redirected to a backup disk location of the administrator s choice without occupying disk space on the proxy server.

As a result of this backup process the final backup image size can be reduced via compression and the overall storage process can be expedited significantly since the need is removed for the proxy server disk to serve as an intermediate location for the backup data prior to the final backup. The backup proxy can further utilize a differential engine to identify block level changes made to the virtual machine disk since the time of the last full backup. The differential engine can advantageously leverage memory pages of the proxy server to compare differences between signatures of blocks of the last full backup with signatures of new blocks to reduce the amount of backup data written to disk.

In certain embodiments a method is disclosed for performing backup of virtual machine data. The method includes initiating a backup process executing on a computing device to access one or more virtual machine disks stored on a datastore the one or more virtual machine disks being comprised of a plurality of data blocks. The method also includes intercepting a plurality of calls made by the backup process to create a backup file in a first destination location that comprises a copy of the one or more virtual machine disks the plurality of calls comprising at least one write call programmed to write a backup copy of each of the plurality of data blocks to the first destination location. For each intercepted write call the method substitutes the intercepted write call with at least a second write call wherein the at least the second write call is further programmed to i transfer the data block associated with the particular intercepted write call to a buffer memory without writing the data block to a disk of the computing device ii compute a signature of the data block and iii compare the computed signature with a predetermined signature. For each data block having a computed signature that differs from the predetermined signature the method compresses and stores the data block to a second destination location different than the first destination location. The method also disregards each data block having a computed signature that matches the predetermined signature.

In certain embodiments a system is disclosed for performing backup of virtual machine data. The system includes a storage device comprising one or more virtual machine disks and an intercept module configured to redirect backup operations of a backup module executing on a computing device and accessing a plurality of data blocks of the one or more virtual machine disks. The intercept module further comprises i a proxy application configured to instruct the backup module to initiate a backup of the one or more virtual machine disks via a plurality of application programming interface API calls to create a backup file in a first destination location wherein the backup file comprises a copy of the one or more virtual machine disks and ii a library module configured to replace select API calls of the plurality of API calls by the backup module with alternative functions to transfer each data block associated with a write call of the select API calls to a buffer memory of the computing device without writing the data block to a disk of the computing device compute a signature of the data block compare the computed signature with a predetermined signature and for each data block having a computed signature that differs from the predetermined signature and storing the data block to a second destination location different from the first destination location.

In certain embodiments a method is disclosed for performing backup of virtual machine data. The method comprises intercepting a plurality of write calls for creating a backup copy of a plurality of data blocks of a virtual machine disk at a first destination location and substituting each intercepted write call with a second write call. The second write call is programmed to i transfer the data block associated with the particular write call to a buffer memory without first writing the data block to disk ii compute a signature of the data block and iii compare the computed signature with a predetermined signature. For each data block having a computed signature that differs from the predetermined signature the method stores the data block to a second destination location different than the first destination location. The method also includes disregarding each data block having a computed signature that matches the predetermined signature.

In certain embodiments a system for performing backup operations on virtual machine data is disclosed. The system includes means for initiating a backup process executing on a computing device to access one or more virtual machine disks stored on a datastore the one or more virtual machine disks comprising a plurality of data blocks and means for intercepting a plurality of calls made by the backup process to create a backup file in a first destination location of a copy of the one or more virtual machine disks the plurality of calls comprising write calls programmed to write a backup copy of each of the plurality of data blocks to the first destination location The intercepting means is further configured to for each intercepted write call substitute the intercepted write call with a second write call wherein the second write call is further programmed to i transfer the data block associated with the particular intercepted write call to a buffer memory without writing the data block to a disk of the computing device ii generate a signature of the data block iii compare the signature with a predetermined signature iv for each data block having a signature that differs from the predetermined signature store the data block to a second destination location and v disregard each data block having a signature that matches the predetermined signature.

For purposes of summarizing the disclosure certain aspects advantages and novel features of the inventions have been described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

Certain systems and methods disclosed herein are directed to improved backup and storage operations for virtual computing environments. In certain embodiments a backup proxy server is utilized to perform LAN free storage operations by directly accessing virtual machine disk data stored on a SAN. The backup proxy server can further include a module that intercepts a data stream from the SAN prior to the data stream arriving on the proxy server disk. During the intercept process the data can be compressed in memory pages of the proxy server and redirected to a backup disk location of the administrator s choice without consuming disk space on the proxy server for temporarily storing an intermediate backup copy. In other embodiments backup systems and methods can perform similar interception and compression techniques over an internet protocol IP network with network attached storage NAS or the like.

Such backup methods can result in a smaller backup image on disk due to compression and can expedite the overall storage process significantly since the need is removed to first write the data to the proxy server disk and then to the backup disk. For example in certain embodiments the backup throughput can be increased up to forty percent 40 or more by avoiding the writing of the backup data to disk prior to performing the actual backup of the data.

In addition the backup proxy can further comprise a differential engine that identifies changes to the virtual machine disk at the block level since the last full backup. The differential engine can advantageously leverage memory pages of the proxy server to compare differences between signatures of blocks of the last full backup with signatures of new blocks. Subsequently only blocks with non matching signatures are processed for backup e.g. a differential backup .

Certain embodiments of the invention advantageously include systems and methods for performing differential backup operations in combination with VMWARE CONSOLIDATED BACKUP VCB offered by VMware Inc. Palo Alto Calif. or other hypervisor snapshot technology in a virtual computing environment.

The features of the inventive systems and methods will now be described with reference to the drawings summarized above. Throughout the drawings reference numbers are re used to indicate correspondence between referenced elements. The drawings associated descriptions and specific implementation are provided to illustrate embodiments of the invention and not to limit the scope of the disclosure.

In addition methods and functions described herein are not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state.

For exemplary purposes certain embodiments of the inventive systems and methods will be described with reference to VMWARE virtual infrastructures. However it will be understood from the disclosure herein that the disclosed systems and methods can be utilized with other virtualization technologies including but not limited to virtual environments using XEN and XENSERVER by Citrix Systems Inc. Fort Lauderdale Fla. ORACLE VM by Oracle Corporation Redwood City Calif. HYPER V by Microsoft Corporation Redmond Wash. VIRTUOZZO by Parallels Inc. Switzerland or the like.

As illustrated the virtual computing environment comprises a plurality of host servers having a plurality of virtual machines that communicate with a datastore via a fiber switch . In particular the host server A hosts virtual machine A and virtual machine B which interact respectively with data stored in virtual machine file system VMFS A and VMFS B . Host server B hosts virtual machine C which interacts with data stored in VMFS C and host server C hosts virtual machine D which interacts with data stored in VMFS D .

In certain embodiments the host servers comprise one or more computing devices configured to host one or more virtual machines executing above a hypervisor layer. In certain embodiments the hypervisor is configured to decouple the physical hardware of the host server from the operating system s of the virtual machine s . For instance one or more of the host servers can comprise an ESX server or other like virtualization platform. Such abstraction allows for example for multiple virtual machines with heterogeneous operating systems and applications to run in isolation on resources of the same physical machine.

In yet other embodiments one or more of the host servers can include a hosted architecture in which the hypervisor runs within a host operating system environment. In such embodiments the hypervisor can rely on the host operating system for device support and or physical resource management. Examples of such hosted hypervisors can include but are not limited to VMWARE WORKSTATION and VMWARE SERVER by VMware Inc. VIRTUAL SERVER by Microsoft Corporation PARALLELS WORKSTATION by Parallels Inc. or the like.

For illustrative purposes the VMFS A further comprises a VM A.VMDK file which includes the virtual hard drive for the virtual machine A and a VM A.VMX file which includes configuration data for the virtual machine A . In certain embodiments most of the .VMDK file s content comprises the data of the virtual machine while a small portion is allotted to overhead of the virtual machine.

In certain embodiments the VM A.VMDK file can be a dynamic virtual disk in which the disk grows as the disk inside the guest operating system of the virtual machine A grows. In yet other embodiments the VM A.VMDK file can comprise a fixed size virtual disk. In certain embodiments of the invention the virtual disk of a single virtual machine can comprise multiple .VMDK files. For instance an administrator or other user can specify a maximum size of each .VMDK file e.g. 2 GB chunks . In such embodiments the number of .VMDK files depends on the size of the virtual disk.

As shown the datastore comprises a SAN or like shared storage network that includes a plurality of VMFSs for storing data for a plurality of virtual machines. In other embodiments the datastore can comprise any type of formatted logical container for holding virtual machine files and that can exist on a physical storage resource including local disks e.g. local small computer system interface SCSI disks of the host server s a disk array an iSCSI disk array NAS arrays network file system NFS combinations of the same or the like.

As shown each of the host servers also communicates with a management server through a network . In certain embodiments management server directs general operation of the host servers and or their associated virtual machines. For example the management server can comprise a VMWARE VirtualCenter management server that provides a centralized management module for the virtual environment such as a VMWARE Infrastructure 3 VI3 environment or the like.

In certain embodiments the network can comprise a local area network LAN . In yet other embodiments the network can comprise one or more of the following communication means internet intranet wide area network WAN public network combinations of the same or the like. In addition connectivity to the network may be through for example remote modem Ethernet token ring fiber distributed datalink interface FDDI asynchronous transfer mode ATM combinations of the same or the like.

The virtual computing environment further comprises a backup proxy usable to backup one or more virtual machine files. In certain embodiments the backup proxy is further capable of restoring backed up virtual machines in the event of a disk failure or the like or if a user desires to revert to a previous version of a particular virtual machine.

In certain embodiments the backup proxy is configured to operate with a backup process such as VMWARE Consolidated Backup VCB to perform storage operations on the virtual machine disks on the datastore . For example the backup proxy can advantageously when used with SAN storage enable offloaded and impact free backups for virtual machines running on an ESX host server. Such an approach allows for the use of virtual machine snapshot technology and SAN based data transfer in combination with file based backup software. Moreover VCB processes allow for the backing up of virtual machine contents from the backup proxy rather than through one or more of the host servers . This approach can further allow for a reduction of the load on the host servers and and allow for allocation of otherwise consumed resources to additional virtual machines.

As shown the backup proxy can advantageously access the datastore through the fiber switch without needing to communicate through the network or any of the host servers . In yet other embodiments the backup proxy can operate in a LAN mode by communicating through the network and at least one virtual machine of the host servers to access data on the datastore .

In certain embodiments the backup proxy further communicates with the management server through the network . For instance the management server can provide the backup proxy with information regarding the infrastructure of the virtual computing environment locations of certain virtual machine disks on the datastore job scheduling load or availability information combinations of the same or the like.

In certain embodiments the backup proxy comprises a WINDOWS based backup server. In yet other embodiments the backup proxy can comprise a LINUX based server an ESX server combinations of the same or the like.

The backup proxy is further illustrated with a plurality of modules and or components executing thereon to perform one or more operations relating to the backing up of data. It will be understood however that this illustration is merely exemplary and that such modules or components can be executed on a plurality of computing devices on one or more virtual machines as stand alone components or the like.

The backup proxy comprises a backup module configured to obtain data from the datastore for backup processing. In certain embodiments the backup module comprises the VCB utility that copies virtual machine disk data from the datastore to the backup proxy and then to an intended backup destination. For instance the backup module can provide a centralized management of agent less backup of virtual machines.

In certain embodiments the backup module works in combination with a third party backup agent that manages the backup schedule. Once instructed to begin a backup the backup module can run a set of pre backup scripts to quiesce the virtual machine disks to take their snapshots e.g. via a VMsnap command . The backup module can then run post thaw scripts to restore the virtual machine s back to normal operation. The backup module can further mount the snapshot s to the backup proxy from which the third party backup agent backs up the files on the mounted snapshot to its backup targets. For example the backup module can utilize a virtual logic unit number VLUN that enables mounting of the virtual machine snapshot on the backup proxy and makes the mounted drive available for backup.

In certain embodiments the backup module can perform various types of backups. For example the backup module can perform image level backups to create a copy of all virtual disks and configuration files associated with a virtual machine. Such image level backups can advantageously be operating system neutral as they involve copying the entire virtual machine disk data. In such embodiments the backup module can mount a snapshot of the virtual machine disk to a local directory of the backup proxy to make the data accessible for being backed up.

In certain embodiments the backup module can perform file level backups that include a copy of individual file s contained within one or more virtual machine disks. Moreover the backups can comprise full backups differential backups and or incremental backups. In such embodiments the backup module can create a snapshot of the virtual machine disk and mount discovered volume s within the snapshot at predefined junction points.

The backup module preferably stages data obtained from the datastore in a memory of the backup proxy for being backed up. In certain embodiments the memory preferably comprises a buffer that serially receives the data in relatively small data blocks. In such embodiments the buffer can have a memory capacity slightly more than the size of an individual data block. For example in certain embodiments the backup data is divided into 256 KB data blocks wherein the memory is slight larger e.g. a number of bytes larger than 256 KB in order to handle each individual data block and additional overhead associated therewith. In other embodiments the data blocks and or memory can be a different size according to the requirements of the backup system. Moreover in certain embodiments the memory can comprise multiple buffers for parallel processing of the data blocks.

An intercept module is configured to intercept data obtained from the datastore by the backup module prior to storage on disk. For instance once the backup module has initiated a snapshot of the virtual machine disk to be backed up the intercept module can intercept the export of data from the snapshot and redirect the data to an alternative destination. During this redirecting the data can be optionally compressed using the memory and or resources of the backup proxy . This redirection process can advantageously eliminate the need for additional disk space on the backup proxy to temporarily house a copy of the backup data before copying the data to the final backup location.

In certain embodiments the intercept module comprises a plugin application installed on the backup proxy that interacts with the backup module . For instance the plugin can comprise a proxy application that initiates one or more components of the backup module responsible for general backup of the virtual machine disk s to a destination folder. The plugin can further comprise a library such as a dynamic link library DLL that is loaded in the address space of the backup module to allow for the interception and or replacement of select application programming interface API calls by the backup module with customized functions of the DLL . For instance in certain embodiments API calls CreateFile WriteFile and CloseHandle are received and replaced with alternative methods for performing the backup functions disclosed in more detail herein.

In certain embodiments the DLL is configured to run a plurality of different backup procedures. For example the DLL can utilize a memory mapped file to set various arguments wherein the name of the memory mapped file or other shared memory is created by the proxy application and or has the process identification ID of the proxy application . Moreover in a DIIMain function of the DLL the DLL reads the memory mapped file and knowing the ID of the parent process i.e. the proxy application utilizes the data in the memory mapped file e.g. command line arguments to configure itself for the backup operations.

Appendix A which is attached hereto to be considered part of this specification provides one example of a code file usable by the intercept module to replace particular API calls with customized functions to create an alternative backup file.

A compression module comprises an engine that compresses the backup data to be stored to disk. In certain embodiments the compression module processes data received from the memory prior to the data being backed up to disk. For instance such compression can occur in the memory pages of the backup proxy . In certain embodiments the compression module can utilize a ZLIB or LZO data compression algorithm. In yet other embodiments the compression module can perform other and or additional types of compression. In yet further embodiments the compression module can further encrypt the data to be backed up.

In certain embodiments the compression module provides a compression ratio range of one through nine to compress the data. This compression module can further erase white space e.g. allocated but not used disk space in an image prior to compressing the data to further reduce the size of the image on disk.

In certain embodiments as the copying and compression is taking place the compressed backup data is streamed e.g. through a pipeline configuration to a backup location. In certain embodiments the backup location can comprise a WINDOWS or LINUX destination or can comprise a particular VMFS or logical unit number LUN .

A differential engine is configured to generate signatures for data blocks to be backed up and to compare signatures of a second set of data blocks to determine like blocks. In certain embodiments the differential engine computes and stores MD4 signatures for 256 KB data blocks in a signature file as discussed in more detail below with respect to . In yet other embodiments the differential engine can compute other types of signatures digital fingerprints or the like.

The differential engine can further store in a map the signature file of one or more virtual machine disk files that have been backed up. For instance the map can store signatures of data blocks in virtual machine disk files that have been part of the last full backup. The differential engine can then later access during a differential backup process the signatures stored in the map to determine if corresponding data blocks have changed since the last full backup.

The backup proxy further includes a user interface for displaying to and or receiving from a user information relating to storage operations of the backup proxy . In certain embodiments the user interface causes the display of one or more windows for obtaining user input and or outputting status information with respect to the virtual environment.

The illustrated backup proxy also includes a scheduler that initiates one or more storage operations such as full or differential backups by the backup proxy . For instance the scheduler can indicate that a differential backup should be performed after a certain number of data modification operations have occurred and or after a predetermined period of time since the last full backup. Moreover in certain embodiments the scheduler can comprise one or more backup policies that dictate when a scheduled differential backup can trigger a full backup. For instance if certain storage thresholds are exceeded by the differential backup e.g. size difference between the full backup and the last differential backup number of days since last full backup a new full backup can be performed.

Although the backup proxy has been described herein with respect to a physical machine in other embodiments of the invention the backup proxy can be executed on one or more virtual machines. Moreover other embodiments of the backup proxy can function without one or more of the components illustrated in . For example in certain embodiments of the invention the backup proxy can function without the scheduler .

When backing up data the backup proxy can store data to a plurality of sources. For instance in certain embodiments the backup proxy outputs backup data to a local storage device such as a locally attached disk drive. In other embodiments the backup proxy can store backed up data on the datastore such as in a new technology file system NTFS .

In yet other embodiments of the virtual computing environment backup tools described herein can be used with other types of storage and or network configurations. For instance the backup proxy may access the virtual machine data over a network connection such as an IP network rather than through a fiber switch. In yet other embodiments backup operations can utilize both a volume shadow copy service VSS to temporarily quiesce data operations on a virtual machine and the VCB utility tool to backup a consistent virtual machine image as described in more detail in U.S. patent application Ser. No. 12 182 364 filed Jul. 30 2008 which is hereby incorporated herein by reference in its entirety and in particular paragraphs 0040 0089 and FIGS. 2 4B.

At Block the proxy application e.g. vcblauncher.exe causes the backup module to begin the process of backing up a virtual disk to a destination folder. For instance the proxy application can initiate the vcbMounter.exe process of the VCB utility which is responsible for creating a snapshot and mounting and or copying virtual machine disks or files.

At Block the intercept module intercepts calls relating to the backing up of virtual machine disk data from the datastore . For instance the intercept module can intercept API calls made by the vcbMounter.exe process to back up the virtual machine disk or file. The intercept module can then selectively replace certain API calls made by vcbMounter.exe with modified functions as discussed in more detail below. For instance the modified functions can be maintained in a detours library e.g. vcbutility.dll that is stored in the process space of vcbMounter.exe to perform improved backup of the virtual machine data. Such backups can include but are not limited to full compressed backups with signature collection full compressed backups without signature collection full non compressed backups with signature collection differential compressed backups differential non compressed backups combinations of the same and the like.

At Block the intercept module determines if the API call intercepted from vcbMounter.exe comprises a CreateFile call. If so the intercept module replaces the call with an alternative function that opens an alternative compressed backup file Block and the process returns to Block . For instance the intercept module can open the alternative compressed file at a location other than the default backup location for the backup module .

If at Block the intercepted call comprises a WriteFile call the intercept module replaces the call with an alternative function that redirects the write command to the alternative compressed file Block and the process returns to Block .

If at Block the intercepted call comprises a CloseHandle call the intercept module replaces the call with an alternative function that closes the alternative compressed file Block and the process returns to Block . Otherwise the intercept module ignores the call Block and the process returns to Block .

Although the interception process has been described with reference to a particular arrangement other embodiments of the process can include more or fewer blocks or states. For instance the intercept module can be configured to intercept only the CreateFile WriteFile and CloseHandle calls thereby removing Block from the process .

In yet other embodiments the intercept module can be configured to identify other types of calls or functions other than those shown. For example in certain embodiments the intercept module can redirect read calls to the alternative backup file. In yet other embodiments the replacement functions can identify an alternative location for the backup file without compressing the data blocks of the backup file. In yet other embodiments the intercept module can be configured to compute signatures of the data blocks during a full backup and or compare signatures of pairs of corresponding data blocks during a differential backup.

In embodiments of the invention wherein the backup module comprises the VMware VCB utility the interception process can be further modified to ignore calls by the backup module to create a new file wherein such creation comprises first reserving disk space for a backup file by writing placeholder data e.g. digital zeros or ones to the file location. For instance in certain embodiments when opening a new file the VMware VCB utility will write to disk placeholder data to reserve the disk space and then close the newly written file. When preparing to write actual backup data the VMware VCB utility will reopen the file to write the data.

In such embodiments of the invention the interception process can ignore the first call to open the placeholder file but rather open an NTFS sparse file that makes it appear to the backup module that the actual file was opened with the requested file size. Upon the second CreateFile request i.e. to write actual backup data the intercept module can then proceed as in Blocks and to open and populate the alternative compressed file.

In certain embodiments the proxy application e.g. vcblauncher.exe that launches the backup process can be given a variety of parameters that define the scope of the backup. Such parameters can include a compressed backup instruction c a differential backup feature disabled instruction d0 a full backup with data black signatures instruction d1 and or a differential backup instruction d2 .

During Blocks and the backup proxy performs a full backup of one or more virtual machine disk files resident on the datastore . In certain embodiments the full backup can be performed in a manner described with reference to the process of . For instance the full backup can be initiated at Block by initiating the proxy application e.g. vcblauncher.exe that instructs the backup module to begin its process of backing up the virtual disk to a particular destination folder.

At Block the intercept module intercepts and selectively replaces API calls made by a component of the backup module with customized functions to create and save a compressed backup file of the virtual machine disk file s without writing the backup data to a disk of the backup proxy Block . For instance each of the data blocks associated with a write operation can be compressed and saved to an alternative destination on disk identified by the intercept module . In certain embodiments ZLIB or LZO data compression is used while in other embodiments other types of compression can be performed. In yet other embodiments the full backup can be performed without compression.

Prior to concurrent with or following the redirecting and saving of the compressed data to the alternative destination the backup proxy further creates signatures for each of the blocks of the backup file Block . For instance the differential engine can compute or generate signatures for the data blocks of the backup file. In certain embodiments each data block comprises a 256 KB data block such as described in more detail below with respect to . In other embodiments the data blocks can be of a different size and or other means for creating a digital signature for data can be used.

In yet other embodiments the full backup can be performed without generating and storing signatures for each of the data blocks. For instance a dirty block map can be maintained by the backup proxy the management server and or the host servers to identify specific data blocks that are modified in the virtual machine disk s following a full backup of the disk s .

In certain embodiments the backup proxy stores the signatures in the map separate from the data of the compressed full backup.

At Block the backup proxy initiates a differential backup process. For instance the differential backup can begin a predetermined time following the last full backup and or after a certain amount of modifications to the virtual machine data has occurred. This initiating of the differential backup can be achieved in certain embodiments by initiating the proxy application e.g. vcblauncher.exe that instructs the backup module to begin the differential backup process.

Similar to Block at Block the intercept module intercepts and redirects API calls received with respect to backing up virtual machine data. During Block the backup proxy can further generate a signature for every data block associated with a replaced WriteFile API call. For instance in certain embodiments the differential engine computes an MD4 signature for each of the data blocks obtained from the virtual machine disk.

At Block the signature of each of the data blocks in the differential backup operation is compared with the signature of the corresponding data block from the last full backup e.g. signatures stored in the map . If the two signatures differ it can be assumed that the particular data block has been modified since the time of the last full backup. Thus if at Block the signatures are different the backup process continues to write the compressed data block s to a differential backup file Block . In yet other embodiments the backup process proceeds without compressing the data blocks of the differential backup.

If the signatures of the corresponding data blocks are the same the backup process disregards the specific block and loads a subsequent data block into the buffer memory . The process then continues to Block to determine if the differential backup is complete. For instance the process may determine if a CloseHandle API call was intercepted by the intercept module . If not the backup process continues to intercept additional API calls. Otherwise the differential backup process concludes at Block .

Although the process has been described with reference to particular arrangements other embodiments of the invention can include more or fewer blocks than those illustrated in . For instance in certain embodiments the process can allow the backup module to write data to the backup proxy and the compress the data before it is written to disk. In yet other embodiments the process can utilize customized drivers e.g. IFS drivers in place of or in addition to intercepting write calls for writing the backup data to an alternative file.

Moreover in embodiments of the invention wherein incremental backups are used in combination with full backups Block can comprise comparing the signatures of each data block associated with the differential backup with the signatures of corresponding data blocks of the full backup and any subsequent incremental backups.

As shown the signature file comprises a header that lists the name of the disk file comprising the data blocks to which the plurality of signatures pertain. For instance the name can comprise a fully qualified path of the virtual machine disk file. Following the header is a file body that comprises the signature of each data block of the virtual machine disk file. As shown the file body includes the block numbers and corresponding MD4 signatures for data blocks .

In other embodiments the signature file can be generated using other types of message digest algorithms cryptographic hash functions e.g. collision resistant non rolling hash functions digital fingerprints checksums hash values combinations of the same or the like. Moreover the signatures can be calculated for block sizes other than 256 KB such as smaller or larger data block sizes.

As discussed herein differential data blocks can advantageously be compressed e.g. using ZLIB or LZO data compression techniques prior to being stored to disk. illustrates an exemplary embodiment of a format of a compression header of 4 bytes that proceeds the compressed differential data block. As shown the compression header also includes a field offset column a field size column and a description which indicates the compressed differential block size. This compression header can be saved to disk along with the compressed differential data.

Furthermore in certain embodiments the systems and methods described herein can advantageously be implemented using computer software hardware firmware or any combination of software hardware and firmware. In one embodiment the system is implemented as a number of software modules that comprise computer executable code for performing the functions described herein. In certain embodiments the computer executable code is executed on one or more general purpose computers. However a skilled artisan will appreciate in light of this disclosure that any module that can be implemented using software to be executed on a general purpose computer can also be implemented using a different combination of hardware software or firmware. For example such a module can be implemented completely in hardware using a combination of integrated circuits. Alternatively or additionally such a module can be implemented completely or partially using specialized computers designed to perform the particular functions described herein rather than by general purpose computers.

Moreover certain embodiments of the invention are described with reference to methods apparatus systems and computer program products that can be implemented by computer program instructions. These computer program instructions can be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the acts specified herein to transform data from a first state to a second state.

These computer program instructions can be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified herein.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions that execute on the computer or other programmable apparatus provide steps for implementing the acts specified herein.

While certain embodiments of the inventions have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

