---

title: Vector graphic conversion into fonts
abstract: Techniques are described to convert vector graphics into fonts. In one or more implementations, web content is received that includes one or more vector graphics. Each of the one or more vector graphics are flattened to form a path that describes a corresponding image of a respective vector graphic. A font file is formed that includes, for each path, a glyph and an identifier that is usable to identify the glyph. A stylesheet file is also created having a class that corresponds to the glyph and corresponding identifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317489&OS=09317489&RS=09317489
owner: Adobe Systems Incorporated
number: 09317489
owner_city: San Jose
owner_country: US
publication_date: 20130627
---
There is an ever increasing amount of web content made available via the Internet for consumption by a browser a web enabled application and so on. Developers may employ a variety of different techniques to compose and deploy this web content for consumption by users.

However conventional techniques that are available to developers did not adequately address a transition between composing the web content and deployment of the content. Further these techniques may result in inefficient processing of images which could also result in inefficiencies in the consumption of images such as be a computing device.

For example conventional techniques could result in a variety of different image types that could consume a large amount of resources to store the images as well as render the images. Accordingly these conventional techniques could be frustrating and time consuming to developers which could result in web content that could be difficult to consume by devices with limited resources such as mobile communications devices.

Techniques are described to convert vector graphics into fonts. In one or more implementations web content is received that includes one or more vector graphics. Each of the one or more vector graphics are flattened to form a path that describes a corresponding image of a respective vector graphic. A font file is formed that includes for each path a glyph and an identifier that is usable to identify the glyph. A stylesheet file is also created having a class that corresponds to the glyph and corresponding identifier.

This Summary introduces a selection of concepts in a simplified form that are further described below in the Detailed Description. As such this Summary is not intended to identify essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Conventional techniques that are utilized to generate content packages are often limited in support of transitions between developing the web content and generating a package that includes the web content. Further these techniques could be limited in how images are addressed. Accordingly conventional techniques may rely on a variety of different manual processes which could be frustrating to developers of web content that wish to leverage the content packages.

Content package generation techniques for web content are described. In one or more implementations an automated system is described that may operate without user intervention to generate a content package. For example a user may interact with an authoring tool to compose a web content project such as in accordance with a LESS dynamic stylesheet language. The system may then be utilized to process the web content project into a content package which may be configured for consumption via a content repository application programming interface API .

For example a user may provide one or more user inputs to initiate processing of the web content project e.g. a command gesture use of a cursor control device and so on into a content package that is configured for consumption via a content repository API for Java JCR . This processing may include converting the web content project from a LESS configuration to a cascading style sheets CSS configuration verification of syntax processing of images if included performing unit test cases extracting inline documentation taking portions of the web content project into corresponding locations in a hierarchical structure of the content package installation on an executing content management system and so on. In this way the system may be utilized to package the web content as tested and verified automatically and without user intervention thereby increasing a likelihood that these actions will be undertaken by a developer of the web content. Further discussion of these techniques may be found in the discussion of .

Additionally techniques are described which may be utilized to improve processing and rendering of images as part of web content. For example techniques may be employed to process vector images included in web content into glyphs. This may include flattening of a textual description of the vector graphics to describe the corresponding images as a path of waypoints. These waypoints may then be stored with identifiers as glyphs in a single font file with a corresponding stylesheet as part of the web content. In this way images described by the vector graphics may be treated as glyphs for use as part of the web content which may improve resource utilization as part of the generation and consumption of the web content. Further discussion of these techniques may be found of the description of .

In the following discussion an example environment is first described that may employ the techniques described herein. An implementation example of web content development and an implementation example of vector graphic processing are then described in corresponding sections. These sections include example procedures which may be performed in the example environment as well as other environments. Consequently performance of the example procedures is not limited to the example environment and the example environment is not limited to performance of the example procedures.

A computing device for instance may be configured as a desktop computer a laptop computer a mobile device e.g. assuming a handheld configuration such as a tablet or mobile phone and so forth. Thus computing devices may range from full resource devices with substantial memory and processor resources e.g. personal computers game consoles to a low resource device with limited memory and or processing resources e.g. mobile devices . Additionally although a single computing device may be described in the following reference to a computing device may be representative of a plurality of different devices such as multiple servers utilized by a business e.g. the service provider to perform operations over the cloud as further described in relation to .

Although the network is illustrated as the Internet the network may assume a wide variety of configurations. For example the network may include a wide area network WAN a local area network LAN a wireless network a public telephone network an intranet and so on. Further although a single network is shown the network may also be configured to include multiple networks.

The service provider is illustrated as including a service manager module . The service manager module is representative of functionality of the service provider to manage web content as part of one or more network based services. The web content may be configured in a variety of ways such as one or more webpages of a website configured for access as part of a network based application and so on.

In the illustrated environment the computing device includes a web content development module that is representative of functionality to compose the web content e.g. for use by a developer. Computing device on the other hand is illustrated as including a web content consumption module that is representative of functionality to consume the web content e.g. as a browser as part of a network based application and so on. Although illustrated separately it should be readily apparent that the represented functionality may be combined on a single computing device e.g. computing device may be used to both develop and consume the content may be further distributed e.g. as part of a network service and so on.

The web content developer module is illustrated as including an authoring tool that is executable to provide a user interface via which a developer may compose the web content . As such the authoring tool may be configured in a variety of different ways. For example the authoring tool may be configured to support a style sheet language to describe presentation of a web content project in a markup language such as XML and so on.

A content packaging module is also illustrated which is representative of functionality that may be employed to package a web content project as a content package e.g. the web content project received from the authoring tool or elsewhere. The content packaging module for instance may configure the web content project in accordance with a hierarchical e.g. tree like structure having a plurality of nodes with associated properties. Thus a parent child relationship of the nodes may also define a relationship of content associated with the nodes. In this way the structure of the content package may specify how content of the content package is to be accessed.

As previously described the computing device includes a web content consumption module that is representative of functionality to consume web content which may include the content package that was communicated for distribution via the network by the service provider . The web content consumption module includes a content management system CMS having a content repository API . The content repository API may be configured to follow a specification for access to the content package such as in accordance with a content repository API for Java JCR or other dynamic runtime language. The content management system may thus be used to maintain and manage content associated with the content package as well as content received via other techniques e.g. as single files via the content repository API which may include versioning metadata and so on.

Thus the content management system may operate as a type of object database to store search and retrieve hierarchical content. As such the content package may also be configured by the content packaging module in accordance with this database such that a hierarchical structure of the content package is configured in accordance with the hierarchical structure of the object database maintained by the content management system .

As previously described conventional techniques that were utilized to generate a content package did not support a transition between development of the content and building of the content package . This could cause developers to forgo use of testing and verification to make sure the web content functions as intended. However the content packaging module may perform operations associated with this transition automatically and without user intervention such as through configuration as a configurable build system that aggregates several tools into a single configuration that provides a simple configurable and intuitive way to build a fully tested content package .

A variety of different functionality may be incorporated as part of the building of the content package . An example of such functionality is illustrated as a font creation module . The font creation module is representative of functionality to convert vector graphics of a web content project into glyphs. In this way the font file may provide an efficient technique for display of corresponding images as part of the web content further discussion of which may be found beginning in relation to the description of .

The following discussion describes content package generation techniques that may be implemented utilizing corresponding systems and devices as well as other systems and devices. Further the systems and devices may also be utilized to perform other procedures and arrangements thereof. Aspects of the procedure of may be implemented in hardware firmware or software or a combination thereof. The procedure is shown as a set of blocks that specify operations performed by one or more devices as illustrated by the corresponding systems of and are not necessarily limited to the orders shown for performing the operations by the respective blocks. Accordingly the following discussion is arranged as including a description of the system and procedures in parallel.

At the first stage one or more inputs are received via an authoring tool of a computing device to compose a web content project block . A developer for instance may interact with the authoring tool to describe presentation semantics of a document which may be expressed in a markup language such as XML. This may be performed in a variety of ways.

For example the authoring tool may be configured to support a dynamic stylesheet language such as LESS to generate a web content project having web content . Therefore instead of writing directly to a cascading style sheets CSS language directly the authoring tool may support the use of a variety of different functionality made available via the dynamic stylesheet language. This functionality may include mixins e.g. which permit embedding of properties of a class into another class variables and variable assignment nesting e.g. logical nesting in which the code blocks themselves are not nested but rather selectors are nested to specify inheritance operators and functions and so on. Other examples are also contemplated in which the authorizing tool is configured to accept one or more inputs to compose CSS directly.

As illustrated the web content may include a variety of different types of data which may include a variety of different types of static content. Examples of this content include LESS files as described above stylesheet declarations and objects dynamic runtime source code may include images fonts e.g. files of glyphs inline documentation unit test cases and other content. It should be readily apparent that portions of the data may be optionally included as part of the web content of the web content project .

Regardless of how the web content originated the web content project may then be processed into a content package automatically and without user intervention by a computing device block . This may include use of a variety of different techniques responsive to a single input from a user to begin the processing e.g. a command gesture voice command and so on.

At the second stage for instance syntax of the web content project is verified block . As described above the web content may include stylesheet declarations and objects . Accordingly the content packaging module may employ a content verification module to check syntax including type errors and so on. For example declaratives e.g. LESS CSS declaratives and objects e.g. Javascript or other dynamic runtime objects may be linted and verified such that the declaratives and objects do not contain syntax errors or break defined styling rules of the stylesheet language.

At the third stage one or more static files of the web content project are converted from the dynamic stylesheet language into instructions in accordance with Cascading Style Sheets CSS block . As previously describes LESS files may be generated for use of a variety of functionality such as nesting variables mixins and so on. However LESS files may be incompatible with browsers and other functionality e.g. web enabled applications that are configured to consume web content . Accordingly the content packaging module may leverage a file conversion module to convert the LESS files into CSS files or other stylesheet language that is consumable by such functionality.

At the second stage one or more unit tests are performed on the web content project block . As previously described the web content may include unit test cases . These unit test cases may be specified manually as part of the web content. Accordingly a content test module may be employed to perform these tests to determine if functions operate as intended e.g. to test variables mathematical operations and so on. If one of the tests fail the content packaging module may cease processing of the web content used to form the content package .

At the third stage documentation is extracted from one or more static files of the web content to create one or more pages having the documentation block . As illustrated the web content may include inline documentation as part of the source code of the web content . This inline documentation may be parsed and applied by a documentation module to a template to form one or more documentation pages that include this inline documentation. In this way the documentation page may serve as a resource to locate documentation that describes functions included in the source code in a markup language page that may be included as part of the content package .

At the first stage portions of the web content project are taking into corresponding location in a hierarchical structure of nodes of the content package block . The content structuring module for instance may be employed to process a result of one or more of the previous operations of . This processing may include placement into a hierarchical structure that corresponds to a client library structure of the content management system . In this way the content package is formed that is compatible with a content repository API such that the content management system knows where to place portions of the content package i.e. which nodes in a content repository maintained by the content management system .

Additional operations may also be performed by the content structuring module . This may include formation of reference files e.g. to be compatible with a content repository API for Java JCR through generation of js.txt and css.txt files that include line by line lists of files to be used for JavaScript and CSS files respectively.

At the second stage the content package is illustrated as being installed on an actively executing content management system . The installation may be performed depending on a developer s preference. The content package as previously describe may include a hierarchical structure that is understood via the content repository API which is this instance is illustrated as being executed by a computing device of the developer. Other examples are also contemplated such as automatic upload of the content package to the service provider as part of the web content output of a prompt to perform this upload and so on.

The following discussion describes vector graphic conversion techniques that may be implemented utilizing corresponding systems and devices as well as other systems and devices. Further the systems and devices may also be utilized to perform other procedures and arrangements thereof. Aspects of the procedure of may be implemented in hardware firmware or software or a combination thereof. The procedure is shown as a set of blocks that specify operations performed by one or more devices as illustrated by the corresponding systems of and are not necessarily limited to the orders shown for performing the operations by the respective blocks. Accordingly the following discussion is arranged as including a description of the system and procedures in parallel.

In this example a font creation module may be utilized to identify vector graphics in the web content e.g. as part of the web content project described earlier. The font creation module may then be utilized to flatten image information of the vector graphics to convert the vector graphic into glyphs included in a font file and a corresponding stylesheet file . This may be performed to create and compress multiple vector graphics into a single font file and corresponding stylesheet to enable the use within a web application browser and so on. In this way a single file may be distributed that includes the images which may increase efficiency by decreasing load time. An example of this process is described in greater detail as follows.

At the second stage the font creation module is illustrated as including a path creation module that is representative of functionality to flatten each of the one or more vector graphics to form a path that describes a corresponding image of a respective vector graphic block . For instance the path creation module may analyze a textual description of a vector graphic such as for a circle as illustrated that describe a name of the type of image radius center location stroke line fill and so on. This textual description may then be converted to a list of waypoints that describe a path that mimics the textual description which be scaled in a manner similar to a glyph.

In this way information stored to describe the vector graphic may be modified by taking curves that describe the image e.g. a scalar vector graphic format in which an image is described via a markup language such as XML and create a path thus flattening the description of the vector graphic . Thus the list of waypoints may be used to replace the textual description of the vector graphic . This process may continue for each vector graphic identified in the web content and the resulting paths may be saved one by one by the computing device .

As shown in the in the second stage the font creation module may also employ a path adjustment module that is representative of functionality to adjust the list of waypoints of the paths in the web content . This adjustment may be performed to support a variety of functionality such as to adjust a baseline and placement and resizing of the path within grid. This may be performed such that an image corresponding to the path complies with how a glyph is expected to function as part of the web content e.g. for consistent alignment and placement as part of the web content. A variety of other adjustment are also contemplated. These adjustments may be performed automatically and without user intervention and may be optional on the part of a developer of the web content .

The font file may be formed in a variety of ways. For example the font file may be formed such that for each of the paths a glyph and an identifier that is usable to identify the glyph is included in the file block . Each glyph for instance may be assigned an identifier such as a Unicode identifier such that the identifier is compatible with a wide range of applications. The Unicode identifier may be selected from a private space of identifiers which is defined in the Unicode standard specification that may be leveraged for such an instance. In this way the identifier may be used for the glyph having the list of waypoints that describe the path in a manner similar to use of a traditional glyph.

At the second stage the font creation module is illustrated as including a stylesheet generation module that is representative of functionality to create a stylesheet file having a class that corresponds to the glphy and corresponding identifier block . Instructions in the stylesheet file may be configured in accordance with a variety of different formats such as a Cascading Style Sheet CSS or other format.

The stylesheet generation module may also be configured to create a class and in the class include a font file reference e.g. a reference to the font file and references to the glyph identifiers e.g. the Unicode identifiers described above. This may support use of the class in a markup language HTML .

A variety of additional processing may be performed by the font creation module such as to convert the font file into another format block such as from a scalar vector graphic SVG font format into other font formats like TrueType OpenType Web Open Font Format WOFF and so on to support differences in compatibility.

Thus at this point the font file and the stylesheet file are ready for consumption. This may be performed in a variety of ways such as included as part of the content package for consumption via a content repository API of a content management system or otherwise e.g. as single files and so on. Accordingly a computing device may receive web content from a service provider having the font file and stylesheet file block . The web content is then consumed by a content management system block or consumed using other techniques.

Thus these techniques may be employed to accept vector graphics as an input. The vector graphics may then be compressed by manipulating representation information. The compressed output may then be concatenated into a single representation file which is transferred into glyphs by creating a curve information. Then each single glyph may be adjusted through realignment to a baseline and hinted e.g. provided a corresponding identifier. Each of the generated glyphs may then be transferred into a font files and be placed into a private use Unicode range. To support efficient use in web applications browser and so on access information may be created in the form of a cascading stylesheet directive for each glyph as the Unicode letter. This directive may then be used in form of a CSS class to display the corresponding image.

The example computing device as illustrated includes a processing system one or more computer readable media and one or more I O interface that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware element that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable storage media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage component may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage component may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to recognize movement as gestures that do not involve touch and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and computer readable signal media. 

 Computer readable storage media may refer to media and or devices that enable persistent and or non transitory storage of information in contrast to mere signal transmission carrier waves or signals per se. Thus computer readable storage media refers to non signal bearing media. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Computer readable signal media may refer to a signal bearing medium that is configured to transmit instructions to the hardware of the computing device such as via a network. Signal media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Signal media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein such as to perform one or more instructions. Hardware may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware. In this context hardware may operate as a processing device that performs program tasks defined by instructions and or logic embodied by the hardware as well as a hardware utilized to store instructions for execution e.g. the computer readable storage media described previously.

Combinations of the foregoing may also be employed to implement various techniques described herein. Accordingly software hardware or executable modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of a module that is executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable storage media and or hardware elements of the processing system . The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

The techniques described herein may be supported by various configurations of the computing device and are not limited to the specific examples of the techniques described herein. This functionality may also be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device embodiment implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claimed invention.

