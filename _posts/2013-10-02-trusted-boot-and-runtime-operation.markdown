---

title: Trusted boot and runtime operation
abstract: An embodiment includes an apparatus comprising: an out-of-band cryptoprocessor including secure non-volatile storage that couples to a root index, having a fixed address, and comprises first and second variables referenced by the root index; and semiconductor integrated code (SIC) including embedded processor logic to initialize a processor and embedded memory logic to initialize a memory coupled to the processor; wherein (a) the SIC is to be executed responsive to resetting the processor and prior to providing control to boot code, and (b) the SIC is to perform pre-boot operations in response to accessing at least one of the first and second variables. Other embodiments are described herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384352&OS=09384352&RS=09384352
owner: Intel Corporation
number: 09384352
owner_city: Santa Clara
owner_country: US
publication_date: 20131002
---
Historically basic input output system BIOS software which is low level software used to boot up i.e. perform boot operations such as loading and starting an operating system testing hardware and the like and perform low level operations in a computer system has typically been incorporated by so called original equipment manufacturers OEMs namely the computer manufacturers. To provide BIOS support for processors a processor manufacturer so called silicon manufacturer provides detailed information to the OEMs. This information is typically in the form of source code. However by providing this code hardware intellectual property IP aspects of the processor such as how to program it and underlying hardware details are exposed to third parties. Further by providing source code the OEMs can modify the code integrate it in a non standard manner or tweak it to support non standard hardware which can raise complexity and operating concerns leading to added support costs for the silicon manufacturer.

Examples of information typically provided to initialize a system include details regarding a processor interconnect links memory fabric and so forth. Such details may include register definitions and interfaces to this hardware. This information is distributed in addition to OEMs to independent BIOS vendors IBVs . As processors and other advanced silicon controllers are incorporated into different types of systems and devices e.g. mobile computing nodes such as tablets and Smartphones the varying formats of BIOS will expand greatly raising more IP concerns and support challenges.

Furthermore malicious attacks on BIOS will only become more prevalent in the future. Thus providing a BIOS that is easy to support over varying platform configurations used by OEMs and IBVs see above while also being secure against malware and the like raises IP concerns and support challenges further still.

In the following description numerous specific details are set forth but embodiments of the invention may be practiced without these specific details. Well known circuits structures and techniques have not been shown in detail to avoid obscuring an understanding of this description. An embodiment various embodiments and the like indicate embodiment s so described may include particular features structures or characteristics but not every embodiment necessarily includes the particular features structures or characteristics. Some embodiments may have some all or none of the features described for other embodiments. First second third and the like describe a common object and indicate different instances of like objects are being referred to. Such adjectives do not imply objects so described must be in a given sequence either temporally spatially in ranking or in any other manner. Connected may indicate elements are in direct physical or electrical contact with each other and coupled may indicate elements co operate or interact with each other but they may or may not be in direct physical or electrical contact. Also while similar or same numbers may be used to designate same or similar parts in different figures doing so does not mean all figures including similar or same numbers constitute a single or same embodiment.

An embodiment includes a secure out of band cryptoprocessor such as a trusted product module TPM including secure non volatile NV storage e.g. random access memory RAM that comprises a root index having a fixed address and first and second variables such as Unified Extensible Firmware Interface UEFI variables referenced by the root index. The embodiment further includes semiconductor integrated code SIC including embedded processor logic to initialize a processor and embedded memory logic to initialize a memory coupled to the processor wherein the SIC is to be executed responsive to resetting the processor and prior to providing control to boot code.

An embodiment maps UEFI variables into TPM NV memory such as flash memory so the SIC has a generic way to access the UEFI variables regardless of where one or more OEMs decide to locate or arrange the memory. In other words if two OEMs arrange flash storage differently the same SIC can follow the map or index to still locate the UEFI variables in both storage scenarios despite those variables being located in different places in the different flash arrangements used by the different OEMs. The SIC may include pre boot instructions specific to for example a processor manufacturer. Furthermore because the variables are stored in the TPM certain TPM utilities e.g. read only and write only attributes for the variables may be used to bind the variables to the platform in a secure way to prevent attack from malware or user error . This confidentiality provided by the TPM allows for secure storage of variables that may include sensitive materials such as root or master keys for the platform person identification numbers PINs and UEFI variables.

Thus embodiments provide several advantages. First an embodiment provides a way for a silicon manufacture to protect its initialization code. Second that code may interact with BIOS components such as UEFI variables that are securely stored in a TPM. Third despite the variables being stored in a TPM those variables may still be accessible to the SIC as well as to the OEM BIOS during both bootime and runtime. Other embodiments are described herein.

While UEFI variables and TPMs are addressed herein for many of the embodiments this is done for ease of explanation and brevity and does not imply all embodiments are limited to either of UEFI variables or TPMs. Other embodiments may be used with other pre boot code boot code initialization code and or BIOS code as well as with other secure cryptoprocessors and or secure storage mechanisms. Furthermore specific standards are mentioned for brevity but embodiments are not limited to any one BIOS or TPM standard or any other standard. A more detailed discussion of various embodiments now follows.

As mentioned above an embodiment has an advantage by providing a way for a silicon manufacture to protect its initialization code. This is now discussed in greater detail.

To provide BIOS support for processors a processor manufacturer conventionally provides detailed information to the OEMs. This may lead to a loss of confidentiality for the detailed information. However an embodiment uses SIC to address these issue. As described more fully in U.S. Patent Application Publication 2011 0320798 U.S. Pat. No. 8 522 066 assigned to Intel Corp. of Santa Clara Calif. SIC may include early initialization software that has a tightly coupled binding to underlying processor hardware such that the silicon manufacturer controls and provides early initialization software rather than it being implemented by OEM BIOS.

The SIC may be used in an environment to load the code guarantee its provenance and after execution of the SIC and hand control off to OEM BIOS boot code in a seamless fashion. The SIC may be used to perform low level aspects of memory initialization such as training in which analog links are set up diagnostics and design for test hooks. While all embodiments are not limited in this regard key initialization code for memory controller and interconnect links as well as runtime support for various processor and system features may be in the form of SIC. In some embodiments a root of trust to this code can be provided via a hook in processor microcode to implement a SIC loader to authenticate and then load the SIC which may be a form of silicon manufacturer s BIOS and then pass control to the OEM BIOS. Given the challenges of upgrade to an OEM BIOS a memory storing the BIOS such as a firmware volume incorporated in a flash memory could be hostile so a root of trust for core microcode within the processor package to launch the SIC loader may be used to guarantee that those subsidiary blocks of the OEM BIOS that include the SIC are valid.

After execution of the SIC control may pass to an OEM BIOS which may be implemented according to a UEFI open source standard e.g. UEFI Specification Version 2.3.1c available at www uefi org specs or via a conventional BIOS or proprietary OEM boot code each of which boots one or more operating systems OSs . In some implementations the SIC may be used to perform patches e.g. to resolve errors or to perform binary translation . Also the SIC may set protections for certain memory blocks e.g. to hide a memory block for binary translation error handling or other code of a silicon manufacturer that is to run during runtime and be invisible to the OS . In this way where a processor uses reserved code such as for microcode read only memory uROM offload co processor support and the like having the SIC provide this memory prior to exposing the machine to third party OEM code allows for a subset of the memory to be available to the processor.

In various embodiments the SIC may be provided as binary code for incorporation into an OEM BIOS e.g. as a flash or other NV memory or the SIC can be implemented in NV storage of a processor package. Thus embodiments enable a processor or other silicon manufacturer to ship binary modules to customers rather than source code providing greater IP protection. Further with a growing number of customers technical support costs can be reduced by shipping BIOS building blocks together with silicon.

The SIC may provide for a platform independent BIOS. By platform independent it is meant that the components included are to be executed on any given platform regardless of the specifics of the machine e.g. memory types link speeds voltages available etc. . Instead anything that may be platform dependent can be codified through a platform manufacturer data file. As an example the platform vendor may parameterize certain information such as information regarding the system board and so forth. Certain components doing fundamental initializations e.g. a link initialization establishing root of trust can be done by the SIC before handing control to third party code. This temporal isolation of the SIC provides a guarantee that the processor owns the hardware at power on reset and only SIC code can run until control is given to third party code.

The SIC components may include an initial program loader IPL which is responsible for locating and loading the rest of the SIC before third party code. Note that this loader may not be considered a component of the SIC. The components of the SIC may be transitory or persistent. For a persistent embodiment it could be active acting like a platform initialization PI module or passive acting like a library through new instructions .

In an embodiment the SIC includes an embedded central processing unit CPU logic ECL which initializes inter processor logics such as on board interconnects. Training for both link and memory initialization may include communication between both ends of the link. In the case of a link a processor may be coupled to another processor or an input output IO hub and can determine the optimal frequency and link widths at which they can transact data. This ECL module may typically be transitory. In some embodiments link initialization may be redone without damaging memory contents in a resume operation from a low power state e.g. an Advanced Configuration and Power Interface ACPI low power state e.g. S3 of the ACPI Specification Version 4.0 Jun. 16 2009 .

The SIC may further include an embedded memory logic EML to initialize memory. This component may be partially transitory and partially persistent during runtime e.g. for handling temperature throttling or error handling . Memory initialization may further include setting up addressing as different components have different views of memory. For example the CPU may have a processor physical address the dynamic random access memory DRAM may have a DRAM physical address and in some embodiments there may be a platform physical address. Thus there can be different views of memory depending on how link address decoders are programmed. To enable an amount of sequestered memory for the processor a subset of the address decoders and memory decoders may be programmed for the processor. This sequestered memory may be exclusively used by the processor during system operation and may store microcode offload a binary translator licensing information manageability information and so forth. In addition reserved logic may be used to support other features of a platform independent logic.

Thus an embodiment uses SIC to protect control and confidentiality regarding initialization code for a processor or other component. The SIC may need to interact with certain components that are not included in the SIC. Also such components may need to be accessible to code not implemented in the SIC. Such components may be accessible to the SIC and other components e.g. OEM BIOS while still being resistant to malicious activity. Such components may include for example UEFI variables that are used in UEFI Secure Boot techniques. UEFI variables are used to save MRC Memory Reference Code configuration data PCH Platform Control Hub configuration data SA System Agent configuration data keys and the like. UEFI Secure Boot techniques are standardized e.g. UEFI2.3.1c specification and some UEFI techniques are implemented in open source arrangements e.g. edk2 sourceforge net .

As mentioned above an embodiment has an advantage of interacting with BIOS components such as UEFI variables that are securely stored in a TPM. This is now discussed in greater detail.

Regarding making these variables resistant to malicious activity these UEFI variables are susceptible to malicious activities. Specifically OEM IBVs store variable data on a flash region and use system management mode SMM to maintain the integrity of the variable data i.e. there is no confidentiality control . Thus the variables are susceptible to malicious activity such as a shack attack which is a low budget hardware attack where attackers have physical access to the device but not enough equipment or expertise to attack within the integrated circuit packages. The attackers attempt to connect to the device using JTAG debug boundary scan I O and built in self test facilities. They can passively monitor the system using logic probes and network analyzers to snoop bus lines pins and system signals. The attackers may also be able to perform simple active hardware attacks such as forcing pins and bus lines to be at a high or low voltage reprogramming memory devices and replacing hardware components with malicious alternatives. Other threats include ROM swipe replacement style attacks and the like.

To better secure these variables an embodiment cryptographically binds UEFI variables to the platform by storing them in NV memory of a TPM. This is possible because for example TPM standard version 2.0 supports platform hierarchy and consequently platform firmware such as the SIC and the OS can both use the TPM which was not the case with previous TPM standards e.g. TPM standard 1.2 whereby only the OS could use the TPM . Consequently a UEFI variable which the SIC needs access to can be stored in a TPM. The TPM has strong access controls e.g. read lock to prevent reading the variable and write lock to prevent writing to the variable . Thus the TPM can for example implement READ LOCK protection for confidentiality and WRITE LOCK protection for integrity for the variables.

The above embodiments show for example how initialization code can be provided in SIC to preserve confidentiality for the initialization code. For example the SIC may include processor vendor specific preboot code such as PEI Pre EFI initialization and DXE Driver eXecution Environment operations. Thus the SIC may control confidentiality of certain boot operations that serve as for example a BIOS Initial Boot Block IBB . Furthermore various initialization components that may need to be accessed by the SIC such as UEFI variables can be secured by including them in a secure cryptoprocessor such as a TPM. An embodiment described below ensures the SIC and OEM BIOS as well as other components can located these components such as UEFI variables in a platform independent manner.

As mentioned above an embodiment has an advantage considering despite the variables being stored in a TPM those variables may still be accessible to the SIC as well as to the OEM BIOS during both bootime and runtime. This is now discussed in greater details.

Regarding location of UEFI variables UEFI PI specifications define NV storage variables which can be used to save data to be available upon a S3 resume or subsequent boot. Further the specifications define an application programming interface API for variable access e.g. SetVariable GetVariable . However the specifications do not define how and where such variables are stored. In other words how an OEM or IBV stores the variable s is implementation specific and where i.e. variable layout on a flash region is also implementation specific. Consequently the SIC may have difficulty in reliably knowing where the UEFI variables are stored across a spectrum of different platforms and BIOS arrangements.

An embodiment provides a way for the SIC e.g. processor vendor IBB to generically access NV storage such as storage included in a TPM to access variable data e.g. UEFI configuration data stored in a UEFI variable . More specifically an embodiment provides a way to map UEFI defined standard variables to TPM NV storage so that the SIC can access the variable data in a platform independent way. OEM and IBV BIOS can follow the map to the variable data.

In an embodiment to store a UEFI defined variable into TPM NV storage the TPM NV storage format is defined. As shown in variable e.g. TPM NV 1 variable may include for example name Globally Unique Identifier GUID attributes datasize and data components. These components may all be stored in one content block and stored in TPM NV data region . Data region may have other attributes like a NV index NV Index pointing to or referencing components of variable such as NV Auth and NV State . NV Auth may be used to check access rights for variable and NV State may be used to check read lock or write lock state for variable . The internal attributes can be defined using for example a TPM NVDefineSpace command.

In order to address numerous UEFI variables an index is used to allow the TPM NV memory to report or map the variables it stores. The index may be implemented as a special TPM Info NV variable or TPM Root NV variable . As used herein a NV variable is a variable stored in NV memory. The TPM Info NV variable may have a fixed NV address e.g. 0x01800004 . The content of TPM Root NV variable may include a list NV Index referencing the locations of first second and third stored variables TPM NV 1 variable also referred to above as TPM NV 1 variable TPM NV 2 variable TPM NV N variable .

In an embodiment the TPM NV variable may include a hash or other space saving abbreviation or derivative of a TPM NV variable. The hash derivative may be what is stored in the TPM NV where storage space may be limited. This arrangement allows for a much larger set of variables to be mapped to a possibly smaller set of TPM NV memory.

The total size of the TPM NV memory may be limited. Thus in one embodiment the more critical variables may be stored in the TPM NV memory while just a hash value of the less critical variables is stored in the TPM NV memory with the entire unhashed value stored in flash memory outside the TPM . Such a solution maintains the confidentiality and integrity of critical UEFI variables as well as the integrity of less critical UEFI variables.

In an embodiment UEFI variables are accessible during SMM runtime as well as during boottime. During runtime the variables may be accessible to the OS SMM and or the SIC. The TPM e.g. using the 2.0 standard has a Platform Hierarchy for BIOS usage that provides CommandArea Start Cancel StatusArea Error CommandBufferArea ResponseBufferArea operations that can be used to control TPM commands.

In other embodiments the SMM TPM command may be placed in a queue and a periodic system management interrupt SMI may be used to check TPM state e.g. is an OS command present in a periodic SMI handler. Another embodiment traps all TPM Accesses e.g. OS TPM accesses and always accesses TPM hardware in SMM so there is no conflict with SIC or OS TPM accesses .

As described herein an embodiment 1 maps UEFI variables into secure TPM NV memory 2 lets SIC code have a generic way to access UEFI variable independent of variable flash layout so the SIC IBB can be deployed on any platform 3 uses better security control like read only and write only to protect the UEFI variables. The variables may be used to store configuration data secrets such as a Platform Key PK and or Key Exchange Key KEK addressed in UEFI specification 2.3.1c PIN and the like.

An embodiment enables SIC IBB to have a generic way to access platform dependent memory regions and allow a party such as a processor manufacturer to accommodate and work with widely varying BIOS configurations. An embodiment also provides a way to resolve confidentiality issues for UEFI variables combining a platform security feature of a TPM with the variables.

Embodiments may be used in many different types of systems. For example in one embodiment a communication device can be arranged to perform the various methods and techniques described herein. Of course the scope of the present invention is not limited to a communication device and instead other embodiments can be directed to other types of apparatus for processing instructions.

Program instructions may be used to cause a general purpose or special purpose processing system that is programmed with the instructions to perform the operations described herein. Alternatively the operations may be performed by specific hardware components that contain hardwired logic for performing the operations or by any combination of programmed computer components and custom hardware components. The methods described herein may be provided as a a computer program product that may include one or more machine readable media having stored thereon instructions that may be used to program a processing system or other electronic device to perform the methods or b at least one storage medium having instructions stored thereon for causing a system to perform the methods. The term machine readable medium or storage medium used herein shall include any medium that is capable of storing or encoding a sequence of instructions for execution by the machine and that cause the machine to perform any one of the methods described herein. The term machine readable medium or storage medium shall accordingly include but not be limited to memories such as solid state memories optical and magnetic disks read only memory ROM programmable ROM PROM erasable PROM EPROM electrically EPROM EEPROM a disk drive a floppy disk a compact disk ROM CD ROM a digital versatile disk DVD flash memory a magneto optical disk as well as more exotic mediums such as machine accessible biological state preserving storage. A medium may include any mechanism for storing transmitting or receiving information in a form readable by a machine and the medium may include medium through which the program code may pass such as antennas optical fibers communications interfaces etc. Program code may be transmitted in the form of packets serial data parallel data etc. and may be used in a compressed or encrypted format. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application module logic and so on as taking an action or causing a result. Such expressions are merely a shorthand way of stating that the execution of the software by a processing system causes the processor to perform an action or produce a result.

Referring now to shown is a block diagram of a system embodiment in accordance with an embodiment of the present invention. System may be included in for example a mobile computing node such as a cellular phone smartphone tablet Ultrabook notebook laptop personal digital assistant and mobile processor based platform.

Shown is a multiprocessor system that includes a first processing element and a second processing element . While two processing elements and are shown it is to be understood that an embodiment of system may also include only one such processing element. System is illustrated as a point to point interconnect system wherein the first processing element and second processing element are coupled via a point to point interconnect . It should be understood that any or all of the interconnects illustrated may be implemented as a multi drop bus rather than point to point interconnect. As shown each of processing elements and may be multicore processors including first and second processor cores i.e. processor cores and and processor cores and . Such cores may be configured to execute instruction code in a manner similar to methods discussed herein.

Each processing element may include at least one shared cache. The shared cache may store data e.g. instructions that are utilized by one or more components of the processor such as the cores and respectively. For example the shared cache may locally cache data stored in a memory for faster access by components of the processor. In one or more embodiments the shared cache may include one or more mid level caches such as level 2 L2 level 3 L3 level 4 L4 or other levels of cache a last level cache LLC and or combinations thereof.

While shown with only two processing elements it is to be understood that the scope of the present invention is not so limited. In other embodiments one or more additional processing elements may be present in a given processor. Alternatively one or more of processing elements may be an element other than a processor such as an accelerator or a field programmable gate array. For example additional processing element s may include additional processors s that are the same as a first processor additional processor s that are heterogeneous or asymmetric to first processor accelerators such as e.g. graphics accelerators or digital signal processing DSP units field programmable gate arrays or any other processing element. There can be a variety of differences between the processing elements in terms of a spectrum of metrics of merit including architectural microarchitectural thermal power consumption characteristics and the like. These differences may effectively manifest themselves as asymmetry and heterogeneity amongst the processing elements . For at least one embodiment the various processing elements may reside in the same die package.

First processing element may further include memory controller logic MC and point to point P P interfaces and . Similarly second processing element may include a MC and P P interfaces and . MC s and couple the processors to respective memories namely a memory and a memory which may be portions of main memory locally attached to the respective processors. While MC logic and is illustrated as integrated into the processing elements for alternative embodiments the MC logic may be discrete logic outside the processing elements rather than integrated therein.

First processing element and second processing element may be coupled to an I O subsystem via P P interfaces via P P interconnects respectively. As shown I O subsystem includes P P interfaces and . Furthermore I O subsystem includes an interface to couple I O subsystem with a high performance graphics engine . In one embodiment a bus may be used to couple graphics engine to I O subsystem . Alternately a point to point interconnect may couple these components. Chipset may also include or couple to a chip or chipset that includes secure out of band cryptoprocessor e.g. a TPM that is out of band from processors that includes secure memory that may further include UEFI variables or other such variables . SIC including initialization code e.g. initialization code for memory processor and the like may also be included within or coupled to cryptoprocessor . Furthermore SIC may hand off to boot code which may be included in or coupled to chipset .

In turn I O subsystem may be coupled to a first bus via an interface . In one embodiment first bus may be a Peripheral Component Interconnect PCI bus or a bus such as a PCI Express bus or another third generation I O interconnect bus although the scope of the present invention is not so limited.

As shown various I O devices may be coupled to first bus along with a bus bridge which may couple first bus to a second bus . In one embodiment second bus may be a low pin count LPC bus. Various devices may be coupled to second bus including for example a keyboard mouse communication device s which may in turn be in communication with a computer network and a data storage unit such as a disk drive or other mass storage device which may include code in one embodiment. The code may include instructions for performing embodiments of one or more of the methods described above. Further an audio I O may be coupled to second bus .

Note that other embodiments are contemplated. For example instead of the point to point architecture shown a system may implement a multi drop bus or another such communication topology. Also the elements of the Figure may alternatively be partitioned using more or fewer integrated chips than shown in the Figure.

Example 1 includes an apparatus comprising an out of band cryptoprocessor including secure non volatile storage that couples to a root index having a fixed address and comprises first and second variables referenced by the root index and semiconductor integrated code SIC including embedded processor logic to initialize a processor and embedded memory logic to initialize a memory coupled to the processor wherein a the SIC is to be executed responsive to resetting the processor and prior to providing control to boot code and b the SIC is to perform pre boot operations in response to accessing at least one of the first and second variables. The cryptoprocessor may be out of band with the processor.

In example 2 the subject matter of Example 1 can optionally include the boot code wherein the boot code is to perform boot operations in response to accessing at least one of the first and second variables.

In example 3 the subject matter of Examples 1 2 can optionally wherein the first and second variables are Unified Extensible Firmware Interface UEFI variables and the cryptoprocessor includes an out of band Trusted Product Module TPM .

In example 4 the subject matter of Examples 1 3 can optionally include wherein the SIC is to determine locations for the first and second variables in response to accessing the root index and the boot code is to determine the locations for the first and second variables in response to accessing the root index.

In example 5 the subject matter of Examples 1 4 can optionally include wherein at least one of the SIC and an operating system OS is to write to the first variable in response to at least one of the SIC the OS and the boot code accessing the root index.

In example 6 the subject matter of Examples 1 5 can optionally include wherein the first and second variables are accessible during both runtime and boottime.

In example 7 the subject matter of Examples 1 6 can optionally include wherein the first and second variables are accessible to the SIC during both runtime and boottime and are accessible to an operating system OS during runtime.

In example 8 the subject matter of Examples 1 7 can optionally include wherein the first and second variables are accessible during runtime to both operating system OS and system management mode SMM operations.

In example 9 the subject matter of Examples 1 8 can optionally include wherein the first and second variables are not simultaneously accessible during runtime to both of the OS and SMM operations.

In example 10 the subject matter of Examples 1 9 can optionally include wherein the SIC is included in the cryptoprocessor and the secure non volatile storage includes the root index.

In example 11 the subject matter of Examples 1 10 can optionally include wherein the first variable includes at least one of a a root key for a platform that couples the cryptoprocessor to the processor and to the memory b configuration data for the processor and c a hash of a variable. Thus non volatile storage that comprises first and second variables may constitute non volatile storage that comprises first and second hashes of variables. The hash itself may be construed as a variable. Embodiments are not limited to hashes and may include other space saving derivatives of variables.

In example 12 the subject matter of Examples 1 11 can optionally include wherein the first variable is at least one of write protected and read protected.

Example 13 includes a method executed by a processor comprising executing semiconductor integrated code SIC responsive to the processor being reset wherein executing the SIC includes executing a embedded processor logic to initialize the processor b embedded memory logic to initialize a memory coupled to the processor and c pre boot operations in response to accessing at least one of first and second variables after executing the SIC providing control to the boot code and wherein the processor is coupled to a cryptoprocessor that includes secure non volatile storage that couples to a root index having a fixed address and comprises the first and second variables referenced by the root index.

In example 14 the subject matter of Example 13 can optionally include the boot code performing boot operations in response to accessing at least one of the first and second variables.

In example 15 the subject matter of Examples 13 14 can optionally include the SIC determining locations for the first and second variables in response to accessing the root index and the boot code determining the locations for the first and second variables in response to accessing the root index.

In example 16 the subject matter of Examples 13 15 can optionally include at least one of the SIC and an operating system OS writing to the first variable in response to at least one of the SIC the OS and the boot code accessing the root index.

In example 17 the subject matter of Examples 13 16 can optionally include the SIC accessing the first and second variables during both runtime and boottime and an operating system accessing the first and second variables during runtime.

In example 18 the subject matter of Examples 13 17 can optionally include accessing the first and second variables during both runtime and boottime.

In example 19 the subject matter of Examples 13 18 can optionally include the SIC accessing the first and second variables during both runtime and boottime and an operating system OS accessing the first and second variables during runtime.

In example 20 the subject matter of Examples 13 19 can optionally include wherein the first variable includes at least one of a a root key for a platform that couples the cryptoprocessor to the processor and to the memory and b configuration data for the processor.

In example 21 at least one machine readable medium comprising a plurality of instructions that in response to being executed on a computing device cause the computing device to carry out a method according to any one of examples 13 to 20.

Example 23 includes a cryptoprocessor including secure non volatile storage that couples to an index and comprises a first variable referenced by the index and semiconductor integrated code SIC including embedded processor logic to initialize a processor wherein a the SIC is to be executed responsive to resetting the processor and accessing the first variable and b the first variable is accessible during both runtime and boottime.

In example 24 the subject matter of Example 23 can optionally include boot code wherein the boot code performs boot operations in response to accessing the first variable the SIC determines a location for the first variable in response to accessing the index and the boot code determines the location for the first variable in response to accessing the index.

While the present invention has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention.

