---

title: Fast port failover in a network switch
abstract: A first port of a network device having a plurality of ports. The first port includes a memory configured to store an identifier of a backup port associated with the first port a redirect circuit, and a loopback circuit. The redirect circuit is configured to, in response to a failure of the first port, redirect first frames of data, to be received from the first port by the network device, to the backup port associated with the first port. The loopback circuit is configured to, in response to the failure of the first port, redirect second frames of data, received by the first port from the network device, to the backup port associated with the first port.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09344328&OS=09344328&RS=09344328
owner: Marvell International Ltd.
number: 09344328
owner_city: Hamilton
owner_country: BM
publication_date: 20131022
---
This application is a continuation of U.S. application Ser. No. 13 371 918 now U.S. Pat. No. 8 566 649 filed Feb. 13 2012 which is a continuation of U.S. application Ser. No. 12 906 911 now U.S. Pat. No. 8 117 503 filed Oct. 18 2010 which is a continuation of U.S. application Ser. No. 12 001 292 now U.S. Pat. No. 7 818 628 filed of Dec. 11 2007 which is a continuation of U.S. application Ser. No. 11 525 326 now U.S. Pat. No. 7 308 612 filed on Sep. 22 2006 which is a continuation of U.S. application Ser. No. 10 353 451 now U.S. Pat. No. 7 120 834 filed on Jan. 28 2003 which claims the benefit of U.S. Provisional Patent Application Ser. No. 60 368 936 filed Mar. 29 2002 the disclosures of the applications referenced above are incorporated herein by reference.

The present invention relates generally to data communications. More particularly the present invention relates to port failover in network switches and routers.

When a port fails in a network switch the switch executes a failover process. In conventional failover processes a processor either within the switch or external to the switch modifies forwarding tables in the switch. The forwarding tables are used by the switch to direct data from port to port. The failover process modifies the forwarding tables to redirect traffic away from the failed port to other ports in the switch.

One disadvantage of this approach is that modifying forwarding tables is a time consuming process especially in a large switch because some or all of the information in one forwarding table is replicated across many forwarding tables and or because the forwarding tables are large. All of these forwarding tables must be modified. Until all of the forwarding tables are modified data transmitted to the failed port either must be re transmitted or is lost.

In general in one aspect the invention features a network switch comprising a plurality of ports each adapted to exchange frames of data with one or more network devices a transfer circuit adapted to transfer the frames of the data between the ports and wherein at least one of the ports comprises a loopback circuit adapted to send to the transfer circuit when the one of the ports is not operational each frame of the data received by the one of the ports from the transfer circuit and a redirect circuit adapted to cause the transfer circuit to transfer to one or more predetermined others of the ports when the one of the ports is not operational each frame of the data received by the transfer circuit from the one of the ports.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

The leading digit s of each reference numeral used in this specification indicates the number of the drawing in which the reference numeral first appears.

Associated with each frame of data are a source address that is associated with the network device that is the source of the frame a destination address that is associated with the network device that is the destination of the frame and one or more destination port identifiers that identify ports in the network switch . In some cases an address that is associated with a network device identifies the network device. In other cases such as with protocols like ATM and MPLS an address that is associated with a network device identifies a path for the network device. Forwarding tables contain associations between the addresses and ports . Forwarding tables can include bridge tables internet protocol IP next hops tables multi protocol layer switching MPLS next hops tables tunnels tables address translation tables for different layers and the like. Forwarding tables can be populated before provisioning of the network switch and or by learning processes executed during the operation of the network switch . For example when a learning mode is enabled for a port a controller such as local CPU master CPU or some other device modifies the associations contained in the forwarding tables to associate the port with the source addresses of frames received by forwarding engine from the port .

Forwarding engine uses information stored in forwarding tables to transfer the frames between the ports in a line card and between the ports on one line card and the ports on other line cards . When all of the ports are operational forwarding engine uses information stored in forwarding tables and the destination addresses of the frames to transfer the frames between the ports . For example when forwarding engine receives a frame from a port it replaces the destination port identifier associated with the frame with the port identifier for the port associated with the destination address of the frame using the associations contained in forwarding tables .

Conventional ports in a network switch often include a feature referred to as loopback mode. Loopback mode is conventionally used as a diagnostic procedure in which a frame egressed by a port is then ingressed by the port. The returned frame can be compared with the transmitted frame to evaluate the integrity of the port or the communications link serving the port. Referring to a frame of data is ingressed by a port when it is received by network side interface of PHY PHY side interface of MAC or MAC side interface of port queue . A frame of data is egressed by a port when it is received by MAC side interface of PHY queue side interface of MAC or switch side interface of port queue .

The inventor has recognized that loopback mode can be used for another purpose. In a preferred embodiment loopback mode is used as part of a fast failover process to redirect frames forwarded to a failed port by forwarding engine so that the frames are instead forwarded to one or more other ports in the network switch referred to herein as backup ports. In this process loopback mode is implemented by a loopback circuit that can be implemented within one or more of the port queues of the network switch within the media access controller of the failed port within the physical layer device of the failed port or by other methods. The loopback circuit implements loopback mode in response to the failure of the port . A redirect circuit then redirects the frames returned by the loopback circuit to the backup ports as described in detail below.

Process begins when switch detects the failure of a port that is that the port is not operational step . Switch can detect the failure of the port by any of several methods well known in the relevant arts. For example port failure can be detected by the physical layer device in the port by the media access controller in the port by devices at other layers in the port or by a controller such as the local CPU or the master CPU . For example the local CPU can determine that a port has failed when the port attempts to egress a frame of data a predetermined number of times by testing a register bit in the port or by like methods.

In a preferred embodiment the fast failover process can be enabled or disabled for each port . Therefore process determines whether fast failover is enabled for the failed port step . If fast failover is disabled for the failed port process informs the application layer of the network switch software of the port failure step preferably using a top layer application programming interface executing on master CPU and then ends step . The application layer then modifies the forwarding tables according to conventional methods. For example the application layer modifies the forwarding tables to replace the associations between addresses and the failed port with associations between the addresses and the backup ports.

But if fast failover is enabled for the failed port process places the failed port in a mode referred to herein as redirect mode step . In redirect mode a port causes transfer circuit to transfer all frames received from the port to one or more predetermined backup ports regardless of the content of the frames such as layer 2 and layer 3 addresses.

The identity of the backup ports associated with a port is preferably stored in a redirect register in the port . When a port belongs to a link aggregation group the contents of redirect register identify the link aggregation group. When a port does not belong to a link aggregation group the contents of redirect register identify a backup port in this case the redirect register is preferably loaded before provisioning of the network switch . Redirect mode is preferably implemented by a redirect circuit that can be implemented within one or more of the port queues of the network switch within the media access controller of the failed port within the physical layer device of the failed port or by other methods.

The redirect circuit implements redirect mode in response to the failure of the port . The redirect circuit replaces the destination port identifier associated with each frame received by the failed port from transfer circuit with the destination port identifiers of one or more of the backup ports. In one embodiment the redirect circuit then causes forwarding engine to forward all frames received from the failed port to the one or more backup ports identified by the new destination port identifiers without regard to the destination addresses associated with the frames. In another embodiment the redirect circuit causes bypass circuit to forward all frames received from the failed port to the one or more backup ports identified by the new destination port identifiers.

As mentioned above switch can populate forwarding tables using a learning process. As part of this process each time a switch ingresses a frame on a port the switch associates that port with a source address of the frame such as a media access control MAC address. However when a port is in loopback mode such learning is not beneficial. Therefore process disables address learning step so that frames returned to the failed port by the loopback circuit will not be learned.

Process then places the port in loopback mode step . At this point in the process all frames sent to the failed port to be egressed by the port are instead transmitted to one or more backup ports . These backup ports then egress the frames.

Finally process informs the application layer of the network switch software of the port failure step preferably using a top layer application programming interface executing on master CPU and then ends step . The application layer then modifies the forwarding tables to direct traffic away from the failed port as described above.

Portions of process can be implemented by local CPU master CPU forwarding engine and by controllers located within ports or elsewhere in network switch . Although the steps of process are described in a particular order other embodiments can execute the steps in other orders as will be apparent to one skilled in the relevant art after reading this description.

Process begins when switch detects the failure of a port that is that the port is not operational step . Switch can detect the failure of the port by any of several methods well known in the relevant arts. For example port failure can be detected by the physical layer device in the port by the media access controller in the port by devices at other layers in the port or by a controller such as the local CPU or the master CPU . For example the local CPU can determine that a port has failed when the port attempts to egress a frame of data a predetermined number of times by testing a register bit in the port or by like methods.

In a preferred embodiment the fast failover process can be enabled or disabled for each port . Therefore process determines whether fast failover is enabled for the failed port step . If fast failover is disabled for the failed port process informs the application layer of the network switch software of the port failure step preferably using a top layer application programming interface executing on master CPU and then ends step . The application layer then modifies the forwarding tables as described above.

Process removes the failed port from the link aggregation group step . Each line card optionally includes a link aggregation group LAG table stored in memory that lists the ports that belong to each link aggregation group. Process determines whether a port belongs to a link aggregation group by reading the link aggregation table and removes a port from a link aggregation group by writing to the link aggregation table .

But if fast failover is enabled for the failed port process then places the failed port in redirect mode step . In redirect mode a port causes transfer circuit to transfer all frames received from the port to one or more predetermined backup ports regardless of the content of the frames such as layer 2 and layer 3 addresses as described above. The backup ports are preferably the ports belonging to the link aggregation group to which the failed port belongs. The identity of the link aggregation group is preferably stored in redirect register in the port .

As mentioned above switch can populate forwarding tables using a learning process. As part of this process each time a switch ingresses a frame on a port the switch associates that port with a source address of the frame such as a media access control MAC address. However when a port is in loopback mode such learning is not beneficial. Therefore process disables address learning step so that frames returned to the failed port by the loopback circuit will not be learned.

Process then places the port in loopback mode step . At this point in the process all frames sent to the failed port to be egressed by the port are instead transmitted to the backup port or ports in the link aggregation group of the failed port preferably according to a fairness scheme. These backup ports then egress the frames.

Finally process informs the application layer of the network switch software of the port failure step preferably using a top layer application programming interface executing on master CPU and then ends step . The application layer then modifies the forwarding tables to direct traffic away from the failed port as described above.

The failover processes and execute quickly regardless of the size of the network switch because the duration of the fast failover process is unrelated to the number of line cards the number of forwarding tables and the size of the forwarding tables . In general the interval between port failure and completion of the fast failover process is less than a millisecond.

But when port is not operational demultiplexer directs all frames from queue side interface to replace circuit . Replace circuit replaces the destination port identifier associated with each frame as described above. Multiplexer then directs the frames to queue side interface . While port is not operational forwarding override circuit causes transfer circuit to transfer the frames to the port identified by the new destination port identifier associated with the frame rather than according to the destination address of the frame.

But when port is not operational demultiplexer directs all frames from MAC side interface to replace circuit . Replace circuit replaces the destination port identifier associated with each frame as described above. Multiplexer then directs the frames to MAC side interface . While port is not operational forwarding override circuit causes transfer circuit to transfer the frames to the port identified by the new destination port identifier associated with the frame rather than according to the destination address of the frame.

But when port is not operational queue controller directs all frames from egress queue to replace circuit . Replace circuit replaces the destination port identifier associated with each frame as described above. Queue controller then directs the frames to ingress queue . While port is not operational forwarding override circuit causes transfer circuit to transfer the frames to the port identified by the new destination port identifier associated with the frame rather than according to the destination address of the frame.

While show the loopback and redirect circuits implemented within the same layer of the port that is within only one of PHY AMC or port queue it will be apparent to one skilled in the relevant arts that the loopback and redirect circuits can be implemented in separate layers of the port.

The invention can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Apparatus of the invention can be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a programmable processor and method steps of the invention can be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention can be implemented in a hardware state machine or advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. Each computer program can be implemented in a high level procedural or object oriented programming language or in assembly or machine language if desired and in any case the language can be a compiled or interpreted language. Suitable processors include by way of example both general and special purpose microprocessors. Generally a processor will receive instructions and data from a read only memory and or a random access memory. Generally a computer will include one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM disks. Any of the foregoing can be supplemented by or incorporated in ASICs application specific integrated circuits .

A number of implementations of the invention have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. List any additional modifications or variations. Accordingly other implementations are within the scope of the following claims.

