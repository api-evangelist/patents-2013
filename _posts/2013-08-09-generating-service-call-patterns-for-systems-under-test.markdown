---

title: Generating service call patterns for systems under test
abstract: Disclosed are various embodiments for generating a service call pattern for a system. A monitor is installed on a first and a second service call channel. Each service call channel is used by a first and second system under test, respectively. Through the monitor, service calls are received from the respective system under test. The service calls are issued to at least one service. A first service call pattern is generated based at least in part on the plurality of service calls issued by the first system under test. A second service call pattern is generated based at least in part on the plurality of service calls issued by the second under test. The first service call pattern report and the second service call pattern report are compared. An error condition if the comparison indicates a difference greater than a predefined threshold.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08977901&OS=08977901&RS=08977901
owner: Amazon Technologies, Inc.
number: 08977901
owner_city: Seattle
owner_country: US
publication_date: 20130809
---
This application is a continuation of U.S. patent application Ser. No. 12 890 791 titled Generating Service Call Patterns for Systems Under Test filed Sep. 27 2010 the entire contents of which is hereby incorporated herein by reference.

A common software architecture in use today is one based on software services where software components communicate with each other over a network and each component exposes a set of service calls to be invoked by other components. In testing a software system that is built on software services it is sometimes useful to instrument the software components to record the particular set of service calls that is invoked as a result of executing under a particular set of test stimuli. Such instrumentation code may be added to either the caller or the callee. However instrumentation code must be maintained and updated when new service calls are added. Furthermore changing the source code on the callee is not always possible when that code is owned or maintained by a third party. Finally recording all the service calls results in a large amount of data which must then be reviewed to discover useful information.

The present disclosure relates to testing systems which communicate with other components through service calls over a network. Service calls by a system under test are monitored and information about the service calls is recorded. The services may be provided by internal or external third party components. In some embodiments the system under test is a set of software components and the service calls made by the system under test are to other software components. The service call information is used to generate a pattern of service calls made by a particular system under test when a particular set of test inputs is applied. A comparison of the differences in the two service call patterns may be provided. In some embodiments an error condition may be reported if the comparison indicates a difference greater than a predefined threshold. By generating service call patterns for different systems under test and then comparing the service call patterns differences between the systems under test can be identified and isolated. Because the information is generated through monitoring there is no need to alter the system under test by adding test instrumentation code.

With reference to shown is a networked environment according to various embodiments. The networked environment includes one or more computing devices one or more computing devices and one or more computing devices in data communication with each other by way of a network . The computing devices and are also in data communication with one or more computing devices by way of a network . The networks and include for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

Each of the computing devices may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. A plurality of computing devices together may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience each of the computing devices is referred to herein in the singular. Even though a computing device is referred to in the singular it is understood that a plurality of each computing device may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the monitor computing device according to various embodiments. The components executed on the monitor computing device for example include a service call monitor . The service call monitor is executed to monitor service calls from one system to another and to generate a pattern representing the service calls issued by a particular system under a particular set of inputs. The components executed on the monitor computing device may also include other applications services processes systems engines or functionality not discussed in detail herein.

Also various data is stored in a data store that is accessible to the monitor computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below. The data stored in the data store includes data accessed by the service call monitor for example service call pattern reports as well as potentially other data.

Various applications and or other functionality may be executed in the service provider computing device according to various embodiments. The components executed on the service provider computing device for example include a service . The service is executed to provide a service to a remote caller through a service call invoked over the network . In various embodiments the service call may utilize any type of middleware framework such as remote procedure calls service oriented architecture protocol SOAP representational state transfer REST Windows Communication Foundation and other frameworks. The components executed on the service provider computing device may also include other applications services processes systems engines or functionality not discussed in detail herein.

Various applications and or other functionality may be executed in the SUT computing device according to various embodiments. The components executed on the SUT computing device for example include one or more systems under test . When executed each system under test makes service calls over the network to various components executing on other computing devices such as service . The components executed on the SUT computing device may also include other applications services processes systems engines or functionality not discussed in detail herein.

Various applications and or other functionality may be executed in the test computing device . The components executed on the test computing device for example include a driver application . The driver application is executed to provide a set of test stimuli to the system under test which executes on the computing device . The components executed on the test computing device may also include other applications services processes systems engines or functionality not discussed in detail herein.

Next a general description of the operation of the various components of the networked environment is provided. To begin the driver application executing on the test computing device provides a predefined set of stimuli to the system under test . In some embodiments this predefined set of stimuli is part of a test case. The predefined set of stimuli causes the system under test to issue various service calls over the network to one or more of the services . The service call monitor executing on the monitor computing device intercepts these service calls and generates a service call pattern that is representative of the particular set of service calls issued in response to the stimuli provided by the driver application . A system under test that issues service calls A B and C will have a different service call pattern than another system under test that issues service calls A B and D. The service call monitor may create a report that includes this service call pattern where the service call pattern report is associated with the combination of a system under test and a stimulus set.

The driver application may run the same set of stimuli to two different systems under test producing two service call pattern reports. For example one system under test may be a production or golden system and the other may be a production candidate system. A comparison of the differences in the two service call patterns may be provided by for example the driver application the service call monitor or some other component. In some embodiments an error condition may be reported if the comparison indicates a difference greater than a threshold where the threshold may be a predefined value or a user defined value.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the service call monitor according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the service call monitor as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the monitor computing device according to one or more embodiments.

The process of starts when a test case begins executing. Beginning at box the service call monitor installs a monitor on a channel on which the system under test issues service calls to services . In some embodiments this monitor is passive such that service calls are delivered to the service call monitor and to the system under test . In other embodiments the monitor is responsible for forwarding the service calls on to the system under test . In some embodiments the data received by the service call monitor on the monitored channel is a hypertext transfer protocol HTTP stream. In some embodiments the data received by the service call monitor on the monitored channel is a series of service oriented architecture protocol SOAP transactions. In some embodiments the monitor is installed on the protocol stack via a sockets interface.

Next at box the service call monitor receives a service call that is issued by the system under test on the monitored channel. At box the service call monitor records information about the service call. This information may include for example the name of the service call an identifier for the service call such a revision number the number of parameters to the service call the size of the parameters etc. In some embodiments the service call monitor maintains a counter for each service call and increments the corresponding counter. In some embodiments the service call monitor keeps track of the order of the service calls while in other embodiments the order of service calls is irrelevant to the service call pattern. Some embodiments not shown also monitor responses to or results returned from service calls and also record information about these responses.

At box it is determined whether the driver application has completed. If at box the driver application has not completed processing continues at box where another service call is received and appropriate information recorded. As service calls are received and processed the recorded information forms the service call pattern. In this manner the service call pattern is generated based on the recorded information. As service calls X Y and Z are received the information about X Y and Z forms a service call pattern for the particular test case and system under test.

If at box it is determined that the driver application has completed the processing continues at box where the information recorded at box is provided as a service call pattern report. In some embodiments the recorded information undergoes further processing to produce the report. For example information that identifies the test case and the system under test may be included in the report. In some embodiments the service call pattern report is stored for later retrieval upon request. In other embodiments the service call pattern report is automatically provided to another entity for example the driver application .

Turning now to shown is a diagram that provides one example of how the service call monitor interacts with various other components of according to various embodiments. It is understood that the diagram of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the components as described herein. As an alternative the diagram of may be viewed as depicting an example of steps of a method implemented in the monitor computing device and the test computing device according to one or more embodiments.

The components shown in include the service call monitor the service the system under test and the driver application . As shown in the service call monitor monitors the service calls issued by the system under test to the services and . The driver application initiates a test of the system under test providing to the system under test a stimulus X and a stimulus Y . As a result of the stimuli the system under test issues various service calls to the services and . Specifically the stimulus X causes the system under test to issue a service call SS1.X1 to service and a service call SS2.X1 to service . Stimulus Y causes the system under test to issue a service call SS1.Y1 to service and a service call SS3.Y2 to service . The service call pattern produced by the service call monitor for stimulus XY is then SS1.X1 SS2.X2 SS1.Y1 SS3.Y2.

Moving on to shown are diagrams that provide an example of how the service call monitor interacts with various other components of according to various embodiments. It is understood that the diagrams of provide merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the components as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the monitor computing device and the test computing device according to one or more embodiments.

The components shown in include the service call monitor the service the system under test and the driver application . Starting with at step the driver application requests the service call monitor to install a monitor on the service call channel for the system under test . As a result of the request the service call monitor installs a monitor on the service call channel for the system under test . At step the driver application initiates execution of the system under test using a particular set of test stimuli. When the test completes the service call monitor provides a service call pattern report to the driver application .

Turning now to at step the driver application requests the service call monitor to install a monitor on the service call channel for the system under test . As a result of the request the service call monitor installs a monitor on the service call channel for the system under test . At step the driver application initiates execution of the system under test using a particular set of test stimuli. This may be the same set of test stimuli as used for system under test or it may be different. When the test completes the service call monitor provides a service call pattern report to the driver application .

With reference now to shown is a schematic block diagram of the monitor computing device according to an embodiment of the present disclosure. The monitor computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the monitor computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the service call monitor and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor . While not illustrated the SUT computing device and the service provider computing device also includes components like those shown in whereby the services and the systems under test are stored in a memory and executable by a processor. Similarly although not illustrated the test computing device also includes components like those shown in whereby the driver application are stored in a memory and executable by a processor.

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Javascript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the service call monitor the service the system under test the driver application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The diagrams of A and B show the functionality and operation of an implementation of portions of the service call monitor the service the system under test and or the driver application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the diagrams of A and B may show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in A and B may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the service call monitor the service the system under test and the driver application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

