---

title: Classification and encoder selection based on content
abstract: In various embodiments, methods and systems are disclosed for dynamic runtime implementation and end-to-end biased tuning of a two stage image classification system based on a decision function that uses network packet sizes and multiple image characteristics to determine the selection of an encoding codec to reduce overall network bandwidth consumption.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08837824&OS=08837824&RS=08837824
owner: Microsoft Corporation
number: 08837824
owner_city: Redmond
owner_country: US
publication_date: 20131108
---
This application is a continuation of U.S. patent application Ser. No. 13 753 876 filed on Jan. 30 2013 now U.S. Pat. No. 8 600 155 which is a continuation of U.S. patent application Ser. No. 12 751 065 filed on Mar. 31 2010 now U.S. Pat. No. 8 385 666 the entire contents of which are incorporated herein by reference.

Remote computing systems can enable users to remotely access hosted resources. Servers on the remote computing systems can execute programs and transmit signals indicative of a user interface to clients that can connect by sending signals over a network conforming to a communication protocol such as the TCP IP protocol. Each connecting client may be provided a remote presentation session i.e. an execution environment that includes a set of resources. Each client can transmit signals indicative of user input to the server and the server can apply the user input to the appropriate session. The clients may use remote presentation protocols such as the Remote Desktop Protocol RDP to connect to a server resource.

Remote presentation compression algorithms are employed to reduce the bandwidth of the display stream to levels that are acceptable for transmission over local area networks wide area networks and low bandwidth networks. Such algorithms typically trade off CPU time on the server side for a lower required bandwidth. Compression algorithms may work well on certain image content. However the algorithms may perform poorly on other types of content. For example compression algorithms may work well on text but not on natural images. The output of these compression encoders may not the final stage to the network as there may be other layers involved such as bulk compression and remote presentation packet encapsulation. These other layers may also effect overall bandwidth usage. In some cases an image that encodes well with one bitmap encoder codec may compresses poorly with the remote presentation bulk compressor prior to network transmission.

To lower overall network bandwidth usage an encoding method may be selected based on how the image content relates to the final bandwidth used rather than using predetermined selection criteria for text simple block diagrams natural images and the like. Rather than providing a classifier and target sub codecs for each possible classified output the output may be classified based on a range using multiple image and compression characteristics. A decision function may then be tuned based on the network traffic conditions.

In various embodiments methods and systems are disclosed for the dynamic runtime implementation and end to end biased tuning of a two stage image classification system based on a decision function that uses network packet sizes and multiple image characteristics to determine the selection of an encoding codec to reduce overall network bandwidth consumption.

Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the disclosure. Certain well known details often associated with computing and software technology are not set forth in the following disclosure to avoid unnecessarily obscuring the various embodiments of the disclosure. Further those of ordinary skill in the relevant art will understand that they can practice other embodiments of the disclosure without one or more of the details described below. Finally while various methods are described with reference to steps and sequences in the following disclosure the description as such is for providing a clear implementation of embodiments of the disclosure and the steps and sequences of steps should not be taken as required to practice this disclosure.

Embodiments may execute on one or more computers. and the following discussion are intended to provide a brief general description of a suitable computing environment in which the disclosure may be implemented. One skilled in the art can appreciate that computer systems can have some or all of the components described with respect to computer of .

The term circuitry used throughout the disclosure can include hardware components such as hardware interrupt controllers hard drives network adaptors graphics processors hardware based video audio codecs and the firmware software used to operate such hardware. The term circuitry can also include microprocessors configured to perform function s by firmware or by switches set in a certain way or one or more logical processors e.g. one or more cores of a multi core general processing unit. The logical processor s in this example can be configured by software instructions embodying logic operable to perform function s that are loaded from memory e.g. RAM ROM firmware and or virtual memory. In example embodiments where circuitry includes a combination of hardware and software an implementer may write source code embodying logic that is subsequently compiled into machine readable code that can be executed by a logical processor. Since one skilled in the art can appreciate that the state of the art has evolved to a point where there is little difference between hardware software or a combination of hardware software the selection of hardware versus software to effectuate functions is merely a design choice. Thus since one of skill in the art can appreciate that a software process can be transformed into an equivalent hardware structure and a hardware structure can itself be transformed into an equivalent software process the selection of a hardware implementation versus a software implementation is trivial and left to an implementer.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The system of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another computer a server a router a network PC a peer device or other common network node a virtual machine and typically can include many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in can include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer can be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer can typically include a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external can be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are examples and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the disclosure are particularly well suited for computer systems nothing in this document is intended to limit the disclosure to such embodiments.

Referring now to another embodiment of an exemplary computing system is depicted. Computer system can include a logical processor e.g. an execution core. While one logical processor is illustrated in other embodiments computer system may have multiple logical processors e.g. multiple execution cores per processor substrate and or multiple processor substrates that could each have multiple execution cores. As shown by the figure various computer readable storage media can be interconnected by one or more system busses which couples various system components to the logical processor . The system buses may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. In example embodiments the computer readable storage media can include for example random access memory RAM storage device e.g. electromechanical hard drive solid state hard drive etc. firmware e.g. FLASH RAM or ROM and removable storage devices such as for example CD ROMs floppy disks DVDs FLASH drives external storage devices etc. It should be appreciated by those skilled in the art that other types of computer readable storage media can be used such as magnetic cassettes flash memory cards digital video disks and Bernoulli cartridges.

The computer readable storage media provide non volatile storage of processor executable instructions data structures program modules and other data for the computer . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer system such as during start up can be stored in firmware . A number of programs may be stored on firmware storage device RAM and or removable storage devices and executed by logical processor including an operating system and or application programs.

Commands and information may be received by computer through input devices which can include but are not limited to a keyboard and pointing device. Other input devices may include a microphone joystick game pad scanner or the like. These and other input devices are often connected to the logical processor through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter which can be part of or connected to a graphics processor . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The exemplary system of can also include a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus.

Computer system may operate in a networked environment using logical connections to one or more remote computers such as a remote computer. The remote computer may be another computer a server a router a network PC a peer device or other common network node and typically can include many or all of the elements described above relative to computer system .

When used in a LAN or WAN networking environment computer system can be connected to the LAN or WAN through a network interface card . The NIC which may be internal or external can be connected to the system bus. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections described here are exemplary and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the present disclosure are particularly well suited for computerized systems nothing in this document is intended to limit the disclosure to such embodiments.

A remote desktop system is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network e.g. using protocols based on the International Telecommunications Union ITU T.120 family of protocols such as Remote Desktop Protocol RDP to an application on a remote desktop server. The application processes the input as if the input were entered at the remote desktop server. The application generates output in response to the received input and the output is transferred over the network to the client computer system. The client computer system presents the output data. Thus input is received and output presented at the client computer system while processing actually occurs at the remote desktop server. A session can include a shell and a user interface such as a desktop the subsystems that track mouse movement within the desktop the subsystems that translate a mouse click on an icon into commands that effectuate an instance of a program etc. In another example embodiment the session can include an application. In this example while an application is rendered a desktop environment may still be generated and hidden from the user. It should be understood that the foregoing discussion is exemplary and that the presently disclosed subject matter may be implemented in various client server environments and not limited to a particular remote desktop services product.

In most if not all remote desktop environments input data entered at a client computer system typically includes mouse and keyboard data representing commands to an application and output data generated by an application at the remote desktop server typically includes video data for display on a video output device. Many remote desktop environments also include functionality that extend to transfer other types of data such as audio printing commands clipboard and the like.

Communications channels can be used to extend the RDP protocol by allowing plug ins to transfer data over an RDP connection. Many such extensions exist. Features such as printer redirection clipboard redirection port redirection etc. use communications channel technology. Thus in addition to input and output data there may be many communications channels that need to transfer data. Accordingly there may be occasional requests to transfer output data and one or more channel requests to transfer other data contending for available network bandwidth.

Referring now to depicted are high level block diagrams of computer systems configured to effectuate virtual machines. As shown in the figures computer system can include elements described in and components operable to effectuate virtual machines. One such component is a hypervisor that may also be referred to in the art as a virtual machine monitor. The hypervisor in the depicted embodiment can be configured to control and arbitrate access to the hardware of computer system . Broadly stated the hypervisor can generate execution environments called partitions such as child partition through child partition N where N is an integer greater than or equal to 1 . In embodiments a child partition can be considered the basic unit of isolation supported by the hypervisor that is each child partition can be mapped to a set of hardware resources e.g. memory devices logical processor cycles etc. that is under control of the hypervisor and or the parent partition and hypervisor can isolate one partition from accessing another partition s resources. In embodiments the hypervisor can be a stand alone software product a part of an operating system embedded within firmware of the motherboard specialized integrated circuits or a combination thereof.

In the above example computer system includes a parent partition that can also be thought of as domain in the open source community. Parent partition can be configured to provide resources to guest operating systems executing in child partitions N by using virtualization service providers VSPs that are also known as back end drivers in the open source community. In this example architecture the parent partition can gate access to the underlying hardware. The VSPs can be used to multiplex the interfaces to the hardware resources by way of virtualization service clients VSCs that are also known as front end drivers in the open source community. Each child partition can include one or more virtual processors such as virtual processors through that guest operating systems through can manage and schedule threads to execute thereon. Generally the virtual processors through are executable instructions and associated state information that provide a representation of a physical processor with a specific architecture. For example one virtual machine may have a virtual processor having characteristics of an Intel x86 processor whereas another virtual processor may have the characteristics of a PowerPC processor. The virtual processors in this example can be mapped to logical processors of the computer system such that the instructions that effectuate the virtual processors will be backed by logical processors. Thus in these example embodiments multiple virtual processors can be simultaneously executing while for example another logical processor is executing hypervisor instructions. Generally speaking and as illustrated by the figures the combination of virtual processors various VSCs and memory in a partition can be considered a virtual machine such as virtual machine or .

Generally guest operating systems through can include any operating system such as for example operating systems from Microsoft Apple the open source community etc. The guest operating systems can include user kernel modes of operation and can have kernels that can include schedulers memory managers etc. A kernel mode can include an execution mode in a logical processor that grants access to at least privileged processor instructions. Each guest operating system through can have associated file systems that can have applications stored thereon such as remote desktop servers e commerce servers email servers etc. and the guest operating systems themselves. The guest operating systems can schedule threads to execute on the virtual processors and instances of such applications can be effectuated.

Referring now to illustrated is an alternative architecture that can be used to effectuate virtual machines. depicts similar components to those of however in this example embodiment the hypervisor can include the virtualization service providers and device drivers and parent partition may contain configuration utilities . In this architecture hypervisor can perform the same or similar functions as the hypervisor of . The hypervisor of can be a stand alone software product a part of an operating system embedded within firmware of the motherboard or a portion of hypervisor can be effectuated by specialized integrated circuits. In this example parent partition may have instructions that can be used to configure hypervisor however hardware access requests may be handled by hypervisor instead of being passed to parent partition .

Referring now to computer may include circuitry configured to provide remote desktop services to connecting clients. In an example embodiment the depicted operating system may execute directly on the hardware or a guest operating system or may be effectuated by a virtual machine such as VM or VM . The underlying hardware and is indicated in the illustrated type of dashed lines to identify that the hardware can be virtualized.

Remote services can be provided to at least one client such as client while one client is depicted remote services can be provided to more clients. The example client can include a computer terminal that is effectuated by hardware configured to direct user input to a remote server session and display user interface information generated by the session. In another embodiment client can be effectuated by a computer that includes similar elements as those of computer . In this embodiment client can include circuitry configured to effect operating systems and circuitry configured to emulate the functionality of terminals e.g. a remote desktop client application that can be executed by one or more logical processors . One skilled in the art can appreciate that the circuitry configured to effectuate the operating system can also include circuitry configured to emulate a terminal

Each connecting client can have a session such as session which allows the client to access data and applications stored on computer . Generally applications and certain operating system components can be loaded into a region of memory assigned to a session. Thus in certain instances some OS components can be spawned N times where N represents the number of current sessions . These various OS components can request services from the operating system kernel which can for example manage memory facilitate disk reads writes and configure threads from each session to execute on the logical processor . Some example subsystems that can be loaded into session space can include the subsystems that generates desktop environments the subsystems that track mouse movement within the desktop the subsystems that translate mouse clicks on icons into commands that effectuate an instance of a program etc. The processes that effectuate these services e.g. tracking mouse movement are tagged with an identifier associated with the session and are loaded into a region of memory that is allocated to the session.

A session can be generated by a session manager e.g. a process. For example the session manager can initialize and manage each remote session by generating a session identifier for a session space assigning memory to the session space and generating system environment variables and instances of subsystem processes in memory assigned to the session space. The session manager can be invoked when a request for a remote desktop session is received by the operating system .

A connection request can first be handled by a transport stack e.g. a remote desktop protocol RDP stack. The transport stack instructions can configure logical processor to listen for connection messages on a certain port and forward them to the session manager . When sessions are generated the transport stack can instantiate a remote desktop protocol stack instance for each session. Stack instance is an example stack instance that can be generated for session . Generally each remote desktop protocol stack instance can be configured to route output to an associated client and route client input to an environment subsystem for the appropriate remote session.

As shown by the figure in an embodiment an application while one is shown others can also execute can execute and generate an array of bits. The array can be processed by a graphics interface which in turn can render bitmaps e.g. arrays of pixel values that can be stored in memory. As shown by the figure a remote display subsystem can be instantiated which can capture rendering calls and send the calls over the network to client via the stack instance for the session.

In addition to remoting graphics and audio a plug and play redirector can also be instantiated in order to remote diverse devices such as printers mp3 players client file systems CD ROM drives etc. The plug and play redirector can receive information from a client side component which identifies the peripheral devices coupled to the client . The plug and play redirector can then configure the operating system to load redirecting device drivers for the peripheral devices of the client . The redirecting device drivers can receive calls from the operating system to access the peripherals and send the calls over the network to the client .

As discussed above clients may use a protocol for providing remote presentation services such as Remote Desktop Protocol RDP to connect to a resource using terminal services. When a remote desktop client connects to a remote desktop server via a remote desktop server gateway the gateway may open a socket connection with the remote desktop server and redirect client traffic on the remote presentation port or a port dedicated to remote access services. The gateway may also perform certain gateway specific exchanges with the client using a remote desktop server gateway protocol transmitted over HTTPS.

Turning to depicted is a computer system including circuitry for effectuating remote services and for incorporating aspects of the present disclosure. As shown by the figure in an embodiment a computer system can include components similar to those described in and and can effectuate a remote presentation session. In an embodiment of the present disclosure a remote presentation session can include aspects of a console session e.g. a session spawned for a user using the computer system and a remote session. Similar to that described above the session manager can initialize and manage the remote presentation session by enabling disabling components in order to effectuate a remote presentation session.

One set of components that can be loaded in a remote presentation session are the console components that enable high fidelity remoting namely the components that take advantage of 3D graphics and 2D graphics rendered by 3D hardware.

3D 2D graphics rendered by 3D hardware can be accessed using a driver model that includes a user mode driver an API a graphics kernel and a kernel mode driver . An application or any other process such as a user interface that generates 3D graphics can generate API constructs and send them to an application programming interface API such as Direct3D from Microsoft . The API in turn can communicate with a user mode driver which can generates primitives e.g. the fundamental geometric shapes used in computer graphics represented as vertices and constants which are used as building blocks for other shapes and stores them in buffers e.g. pages of memory. In one embodiment the application can declare how it is going to use the buffer e.g. what type of data it is going to store in the buffer. An application such as a videogame may use a dynamic buffer to store primitives for an avatar and a static buffer for storing data that will not change often such as data that represents a building or a forest.

Continuing with the description of the driver model the application can fill the buffers with primitives and issue execute commands. When the application issues an execute command the buffer can be appended to a run list by the kernel mode driver and scheduled by the graphics kernel scheduler . Each graphics source e.g. application or user interface can have a context and its own run list. The graphics kernel can be configured to schedule various contexts to execute on the graphics processing unit . The GPU scheduler can be executed by logical processor and the scheduler can issue a command to the kernel mode driver to render the contents of the buffer. The stack instance can be configured to receive the command and send the contents of the buffer over the network to the client where the buffer can be processed by the GPU of the client.

Illustrated now is an example of the operation of a virtualized GPU as used in conjunction with an application that calls for remote presentation services. Referring to in an embodiment a virtual machine session can be generated by a computer . For example a session manager can be executed by a logical processor and a remote session that includes certain remote components can be initialized. In this example the spawned session can include a kernel a graphics kernel a user mode display driver and a kernel mode display driver . The user mode driver can generate graphics primitives that can be stored in memory. For example the API can include interfaces that can be exposed to processes such as a user interface for the operating system or an application . The process can send high level API commands such as such as Point Lists Line Lists Line Strips Triangle Lists Triangle Strips or Triangle Fans to the API . The API can receive these commands and translate them into commands for the user mode driver which can then generate vertices and store them in one or more buffers. The GPU scheduler can run and determine to render the contents of the buffer. In this example the command to the graphics processing unit of the server can be captured and the content of the buffer primitives can be sent to client via network interface card . In an embodiment an API can be exposed by the session manager that components can interface with in order to determine whether a virtual GPU is available.

In an embodiment a virtual machine such as virtual machine of or can be instantiated and the virtual machine can serve as a platform for execution for the operating system . Guest operating system can embody operating system in this example. A virtual machine may be instantiated when a connection request is received over the network. For example the parent partition may include an instance of the transport stack and may be configured to receive connection requests. The parent partition may initialize a virtual machine in response to a connection request along with a guest operating system including the capabilities to effectuate remote sessions. The connection request can then be passed to the transport stack of the guest operating system . In this example each remote session may be instantiated on an operating system that is executed by its own virtual machine.

In one embodiment a virtual machine can be instantiated and a guest operating system embodying operating system can be executed. Similar to that described above a virtual machine may be instantiated when a connection request is received over the network. Remote sessions may be generated by an operating system. The session manager can be configured to determine that the request is for a session that supports 3D graphics rendering and the session manager can load a console session. In addition to loading the console session the session manager can load a stack instance for the session and configure system to capture primitives generated by a user mode display driver .

The user mode driver may generate graphics primitives that can be captured and stored in buffers accessible to the transport stack . A kernel mode driver can append the buffers to a run list for the application and a GPU scheduler can run and determine when to issue render commands for the buffers. When the scheduler issues a render command the command can be captured by for example the kernel mode driver and sent to the client via the stack instance .

The GPU scheduler may execute and determine to issue an instruction to render the content of the buffer. In this example the graphics primitives associated with the instruction to render can be sent to client via network interface card .

In an embodiment at least one kernel mode process can be executed by at least one logical processor and the at least one logical processor can synchronize rendering vertices stored in different buffers. For example a graphics processing scheduler which can operate similarly to an operating system scheduler can schedule GPU operations. The GPU scheduler can merge separate buffers of vertices into the correct execution order such that the graphics processing unit of the client executes the commands in an order that allows them to be rendered correctly.

One or more threads of a process such as a videogame may map multiple buffers and each thread may issue a draw command. Identification information for the vertices e.g. information generated per buffer per vertex or per batch of vertices in a buffer can be sent to the GPU scheduler . The information may be stored in a table along with identification information associated with vertices from the same or other processes and used to synchronize rendering of the various buffers.

An application such as a word processing program may execute and declare for example two buffers one for storing vertices for generating 3D menus and the other one storing commands for generating letters that will populate the menus. The application may map the buffer and issue draw commands. The GPU scheduler may determine the order for executing the two buffers such that the menus are rendered along with the letters in a way that it would be pleasing to look at. For example other processes may issue draw commands at the same or a substantially similar time and if the vertices were not synchronized vertices from different threads of different processes could be rendered asynchronously on the client thereby making the final image displayed seem chaotic or jumbled.

A bulk compressor can be used to compress the graphics primitives prior to sending the stream of data to the client . In an embodiment the bulk compressor can be a user mode not shown or kernel mode component of the stack instance and can be configured to look for similar patterns within the stream of data that is being sent to the client . In this embodiment since the bulk compressor receives a stream of vertices instead of receiving multiple API constructs from multiple applications the bulk compressor has a larger data set of vertices to sift through in order to find opportunities to compress. That is since the vertices for a plurality of processes are being remoted instead of diverse API calls there is a larger chance that the bulk compressor will be able to find similar patterns in a given stream.

In an embodiment the graphics processing unit may be configured to use virtual addressing instead of physical addresses for memory. Thus the pages of memory used as buffers can be paged to system RAM or to disk from video memory. The stack instance can be configured to obtain the virtual addresses of the buffers and send the contents from the virtual addresses when a render command from the graphics kernel is captured.

An operating system may be configured e.g. various subsystems and drivers can be loaded to capture primitives and send them to a remote computer such as client . Similar to that described above a session manager can be executed by a logical processor and a session that includes certain remote components can be initialized. In this example the spawned session can include a kernel a graphics kernel a user mode display driver and a kernel mode display driver .

A graphics kernel may schedule GPU operations. The GPU scheduler can merge separate buffers of vertices into the correct execution order such that the graphics processing unit of the client executes the commands in an order that allows them to be rendered correctly.

All of these variations for implementing the above mentioned partitions are just exemplary implementations and nothing herein should be interpreted as limiting the disclosure to any particular virtualization aspect.

The process of compressing encoding and decoding graphics data as referred to herein may generally use one or more methods and systems described in commonly assigned U.S. Pat. No. 7 460 725 entitled System And Method For Effectively Encoding And Decoding Electronic Information hereby incorporated by reference in its entirety.

In various methods and systems disclosed herein improvements to the transmission of remote presentation graphics data to a client computer may be implemented to provide a more timely and rich user experience. The embodiments disclosed herein for encoding and transmitting graphics data may be implemented using various combinations of hardware and software processes. In some embodiments functions may be executed entirely in hardware. In other embodiments functions may be performed entirely in software. In yet further embodiments functions may be implemented using a combination of hardware and software processes. Such processes may further be implemented using one or more CPUs and or one or more specialized processors such as a graphics processing unit GPU or other dedicated graphics rendering devices.

In remote desktop scenarios the graphics content of a user s desktop located on a host computer e.g. the server is typically streamed to another computer e.g. the client . The server and the client will exchange the desktop graphics data in a well defined protocol or format. Microsoft s Remote Desktop Protocol RDP is an example of such a protocol. The RDP protocol is a stream oriented protocol that may use a stream based transport such as the Transmission Control Protocol TCP for exchanging data with the client. Protocols such as the TCP protocol typically exhibit inconsistent throughput especially when the underlying transport is a wide area network WAN connection. If such a link is used for RDP traffic such unpredictable throughput may result in a negative user experience because the desktop graphics data may be delivered to the client in a time delayed fashion.

The methods disclosed herein are not limited to a particular type of graphics data such as bitmaps. The disclosed methods can apply to any type of graphic object. For example the graphics data may comprise a description of entities to be drawn. Generally the lossless channel can be used to notify the client of the type and nature of the data that will be transmitted and the expected result after rendering. The actual graphics data can then be transmitted to the client on the lossy channel and the client can compare what was actually received and the result of the rendering actions to determine if any data was missing or if there is a discrepancy between what was expected in the received data or as a result of performing the expected actions on the data. In one embodiment the client can note any transactions not received or screen areas that have not been updated and notify the server of the discrepancy. In other embodiments the client make some intelligent decisions such as determining that only a small portion of the screen is missing and determining to wait longer for the missing data or determine that the data is not needed.

Furthermore while the following descriptions are provided in the context of remote presentation systems it should be understood that the disclosed embodiments may be implemented in any type of system in which graphics data is encoded and compressed for delivery over a network.

Remote presentation compression algorithms are employed to reduce the bandwidth of the display stream to levels that are acceptable for transmission over local area networks wide area networks and low bandwidth networks. Such algorithms typically trade off CPU time on the server side for a lower required bandwidth. Compression algorithms may work well on certain image content. However the algorithms may perform poorly on other types of content. For example compression algorithms may work well on text but not on natural images. The output of these compression encoders may not be the final stage to the network as there may be other layers involved such as bulk compression and remote presentation packet encapsulation. These other layers may also effect overall bandwidth usage. In some cases an image that encodes well with one bitmap encoder codec may compresses poorly with the remote presentation bulk compressor prior to network transmission. In fact the end result of these processes may in some cases be an encoded and compressed payload that is larger than the original bitmap.

Many systems simply classify image data as one of two types such as text and other images. For example referring to a bitmap of a text image and a bitmap of a natural image may be associated with codec A and codec B respectively. The encoded data may be compressed by a compression function before placing on the network for transmission. However in many cases codec B may not be the optimal encoder for some bitmaps the result being that the compression process ultimately produces data that is ill suited for efficient transport over the network .

To lower overall network bandwidth usage an encoding method may be selected based on how the image content relates to the final bandwidth used rather than using predetermined selection criteria for text simple block diagrams natural images and the like. Rather than providing a classifier and target sub codecs for each possible classified output the output may be classified based on a range using multiple image and compression characteristics. A decision function may then be tuned based on the network traffic conditions. Thus an encoder may be selected that in turn ultimately results in the best compression ratio at the end of the process and prior to transmission of the data onto the network.

In various embodiments methods and systems are disclosed for the dynamic runtime implementation and end to end biased tuning of a two stage image classification system based on a decision function that uses network packet sizes and multiple image characteristics to determine the selection of an encoding codec to reduce overall network bandwidth consumption.

Most classification systems classify image regions based on high level criteria such as frequency content which is then used to choose tightly coupled internal sub encoders for those image regions.

In one embodiment each codec and all subsequent networking encoding stages may be considered as a single black box thus allowing the box to optimize network bandwidth consumption more accurately than can be performed even with complete understanding of all available image encoding codecs. The classification system itself does not output a single type of classification such as text or natural image but instead may output a range of values thus allowing use with a wide range of backend encoders via a tunable decision function.

The flexible image classifier may use two primary types of image feature classification. The first type may be rate change based and the second type may be a modified color histogram. Referring to the first type using rate change may be calculated based on differences between image pixels based on their color intensities. An image may be received for analysis and processing. Differences in selected parameters of the image may be calculated and tracked. For a given parameter if a difference is detected then a counter may be incremented . For RGB values differences may be calculated row by row contiguous memory and for each R G or B value that is different than the previous pixels value a counter may be incremented. The various counters may be summed at the end of processing . For RGB values the individual RGB change counters may be summed at the end of processing thus providing four change values.

Referring to be a modified color histogram may be used to classify data. An image may be received for analysis and processing. As the selected parameters are examined occurrences of the parameters may be tracked. As new parameter values are detected the occurrence may be noted in the histogram . For RGB values as each R G or B value is examined the occurrence may be tracked in an array of known colors so that a histogram of all colors may be maintained. At the end of processing this histogram may be examined and a count of unique parameters may be compiled . For RGB values at the end of processing the histogram may be examined and a count of unique colors may be compiled as well as counts for each of the R G and B colors.

The counts may be used for frequency analysis as well as color content comparisons without the need to perform color space conversions edge detection via Laplacian operators or temporal to frequency conversions via FFTs . This may allow for runtime inline use of this classification algorithm without degrading system performance while maintaining flexibility of decision function methods.

In an embodiment of a tuning system a set of known images representative of the target system usage may be used and the images may be tested against each available encoding codec and the flexible image classifier. Additionally the output of each encoding codec may be bulk compressed as it would appear on the network in a remote presentation network stream. The tuning system may then take these values and exhaustively test each characteristic output in the flexible image classifier against the bitmap encoding sizes. These sizes may be scaled using the bulk compression results. The result is a set of data for the response of the system based on the tuning characteristics output from the classifier. The most stable local minimum may be selected to obtain the characteristic of interest and its threshold value.

The tuning method described above may allow for the tuning of the decision function based on the final network traffic output rather than using only the codec encoded output sizes. Accordingly the use of codecs that encode well but poorly bulk compress may be avoided allowing for the overall traffic on the network to be increased.

In one embodiment a run time decision function may be provided that uses the output from the flexible image classifier and the tuning value determined by the tuning system to select an optimal remote presentation bitmap encoder. The disclosed embodiments may be used with any type of bitmap and other encoders that may be used in conjunction with the encoding and transmission of graphics data. Encoders may be added executing the flexible image classifier and tuning system with the new encoders.

A link characteristics detector may incorporate some of the functionality described in common assigned U.S. patent application Ser. No. 12 719 669 filed on Mar. 8 2010 hereby incorporated in its entirety.

Any of the above mentioned aspects can be implemented in methods systems computer readable media or any type of manufacture. For example per a computer readable medium can store thereon computer executable instructions for transmitting graphics data. Such media can comprise a first subset of instructions for receiving image data for transmission to a client computer a second subset of instructions for classifying the received image data a third subset of instructions for selecting one of a plurality of encoders based on said classifying link data indicative of network conditions and tuning parameters wherein the tuning parameters are configured to identify encoding characteristics that substantially optimizes a compression ratio resulting from a bulk compression process and a fourth subset of instructions for encoding the received image data using the selected encoder. It will be appreciated by those skilled in the art that additional sets of instructions can be used to capture the various other aspects disclosed herein and that the four presently disclosed subsets of instructions can vary in detail per the present disclosure.

The foregoing detailed description has set forth various embodiments of the systems and or processes via examples and or operational diagrams. Insofar as such block diagrams and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the disclosure or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the disclosure. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the disclosure e.g. through the use of an application programming interface API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the invention has been particularly shown and described with reference to a preferred embodiment thereof it will be understood by those skilled in the art that various changes in form and detail may be made without departing from the scope of the present invention as set forth in the following claims. Furthermore although elements of the invention may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated.

