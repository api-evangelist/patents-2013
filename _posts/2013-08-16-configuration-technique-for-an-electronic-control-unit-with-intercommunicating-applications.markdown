---

title: Configuration technique for an electronic control unit with intercommunicating applications
abstract: A technique is specified for configuring an electronic control unit having intercommunicating applications which have been arranged in various partitions and to which differing safety integrity levels have been assigned. According to one method aspect, the communications behavior of the applications assigned to the differing partitions amongst themselves is analyzed, in order to identify data-writing and data-reading applications that are not located in the same partition. Subsequently, a shared memory area for the intercommunicating applications is configured, and a to communications data structure for the applications is generated. The communications data structure is at least partially arranged in the shared memory area.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235456&OS=09235456&RS=09235456
owner: ELEKTROBIT AUTOMOTIVE GMBH
number: 09235456
owner_city: Erlangen
owner_country: DE
publication_date: 20130816
---
The present disclosure relates generally to the technical field of electronic control units. More precisely a technique is specified in order to configure an electronic control unit with regard to intercommunicating electronic control unit applications. The technique can be implemented in the form of a method a computer program product an apparatus or an electronic control unit.

The term embedded system designates a combination including a processor and software executed thereon which have been integrated within a technical application context. In this connection the processor undertakes for example monitoring functions open loop control functions or closed loop control functions. In many cases the processor is responsible in addition for signal conditioning or data preparation. Modern embedded systems may also comprise several processors.

As an example of embedded systems electronic control units ECUs may be mentioned. Electronic control units are electronic modules which are used in the automotive field but also in machines and installations for control purposes as well as for further tasks.

In motor vehicles electronic control units are used for example in connection with electronic engine management. Electronic control units also come into operation for purposes such as the evaluation of signals of speed sensors tank level sensors or oil pressure sensors and the corresponding drive of display instruments. In addition electronic control units are integrated for use in automatic system interventions for instance for the purpose of steering assistance electronic power steering EPS or in connection with a driving stability system electronic stability program ESP . With a view to reciprocal exchange of information electronic control units may have been networked to one another via a system bus e.g. in accordance with the CAN LIN MOST or FlexRay standard .

With the advent of electronic components into automotive engineering the number of electronic control units integrated within a vehicle has increased greatly in recent years. Accordingly the effort for the networking of the electronic control units has also risen. There have been similar developments also in mechanical engineering and plant engineering. For this reason it has been contemplated to pack various applications within a single electronic control unit. In this way not only is it possible to reduce the number of built in electronic control units but the networking effort and the costs can also be lowered. On the other hand new safety problems arise.

For instance it has been recognised that problems may occur when different applications integrated within a single electronic control unit are accessing the same memory area. For example the access of a tachometer application to a stored wheel speed value might conflict with the access of an ESP application to this value and this conflict might then result in a situation that is critical in terms of safety. For this reason various memory protection concepts for electronic control units having several applications have been proposed.

One memory protection concept can be implemented via the software of an operating system of the electronic control unit. For this purpose the electronic control unit frequently includes a separate hardware component in the form of a memory protection unit MPU or memory management unit MMU . The memory protection unit may for example have been integrated within a processor of the electronic control unit or may alternatively constitute a component that is separate from the processor.

Memory protection ordinarily serves for the realisation of rights of access to memory areas and thereby enables the distinct separation of application processes from one another and from the operating system over and above that a support of virtual addresses is often also possible . In particular memory protection can selectively block individual memory areas also called partitions for a writing operation inclusive of a consuming readout .

In electronic control units on which several applications are running the write protection functionality is employed in targeted manner for the purpose of prohibiting applications of lower priority from manipulating memory areas that are also being accessed by applications of higher priority and where appropriate conversely . For the prioritising of applications recourse may be had to IEC Standard 61508 and also to ISO Standard 26262 derived therefrom. In IEC Standard 61508 for example four safety requirement levels or safety integrity levels SIL have been defined namely SIL1 to SIL4. Each level is a measure of the necessary or attained risk reducing effectiveness of a safety critical function realised by means of a given application.

In a priority based memory protection implementation the physical memory of an electronic control unit may be subdivided into various partitions with a certain safety integrity level being allocated to each partition. Memory accesses of electronic control unit applications can then be controlled in such a manner that in a first step the safety integrity level assigned to the accessing application is determined. The memory access in any case as far as write operations are concerned is then restricted to the partition with the ascertained safety integrity level.

In connection with the implementation of a priority based memory protection concept a separate partition for applications to which no safety integrity level has been allocated can generally be provided. Furthermore a jointly utilised memory shared memory can be used for the communication between applications of different safety integrity levels amongst themselves.

In order to facilitate the communication of electronic control unit applications amongst themselves and also the exchange of applications on different electronic control units the AUTOSAR development partnership was brought into being. The AUTOSAR project is a continuation of the work of the OSEK standardisation committee.

A significant aspect of the AUTOSAR specification is the logical splitting of the software into electronic control unit specific system software and electronic control unit independent application software. A virtual function bus VFB connects all the intercommunicating software applications software components SWC also beyond various electronic control units. The centrepiece of the AUTOSAR architecture is its run time environment RTE . This run time environment is a communications layer based on the VFB and uses ports for transmitter receiver oriented communicating between various applications and between an application and the operating system and remaining system software of the electronic control unit.

The two partitions each include the software code of an application SWC and SWC respectively in which connection differing safety integrity levels have been allocated to the two applications SWC SWC or to the two partitions . Furthermore each of the two partitions includes an area of private data assigned to the respective application SWC SWC and also the software code of a run time environment assigned to the respective application. Read operations and write operations with respect to the areas of private data are undertaken in a non privileged mode also called user mode of a processor on which the software code of the applications SWC SWC is running. On the processor which is not represented in the software code of the run time environments and of the operating system is also executed.

The third partition includes a shared memory for communication between the two applications SWC SWC. The shared memory takes the form of a buffer or queue. Read operations and write operations with respect to the shared memory are possible only in a privileged mode of the processor.

For the purpose of communication between the two applications SWC SWC via the shared memory a system call of the respective run time environment via a programming interface application programming interface API to the operating system which is not represented in is required. The operating system is inter alia responsible for configuring a memory protection unit of the processor dynamically in accordance with the system call.

If as illustrated in application SWC for example wishes to write data from the area of private data into the shared memory in a first step a write request to the run time environment is made. The run time environment thereupon makes a system call to the operating system. The operating system writes in the privileged mode the data from the area of private data into the memory . From there the data can then be read out by application SWC.

If in a next step application SWC wishes to read the data written by application SWC for example into the area of private data once more in a first step a read request from application SWC to the assigned run time environment is required. The run time environment then makes a system call to the operating system. The operating system thereupon checks whether data are present in the memory . It then reads out the data if present in the privileged mode and delivers them back in order that they can be written to the area of private data . In case no data were to be present in the memory an error message as a rule with an error code is returned.

The communication sketched in taking place within an electronic control unit between the applications SWC SWC on the basis of the shared memory is unsatisfactory from various viewpoints. On the one hand system calls to the operating system and the associated copying of data or configuring of the memory protection unit are computationally intensive from the perspective of the processor. On the other hand for the run time environments additional wrapper functions are ordinarily required which increase the flash memory requirement.

Accordingly a technique for configuring an electronic control unit having intercommunicating applications is to be specified that avoids one or more of the disadvantages described above.

According to a first aspect a method for configuring an electronic control unit for intercommunicating applications is made available wherein a memory assigned to the electronic control unit has been split up or is split up into partitions and wherein at least one application with a first safety integrity level has been assigned to a first partition and at least one application with a second safety integrity level different from the first safety integrity level or with no safety integrity level has been assigned to a second partition. The method comprises the steps of analysing a communications behaviour of the applications assigned to the differing partitions amongst themselves in order to identify a data writing application and at least one application reading the written data said applications not being located in the same partition and of configuring a shared memory area in the partition of the writing application and of generating a communications data structure for a communication between the data writing application and the data reading application the communications data structure being provided for at least partial arrangement in the shared memory area.

The method according to the first aspect may come into operation for example when a writing application is confronted with one or more reading applications. This corresponds generally to a communications ratio of 1 n n 1 2 . . . between writing and reading applications.

At least the two steps of analysing and of configuring may be carried out offline that is to say in the approach to the run time of the applications. For example these steps may be undertaken in connection with the creating of a configuration file to be loaded into the electronic control unit. Moreover a memory protection unit of the electronic control unit can e.g. during the run time be configured in such a manner that the reading application during its run time is given only read access but not write access to the communications data structure. In this connection a write access for example to the partition of the writing application in which the shared memory area with the communications data structure is situated can be prevented.

According to one implementation the shared memory area has been configured as a buffer memory. Additionally or as an alternative the communications data structure may have been designed as a queue for communication between the two applications. Generally a first part of the communications data structure can be configured in the shared memory area in the partition of the writing application and a second part of the communications data structure can be configured in another memory area outside the partition of the writing application. This other memory area may be formed in the partition of the reading application.

The first part of the communications data structure may be configured for storing at least the written data. The second part of the communications data structure may on the other hand have been configured for storing at least one read pointer.

According to one version two or more of the applications reading the written data have been provided. In this case for each reading application a separate communications data structure for example configured as a queue can be provided. The two or more applications reading the written data may have been assigned to differing partitions and hence also to differing safety integrity levels .

According to a second aspect a method for configuring an electronic control unit for intercommunicating applications is specified wherein a memory assigned to the electronic control unit has been split up or is split up into partitions and wherein at least one application with a first safety integrity level has been assigned to a first partition at least one application with a second safety integrity level different from the first safety integrity level has been assigned to a second partition and at least one application with a third safety integrity level different from the first and second safety integrity levels or with no safety integrity level has been assigned to a third partition. The method comprises the steps of analysing a communications behaviour of the applications assigned to the differing partitions amongst themselves in order to identify at least two data writing applications and an application reading the written data said applications not all being located in the same partition and of configuring a shared memory area in the memory outside the first second and third partitions and also of generating a communications data structure for a communication between the data writing applications and the data reading application the communications data structure being provided for at least partial arrangement in the shared memory area.

The method according to the second aspect may come into operation for example when several writing applications are confronted with one reading application. This corresponds generally to a communications ratio of n 1 n 2 3 . . . between writing and reading applications.

As already described above in connection with the first method aspect at least the analysing and the configuring can be carried out offline. A memory protection unit of the protection appliance can e.g. during the run time be configured in such a manner that the writing applications during their run time are given write access and the reading application during its run time is given only read access but not write access to the communications data structure.

In the case of the second method aspect the shared memory area can be established in a fourth partition.

The shared memory area may according to each of the two process aspects be an area of private data. The communications data structure may for example be a buffer memory e.g. a ring buffer and or a queue. In the course of generating the communications data structure a size and or an address of the data structure can be defined.

Within the framework of the methods presented here a run time environment can be generated e.g. in the form of source code or object code . The run time environment may serve to decouple a function call of an application from an access to the communications data structure. In other words the run time environment can act as an interface between one of the applications and the communications data structure that has been assigned to the application.

Both method aspects may furthermore include the step of receiving information relating to the assignment between partitions and applications and also relating to the communications behaviour of the applications. The step of analysing the communication paths may in this case be undertaken on the basis of the received information. The information may for example be received in the form of a file or as user input.

The configuring of the shared memory area and the generating of the communications data structure can generally be undertaken in connection with the creating of compilable configuration data e.g. in the form of source code . The configuration data may have been split up in partition specific manner that is to say for example they may contain several files or data sets which have each been allocated to a certain partition .

Besides the configuration data application data can also be compiled that contain the applications e.g. in the form of source code . The application data may contain calls to the data to be read and written. Like the configuration data the application data may also have been split up in partition specific manner.

The compiled configuration data can be linked with the compiled application data e.g. in the form of object code . The linking may be carried out on the basis of information that specifies which application data are to be mapped onto which partitions.

The configuration data alone or the linked data can be loaded e.g. as a configuration file into the electronic control unit. Subsequent to this the electronic control unit has been configured for the communication of the applications amongst themselves.

The applications can generally communicate with one another in accordance with a predetermined specification. This communication may for example be undertaken on the basis of the AUTOSAR specification.

Furthermore a computer program product with program code means is made available for implementing the method aspects presented here when the computer program product is executed on one or more processors. The computer program product may have been stored on a storage medium for example a flash memory . The storage medium may be part of an electronic control unit.

Likewise specified is an electronic control unit configured in accordance with the process presented here. The electronic control unit can be configured for example by loading of the aforementioned linked data into the electronic control unit.

According to a further aspect an apparatus for configuring an electronic control unit for intercommunicating applications is made available wherein a memory assigned to the electronic control unit has been split up or is split up into partitions and wherein at least one application with a first safety integrity level has been assigned to a first partition and at least one application with a second safety integrity level different from the first safety integrity level or with no safety integrity level has been assigned to a second partition. The apparatus includes an analysis device which has been designed for analysing a communications behaviour of the applications assigned to the differing partitions amongst themselves in order to identify a data writing application and at least one application reading the written data said applications not being located in the same partition. The apparatus further includes a configuration device which has been set up for configuring a shared memory area in the partition of the writing application and for generating a communications data structure for a communication between the data writing application and the data reading application the communications data structure having been provided for at least partial arrangement in the shared memory area.

Furthermore an apparatus is made available for configuring an electronic control unit for intercommunicating applications wherein a memory assigned to the electronic control unit has been split up or is split up into partitions and wherein at least one application with a first safety integrity level has been assigned to a first partition at least one application with a second safety integrity level different from the first safety integrity level has been assigned to a second partition and at least one application with a third safety integrity level different from the first and second safety integrity levels or with no safety integrity level has been assigned to a third partition. The apparatus includes an analysis apparatus which has been set up for analysing a communications behaviour of the applications assigned to the differing partitions amongst themselves in order to identify at least two data writing applications and an application reading the written data said applications not all being located in the same partition. The apparatus further includes a configuration device which has been set up for configuring a shared memory area in the memory outside the first second and third partitions and for generating a communications data structure for a communication between the data writing applications and the data reading application the communications data structure having been provided for at least partial arrangement in the shared memory area.

Further made available is an electronic control unit having intercommunicating applications. The electronic control unit includes a memory which has been split up into partitions wherein at least one application with a first safety integrity level has been assigned to a first partition and at least one application with a second safety integrity level different from the first safety integrity level or with no safety integrity level has been assigned to a second partition wherein a data writing application and at least one application reading the written data have been stored in the memory said applications not being located in the same partition and wherein the memory includes a shared memory area in the partition of the writing application and a communications data structure for a communication between the data writing application and the data reading application the communications data structure having been arranged at least partially in the shared memory area. The electronic control unit further includes a memory protection device which has been configured in such a manner that the reading application during its run time has only read access but not write access to the communications data structure.

According to another aspect a further electronic control unit having intercommunicating applications is specified. The electronic control unit includes a memory which has been split up into partitions wherein at least one application with a first safety integrity level has been assigned to a first partition at least one application with a second safety integrity level different from the first safety integrity level has been assigned to a second partition and at least one application with a third safety integrity level different from the first and second safety integrity levels or with no safety integrity level has been assigned to a third partition wherein at least two data writing applications and an application reading the written data have been stored in the memory said applications not all being located in the same partition and wherein the memory includes a shared memory area outside the first second and third partitions and a communications data structure for a communication between the data writing applications and the data reading application the communications data structure having been arranged at least partially in the shared memory area. The electronic control unit further includes a memory protection unit which has been configured in such a manner that the writing applications during their run time have write access and the reading application during its run time has only read access but not write access to the communications data structure.

The memory protection unit of the respective electronic control unit can be configured appropriately when the operating system switches from one processing thread to another thread.

The electronic control unit may generally have been networked with other electronic control units via a system bus. The electronic control unit may furthermore generally have been designed for evaluating a sensor signal. Accordingly the electronic control unit may include at least one input for a sensor signal to be processed.

The electronic control unit proposed here in each instance may be an electronic control unit of a motor vehicle.

In the following description for the purpose of elucidation but not of restriction various technical details will be elucidated in order to guarantee a fundamental understanding of the technique presented here. For a person skilled in the art it is evident that the present technique can be realised in other embodiments which diverge from the details described below. For example the embodiments are described primarily within the context of C programming however this does not rule out employing other programming means.

Moreover it will be inferred by a person skilled in the art that the services functions and steps presented below can be implemented using software code that has been provided in combination with a processor or using an application specific integrated circuit ASIC a digital signal processor DSP or an all purpose computer. Although the embodiments below are described partially within the context of processes and apparatuses the method presented here can likewise be realised in a computer program product as software code e.g. as source code or object code and also in a system that includes a processor and a memory coupled to the processor which contains the computer program product.

The apparatus includes a core functionality which may have been implemented as at least one processor central processing unit CPU as a dedicated circuit e.g. as an ASIC and or as a software module. Furthermore the apparatus includes a memory . In the memory according to one implementation a computer program product in the form of software code has been stored which is executed by a core functionality implemented as a processor. A transmitter and a receiver serve for communication of the apparatus with another apparatus or with a user. Moreover the apparatus includes an analysis device and a configuration device communicating therewith.

As has been indicated by the dashed extension of the core functionality the aforementioned devices which have been represented within the dashed lines may have been implemented both as stand alone devices and as subfunctionalities of the core functionality . The transmitter and the receiver which overlap the dashed area may be driven by the core functionality or may make information available to the core functionality .

In the embodiment according to the receiver has been set up in order to receive data e.g. in the form of an input file and to make them available to the analysis device . In like manner the transmitter has been set up to receive configuration data e.g. in the form of an output file from the configuration device and to output them. The configuration data may as illustrated in be output indirectly or directly to the electronic control unit .

The electronic control unit shown in includes besides the memory at least one processor and also a memory protection device . The memory protection device may have been integrated into the processor or may constitute a hardware component that is separate from said processor. The memory protection unit has been arranged as an interface between the processor and the memory . It converts memory accesses of the processor that are based on logical addresses into memory accesses that are based on is physical addresses.

The memory protection unit is capable of being configured by an operating system of the electronic control unit . The configuration of the memory protection unit serves for the realisation of a memory protection concept with regard to the memory which has been split up into several partitions. The memory protection unit is configured by the operating system during the run time of applications that have been stored in the memory .

In the present embodiment the electronic control unit includes in addition a sensor input . Via the sensor input sensor signals from one or more sensors can be received. Sensor signals can be processed by the applications that have been stored in the memory .

In an exemplary implementation the electronic control unit may be an electronic control unit of a motor vehicle. In this case for example wheel speed signals or engine speed signals or temperature signals for further processing by suitable applications can be received via the sensor input . The electronic control unit may however also generally come into operation in the case of machines or installations for control purposes.

Furthermore an interface to one or more further electronic control units not represented in has been provided. The electronic control units may have been networked with one another via a system bus. Suitable bus specifications were mentioned in the introduction.

For the purpose of realising the memory protection concept already mentioned the memory as shown in has been subdivided into a total of N partitions. In this way for example up to 8 up to 16 or up to 32 partitions may be provided. The memory protection unit guarantees when the memory protection concept is realised that individual applications running on the electronic control unit are each given only access to one or more predetermined partitions.

For the purpose of implementing a priority based memory protection concept individual safety integrity levels have been assigned to the individual partitions as illustrated in . In the present embodiment in accordance with IEC Standard 61508 or ISO Standard 26262 a total of four safety integrity levels SIL1 to SIL4 have been assigned whereby according to safety integrity level SILn n 1 2 3 4 has been assigned to partition n. Furthermore two or more further partitions N have been provided. Deliberately no safety integrity level has been assigned to partition N.

At this point it should be pointed out that the aforementioned IEC and ISO standards have merely been specified as examples and the present disclosure can also be realised in connection with other prioritising concepts and associated safety integrity levels.

As shown in various applications SWC to SWC according to the safety integrity level assigned to the respective application SWC to SWC have been distributed to the individual partitions of the memory . Accordingly applications SWC and SWC to each of which safety integrity level SIL1 has been assigned are located in partition whereas application SWC with safety integrity level SIL2 is situated in partition and applications SWC and SWC with in each instance safety integrity level SIL3 have been assigned to partition . Whenever in the present embodiment it is stated that an application has been arranged in a certain partition by this it is meant that the compiled code of this application together with the compiled code of a run time environment assigned to the application and also the corresponding private data have been stored in the defined partition.

In the present embodiment no application is present to which safety integrity level 4 has been assigned or to which no safety integrity level has been assigned.

Accordingly partitions and N here are empty. It should be pointed out that specifically empty partitions in the memory in general do not have to be configured. This means that in many embodiments partitions and N in the memory may be dispensed with.

The individual applications can communicate with one another both within a partition and beyond partition boundaries. The communication between the applications is based in the present embodiment on the basis of the AUTOSAR specification with the special run time environment thereof.

The communication of applications that are not all located in the same partition is undertaken via a shared memory area and a communications data structure provided in this memory area. Accordingly one or more of the partitions illustrated in may furthermore contain such a shared memory area with a communications data structure provided therein. The shared memory area may be situated in one of the partitions to which a safety integrity level SILn or specifically no safety integrity level has been assigned and or in a separate partition e.g. in partition . Corresponding embodiments will be elucidated further below with reference to .

Generally the shared memory area within one of the partitions illustrated in may for instance in contrast to an area of private data be accessible from an external partition. The access may depending on the implementation of the memory protection concept be restricted e.g. only read access or only write access or unrestricted e.g. read write access . The shared memory area may have been configured in various ways within the memory for instance by means of a start address. Additionally or as an alternative the configuration may also have been defined by means of an end address and or a size of the memory area.

Furthermore it is possible to configure the shared memory area indirectly via the location e.g. start address and or end address and or size of the partition in which the memory area is situated. To this extent the configuring of the shared memory area may also generally include a configuring of the partition in which the shared memory area is situated or which forms the shared memory area. The shared memory area may in this case depending on the particular application constitute a part of a partition for instance if the partition contains besides the communications data structure yet further elements such as an application or may form the partition itself for instance if the partition merely contains the communications data structure .

The communications data structure arranged in the shared memory area can be generated in various distinctive forms. For example the communications data structure can be generated in the form of software code.

In the following an embodiment of an operating method for the configuration apparatus according to and also for the electronic control unit according to will be elucidated on the basis of the flow chart of . The operating method comprises several steps that are carried out offline by the configuration apparatus and also one or more steps that are carried out online by the electronic control unit . The steps carried out online are carried out during the run time of one or more of the applications SWC to SWC in the electronic control unit whereas the steps carried out offline are executed in the approach to the steps carried out online in the configuration apparatus .

The steps carried out offline serve to generate configuration data which configure the electronic control unit for the intercommunicating applications SWC to SWC. As already elucidated above with reference to differing safety integrity levels have been assigned to the intercommunicating applications SWC to SWC. Applications SWC to SWC have been distributed in accordance with the respectively assigned safety integrity level in the embodiment to partitions and .

In a first step S which is carried out by the analysis device according to the configuration apparatus analyses the communications behaviour of the applications SWC to SWC assigned to the differing partitions and amongst themselves. The analysis is carried out on the basis of communications data which e.g. in the form of the input file were received via the receiver .

According to a first implementation of step S within the framework of the analysis a writing application and at least one application reading the written data are identified said applications not being located in the same partition. Generally a communications ratio of 1 n n 1 2 . . . between writing and reading applications may result.

According to a second implementation of step S the analysis yields at least two data writing applications and an application reading the written data said applications not all being located in the same partition. According to this implementation a communications ratio of n 1 n 2 3 . . . exists between writing and reading applications.

It should be pointed out that within the framework of the analysis in step S several ratios of 1 n and also additionally or as an alternative several ratios of n 1 in connection with differing applications can also be identified. In other words sets of applications can be identified which exhibit a ratio of 1 n between writing and reading applications as well as further sets of applications which exhibit a ratio of n 1 between writing and reading applications.

On the basis of the result of the analysis in step S in step S the configuration device becomes active in order to generate configuration data. In this connection for each set of applications for which a ratio of 1 n or n 1 between writing and reading applications was ascertained a shared memory area is configured and a communications data structure for at least partial arrangement in the shared memory area is generated.

In the case of a ratio of 1 n between writing and reading applications the shared memory area is configured in the partition of the writing application. On the other hand in the case of a ratio of n 1 the shared memory area in the memory is configured outside the partitions of the applications involved. Now an example on the basis of . In the case of two writing applications SWC and SWC in partition and partition respectively and a reading application SWC in partition the shared memory area in this case is configured in the memory outside partitions and . For example the shared memory area can be configured in partition which has not been assigned to one of the safety integrity levels SILn and to which also not specifically no safety integrity level has been assigned.

The configuration data inclusive of the communications data structure generated in step S define for example the number of partitions to be established in the memory of the electronic control unit the start and end addresses of the partitions in the memory a size of the communications data structure and also a memory address of the communications data structure in the memory . The corresponding configuration data can be combined in an optional step S to form a file in order to be loaded into the electronic control unit .

The configuration data may furthermore optionally be linked with application data of the associated applications SWC to SWC. This linking may for example be done in such a manner that the configuration data assigned to a certain partition are linked with the application data assigned to this partition. However it would also be conceivable to load the configuration data and the application data onto the electronic control unit separately from one another.

After the configuration data and application data have been loaded onto the electronic control unit the electronic control unit has been configured in suitable manner for a communication among the applications SWC to SWC. This communication based on one or more of the aforementioned communications data structures between the applications requires no system call to the operating system . At the same time the memory protection unit guarantees that in the case of a communications ratio of 1 n the reading application during its run time is given only read access but not write access to the corresponding communications data structure. In the case of a communications ratio of n 1 on the other hand it is guaranteed that the writing applications during their run time are given write access and the reading application during its run time is given only read access but not write access to the corresponding communications data structure. The corresponding configuration of the memory protection unit for realising these memory protection concepts is undertaken online that is to say during the run time of the applications SWC to SWC by means of the operating system cf. step S in .

In some embodiments for the configuration of the various partitions of the electronic control unit memory both for the communications ratio of 1 n and for the communications ratio n 1 have been represented. The examples illustrate the communication of applications that have been arranged in differing partitions on the basis of communications data structures and without the necessity of system calls to the operating system . The configuration of the memory according to is the result of the loading of the configuration data and of the application data into the electronic control unit .

If the analysis device of the configuration device detects such a communications behaviour and such a partitioning of the two applications SWC and SWC as shown in a shared memory area is configured in partition of the writing application SWC and a communications data structure is generated which has been provided in this shared memory area. In the present embodiment the communications data structure takes the form of a communications buffer memory. The communications buffer memory is an area of private data from the perspective of partition .

For example application SWC can process the signal of a wheel speed sensor and can write it as a speed value via a call of the assigned run time environment into the communications buffer memory . The speed value in the communications buffer memory can be continually updated by application SWC that is to say in accordance with last is best semantics . Application SWC may be an application that outputs a driver warning if the current speed value exceeds a limiting value. For this purpose application SWC can via a call of the assigned run time environment read out the speed value written by application SWC into the communications buffer memory . The memory protection unit of the electronic control unit has in this case been configured in such a manner that the reading application SWC during its run time has only read access but not write access to the communications buffer memory .

The writing application SWC carries a write pointer in the communications queue in conventional manner. In complementary manner the reading application SWC has to carry a read pointer. By reason of the memory protection concept implemented in the present embodiment application SWC does not have write access to the communications queue as first part of the communications data structure configured in partition of the writing application SWC in order to store its read pointer there. Therefore the read pointer is carried in a private memory area A as second part of the communications data structure in the private data area of partition .

In the case of two or more reading applications for each application a separate communications queue can be set up in the area of partition . Furthermore in each partition of a reading application a separate area of private data A for the carrying of the respective read pointer can be set up not represented in .

In the case illustrated in the analysis carried out by the analysis device yields that the two writing applications SWC and SWC are confronted with a single application SWC reading the written data said applications not all being located in the same partition and consequently having differing safety integrity levels cf. . For this reason a shared memory area is configured in the memory outside partitions and by the configuration device . In the present embodiment a corresponding configuration of partition is undertaken here. Furthermore a configuration data structure in the form of a communications buffer memory in partition acting as shared memory area is again provided. The operating system then configures the memory protection device in such a manner that the writing applications SWC and SWC during their run time have write access and the reading application SWC during its run time has only read access but not write access to the communications buffer memory .

In the following a more detailed embodiment of an operating method for the configuration apparatus will be elucidated with references to . The operating method can be carried out in connection with steps S to S according to and will be described in exemplary manner in the following on the basis of the memory configuration according to .

As represented in the software components comprise a code generating tool for creating source code here C code a compiler for generating object code from the source code generated by the code generating tool and also a linker . The linker is operated on the basis of a linker script which was generated by a linker script generator . The linker has been set up on the basis of the linker script to link the object code generated by the compiler with further object code which corresponds to the compiled applications.

In the diagram of the code generating tool performs the task of the analysis device and at least partially the task of the configuration device . This corresponds to steps S and S in . The compiler and the linker in turn execute at least partially the procedures of step S in .

As shown in the code generating tool receives via the receiver according to an input file for example in the Extensible Markup Language XML format. Output by the linker is an output file for flashing into the electronic control unit memory . The output file may exhibit a hexadecimal format or an ELF format Executable and Linkable Format . In the following the processing steps in the configuration device in order to get from the input file to the output file will be elucidated in greater detail with reference to the exemplary memory configuration according to and on the basis of pseudocode examples.

The input file contains information as regards the assignment between partitions and applications on the one hand and also as regards the communications behaviour of the applications amongst themselves on the other hand. In the present example cf. application SWC reads in data that may come either from application SWC or from application SWC. Applications SWC and SWC consequently generate the data whereas application SWC acts as consumer of the data. In the present example the data are to have last is best semantics.

In the case of the data it may for example be a question of the internal temperature TEMP of a motor vehicle which is read by an air conditioning system application SWC and is generated by two different applications SWC and SWC e.g. in redundant manner on the basis of temperature sensor signals. In a pseudocode representation the input file may accordingly exhibit the following format 

The code generating tool reads in the input file and analyses on the basis of the communications data inclusive of the partition allocations contained in the input file the communications behaviour of the applications SWC SWC and SWC assigned to the differing partitions and . In this connection the code generating tool establishes that the two data writing applications SWC and SWC are confronted with a single data reading application SWC all the applications SWC SWC and SWC being situated in differing partitions.

In order that the communication amongst applications SWC SWC and SWC includes no system calls to the operating system and that at the same time the memory protection concept already described above can be implemented as shown in a separate fourth partition partition has to be configured as a shared memory area in the electronic control unit memory . Since in the present embodiment the C code that is output by the code generating tool is written to partition specific files Partx.c in the code generating tool generates besides in each instance its own file for partitions and with a run time environment for the respective application SWC SWC or SWC a further file with the data for the communications data structure in the additional fourth partition. The corresponding file for the fourth partition configured as shared memory for example with the file name TEMP.c could take the form of buffer memory and in this case could look as follows 

Furthermore the code generating tool generates macros in order to be able to access the internal temperature data via the data name TEMP. These macros could then look as follows 

In a next step the compiler translates the source code files generated in partition specific manner by the code generating tool into corresponding object code files Partx.o in . Besides the files generated by the code generating tool the compiler also translates application files which on the electronic control unit implement the actual functions of applications SWC SWC and SWC User.o in . These application files contain calls for the data of TEMP that is to say for example SendTEMP x or ReceiveTEMP x .

As shown in besides the source code files the code generating tool also generates configuration information as to how many new partitions have been established here one partition namely the additional fourth partition and which source code files are to be mapped into which partition. This information can be output as directly processable information e.g. as a makefile fragment in order to be processed by the linker script generator . In concrete terms in the makefile fragment variables are set which the linker script generator utilises in order to generate a valid linker script. For the exemplary case illustrated in the makefile fragment may look as follows 

The linker script generator is subsequently triggered and a list of the variables OBJS xxx is passed to it. The linker script generated by the linker script generator combines the respective objects of a partition from OBJS Part into a contiguous section. Over and above that section addresses are generated from OBJS PartRWRegion and are saved as linker symbols. These linker symbols can later be referenced by the operating system if the latter reconfigures the memory protection unit during a change of task or change of thread.

Subsequently all the object files are tied together by the linker on the basis of the linker script and are configured. By means of the linker script it is established in the form of configuration information where the individual sections of an e.g. partition specific object application code application data run time environment code communications data based on communications data structure etc. are located. The absolute file resulting from this can subsequent thereto be loaded into to the electronic control unit and triggered in order to bring about the communications behaviour illustrated in between applications SWC SWC and SWC.

As results from the description of the embodiments cf. e.g. a system is trap can be avoided since for the purpose of communication between the applications no system call is any longer necessary. Rather the applications communicate by using a communications data structure. As described above this data structure may have been provided in an area of private data to be specific either in a partition of the writing application case 1 n or in a dedicated partition case n 1 .

Overall from the perspective of an electronic control unit processor the computation effort associated with the communication between the applications can be reduced in comparison with the scenario shown in with system calls . The computation effort is comparable to a system without partition boundaries and without the enforcement associated therewith in the embodiments of safety integrity levels .

Furthermore by reason of the elimination of the system calls no additional wrapper functions are needed for this. This means that the scope of the code can be kept smaller and the memory requirement in the electronic control unit is not increased unnecessarily.

It will be understood that the above description of embodiments is merely of exemplary nature. A person skilled in the art can therefore alter supplement and combine the embodiments within the scope of his her specialised knowledge. The invention is defined solely by the range of protection of the following claims.

