---

title: System and method for receiving services provided by distributed systems
abstract: A system and method allows a legacy program to call a distributed service in the manner of the legacy program calling another legacy program. The call is translated and sent to the distributed system in a secure manner, with potential timeout issues potentially handled faster than would be handled by the distributed system, and the response is returned to the legacy program in the format that another legacy program would have used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09182989&OS=09182989&RS=09182989
owner: Charles Schwab & Co., Inc.
number: 09182989
owner_city: San Francisco
owner_country: US
publication_date: 20130629
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 61 666 851 entitled Method and Apparatus for Receiving Services Provided by Distributed Systems filed by Ramakrishna V. Bokka on Jun. 30 2012 having the same assignee as the present application and is incorporated by reference in its entirety.

The present invention is related to computer software and more specifically to computer software for distributed systems.

Distributed systems are computer systems that perform services over a network. Legacy programs are programs written for a mainframe computer system or other similar computer system and written in an early third generation language such as COBOL or FORTRAN. What is needed is a system and method that allows legacy programs to call distributed services without compromising the security of the legacy system or requiring it to wait as long as a distributed services system can provide an indication of a timeout or other error.

A system and method allows legacy programs running on legacy systems to call distributed services available via a network such as the Internet by calling what appears to be another legacy program making the calling of a distributed service as easy as the calling of another legacy program even though it is not a legacy program i.e. a program written in a legacy language such as COBOL. As used herein a distributed service may refer to any remote distributed service reachable via a LAN or the Internet or other network.

For each distributed service an identifier of the distributed service referred to as a distributed service key is received along with location information for the distributed service and a type of that distributed service. For each type of distributed service translation information is received that describes how to translate parameters received in the format of the programming language of the legacy program into parameters in the format understood by that type of distributed service and also describes how to translate the response from the distributed service in the reverse direction.

When a legacy program determines the need for a use of a distributed service the legacy program identifies the service key of that distributed service which would be programmed into the legacy program. Additionally the legacy program builds any parameters it will provide as input to the distributed service into a data structure that would be used to call another legacy program in the same programming language e.g. COBOL Copybook and calls a wrapper program written in that same language with the service key and the input parameters.

The wrapper program formats the service key into an ASCII formatted HTTP header also including the format of the input parameters and the format of the attached HTTP payload in the HTTP header and attaches the input parameters as the payload to an HTTP message containing that header. The wrapper provides the HTTP message to an HTTP client program that runs on the legacy system. The HTTP client connects to the translator via the translator s intermediary device and forwards such HTTP message to the translator s intermediary. The intermediary handles secure communications with the legacy system timeouts and other issues as described in more detail below and forwards appropriate messages to the translator. The translator uses the service key to identify the translation information to use to adapt the input parameters into the format specified by the distributed service translates the input parameters according to such translation information and calls the distributed service using a protocol also specified by the translation information. Certain parameters may also be added or changed by the translator according to the translation information received as described above and included as part of the parameters provided to the distributed service. The translator stores the request associated with the distributed service key or destination IP address and port of the distributed service. As used herein an IP address may be a virtual IP address or a real IP address.

The distributed service investigates the request and identifies if there are communication errors that may be corrected by resending some or all of the request. If so the distributed service so indicates to the translator which resends the portion or the entire request. The distributed service attempts to process the request and provides to the translator a response which may indicate that the request was processed successfully along with the expected response or may indicate an error. The translator receives the response identifies the translation information corresponding to the distributed service from which the response was received and translates the response into a format that the legacy program would receive if the distributed service had been written in the same programming language as the legacy program. Parameters may be added to or changed in the response by the translator as part of this translation in accordance with the translation information received. The translator provides the translated response in an HTTP response message payload to the wrapper via the translator s intermediary and the HTTP client on the legacy system. Any errors are translated into HTTP errors by the translator.

The wrapper investigates the response message and determines whether the response message contains errors. If the response message contains errors the wrapper converts the errors into those that would be understood by the legacy program and provides the response thus converted to the legacy program in the same format that would be used by another legacy program. If the response does not contain errors the wrapper provides the payload to the legacy program in a format that would have been used to provide a response from another legacy program written in the same language as the legacy program to the legacy program.

The translator s intermediary ensures communications are secure into and out of a legacy system when a legacy program on that system calls a distributed service. It receives its own public and private key certificates as well as the public keys for any legacy systems. Additionally the translator s intermediary receives the service keys corresponding to distributed services that the translator may call when so requested by a legacy program.

The legacy system and the translator s intermediary are authenticated to each other and a secure connection is established between the two systems. When a legacy program uses the secure connection to request a distributed service call via the translator the translator s intermediary receives the request and investigates it. If the request is not valid request from an approved legacy system for a valid distributed service then the intermediary rejects the request and notifies the calling legacy program via its HTTP client and wrapper that the request is rejected.

If the request is a valid request then the intermediary disguises the identity and or location of the calling legacy system and program and then forwards the request to the translator also recording the date and time of when such request was forwarded.

For a specified length of time the intermediary listens for a response for the distributed service call it has forwarded. If no response is received for the forwarded call within the given amount of time then the intermediary generates an HTTP timeout error message and sends the timeout error message to the legacy program that attempted to make the call via the wrapper used by the legacy program and the legacy system s HTTP client.

If a response is received for the forwarded call within the specified time period then the translator s intermediary receives the response and forwards it to the appropriate legacy system via the wrapper used by the legacy program and the legacy system s HTTP client.

The present invention may be implemented as computer software on a conventional computer system. Referring now to a conventional computer system for practicing the present invention is shown. Processor retrieves and executes software instructions stored in storage such as memory which may be Random Access Memory RAM and may control other components to perform the present invention. Any number of processors may be used for implementing the present invention as described herein. Storage may be used to store program instructions or data or both. Storage such as a computer disk drive or other nonvolatile storage may provide storage of data or program instructions. In one embodiment storage provides longer term storage of instructions and data with storage providing storage for data or instructions that may only be required for a shorter time than that of storage . All storage elements described herein as storage may include conventional disk or memory storage and may include a conventional database. Input device such as a computer keyboard or mouse or both allows user input to the system . Output such as a display or printer allows the system to provide information such as instructions data or other information to the user of the system . Storage input device such as a conventional floppy disk drive or CD ROM drive accepts via input computer program products such as a conventional floppy disk or CD ROM or other nonvolatile storage media that may be used to transport computer instructions or data to the system . Computer program product has encoded thereon computer readable program code devices such as magnetic charges in the case of a floppy disk or optical encodings in the case of a CD ROM which are encoded as program instructions data or both to configure the computer system to operate as described below.

In one embodiment each computer system is a conventional IBM SYSTEM Z computer system running the conventional Z OS commercially available from IBM CORPORATION of Armonk N.Y. SUN MICROSYSTEMS T SERIES SERVER running the SOLARIS operating system commercially available from ORACLE CORPORATION of Redwood Shores Calif. a PENTIUM compatible personal computer system such as are available from DELL COMPUTER CORPORATION of Round Rock Tex. running a version of the WINDOWS operating system such as XP VISTA or 7 commercially available from MICROSOFT Corporation of Redmond Wash. or a Macintosh computer system running the MACOS or OPENSTEP operating system commercially available from APPLE INCORPORATED of Cupertino Calif. and the FIREFOX browser commercially available from MOZILLA FOUNDATION of Mountain View Calif. or INTERNET EXPLORER browser commercially available from MICROSOFT above although other systems may be used. Each computer system may be a DROID 2 mobile telephone commercially available from MOTOROLA CORPORATION of Schaumberg Ill. running the ANDROID operating system commercially available from GOOGLE INC. of Mountain View Calif. Various computer systems may be employed with the various computer systems communicating with one another via the Internet a conventional cellular telephone network an Ethernet network or all of these.

For Each Distributed Service Translator Receives Service Key Service Location Service Type Protocol of Distributed Service and Translation Requirements of Types.

Additionally at step translation requirements corresponding to any number of service types may be received as part of the service key information. Translation requirements corresponding to a distributed service type may include any information used to translate legacy program output that will be sent to the distributed system having the indicated type including any legacy program supplied parameters into an alternative format as specified by any number of distributed service s associated with such distributed service type when such service is called using legacy program. In one embodiment legacy programs which may be second generation programming languages e.g. COBOL on a mainframe may be written in any language that does not allow direct calling to the distributed service being called.

A determination is made by a legacy program that the use of a distributed service is needed or desired by the legacy program . In one embodiment use of a distributed system may be determined to be needed when the legacy code running the legacy program calls for it. For example when a COBOL program on a mainframe receives GPS coordinates and is requested to provide a map corresponding to such GPS coordinates the COBOL program may determine that use of a distributed service such as one that receives GPS coordinates and returns a reference to a map corresponding to such coordinates is needed or desired.

The service key corresponding to the distributed service which is needed or will be used by the legacy program is identified as part of step such as via the conventions of the programming language used to write such legacy program.

Legacy Program Builds Parameters into a Legacy Program Conventional Format i.e. COBOL COPYBOOK Calls Wrapper with it and Service Key.

Any parameters specified by the distributed service that the legacy program is going to call as described herein are built by the legacy program in a format that is conventional to the legacy program and using such legacy program language conventional parameters and the identified service key a wrapper is called by the legacy program . In one embodiment the wrapper called by the legacy program is a separate program written using the same programming language as the language used to write the legacy program therefore no special techniques outside of conventional program calling techniques of the legacy code are required to call it. For example a COBOL program may build parameters into a conventional COBOL COPYBOOK format and use the COBOL COPYBOOK to call the wrapper along with the service key. The wrapper may be called by any of several legacy programs that may call any distributed service which may be the same as or different from those called by another legacy program as described herein.

Wrapper Formats Service Key into an HTTP Header Attaches Parameters as the HTTP Payload Sends HTTP Message to HTTP Client on Legacy System.

The service key included with the call to the wrapper is formatted by the wrapper into a conventional HTTP header using ASCII encoding and the parameters included with the call to the wrapper are attached to the HTTP header as an HTTP payload in the same format in which the wrapper received them and such HTTP message is sent by the wrapper to an HTTP client on the legacy system . In one embodiment the HTTP header which is in ASCII format and includes conventional HTTP header information also includes format information corresponding to the type of parameters included in the HTTP payload e.g. COBOL COPYBOOK as well as the format of the HTTP payload of the HTTP message e.g. EBCDIC or ASCII . The format may be explicitly specified to the wrapper by the legacy program or it may be implied by the calling program.

The HTTP client on the legacy system receiving the HTTP request from the wrapper is connected to an intermediary via one or more conventional networks and the HTTP request is forwarded by the HTTP client to the translator via the intermediary as described below with respect to . In one embodiment the HTTP client on the legacy program may be written in an alternate programming language from the legacy program. For example the HTTP client may be written in C to maximize communication speeds.

In one embodiment the intermediary between the HTTP client and the translator may be part of the translator system and such intermediary handles communication and security issues of the translator as described below with respect to . The intermediary which receives communications from the legacy system may authenticate itself to the legacy system at startup of either system.

Translator Translates Parameters into the Format Specified by the Service Key Information for Service Specified into a Call Calls the Distributed Service Stores Service Key and Call Associated with Service Identifier.

The translator receives the message the service type corresponding to the received service key is identified and using translation requirements corresponding to such identified service type the parameters received in the HTTP payload of the received HTTP request are translated by the translator from the format conventional to the legacy program into the format specified by the distributed service corresponding to the received service key and such distributed service is called by the translator using the translated parameters and the protocol specified by the service key . In one embodiment translation of received input parameters may include conversion of any EBCDIC characters to ASCII characters if the HTTP header indicates it is encoded in EBCDIC and any tables or information corresponding to such character conversion may be received and stored by the translator along with service key information as part of step above or they may be internally stored by the translator.

In one embodiment the service key specifies one service and service type but each type of service may be specified by one or more service keys. The translation specifications are made for each service type. Thus translating parameters involves identifying the service type for the service key and translating according to the specifications for that type.

In one embodiment the call to the distributed service may be made using the service location e.g. IP address and port corresponding to the received service key and the call to the distributed service is also stored by the translator with a unique service call identifier which in one embodiment may be the service location of the distributed service as well as the received service key corresponding to the distributed service that has been called.

Distributed Service Attempts to Process Call or Identify any Communication Error or Substantive Error.

When called the distributed service attempts to process the call and or identify any communication or data protocol error for example an error in which some of the communication as received incorrectly and for which a request to resend may be provided to correct the error or any substantive error .

If a communication error is identified at the distributed service then the translator is notified of such communication error and the translator may be notified to resend any missing packets . Any such missing packets or information are re sent to the distributed service by the translator from those stored as described above . The method continues at step .

If No Communication Error Translator Receives Response Identifies Service Call Looks Up Reverse Translation Using Service Call Translates Response Provides to HTTP Client Via Intermediary.

If no communication error is identified at the distributed service then a response provided to the translator from the distributed service is received at the translator and the translator reverse translates the response and provides the reverse translated response as an HTTP message to the HTTP client from which the request was received via the intermediary . In one embodiment when the response is received the service call identifier corresponding to the received response is identified e.g. using the source IP address and port to identify the type of translation and translation information corresponding to the identified service call that were received as part of step may be used to reverse translate the received response back into the format of the legacy programming language originally used to request the distributed service e.g. back to COBOL COPYBOOK format if the calling program is running COBOL and the reverse translated response is forwarded in the payload of an HTTP message by the translator via the intermediary as described below with respect to to the HTTP client from which the request from the legacy program was received.

In one embodiment the response may be received from the distributed service as an indication of a substantive type error and in such a case the translator converts the received error response into an HTTP error code using the translation information identified as described above and sends the HTTP error code via the intermediary to the HTTP client from which the request from the legacy program was received.

The HTTP client on the legacy system receives the HTTP response from the translator via the intermediary and forwards the reverse translated response in the HTTP payload of the message to the wrapper from which it previously received the HTTP request as described above in the form of a response to such request .

If Response Received is an Error then Wrapper Adapts Error to Proper Format and Forwards to Legacy Program.

The wrapper investigates the response as part of step . If the response received at the wrapper from the HTTP client is a substantive error message or HTTP error code then the wrapper adapts the error message into the proper legacy program language format and forwards the formatted error to the legacy program that called it . Adapting the response may include converting error codes from HTTP or other types of error codes to those of the legacy programming language. In one embodiment all communications for a given legacy system are assumed to be in the same legacy programming language and so the wrapper on a legacy system will always adapt the response in the same way for each legacy program though other techniques may be used in other embodiments. A wrapper on a different legacy system may assume a different legacy system programming language.

If the response received at the wrapper from the HTTP client is not an error message then the wrapper forwards the received response to the legacy program from which it received the call in a format appropriate to the legacy program . The legacy program incorporates the response into an output for example by providing it to a user.

As noted above communications may be forwarded from an HTTP client on a legacy system to a translator via an intermediary and vice versa. is a flowchart illustrating a method of an intermediary forwarding secure communications between legacy programs and a translator according to one embodiment of the present invention.

Referring now to at any time digital certificates information including public and or private keys corresponding to the intermediary may be received at the intermediary and public keys corresponding to any number of legacy systems may also be received at the intermediary via conventional digital certificate exchange techniques . In one embodiment the intermediary may be part of the same system as the translator and the system including the intermediary and translator may communicate with a legacy system via a LAN or any other network.

Caller permissions and available distributed services information are received and stored at the intermediary . In one embodiment caller permissions may be received as a list of IP addresses of legacy system identifiers and specify which legacy systems are permitted to call distributed services via the intermediary and translator and available distributed services information may include a service key list specifying which service keys corresponding to distributed services are known to the intermediary and translator and may be called by a legacy system via the intermediary and translator in the manner described herein.

Intermediary Establishes Secure Connection with Legacy System Via Conventional Public Private Key Techniques.

Using conventional public private key techniques one or more secure connections are established between the intermediary and each of any number of legacy systems.

Once a secure connection has been established between the intermediary and a legacy system at any time a call request i.e. request to call a distributed service as described herein may be received at the intermediary from the legacy system and when such a call request is received caller permissions are checked and the service key list is also checked by the intermediary . In one embodiment the call request includes the service key corresponding to the distributed service being called and is received at the intermediary when it has been forwarded to the intermediary via the secure connection by the HTTP client on the legacy system in the manner described above. When the call request is received the calling legacy system is identified such as via the secure connection and caller permissions are checked to determine whether the calling legacy system is one which is permitted to make such a call request and the service key list is checked to determine whether the service key included with the call request corresponds to a distributed service that is able to be called via the intermediary and translator.

If Permissions and Service Key List are not Both Okay then Intermediary Rejects Via HTTP Error to Wrapper Via HTTP Client Wrapper Converts to Legacy Program Error and Forwards to Legacy Program.

If a determination is made that the calling legacy system is not permitted to make distributed service calls or if the service key included with the call request is not included in the service key list then the call request is rejected by the intermediary. In one embodiment the call request is rejected by the intermediary via an HTTP error message generated at the intermediary which is sent to the HTTP client corresponding to the legacy system from which the rejected call request was received.

In one embodiment the HTTP error is forwarded by the HTTP client to and received by the wrapper program which made the call request and converted by the wrapper into an error format that is recognizable to the legacy program which initially called the wrapper and the formatted error is forwarded by the wrapper to such legacy program in a manner similar to the manner in which substantive error messages from the translator are processed by the wrapper above .

If Permissions and Service Key List are Both Okay then Intermediary Forwards to Translator Identifies and Stores Date Time Listens for Response and Checks Time.

If the determination is made that the calling legacy system is a system which is permitted to call distributed services via the intermediary and translator and if the service key included with the call request is also included in the service key list at the intermediary then the received call request is forwarded by the intermediary to the translator which processes it as described herein and a response from the distributed service and forwarded by the translator as described herein is listened for by the intermediary . In one embodiment when the call request is forwarded to the translator the date and time of such forwarding is identified such as via an operating system clock and stored by the intermediary and the date and time are checked by the intermediary as it is listening for the response from the translator .

If Response is not within Threshold Time then Intermediary Generates its Own HTTP Timeout Error and Sends to Wrapper Via HTTP Client which Converts to Legacy Program Error and Forwards Error to Legacy Program.

If a response is not received from the translator within a threshold amount of time then an HTTP timeout error is generated by the intermediary and the HTTP timeout error is sent to the HTTP client of the legacy system from which the call request was initially received . In one embodiment the wrapper that sent the call request to the intermediary receives the HTTP timeout error in response to its request converts the HTTP timeout error into a format that is recognizable as that type of error to the legacy program which called the wrapper and forwards the formatted error to such calling legacy program.

If Response is within Threshold Time then Intermediary Forwards Response to Wrapper Via HTTP Client which Converts to Legacy Program Format and Forwards Response to Legacy Program.

If a response from the distributed service is received from the translator within a threshold amount of time then the intermediary forwards the received response to the wrapper via the HTTP client from which the call request was initially received and as described above with respect to step of and steps of such response is examined by the wrapper converted to a format conventional to the legacy program which requested the response and forwarded to that legacy program as described herein.

Referring now to in one embodiment the system of contains one or more legacy systems which each may include one or more legacy programs a wrapper and an HTTP client a translator and an intermediary which may be part of the same computer systems and any number of distributed services systems that provide any distributed services though other arrangements may be used. All systems operate as described herein. Translator and distributed services systems communicate via network which may include a conventional Ethernet network the Internet or both. Translator may be coupled to network and intermediary may be coupled to HTTP client via LAN which may include conventional Ethernet network or any other local area network.

Each legacy program may include a client legacy program such as one written in COBOL or another language that makes directly calling distributed services systems difficult insecure complex or impossible.

In one embodiment the elements and may include computer programs that are separate from one another as shown though other arrangements of computer programs may be used.

Legacy system intermediary translator and distributed services systems may include separate conventional computer systems with their own unique IP addresses including one or more conventional computers or computer servers each including a respective communication interface not shown on system each of which may include a conventional communication interface running suitable communication protocols such as Ethernet TCP IP or both. Other numbers of servers may be used and other arrangements of computer programs on the computer servers may be used. In one embodiment unless otherwise noted herein all communication in and out of each of the systems and are made via its respective input output not shown on system .

Translator administration manager receives service key information described above corresponding to any number of distributed services as described above and translator administration manager stores such service key information in translation storage . In one embodiment translation administration manager may store service key information as a table indexed by service keys. All storage elements described herein such as translation storage may include conventional memory and or disk storage and may include a conventional database.

At any time legacy program of legacy system e.g. COBOL program on a system of one or more mainframe computers may determine the need or desire for the use of any distributed service as described above. When legacy program determines that use of a distributed service is specified legacy program identifies the service key corresponding to the specified distributed service as described above and legacy program builds any parameters it will provide as input to such specified distributed service into a format or data structure that is conventional to legacy program e.g. COBOL COPYBOOK in a manner conventional to legacy program . Legacy program calls wrapper using such input parameters along with the identified service key corresponding to the specified distributed service as described above. In one embodiment legacy program may call wrapper via operating system not shown of legacy system which signals wrapper with the service key and input parameters when it is called.

HTTP client outbound manager receives the HTTP message and connects to intermediary as described above and HTTP client outbound manager forwards the HTTP request to intermediary which receives and forwards the request to translator as described in more detail below. As described herein intermediary may authenticate itself and or may be previously authenticated to legacy system and authenticated intermediary receives and forwards any communications from legacy system to translator and vice versa as described below.

Distributed service system corresponding to the requested service key receives the call and attempts to process the call in a manner conventional to the distributed service called or identify any communication or substantive error as described above. If distributed service system identifies a communication error such as an HTTP resend error as described above it notifies translation communication manager of such communication error and translation communication manager receives the error notification and may resend any missing packets or information to distributed service system in any conventional manner.

If distributed service system does not identify any communication error as described above then it sends a response which may be an expected response or a substantive error which is any error other than a communication error in the expected format to inbound translation manager which receives the response. Inbound translation manager identifies the type of translation from the IP address of the distributed service or identifies the distributed service call corresponding to the received response for example using destination and source IP address and port information corresponding to the received response which may be real IP address or virtual IP addresses and reverse translates the received response from the format in which it was received from distributed service system into the format specified by the corresponding translation stored in translation storage as described above.

In one embodiment if inbound translation manager receives a substantive error response it translates the error from the format it was received into an HTTP format using the translation information received as described above and stored in translation storage .

Inbound translation manager provides the reverse translated response or translated substantive error response to intermediary which receives the response and forwards it to HTTP client inbound manager as described above. In one embodiment inbound translation manager provides the reverse translated response to HTTP client inbound manager via intermediary as described in more detail above and below as an HTTP message which includes the reverse translated response in the payload of the message.

HTTP client inbound manager receives the HTTP message including the reverse translated response or HTTP error code via intermediary and forwards the reverse translated response or HTTP error code to wrapper as described above. When HTTP client inbound manager forwards such response to wrapper wrapper inbound manager receives the responses and identifies the type of response received as described above. If wrapper inbound manager identifies the response as a substantive type error response i.e. not an HTTP resend type error or other communication type error response then wrapper inbound manager adapts the received error message to a format recognized by legacy program from which the initial call was received and wrapper inbound manager forwards such adapted error message to legacy program as described above. For example for legacy program running COBOL wrapper inbound manager may translate an HTTP error code not an HTTP resend error to a COBOL error code in a manner used to communicate substantive errors among COBOL programs and forward such COBOL error code to legacy program .

If wrapper inbound manager does not identify the received response as a substantive type error message as described above then wrapper inbound manager forwards the reverse translated response to legacy program which receives the reverse translated response and incorporates it into an output of that program.

As described above communications from legacy systems to translator and vice versa may be forwarded between the two systems via intermediary . is a block schematic diagram of a representative intermediary of shown in more detail according to one embodiment of the present invention. Referring now to at any time intermediary administration manager receives digital certificate information including public and private keys corresponding to intermediary and also receives any public key information corresponding to any number of legacy systems via conventional digital certificate techniques or digital certificate exchange techniques and intermediary administration manager stores such information in intermediary system storage .

Intermediary administration manager also receives caller permissions and service key list information described above such as from a system administrator and intermediary administration manager stores such information in intermediary system storage . In one embodiment intermediary administration manager may receive caller permissions as a list of legacy system identifiers which may be IP addresses real or virtual and port numbers or host IDs or otherwise as described above and an indication as to whether distributed system calls are available to be made from such legacy system and may receive service key list information as a list of distributed service keys which correspond to distributed services that are available to be called by legacy systems via translator in the manner described above.

Using the digital certificate information stored in intermediary system storage communication interface establishes one or more secure connections with communication interface corresponding to any number of legacy systems via conventional public private key techniques. The legacy systems may initiate such connections. Once such a secure connection has been established with a legacy system of communication interface may receive a call request via such secure connection as described above. As described above a call request or call to a distributed service system from a legacy system is received as an HTTP message and includes a service key HTTP header and parameters HTTP payload .

When communication interface receives a call request as described above it identifies the legacy system that sent the call request such as via the secure connection through which it received the request and or other source location information corresponding to the received call request and provides the call request to intermediary permission manager including the source IP address and port information which may include a real IP address or a virtual IP address or a host ID from which the call request was received.

Intermediary permission manager receives the call request and checks the information in intermediary system storage to determine whether legacy system from which the request was received is permitted to make calls to distributed services via translator in the manner described above and intermediary permission manager also identifies the service key included with the call request and checks service key list information for the received service key as described above. In one embodiment communication interface retrieves caller permissions information and service key list information from intermediary system storage .

If intermediary permission manager determines that legacy system from which the call request was received is not a system from which calls to distributed services are permitted or if intermediary permission manager does not successfully match the received service key with an entry on the service key list in intermediary system storage then intermediary permission manager rejects the received call request by building an appropriate HTTP error message and sending in response to such received call request the HTTP error message to HTTP client from which the call request was received for example using the original source location information corresponding to the call request. As described above HTTP client receives the HTTP error message and forwards the error message to wrapper which receives the response to its call request converts the received response into the format recognizable to legacy program and forwards the formatted response to legacy program .

If intermediary permission manager determines that legacy system from which the call request was received is a system from which calls to distributed services are permitted and if intermediary permission manager also successfully identifies the received service key in the service key list in intermediary system storage then intermediary permission manager provides the call request to intermediary outbound manager .

Intermediary outbound manager receives the call request stores the source location information e.g. IP address and port number or host ID corresponding to the call request forwards the call request to translator supplying different IP address and port number information as the source location of the call request and logs the date and time of when the call request was forwarded as such in intermediary pending communication storage . In one embodiment intermediary outbound manager uses conventional Network Address Translation NAT techniques to assign a disguised version of the source location of the call request to use to send such request to the distributed services system . For example intermediary outbound manager may assign a port number or any other index to the call request and include the IP address of intermediary translator and the assigned port number as the source IP address and port number of the forwarded call request. Intermediary outbound manager stores or overwrites as such information in a circular buffer in intermediary pending communication storage as a log entry of the forwarded call request including the actual source IP address and port number or host ID corresponding to legacy system from which the call request was received the service key included in the call request and the date and time of when such call request was forwarded to translator using the alternate IP address and port number the alternate IP address and port number used and the payload of the request. In one embodiment intermediary pending communication storage includes a conventional circular buffer data structure. Intermediary outbound manager signals translator with an index of the information in the buffer.

Translator receives the forwarded call request and processes the call request as described above sending it using the disguised IP address assigned as described above.

Intermediary inbound communication manager listens for any response from translator and if any such response is received intermediary inbound communication manager identifies in the buffer in intermediary pending communication storage the assigned port number or other assigned index corresponding to the received response. Intermediary inbound communication manager marks the log entry in intermediary pending communication storage corresponding to such received port number as responded to or otherwise stores an indication associated with such index that a response has been received corresponding to the index. Intermediary inbound communication manager also identifies legacy system from which the original call request corresponding to such index was received such as via the source location stored corresponding to such received index and intermediary inbound communication manager forwards the response received from translator to HTTP client at such identified location as described above.

As described above HTTP client receives the response and forwards the response to wrapper which receives the response converts the received response into the format recognizable to legacy program that originally called it and forwards the formatted response to such legacy program .

Intermediary error manager occasionally retrieves the current date and time from an operating system not shown checks log entries in intermediary pending communication storage for any recent entries which have not been marked as responded and for which the amount of time that has elapsed since the date and time when the call request corresponding to such log entry was forwarded to translator and the current date and time exceeds a threshold amount of time as described above. In one embodiment intermediary error manager may check log entries at regular intervals such as every second or every two seconds or at any other intervals.

If intermediary error manager identifies any such log entry corresponding to a call request that has timed out as described above then intermediary error manager generates an HTTP timeout error message and sends the HTTP timeout error message to HTTP client from which the original call request corresponding to such log entry was received as described above. In one embodiment intermediary error manager sends the HTTP timeout error message addressed to the source location corresponding to such identified log entry.

HTTP client receives the HTTP timeout error message and forwards the message to wrapper which receives the HTTP timeout error in response to its call request converts the received response into the format recognizable to legacy program which called it and forwards the formatted response to such legacy program as described above.

