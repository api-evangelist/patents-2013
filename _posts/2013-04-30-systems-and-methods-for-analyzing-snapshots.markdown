---

title: Systems and methods for analyzing snapshots
abstract: This application describes techniques for creating a second snapshot of a first snapshot of a set of data, modifying the first snapshot, and reverting the modifications to the first snapshot. For example, portions of one or more transaction logs may be played into a database to put the database in a particular state a particular point in time. The second snapshot may then be used to revert to a prior state of the database such that additional transaction logs may be played into the database. These techniques enable the ability to put the database into multiple states as the database existed at multiple points in time. Therefore, data can be recovered from the database as the data existed at different points in time. Moreover, individual data objects in the database can be accessed and analyzed as the individual data objects existed at different points in time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298559&OS=09298559&RS=09298559
owner: Commvault Systems, Inc.
number: 09298559
owner_city: Tinton Falls
owner_country: US
publication_date: 20130430
---
This application is a continuation of U.S. patent application Ser. No. 12 978 984 entitled SYSTEMS AND METHODS FOR ANALYZING SNAPSHOTS filed Dec. 27 2010 now U.S. Pat. No. 8 433 682 which claims priority to and the benefit of U.S. Patent Application No. 61 291 805 entitled SYSTEMS AND METHODS FOR ANALYZING SNAPSHOTS filed on Dec. 31 2009 and is related to U.S. patent application Ser. No. 12 558 947 entitled USING A SNAPSHOT AS A DATA SOURCE filed on Sep. 14 2009 and U.S. patent application Ser. No. 12 979 101 filed on Dec. 27 2010 entitled SYSTEMS AND METHODS FOR PERFORMING DATA MANAGEMENT OPERATIONS USING SNAPSHOTS each of which is incorporated by reference in its entirety.

A transactional database application such as Microsoft SQL Server or Microsoft Exchange Server typically writes transactions to transaction logs prior to committing the transactions to the database. The database application then commits the transactions in the transaction logs to the database as permitted.

An administrator typically protects the data of the transactional database application by directing data protection software to periodically perform a full backup or other data protection operation of the database and the transaction logs as well as additional incremental backups or other data protection operations to capture changed data. For example the administrator may direct the software to perform a full snapshot copy of the database and the transaction logs. The administrator may then direct the software to perform additional snapshots of the database and the transaction logs to capture data that has changed such as additional transaction logs since the full snapshot copy was performed.

In order to recover the transactional database application as it existed at a specific point in time the administrator typically directs the software to recover the database and then play the necessary transaction logs. Playing alternatively referred to as replaying or applying transaction logs refers to committing transactions in the transaction logs to the database. This brings the transactional database application to the state it was in at the specific point in time. However once the administrator has recovered the transactional database application the administrator is typically not able to play additional transaction logs to bring the transactional database application to a state at a later point in time. Stated another way once a database is put into a state corresponding to a particular point in time in order to recover data from the database as the data existed at that particular point in time the administrator cannot put the database into another state corresponding to another point in time in order to recover data from the database as the data existed at the other point in time.

The need exists for a system that overcomes the above problems as well as one that provides additional benefits. Overall the examples herein of some prior or related systems and their associated limitations are intended to be illustrative and not exclusive. Other limitations of existing or prior systems will become apparent to those of skill in the art upon reading the following Detailed Description.

The headings provided herein are for convenience only and do not necessarily affect the scope or meaning of the claimed invention.

This application describes among other things techniques for creating a second snapshot of a first snapshot of a set of data modifying the first snapshot and reverting the modifications to the first snapshot. For example the described techniques may be used to play portions of one or more transaction logs into a database to put the database in a particular state that corresponds to a particular point in time. The second snapshot may then be used to revert the database to a prior state such that additional transaction logs may be played into the database. These techniques enable the database to be put into multiple states that correspond to when the database existed at multiple points in time. Therefore data can be recovered from the database as the data existed at different points in time. Moreover individual data objects in the database can be accessed and analyzed as the individual data objects existed at different points in time.

In some examples these techniques described herein involve creating a first snapshot of both a database and transaction logs associated with the database. Portions of one or more transaction logs may be played to commit corresponding changes to the database. A second snapshot is then taken of the first snapshot. The database can then be analyzed as it existed as of the time that the transaction logs were played into the database. Using the example of a Microsoft Exchange database the database can be analyzed to read data from individual mailboxes emails attachments etc. The second snapshot is then used to revert the database to the state it existed in as of the time the second snapshot was taken. Any number of transaction logs can then be played in order to put the database in a state that the database existed in at multiple points in time.

In some examples the techniques described herein involve utilizing replication logs to take snapshots of a replication copy of data. The replication logs indicate changes to a first set of data and can be used to replicate the changes to a second set of data that is a copy of the first set of data as the first set of data existed at a first point in time. The replication logs include at least one marker indicating a second point in time at which the first set of data is consistent. At least some of the replication logs are utilized to replicate at least some of the changes to the second set of data. Upon reaching the marker in the replication logs a snapshot of the second set of data is created. The snapshot of the second set of data is analyzed which may include accessing individual data objects within the second set of data.

Various examples of the invention will now be described. The following description provides specific details for a thorough understanding and enabling description of these examples. One skilled in the relevant art will understand however that the invention may be practiced without many of these details. Likewise one skilled in the relevant art will also understand that the invention may include many other obvious features not described in detail herein. Additionally some well known structures or functions may not be shown or described in detail below so as to avoid unnecessarily obscuring the relevant description.

The terminology used below is to be interpreted in its broadest reasonable manner even though it is being used in conjunction with a detailed description of certain specific examples of the invention. Indeed certain terms may even be emphasized below however any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.

While aspects of the invention such as certain functions are described as being performed exclusively on a single device the invention can also be practiced in distributed environments where functions or modules are shared among disparate processing devices which are linked through a communications network such as a Local Area Network LAN Wide Area Network WAN and or the Internet. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Aspects of the invention may be stored or distributed on computer readable media including tangible computer readable storage media such as magnetically or optically readable computer discs hard wired or preprogrammed chips e.g. EEPROM semiconductor chips nanotechnology memory biological memory or other data storage media. Alternatively computer implemented instructions data structures screen displays and other data under aspects of the invention may be distributed over the Internet or over other networks including wireless networks on a propagated signal on a propagation medium e.g. an electromagnetic wave s a sound wave etc. over a period of time or they may be provided on any analog or digital network packet switched circuit switched or other scheme .

Aspects of the invention will now be described in detail with respect to . illustrates an example of a data storage system that may employ aspects of the invention. illustrates in more detail certain components of the example data storage system of . illustrates a process for creating a second snapshot of a first snapshot of a set of data such as a database and associated logs. illustrate aspects of the process of in more detail. illustrates a process for utilizing consistency points to take snapshots of a set of data such as a database and associated logs in a data replication process.

The system may generally include combinations of hardware and software components associated with performing storage operations on electronic data. Storage operations include copying backing up creating storing retrieving and or migrating primary storage data e.g. data stores and or and secondary storage data which may include for example snapshot copies backup copies hierarchical storage management HSM copies archive copies and other types of copies of electronic data stored on storage devices . The system may provide one or more integrated management consoles for users or system processes to interface with in order to perform certain storage operations on electronic data as further described herein. Such integrated management consoles may be displayed at a central control facility or several similar consoles distributed throughout multiple network locations to provide global or geographically specific network data storage information.

In one example storage operations may be performed according to various storage preferences for example as expressed by a user preference a storage policy a schedule policy and or a retention policy. A storage policy is generally a data structure or other information source that includes a set of preferences and other storage criteria associated with performing a storage operation. The preferences and storage criteria may include but are not limited to a storage location relationships between system components network pathways to utilize in a storage operation data characteristics compression or encryption requirements preferred system components to utilize in a storage operation a single instancing or variable instancing policy to apply to the data and or other criteria relating to a storage operation. For example a storage policy may indicate that certain data is to be stored in the storage device retained for a specified period of time before being aged to another tier of secondary storage copied to the storage device using a specified number of data streams etc.

A schedule policy may specify a frequency with which to perform storage operations and a window of time within which to perform them. For example a schedule policy may specify that a storage operation is to be performed every Saturday morning from 2 00 a.m. to 4 00 a.m. A retention policy may specify how long data is to be retained at specific tiers of storage or what criteria must be met before data may be pruned or moved from one tier of storage to another tier of storage. In some cases the storage policy includes information generally specified by the schedule policy and or the retention policy. Put another way the storage policy includes the schedule policy and or the retention policy. Storage policies schedule policies and or retention policies may be stored in a database of the storage manager to archive media as metadata for use in restore operations or other storage operations or to other locations or components of the system .

The system may comprise a storage operation cell that is one of multiple storage operation cells arranged in a hierarchy or other organization. Storage operation cells may be related to backup cells and provide some or all of the functionality of backup cells as described in the assignee s U.S. patent application Ser. No. 09 354 058 now U.S. Pat. No. 7 395 282 which is incorporated herein by reference in its entirety. However storage operation cells may also perform additional types of storage operations and other types of storage management functions that are not generally offered by backup cells.

Storage operation cells may contain not only physical devices but also may represent logical concepts organizations and hierarchies. For example a first storage operation cell may be configured to perform a first type of storage operations such as HSM operations which may include backup or other types of data migration and may include a variety of physical components including a storage manager or management agent a secondary storage computing device a client and other components as described herein. A second storage operation cell may contain the same or similar physical components however it may be configured to perform a second type of storage operations such as storage resource management SRM operations and may include monitoring a primary data copy or performing other known SRM operations.

Thus as can be seen from the above although the first and second storage operation cells are logically distinct entities configured to perform different management functions i.e. HSM and SRM respectively each storage operation cell may contain the same or similar physical devices. Alternatively different storage operation cells may contain some of the same physical devices and not others. For example a storage operation cell configured to perform SRM tasks may contain a secondary storage computing device client or other network device connected to a primary storage volume while a storage operation cell configured to perform HSM tasks may instead include a secondary storage computing device client or other network device connected to a secondary storage volume and not contain the elements or components associated with and including the primary storage volume. The term connected as used herein does not necessarily require a physical connection rather it could refer to two devices that are operably coupled to each other communicably coupled to each other in communication with each other or more generally refer to the capability of two devices to communicate with each other. These two storage operation cells however may each include a different storage manager that coordinates storage operations via the same secondary storage computing devices and storage devices . This overlapping configuration allows storage resources to be accessed by more than one storage manager such that multiple paths exist to each storage device facilitating failover load balancing and promoting robust data access via alternative routes.

Alternatively or additionally the same storage manager may control two or more storage operation cells whether or not each storage operation cell has its own dedicated storage manager . Moreover in certain embodiments the extent or type of overlap may be user defined through a control console or may be automatically configured to optimize data storage and or retrieval.

The clients typically include application software for performing various operations. Clients typically also include an operating system on which the application software runs. A file system can be provided to facilitate and control file access by the operating system and application software. File systems can facilitate access to local and remote storage devices for file or data access and storage. Clients can also include local storage such as a media module media drive with fixed or removable media.

In some examples the clients include storage mechanisms for allowing computer programs or other instructions or data to be loaded into memory for execution. Such storage mechanisms might include for example a fixed or removable storage unit and an interface. Examples of such storage units and interfaces can include a program cartridge and cartridge interface a removable memory for example a flash memory or other removable memory module and memory slot a PCMCIA slot and card and other fixed or removable storage units and interfaces that allow software and data to be transferred from the storage unit to memory.

Data agent may be a software module or part of a software module that is generally responsible for performing storage operations on the data of the client stored in data store or other memory location. Each client may have at least one data agent and the system can support multiple clients . Data agent may be distributed between client and storage manager and any other intermediate components or it may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent .

As used herein the term module might describe a given unit of functionality that can be performed in accordance with one or more embodiments of the present invention. As used herein a module might be implemented utilizing any form of hardware software firmware or a combination thereof. For example one or more processors controllers ASICs PLAs logical components software routines or other mechanisms might be implemented to make up a module. In implementation the various modules described herein might be implemented as discrete modules or the functions and features described can be shared in part or in total among one or more modules. In other words as would be apparent to one of ordinary skill in the art after reading this description the various features and functionality described herein may be implemented in any given application and can be implemented in one or more separate or shared modules in various combinations and permutations. Even though various features or elements of functionality may be individually described or claimed as separate modules one of ordinary skill in the art will understand that these features and functionality can be shared among one or more common software and hardware elements and such description shall not require or imply that separate hardware or software components are used to implement such features or functionality.

The overall system may employ multiple data agents each of which may perform storage operations on data associated with a different application. For example different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data Microsoft SQL Server data Microsoft Sharepoint Server data and other types of data known in the art. Other embodiments may employ one or more generic data agents that can handle and process multiple data types rather than using the specialized data agents described above.

If a client has two or more types of data one data agent may be required for each data type to perform storage operations on the data of the client . For example to back up migrate and restore all the data on a Microsoft Exchange server the client may use one Microsoft Exchange Mailbox data agent to back up the Exchange mailboxes one Microsoft Exchange Database data agent to back up the Exchange databases one Microsoft Exchange Public Folder data agent to back up the Exchange Public Folders and one Microsoft Windows File System data agent to back up the file system of the client . These data agents would be treated as four separate data agents by the system even though they reside on the same client .

Alternatively the overall system may use one or more generic data agents each of which may be capable of handling two or more data types. For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data etc.

Data agents may be responsible for arranging or packing data to be copied or migrated into a certain format such as an archive file. Nonetheless it will be understood that this represents only one example and any suitable packing or containerization technique or transfer methodology may be used if desired. Such an archive file may include metadata a list of files or data objects copied the file and data objects themselves. Moreover any data moved by the data agents may be tracked within the system by updating indexes associated with appropriate storage managers or secondary storage computing devices . As used herein a file or a data object refers to any collection or grouping of bytes of data that can be viewed as one or more logical units.

Generally speaking storage manager may be a software module or other application that coordinates and controls storage operations performed by the system . Storage manager may communicate with some or all elements of the system including clients data agents secondary storage computing devices and storage devices to initiate and manage storage operations e.g. backups migrations data recovery operations etc. .

Storage manager may include a jobs agent that monitors the status of some or all storage operations previously performed currently being performed or scheduled to be performed by the system . One or more storage operations are alternatively referred to herein as a job or jobs. Jobs agent may be communicatively coupled to an interface agent e.g. a software module or application . Interface agent may include information processing and display software such as a graphical user interface GUI an application programming interface API or other interactive interface through which users and system processes can retrieve information about the status of storage operations. For example in an arrangement of multiple storage operations cell through interface agent users may optionally issue instructions to various storage operation cells regarding performance of the storage operations as described and contemplated herein. For example a user may modify a schedule concerning the number of pending snapshot copies or other types of copies scheduled as needed to suit particular needs or requirements. As another example a user may employ the GUI to view the status of pending storage operations in some or all of the storage operation cells in a given network or to monitor the status of certain components in a particular storage operation cell e.g. the amount of storage capacity left in a particular storage device .

Storage manager may also include a management agent that is typically implemented as a software module or application program. In general management agent provides an interface that allows various management agents in other storage operation cells to communicate with one another. For example assume a certain network configuration includes multiple storage operation cells hierarchically arranged or otherwise logically related in a WAN or LAN configuration. With this arrangement each storage operation cell may be connected to the other through each respective interface agent . This allows each storage operation cell to send and receive certain pertinent information from other storage operation cells including status information routing information information regarding capacity and utilization etc. These communications paths may also be used to convey information and instructions regarding storage operations.

For example a management agent in a first storage operation cell may communicate with a management agent in a second storage operation cell regarding the status of storage operations in the second storage operation cell. Another illustrative example includes the case where a management agent in a first storage operation cell communicates with a management agent in a second storage operation cell to control storage manager and other components of the second storage operation cell via management agent contained in storage manager .

Another illustrative example is the case where management agent in a first storage operation cell communicates directly with and controls the components in a second storage operation cell and bypasses the storage manager in the second storage operation cell. If desired storage operation cells can also be organized hierarchically such that hierarchically superior cells control or pass information to hierarchically subordinate cells or vice versa.

Storage manager may also maintain an index a database or other data structure . The data stored in database may be used to indicate logical associations between components of the system user preferences management tasks media containerization and data storage information or other useful data. For example the storage manager may use data from database to track logical associations between secondary storage computing device and storage devices or movement of data as containerized from primary to secondary storage .

Generally speaking the secondary storage computing device which may also be referred to as a media agent may be implemented as a software module that conveys data as directed by storage manager between a client and one or more storage devices such as a tape library a magnetic media storage device an optical media storage device or any other suitable storage device. In one embodiment secondary storage computing device may be communicatively coupled to and control a storage device . A secondary storage computing device may be considered to be associated with a particular storage device if that secondary storage computing device is capable of routing and storing data to that particular storage device .

In operation a secondary storage computing device associated with a particular storage device may instruct the storage device to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or restore data to or from that media. Secondary storage computing device may communicate with a storage device via a suitable communications path such as a SCSI or Fibre Channel communications link. In some embodiments the storage device may be communicatively coupled to the storage manager via a SAN.

Each secondary storage computing device may maintain an index a database or other data structure that may store index data generated during storage operations for secondary storage SS as described herein including creating a metabase MB . For example performing storage operations on Microsoft Exchange data may generate index data. Such index data provides a secondary storage computing device or other external device with a fast and efficient mechanism for locating data stored or backed up. Thus a secondary storage computing device index or a database of a storage manager may store data associating a client with a particular secondary storage computing device or storage device for example as specified in a storage policy while a database or other data structure in secondary storage computing device may indicate where specifically the data of the client is stored in storage device what specific files were stored and other information associated with storage of the data of the client . In some embodiments such index data may be stored along with the data backed up in a storage device with an additional copy of the index data written to index cache in a secondary storage device. Thus the data is readily available for use in storage operations and other activities without having to be first retrieved from the storage device .

Generally speaking information stored in cache is typically recent information that reflects certain particulars about operations that have recently occurred. After a certain period of time this information is sent to secondary storage and tracked. This information may need to be retrieved and uploaded back into a cache or other memory in a secondary computing device before data can be retrieved from storage device . In some embodiments the cached information may include information regarding format or containerization of archives or other files stored on storage device .

One or more of the secondary storage computing devices may also maintain one or more single instance databases . Single instancing alternatively called data deduplication generally refers to storing in secondary storage only a single instance of each data object or data block in a set of data e.g. primary data . More details as to single instancing may be found in one or more of the following commonly assigned U.S. patent applications 1 U.S. patent application Ser. No. 11 269 512 entitled SYSTEM AND METHOD TO SUPPORT SINGLE INSTANCE STORAGE OPERATIONS 2 U.S. patent application Ser. No. 12 145 347 entitled APPLICATION AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT or 3 U.S. patent application Ser. No. 12 145 342 entitled APPLICATION AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT 4 U.S. patent application Ser. No. 11 963 623 entitled SYSTEM AND METHOD FOR STORING REDUNDANT INFORMATION 5 U.S. patent application Ser. No. 11 950 376 entitled SYSTEMS AND METHODS FOR CREATING COPIES OF DATA SUCH AS ARCHIVE COPIES 6 U.S. patent application Ser. No. 12 565 576 entitled SYSTEMS AND METHODS FOR MANAGING SINGLE INSTANCING DATA or 7 U.S. patent application Ser. No. 12 647 906 entitled BLOCK LEVEL SINGLE INSTANCING each of which is incorporated by reference herein in its entirety.

In some examples the secondary storage computing devices maintain one or more variable instance databases. Variable instancing generally refers to storing in secondary storage one or more instances but fewer than the total number of instances of each data block or data object in a set of data e.g. primary data . More details as to variable instancing may be found in the commonly assigned U.S. patent application Ser. No. 12 649 454 entitled STORING A VARIABLE NUMBER OF INSTANCES OF DATA OBJECTS.

In some embodiments certain components may reside and execute on the same computer. For example in some embodiments a client such as a data agent or a storage manager coordinates and directs local archiving migration and retrieval application functions as further described in the previously referenced U.S. patent application Ser. No. 09 610 738. This client can function independently or together with other similar clients .

As shown in each secondary storage computing device has its own associated metabase . Each client may also have its own associated metabase . However in some embodiments each tier of storage such as primary storage secondary storage tertiary storage etc. may have multiple metabases or a centralized metabase as described herein. For example rather than a separate metabase or index associated with each client in the metabases on this storage tier may be centralized. Similarly second and other tiers of storage may have either centralized or distributed metabases. Moreover mixed architecture systems may be used if desired that may include a first tier centralized metabase system coupled to a second tier storage system having distributed metabases and vice versa etc.

Moreover in operation a storage manager or other management module may keep track of certain information that allows the storage manager to select designate or otherwise identify metabases to be searched in response to certain queries as further described herein. Movement of data between primary and secondary storage may also involve movement of associated metadata and other tracking information as further described herein.

In some examples primary data may be organized into one or more sub clients. A sub client is a portion of the data of one or more clients and can contain either all of the data of the clients or a designated subset thereof. As depicted in the data store includes two sub clients. For example an administrator or other user with the appropriate permissions the term administrator is used herein for brevity may find it preferable to separate email data from financial data using two different sub clients having different storage preferences retention criteria etc.

In addition to the data agent the client includes a snapshot component an application and data . The application may be any application executing on the client such as a database server application for example Microsoft SQL server Microsoft Active Directory Server Oracle etc. an email server application for example Microsoft Exchange Server Apache etc. or other types of servers for example application servers such as Microsoft SharePoint servers or web servers virtual machine servers such as Microsoft Virtual Server file servers etc. . The application has associated data which includes a database and logs shown as logs one through n. The application may write data to the database using transactional techniques. That is the application may write changes to the logs before committing the changes to the database .

For example consider an application that is an email server application such as Microsoft Exchange. The email server application has an associated database to which it writes its data in a transactional manner. The data of the application also includes logs . For example logs one and two may exist as of day one. A full copy of the database and its logs that occurs on day one may result in copying the database and logs one and two. On day two the email server application creates logs three and four and an incremental copy of the database and its logs on day two would only copy logs three and four. On day three logs five and six are created and an incremental copy of the database and its logs on day three would copy over logs five and six. Accordingly the state of the data of the email server application can be recovered to multiple points in time over days one through three by playing portions of the appropriate logs into the database . Further incremental copies of additional logs can be made at later points in time. Although this example describes that the email server application creates two logs each day those of skill in the art will understand that any number of logs i.e. zero logs one log or greater than two logs may be created each day.

The snapshot component creates snapshots of the data of the client . The snapshot component includes software components and may also include hardware and or firmware components. The snapshot component may be provided in its entirety by a single entity for example a single vendor or the snapshot component may include sub components that are provided by different entities such as multiple vendors .

In some examples the snapshot component includes a Microsoft Volume Shadow Copy Service VSS sub component and a software based VSS provider sub component that is provided by the assignee of the present application CommVault Systems Inc. In these examples the data agent interacts with the Microsoft VSS sub component to create snapshots. The Microsoft VSS sub component notifies the application to prepare the data for creating a snapshot. The application prepares the data in an appropriate manner such as completing open transactions flushing application caches etc. . The Microsoft VSS sub component initiates a commit phase and notifies the application that the application should be quiesced and to freeze writes to the data . The Microsoft VSS sub component may also flush a file system buffer and freeze the file system to ensure that file system metadata is written and that the data is written in a consistent order. The Microsoft VSS sub component notifies the VSS provider sub component to create the snapshot and the VSS provider sub component creates the snapshot. The Microsoft VSS sub component then thaws or resumes file system operations and notifies the application that the application can unquiesce and complete any writes to the data .

In other examples in addition to or as an alternative to the software based VSS provider sub component the snapshot component includes other software based VSS provider sub components such as a Microsoft system software provider a Microsoft Data Protection Manager provider sub component or a NetApp SnapManager provider sub component. These other software based VSS provider sub components may create snapshots in manners similar to the manner described in the preceding paragraph or may use other techniques to create snapshots.

In other examples in addition to the Microsoft VSS sub component the snapshot component includes one or more hardware based VSS provider sub components such as those provided by vendors such as Hewlett Packard EMC NetApp IBM and other vendors. These hardware based VSS provider sub components may create snapshots in manners similar to the manner described above or may use other techniques to create snapshots. Those of skill in the art will understand that the snapshot component may include various software based and or hardware based sub components and interact with other components in various ways in order to create snapshots of the data .

The snapshot component may create snapshots using various techniques such as copy on write redirect on write split mirror copy on write with background copy log structure file architecture techniques continuous data protection techniques and or other techniques. The snapshot component may store the created snapshots on a particular volume of the client .

The secondary storage computing device includes a copy component that copies snapshots from the client to another storage device such as storage device . The secondary storage computing device also stores certain snapshot information and or snapshot metadata in various data structures as described herein. The secondary storage computing device may store snapshot information and or snapshot metadata in secondary storage computing device index .

The secondary storage computing device also includes an interface component . The interface component provides access to the copied snapshot data. The interface component can be used to access data objects created in other types of secondary copies such as backup copies archive copies and other types of copies. The interface component can also be used to display to a user available snapshots or point in time copies of the data that can be used for recovery or other purposes. The secondary storage computing device also includes a snapshot component . The snapshot component may function similarly to the snapshot component .

The secondary storage computing device also includes applications that perform various functions using copied snapshot data. The applications include an indexing component a search component an e discovery component and an information management component . As described in more detail herein the applications access copied snapshot data stored on storage device and data structures stored in secondary storage computing device index in order to perform various functions.

The process begins at step time t where the snapshot component accesses the database and associated logs and creates a first snapshot of the database and associated logs . See . For example the snapshot component may use a copy on write technique to create the first snapshot and the process is described using this example although other techniques for creating snapshots may be used . The first snapshot includes a set of pointers Pthrough P that point to blocks Bthrough B respectively and storage location for blocks.

At step time t the application modifies the database and logs . For example the application may commit changes in certain logs to the database and or create new logs . These changes may result to modifications to blocks Band B which become blocks B and B respectively . Prior to their modification the snapshot component copies blocks Band Bto storage location . Pointers Pand Pmay now point to blocks Band Bin storage location rather than Band Bin storage location .

At step time t the copy component copies the first snapshot to another location such as the storage device thereby creating a copy of the first snapshot . See . For example the copy component may copy the first snapshot as part of a backup process. The copy component creates a copy set of blocks blocks CBthrough CB and a copy set of pointers that point to the copy set of blocks CPthrough CP . Additionally or alternatively the first snapshot may be transferred to the other location as part of a background copy process or using other techniques as known to those of skill in the art.

At step the snapshot component determines whether to take additional snapshots of the database and logs . For example the snapshot component may be programmed to create snapshots periodically such as once a day at for example 2 00 a.m. As another example an administrator may request that the snapshot component create additional snapshots of the database and logs such as on an ad hoc basis. If the snapshot component is to take additional snapshots the process returns to step and additional snapshots are created e.g. snapshot the database and logs may be modified and the additional snapshots e.g. snapshot are copied to the other location e.g. creating snapshot copy . As shown in these additional steps occur at times tthrough t where blocks Band Bare now changed and copied out before being changed to storage location .

If the snapshot component is not to take additional snapshots at this time the process continues at step where the secondary storage computing device receives an indication to analyze a copy of a snapshot copied to the other location e.g. snapshot copy or snapshot copy . For example the secondary storage computing device may receive a request to obtain a data object for example an email message a mailbox a message store etc. stored in the database and logs .

At step time t the snapshot component mounts the snapshot copy at the other location. Mounting the snapshot copy creates a read write copy of the database and logs . See .

At step time t the snapshot component creates a snapshot of the database and logs . This creates a set of pointers SSPthrough SSP and a storage location . See .

At step time t the snapshot component plays the logs into the database . For example if the snapshot is created by a hardware based sub component the snapshot may be read write and the snapshot component can modify the snapshot any time after creating the snapshot . As another example if the snapshot is created by a software based sub component the snapshot component may have a window of time immediately following the creation during which the snapshot component can modify the snapshot . The snapshot component may play all or portions of one or more logs into the database . Playing the logs into the database modifies certain blocks as shown blocks CBand CB which become blocks CB and CB respectively . If the logs and snapshots include insufficient detail to make certain changes to the database the system may also create and maintain an index of changes that map changes recorded by the snapshots with files or data objects changed so that the system can identify specific blocks that may need to be restored before analysis is performed. Before the blocks are modified the snapshot component copies the blocks blocks CBand CB to storage location . See .

After the snapshot component plays logs into the database the database may be in a state in which additional logs cannot be played into the database . For example a bit or flag may be set in the database indicating that further logs cannot be played into the database . In some examples the snapshot component creates the snapshot of the database and logs after playing the logs into the database .

At step time t the applications analyze the database and logs . See . For example the applications may analyze the database and logs in order to for example analyze individual data objects within the database and logs . The applications may analyze the database and logs to perform various functions on individual data objects. For example the applications may index individual data objects classify individual data objects extract individual data objects from the set of data in order to or copy restore individual data objects to other locations deduplicate individual data objects and or perform other functions. More details as to functions that may be performed on the database and logs are described in the previously referenced U.S. patent application Ser. No. 12 979 101 now U.S. Pat. No. 8 595 191 entitled SYSTEMS AND METHODS FOR PERFORMING DATA MANAGEMENT OPERATIONS USING SNAPSHOTS. 

At step time t the snapshot component reverts the mounted database and logs to the state they were at the time the snapshot was created time t . For example the snapshot component may revert the mounted database and logs by performing a VSS revert operation using the snapshot . Additionally or alternatively the snapshot component may use revert operations other than VSS revert operations and or other techniques to revert the mounted database and logs . See . The process may then loop back to block and take additional snapshots or end.

Performing a revert operation reverts the mounted database and logs to the state they were in at the time the snapshot was created time t . For example if the snapshot was created before the mounted database and logs were modified by playing logs into the database performing a revert operation on the mounted database and logs will revert mounted database and logs to the state it was in before playing the logs into the database . This puts the database into a state such that additional logs can be played into it. For example if the snapshot component had previously created the snapshot of the mounted database and logs and then played logs one and two into the database the snapshot component can then play additional logs for example logs three to n into the database .

As another example if the snapshot of the mounted database and logs was taken after the mounted database and logs were modified performing a revert operation will revert the mounted database and logs to the state they were in after being modified for example after logs were played into the database . This also offers the opportunity to play additional logs such as those from later snapshots into the database in order to put the database into the state it existed in at multiple points in time.

Accordingly using snapshots in this way preserves the integrity of the database in such a way that it can be used for both analyzing the data in the database and the logs as well as using the database and the logs to perform a full recovery of the database and logs or to perform restores of individual data objects within the database and logs .

In order to analyze the data in the database and logs certain logs may need to be played into the database . For example to analyze the state of the data as it existed at the end of day one logs one and two would need to be played into the database . However playing such logs into the database may preclude the possibility of playing additional logs into the database . Taking a snapshot of the mounted database and logs solves this problem by enabling the ability to revert the data to the state it existed in prior to or immediately after the playing of certain logs into the database . The techniques described herein facilitate putting the data into a state at a specific point in time analyzing the data as it existed at that specific point in time and then performing a revert operation upon a snapshot of the data in order to revert the data to a state in which additional logs may be played into the database or in which all or portions of the data can be recovered.

Accordingly the data can be analyzed for example individual data objects may be indexed searched extracted recovered etc. and then such individual data objects can be also analyzed at a later point in time in order to pick up any later changes to the individual data objects. For example an email message in an email server application database and logs may have a first state at a first point in time. Using the techniques described herein the snapshot component can put the database into the first state at the first point in time and extract the email message from the database . The snapshot component can then revert the database to a prior state and then play additional logs into the database to recover the email message as it existed at a second later point in time. After step the process concludes.

In some examples the techniques described herein may be used on copies of data created other than by snapshot operations. For example the secondary storage computing device may create copies of the database and logs by performing backup operations on the database and logs . The secondary storage computing device may create a full backup of the database and logs one and two on day one. On day two the email server application creates logs three and four and an incremental backup of the database and logs on day two would only backup logs three and four. On day three logs five and six are created and an incremental backup of the database and logs on day three would backup logs five and six. The following table illustrates this example 

In some examples the techniques described herein may be used on copies of data created by replication operations such as CDR Continuous Data Replication DDR Discrete Data Replication and other replication operations. For example for data protected by a replication operation multiple Consistent Recovery Points CRPs alternatively referred to as markers can be established and snapshots can be taken at such CRPs. To create a CRP the system suspends writes to the data and inserts the CRP into the CDR logs that indicate changes to the data. The system then copies the first CDR logs to another location. The system can play the CDR logs to replicate the changes to a copy of the data at another location the replication data copy . When the system arrives at or reaches the CRP the system can take a snapshot of the replicated data copy. The system can then modify the snapshot of the replicated data copy for example by playing application logs into an application database so that the snapshot of the replicated data copy can be analyzed.

The process begins at step where the snapshot component quiesces the application . Quiescing the application puts the data into a state in which the data is consistent or stable. The snapshot component can quiesce the application using the VSS sub component. The VSS sub component can then notify the VSS provider sub component to create the snapshot. However the VSS provider sub component does not create a snapshot. Instead at step which occurs at a second point in time after the first point in time the snapshot component inserts a CRP into the CDR logs. The CRP may be places at predetermined periodic intervals such as every hour or every midnight or sporadically upon user command. At step the snapshot component e.g. the VSS sub component unquiesces the application .

At step the data agent copies the CDR logs from the source computing system to the destination computing system. The copying can be done periodically as the CDR logs are created using other techniques. At step the destination computing system plays the CDR logs to replicate changes to the data to the replication data copy stored at the destination computing system. At step the destination computing system arrives at or reaches the CRP in the CDR logs and takes a snapshot of the replication data copy with the logs replayed i.e. changes to the data populated based on the changes indicated in the logs .

At step the destination computing system puts the snapshot of the replication data copy into a state at which the application data can be analyzed e.g. a clean shutdown state . To do so the destination computing system can play the logs into the database of the snapshot of the replication data copy as described herein. At step the destination computing system analyzes the database as described herein. The destination computing system can access one or more individual data objects in the database e.g. emails files etc. At step the destination computing system continues playing CDR logs to replicate additional or other changes to the replication data copy at the destination computing system. The process then concludes.

Additionally or alternatively instead of analyzing the snapshot of the replication data copy the destination computing system can analyze the replication data copy. To do so the destination computing system plays the logs into the database of the replication data copy. Such modifications prevent the destination computing system from playing the CDR logs to replicate changes to the replication data copy. After analyzing the replication data copy the destination computing system can then utilize the revert functionality of the snapshot to revert the replication data copy to the state it was in prior to the playing of the logs into the database . Such reversion allows the destination computing system to play the CDR logs into the replication data copy.

The process provides several advantages. One advantage is that control over when the data on the source computing system is to be snapshotted is located on the source computing system while the actual snapshotting occurs on the destination computing system. Such division between an instruction to take a snapshot and the creation of the snapshot according to the instruction can save resources on the source computing system. Another advantage is that the snapshot taken on the destination computing system although not application aware because the application is not executing on the destination computing system can be considered as application aware because the snapshot is taken at a time when the replication data copy is consistent. Other advantages will be apparent to those of skill in the art.

In some examples both snapshot operations and non snapshot operations may be used. For example an initial full copy and snapshot may be taken of the database and logs . Subsequent to the initial snapshot incremental copies or snapshots of the database and logs may be made. Those of skill in the art will understand that various techniques may be used to protect the database and logs .

Copies of data created using the techniques described herein may be utilized in other fashions. For example a first snapshot of a database and logs could be mounted for use by a client other than the original client for example for use as a standby server . Prior to being mounted a second snapshot could be made of the first snapshot in order to be able to back out or undo any changes to the first snapshot by the mounting and subsequent use.

As another example after the first snapshot of the database and logs is mounted by the other client tests could be run on the first snapshot in order to validate or verify the first snapshot e.g. to ensure that the database and logs was correctly copied such as by reading individual data objects in the database and logs . For example data could be read out of the database and logs and compared to data read out of the copy of the database and logs to ensure that the data is valid e.g. by creating checksums of the data and comparing the checksums . This could obviate the need to validate or verify the first snapshot by restoring the first snapshot to its original location which could be a lengthy process. Tests could also be run on the first snapshot to check the integrity of the original database and logs .

Snapshots may be taken of copies of data created by non snapshot operations in order to perform these and other functions described herein.

From the foregoing it will be appreciated that specific examples of data storage systems have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. For example although snapshot operations may have been described the systems may be used to perform many types of storage operations e.g. backup operations restore operations archival operations copy operations Continuous Data Replication CDR operations recovery operations migration operations HSM operations etc. . Accordingly the invention is not limited except as by the appended claims.

Terms and phrases used in this document and variations thereof unless otherwise expressly stated should be construed as open ended as opposed to limiting. As examples of the foregoing the term including should be read as meaning including without limitation or the like the term example is used to provide suitable instances of the item in discussion not an exhaustive or limiting list thereof the terms a or an should be read as meaning at least one one or more or the like and adjectives such as conventional traditional normal standard known and terms of similar meaning should not be construed as limiting the item described to a given time period or to an item available as of a given time but instead should be read to encompass conventional traditional normal or standard technologies that may be available or known now or at any time in the future. Likewise where this document refers to technologies that would be apparent or known to one of ordinary skill in the art such technologies encompass those apparent or known to the skilled artisan now or at any time in the future.

The presence of broadening words and phrases such as one or more at least but not limited to or other like phrases in some instances shall not be read to mean that the narrower case is intended or required in instances where such broadening phrases may be absent. The use of the term module does not imply that the components or functionality described or claimed as part of the module are all configured in a common package. Indeed any or all of the various components of a module whether control logic or other components can be combined in a single package or separately maintained and can further be distributed in multiple groupings or packages or across multiple locations.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. The word coupled as generally used herein refers to two or more elements that may be either directly connected or connected by way of one or more intermediate elements. Additionally the words herein above below and words of similar import when used in this application shall refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items that word covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above detailed description of embodiments of the invention is not intended to be exhaustive or to limit the invention to the precise form disclosed above. While specific embodiments of and examples for the invention are described above for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative embodiments may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed in parallel or may be performed at different times.

The teachings of the invention provided herein can be applied to other systems not necessarily the system described above. The elements and acts of the various embodiments described above can be combined to provide further embodiments.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the invention in light of the above Detailed Description. While the above description details certain embodiments of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in implementation details while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed embodiments but also all equivalent ways of practicing or implementing the invention under the claims.

While certain aspects of the invention are presented below in certain claim forms the inventors contemplate the various aspects of the invention in any number of claim forms. For example while only one aspect of the invention is recited as embodied in a computer readable medium other aspects may likewise be embodied in a computer readable medium. As another example while only one aspect of the invention is recited as a means plus function claim under 35 U.S.C. 112 sixth paragraph other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 6 will begin with the words means for. Accordingly the inventors reserve the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the invention.

