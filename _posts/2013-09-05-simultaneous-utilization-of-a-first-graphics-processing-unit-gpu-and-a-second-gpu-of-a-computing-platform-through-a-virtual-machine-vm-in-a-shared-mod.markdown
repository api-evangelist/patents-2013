---

title: Simultaneous utilization of a first graphics processing unit (GPU) and a second GPU of a computing platform through a virtual machine (VM) in a shared mode and a dedicated mode respectively
abstract: A method includes executing a driver component on a hypervisor of a computing platform including a first graphics processing unit (GPU) and a second GPU, and executing an instance of the driver component in the VM. The method also includes providing support for hardware virtualization of the second GPU in the hypervisor and the instance of the driver component executing in the VM, defining a data path between the VM and the first GPU in a configuration register, and defining a data path between the VM and the second GPU in another configuration register. Further, the method includes providing a capability to the VM to utilize the first GPU in a shared mode with one or more other VM(s) and to simultaneously dedicatedly utilize the second GPU based on reading exposed emulated versions of the configuration register and the another configuration register and the support for the hardware virtualization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098323&OS=09098323&RS=09098323
owner: NVIDIA Corporation
number: 09098323
owner_city: Santa Clara
owner_country: US
publication_date: 20130905
---
This disclosure relates generally to virtualized computing platforms and more particularly to simultaneous utilization of a first Graphics Processing Unit GPU and a second GPU of a computing platform through a virtual machine VM in a shared mode and a dedicated mode respectively.

A hypervisor may consolidate VMs on a computing platform including a GPU to enable sharing of resources thereof between the VMs. Sharing of the GPU resources may be detrimental to performance. Therefore another GPU of the computing platform may dedicatedly be utilized by the VM to address requirements of a compute intensive application executing therein. When graphics capability is required in the VM software emulation or another dedicated GPU may be employed therefore. Such a graphics capability provision may suffer from low performance and lack of support for key Application Programming Interface s API s such as Open Graphics Library OpenGL in the case of software emulation and restricted VM scalability in the case of utilization of the another dedicated GPU.

Disclosed are a method a device and or a system of simultaneous utilization of a first Graphics Processing Unit GPU and a second GPU of a computing platform through a virtual machine VM in a shared mode and a dedicated mode respectively.

In one aspect a method includes executing a driver component on a hypervisor of a computing platform including a first graphics processing unit GPU and a second GPU. The hypervisor is configured to consolidate a VM on the computing platform including the first GPU and the second GPU and to virtualize resources thereof. The method also includes executing an instance of the driver component in the VM providing support for hardware virtualization of the second GPU in the hypervisor and the instance of the driver component executing in the VM and defining a data path between the VM and the first GPU in a configuration register.

Further the method includes defining a data path between the VM and the second GPU in another configuration register and reading through the instance of the driver component in the VM an emulated version of the configuration register exposed through a hypervisor component executing on the hypervisor corresponding to the VM and an emulated version of the another configuration register exposed through the hypervisor. Still further the method includes providing a capability to the VM to utilize the first GPU in a shared mode with one or more other VM s based on the data path definition read through the exposed emulated version of the configuration register and to simultaneously dedicatedly utilize the second GPU based on the data path definition read through the exposed emulated version of the another configuration register and the support for the hardware virtualization of the second GPU in the instance of the driver component executing in the VM.

In another aspect a non transitory medium readable through a computing platform and including instructions embodied therein that are executable through the computing platform is disclosed. The non transitory medium includes instructions to execute a driver component on a hypervisor of the computing platform including a first GPU and a second GPU. The hypervisor is configured to consolidate a VM on the computing platform including the first GPU and the second GPU and to virtualize resources thereof. The non transitory medium also includes instructions to execute an instance of the driver component in the VM instructions to provide support for hardware virtualization of the second GPU in the hypervisor and the instance of the driver component executing in the VM and instructions to define a data path between the VM and the first GPU in a configuration register.

Further the non transitory medium includes instructions to define a data path between the VM and the second GPU in another configuration register and instructions to read through the instance of the driver component in the VM an emulated version of the configuration register exposed through a hypervisor component executing on the hypervisor corresponding to the VM and an emulated version of the another configuration register exposed through the hypervisor. Still further the non transitory medium includes instructions to provide a capability to the VM to utilize the first GPU in a shared mode with one or more other VM s based on the data path definition read through the exposed emulated version of the configuration register and to simultaneously dedicatedly utilize the second GPU based on the data path definition read through the exposed emulated version of the another configuration register and the support for the hardware virtualization of the second GPU in the instance of the driver component executing in the VM.

In yet another aspect a computing platform includes a memory a first GPU and a second GPU communicatively coupled to the memory. The computing platform also includes a hypervisor configured to consolidate a VM on the computing platform and to virtualize resources thereof. The hypervisor includes a driver component executing thereon. The VM executes an instance of the driver component thereon. Support for hardware virtualization of the second GPU is provided in the hypervisor and the instance of the driver component executing in the VM. A data path between the VM and the first GPU is configured to be defined in a configuration register and a data path between the VM and the second GPU is configured to be defined in another configuration register.

The instance of the driver component in the VM is configured to read an emulated version of the configuration register exposed through a hypervisor component executing on the hypervisor corresponding to the VM and an emulated version of the another configuration register exposed through the hypervisor. The VM is provided with a capability to utilize the first GPU in a shared mode with one or more other VM s based on the data path definition read through the exposed emulated version of the configuration register and to simultaneously dedicatedly utilize the second GPU based on the data path definition read through the exposed emulated version of the another configuration register and the support for the hardware virtualization of the second GPU in the instance of the driver component executing in the VM.

The methods and systems disclosed herein may be implemented in any means for achieving various aspects and may be executed in a form of a machine readable medium embodying a set of instructions that when executed by a machine cause the machine to perform any of the operations disclosed herein. Other features will be apparent from the accompanying drawings and from the detailed description that follows.

Other features of the present embodiments will be apparent from the accompanying drawings and from the detailed description that follows.

Example embodiments as described below may be used to provide a method a device and or a system of simultaneous utilization of a first Graphics Processing Unit GPU and a second GPU of a computing platform through a virtual machine VM in a shared mode and a dedicated mode respectively. Although the present embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the various embodiments.

GPU GPU and memory may be part of a computing platform associated with computing system . It is obvious that computing system may also include a Central Processing Unit CPU not shown . A hypervisor may execute on computing platform hypervisor may be a high level system software or a program enabling multiple operating systems share hardware resources of computing platform . Hypervisor may control GPU GPU memory and other resources of computing platform to abstract each of the multiple operating systems hypervisor may consolidate virtual machines VMs on computing platform .

Driver stack may include a resource manager stack to manage assignment of resources of computing platform to VMs . Resource manager stack may enable hypervisor provide a virtualized GPU instance vGPU to each VM . As shown in each VM may execute an application thereon application is shown as being part of operating system . It is obvious that more than one application may execute on a VM shows one application per VM merely for the sake of illustrative convenience.

In the case of GPU hypervisor may employ a hardware virtualization technology e.g. utilizing Intel Virtualization Technology for Directed Input Output I O VT d utilizing an Input Output Memory Management Unit IOMMU to pass through GPU to a VM . Thus GPU may be configured to dedicatedly or solely serve VM . While sharing GPU between multiple VMs provides for scalability utilizing a dedicated GPU to serve a VM may provide for increased performance. For example it may be preferable to utilize GPU to dedicatedly serve VM when executing an intensive NVIDIA Compute Unified Device Architecture CUDA application e.g. a fluid mechanics simulation image noise reduction .

When graphics capability is required in VM software emulation may be employed therefore. Said software emulation may provide for low performance and lack of support for key Application Programming Interface s API s such as Open Graphics Library OpenGL . To dispense with the low performance VM may utilize another GPU not shown dedicatedly for the graphics capability. However this may limit the number of VMs executable on computing platform .

In one or more embodiments guest driver component may be an instance of a driver component that is part of driver stack executing on hypervisor. For example guest driver component may include an OpenGL driver component configured to enable support of an OpenGL API to provide enhanced graphics rendering capability within VM .

It should be noted that an analogous guest resource manager component not shown in may also be a part of computing system . However the aforementioned analogous guest resource manager component may solely be capable of enabling data processing either through a dedicated GPU or a GPU shared between VMs. In contrast in one or more embodiments guest resource manager component may be modified to enable reading of configuration settings associated with both GPU and GPU . In one or more embodiments the aforementioned settings may be made available to guest resource manager component by way of a hypervisor component e.g. through providing access to an emulated configuration register it is obvious that emulated configuration register may include more than one emulated configuration register s executing on hypervisor in the case of GPU and by way of hypervisor itself in the case of GPU . In one or more embodiments hypervisor may include support for hardware virtualization e.g. for IOMMU of GPU by way of a hypervisor hardware virtualization component provided therein.

Further in one or more embodiments support for hardware virtualization e.g. for IOMMU may also be provided in guest resource manager component in the case of GPU . It is obvious that hypervisor component may be analogous to hypervisor component of . It should be noted that VMs sharing utilization of GPU other than VM have been ignored for the sake of illustrative convenience and clarity.

In one or more embodiments computing system may enable specifying functionalities from a side of computing platform . In one or more embodiments a user e.g. an administrator of computing platform may decide on GPU resources being allocated to applications e.g. application and application shown in executing on VM in other words user may decide on the application e.g. application configured to dedicatedly utilize GPU and the application e.g. application an example application may be an OpenGL application configured to utilize GPU in a shared mode thereof with other VMs not shown . For example a data path between VM and GPU in the shared mode may be defined through hypervisor component . shows a data path definition between VM and GPU as part of hypervisor component emulated configuration register is shown interfaced with data path definition . In one or more embodiments during loading of guest driver component guest resource manager component may read emulated configuration register to track configuration settings e.g. VMs including VM associated with GPU .

In the case of GPU a data path between VM and GPU may be defined and stored in memory . In one or more embodiments hypervisor may expose an emulated version of the data path definition e.g. data path definition to VM in an emulated configuration register . As shown in an example application may be a compute intensive CUDA application. In one or more embodiments driver stack executing on hypervisor may be packaged with a driver component e.g. a CUDA driver component associated with application . In one or more embodiments as discussed above hardware virtualization support e.g. by way of including an IOMMU driver component may also be provided in guest resource manager component to enable VM be aware of the hardware virtualization of the dedicated GPU .

In one or more embodiments as and when application executes on VM a driver component e.g. CUDA driver component associated with application may be loaded on VM as part of guest driver component . In one or more embodiments the execution of driver component along with hardware virtualization support provided in guest resource manager component may dynamically tie down application to GPU in one or more embodiments GPU may be rendered controllable through VM by way of a device assignment operation e.g. implemented as a hypercall from VM to hypervisor . Alternately or additionally a mapping e.g. defined through user may exist between application and GPU in memory by way of the data path definition discussed above in an example embodiment a configuration Application Programming Interface API may be exposed to user or another user during execution of application that enables tying GPU to application based on hardware virtualization support .

In one or more embodiments application or application may transmit a resource allocation request to guest resource manager component . In one or more embodiments based on the exposed emulated configuration register data path definition or the tying of GPU to application guest resource manager component may be configured to determine whether resource allocation request is directed to GPU or GPU . It is obvious that resource allocation requests may be transmitted both from application and application . Guest resource manager component may be configured to determine the appropriate GPUs to which said resource allocation requests are directed to.

In one or more embodiments if resource allocation request is determined to be directed to GPU guest resource manager component may be configured to process said resource allocation request internally to allow for dedicated execution of application utilizing GPU . In one or more embodiments if resource allocation request is determined to be directed to GPU guest resource manager component may forward said resource allocation request for processing through hypervisor hypervisor component may be configured to process resource allocation request to allow for shared execution of application through GPU with one or more applications associated with one or more other VMs.

It should be noted that a thin layer of software e.g. thin layer may be implemented within hypervisor to enable processing of resource allocation request therethrough instead of guest resource manager component here guest resource manager component may forward resource allocation request to thin layer which in turn may enable data processing through GPU or GPU . Further it should be noted that in an example embodiment guest resource manager component may determine whether resource allocation request is directed to GPU or GPU thin layer may merely enable the data processing through GPU or GPU .

Thus exemplary embodiments may provide for a means to simultaneously utilize GPU and GPU in VM . As discussed above graphics capability within a VM in current GPU passthrough solutions may be provided through software emulation or through utilizing a dedicated GPU said solutions provide for low performance and lack of support for key APIs such as OpenGL or low VM scalability. Exemplary embodiments may override the aforementioned issues through the simultaneous utilization of GPU and GPU in VM .

In one or more embodiments operation may involve defining a data path between VM and the GPU in a configuration register. In one or more embodiments operation may involve defining a data path between VM and GPU in another configuration register. In one or more embodiments operation may involve reading through the instance of the driver component in VM an emulated version of the configuration register e.g. emulated configuration register exposed through hypervisor component and an emulated version of the another configuration register e.g. emulated configuration register exposed through hypervisor . In one or more embodiments operation may then involve providing a capability to VM to utilize GPU in a shared mode with one or more other VM s based on the data path definition read through the exposed emulated version of the configuration register and to simultaneously dedicatedly utilize GPU based on the data path definition read through the exposed emulated version of the another configuration register and the support for hardware virtualization of GPU in the instance of the driver component executing in VM .

Although the present embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the various embodiments. For example the various devices and modules described herein may be enabled and operated using hardware circuitry firmware software or any combination of hardware firmware and software e.g. embodied in a non transitory machine readable medium . For example the various electrical structures and methods may be embodied using transistors logic gates and electrical circuits e.g. Application Specific Integrated Circuitry ASIC and or Digital Signal Processor DSP circuitry .

In addition it will be appreciated that the various operations processes and methods disclosed herein may be embodied in a non transitory machine readable medium e.g. a Compact Disc CD a Digital Video Disc DVD a Blu ray Disc a hard drive appropriate instructions may be downloaded to the hard drive and or a machine accessible medium compatible with a data processing system e.g. computing system computing platform and may be performed in any order e.g. including using means for achieving the various operations .

Accordingly the specification and the drawings are to be regarded in an illustrative rather than a restrictive sense.

