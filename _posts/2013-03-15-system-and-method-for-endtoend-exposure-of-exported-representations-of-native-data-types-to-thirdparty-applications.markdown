---

title: System and method for end-to-end exposure of exported representations of native data types to third-party applications
abstract: Systems and methods are disclosed herein for exporting a file to an application. A processor receives a request from a user for access to a file stored on a web-based storage system. The request includes a designation of an application to open the file, and the file is associated with a native format. The processor determines that the application is not configured to import the file in the native format and determines whether the file can be converted to an importable format that can be imported by the application. The processor converts the file from the native format to the importable format and exports the converted file in the importable format to the application, which opens the converted file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268802&OS=09268802&RS=09268802
owner: GOOGLE INC.
number: 09268802
owner_city: Mountain View
owner_country: US
publication_date: 20130315
---
This application claims the benefit of U.S. Provisional Application No. 61 664 527 filed on Jun. 26 2012 which is hereby incorporated herein by reference in its entirety.

In general this disclosure relates to web based storage systems in particular to systems and methods for exposure of exported representations of native data types to third party applications.

Web based storage systems are file hosting systems that allow users to store and retrieve data accessible from one or more user devices. These storage systems may use cloud storage to store user data. Sometimes web based storage systems store native files which may be viewed or edited using native applications and not by standard third party applications. Thus the raw content of a file in a native format on a web storage system is not always accessible to third party applications.

Systems and methods are disclosed herein for providing exported representations of native data. One aspect relates to a system or method for exporting a file to an application. A processor receives a request from a user for access to a file stored on a web based storage system. The request includes a designation of an application to open the file and the file is associated with a native format. The processor determines that the application is not configured to import the file in the native format and determines whether the file can be converted to an importable format that can be imported by the application. The processor converts the file from the native format to the importable format and exports the converted file in the importable format to the application which opens the converted file.

In one embodiment determining whether the file can be converted comprises identifying an exportable format associated with the file that matches an importable format associated with the application. The identifying step comprises cross referencing a list of exportable formats associated with the file and a list of importable formats associated with the application. The list of exportable formats is associated with a first party native application or a third party native application. The cross referencing comprises identifying one or more formats included in both the list of exportable formats and the list of importable formats. The processor receives user input indicative of a desired format when there are multiple matches between the list of exportable formats and the list of importable formats.

In one embodiment the processor receives an association request to associate an importable format with the application. Optionally the processor updates a list of importable formats associated with the application based on the association request.

In one embodiment the exporting step comprises transmitting download data corresponding to the converted file.

To provide an overall understanding of the systems and methods described herein certain illustrative embodiments will now be described including a web based storage system. However it will be understood by one of ordinary skill in the art that the systems and methods described herein may be adapted and modified as is appropriate for the application being addressed and that the systems and methods described herein may be employed in other suitable applications and that such other additions and modifications will not depart from the scope thereof. Generally the computerized systems described herein may comprise one or more engines which include a processing device or devices such as a computer microprocessor logic device or other device or processor that is configured with hardware firmware and software to carry out one or more of the computerized methods described herein.

The present disclosure provides systems and methods for providing third party applications with access to file content on a web based storage system. Sometimes third party applications cannot access files that are specially formatted. The systems and methods disclosed herein convert specially formatted files into representations that third parties may access. In particular the present disclosure relates to a web based storage system that stores native files and converts the file content in the native files to an exportable format for third parties. The systems and methods disclosed herein are described in terms of a web based storage system which may communicate with other systems over a network to store and share user data. In general one of ordinary skill in the art will understand that the systems and methods described herein are applicable to systems that are locally interconnected without departing from the scope thereof.

The web based storage system is a file hosting system that allows users to store retrieve and modify data via one or more user devices such as the user device . This data may be referred to as a user s web data. As an example the web based storage system may be stored on a single server system or in a distributed system. In particular the web based storage system may use cloud storage to store user data.

The metadata database stores several types of data. In particular the metadata database stores metadata associated with file content stored on the web based storage system or on the third party system . The metadata may include a shortcut a reference or a pointer to the associated file content. For example the metadata may include a pointer to an original file in a database such as the native database or the third party database . In an example the metadata database stores binary files associated with binary file content stored on the native database . In another example the metadata database stores reference files for internal first party applications i.e. native applications associated with the web based storage system on the native database . In another example the metadata database stores reference files for third party applications i.e. associated with the third party system stored on the third party database for example.

The native database stores native files which may be viewed or edited using native applications. Native applications correspond to internal first party applications in the web based storage system . As an example the native application may provide access between the user and the native file over a web browser i.e. for viewing and or editing a native document . The native file may be related to a text document a spreadsheet document a presentation document a drawing document or any other suitable document. In particular the native database stores native files in a particular format suitable for the web based storage system . A suitable format may be a format specific to the web based storage system and may be referred to as a first party native format.

The third party system communicates with the web based storage system over the network to access a representation of a native file stored on the native database . As depicted in the third party system includes a third party database a third party server and a developer device . The third party database may store third party native files in a particular format suitable for the third party system . A suitable format may be a format specific to the third party system and may be referred to as a third party format.

It is sometimes desirable for the third party application to access the contents of a native file so that the third party application can operate on file content. The third party application may be unable to directly access the raw content of the file if the file is a first party native file or a third party native file associated with separate third party application. The case when the file is a first party native file is described in detail below. However in general one of ordinary skill in the art will understand that the systems and methods described herein for providing an exported representation of file content to a third party application may also be applied to third party native files associated with one or more other third party applications.

When the file is a first party native file the third party application may not be configured to directly read or write the first party native file content because the format of the first party native file is incompatible with a format that the third party application is configured to import. In addition the raw content of a first party native file may include proprietary information and it may be undesirable to allow a third party system to have unrestricted access to the raw content. In order to maintain the proprietary nature of first party native files in the web based storage system the raw content of the first party native files are not directly exposed. Instead the processor generates a proxy version of the first party native file in one or more formats suitable for exporting to the third party system . In particular the native file is converted to a suitable format that is exportable by the web based storage system and importable by the third party system and the third party application is allowed to access a read only representation of the native file without sharing the raw content. The third party application may use one or more application programming interfaces APIs to access the suitable representations of first party native files.

To provide access of the content of the native file to the third party application the processor may identify one or more exportable formats associated with the native file. In particular to identify one or more exportable formats the processor may identify one or more applications associated with the native file. In an example the associated application may be a first party native application associated with the web based storage system . An example data structure of four native files and their associated applications is shown in . Furthermore shows an example data structure of five applications and lists of each application s corresponding importable formats and exportable formats. The data structures and may be stored on any of the databases shown in such as the third party database the native database the metadata database or any other suitable database. The processor determines whether there is a match between the set of exportable formats of the application associated with the native file and the set of importable formats associated with the third party application. If a matching format is identified then the native file is converted to the matching format. When multiple matching formats are identified a format may be selected based on user input or default settings. The converted file is then exported to the third party application which opens the converted file.

As an example the third party application may be a web based faxing program that is configured to open or import files of a certain type such as image files for example . The user may wish to use the web based faxing program stored on the third party system for example to transmit the contents of a native file stored on the native database for example . As shown in the data structure the contents of the native file include text and the native file associated with an application V. The application V may be a text editor for example. The web based faxing program may be the application W which is associated with one importable format pdf and no exportable formats as shown in the data structure . In this case the list of exportable formats associated with the application V is compared to the list of importable format s associated with the application W to identify if any match exists between the lists. Because the format pdf is the only format included in both lists the processor converts the native file to a pdf file and exported to the third party web based faxing program W.

In another example the user may wish to provide access of content in a third party native file to a third party application that is not associated with the native file. To illustrate this example the native file is associated with a third party application Y but the user may specify that the desired third party application is W. In this case W may be a pdf viewer program and because the third party application Y is able to export files in the pdf format the content of the native file is converted to pdf format and exported to the third party application W.

In another example the user s request to provide access of file content in a native file to a third party application may be denied if a match is not found between a list of exportable formats corresponding to an associated application of the native file and a list of importable formats corresponding to the third party application. For example the user may wish to provide access of content in the native file to the third party application X. In this case because the native file is associated with the application Z and there is no match between the exportable formats associated with the application Z and the importable formats associated with the application X the user s request is denied.

Thus while the raw content of a native file may be inaccessible to the third party system the third party system may still be able to access the contents of the native file by importing a converted version of the native file. In this way the system allows third party applications to access representations of native files stored in the native database without giving access to the raw native file content. The system may provide read only access to the third party system so that third party applications stored on the third party database may import files in third party native formats but may not make any changes to the raw file stored on the native database .

In some embodiments developers of the third party system create a third party application version or cloud version of a software. The third party server may run the application version and provide a user interface over the network to the user device over a web browser for example . In this case the user interacts with the third party application over the provided user interface without requiring the third party software to be locally installed on the user device . In some embodiments the third party application is related to a software application that is installed locally on the user device . For example the software may include a document editor or viewer and the user may locally install the software on a device such as a personal computer.

The configuration of the system is advantageous for the user because the system allows a user to access files stored in one location i.e. the web based storage system using a third party application run at a different location i.e. the third party system . In this manner there is no need for the software application to be installed locally on the user device . Installing software on a device takes up space in the local memory and takes time to install. In addition the user may use the third party applications to access the same native files using any number of different user devices as long as each user device is configured to communicate with the network . By allowing any user device in communication with the network to use third party applications to access representations of native files the systems and methods described herein allow for flexible and convenient access to the user s web data.

In addition to storing a user identifier associated with the native file the data structure also includes field entries for the format. In particular the native file is a native text file associated with the user A and the native file is a native presentation file associated with the user C. The native file is an image file and the native file is a spreadsheet file both associated with the user B.

The data structure further includes a field for one or more applications associated with each native file. The associated applications may be first party applications or third party applications. As shown in the data structure one application is shown for each native file but in general any number of applications may be associated with the native file. Additional entries in the data structure may include identifiers corresponding to these applications indications of whether the application is a first party or third party application dates and times of a previous access of the file content by the associated application any other suitable data associated with the native file or a combination thereof. In addition to or instead of the fields shown the data structure may also include fields for the dates and times the file was created accessed or edited a list of users with permission to read or write the file any other suitable data associated with a file stored on a storage system or any suitable combination thereof.

In some embodiments the format field in the data structure is an association field. In particular an association of a native file may include a list of one or more possible export formats and a native file may have one or more corresponding associations. As an example the association stored for the native file includes text . The association text may correspond to a group of one or more formats including pdf plaintext html opendocument rtf and doc for example. As another example an association stored for the native file includes presentation . The association presentation may correspond to a group of one or more formats including pdf and ppt for example. Storing the associations for the native files rather than storing lists of the possible exportable formats may be advantageous for saving storage space and allowing for more efficient access to the data. In some implementations the format field and the association field are different fields in the data structure .

Each application has a corresponding list of supported importable formats and a list of supported exportable formats. The importable formats may include the file formats that the corresponding application is configured to open or read. The exportable formats may include the file formats that the corresponding application is configured to provide or write. When the application is a third party application one or more developers associated with the third party application may request to update either list at any time as is described in relation to . In particular the lists may include importable file formats that a developer of a third party application has specified can be imported over the developer s API console using a corresponding third party application or the lists may include exportable file formats that the developer has specified can be exported over the developer s API console. When there are multiple developers for a third party application the processor may maintain a list for each developer and or for each third party application associated with a developer. These lists may be stored together or separately in one or more databases.

The system may update the data structure . As another example a developer of a third party application may submit a request to the web based storage system to update the corresponding list of importable formats. For example the developer of the third party application Y may have configured the third party application to import opendocument files in addition to xls files. In this case the developer submits a request to update the data structure . The request may include data indicative of the new format to append to the list of importable formats. Similarly the developer may submit requests to update the data structure to remove a format from the list of corresponding importable formats. The developer may use an API to communicate between the third party system and the web based storage system . As an example the third party developer may use one or more APIs to register a corresponding third party application with the web based storage system for initial access to any file to update a list of importable formats and or a list of exportable formats associated with a third party application to provide a user interface to the user device or any other suitable interaction between the third party system the web based storage system and the user device .

At step the processor receives a request from a user to access the contents of a native file using a third party application. The request may include an identifier of the native file and an identifier of the third party application. The native file is stored on the native database and may be associated with the user such as the user A. As an example the native file may be stored on a portion of the native database allocated to the user A i.e. the native file . In this case the user A may provide user authentication information i.e. by providing a username and password or other identification information to a user interface on a web browser for example at the user device . After authentication the user device may display a list of folders and files associated with the user A stored on the native database including the native file . In another example the native file may be associated with the user B who has given access to the user A of the native file i.e. the native file . In this case the user B may provide the user A with a link or shortcut to the native file and a data structure such as the data structure may include a data field entry for a list of users with permission to read or write a native file. After the data structure is updated to include that the user A has permission to read the native file the user device may display a form of the native file to the user A after authentication. For ease of illustration the remainder of the description herein relates to the user A requesting to access a representation of the native file using the third party application W.

The user A may transmit a request to access the native file using the third party application W over the user device . For example the user A may use a user input device such as a keyboard or a mouse at a user interface on the user device to indicate the request. For example after providing user authentication information over the user interface the user device displays metadata associated with the native file . In particular the metadata may include a file name a date and time created a native format or any other suitable metadata associated with a native file. The metadata may be stored on the metadata database on the native database or any other suitable database in communication with the network . The user A may select the native file and request to access the native file by selecting from a list of third party applications that may be suitable for importing a representation of the native file . For example the list of third party applications may include an online document editor an online document viewer a web based faxing program or any other suitable third party application that is configured to import an exportable format associated with the native file . For example the list of third party applications may include the third party applications W and V which are both configured to import pdf files and the user A selects the third party application V to access the native file .

In some embodiments the processor performs some processing to identify an appropriate list of third party applications to be displayed to the user when the user selects the native file. For example an appropriate list may include each application that is configured to import files of a format corresponding to the native file. In this case regardless of which application the user selects from the list the processor will grant the request. In another example an appropriate list may include all applications associated with the user such that after the user selects the desired application from the list the processor performs additional processing to determine whether to grant or deny the request.

In some embodiments the desired third party application is not listed when the user A selects the native file . As an example the data structure may not include pdf as an importable format associated with the third party application W. In this case a developer of the third party application W may not yet have registered the application to be configured to import pdf files. In this case the user A may submit a request to register the third party application Z to import pdf files. The user A may transmit the request directly to the web based storage system . Alternatively the user A may transmit the request to the third party system which then transmits the request to the web based storage system .

At step the processor determines whether the native file can be converted to a format importable by the third party application. In particular the third party application is not configured to import the file in the native format but may be configured to import a file in a third party format. To determine whether the file can be converted to a suitable format the processor identifies a list of exportable formats of an application associated with the native file and a list of importable formats associated with the third party application i.e. the lists stored in the data structure for example . After identifying the lists of importable and exportable file formats the processor may cross reference both lists to identify any file formats that are listed in both lists. For example when cross referencing the list of exportable formats associated with the native file in the data structure and the list of importable formats associated with the third party application Z in the data structure the processor identifies that a matching file format is a pdf. This process is described in more detail in relation to .

If multiple matching file formats are identified the processor may prompt the user to provide input regarding which of the matching file formats should be used. Alternatively the third party application may provide data to the processor indicative of a preferred order of formats such that the importable formats associated with a third party application may have relative priorities. In this case the matching file format with the highest priority is identified.

At step the processor converts the file content from the native format to a suitable importable format. In converting the native file the processor may be configured to save the converted file as a new file in addition to the original native file. This may be desirable for allowing the third party application access to the contents of the native file without changing the format of the original native file. To save the converted file a reference file or a pointer referring to the original native file may be generated and stored on the metadata database . To create the new converted file the processor may then operate on the reference file. The processor may use an application associated with the native file to perform the conversion. In general converting the native file may include compressing data in a file performing optical character recognition of an image to retrieve text content or any other suitable method of converting file content into a form different from an original form. This process is described in more detail in relation to .

At step the processor exports the converted file in the importable format to the third party application. To export the converted file the processor may transmit the converted file over the network to the third party system so that the third party application may access the file content. The user may interact with the third party application and the web based storage system over a web browser to access the converted file content. As an example the processor may transmit a download link to the user or to the third party system for direct download of the converted file. In this case the download link may include a hyperlink url link shortcut reference file or any other suitable download link for providing a file. In addition the download link may have a reference to the original native file stored on the native database with the addition of an indication of the converted file format. This process is described in more detail in relation to .

At step the processor identifies supported exportable file formats associated with the native file. As an example a list of supported exportable file formats may be stored in a data structure such as the data structure . At step the processor identifies supported importable file formats associated with the third party application. As an example a list of supported importable file formats may be stored in a data structure such as the data structure .

At decision block the processor determines whether there is a match between the lists of importable and exportable file formats. In particular the processor may cross reference the lists to identify if any a match between the two lists. As an example when cross referencing the list of exportable formats associated with the native file i.e. in the data structure and the list of importable formats associated with the third party application i.e. in the data structure the processor may identify more than one one or zero matching file formats. In particular if multiple matching file formats are identified the processor may prompt the user to provide input regarding which of the matching file formats should be used. Alternatively the third party application may provide data to the processor indicative of a preferred order of formats such the importable formats associated with a third party application may have relative priorities. In this case the matching file format with the highest priority is identified. If one matching file format is identified the identified matching file format is used in granting the access request. In some embodiments the processor cross references the two lists by determining the set intersection of the two lists. Specifically the set intersection of the two lists includes the set of file formats that appear in both lists.

If one or more matching file formats are identified at the decision block the processor grants the access request at step . In particular to grant the access request the processor converts the native file into the identified file format and exports the converted file to the third party application. This process is described in more detail in relation to .

If no native file formats of previously accessed files match the file format of the requested native file the processor proceeds to step to deny the access request. In particular to deny the access request a message may be displayed to the user indicating that the system is unable to provide a representation of the requested native file using the requested third party application. Alternatively the processor may perform the steps of before the user selects a third party application. In this case the processor may perform the steps of the method to identify an appropriate list of applications to display to the user where each application in the displayed list is configured to import a file format corresponding to an exportable format associated with the native file. In this case any selection that the user makes from the displayed list will result in an exportation of the file content to the selected application.

At step the processor determines whether to grant a request from a user to export a representation of a native file to a third party application. The determination of whether to grant the request may be determined based on a cross referencing between two lists of file formats a list of exportable file formats associated with the requested native file and a list of importable file formats associated with the third party application. As described in relation to the result of the cross referencing is an identification of any format s included in both lists. In some embodiments the third party application has a defined scope of access associated with a user. In this case the determination of whether to grant the access request may be based at least in part on the defined scope of access.

At step if the processor determines to grant the access request the processor converts the request native file to an identified file format. In converting the native file the processor may be configured save the converted file as a new file in addition to the original native file. In some embodiments the processor creates a reference file or a pointer referring to the original file. The reference file or pointer may be stored on the metadata database or any other suitable database in communication with the network . The processor then operates on the reference file to create the new converted file. This may be desirable for creating converted representations of files while allowing the format of the original native file to remain intact.

As an example the native file may be a text document and the third party application is a web based faxing program that is configured to receive pdf files. The user may wish to transmit the data in the native text document via fax but also wishes to keep the raw data in the original text format intact. One way the processor converts the native file is to create a copy of the native file and operate on the copy i.e. convert the copy to pdf format . Another way to convert the native file is to create a pointer to the native file and operate on the pointer to create a pdf version of the native file.

In general converting the native file may include converting any type of file to an image file as described above for a text file compressing data in a file such as an image performing optical character recognition of an image to retrieve some text in an image file or any other suitable method of converting file content into a form different from an original form.

At step the processor exports the converted file. As an example the processor may transmit the converted file or a representation thereof to the third party system so that the user may access the file using the third party application. In particular the user may use a web browser to access the web based storage system . The web browser may generate a display screen with a user interface corresponding to the third party application. For example the third party server may run the third party application on the third party system and provide an interface or data indicative of the desired user interface to the web based storage system which then displays the user interface to the user device . Alternatively the third party server may display the user interface directly to the user device over the network .

To transmit the converted file the processor may transmit a download link to the user or to the third party system for direct download of the converted file. In this case the download link may include a hyperlink url link shortcut reference file or any other suitable download link for providing a file. In addition the download link may have a reference to the original native file stored on the native database with the addition of an indication of the converted file format.

After the converted file has been successfully transmitted the web based storage system may accordingly update the appropriate data structure s such as the data structures and to indicate which native files have been accessed by which third party applications. In addition the converted files and or any data created during the conversion process such as pointer or reference files that may be stored in the metadata database may be saved compressed or deleted.

At step a developer logs into the system . As an example the developer may authenticate with the web based storage system by inputting a username and password or providing other identification information via the developer device . Upon determining that a developer has logged in the processor may access one or more lists associated with the developer. In particular the developer may be associated with one or more third party applications on the third party system and a data structure such as the data structure may be stored for each third party application.

At step the developer selects a third party application. In particular the developer may be associated with multiple third party applications stored on one or more third party systems and the developer may have a developer account with the system which associates the developer with each of these applications. In addition the same third party application may have different release versions and the different versions of the same application may have different lists of supported importable file formats. Thus at step the developer may specify a version identifier in addition to a third party application. As an example after logging in the developer may be presented with a menu of associated third party applications and their version identifiers. The developer may select an application by selecting an option from the menu. In another example the developer may add an application or a new version of an application to the developer s account. In this case the developer provides data indicative of the new application or version and the web based storage system may associate the developer s account with the new application or version.

At step the developer transmits a request to add a file format to the list of supported importable file formats for the selected third party application. In particular the selected third party application may have been recently updated to support a new importable file format. As another example the developer may register a new application or application version with an empty list of supported importable file formats. In this case the developer s request at step is an initial request to add an importable file format to be associated the new application or version.

At decision block the processor determines whether to grant the developer s request at step by updating the list of supported importable file formats. As an example the processor may deny the request at step if it is determined that the developer does not have appropriate access levels to make such a request for the third party application. Alternatively at step the processor updates the list of supported importable file formats corresponding to the selected third party application. In particular the list is updated to include the requested file format. In some embodiments the request at step may be a request to delete or replace an existing file format in the list and the list is updated accordingly at step .

In general the systems and methods disclosed herein for the interaction between a developer and the web based storage system may include the use of an API for providing an interface between the two systems.

The components of the system of may be arranged distributed and combined in any of a number of ways. is a block diagram of a computing device such as any of the components of the system of for performing any of the processes described herein according to an illustrative embodiment. Each of the components of these systems may be implemented on one or more computing devices . In certain aspects a plurality of the components of these systems may be included within one computing device . In certain implementations a component and a storage device may be implemented across several computing devices .

The computing device comprises at least one communications interface unit an input output controller system memory and one or more data storage devices. The system memory includes at least one random access memory RAM and at least one read only memory ROM . All of these elements are in communication with a central processing unit CPU to facilitate the operation of the computing device . The computing device may be configured in many different ways. For example the computing device may be a conventional standalone computer or alternatively the functions of computing device may be distributed across multiple computer systems and architectures. In the computing device is linked via network or local network to other servers or systems.

The computing device may be configured in a distributed architecture wherein databases and processors are housed in separate units or locations. Some units perform primary processing functions and contain at a minimum a general controller or a processor and a system memory. In distributed architecture implementations each of these units may be attached via the communications interface unit to a communications hub or port not shown that serves as a primary communication link with other servers client or user computers and other related devices. The communications hub or port may have minimal processing capability itself serving primarily as a communications router. A variety of communications protocols may be part of the system including but not limited to Ethernet SAP SAS ATP BLUETOOTH GSM and TCP IP.

The CPU comprises a processor such as one or more conventional microprocessors and one or more supplementary co processors such as math co processors for offloading workload from the CPU . The CPU is in communication with the communications interface unit and the input output controller through which the CPU communicates with other devices such as other servers user terminals or devices. The communications interface unit and the input output controller may include multiple communication channels for simultaneous communication with for example other processors servers or client terminals in the network .

The CPU is also in communication with the data storage device. The data storage device may comprise an appropriate combination of magnetic optical or semiconductor memory and may include for example RAM ROM flash drive an optical disc such as a compact disc or a hard disk or drive. The CPU and the data storage device each may be for example located entirely within a single computer or other computing device or connected to each other by a communication medium such as a USB port serial port cable a coaxial cable an Ethernet cable a telephone line a radio frequency transceiver or other similar wireless or wired medium or combination of the foregoing. For example the CPU may be connected to the data storage device via the communications interface unit . The CPU may be configured to perform one or more particular processing functions.

The data storage device may store for example i an operating system for the computing device ii one or more applications e.g. computer program code or a computer program product adapted to direct the CPU in accordance with the systems and methods described here and particularly in accordance with the processes described in detail with regard to the CPU or iii database s adapted to store information that may be utilized to store information required by the program.

The operating system and applications may be stored for example in a compressed an uncompiled and an encrypted format and may include computer program code. The instructions of the program may be read into a main memory of the processor from a computer readable medium other than the data storage device such as from the ROM or from the RAM . While execution of sequences of instructions in the program causes the CPU to perform the process steps described herein hard wired circuitry may be used in place of or in combination with software instructions for implementation of the processes of the present disclosure. Thus the systems and methods described are not limited to any specific combination of hardware and software.

Suitable computer program code may be provided for performing one or more functions in relation to providing access to third party systems to file content as described herein. The program also may include program elements such as an operating system a database management system and device drivers that allow the processor to interface with computer peripheral devices e.g. a video display a keyboard a computer mouse etc. via the input output controller .

The term computer readable medium as used herein refers to any non transitory medium that provides or participates in providing instructions to the processor of the computing device or any other processor of a device described herein for execution. Such a medium may take many forms including but not limited to non volatile media and volatile media. Non volatile media include for example optical magnetic or opto magnetic disks or integrated circuit memory such as flash memory. Volatile media include dynamic random access memory DRAM which typically constitutes the main memory. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM or EEPROM electronically erasable programmable read only memory a FLASH EEPROM any other memory chip or cartridge or any other non transitory medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to the CPU or any other processor of a device described herein for execution. For example the instructions may initially be borne on a magnetic disk of a remote computer not shown . The remote computer can load the instructions into its dynamic memory and send the instructions over an Ethernet connection cable line or even telephone line using a modem. A communications device local to a computing device e.g. a server can receive the data on the respective communications line and place the data on a system bus for the processor. The system bus carries the data to main memory from which the processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored in memory either before or after execution by the processor. In addition instructions may be received via a communication port as electrical electromagnetic or optical signals which are exemplary forms of wireless communications or data streams that carry various types of information.

While various embodiments of the present disclosure have been shown and described herein it will be obvious to those skilled in the art that such embodiments are provided by way of example only. Numerous variations changes and substitutions will now occur to those skilled in the art without departing from the disclosure. It should be understood that various alternatives to the embodiments of the disclosure described herein may be employed in practicing the disclosure.

