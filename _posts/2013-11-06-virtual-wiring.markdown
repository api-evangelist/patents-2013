---

title: Virtual wiring
abstract: Disclosed is a method and system for enabling a user, through a user interface, to manage a correspondence that defines how information about a state of a first device at a first location is to be used to control a second device at a second location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898572&OS=08898572&RS=08898572
owner: Catalina Computing, LLC
number: 08898572
owner_city: Concord
owner_country: US
publication_date: 20131106
---
This application is a continuation and claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 12 235 904 filed Sep. 23 2008 the entire content which is incorporated here by reference.

In one aspect a method includes through a user interface enabling a user to manage a correspondence that defines how information about a state of a first device at a first location is to be used to control a second device at a second location.

The correspondence defines a virtual connection of the first device and the second device. The virtual connection carries the information about the state of the first device to the second device.

The state of the first device is changing no faster than about once a second. The state of the first device comprises on or off. The state of the first device comprises a level within a range.

The user interface is based on a wiring analogy in which the correspondence is analogized as a wire that conducts the information about the state of the first device at the first location to the second device at the second location. The information about the state of the first device is received from a state sensor that is associated with the first device and is used at the second location by a controller that is associated with the second device.

The user interface enables the user to define and manage virtual connections to carry state information from one or more of an arbitrary number of source devices to one or more of an arbitrary number of controlled devices. The user interface enables the user to define a set of virtual connections of arbitrary size and complexity.

The method includes through the user interface enabling the user to define and manage the information about the state of the first device. The method includes enabling the user to specify one or more predetermined events and sending alerts in response to occurrences of the one or more predetermined events.

The user interface is configured to provide information regarding the correspondence to an application capable of managing the information. The user interface is a web based user interface.

In another aspect a system includes a user interface to manage a correspondence that defines how information about a state of a first device at a first location is to be used to control a second device at a second location.

In the system the correspondence defines a virtual connection of the first device and the second device. The user interface is based on a wiring analogy in which the correspondence is analogized as a wire that conducts the information about the state of the first device at the first location to the second device at the second location. In the system the information about the state of the first device is received from a state sensor that is associated with the first device and is used at the second location by a controller that is associated with the second device.

The user interface enables the user to define and manage virtual connections to carry state information from one or more of an arbitrary number of source devices to one or more of an arbitrary number of controlled devices. The user interface enables the user to define a set of virtual connections of arbitrary size and complexity. The user interface enables the user to define and manage the information about the state of the first device. The user interface is a web based user interface.

In another aspect a computer readable medium includes instructions to through a user interface enable a user to manage a correspondence that defines how information about a state of a first device at a first location is to be used to control a second device at a second location.

The correspondence defines a virtual connection of the first device and the second device. The virtual connection carries the information about the state of the first device to the second device. The state of the first device is changing no faster than about once a second. The state of the first device comprises on or off. The state of the first device comprises a level within a range.

The user interface is based on a wiring analogy in which the correspondence is analogized as a wire that conducts the information about the state of the first device at the first location to the second device at the second location. The information about the state of the first device is received from a state sensor that is associated with the first device and is used at the second location by a controller that is associated with the second device. The user interface enables the user to define and manage virtual connections to carry state information from one or more of an arbitrary number of source devices to one or more of an arbitrary number of controlled devices.

The user interface enables the user to define a set of virtual connections of arbitrary size and complexity. The medium includes instructions to through the user interface enable the user to define and manage the information about the state of the first device. The medium includes instructions to enable the user to specify one or more predetermined events and sending alerts in response to occurrences of the one or more predetermined events.

The user interface is configured to provide information regarding the correspondence to an application capable of managing the information. The user interface is a web based user interface.

Other aspects and features and combinations of them can be expressed as methods apparatus systems program products means for performing functions and in other ways.

Some advantages include the following. The devices are wired together using simple wiring commands from a graphical user interface. No network modifications are needed at wiring sites as long as they have basic network connectivity. The devices connect to standard wires and connectors so no additional investment in electrical equipment is required at the sites. Additional cost savings can be achieved by integrating the state sensor and controller into the devices.

Referring now to a virtual wiring system includes a server having a computer memory or storage media storing a server process and devices generally that are connected to virtualizers generally . The system provides for traditional wired or wireless connections between the devices to be replaced with virtual wires i.e. virtual connections that run over a network . The virtual wires carry state information that includes for example information about a state or changes in a state of a source device over the network to a device to be controlled based on the information. For example in some implementations a virtual wire can carry information about a state of a first device e.g. a switch or a controller that is connected to a first virtualizer over the network to a second device e.g. a relay or a controlled device that is connected to a second virtualizer . The network can be any local or wide area network or an arrangement such as the Internet.

The system provides a framework for the virtual wires to be connected monitored logged and rewired through the server . For example the server process in the server includes software methods for monitoring and managing virtual connections between the devices . In some examples the server can include a database having information regarding for example virtual connections between the devices current states of the connections and a log of past connections. In some examples the server also has the ability to send alerts regarding predetermined activity through e mail text message or other messaging service.

In some examples the server and can run on small laptops or large server farms. In some examples the server is implemented as a Web server using Internet protocols. The optional database may reside on the same server as the server process or may reside on another server that is either local or remote to the server .

In some implementations the server can be multi user i.e. many virtual wiring plans can be set up to run simultaneously and independent of each other. In such implementations users can log on to the server through client terminals generally . Multi user ability allows the server and devices to be shared amongst many users. One advantage to multi user server implementations is reduced cost of setting up an Internet wiring circuit since the higher cost of a server is shared among many users.

The devices can include electric or electronic devices to which connections can be made through ports generally of the devices . The devices can be wired or wireless devices. For example the devices can include switches relays circuit breakers LEDs LCDs sensors e.g. for light humidity temperature gauges controls computer equipment e.g. monitors routers controllers and other devices.

In some examples the states of the devices change at a substantially low rate. Accordingly in some examples the virtual wiring system does not require high speed network connections. For example in some implementations the states of the devices are changing no faster than about once a second. In such implementations for example the state of a switch device does not change from ON to OFF more than about once in a second. Consequently data rate throughput levels in the network may remain substantially unaffected.

The virtualizers terminate traditional wired or wireless connections associated with one or more devices and transmit state information about the one or more devices to the server through the network . The devices can connect to the virtualizers through their ports using for example wired connections e.g. connections with ports or wireless connections e.g. connections with ports .

In some examples virtualizers can be state sensors or controllers. Virtualizers that are state sensors monitor the devices they are connected with and transmit state information regarding the devices to the server . Virtualizers that are controllers are capable of in addition to monitoring the devices effecting state changes in the devices . In some examples the virtualizers can include a first set of ports for sensing and transmitting information regarding the states of devices connected to the first set of ports and a second set of ports for sensing transmitting and affecting the states of devices connected to the second set of ports.

For example a virtualizer can be a state sensor configured to detect a change in the state of a switch circuit in a first location and convey this state information to another location over the network . At the other location another virtualizer can be a controller configured to use the state information to effect a change in the state of for example a relay.

In some examples the state information is sent and received over the network using standard Internet Protocol messages. For example the virtualizers can communicate with the server through Web messages e.g. messages sent using the Hypertext Transfer Protocol HTTP or the Hypertext Transfer Protocol over Secure Socket Layer HTTPS . One advantage of Web messaging is that because firewalls are typically set up to allow Web traffic Web messages from the virtualizer can pass through the firewalls without firewall configuration changes. This can reduce installation costs and time as well as permit users who lack network expertise to use the virtual wiring system .

The virtual wiring system include client terminals that are connected to the server through the network . A client terminal e.g. terminal typically includes a processor running a client process and a display . In some examples the display provides information to a user in the form of a user interface that can be a graphic or text based user interface. In some examples the user interface is a web based user interface that communicates with the server using a standard Web protocol. Users of the system can connect to the server by logging on through the interface at the client terminal .

As described in detail below through the user interface users can define e.g. create and manage e.g. modify delete or reconfigure one or more correspondences that define how virtual connections carrying state information about a device at one location is to be used to control another device at another location. For example the state information about a device at one location can be used to effect state changes in the device at the other location.

In some examples users can also define and manage the state information carried by a virtual connection through the graphical user interface . For example a user can change the state information associated with for example a light switch by merely setting the state of the switch from ON to OFF through the graphical user interface .

In some examples an application programming interface can be used to develop applications that interact with the system and is configured to set up virtual connections read state information carried by the connections and effect changes to the virtual connections or the state information. For example a Representational State Transfer REST based application programming interface API can be employed to create applications for monitoring using or changing virtual connections or state information in the system . Accordingly a user can create a web application on their website for defining a set of buttons alerts and trigger thresholds based on information from the system . For example the application can be set up to monitor the state of a temperature terminal and depending on user defined values such as for example time of day season and weather the application can send a text message or e mail to a specified address. In some examples these applications can be embedded applications included in a device.

A device with which a connection can be made through a port e.g. a switch can be connected to a wired port e.g. port of the virtualizer . A wireless device e.g. a remote controller can be wirelessly connected to a wireless port e.g. port of the virtualizer .

An interconnect provides a connector for connecting devices to the system through the ports of the virtualizer . A variety of interconnects can be employed to support different types of devices .

For example a 4 relay switch block interconnect is provided to allow up to 4 separate relays for independent switching of 4 sets of inputs. In some examples an 8 digital input output and analog input interconnect is provided for 8 separate connections for control and monitoring of up to 8 digital inputs outputs or 8 analog inputs.

In some examples a 3 digital input output and analog input interconnect is provided for 3 separate connections for control and monitoring of up to 3 digital circuits or 3 analog inputs. In some examples an interconnect can be provided to connect to a proprietary network or devices belonging to third party vendors. For example a MaxSteam Digi ZigBee interconnect can be provided to interface to a network based on the MaxStream Digi ZigBee standard provided by Digi International Minnetonka Minn. An INSTEON X10 interconnect is provided to interface with devices implementing the X10 and INSTEON protocol provided by Smart Labs Irvine Calif.

In some examples a universal interconnect that is capable of supporting multiple types of devices can be employed.

In operation the virtualizer polls the local devices i.e. devices connected to the ports for state information e.g. information regarding changes in states of the devices . For example a state change occurs when the switch changes its state from ON to OFF. Accordingly when the virtualizer polls the switch it senses the state change of the switch as state information regarding the switch . The virtualizer then transmits this state information through a network interface to the server .

In some examples the virtualizer also polls the server for state information e.g. state changes in virtual connections with the devices . Based on the information received from the server the virtualizer updates states of the local connections with the devices or states of the devices 

In some examples the server can generate and transmit Web messages to the virtualizer substantially immediately in response to an event or state change detected at the server . Based on the Web messages the virtualizer can immediately change the state of a locally connected device without having to wait for polling to complete. Accordingly the response time of the virtualizer can be improved. For example in some implementations the system can be implemented using extensible messaging and presence protocol XMPP standard in which virtualizers can wait for the server to send state information updates to the virtualizers . Based on the state information updates the virtualizers can change states of the local devices .

Referring to the server side process in some examples the virtualizer periodically polls the sever for state information e.g. information regarding changes in states of the devices or virtual connections between the devices . The virtualizer receives state information from the server for all local connections to the devices . step The virtualizer reviews the state information for state changes. step If a state change for any of the local connections to the devices is detected the virtualizer updates states of local connections with the devices or states of the devices that are connected to the virtualizer . step For example if the virtualizer is connected to a relay and the state information received from the server regarding the connection with the relay indicates that the relay s state has changed from OFF to ON then the virtualizer updates the state of the relay from OFF to ON in accordance with the state information. If no state change is detected the virtualizer returns to continue polling the server .

Referring to the devices side process the virtualizer periodically polls the devices connected to the virtualizer for state changes in local connections with the devices .

The virtualizer reviews the state of all local connections with the devices . step . In some examples the virtualizer determines whether any of the devices have changed state. step . If a state change is detected the virtualizer updates the server with the state changes. step . For example if the state of the switch has changed from OFF to ON the virtualizer updates the server with the new state. If no state change is detected the virtualizer returns to continue polling the devices .

In some examples the virtualizer generates and transmits Web messages periodically regardless of whether there are any state changes. The server reviews the periodic Web messages for state changes and updates the virtual connections based on the state changes.

In some examples the virtualizer must be authenticated before it can access the server to poll for state changes and receive state information. The virtualizer can be authenticated using any authentication protocol known to persons skilled in the art. For example each virtualizer in the system can be assigned virtualizer or user credentials e.g. a unique identifier and password. At the server information regarding authorized or valid virtualizers can be maintained in an authorized virtualizers database not shown . Invalid virtualizers can include virtualizers that are improperly configured or virtualizers that use an incorrect communication protocol to connect to the server .

In some examples the virtualizer transmits virtualizer credentials in a first Web message . Once the virtualizer has been authenticated the virtualizer can begin to transmit state information regarding a device in subsequent Web messages to the server .

The server uses the virtualizer credentials in the Web message to look up the virtualizer in the authorized virtualizers database. step . The server determines whether the virtualizer is a valid virtualizer or a virtualizer that is authorized to connect to the server . step 

In some examples the Web message from the virtualizer is logged when the virtualizer is deemed a valid virtualizer or the virtualizer is authorized to connect to the server . step In some examples the Web message from the virtualizer is logged regardless whether the virtualizer is deemed a valid virtualizer or whether the virtualizer is authorized to connect to the server . One advantage of logging all Web messages regardless of whether a virtualizer is a valid virtualizer or an authorized virtualizer is to troubleshoot for unauthorized access or attempts to access the system .

If the Web message includes state information the Web message is reviewed to determine the connector associated with the Web message i.e. the device that is referenced in the state information. step . The server then identifies all virtual connections associated with the device . step . For example if the state information includes information regarding a change in the state of the switch the server identifies all devices that are connected with or controlled by the switch . The server then updates the states of all virtual connections on the server . step .

In some examples in a multi user environment multiple accounts can be created to run different virtual wiring plans simultaneously and independent of each other. In such an implementation a user can log on to the server through the page shown in . Any standard Internet browser e.g. Mozilla Firefox or Microsoft Internet Explorer can be used to retrieve the page by entering the server s uniform resource locator URL in an address bar of the browser. The method of accessing the server is not restricted. For example one of ordinary skill will readily appreciate that page could be retrieved from the server with various Internet compatible devices such as a mobile phone laptop computer or desktop computer.

On clicking the tab Connectors the user is led to a page e.g. page in showing a list of connectors . As described above a connector is created for each interconnect detected by a virtualizer . In some examples a connector is typically mapped to a device .

In some examples the virtualizer automatically creates a new entry in the list for the connector associated with an interconnect . For example as shown in virtualizers that are connected to a block of switches and a block of relays respectively have automatically created entries in the list .

The list includes a column Owner for specifying a user friendly name for an entity that has ownership rights over the connectors . Similarly a user friendly name for the connectors can be specified in the column Name. 

The column Value displays a value associated with terminals of an input connector i.e an input device. For example for the block of switches the Value column indicates a state of each of three switches 1 2 3 on on on in the block of switches . In general the values expected on each output terminal of the connector are a function of the kind of connector associated with the interconnect or device connected to the interconnect .

In some examples different types of values can be provided for the connectors . For example a specialized light bulb connector can have ON or OFF values and also a brightness value. A thermostat connector for example can have a temperature reading.

The column Current State displays a current state of the terminals of an output connector i.e. an output device or a device to be controlled. For an output device e.g. the block of relays the Current State column indicates a current state of each of four terminals off off off off of the block of relays .

In some examples a final column provides a user with additional options to monitor and manage each connector in the list . For example a user can view information edit or delete a connector by clicking on Show Edit or Destroy respectively. In some examples a user can also view a listing of all users of a connector by clicking on the Users option.

In some examples information regarding a number of terminals corresponding to each connector can be displayed. For example the page displays that the block of switches has three terminals and the block of relays has four terminals.

On clicking the Edit option a user can proceed to change information regarding a connector through an Editing connector page e.g. page of . For example a user can rename the block of relays as 3 relays and the block of switches as 3 switches. is a screen shot showing the list of connectors having the Name column updated for each of the connectors .

Referring now to in some examples a user can create a new virtual wire by identifying a start connector and an end connector and specifying the terminals of the connector between which a new virtual wire is drawn. In the screen shots of example pages and the starting point of the new virtual wire is a terminal of the start connector i.e. a terminal of the block of switches and a terminal of the end connector i.e. a terminal of the block of relays .

The techniques described herein can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The techniques can be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method steps of the techniques described herein can be performed by one or more programmable processors executing a computer program to perform functions of the invention by operating on input data and generating output. Method steps can also be performed by and apparatus of the invention can be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . Modules can refer to portions of the computer program and or the processor special circuitry that implements that functionality.

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user the techniques described herein can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer e.g. interact with a user interface element for example by clicking a button on such a pointing device . Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The techniques described herein can be implemented in a distributed computing system that includes a back end component e.g. as a data server and or a middleware component e.g. an application server and or a front end component e.g. a client computer having a graphical user interface and or a Web browser through which a user can interact with an implementation of the invention or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet and include both wired and wireless networks.

Other embodiments are within the scope of the following claims and other claims to which the applicant may be entitled. The following are examples for illustration only and do not limit the alternatives in any way. The techniques described herein can be performed in a different order and still achieve desirable results

Other implementations are within the scope of the following claims and other claims to which the applicant may be entitled.

