---

title: Information processing apparatus, installation method, and program
abstract: An information processing apparatus is configured to install a driver that has not yet been customized, in response to the start of installation of the driver, and modifies the installed driver such that a function setting value settable through the installed driver becomes identical to a function setting value of a customized driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342290&OS=09342290&RS=09342290
owner: Canon Kabushiki Kaisha
number: 09342290
owner_city: Tokyo
owner_country: JP
publication_date: 20130726
---
The present invention relates to an information processing apparatus on which a customized driver is installed a method for installing the driver and a program.

Windows registered trademark printer driver is a representative example of print control programs for controlling a printer. An installation set for the Windows registered trademark printer driver includes a catalog file called a CAT file for the printer driver. The catalog file stores an array of hash values of files included in the installation set. An electronic signature can further be appended to the catalog file. If the stored hash values are compared with the hash values of the files in the installation set after verifying the electronic signature appended to the catalog file it is possible to verify whether contents of the files within the installation set are modified.

Meanwhile some users want to customize printer drivers in accordance with an environment into which a print system is introduced. In particular with recent diversification of environments into which print systems are introduced usage of printer drivers has also been diversified and there is a growing demand for customization of printer drivers. To respond to such a demand Japanese Patent Application Laid Open No. 2006 309724 discusses a customization technique that allows initial setting values displayed by a printer driver by default to be modified and that enables input control of setting values which the user can set through a user interface UI of the printer driver.

When a printer driver is customized using a method discussed in Japanese Patent Application Laid Open No. 2006 309724 a printer driver is created in which some setting files in an installation set for the printer driver have been modified. The created printer driver includes in addition to the setting files that have been modified through the customization unmodified driver module and catalog file.

Thus it is of significance that a driver is created in such a form that allows a customized driver to be installed by itself. If the aforementioned created driver includes only the setting files that have been modified through the customization a user needs to prepare a separate driver module. Therefore the user needs to manage the modified setting files and a driver module in association with each other which increases load on the user. Accordingly in a conventional technique a driver is created in a form such that a customized driver can be installed by itself. Since the user can carry out an installation operation with ease such a customized driver may be considered a user friendly driver. However the setting files of that driver have been modified and thus the driver is in a state where the hash values of the setting files do not match with the hash values written in the catalog file or in other words a state that lacks consistency between the catalog file and the installation set.

An information processing apparatus according to one aspect of the present invention includes a starting unit configured to start installation of a driver customized as to a function setting value that can be set in a function setting screen and an installation unit configured to install a driver on which the customization has not yet been performed in response to the start of installation of the driver and to modify the installed driver such that a function setting value settable by the installed driver becomes identical to the function setting value of the driver on which the customization has been performed.

Further features and aspects of the present invention will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.

Various exemplary embodiments features and aspects of the invention will be described in detail below with reference to the drawings.

As security concern increases a new operating system OS is emerging that stops installation when the OS detects installation of a driver that lacks consistency between a catalog file and an installation set. Although a customized driver has advantages as described above an information processing apparatus that includes such an OS does not allow installation of a customized driver. That is because a customized driver lacks consistency between a catalog file and an installation set. A user cannot use a customized driver in an information processing apparatus that includes such an OS.

The present invention is directed to installing a customized driver onto an information processing apparatus that includes an OS which does not allow installation of a customized driver that lacks consistency between a catalog file and an installation set.

Prior to describing exemplary embodiments of the present invention a custom tool program to be used in the exemplary embodiments will be described. It should be noted that each of the exemplary embodiments exemplifies a method for customizing a printer driver for Windows registered trademark which is an OS program for personal computers and is distributed by Microsoft registered trademark Corporation.

In the host computer a central processing unit CPU generally controls devices connected to a system bus in accordance with a program stored in a RAM . The RAM also functions as a main memory and a work area for the CPU . A read only memory ROM stores various programs and data pieces and includes a font ROM a program ROM and a data ROM . The font ROM stores various fonts the program ROM stores a boot program and a basic input output system BIOS and the data ROM stores various data pieces.

An operation input device interface IF controls an input from a keyboard or a pointing device such as a mouse. A cathode ray tube CRT controller CRTC controls a display on a display . A disk controller DKC controls an access to an external memory such as a hard disk HD . A printer controller PRTC is connected with the printer through a bidirectional interface and carries out communication control processing between the PRTC and the printer .

The external memory includes for example an HD and a flash memory drive SSD . As illustrated in the external memory stores an OS applications and a print processing related program . Examples of the applications include a document processing application program for processing a document in which graphics images texts tables and so on are mixedly present. The external memory also stores a user file and an edit file not illustrated related to the applications . The print processing related program generates print data that is written in a page description language and is shared by a plurality of printers of the same series. The print processing related program hereinafter referred to as a printer driver includes a printer control command generation module and a printer driver UI control module .

The applications that are stored in the external memory and include a custom tool program hereinafter referred to as a custom tool of the exemplary embodiment are loaded onto the RAM and executed by the CPU . The CPU for example carries out rasterization processing of an outline font into the RAM to enable a What You See Is What You Get WYSIWYG display on the display . Furthermore the CPU opens registered windows and carries out data processing based on commands instructed through a mouse on the display . When carrying out printing a user can open a print setting screen which is controlled by the printer driver UI control module and configure the settings for print processing in the printer driver such as function settings of the printer and selection of a print mode.

The configuration of the printer will now be described. A CPU controls an overall operation of the printer . A RAM functions as a main memory and a work area for the CPU and is also used as an output information expansion region and an environmental data storage region. In addition the RAM includes a non volatile RAM NVRAM region and is configured such that the memory capacity thereof can be expanded with an optional RAM to be connected to an expansion port not illustrated . A ROM includes a font ROM a program ROM and a data ROM . The font ROM stores various fonts the program ROM stores a control program to be executed by the CPU and the data ROM stores various data pieces. An input unit transmits and receives data to and from the host computer . A print unit interface controls an interface with a print unit which is a printer engine. An access to an external memory is controlled by a memory controller MC . The external memory may be an external hard disk HD a magneto optical disk MO a floppy registered trademark disk FD an integrated circuit IC card or the like which are to be connected to the printer. The external memory stores font data an emulation program form data and so on. If the external memory such as a hard disk is not connected information to be used in the host computer is stored into the data ROM of the ROM . The number of the external memory is not limited to one and the external memory may be provided in a plurality. For example external memories that store optional font cards aside from the built in fonts and programs that interpret printer control languages of different language systems may be connected.

An operation unit includes an operation panel for accepting a user operation and switches and light emitting diode LED display devices not illustrated to be operated are arranged on the operation panel. In addition the operation unit may include an NVRAM not illustrated and store printer mode setting information input from the operation panel. The CPU outputs an image signal serving as output information to the print unit printer engine through the print unit interface in accordance with a control program stored in the program ROM of the ROM . In addition the CPU can perform communication processing with the host computer through the input unit . The CPU can receive print data transmitted from the host computer through the input unit and also notify the host computer of information within the printer .

When a customization instruction from the user is received identification information on off indicating how a given model is customized changes for each model in the list view . When the user checks a checkbox a button is enabled. When the user presses the button a printer driver UI for customization see is displayed. In the printer driver UI an initial value for print settings document properties and an initial value for device settings printer properties to be displayed by default can be set. When the user checks a checkbox a button is enabled. When the user presses the button a UI see for customizing a display method of each control in the printer driver UI is displayed and the display method of each print setting value in the printer driver UI for customization can be set. When the user presses a button a standard dialog box of the OS not illustrated is displayed for specifying a folder in which a customized driver is created. Then a designated location in which the customized driver is created can be specified in the stated dialog box. Once the designated location is specified a storage path to the customized installation set is displayed in a display field . When the user presses a button after modifying various function setting values a printer driver that is customized in accordance with the modified function settings is created.

In four UIs including a page setting UI a finish UI a paper supply UI and a print quality UI can be displayed as the document property UIs. A device setting UI is also displayed as the printer property UI. The initial setting values of the document properties and the initial setting values of the printer properties are accepted through the UIs to . Settings that are not to be customized are grayed out as in a button in the UI illustrated in so as not to accept an input from the user. Thus far a method for changing the initial values of the print setting values to be displayed by default through the printer driver UI realized by the custom tool has been described.

Basic operations of the custom tool will now be described with reference to the flowcharts illustrated in . In each step of the basic operations the custom tool executed by the CPU of the host computer is the operating nucleus. Once a user starts the custom tool in step in step the custom tool goes through initialization processing. Specifically the custom tool displays the UI illustrated in onto the display . In step the custom tool accepts from the user an input specifying a storage location of an installation set for a printer driver to be customized through the UI illustrated in . illustrates an exemplary folder structure of an INF format installation set which is to be customized by the custom tool . illustrates merely an example of an installation set for a printer driver. Although details will be given later is also an example of an installation set for a printer driver. Such an installation set for a printer driver may also be referred to as a driver or a driver program in some cases. An INF format installation set folder stores an INF file driver modules setting files and a catalog file of the printer driver.

Next a section is placed to describe the names of printer models that are compatible with the INF format installation set. The section lists as keys the names of printer models that are compatible with the installation set for the printer driver. As the values of these keys section names that describe configuration modules and files included in the printer drivers for those models are specified. Any character strings can freely be defined as the value of the keys except forbidden characters. In the example illustrated in a section named ABC is defined for a model Canon ABC LIPS. Under an ABC section file names of the driver modules the setting files and the catalog file that are included in the printer driver for the model Canon ABC LIPS are written. A setting file to be customized is specified as a value of a DataFile key . Although file names of other modules are also written under the ABC section those file names are omitted in for the sake of simplicity. A Strings section is located at the end of the INF file . In the Strings character strings are described which are displayed on the UI through the OS during installation processing using the INF format installation set.

Referring back to in step S the custom tool checks the specified installation set. This processing will be described later in detail with reference to . In step S if the custom tool determines that the printer driver does not support customization NO in step S the custom tool proceeds to step S. In step S the custom tool carries out error processing and then returns to step S to accept an instruction on the storage location of an installation set. Meanwhile in step S if the custom tool determines that the printer driver supports customization YES in step S the custom tool proceeds to step S. In step S the custom tool controls the CRTC to enable configuration of settings for customizing the printer driver through the UIs on the display described with reference to . Through the UIs illustrated in the custom tool accepts settings for customizing the printer driver. In step S the custom tool accepts an instruction for creating a customized driver when the user presses the create button in the UI illustrated in . Then in step S the custom tool creates a customized driver in accordance with the settings obtained in step S. This processing in step S will be described later in detail with reference to . After the printer driver is customized in step S in step S if the user instructs termination of the custom tool in step S the custom tool is terminated.

Processing for creating a customized driver of the conventional art will now be described in detail with reference to . In the conventional art this processing is carried out in step S of the flowchart illustrated in . Through this processing a customized INF format driver installation set illustrated in is created in the designated location of the customized driver that has been specified in the display field . In the installation set the INF file and the setting files are replaced respectively by a customized INF file and customized setting files .

In step S the custom tool copies the folder structure and the files of the installation set in the storage location of the installation set of the base printer driver that has been specified in step S to a designated location of the customized driver specified in the display field . In step S the custom tool deletes keys of models other than the model to be customized from the section of the copied INF file to create the customized INF file . In step S the custom tool reflects the customization settings onto the copied setting files to create the customized setting files . Thus the customized driver installation set is created.

Thus far a method for customizing a printer driver has been described. Next a method generally used to install a printer driver on the OS will be described. There are at least two methods that can be employed to install a printer driver. A first method uses an OS function that uses an INF format installation set. A second method uses the installation set in an installer format.

A processing flow of the first installation method in which an INF file is used will be described with reference to a flowchart in . In this case a printer driver can be installed even when a vendor that provides the printer driver does not prepare an installer. The operating nucleus in this flowchart is the OS and the OS is realized using the CPU of the host computer . The processing starts when the OS receives a request from a user to start installation of the printer driver. In step S the OS controls the CRTC to display a UI on the display for accepting settings of an installation target. Specifically the OS accepts from the user a specified output port directed to the printer an INF file of the printer driver to be installed and the model name of the printer through the UI. Upon accepting those information pieces in step S the OS starts installation processing of the printer driver. In step S the OS checks the installation set. Contents of this processing differ between an existing OS and a new OS which the exemplary embodiment of the present invention assumes. The new OS which the exemplary embodiment of the present invention assumes detects whether there is inconsistency between the catalog file and the installation set and if there is inconsistency between the catalog file and the installation set installation is terminated. illustrates an example processing flow by an old OS and illustrates an example processing flow by the new OS. Differences in the processing between the old OS and the new OS will be described later with reference to . In step S if the OS determines to terminate the installation in a process of installation processing of the printer driver YES in step S the OS proceeds to step S to terminate the installation. Meanwhile if the OS determines to continue with the installation NO in step S in step S the OS creates an output port directed to the printer that has been specified in step S. In step S the OS creates a print queue and then terminates the installation processing.

The installation processing of the printer driver in a case of the old OS will be described with reference to . In step S the OS verifies the INF format installation set using the catalog file. Then in step S the OS determines whether the installation set has been modified. If the installation set has not been modified NO in step S the OS proceeds to step S. In step S the OS carries out installation processing of the modules and the setting files as to the printer driver of the install target model. Meanwhile if the installation set has been modified YES in step S in step S the OS controls the CRTC to display on the display a UI that allows the user to decide whether to continue with the installation. If the user chooses to continue with the installation YES in step S the OS proceeds to step S to carry out the installation processing of the printer driver. Meanwhile if the user chooses not to continue with the installation NO in step S the OS proceeds to step S. In step S the OS displays a message notifying the user that installation will be terminated and decides to terminate the installation processing. In this way in the old OS even if there is inconsistency between the installation set for the printer driver and the catalog file the printer driver can be installed according to the user s choice.

Next the installation processing of the printer driver on the new OS will be described with reference to . In the case of the new OS steps S and S which are present in the case of the old OS are not present. Accordingly if the OS detects inconsistency between the installation set for the printer driver and the catalog file the installation is terminated without providing the user with the choices. The processing in the new OS reflects increased security concerns in recent years. However there is a problem in the new OS that the new OS does not allow installation of a customized printer driver.

A processing flow in the second installation method in which an installer format installation set is used will now be described. The installation set in an installer format has an advantage in that the installation processing is simpler for the user. illustrates an exemplary structure of an installer format installation set folder . An installer execution module for the driver hereinafter referred to as an installer an installer sub folder which the installer refers to and the INF format installation set folder are present immediately under the folder . The sub folder stores an installer setting file . The installer refers to the setting file and carries out processing in accordance with the contents in the setting file . The folder stores the INF format installation set illustrated in .

A first difference lies in a UI displayed in step S for configuring installation settings Unlike the INF format installation set since the installation set for the printer driver to be installed is the folder illustrated in the user does not need to specify the storage location thereof. Accordingly the installer defines the UI for configuring the installation settings on its own and displays the UI on the display by controlling the CRTC . Then the installer accepts a specified output port directed to the printer and the name of a model to be installed from the user through the aforementioned UI. In a UI for selecting the name of the model to be installed the installer displays a list of candidate models that can be installed based on the contents of the INF file and accepts a user s choice.

A second difference lies in that the installer calls an application programming interface API provided by the OS in steps S S and S. When the installer calls the API the OS carries out processing that corresponds to steps S S and S.

When a printer driver is customized by an existing custom tool a printer driver is created that lacks consistency between the installation set for the printer driver and the catalog file as illustrated in . If that installation set is installed on a new OS the new OS detects inconsistency between the installation set for the printer driver and the catalog file as in step S and as a result the installation processing is terminated. Thus there arises a problem that a printer driver that has been customized by the existing custom tool cannot be installed on the new OS.

Hereinafter processing according to a first exemplary embodiment for handling the above described problem will be described. First customization processing of the custom tool will be described. Then installation processing of a printer driver using an installation set in a customized installer format will be described. Now the customization processing of the installation set by the custom tool of the first exemplary embodiment will be described. Through this customization processing the custom tool creates an installation set in an installer format having a folder structure illustrated in .

In the conventional art only the INF format installation set illustrated in is supported as an base installation set for a customized driver. Therefore in the dialog box that appears when open is selected in the menu in path designation directed to an INF file is accepted. The custom tool of the first exemplary embodiment creates an installer format installation set. Therefore the installer format installation set folder illustrated in can also be specified in the dialog box that appears when open is selected in the menu in .

A first difference lies in a processing path of steps S to S . The processing in these steps are added because in addition to the INF file the installer format installation set folder illustrated in has become available in the dialog box that appears when open is selected in the menu of . In step S the custom tool determines whether a path specified in the aforementioned dialog box is a folder. If a folder has been specified YES in step S the custom tool proceeds to step S. Alternatively if a file has been specified NO in step S the custom tool determines that the INF file has been specified and proceeds to step S. In step S the custom tool stores the specified folder as the installer format installation set. In addition the custom tool searches through subfolders to locate the INF file . In step S if the custom tool has located the INF file YES in step S the custom tool proceeds to step S. Meanwhile if the custom tool has been unable to locate the INF file NO in step S the custom tool proceeds to step S. Then in step S the custom tool determines that the printer driver does not support customization. A second difference lies in a processing path of steps S and S. To install the printer driver on the new OS an installer execution module hereinafter referred to as an installer needs a signed INF format installation set . Accordingly in step S the custom tool verifies the base installation set for the customized driver using the catalog file. In step S the custom tool determines whether there is consistency between the base installation set for the customized driver and the catalog file.

If there is consistency between the installation set and the catalog file YES in step S the custom tool proceeds to step S. Meanwhile if there is inconsistency between the installation set and the catalog file NO in step S the custom tool proceeds to step S. The remaining steps in the processing flow of are the same as those in .

The processing flow in is the customization processing of the printer driver according to the first exemplary embodiment. The custom tool carries out this processing in step S of instead of the processing in . In step S the custom tool determines whether an INF file has been specified in a path specified in the dialog box that appears when open is selected in the menu of . If an INF file has been specified YES in step S the custom tool determines that the INF format installation set illustrated in has been specified as the installation set for the printer driver to be customized Then the custom tool proceeds to step S. Meanwhile if an INF file is not specified NO in step S the custom tool determines that the installer format installation set illustrated in has been specified as the installation set for the printer driver to be customized Then the custom tool proceeds to step S. In step S since the INF format installation set has been specified as the base installation set the installer and an installer sub folder are not present in the installation set. Thus to create the installation set illustrated in through customization the custom tool copies an installer format installation set for the printer driver stored in the custom tool to a folder at a designated location specified by operating the button . In addition in step S the custom tool copies the INF format installation set to be customized to a location of the folder in .

The custom tool proceeds to step S when the installer format installation set has been specified as a base installation set. In step S the custom tool copies the specified installer format installation set to a designated location path in the display field . In step S the custom tool copies the INF file within the folder at the designated location and a setting file to be customized among the setting files to the installer sub folder . Thereafter in steps S and S the custom tool configures the customization settings for the files within the installer subfolder similar to steps S and S. Through this processing the customized installer format installation set of the first exemplary embodiment illustrated in is created.

Next installation processing of the printer driver with the installer illustrated in will be described with reference to . In step S the installer displays a UI for configuring installation settings. This processing is similar to that in step S of . This processing differs from step S only in the information on selectable candidate models to be installed to which the installer refers in order to display a UI for selecting a model to be installed. The installer displays a list of selectable candidate models to be installed based on the contents of the customized INF file illustrated in . In steps S to S the installer installs the printer driver on the OS using the INF format installation set that has consistency between the catalog file and the installation set in accordance with setting information for the installer set in step S. The processing is identical to the processing indicated with identical numbers in . Thus the descriptions thereof will be omitted here.

In steps S to S the installer replaces the setting files installed on the OS with the customized setting files to apply the customization settings to the printer driver installed on the OS . Specifically in step S the installer stops a print spooler not illustrated . The print spooler is a module that controls an overall print function in the OS and is one of the modules that constitute the OS . In step S the installer replaces the setting files stored in a driver related folder in the OS with the setting files . Then in step S the installer starts the print spooler. Stopping the print spooler is one method to prevent failure in replacing the setting files if printing is carried out while replacing the setting files with the customized setting files . A method for preventing such failure is not limited to the one described above and any other appropriate method be employed. However in the OS replacing the setting files after installing the printer driver is not assumed. Accordingly the replacement of the setting files by the installer in step S affects print processing in the OS . Measures for reducing this influence on printing while replacing the setting files will be described later in a third exemplary embodiment.

According to the first exemplary embodiment a customized printer driver can be installed on an OS that terminates installation when the OS detects installation of a printer driver that lacks consistency between a catalog file and an installation set.

The INF format installation set folder of the first exemplary embodiment illustrated in stores an uncustomized installation set. Thus there is a possibility that a user finds the INF file and installs the printer driver on an information processing apparatus through an installation method using the INF file as described with reference to . In that case there arises a problem that an uncustomized printer driver is installed on the OS contrary to the user s desire. Meanwhile the customized driver cannot be installed on the new OS only by replacing the folder illustrated in with the folder illustrated in . In a second exemplary embodiment a method for handling these two problems will be described.

Hereinafter processing according to the second exemplary embodiment for solving the problem will be described. First customization processing by the custom tool will be described. Then installation processing of a printer driver using a customized installer format installation set will be described.

Customization processing of a printer driver by the custom tool according to the second exemplary embodiment will now be described. Through this customization processing the custom tool of the second exemplary embodiment creates an installer format installation set having a folder structure illustrated in . illustrates a processing flow when the custom tool creates the installation set for the printer driver. The custom tool carries out this processing flow in step S of . The processing in differs from the processing in in steps S and S that is files to be customized are different. In steps S and S the custom tool configures customization settings that are similar to those in steps S and S for the INF format installation set. The INF format installation set is placed in the folder and has the folder structure illustrated in . Through this processing the customized installer format installation set of the second exemplary embodiment illustrated in is created. The processing in the remaining steps is identical to the steps designated with identical numbers in . Thus the descriptions thereof will be omitted here.

Next installation processing of a printer driver with an installer execution module hereinafter referred to as an installer according to the second exemplary embodiment will be described with reference to . In step S the installer displays a UI for configuring installation settings. This processing is similar to that in step S of . However the second exemplary embodiment differs from the first exemplary embodiment in the storage location of the customized INF file . The installer refers to the customized INF file to display a UI for selecting the name of a model to be installed. In step S the installer temporarily stores the INF format installation set located under the folder of into a temporary folder hereinafter referred to as a TEMP folder which is prepared using a memory region of the RAM by the OS . In step S the installer overwrites files in the INF format installation set stored in the TEMP folder with the INF file and the setting files within the installer sub folder . Through the processing in steps S and S a signed INF format installation set prior to the customization is created in the TEMP folder. In step S the installer installs the install target printer driver using the INF file within the TEMP folder in a similar manner to step S. The remaining processing is identical to the processing indicated with identical numbers in . Thus the descriptions thereof will be omitted here.

As described above the custom tool of the second exemplary embodiment creates the installation set having the structure illustrated in . The user can install a customized driver on the OS by starting the installer of to carry out the installation. Further even if a user installs a printer driver through the installation method using the INF file described with reference to a customized printer driver is installed on an old OS having the determination processing of . Further the installation is stopped in a new OS having the determination processing of . By creating the installation set having the folder structure illustrated in an uncustomized printer driver can be prevented from being installed.

In the first and second exemplary embodiments setting files are replaced with customized setting files for a printer driver. In the OS replacing the setting files after installing the printer driver is not assumed. Accordingly there is a problem that replacement of the setting files by the installer affects a print operation by the user. In a third exemplary embodiment as a countermeasure for alleviating the problem the installer makes a determination as to the OS environment and thus the print spooler are not stopped or started on an old OS having the determination processing of .

As described thus far in an environment that allows a printer driver to be installed even with a signature corrupted installation set by using an INF file of an OS function while the installer determines the OS environment the printer driver is installed with the OS function using the INF file. Through this the setting files are not replaced in such an OS environment and thus influence on the print operation by the user caused by replacement of the setting files can be reduced.

In each of the exemplary embodiments of the present invention there is a possibility that a malicious user may modify the customized INF file the customized setting file and installer setting files and . To prevent such a modification the custom tool calculates keyed hash values of the above files and writes the keyed hash values in the installer setting files and . A hash based message authentication code HMAC is used for keyed hashing and the custom tool and the installer or both store the same private key. In the final processing in or in the custom tool calculates the keyed hash values of the aforementioned files using the private key and writes the calculated keyed hash values into the installer setting file or . The installer or calculates the keyed hash values of the aforementioned files at the start of the installation processing and compares the obtained keyed hash values with the values written in the installer setting file or . If the hash values match with each other the installer or continues with the installation processing. If the hash values do not match with each other the installer or stops the installation processing Improper modifications made to the installer execution module or can be dealt with typically by adding an electronic signature to the installer execution module or .

Although the setting files are replaced in the exemplary embodiments described above as long as an installed driver can be modified the method is not limited to replacing the setting files. For example a setting file of an installed driver may be rewritten to be identical to a setting file which supports customization settings. After an uncustomized driver is installed on an information processing apparatus a customized driver may be installed on the information processing apparatus through some other methods. In the present specification the expression to modify an installed driver generally refers to a process for bringing an information processing apparatus into the above mentioned state where a customized driver is installed.

In the exemplary embodiments described above after the entire files within an installation set for a driver to be customized are installed the installed driver is modified. However even before all of the files within the installation set are installed the installed files of the driver may sequentially be modified. For example at a stage at which installation of a setting file is completed and an execution module is going to be installed the installed setting file may be modified before starting installation of the execution module.

In the present specification an installer format installation set folder as illustrated in that is suitable for each of the exemplary embodiments has been described. However other files and modules may also be included in each of the installation set folders. For example a file and a module that are necessary for installing a device application may be included together with the driver. In addition a driver module and a catalog file may also be included in the installer sub folder or . For example including a driver module in an installation set folder may lead to a redundant configuration. However if an existing installer is designed to mainly use an installer sub folder an exemplary embodiment of the present invention can be implemented while suppressing an improvement on the installer to the minimum. Thus files and modules that can be placed within each folder are not limited and can be set in accordance with the design of the installer.

In the installation processing in each of the exemplary embodiments of the present invention an installer installs an uncustomized driver and then modifies the installed driver. However these operations do not need to be carried out successively. For example the installer once terminates the installation processing at a point at which the installer has installed an uncustomized driver. Thereafter the installer may be started again to resume the installation processing upon receiving an instruction from a user to resume the installation of the customized driver. Here the installation processing is once terminated when the installation of the uncustomized driver is finished. However the installation processing may instead be suspended. If the installation processing is to be suspended the installer can inquire of the user whether to continue with the installation processing at a point at which the installation of the uncustomized driver is finished. Then if the installer receives an instruction from the user to continue with the installation processing the installer may resume the suspended installation processing. In this way the operations in the installation processing do not need to be carried out successively. However in each of exemplary embodiments the entire installation processing is preferably completed at once. This is because if the installation processing is completed at once the user s instruction operation can be omitted and security requirements of the OS can be satisfied in a series of the installation processing flows.

In the exemplary embodiments of the present invention described above when an installation set for a customized driver is installed in addition to an INF file and a setting file a driver module is also installed in each installation processing. However if a driver of the same model as the customized driver is already installed the driver module does not need to be installed and only the INF file and the setting file which affect the customization may be installed. For that purpose the installer needs to be modified as follows. When the installer starts installation the installer inquires of the OS the name of the model of the installed driver. Then the installer determines whether the obtained name matches with the name of the model within the INF file of the driver to be installed. If the names match with each other the installer installs the INF file and the setting file of the customized driver. If the driver module is not installed it is preferable for a security reason that the installer reissues a customized INF file and a catalog file based on the setting file and then installs the driver.

In the exemplary embodiments of the present invention a printer driver has been described as an example suitable for the present invention. However the present invention is not limited to a printer driver. For example a scanner driver or a FAX driver may have the same configuration as the printer driver described in the exemplary embodiments of the present invention and the scanner driver or the FAX driver can be installed through the same processing. Further the present invention is not limited to a driver for image processing. The exemplary embodiments of the present invention are advantageous when function settings e.g. print settings of a driver can be customized through a function setting screen e.g. a printer driver UI capable of print settings displayed by the driver.

Embodiments of the present invention can also be realized by a computer of a system or apparatus that reads out and executes computer executable instructions recorded on a storage medium e.g. non transitory computer readable storage medium to perform the functions of one or more of the above described embodiment s of the present invention and by a method performed by the computer of the system or apparatus by for example reading out and executing the computer executable instructions from the storage medium to perform the functions of one or more of the above described embodiment s . The computer may comprise one or more of a central processing unit CPU micro processing unit MPU or other circuitry and may include a network of separate computers or separate computer processors. The computer executable instructions may be provided to the computer for example from a network or the storage medium. The storage medium may include for example one or more of a hard disk a random access memory RAM a read only memory ROM a storage of distributed computing systems an optical disk such as a compact disc CD digital versatile disc DVD or Blu ray Disc BD registered trademark a flash memory device a memory card and the like.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2012 176024 filed Aug. 8 2012 which is hereby incorporated by reference herein in its entirety.

