---

title: Prevention of password leakage with single sign on in conjunction with command line interfaces
abstract: Provided are techniques for transmitting a lightweight domain access protocol (LDAP) request from an user interface application (UIA) to a LDAP server, receiving, at the UIA, a LTPA token in response to the transmitting of the LDAP request; transmitting, from the UIA, to a command line interface associated with an application, the LTPA token in conjunction with a command to be executed by the application; verifying by the application the LTPA token; and in response to the verifying, executing, by the application the command. The techniques also include transmitting, from the application, to a second command line interface associated with a second application, the LTPA token in conjunction with a second command to be executed by the second application; verifying by the second application the LTPA token; and in response to the verifying by the second application, executing, by the second application the second command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298903&OS=09298903&RS=09298903
owner: International Business Machines Corporation
number: 09298903
owner_city: Armonk
owner_country: US
publication_date: 20130316
---
The claimed subject matter relates generally to computer security and more specifically to providing a single secure sign on to command line interfaces.

Access to computing tools and command line interfaces may require entry of a user ID and password. In general command line interfaces are employed for multiple activities such as but not limited to starting servers changing configurations and so on. Command line interfaces may also be employed to deal with security configurations such as turning security on or off.

Some tools accept security certificates that provide the necessary login authentication information. In addition a user may access computing tools and command line interfaces via a program or application. Typically such access may necessitate that a user provide any required user IDs passwords and credentials for each access attempt. Many programs do not allow cascading credentials which makes it either difficult or impossible to provide secure single sign on SSO to many applications and command line interfaces. One potential way to address this issue is the maintenance by each accessing application or program of a credential vault that manages credentials for the users who have access to the programs and command line interfaces.

Provided are techniques for a secure single sign on SSO to command line interfaces. Command line interfaces and programs that require secure SSO offer an option that enables a user to pass a token such as a Lightweight Third Party Authentication LTPA or LPTA2 token that may be used to authenticate a user. In this manner previously available credential management schemes are not required.

Provided are techniques for transmitting a lightweight domain access protocol LDAP request from an user interface application UIA to a LDAP server receiving at the UIA a LTPA token in response to the transmitting of the LDAP request transmitting from the UIA to a command line interface associated with an application the LTPA token in conjunction with a command to be executed by the application verifying by the application the LTPA token and in response to the verifying executing by the application the command. The techniques also include transmitting from the application to a second command line interface associated with a second application the LTPA token in conjunction with a second command to be executed by the second application verifying by the second application the LTPA token and in response to the verifying by the second application executing by the second application the second command.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational actions to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Turning now to the figures is one example of a computing system architecture that may implement a single sign on SSO procedure in accordance with the disclosed technology. A computing system includes a central processing unit CPU coupled to a monitor a keyboard and a pointing device or mouse which together facilitate human interaction with other elements of architecture and computing system . Also included in computing system and attached to CPU is a computer readable storage medium CRSM which may either be incorporated into CPU i.e. an internal device or attached externally to CPU by means of various commonly available connection devices such as but not limited to a universal serial bus USB port not shown . CRSM is illustrated storing an example of a computer application i.e. app  . Appl  is hosted by computing system and includes a command line interface CLI i.e. CLI  that may be accessed by employing the claimed subject matter. Also stored on CRSM is logic associated with a user interface UI application or UIA . UIA . It should be noted that a typical computing system would include more than one application but for the sake of simplicity only one is shown.

Computing system is communicatively coupled to a local area network LAN which is coupled to the Internet . Also coupled to LAN and thereby computing system is a second computing system . Although not shown client system would also typically include a CPU monitor keyboard pointing device and CRSM. Computing system is illustrated hosting a second application i.e. app  which is stored on a CRSM not shown and executed on a CPU or processor not shown both associated with computing system . Like app  app  includes a CLI i.e. CLI  that may be accessed in accordance with the claimed subject matter.

Also attached to the Internet are a server and a lightweight directory access protocol LDAP server which like computing systems and would typically include a CPU monitor keyboard and pointing device. Coupled to server is a CRSM which is illustrated as storing a service application i.e. or simply service which includes a CLI i.e. a CLI M that may be accessed in accordance with the claimed subject matter. LDAP server and its relation to the claimed subject matter are explained below in conjunction with .

Although in this example computing systems server and LDAP server are communicatively coupled via one or both of LAN and the Internet they could also be coupled through any number of communication mediums such as but not limited to additional LANs not shown or direct or indirect wired or wireless connections. Further it should be noted there are many possible computing system configurations of which architecture and computing system are only simple examples. Throughout the Specification computing systems and applications and server and service are employed as examples of computing components that may implement and or utilize the claimed subject matter.

In accordance with the claimed subject matter LTPA token may be transmitted to a CLI via a communication link to provide a secure sign on to CLI . CLI transmits LTPA token to LDAP server via a communication link to verify and authenticate user . Currently available technology requires that user transmit ID and PW to CLI and CLI to transmit a LDAP req. not shown to LDAP server . Some disadvantages of the current technology include but are not limited to requiring that CLI know ID and PW typically by maintaining a credential vault and managing the credentials for users with access to CLI . In addition there is the potential that ID and PW might end up being recorded into a console log which may be a security issue.

When UIA accesses C  LTPA token is transmitted to CLI  . In other words CLI  exposes an option that allows UIA to pass LTPA token rather than ID and PW . C  may then verify and authenticate user by transmitting LTPA token to LDAP server . In this manner C  does not need to know ID and PW and any chances that ID and PW may be inadvertently exposed are mitigated by obscuring using LTPA token the username and password from a command execution history the shell log or a process corresponding to C  on an operating system OS .

In a similar fashion C  may transmit LTPA token to CLI  of C  so that C  and user may be authenticated and verified without transmitting ID and PW . C  merely transmits LTPA token to LDAP server for authentication. This chain of verification authentication may continue for by way of example having C  transmit LTPA token to CLI M of C M which verifies and authenticates C  and user by transmitting LTPA token to LDAP server .

Process starts in a Begin Get Token block and proceeds immediately to a Receive ID and PW block . During processing associated with block user logs into UIA by providing a user ID and password i.e. ID PW . During processing associated with a Generate LDAP Request block LDAP Req. is generated. During processing associated with a Transmit LDAP Request block LDAP Req. is transmitted from UIA to LDAP server . Although not shown in upon receipt of LDAP Req. which includes ID PW LDAP server authenticates and verifies user generates LTPA token and transmits the token back to UIA . During processing associated with a Wait for LTPA token block UIA waits for LDAP server to transmit LTPA token back.

During processing associated with a Token Received block a determination is made as to whether or not token has been returned. It should be understood that reasons a token may not be returned include but are not limited to LDAP server rejecting ID PW and thereby not authenticating and or verifying user or process may issue a timeout after waiting longer than a predetermined period of time. In the event that a LTPA token is not received control proceeds to a Throw Exception block during which appropriate actions are taken including but not limited to notify user and retrying the login by retransmitting LDAP Req. .

If during processing associated with block a determination is made that LTPA token has been received control proceeds to a Store LTPA block . During processing associated with block LTPA token received during processing associated with block is stored in CRSM for subsequent use in accordance with the claimed subject matter. Once LTPA token has been stored during processing associated with block or an exception has been thrown during processing associated with block control proceeds to an End Get Token block in which process is complete.

Process starts in a Begin Establish Connection block and proceeds immediately to a Receive Access Request block . During processing associated with block a CLI receives a request for access or services. Transmitted in conjunction with the request is LTPA token. In this example UIA is transmitting a request to CLI  for access to the web component C  by means of message that includes LTPA token . It should be noted that the claimed subject matter is equally applicable to a request to a web component to a different web component. For example once C  has received the request an extracted LPTA token see and request for service may be forwarded to a different web component such as C  and CLI  or C M and CLI M .

During processing associated with an Extract LPTA Token block LPTA token is extracted for the request received during processing associated with block . During processing associated with a Authentication verification A V LPTA Token block the token extracted during processing associated with block is verified by requesting authentication verification from LPTA server . During processing associated with an A V Received block a determination is made as to whether or not LPTA server has replied with an A V message. It should be noted that reasons verification authentication may not be returned include but are not limited to LDAP server rejecting token or process may issue a timeout after waiting longer than a predetermined period of time.

If A V is not received control proceeds to a Throw Exception block . During processing associated with block appropriate actions are taken including but not limited to notify the components in the chain of requests an ultimately user and retrying the A V by retransmitting LTPA token to LPDA server . If during processing associated with block a determination is made that A V has been received control proceeds to a Process Request block during which the requested operation is processed. In this manner an operation may be requested from a component without transmitting a user ID and password. Finally during processing associated with an End Establish Connection process is complete. In this manner unnecessary exposure of user IDs and passwords is prevented.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

