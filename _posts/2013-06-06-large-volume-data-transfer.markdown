---

title: Large volume data transfer
abstract: Described herein is a technology to facilitate large volume data transfer. In one implementation, an application server determines if an application is invoking a procedure in a data server. If the application is determined to be invoking the procedure, the application data is encoded to compress application data volume. The encoded application data is then transferred from the application server to a data server. At the data server, the application data is decoded for processing by the data server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09160820&OS=09160820&RS=09160820
owner: SAP SE
number: 09160820
owner_city: 
owner_country: DE
publication_date: 20130606
---
The present disclosure relates generally to databases and more specifically to facilitating large volume data transfer in database systems.

A database typically includes one or more database tables for storing data values. To access the data in the database an application typically issues a database query to a Database Management System DBMS that retrieves the data from the database. The DBMS may be structured to support different types of operations from the requesting application server to retrieve add modify and or delete data being stored in the database. The application then interprets the data retrieved from the data server and transforms the data into a format that can be processed by the application.

Typically the application is written using a high level programming language that provides a high level of abstraction suited for developing business applications such as developing custom reports and interfaces. The data server on the other hand is typically structured to support operations that are programmed using a query language such as Structured Query Language SQL to interpret what where and how data is to be stored and manipulated.

The application may perform various complex calculations based on data retrieved from the data server. In some cases the data server is optimized to accelerate database operations e.g. SELECT queries . However due to the large volume of data that may be returned from the data server to the application and vice versa the overall performance is still limited by the data transfer time. For example even if the data server is optimized to accelerate SELECT queries by 100 times the overall performance may be improved by only 2 to 3 times or worse due to delays caused by large volume data transfer.

Currently there is no unified methodology to handle database function calls to achieve optimized performance. Different developers may use different approaches to call database functions and retrieve data for use by the application. In a bad case scenario the shared connection between the application and data server is reset while the data in the temporary database table is still needed for processing by the application.

A technology for facilitating large volume data transfer is described herein. In accordance with one aspect an application server determines if an application is invoking a procedure in a data server. If the application is determined to be invoking the procedure application data is encoded to compress application data volume. The encoded application data is then transferred from the application server to a data server. At the data server the application data is decoded for processing by the data server.

In accordance with another aspect application data is encoded at an application server to compress application data volume. The encoded application data is then transferred from the application server to a data server. At the data server the application data may be decoded for processing by the data server. Next results data generated in response to invoking a procedure in the data server may be encoded to compress results data volume. The encoded results data may then be transferred from the data server to the application server. At the application server the results data may be decoded for processing by the application server.

With these and other advantages and features that will become hereinafter apparent further information may be obtained by reference to the following detailed description and appended claims and to the figures attached hereto.

In the following description for purposes of explanation specific numbers materials and configurations are set forth in order to provide a thorough understanding of the present frameworks and methods and in order to meet statutory written description enablement and best mode requirements. However it will be apparent to one skilled in the art that the present frameworks and methods may be practiced without the specific exemplary details. In other instances well known features are omitted or simplified to clarify the description of the exemplary implementations of the present framework and methods and to thereby better explain the present framework and methods. Furthermore for ease of understanding certain method steps are delineated as separate steps however these separately delineated steps should not be construed as necessarily order dependent in their performance.

A technology for facilitating large volume data transfer is described herein. One aspect of the technology provides an encode decode framework for reducing data volume and thereby improving data transfer speeds. In one implementation retrieved data is first encoded at a data server transferred to and then decoded at an application server for use by an application. Conversely data from the application server may also be encoded at the application server transferred to and then decoded at the data server for storage.

The present technology effectively solves the bottleneck problem caused by large volume data transfer between application and data servers. Since large data volumes no longer limit the overall performance of the system the application designer may incorporate as many calls to database functions as necessary to enhance performance. In addition the encode decode process does not take up resources significant enough to impair overall performance when calling database functions and returning results. Further the present framework may be provided as a unified solution e.g. common library functions for users to design and develop applications based on accelerated database operations. These and other advantages and aspects will be described in more detail in the following description.

The framework described herein may be implemented as a method a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer usable medium. These and various other features will be apparent from the following description.

Computer system includes a central processing unit CPU an input output I O unit and a memory module . Other support circuits such as a cache a power supply clock circuits and a communications bus may also be included in computer system . In addition any of the foregoing may be supplemented by or incorporated in application specific integrated circuits. Examples of computer system include a handheld device a mobile device a personal digital assistance PDA a workstation a server a portable laptop computer another portable device a mini computer a mainframe computer a storage system a dedicated digital appliance a device a component other equipment or some combination of these capable of responding to and executing instructions in a defined manner.

Memory module may be any form of non transitory computer readable media including but not limited to dynamic random access memory DRAM static random access memory SRAM Erasable Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory devices magnetic disks internal hard disks removable disks magneto optical disks Compact Disc Read Only Memory CD ROM any other volatile or non volatile memory or a combination thereof.

Memory module serves to store machine executable instructions data and various software components for implementing the techniques described herein all of which may be processed by CPU . As such the computer system is a general purpose computer system that becomes a specific purpose computer system when executing the machine executable instructions. Alternatively the various techniques described herein may be implemented as part of a software product which is executed via an application server and or a data server . Each computer program may be implemented in a high level procedural or object oriented programming language e.g. C C Java Advanced Business Application Programming ABAP from SAP AG Structured Query Language SQL L language etc. or in assembly or machine language if desired. The language may be a compiled or interpreted language. The machine executable instructions are not intended to be limited to any particular programming language and implementation thereof. It will be appreciated that a variety of programming languages and coding thereof may be used to implement the teachings of the disclosure contained herein.

In one implementation the memory module of the computer system includes an application server or stack and a data server or stack . Application server or stack may store an application and an application data transfer unit that may be coded using a high level programming language such as Java C ABAP etc. Other types of programming languages are also useful.

Application may include a set of function modules or programs e.g. ABAP function modules of a business application designed to perform various business functions such as customer relationship management CRM enterprise resource planning ERP application human resource management enterprise content management ECM business process management BPM product lifecycle management business intelligence and so forth.

Application data transfer unit may serve to process incoming and outgoing data from the application server for facilitating efficient large volume data transfer. More particularly application data transfer unit may serve to prepare outgoing data for transfer to the data server and process incoming data from the data server for use by the application . More details of these components will be provided in the following description.

Data server or stack may include a database management system DBMS a database DB data transfer unit and a database . DBMS and DB data transfer unit may be coded using a database query language such as SQL or extensions thereof. Other types of programming languages are also useful. DBMS may include a set of programs or procedures e.g. HANA custom procedures for defining administering and processing the database . A user at the client computer may interact with a user interface to communicate with the database via the application server and the DBMS . DB data transfer unit may serve to process incoming and outgoing data from the data server . More particularly DB data transfer unit may serve to prepare outgoing data for transfer to the application server and process incoming data from the application server for storing in the database . More details of these components will be provided in the following description.

In one implementation database is an in memory database that relies primarily on the system s main memory for efficient computer data storage. More particularly the data in the in memory database may reside in volatile memory and not persistently stored on a hard drive thereby allowing the data to be instantly accessed and scanned at a speed of several megabytes per millisecond. The in memory database allows seamless access to and propagation of high volumes of data in real time. Parallel processing may further be achieved by using a multicore processor in conjunction with the in memory database . In memory database technology includes systems such as SAP s HANA high performance analytic appliance in memory computing engine.

Column based data storage may further be implemented in the in memory database where data tables are stored as columns of data in sequence and in compressed memory blocks. This may facilitate faster aggregation of data when calculations are performed on single columns. Alternatively row based data storage is also possible. In some implementations instead of updating entire rows only fields that have changed will be updated. This avoids having to lock entire data tables during updates to prevent conflicting modifications to a set of data. High levels of parallelization may be achieved which is critical to real time processing of live data streams and performing constant and substantially simultaneous updates.

It should be appreciated that the different components and sub components of the computer system may be located on different machines or systems. For example application server and data server may be implemented on different physical machines or computer systems. It should further be appreciated that the different components of the client computer may also be located on the computer system .

As shown data server may include a DBMS a DB data transfer unit and a database . Application server may include application and application data transfer unit . In one implementation DB data transfer unit includes encoder A and decoder A while application data transfer unit includes encoder B decoder B and DB caller . DB data transfer unit and application data transfer unit may serve to facilitate efficient data transfer between data server and application server by compressing the data volume. More particularly encoders A and B may implement a lossless data compression algorithm that allows decoders B and A respectively to reconstruct the exact original data from the compressed data. Examples of lossless algorithms include LZ77 LZ78 LZW and so forth.

In response to a request from application DBMS may retrieve the data from the database for processing. Prior to transmitting the retrieved data to the application server the retrieved data may be encoded by encoder A to compress the data volume and thereby enhance transfer speed. The encoded data may then be transferred to the decoder B in the application server which decodes and decompresses the data for processing by application .

Application may write application data e.g. computation results reports etc. to database if necessary. Prior to transmitting the application data to the data server for further processing DB caller may prepare the application data for encoding by encoder B . DB caller may then invoke encoder B to encode the prepared data to compress the data volume. The encoded data may then be transferred to the decoder A in the data server which decodes and decompresses the data for processing by the DBMS .

At the application data transfer unit in the application server determines whether a stored procedure or function module in the data server is to be called. A stored procedure is a set of commands which are compiled and stored inside the DBMS of the data server . A stored procedure may be called when for example the application is accessing updating or storing data in the database . In some implementations the DB caller parses the code of application to determine if a call to the DBMS is necessary. If no call to a stored procedure in the DBMS is necessary the process ends otherwise the process continues at .

At the DB caller proceeds to invoke the stored procedure or function module in the DBMS . In some implementations where the components in the application server are coded using ABAP the DB caller may call the stored procedure or function module using ABAP Database Connectivity ADBC . ADBC is an application programming interface API that may be used to establish and administer database connections send database specific SQL commands to the DBMS and process the results. Other types of database connectivity APIs may also be used. To establish and administer a connection with the DBMS a database user name password default schema connection type and or other settings may be pre configured and maintained in a data structure e.g. SAP s table DBCO stored in the application server .

At DB caller determines if compression of the application data volume is necessary. Compression may be determined to be necessary if the size or volume of the application data e.g. table size or number of columns to be transferred to the data server exceeds a predetermined threshold. The threshold may be application specific and may depend not only on the type of application data but also the hardware and network environment. Different types of application data generally refer to data from different tables with for example different structures and different repeatable rates.

Based on the determination of whether compression is necessary the DB caller sets a compress option accordingly. The compress option may be passed along with other named parameters e.g. stored procedure name when the DB caller invokes the stored procedure in the DBMS . The compress option informs the DBMS whether or not the application data received by the DBMS has been compressed by encoder B .

If compression is determined to be unnecessary the process continues at step . Otherwise if compression is determined to be necessary DB caller prepares the application data for compression by encoder B . The application data may be initially stored in an internal table e.g. ABAP internal table or any other native data structure. To prepare the application data for compression DB caller may convert e.g. serialize the application data in the native data structure into a binary or text file. The text file may be in the form of a comma separated values CSV file or any other suitable format. The CSV file may include column names and column data separated by a literal comma tab or any other character or string.

At DB caller invokes encoder B in the application server . Encoder B compresses the prepared application data to reduce its size or volume. In some implementations the encoder B may execute a lossless data compression algorithm such as LZ77 LZ78 LZW etc. to compress the prepared application data. Lossless data compression algorithms typically exploit statistical redundancy to represent data more concisely without losing information. The compressed application data may be stored as binary data in a database table compatible with the data server . The database table may then be transferred to the data server via for example a database connection e.g. ADBC established by the DB caller .

At decoder A at data server receives the compressed application data via for example a database connection. The decoder A is invoked to decode the compressed application data or database table . During decoding the compressed application data may be converted from a binary database table to a CSV string. Any other types of formats are also useful. Decoder A uses the same type of algorithm e.g. LZ77 as encoder B to decode the compressed application data. For instance decoder A may reverse the same lossless data compression algorithm e.g. LZ77 LZ78 LZW etc. to decode the compressed application data to an exact digital duplicate of the original application data. The decoded application data may be in the form of a CSV string or any other suitable format. In one implementation decoder A further processes the decoded application data by parsing the column header and column data line by line and inserting the column data in the corresponding database table.

At decoder A invokes the respective DB procedure in the DBMS to generate results data. Results data may be generated by the DB procedure processing the decoded application data and or retrieving data from the database . The DB procedure may be a stored procedure that is called to for example retrieve update or store the decoded application data in the DBMS .

At the DBMS determines if compression is necessary for results data of the DB procedure that are to be returned to the application server . It is understood that steps and may not be necessary in situations when no results data are to be returned to the application server . The DBMS may determine compression to be necessary if the size or volume of the results data e.g. table size or number of columns exceeds a predetermined threshold. Based on such determination the DBMS sets a compress option accordingly. The compress option may be passed along with other named parameters e.g. function module name when the DBMS calls a named function module or program in the application . The compress option informs the application whether or not the results data received by the application server has been compressed by encoder A .

If compression is determined to be unnecessary the process continues at step . Otherwise if compression is determined to be necessary DBMS prepares the results data for compression by encoder A . The results data may be initially stored in a native data structure e.g. internal database record set or table . To prepare the results data for compression DBMS may convert e.g. serialize the results data stored in the native data structure into a binary or text file. The text file may be in the form of a comma separated values CSV file or any other suitable format. The CSV file may include column names and column data separated by a literal comma tab or any other character or string.

At DBMS invokes encoder A in the data server . Encoder A compresses the prepared results data to reduce its size or volume. In some implementations encoder A may execute a lossless data compression algorithm such as LZ77 LZ78 LZW etc. to compress the prepared results data. The compressed results data may be stored and transferred as binary data. The compressed results data may then be transferred to the application server via a database connection e.g. ADBC established by the DBMS .

At decoder B at application server receives the compressed results data. Decoder B is invoked to decode the compressed results data. During decoding the compressed results data may be converted from a binary file to a CSV string or other text format. Any other types of formats are also useful. Decoder B uses the same type of algorithm e.g. LZ77 as encoder A to decode the compressed results data. The decoded results data may be in the form of a CSV string or any other suitable format. In one implementation decoder B further processes the decoded results data by deserializing it. For instance decoder B may read the column header and column data line by line and inserting the column data in the corresponding internal table.

At decoder B invokes the respective application function module or program in the application to process the decoded results data. The process then continues at to determine if a call to the DBMS is necessary. It should be appreciated that process may be repeated for each call to the DBMS encountered in the code of the application .

Although the one or more above described implementations have been described in language specific to structural features and or methodological steps it is to be understood that other implementations may be practiced without the specific features or steps described. Rather the specific features and steps are disclosed as preferred forms of one or more implementations.

