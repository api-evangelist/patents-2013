---

title: Generating XML schema from JSON data
abstract: A computer receives a first JSON data that includes at least one JSON array or JSON object value. The computer parses a stream of JSON data, wherein the stream of JSON data includes at least a part of the first JSON data. The computer determines the logical structure of the first JSON data using the parsed stream of JSON data. The computer generates an XML schema based on the logical structure of the first JSON data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075833&OS=09075833&RS=09075833
owner: International Business Machines Corporation
number: 09075833
owner_city: Armonk
owner_country: US
publication_date: 20130121
---
The present invention relates generally to the field of data processing and more particularly to generating an XML schema from JSON data to parse validate and transform JSON data.

To communicate with one another computers use various protocols and message formats. A computer system is only able to interpret messages in formats for which the computer system includes an appropriate serialization stack used to convert the message to usable application data or objects. As such computing systems may include application programming interfaces APIs which developers use to program the computer system to incorporate certain functionality while allowing appropriate message formats to be implemented for inter computer system communication.

In recent years use of the eXtensible Markup Language XML has become increasingly prevalent in business. This trend is largely attributable to the flexibility of XML as a mechanism for defining the structure and content of data. XML is a self descriptive markup language that is finding ever wider application as a data transmission and processing tool. XML is efficient at describing and defining data and is therefore used ever increasingly in data intensive applications. In this way XML is different from HTML which was designed for displaying data. XML data can be readily transmitted between computers using any type of data transmission media. XML data can be processed using computer programs and other suitably configured applications. An XML file may be received by an application and processed to generate an output. XML allows users to define schemas comprising a set of elements and attributes in a structural relationship to define a non programming language specific data type i.e. a data type that is defined without use of particular programming language . The elements and attributes defined in an XML schema may then be used as tags or labels in one or more XML instance documents i.e. XML documents conforming to an XML schema and containing actual data which may instantiate earlier defined data types. When XML instance documents are forwarded to other users or enterprises the XML schema may be used by the recipient to understand and or validate the instance document. Sharing of data across divergent operating systems and platforms is thus supported.

As might be imagined all formats are not compatible with one another. For example Web Services is a standardized way of integrating applications. Standardized XML documents can be used with SOAP Simple Object Access Protocol messages and WSDL Web Services Description Language descriptions to integrate applications without an extensive knowledge of the applications being integrated. Alternatively a text based dynamic language designed for human readable data interchange such as JavaScript Object Notation JSON may be used as a format for sending data. Each of these formats is interpreted by different incompatible serialization stacks. Some of the difficulty in interchanging XML and JSON arises from different format requirements. XML messages always include a root name whereas some dynamic languages such as JSON do not include a root name. In general XML element contents do not have type assignments whereas contents of dynamic language elements such as JSON Boolean string and number elements often have type assignments. It can be understood that the generation of an XML schema from JSON data can present multiple difficulties. Further difficulties can arise during parsing validating and transformation of JSON data using such schemas if the schema does not match the JSON data. It is for these and other reasons that schemas are often manually created using a human actor.

Embodiments of the present invention disclose a method computer program product and system for generating an XML schema from one or more JSON documents. A computer receives a first JSON data wherein the first JSON data includes at least one JSON array or JSON object value. The computer parses a stream of JSON data wherein the stream of JSON data includes at least a part of the first JSON data. The computer determines the logical structure of the first JSON data using the parsed stream of JSON data. The computer generates an XML schema based on the logical structure of the first JSON data.

In many implementations XML documents are used to provide data to applications that perform various operations using the XML data. Commonly such applications are configured to receive the XML data in a given order and having a specified format. If the data is provided in an incorrect order or having an improper format it may be unusable by an application. Improperly configured XML data can cause application programs to fail or crash or cause other undesirable outcomes. Under such circumstances the XML document and associated data are considered invalid . Consequently applications are commonly equipped with programs that validate received XML documents.

If an XML document contains XML data in the proper order and of the correct format it is said to be valid and the application can operate on the data. One approach used to validate XML documents is to use an XML schema which may be represented as a set of .xsd files to validate the XML data. The schema can be included as part of the application or used as an add on validation module. XML schema are used to describe the structure of XML documents. As is known to those having ordinary skill in the art XML schema are useful for defining elements or attributes that can appear in a document. XML schema can be used to define what elements are child elements and the number and order of child elements. XML schema can also define whether an element is empty or can include text and can also define data types for elements and attributes as well as defining default and fixed values for elements and attributes. These features can be useful for defining and validating XML documents.

However in common usage the data and structure of XML documents are constantly changing. Additionally each change of data or structure typically necessitates a corresponding change in the associated XML schema. In the current art many such schema must be changed or rewritten by hand to implement the changes. Such changes may be relatively simple to effectuate. However most schema are very complex and the process of carefully and accurately generating suitable schema can be extremely time consuming.

In general using conventional processes generating accurate schema capable of validating XML documents is a laborious meticulous and time consuming process. Typically in order to generate a schema for an XML or similar document the labor intensive manual process must be performed by a human actor. Unless an XML schema exists the XML is merely text with some extra information. For example if one data element in the text files changes or is incorrect the application using the XML can crash or not function properly. As such an XML schema defines what data is expected in the XML text file such a schema is very valuable to applications and application developers .

The automatic generation of XML schema from XML documents is currently known in the art. What is needed is an interchange between JSON and XML i.e. the ability to process JSON as if JSON were XML. In that regard XML Schema are needed to govern the XML processing and handling of JSON data. Therefore similar to the need to automatically generate XML schema from XML data there is a need to automatically generate XML schema from JSON data. However due to multiple difficulties in JSON to XML transformations many issues can arise that hinder the generation of an XML schema from JSON data.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code instructions embodied thereon.

Any combination of computer readable media may be utilized. Computer readable media may be a computer readable storage medium. Computer readable media comprise all computer readable media with the sole exception being a transitory propagating signal. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of a computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In this exemplary embodiment storage device is in general an external storage device used to store data and transmit that data to computing device . Typically the data stored in storage device includes XML schemas JSON data XML data or any other type of data that may be required for the functioning of schema generator program and validation and transformation program . However in other embodiments storage device can store other types of data such as programs and may perform some of the functions of computing device . For further details as to the function of storage device and the types of data included in storage device see the discussion of .

In this exemplary embodiment schema generator program and validation and transformation program are stored on computing device . However in other embodiments schema generator program and validation and transformation program may be stored externally and accessed through a communication network such as communication network . The communication network can be for example a local area network LAN a wide area network WAN such as the Internet or a combination of the two and may include wired wireless fiber optic or any other connection known in the art. In general the communication network can be any combination of connections and protocols that will support communications between computing device and schema generator program and validation and transformation program in accordance with a desired embodiment of the present invention.

In various embodiments of the present invention computing device can be a server a laptop computer a tablet computer a netbook computer a personal computer PC or a desktop computer. In another embodiment computing device represents a computing system utilizing clustered computers and components to act as a single pool of seamless resources. In general computer can be any computing device or a combination of devices with access to storage device schema generator program and validation and transformation program and is capable of running schema generator program and validation and transformation program . Computing device may include internal and external hardware components as depicted and described in further detail with respect to .

In this exemplary embodiment in general validation and transformation program validates and transforms JSON and XML data. Validation and transformation program uses one validating engine to parse and validate XML and JSON data and uses one transformation engine to transform and map both XML and JSON data. Validation and transformation program includes or can generate validation and transformation engines to accommodate the transformation to be applied to a given dataset e.g. XML and JSON datasets . Validation and transformation program further includes readers to read streaming data. Typically validation and transformation program receives data from storage device . However in other embodiments validation and transformation program can receive data from other sources such as schema generator program and the internet. See the discussion of for further details regarding the function of validation and transformation program .

In this exemplary embodiment in general schema generator program receives a sample of JSON data such as a JSON document and generates an XML schema based on the received JSON data. However in other embodiments the sample of JSON data can be an already parsed JSON tree or a fragment of it as opposed to a root . Typically schema generator program parses the sample of JSON data and identifies the logical structure of the data. Often this results in the generation of a tree after parsing a JSON input. However in other embodiments the logical structure can be represented by a sequence of events a file or a data that represents the logical structure of the JSON input.

In this exemplary embodiment schema generator program generates an XML schema from a single set of JSON data. However in some embodiments the generated XML schema can be augmented and or refined using a second set of JSON data. For example the generated XML schema can be augmented to facilitate elements of the second set of JSON data which were not present in the first set of JSON data.

In this exemplary embodiment illustrates a block diagram showing examples of the classes of JSON data which can be used to generate an XML schema. In general schema generator program generates an XML schema from one or more JSON array or object values based on user options. Typically a JSON scanner included in schema generator program parses JSON data and makes the logical structure of JSON data available to schema generator program . In general a JSON document herein contains a root JSON value object. In general a JSON object herein contains a map from names to JSON values. In general a JSON array is herein defined as an array of JSON values.

In this exemplary embodiment schema generator program reads a sample of the JSON data and generates a tree of JSONValue objects to understand its logical structure. An example showing read JSON data is shown in part as follows 

In this exemplary embodiment schema generator program uses the logical structure of the JSON data to generate an XML schema. In general schema generator program identifies common elements found in all the sample JSON data i.e. a JSON pair that appears in one instance document and not in another. These elements are included in the XML schema. However elements which appear in only some datasets included in the sample JSON data are still taken into account as optional elements in the XML schema. In other words elements that are marked as optional in the schema are not required for a valid input. However optional elements are not excluded from the schema. These optional elements can be selected for inclusion or exclusion in an output per the desire of a given client. A variety of XML schema types can be generated using various JSON data types. For example JSON data types such as string number Boolean object and array can be evaluated to generate corresponding XML schema for those JSON data types.

For example in this exemplary embodiment schema generator program can convert JSON string type data into XML schema type data using two different options. Option one using a complex string type data is as follows 

In this exemplary embodiment complex string type generated using option one can yield a generated XML schema segment such as 

In this exemplary embodiment option two uses built in xs string type data which would generate an XML schema segment such as 

In the above two options in this exemplary embodiment for JSON string type data there is one available configuration option namely an attribute configuration that controls whether or not to use the complex string type i.e. option one or the XML schema built in type i.e. option two xs string.

In another example for this exemplary embodiment schema generator program can convert JSON number type data into XML schema type data using two possible options. Option one using complex number type data is as follows 

In this exemplary embodiment an example of a generated XML schema segment using option one for complex number type data is 

In the second option of this exemplary embodiment an XML built in type xs double can be used by schema generator program to generate an XML schema segment such as 

In the above two options in this exemplary embodiment for JSON number type data there are two available configuration options. The first option is an option based on an attribute configuration that controls whether or not to use the complex type number or use an XML built in type. The second option is an option based on a type name that controls which XML built in numeric type will be mapped to the JSON number type.

In this exemplary embodiment to convert JSON Boolean type data schema generator program can use the following 

In the above two options for this exemplary embodiment for JSON Boolean type data there is one available configuration option namely an attribute configuration that controls whether or not to use the complex type boolean or use the XML built in type xs boolean .

If the data being processed is JSON object type data then in this exemplary embodiment schema generator program can generate a complex type object such as 

Then other XML schema types corresponding to JSON object types can be generated as restrictions of the complex type object . An example of an XML schema segment generated by the above process based on the object type of the JSON data is as follows 

In this exemplary embodiment for JSON array type data the array would be processed by schema generator program using for example 

In this exemplary embodiment an XML schema segment would then be generated by modeling JSON array type data as a restriction of the complex type array for example 

In this exemplary embodiment schema generator program can use an array for phone numbers that contains two object values to generate an XML schema element declaration. For example such an element declaration can be 

In this exemplary embodiment is a block diagram illustrating how one validating engine and one transformation engine can be used by validation and transformation program to parse validate and map XML and JSON data.

Schema generator program reads JSON sample data which is stored on storage device and produces a respective XML schema . XML schema is then passed to schema repository which is included storage device for storage and processing.

In this exemplary embodiment based on the generated XML schema a validating engine is generated by validating engine . Both XML stream reader and JSON stream reader implement a common streaming interface stream reader interface . XML stream reader reads XML data and sends a stream of events to validating engine . JSON stream reader reads JSON data and sends a stream of events to validating engine . Validating engine processes the incoming events validates the data and sends a stream of events to transformation engine .

In this exemplary embodiment is a flowchart depicting operational steps of schema generator program for the generation of XML schema using JSON data in accordance with an embodiment of the present invention.

First in this exemplary embodiment schema generator program reads a sample of JSON data in step . Next in step schema generator program identifies the logical structures of the JSON value objects based on the read sample of JSON data. Then in step schema generator program converts JSON data types to XML data types and generates an XML schema based on the identified the logical structures of the JSON value objects.

In this exemplary embodiment depicts a block diagram of components of computing device and storage device in accordance with an illustrative embodiment of the present invention. It should be appreciated that provides only an illustration of one implementation and does not imply any limitations with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environment may be made.

Computing device and storage device respectively include communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

Schema generator program and validation and transformation program are stored in persistent storage for execution by one or more of the respective computer processors via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices including resources of computing device and storage device . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Schema generator program and validation and transformation program may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to computing device and storage device . For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention schema generator program and validation and transformation program can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display .

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

