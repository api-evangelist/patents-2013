---

title: Event recognition
abstract: While displaying one or more views of a first software application, an electronic device detects a sequence of touch inputs. The electronic device, in accordance with a determination that no gesture recognizer of the first software application recognizes a portion of the sequence of touch inputs, delivers the sequence of touch inputs to the second software application, and in accordance with a determination that at least one gesture recognizer in the second software application recognizes the sequence of touch inputs, processes the sequence of touch inputs with the at least one gesture recognizer in the second software application that recognizes the sequence of touch inputs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483121&OS=09483121&RS=09483121
owner: APPLE INC.
number: 09483121
owner_city: Cupertino
owner_country: US
publication_date: 20131001
---
This application is a continuation application of U.S. patent application Ser. No. 13 077 927 filed Mar. 31 2011 entitled Event Recognition which claims priority to U.S. Provisional Application Ser. No. 61 425 222 filed on Dec. 20 2010 entitled Event Recognition which was a continuation in part of A U.S. patent application Ser. No. 12 566 660 filed Sep. 24 2009 entitled Event Recognition which claims priority to U.S. Provisional Application Ser. No. 61 210 332 filed on Mar. 16 2009 entitled Event Recognition and B U.S. patent application Ser. No. 12 789 695 filed May 28 2010 entitled Gesture Recognizers with Delegates for Controlling and Modifying Gesture Recognition which claims priority to U.S. Provisional Application Ser. No. 61 298 531 filed Jan. 26 2010 entitled Gesture Recognizers with Delegates for Controlling and Modifying Gesture Recognition. All of these applications are incorporated by reference herein in their entirety.

This application relates to U.S. patent application Ser. No. 13 077 524 filed Mar. 31 2011 entitled Device Method and Graphical User Interface for Navigation of Concurrently Open Software Applications . This application is incorporated by reference herein in its entirety.

This application relates to U.S. patent application Ser. No. 13 077 925 filed Mar. 31 2011 entitled Event Recognition and U.S. patent application Ser. No. 13 077 931 filed Mar. 31 2011 entitled Event Recognition . Both of these applications are incorporated by reference herein in their entirety.

This relates generally to user interface processing including but not limited to apparatuses and methods for recognizing touch inputs.

An electronic device typically includes a user interface that is used to interact with the computing device. The user interface may include a display and or input devices such as a keyboard mice and touch sensitive surfaces for interacting with various aspects of the user interface. In some devices with a touch sensitive surface as an input device a first set of touch based gestures e.g. two or more of tap double tap horizontal swipe vertical swipe pinch depinch two finger swipe are recognized as proper inputs in a particular context e.g. in a particular mode of a first application and other different sets of touch based gestures are recognized as proper inputs in other contexts e.g. different applications and or different modes or contexts within the first application . As a result the software and logic required for recognizing and responding to touch based gestures can become complex and can require revision each time an application is updated or a new application is added to the computing device. These and similar issues may arise in user interfaces that utilize input sources other than touch based gestures.

Thus it would be desirable to have a comprehensive framework or mechanism for recognizing touch based gestures and events as well as gestures and events from other input sources that is easily adaptable to virtually all contexts or modes of all application programs on a computing device and that requires little or no revision when an application is updated or a new application is added to the computing device.

To address the aforementioned drawbacks some embodiments provide a method performed at an electronic device with a touch sensitive display. The electronic device is configured to execute at least a first software application and a second software application. The first software application includes a first set of one or more gesture recognizers and the second software application includes one or more views and a second set of one or more gesture recognizers. Respective gesture recognizers have corresponding gesture handlers. The method includes displaying at least a subset of the one or more views of the second software application and while displaying at least the subset of the one or more views of the second software application detecting a sequence of touch inputs on the touch sensitive display. The sequence of touch inputs includes a first portion of one or more touch inputs and a second portion of one or more touch inputs subsequent to the first portion. The method also includes during a first phase of detecting the sequence of touch inputs delivering the first portion of one or more touch inputs to the first software application and the second software application identifying from gesture recognizers in the first set one or more matching gesture recognizers that recognize the first portion of one or more touch inputs and processing the first portion of one or more touch inputs with one or more gesture handlers corresponding to the one or more matching gesture recognizers.

In accordance with some embodiments a method is performed at an electronic device with a touch sensitive display. The electronic device is configured to execute at least a first software application and a second software application. The first software application includes a first set of one or more gesture recognizers and the second software application includes one or more views and a second set of one or more gesture recognizers. Respective gesture recognizers have corresponding gesture handlers. The method includes displaying a first set of one or more views. The first set of one or more views includes at least a subset of the one or more views of the second software application. The method also includes while displaying the first set of the one or more views detecting a sequence of touch inputs on the touch sensitive display. The sequence of touch inputs includes a first portion of one or more touch inputs and a second portion of one or more touch inputs subsequent to the first portion. The method includes determining whether at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs. The method also includes in accordance with a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs delivering the sequence of touch inputs to the first software application without delivering the sequence of touch inputs to the second software application and determining whether at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the sequence of touch inputs. The method furthermore includes in accordance with a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the sequence of touch inputs processing the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers that recognizes the sequence of touch inputs. The method also includes in accordance with a determination that no gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs delivering the sequence of touch inputs to the second software application and determining whether at least one gesture recognizer in the second set of one or more gesture recognizers recognizes the sequence of touch inputs. The method furthermore includes in accordance with a determination that at least one gesture recognizer in the second set of one or more gesture recognizers recognizes the sequence of touch inputs processing the sequence of touch inputs with the at least one gesture recognizer in the second set of one or more gesture recognizers that recognizes the sequence of touch inputs.

In accordance with some embodiments a method is performed at an electronic device with an internal state. The electronic device is configured to execute software that includes a view hierarchy with a plurality of views. The method includes displaying one or more views of the view hierarchy and executing one or more software elements. Each software element is associated with a particular view and each particular view includes one or more event recognizers. Each event recognizer has one or more event definitions based on one or more sub events and an event handler which specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to a particular event definition of the one or more event definitions. The method also includes detecting a sequence of one or more sub events and identifying one of the views of the view hierarchy as a hit view. The hit view establishes which views in the view hierarchy are actively involved views. The method furthermore includes delivering a respective sub event to event recognizers for each actively involved view within the view hierarchy. At least one event recognizer for actively involved views in the view hierarchy has a plurality of event definitions and one in the plurality of event definitions is selected in accordance with the internal state of the electronic device. The at least one event recognizer processes the respective sub event prior to processing a next sub event in the sequence of sub events in accordance with the selected event definition.

In accordance with some embodiments a non transitory computer readable storage medium stores one or more programs for execution by one of more processors of an electronic device. The one or more programs include one or more instructions which when executed by the electronic device cause the device to perform any of the methods described above.

In accordance with some embodiments an electronic device with a touch sensitive display includes one or more processors and memory storing one or more programs for execution by the one or more processors. The one or more programs include instructions for implementing any of the methods described above.

In accordance with some embodiments an electronic device with a touch sensitive display includes means for implementing any of the methods described above.

In accordance with some embodiments an information processing apparatus in a multifunction device with a touch sensitive display includes means for implementing any of the methods described above.

In accordance with some embodiments an electronic device includes a touch sensitive display unit configured to receive touch inputs and a processing unit coupled to the touch sensitive display unit. The processing unit is configured to execute at least a first software application and a second software application. The first software application includes a first set of one or more gesture recognizers and the second software application includes one or more views and a second set of one or more gesture recognizers. Respective gesture recognizers have corresponding gesture handlers. The processing unit is configured to enable display of at least a subset of the one or more views of the second software application and while displaying at least the subset of the one or more views of the second software application detect a sequence of touch inputs on the touch sensitive display unit. The sequence of touch inputs includes a first portion of one or more touch inputs and a second portion of one or more touch inputs subsequent to the first portion. The processing unit is configured to during a first phase of detecting the sequence of touch inputs deliver the first portion of one or more touch inputs to the first software application and the second software application identify from gesture recognizers in the first set one or more matching gesture recognizers that recognize the first portion of one or more touch inputs and process the first portion of one or more touch inputs with one or more gesture handlers corresponding to the one or more matching gesture recognizers.

In accordance with some embodiments an electronic device includes a touch sensitive display unit configured to receive touch inputs and a processing unit coupled to the touch sensitive display unit. The processing unit is configured to execute at least a first software application and a second software application. The first software application includes a first set of one or more gesture recognizers and the second software application includes one or more views and a second set of one or more gesture recognizers. Respective gesture recognizers have corresponding gesture handlers. The processing unit is configured to enable display of a first set of one or more views. The first set of one or more views includes at least a subset of the one or more views of the second software application. The processing unit is configured to while displaying the first set of the one or more views detect a sequence of touch inputs on the touch sensitive display unit the sequence of touch inputs includes a first portion of one or more touch inputs and a second portion of one or more touch inputs subsequent to the first portion and determine whether at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs. The processing unit is configured to in accordance with a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs deliver the sequence of touch inputs to the first software application without delivering the sequence of touch inputs to the second software application and determine whether at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the sequence of touch inputs. The processing unit is configured to in accordance with a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the sequence of touch inputs process the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers that recognizes the sequence of touch inputs. The processing unit is configured to in accordance with a determination that no gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs deliver the sequence of touch inputs to the second software application determine whether at least one gesture recognizer in the second set of one or more gesture recognizers recognizes the sequence of touch inputs and in accordance with a determination that at least one gesture recognizer in the second set of one or more gesture recognizers recognizes the sequence of touch inputs process the sequence of touch inputs with the at least one gesture recognizer in the second set of one or more gesture recognizers that recognizes the sequence of touch inputs.

In accordance with some embodiments an electronic device includes a display unit configured to display one or more views a memory unit configured to store an internal state and a processing unit coupled to the display unit and the memory unit. The processing unit is configured to execute software that includes a view hierarchy with a plurality of views enable display of one or more views of the view hierarchy and execute one or more software elements. Each software element is associated with a particular view and each particular view includes one or more event recognizers. Each event recognizer has one or more event definitions based on one or more sub events and an event handler. The event handler specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to a particular event definition of the one or more event definitions. The processing unit is configured to detect a sequence of one or more sub events and identify one of the views of the view hierarchy as a hit view. The hit view establishes which views in the view hierarchy are actively involved views. The processing unit is configured to deliver a respective sub event to event recognizers for each actively involved view within the view hierarchy. At least one event recognizer for actively involved views in the view hierarchy has a plurality of event definitions one of which is selected in accordance with the internal state of the electronic device and the at least one event recognizer processes the respective sub event prior to processing a next sub event in the sequence of sub events in accordance with the selected event definition.

Electronic devices with small screens e.g. smart phones and tablets typically display a single application at a time even though multiple applications may be running on the device. Many of these devices have touch sensitive displays configured to receive gesture as touch inputs. With such devices a user may want to perform operations that are provided by a hidden application e.g. an application that is running in the background and is not currently displayed on the display of the electronic device such as an application launcher software application running in the background . Existing methods for performing operations provided by a hidden application typically require first displaying the hidden application and then providing touch inputs to the now displayed application. Therefore the existing methods require additional steps. Furthermore the user may not want to see the hidden application but yet still want to perform an operation provided by the hidden application. In the embodiments described below improved methods for interacting with a hidden application is achieved by delivering touch inputs to the hidden application and processing the touch inputs with the hidden application without displaying the hidden application. Thus these methods streamline the interaction with a hidden application thereby eliminating the need for extra separate steps to display the hidden application while providing the ability to control and interact with the hidden application based on a gesture input.

In addition in some embodiments such electronic devices have at least one gesture recognizer with a plurality of gesture definitions. This helps the gesture recognizer work in different distinct operating modes. For example a device may have a normal operating mode and an accessibility operating mode e.g. for people with limited vision . In the normal operating mode a next application gesture is used to move between applications and the next application gesture is defined as a three finger left swipe gesture. In the accessibility operating mode the three finger left swipe gesture is used to perform a different function. Thus a gesture different from the three finger left swipe is needed in the accessibility operating mode to correspond to the next application gesture e.g. a four finger left swipe gesture in the accessibility operating mode . By having multiple gesture definitions associated with the next application gesture the device can select one of the gesture definitions for the next application gesture depending on the current operating mode. This provides flexibility in using the gesture recognizer in different operating modes. In some embodiments a plurality of gesture recognizers with multiple gesture definitions is adjusted depending on the operating mode e.g. gestures performed with three fingers in the normal operating mode are performed with four fingers in the accessibility operating mode .

Below provide a description of exemplary devices. describe components for event handling and the operation e.g. flow of event information of such components. describe operations of event recognizers in more detail. are flow diagrams illustrating event recognition methods. are exemplary user interfaces illustrating operations using event recognition methods in . are flow diagrams illustrating an event recognition method of processing the event information with a gesture handler of a hidden open application. are flow diagrams illustrating an event recognition method of conditionally processing the event information with a gesture recognizer of a hidden open application or a displayed application. is a flow diagram illustrating an event recognition method of selecting an event definition of a plurality of event definitions for a single event recognizer.

Reference will now be made in detail to embodiments examples of which are illustrated in the accompanying drawings. In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures components circuits and networks have not been described in detail so as not to unnecessarily obscure aspects of the embodiments.

It will also be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first contact could be termed a second contact and similarly a second contact could be termed a first contact without departing from the scope of the present invention. The first contact and the second contact are both contacts but they are not the same contact.

The terminology used in the description of the invention herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used in the description of the invention and the appended claims the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will also be understood that the term and or as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

As used herein the term if may be construed to mean when or upon or in response to determining or in response to detecting depending on the context. Similarly the phrase if it is determined or if a stated condition or event is detected may be construed to mean upon determining or in response to determining or upon detecting the stated condition or event or in response to detecting the stated condition or event depending on the context.

As used herein the term event refers to an input detected by one or more sensors of the device. In particular the term event includes a touch on a touch sensitive surface. An event comprises one or more sub events. Sub events typically refer to changes to an event e.g. a touch down touch move and lift off of the touch can be sub events . Sub events in the sequence of one or more sub events can include many forms including without limitation key presses key press holds key press releases button presses button press holds button press releases joystick movements mouse movements mouse button presses mouse button releases pen stylus touches pen stylus movements pen stylus releases oral instructions detected eye movements biometric inputs and detected physiological changes in a user among others. Since an event may comprise a single sub event e.g. a short lateral motion of the device the term sub event as used herein also refers to an event.

As used herein the terms event recognizer and gesture recognizer are used interchangeably to refer to a recognizer that can recognize a gesture or other events e.g. motion of the device . As used herein the terms event handler and gesture handler are used interchangeably to refer to a handler that performs a predefined set of operations e.g. updating data updating object s and or updating display in response to recognition of an event sub event or a gesture.

As noted above in some devices with a touch sensitive surface as an input device a first set of touch based gestures e.g. two or more of tap double tap horizontal swipe vertical swipe are recognized as proper inputs in a particular context e.g. in a particular mode of a first application and other different sets of touch based gestures are recognized as proper inputs in other contexts e.g. different applications and or different modes or contexts within the first application . As a result the software and logic required for recognizing and responding to touch based gestures can become complex and can require revision each time an application is updated or a new application is added to the computing device. Embodiments described herein address these problems by providing a comprehensive framework for handling events and or gesture inputs.

In the embodiments described below touch based gestures are events. Upon recognition of a predefined event e.g. an event that corresponds to a proper input in the current context of an application information concerning the event is delivered to the application. Furthermore each respective event is defined as a sequence of sub events. In devices that have a multi touch display device often herein called screens or other multi touch sensitive surface and that accept multi touch based gestures the sub events that define a multi touched based event may include multi touch sub events requiring two or more fingers to be simultaneously in contact with the device s touch sensitive surface . For example in a device having a multi touch sensitive display a respective multi touch sequence of sub events may begin when a user s finger first touches the screen. Additional sub events may occur when one or more additional fingers subsequently or concurrently touch the screen and yet other sub events may occur when all of the fingers touching the screen move across the screen. The sequence ends when the last of the user s fingers is lifted from the screen.

When using touch based gestures to control an application running in a device having a touch sensitive surface touches have both temporal and spatial aspects. The temporal aspect called a phase indicates when a touch has just begun whether it is moving or stationary and when it ends that is when the finger is lifted from the screen. A spatial aspect of a touch is the set of views or user interface windows in which the touch occurs. The views or windows in which a touch is detected may correspond to programmatic levels within a programmatic or view hierarchy. For example the lowest level view in which a touch is detected may be called the hit view and the set of events that are recognized as proper inputs may be determined based at least in part on the hit view of the initial touch that begins a touch based gesture. Alternatively or additionally events are recognized as proper inputs based at least in part on one or more software programs i.e. software applications in the programmatic hierarchy. For example a five finger pinch gesture is recognized as a proper input in an application launcher that has a five finger pinch gesture recognizer but not in a web browser application that does not have the five finger pinch gesture recognizer.

In some embodiments electronic device includes a touch sensitive display . In these embodiments user interface may include an on screen keyboard not depicted that is used by a user to interact with electronic device . In some embodiments electronic device also includes one or more input devices e.g. keyboard mouse trackball microphone physical button s touchpad etc. . In some embodiments touch sensitive display has the ability to detect two or more distinct concurrent or partially concurrent touches and in these embodiments display is sometimes herein called a multitouch display or multitouch sensitive display. In some embodiments a keyboard of the one or more input devices may be separate and distinct from electronic device . For example a keyboard may be a wired or wireless keyboard coupled to electronic device .

In some embodiments electronic device includes display and one or more input devices e.g. keyboard mouse trackball microphone physical button s touchpad trackpad etc. that are coupled to electronic device . In these embodiments one or more of input devices may optionally be separate and distinct from electronic device . For example the one or more input devices may include one or more of a keyboard a mouse a trackpad a trackball and an electronic pen any of which may optionally be separate from the electronic device. Optionally device may include one or more sensors such as one or more accelerometers gyroscopes GPS systems speakers infrared IR sensors biometric sensors cameras etc. It is noted that the description above of various exemplary devices as input devices or as sensors is of no significance to the operation of the embodiments described herein and that any input or sensor device described herein as an input device may equally well be described as a sensor and vice versa. In some embodiments signals produced by one or more sensors are used as input sources for detecting events.

In some embodiments electronic device includes touch sensitive display i.e. a display having a touch sensitive surface and one or more input devices that are coupled to electronic device . In some embodiments touch sensitive display has the ability to detect two or more distinct concurrent or partially concurrent touches and in these embodiments display is sometimes herein called a multitouch display or multitouch sensitive display.

In some embodiments of electronic device discussed herein input devices are disposed in electronic device . In other embodiments one or more of input devices is separate and distinct from electronic device . For example one or more of input devices may be coupled to electronic device by a cable e.g. USB cable or wireless connection e.g. Bluetooth connection .

When using input devices or when performing a touch based gesture on touch sensitive display of electronic device the user generates a sequence of sub events that are processed by one or more CPUs of electronic device . In some embodiments one or more CPUs of the electronic device process the sequence of sub events to recognize events.

Electronic device typically includes one or more single or multi core processing units CPU or CPUs as well as one or more network or other communications interfaces . Electronic device includes memory and one or more communication buses for interconnecting these components. Communication buses may include circuitry sometimes called a chipset that interconnects and controls communications between system components not depicted herein . As discussed above electronic device includes user interfaces including a display e.g. display or touch sensitive display . Further electronic device typically includes input devices e.g. keyboard mouse touch sensitive surfaces keypads etc. . In some embodiments the input devices include an on screen input device e.g. a touch sensitive surface of a display device . Memory may include high speed random access memory such as DRAM SRAM DDR RAM or other random access solid state memory devices and may include non volatile memory such as one or more magnetic disk storage devices optical disk storage devices flash memory devices or other non volatile solid state storage devices. Memory may optionally include one or more storage devices remotely located from the CPU s . Memory or alternately the non volatile memory device s within memory comprise a computer readable storage medium. In some embodiments memory or the non volatile memory device s within memory comprises a non transitory computer readable storage medium. In some embodiments memory of electronic device or the computer readable storage medium of memory stores the following programs modules and data structures or a subset thereof 

As used in the specification and claims the term open application refers to a software application with retained state information e.g. as part of device global internal state and or application internal state . An open application is any one of the following types of applications 

As used herein the term closed application refers to software applications without retained state information e.g. state information for closed applications is not stored in a memory of the device . Accordingly closing an application includes stopping and or removing application processes for the application and removing state information for the application from the memory of the device. Generally opening a second application while in a first application does not close the first application. When the second application is displayed and the first application ceases to be displayed the first application which was an active application when displayed may become a background application suspended application or hibernated application but the first application remains an open application while its state information is retained by the device.

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices. Each of the above identified module application or system elements corresponds to a set of instructions for performing functions described herein. The set of instructions can be executed by one or more processors e.g. one or more CPUs . The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise rearranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

A driver or a set of drivers communicates with hardware . Drivers can receive and process input data received from hardware . Core Operating System OS can communicate with driver s . Core OS can process raw input data received from driver s . In some embodiments drivers can be considered to be a part of core OS .

A set of OS application programming interfaces OS APIs are software procedures that communicate with core OS . In some embodiments APIs are included in the device s operating system but at a level above core OS . APIs are designed for use by applications running on the electronic devices or apparatuses discussed herein. User interface UI APIs can utilize OS APIs . Application software applications running on the device can utilize UI APIs in order to communicate with the user. UI APIs can in turn communicate with lower level elements ultimately communicating with various user interface hardware e.g. multitouch display . In some embodiments application software includes applications in application software .

While each layer input output processing stack can utilize the layer underneath it that is not always required. For example in some embodiments applications may directly communicate with OS APIs . In general layers at or above OS API layer may not directly access Core OS driver s or hardware as these layers are considered private. Applications in layer and UI API usually direct calls to the OS API which in turn accesses the layers Core OS driver s and hardware .

Stated in another way one or more hardware elements of electronic device and software running on the device detect input events which may correspond to sub events in a gesture at one or more of the input device s and or a touch sensitive display and generate or update various data structures stored in memory of device used by a set of currently active event recognizers to determine whether and when the input events correspond to an event to be delivered to application . Embodiments of event recognition methodologies apparatus and computer program products are described in more detail below.

In this example each subordinate view includes lower level subordinate views. In other examples the number of view levels in the hierarchy may differ in different branches of the hierarchy with one or more subordinate views having lower level subordinate views and one or more other subordinate views not have any such lower level subordinate views. Continuing with the example shown in search results panel contains separate subordinate views subordinate to panel for each search result. Here this example shows one search result in a subordinate view called the maps view . Search field includes a subordinate view herein called clear contents icon view which clears the contents of the search field when a user performs a particular action e.g. a single touch or tap gesture on the clear contents icon in view . Home row includes subordinate views and which respectively correspond to a contacts application an email application a web browser and an iPod music interface.

A touch sub event is represented in outermost view . Given the location of touch sub event over both the search results panel and maps view the touch sub event is also represented over those views as and respectively. Actively involved views of the touch sub event include the views search results panel maps view and outermost view . Additional information regarding sub event delivery and actively involved views is provided below with reference to .

Views and corresponding programmatic levels can be nested. In other words a view can include other views. Consequently the software element s e.g. event recognizers associated with a first view can include or be linked to one or more software elements associated with views within the first view. While some views can be associated with applications others can be associated with high level OS elements such as graphical user interfaces window managers etc. In some embodiments some views are associated with other OS elements. In some embodiments the view hierarchy includes views from a plurality of software applications. For example the view hierarchy may include a view from an application launcher e.g. a home screen and a view from a web browser application e.g. a view including content of a web page .

A programmatic hierarchy includes one or more software elements or software applications in a hierarchy. To simplify subsequent discussion reference will generally be made only to views and the view hierarchy but it must be understood that in some embodiments the method may operate with a programmatic hierarchy with a plurality of programmatic layers and or a view hierarchy.

In some embodiments electronic device includes one or more of event recognizer global methods and . In some embodiments electronic device includes one or more of hit view determination module and hit level determination module . In some embodiments electronic device includes one or more of active event recognizer determination modules and . In some embodiments electronic device includes one or more of sub event delivery modules and . In some embodiments one or more of these methods and modules are included in fewer or more methods and modules. For example in some embodiments electronic device includes a hit view level determination module which includes the functionality of hit view determination module and hit level determination module . In some embodiments electronic device includes an active event recognizer determination module which includes the functionality of active event recognizer determination modules and .

Hit view and hit level determination modules and respectively provide software procedures for determining where a sub event has taken place within one or more views e.g. the exemplary view hierarchy depicted in which has three main branches and or one or more software elements in the programmatic hierarchy that correspond to the sub event e.g. one or more of applications in .

The hit view determination module of receives information related to a sub event e.g. a user touch represented as on the outermost view on a search result maps view and the search results panel view . The hit view determination module identifies a hit view as the lowest view in the hierarchy which should handle the sub event. In most circumstances the hit view is the lowest level view in which an initiating sub event i.e. the first sub event in the sequence of sub events that form an event or potential event occurs. In some embodiments once the hit view is identified it will receive all sub events related to the same touch or input source for which the hit view was identified. In some embodiments one or more other views e.g. a default or predefined view receive at least some of the sub events that the hit view receives.

In some embodiments the hit level determination module of may utilize an analogous process. For example in some embodiments the hit level determination module identifies a hit level as the lowest level in the programmatic hierarchy or a software application in the lowest programmatic level in the programmatic hierarchy which should handle the sub event. In some embodiments once the hit level is identified it or a software application in the hit level will receive all sub events related to the same touch or input source for which the hit level was identified. In some embodiments one or more other levels or software applications e.g. a default or predefined software application receive at least some of the sub events that the hit view receives.

Active event recognizer determination modules and of event recognizer global methods and respectively determine which view or views within a view hierarchy and or a programmatic hierarchy should receive a particular sequence of sub events. depicts an exemplary set of active views and that receive the sub event . In the example of the active event recognizer determination module would determine that the outermost view search results panel and maps view are actively involved views because these views include the physical location of the touch represented by sub event . It is noted that even if touch sub event were entirely confined to the area associated with maps view search results panel and outermost view would still remain in the actively involved views since the search results panel and outermost view are ancestors of maps view .

In some embodiments active event recognizer determination modules and utilize analogous processes. In the example of the active event recognizer determination module would determine that the map application is actively involved because the views of the map application are displayed and or the views of the map application include the physical location of the touch represented by sub event . It is noted that even if touch sub event were entirely confined to the area associated with the map application other applications in the programmatic hierarchy may still remain as actively involved applications or applications in the actively involved programmatic levels .

Sub event delivery module delivers sub events to event recognizers for actively involved views. Using the example of a user s touch is represented in different views of the hierarchy by touch marks and . In some embodiments sub event data representing this user s touch is delivered by the sub event delivery module to event recognizers at the actively involved views i.e. top level view search results panel and maps view . Further the event recognizers of a view can receive subsequent sub events of an event that starts within the view e.g. when an initial sub event occurs within the view . Stated in another way a view can receive sub events associated with user interactions beginning in the view even if it continues outside of the view.

In some embodiments sub event delivery module delivers sub events to event recognizers for actively involved programmatic levels in a process analogous to that used by sub event delivery module . For example sub event delivery module delivers sub events to event recognizers for actively involved applications. Using the example of a user s touch is delivered by sub event delivery module to event recognizers at the actively involved views e.g. the map application and any other actively involved applications in the programmatic hierarchy . In some embodiments a default or predefined software application is included in the programmatic hierarchy by default.

In some embodiments a separate event recognizer structure or is generated and stored in memory of the device for each actively involved event recognizer. Event recognizer structures and typically include an event recognizer state respectively discussed in greater detail below when referring to and event recognizer specific code respectively having state machines respectively. Event recognizer structure also includes a view hierarchy reference while event recognizer structure includes a programmatic hierarchy reference . Each instance of a particular event recognizer references exactly one view or programmatic level. View hierarchy reference or programmatic hierarchy reference for a particular event recognizer is used to establish which view or programmatic level is logically coupled to the respective event recognizer.

View metadata and level metadata may include data regarding a view or level respectively. View or level metadata may include at least the following properties that may influence sub event delivery to event recognizers 

Event recognizer structures and may include metadata respectively. In some embodiments the metadata includes configurable properties flags and lists that indicate how the event delivery system should perform sub event delivery to actively involved event recognizers. In some embodiments metadata may include configurable properties flags and lists that indicate how event recognizers may interact with one another. In some embodiments metadata may include configurable properties flags and lists that indicate whether sub events are delivered to varying levels in the view or programmatic hierarchy. In some embodiments the combination of event recognizer metadata and view or level metadata respectively are both be used to configure the event delivery system to a perform sub event delivery to actively involved event recognizers b indicate how event recognizers may interact with one another and c indicate whether and when sub events are delivered to various levels in the view or programmatic hierarchy.

It is noted that in some embodiments a respective event recognizer sends an event recognition action to its respective target as specified by fields of the event recognizer s structure . Sending an action to a target is distinct from sending and deferred sending sub events to a respective hit view or level.

The metadata properties stored in a respective event recognizer structure of a corresponding event recognizer includes one or more of 

When included in the event recognizer structure for a respective event recognizer this list indicates the set of event recognizers if any that must enter the event impossible or event canceled state before the respective event recognizer can recognize a respective event. In effect the listed event recognizers have higher priority for recognizing an event than the event recognizer with the wait for list .

In some embodiments the exception list can also be used by non exclusive event recognizers. In particular when a non exclusive event recognizer recognizes an event subsequent sub events are not delivered to the exclusive event recognizers associated with the currently active views except for those exclusive event recognizers listed in the exception list of the event recognizer that recognized the event.

In some embodiments event recognizers may be configured to utilize the touch cancellation flag in conjunction with the delay touch end flag to prevent unwanted sub events from being delivered to the hit view. For example the definition of a single tap gesture and the first half of a double tap gesture are identical. Once a single tap event recognizer successfully recognizes a single tap an undesired action could take place. If the delay touch end flag is set the single tap event recognizer is prevented from sending sub events to the hit view until a single tap event is recognized. In addition the wait for list of the single tap event recognizer may identify the double tap event recognizer thereby preventing the single tap event recognizer from recognizing a single tap until the double tap event recognizer has entered the event impossible state. The use of the wait for list avoids the execution of actions associated with a single tap when a double tap gesture is performed. Instead only actions associated with a double tap will be executed in response to recognition of the double tap event.

Turning in particular to forms of user touches on touch sensitive surfaces as noted above touches and user gestures may include an act that need not be instantaneous e.g. a touch can include an act of moving or holding a finger against a display for a period of time. A touch data structure however defines the state of a touch or more generally the state of any input source at a particular time. Therefore the values stored in a touch data structure may change over the course of a single touch enabling the state of the single touch at different points in time to be conveyed to an application.

Each touch data structure can comprise various fields. In some embodiments touch data structures may include data corresponding to at least the touch specific fields in or input source specific fields in .

For example a first touch for view field in for first touch for level in can indicate whether the touch data structure defines the first touch for the particular view since the software element implementing the view was instantiated . A time stamp field can indicate the particular time to which the touch data structure relates.

Optionally an info field can be used to indicate if a touch is a rudimentary gesture. For example the info field can indicate whether the touch is a swipe and if so in which direction the swipe is oriented. A swipe is a quick drag of one or more fingers in a straight direction. API implementations discussed below can determine if a touch is a swipe and pass that information to the application through the info field thus alleviating the application of some data processing that would have been necessary if the touch were a swipe.

Optionally a tap count field in event count field in can indicate how many taps have been sequentially performed at the position of the initial touch. A tap can be defined as a quick pressing and lifting of a finger against a touch sensitive panel at a particular position. Multiple sequential taps can occur if the finger is again pressed and released in quick succession at the same position of the panel. An event delivery system can count taps and relay this information to an application through the tap count field . Multiple taps at the same location are sometimes considered to be a useful and easy to remember command for touch enabled interfaces. Thus by counting taps the event delivery system can again alleviate some data processing from the application.

A phase field can indicate a particular phase the touch based gesture is currently in. The phase field can have various values such as touch phase began which can indicate that the touch data structure defines a new touch that has not been referenced by previous touch data structures. A touch phase moved value can indicate that the touch being defined has moved from a prior position. A touch phase stationary value can indicate that the touch has stayed in the same position. A touch phase ended value can indicate that the touch has ended e.g. the user has lifted his her finger from the surface of a multi touch display . A touch phase cancelled value can indicate that the touch has been cancelled by the device. A cancelled touch can be a touch that is not necessarily ended by a user but which the device has determined to ignore. For example the device can determine that the touch is being generated inadvertently i.e. as a result of placing a portable multi touch enabled device in one s pocket and ignore the touch for that reason. Each value of the phase field can be an integer number.

Thus each touch data structure can define what is happening with a respective touch or other input source at a particular time e.g. whether the touch is stationary being moved etc. as well as other information associated with the touch such as position . Accordingly each touch data structure can define the state of a particular touch at a particular moment in time. One or more touch data structures referencing the same time can be added in a touch event data structure that can define the states of all touches a particular view is receiving at a moment in time as noted above some touch data structures may also reference touches that have ended and are no longer being received . Multiple touch event data structures can be sent to the software implementing a view as time passes in order to provide the software with continuous information describing the touches that are happening in the view.

In some embodiments event recognizer global methods include event monitor hit view determination module active event recognizer determination module and event dispatcher module . In some embodiments event recognizer global methods are located within event delivery system . In some embodiments event recognizer global methods are implemented in operating system . Alternatively event recognizer global methods are implemented in a respective application . In yet other embodiments event recognizer global methods are implemented as a stand alone module or a part of another module stored in memory e.g. a contact motion module not depicted .

Event monitor receives event information from one or more sensors touch sensitive display and or one or more input devices . Event information includes information about an event e.g. a user touch on touch sensitive display as part of a multi touch gesture or a motion of device and or a sub event e.g. a movement of a touch across touch sensitive display . For example event information for a touch event includes one or more of a location and time stamp of a touch. Similarly event information for a swipe event includes two or more of a location time stamp direction and speed of a swipe. Sensors touch sensitive display and input devices transmit information event and sub event information to event monitor either directly or through a peripherals interface which retrieves and stores event information. Sensors include one or more of proximity sensor accelerometer s gyroscopes microphone and video camera. In some embodiments sensors also include input devices and or touch sensitive display .

In some embodiments event monitor sends requests to sensors and or the peripherals interface at predetermined intervals. In response sensors and or the peripherals interface transmit event information. In other embodiments sensors and the peripheral interface transmit event information only when there is a significant event e.g. receiving an input beyond a predetermined noise threshold and or for more than a predetermined duration .

Event monitor receives event information and relays the event information to event dispatcher module . In some embodiments event monitor determines one or more respective applications e.g. to which to deliver the event information. In some embodiments event monitor also determines one or more respective application views of the one or more respective applications to which to deliver the event information.

In some embodiments event recognizer global methods also include a hit view determination module and or an active event recognizer determination module .

Hit view determination module if present provides software procedures for determining where an event or a sub event has taken place within one or more views when touch sensitive display displays more than one view. Views are made up of controls and other elements that a user can see on the display.

Another aspect of the user interface associated with a respective application e.g. is a set of views sometimes herein called application views or user interface windows in which information is displayed and touch based gestures occur. The application views of a respective application in which a touch is detected may correspond to a particular view within a view hierarchy of the application. For example the lowest level view in which a touch is detected may be called the hit view and the set of events that are recognized as proper inputs may be determined based at least in part on the hit view of the initial touch that begins a touch based gesture.

Hit view determination module receives information related to events and or sub events. When an application has multiple views organized in a hierarchy hit view determination module identifies a hit view as the lowest view in the hierarchy which should handle the event or sub event. In most circumstances the hit view is the lowest level view in which an initiating event or sub event occurs i.e. the first event or sub event in the sequence of events and or sub events that form a gesture . Once the hit view is identified by the hit view determination module the hit view typically receives all events and or sub events related to the same touch or input source for which it was identified as the hit view. However the hit view is not always a sole view that receives all events and or sub events related to the same touch or input source for which it was identified as the hit view. Stated differently in some embodiments another application e.g. or another view of the same application also receives at least a subset of the events and or sub events related to the same touch or input source regardless of whether a hit view has been determined for the touch or input source.

Active event recognizer determination module determines which view or views within a view hierarchy should receive a particular sequence of events and or sub events. In some application contexts active event recognizer determination module determines that only the hit view should receive a particular sequence of events and or sub events. In other application contexts active event recognizer determination module determines that all views that include the physical location of an event or sub event are actively involved views and therefore determines that all actively involved views should receive a particular sequence of events and or sub events. In other application contexts even if touch events and or sub events are entirely confined to the area associated with one particular view views higher in the hierarchy still remain as actively involved views and thus the views higher in the hierarchy should receive a particular sequence of events and or sub events. Additionally or alternatively active event recognizer determination module determines which application s in a programmatic hierarchy should receive a particular sequence of events and or sub events. Thus in some embodiments active event recognizer determination module determines that only a respective application in the programmatic hierarchy should receive a particular sequence of events and or sub events. In some embodiments active event recognizer determination module determines that a plurality of applications in the programmatic hierarchy should receive a particular sequence of events and or sub events.

Event dispatcher module dispatches the event information to an event recognizer also called herein gesture recognizer e.g. event recognizer . In embodiments including active event recognizer determination module event dispatcher module delivers the event information to an event recognizer determined by active event recognizer determination module . In some embodiments event dispatcher module stores in an event queue the event information which is retrieved by a respective event recognizer or event receiver in a respective event recognizer .

In some embodiments a respective application e.g. includes application internal state which indicates the current application view s displayed on touch sensitive display when the application is active or executing. In some embodiments device global internal state is used by event recognizer global methods to determine which application s is are currently active and application internal state is used by event recognizer global methods to determine application views to which to deliver event information.

In some embodiments application internal state includes additional information such as one or more of resume information to be used when application resumes execution user interface state information that indicates information being displayed or that is ready for display by application a state queue for enabling the user to go back to a prior state or view of application and a redo undo queue of previous actions taken by the user. In some embodiments application internal state further includes contextual information text and metadata .

In some embodiments application includes one or more application views each of which has corresponding instructions for handling touch events that occur within a respective view of the application s user interface e.g. a corresponding event handler . At least one application view of the application includes one or more event recognizers . Typically a respective application view includes a plurality of event recognizers . In other embodiments one or more of event recognizers are part of a separate module such as a user interface kit not shown or a higher level object from which application inherits methods and other properties. In some embodiments a respective application view also includes one or more of data updater object updater GUI updater and or event data received.

A respective application e.g. also includes one or more event handlers . Typically a respective application e.g. includes a plurality of event handlers .

A respective event recognizer receives event information from event dispatcher module directly or indirectly through application and identifies an event from the event information. Event recognizer includes event receiver and event comparator .

The event information includes information about an event e.g. a touch or a sub event e.g. a touch movement . Depending on the event or sub event the event information also includes additional information such as location of the event or sub event. When the event or sub event concerns motion of a touch the event information may also include speed and direction of the sub event. In some embodiments events include rotation of the device from one orientation to another e.g. from a portrait orientation to a landscape orientation or vice versa and the event information includes corresponding information about the current orientation also called device attitude of the device.

Event comparator compares the event information to one or more predefined gesture definitions also called herein event definitions and based on the comparison determines an event or sub event or determines or updates the state of an event or sub event. In some embodiments event comparator includes one or more gesture definitions as described above also called herein event definitions . Gesture definitions contain definitions of gestures e.g. predefined sequences of events and or sub events for example gesture gesture and others. In some embodiments sub events in gesture definitions include for example touch begin touch end touch movement touch cancellation and multiple touching. In one example the definition for gesture is a double tap on a displayed object. The double tap for example comprises a first touch touch begin on the displayed object for a predetermined phase of the gesture a first lift off touch end for a next predetermined phase of the gesture a second touch touch begin on the displayed object for a subsequent predetermined phase of the gesture and a second lift off touch end for a final predetermined phase of the gesture. In another example the definition for gesture includes a dragging on a displayed object. The dragging for example comprises a touch or contact on the displayed object a movement of the touch across touch sensitive display and lift off of the touch touch end .

In some embodiments event recognizer also includes information for event delivery . Information for event delivery includes references to corresponding event handlers . Optionally information for event delivery includes action target pair s . In some embodiments in response to recognizing a gesture or a part of a gesture event information e.g. action message s is sent to one or more targets identified by the action target pair s . In other embodiments in response to recognizing a gesture or a part of a gesture the action target pair s are activated.

In some embodiments gesture definitions include a definition of a gesture for a respective user interface object. In some embodiments event comparator performs a hit test to determine which user interface object is associated with a sub event. For example in an application view in which three user interface objects are displayed on touch sensitive display when a touch is detected on touch sensitive display event comparator performs a hit test to determine which of the three user interface objects if any is associated with the touch event . If each displayed object is associated with a respective event handler event comparator uses the result of the hit test to determine which event handler should be activated. For example event comparator selects an event handler associated with the event and the object triggering the hit test.

In some embodiments a respective gesture definition for a respective gesture also includes delayed actions that delay delivery of the event information until after it has been determined whether the sequence of events and or sub events does or does not correspond to the event recognizer s event type.

When a respective event recognizer determines that the series of events and or sub events do not match any of the events in gesture definitions the respective event recognizer enters an event failed state after which the respective event recognizer disregards subsequent events and or sub events of the touch based gesture. In this situation other event recognizers if any that remain active for the hit view continue to track and process events and or sub events of an ongoing touch based gesture.

In some embodiments when no event recognizer for the hit view remains the event information is sent to one or more event recognizers in a higher view in the view hierarchy. Alternatively when no event recognizer for the hit view remains the event information is disregarded. In some embodiments when no event recognizer for views in the view hierarchy remains the event information is sent to one or more event recognizers in a higher programmatic level in the programmatic hierarchy. Alternatively when no event recognizer for views in the view hierarchy remains the event information is disregarded.

In some embodiments a respective event recognizer includes event recognizer state . Event recognizer state includes a state of the respective event recognizer . Examples of event recognizer states are described in more detail below with reference to .

In some embodiments event recognizer state includes recognizer metadata and properties . In some embodiments recognizer metadata and properties include one or more of the following A configurable properties flags and or lists that indicate how the event delivery system should perform event and or sub event delivery to actively involved event recognizers B configurable properties flags and or lists that indicate how event recognizers interact with one another C configurable properties flags and or lists that indicate how event recognizers receive event information D configurable properties flags and or lists that indicate how event recognizers may recognize a gesture E configurable properties flags and or lists that indicate whether events and or sub events are delivered to varying levels in the view hierarchy and F references to corresponding event handlers .

In some embodiments event recognizer state includes event touch metadata . Event touch metadata includes event touch information about a respective event touch that has been detected and corresponds to a respective gesture definition of gesture definitions . The event touch information includes one or more of a location time stamp speed direction distance scale or change in scale and angle or change in angle of the respective event touch.

In some embodiments a respective event recognizer activates event handler associated with the respective event recognizer when one or more particular events and or sub events of a gesture are recognized. In some embodiments respective event recognizer delivers event information associated with the event to event handler .

Event handler when activated performs one or more of creating and or updating data creating and updating objects and preparing display information and sending it for display on display or touch sensitive display .

In some embodiments a respective application view includes view metadata . As described above with respect to view metadata includes data regarding a view. Optionally view metadata includes one or more of stop property skip property NoHit skip property and other view metadata .

In some embodiments a first actively involved view within the view hierarchy may be configured to prevent delivery of a respective sub event to event recognizers associated with that first actively involved view. This behavior can implement the skip property . When the skip property is set for an application view delivery of the respective sub event is still performed for event recognizers associated with other actively involved views in the view hierarchy.

Alternately a first actively involved view within the view hierarchy may be configured to prevent delivery of a respective sub event to event recognizers associated with that first actively involved view unless the first actively involved view is the hit view. This behavior can implement the conditional NoHit skip property .

In some embodiments a second actively involved view within the view hierarchy is configured to prevent delivery of the respective sub event to event recognizers associated with the second actively involved view and to event recognizers associated with ancestors of the second actively involved view. This behavior can implement the stop property .

A software application e.g. application has one or more event recognizers . In some embodiments a respective event recognizer e.g. is an event recognizer class. The respective event recognizer e.g. includes event recognizer specific code e.g. a set of instructions defining the operation of event recognizers and state machine .

In some embodiments application state of a software application e.g. application includes instances of event recognizers. Each instance of an event recognizer is an object having a state e.g. event recognizer state . Execution of a respective event recognizer instance is implemented by executing corresponding event recognizer specific code e.g. and updating or maintaining the state of the event recognizer instance . The state of event recognizer instance includes the state of the event recognizer instance s state machine .

In some embodiments application state includes a plurality of event recognizer instances . A respective event recognizer instance typically corresponds to an event recognizer that has been bound also called attached to a view of the application. In some embodiments one or more event recognizer instances are bound to a respective application in a programmatic hierarchy without reference to any particular view of the respective application. In some embodiments application state includes a plurality of instances e.g. to L of a respective event recognizer e.g. . In some embodiments application state includes instances of a plurality of event recognizers e.g. to R .

In some embodiments a respective instance of a gesture recognizer includes event recognizer state . As discussed above in some embodiments event recognizer state includes recognizer metadata and properties and event touch metadata . In some embodiments event recognizer state also includes view hierarchy reference s indicating to which view the respective instance of the gesture recognizer is attached.

In some embodiments recognizer metadata and properties include the following or a subset or superset thereof 

In some embodiments one or more event recognizers may be adapted to delay delivering one or more sub events of the sequence of sub events until after the event recognizer recognizes the event. This behavior reflects a delayed event. For example consider a single tap gesture in a view for which multiple tap gestures are possible. In that case a tap event becomes a tap delay recognizer. In essence when an event recognizer implements this behavior the event recognizer will delay event recognition until it is certain that the sequence of sub events does in fact correspond to its event definition. This behavior may be appropriate when a recipient view is incapable of appropriately responding to cancelled events. In some embodiments an event recognizer will delay updating its event recognition status to its respective actively involved view until the event recognizer is certain that the sequence of sub events does not correspond to its event definition. Delay touch began flag delay touch end flag and touch cancellation flag are provided to tailor sub event delivery techniques as well as event recognizer and view status information updates to specific needs.

In some embodiments recognizer metadata and properties include the following or a subset or superset thereof 

In some embodiments exception list can also be used by non exclusive event recognizers. In particular when a non exclusive event recognizer recognizes an event or sub event subsequent events and or sub events are not delivered to the exclusive event recognizers associated with the currently active views except for those exclusive event recognizers listed in exception list of the event recognizer that recognized the event or sub event.

In some embodiments event recognizers may be configured to utilize the touch cancellation flag in conjunction with the delay touch end flag to prevent unwanted events and or sub events from being delivered to the hit view. For example the definition of a single tap gesture and the first half of a double tap gesture are identical. Once a single tap event recognizer successfully recognizes a single tap an undesired action could take place. If the delay touch end flag is set the single tap event recognizer is prevented from sending sub events to the hit view until a single tap event is recognized. In addition the wait for list of the single tap event recognizer may identify the double tap event recognizer thereby preventing the single tap event recognizer from recognizing a single tap until the double tap event recognizer has entered the event impossible state. The use of the wait for list avoids the execution of actions associated with a single tap when a double tap gesture is performed. Instead only actions associated with a double tap will be executed in response to recognition of the double tap event.

Turning in particular to forms of user touches on touch sensitive surfaces as noted above touches and user gestures may include an act that need not be instantaneous e.g. a touch can include an act of moving or holding a finger against a display for a period of time. A touch data structure however defines the state of a touch or more generally the state of any input source at a particular time. Therefore the values stored in a touch data structure may change over the course of a single touch enabling the state of the single touch at different points in time to be conveyed to an application.

Each touch data structure can comprise various entries. In some embodiments touch data structures may include data corresponding to at least the touch specific entries in event touch metadata such as the following or a subset or superset thereof 

Thus each touch data structure can define what is happening with a respective touch or other input source at a particular time e.g. whether the touch is stationary being moved etc. as well as other information associated with the touch such as position . Accordingly each touch data structure can define the state of a particular touch at a particular moment in time. One or more touch data structures referencing the same time can be added in a touch event data structure that can define the states of all touches a particular view is receiving at a moment in time as noted above some touch data structures may also reference touches that have ended and are no longer being received . Multiple touch event data structures can be sent to the software implementing a view as time passes in order to provide the software with continuous information describing the touches that are happening in the view.

The ability to handle complex touch based gestures optionally including multi touch gestures can add complexity to the various software applications. In some cases such additional complexity can be necessary to implement advanced and desirable interface features. For example a game may require the ability to handle multiple simultaneous touches that occur in different views as games often require the pressing of multiple buttons at the same time or combining accelerometer data with touches on a touch sensitive surface. However some simpler applications and or views need not require advanced interface features. For example a simple soft button i.e. a button that is displayed on a touch sensitive display may operate satisfactorily with single touches rather than multi touch functionality. In these cases the underlying OS may send unnecessary or excessive touch data e.g. multi touch data to a software component associated with a view that is intended to be operable by single touches only e.g. a single touch or tap on a soft button . Because the software component may need to process this data it may need to feature all the complexity of a software application that handles multiple touches even though it is associated with a view for which only single touches are relevant. This can increase the cost of development of software for the device because software components that have been traditionally easy to program in a mouse interface environment i.e. various buttons etc. may be much more complex in a multi touch environment.

In order to reduce the complexity in recognizing complex touch based gestures delegates can be used to control the behavior of event recognizers in accordance with some embodiments. As described below delegates can determine for example whether a corresponding event recognizer or gesture recognizer can receive the event e.g. touch information whether the corresponding event recognizer or gesture recognizer can transition from an initial state e.g. event possible state of state machine to another state and or whether the corresponding event recognizer or gesture recognizer can simultaneously recognize the event e.g. touch as a corresponding gesture without blocking other event recognizer s or gesture recognizer s from recognizing the event or getting blocked by other event recognizer s or gesture recognizer s recognizing the event.

It shall be understood however that the foregoing discussion regarding the complexity of evaluating and processing user touches on touch sensitive surfaces also applies to all forms of user inputs to operate electronic device with input devices not all of which are initiated on touch screens e.g. coordinating mouse movement and mouse button presses with or without single or multiple keyboard presses or holds device rotations or other movements user movements such as taps drags scrolls etc. on touch pads pen stylus inputs oral instructions detected eye movements biometric inputs detected physiological change in a user and or any combination thereof which may be utilized as inputs corresponding to events and or sub events which define an event to be recognized.

Turning to the flow of event information is a block diagram illustrating the flow of event information in accordance with some embodiments. Event dispatcher module e.g. in operating system or application software receives event information and sends the event information to one or more applications e.g. and . In some embodiments application includes a plurality of views e.g. and corresponding to views in view hierarchy and a plurality of gesture recognizers through in the plurality of views. Application also includes one or more gesture handlers which correspond to the target values in target action pairs e.g. and . In some embodiments event dispatcher module receives hit view information from hit view determination module and sends event information to the hit view e.g. or event recognizer s attached to the hit view e.g. and . Additionally or alternatively event dispatcher module receives hit level information from hit level determination module and sends event information to applications in the hit level e.g. and or one or more event recognizers e.g. in the hit level applications. In some embodiments one of the applications receiving the event information is a default application e.g. may be a default application . In some embodiments only a subset of gesture recognizers in each receiving application is allowed to or configured to receive the event information. For example gesture recognizer in application does not receive the event information. The gesture recognizers that receive the event information are called herein receiving gesture recognizers. In receiving gesture recognizers and receive the event information and compare the received event information with a respective gesture definition in the receiving gesture recognizers. In gesture recognizers and have respective gesture definitions that match the received event information and send respective action messages e.g. and to corresponding gesture handlers e.g. and .

In some embodiments regardless of event type the event recognizer state machine begins in an event recognition begins state and may progress to any of the remaining states depending on what sub event is received. To facilitate discussion of the event recognizer state machine the direct paths from the event recognition begins state to the event recognized state the event possible state and event impossible state will be discussed followed by a description of the paths leading from the event possible state .

Starting from event recognition begins state if a sub event is received that by itself comprises the event definition for an event the event recognizer state machine will transition to event recognized state .

Starting from state event recognition begins if a sub event is received that is not the first sub event in an event definition the event recognizer state machine will transition to event impossible state .

Starting from event recognition begins state if a sub event is received that is the first and not final sub event in a given event definition the event recognizer state machine will transition to event possible state . If the next sub event received is a second sub event but not the final sub event in the given event definition the event recognizer state machine will remain in state event possible . The event recognizer state machine can remain in state event possible for as long as the sequence of received sub events continues to be part of the event definition. If at any time the event recognizer state machine is in event possible state and the event recognizer state machine receives a sub event that is not part of the event definition it will transition to state event impossible thereby determining that the current event if any is not the type of event that corresponds to this event recognizer i.e. the event recognizer corresponding to state . If on the other hand the event recognizer state machine is in the event possible state and the event recognizer state machine receives the last sub event in an event definition it will transition to the event recognized state thereby completing a successful event recognition.

Starting from input sequence begin if an input is received that by itself completes an input sequence input source handling process will transition to input sequence ended .

Starting from input sequence begin if an input is received that indicates the input sequence terminated input source handling process will transition to input sequence cancelled .

Starting from input sequence begin if an input is received that is the first and not final input in a input sequence input source handling process will transition to state input sequence continues . If the next input received is the second input in an input sequence the input handling process will remain in state input sequence continues . Input source handling process can remain in state input sequence continues for as long as the sequence of sub events being delivered continue to be part of a given input sequence. If at any time input source handling process is in state input sequence continues and input source handling process receives an input that is not part of the input sequence it will transition to state input sequence cancelled . If on the other hand input source handling process is in input sequence continues and the input handling process receives the last input in a given input definition it will transition to the input sequence ended thereby successfully receiving a group of sub events.

In some embodiments input source handling process may be implemented for particular views or programmatic levels. In that case certain sequences of sub events may result in transitioning to state input cancelled .

As an example consider which supposes an actively involved view represented only by actively involved view input source handler hereafter view . View includes a vertical swipe event recognizer represented only by vertical swipe event recognizer hereafter recognizer as one of its event recognizers. In this case the recognizer may require as part of its definition detecting 1 a finger down 2 an optional short delay 3 vertical swiping of at least N pixels and 4 a finger liftoff .

For this example the recognizer also has its delay touch began flag and touch cancellation flag set. Now consider delivery of the following sequence of sub events to recognizer as well as the view 

Here recognizer would successfully recognize sub events and as part of its event definition and accordingly would be in state event possible immediately prior to the delivery of sub event . Since recognizer has its delay touch began flag set the initial touch sub event is not sent to the hit view. Correspondingly the view s input source handling process would still be in state input sequence begin immediately prior to the delivery of sub event .

Once delivery of sub event to recognizer is complete recognizer s state transitions to event impossible and importantly the recognizer has now determined that the sequence of sub events does not correspond to its specific vertical swipe gesture event type i.e. it has decided the event is not a vertical swipe. In other words recognition as a vertical swipe does not occur in this example. . The input source handling system for view input source handler will also update its state. In some embodiments the state of the view input source handler would proceed from the input sequence begins state to the input sequence continues state when the event recognizer sends status information indicating that it has begun recognizing an event. The view input source handler proceeds to the input sequence cancelled state when the touch or input ends without an event being recognized because the touch cancellation flag of the event recognizer has been set. Alternately if the touch cancellation flag of the event recognizer had not been set the view input source handler proceeds to the input sequence ended state when the touch of input ends.

Since event recognizer s touch cancellation flag is set when the event recognizer transitions to the event impossible state the recognizer will send a touch cancellation sub event or message to the hit view corresponding to the event recognizer. As a result the view input source handler will transition to the state input sequence cancelled .

In some embodiments delivery of sub event is not germane to any event recognition decisions made by recognizer though view input source handler s other event recognizers if any may continue to analyze the sequence of sub events.

The following table presents in summarized tabular format the processing of this exemplary sub event sequence as related to the state of event recognizer described above along with the state of view input source handler . In this example the state of the view input source handler proceeds from input sequence begin to input sequence cancelled because recognizer s touch cancellation flag was set 

Turning to attention is directed to an example of a sub event sequence which is being received by a view that includes a plurality of event recognizers. For this example two event recognizers are depicted in scrolling event recognizer and tap event recognizer . For purposes of illustration the view search results panel in will be related to the reception of the sub event sequence and the state transitions in scrolling event recognizer and tap event recognizer . Note that in this example the sequence of sub events defines a tap finger gesture on a touch sensitive display or trackpad but the same event recognition technique could be applied in a myriad of contexts e.g. detecting a mouse button press and or in embodiments utilizing programmatic hierarchies of programmatic levels.

Before the first sub event is delivered to view search results panel event recognizers and are in the event recognition begins states and respectively. Following touch which is delivered as sub event detect finger down to actively involved event recognizers for view search results panel as touch sub event as well as to actively involved event recognizers for map view as touch sub event scrolling event recognizer transitions to state event possible and similarly tap event recognizer transitions to state event possible . This is because the event definition of a tap and a scroll both begin with a touch such as detecting a finger down on a touch sensitive surface.

Some definitions of tap and scroll gestures may optionally include a delay between an initial touch and any next step in the event definition. In all examples discussed here the exemplar event definitions for both tap and scroll gestures recognize a delay sub event following the first touch sub event detect finger down .

Accordingly as sub event measure delay is delivered to event recognizers and both remain in the event possible states and respectively.

Finally sub event detect finger liftoff is delivered to event recognizers and . In this case the state transitions for event recognizers and are different because the event definitions for tap and scroll are different. In the case of scrolling event recognizer the next sub event to remain in state event possible would be to detect movement. Since the sub event delivered is detect finger liftoff however the scrolling event recognizer transitions to state event impossible . A tap event definition concludes with a finger liftoff sub event though. Accordingly tap event recognizer transitions to state event recognized after sub event detect finger liftoff is delivered.

Note that in some embodiments as discussed above with respect to the input source handling process discussed in may be used for various purposes at the view level. The following table presents in summarized tabular format the delivery of sub event sequence as related to event recognizers and input source handling process 

Turning to attention is directed to another example of a sub event sequence which is being received by a view that includes a plurality of event recognizers. For this example two event recognizers are depicted in scrolling event recognizer and tap event recognizer . For purposes of illustration the view search results panel in will be related to the reception of the sub event sequence and the state transitions in scrolling event recognizer and tap event recognizer . Note that in this example the sequence of sub events defines a scroll finger gesture on a touch sensitive display but the same event recognition technique could be applied in myriad contexts e.g. detecting a mouse button press mouse movement and mouse button release and or in embodiments utilizing programmatic hierarchies of programmatic levels.

Before the first sub event is delivered to actively involved event recognizers for view search results panel event recognizers and are in the event recognition begins states and respectively. Following delivery of sub events corresponding to touch as discussed above scrolling event recognizer transitions to state event possible and similarly tap event recognizer transitions to state event possible .

As sub event measure delay is delivered to event recognizers and both transition to the event possible states and respectively.

Next sub event detect finger movement is delivered to event recognizers and . In this case the state transitions for event recognizers and are different because the event definitions for tap and scroll are different. In the case of scrolling event recognizer the next sub event to remain in state event possible is to detect movement so the scrolling event recognizer remains in the event possible state when it receives sub event detect finger movement . As discussed above however the definition for a tap concludes with a finger liftoff sub event so tap event recognizer transitions to the state event impossible .

Finally sub event detect finger liftoff is delivered to event recognizers and . Tap event recognizer is already in the event impossible state and no state transition occurs. Scrolling event recognizer s event definition concludes with detecting a finger liftoff. Since the sub event delivered is detect finger liftoff the scrolling event recognizer transitions to state event recognized . It is noted that a finger movement on a touch sensitive surface may generate multiple movement sub events and therefore a scroll may be recognized before liftoff and continue until liftoff.

The following table presents in summarized tabular format the delivery of sub event sequence as related to event recognizers and input source handling process 

Turning to attention is directed to another example of a sub event sequence which is being received by a view that includes a plurality of event recognizers. For this example two event recognizers are depicted in double tap event recognizer and tap event recognizer . For purposes of illustration the map view in will be related to the reception of the sub event sequence and the state transitions in double tap event recognizer and tap event recognizer . Note that in this example the sequence of sub events defines a double tap gesture on a touch sensitive display but the same event recognition technique could be applied in myriad contexts e.g. detecting a mouse double click and or in embodiments utilizing programmatic hierarchies of programmatic levels.

Before the first sub event is delivered to actively involved event recognizers for map view event recognizers and are in the event recognition begins states and respectively. Following delivery of sub events related to touch sub event to map view as described above double tap event recognizer and tap event recognizer transition to states event possible and respectively. This is because the event definition of a tap and a double tap both begin with a touch such as detecting a finger down on a touch sensitive surface.

As sub event measure delay is delivered to event recognizers and both remain in states event possible and respectively.

Next sub event detect finger liftoff is delivered to event recognizers and . In this case the state transitions for event recognizers and are different because the exemplar event definitions for tap and double tap are different. In the case of tap event recognizer the final sub event in the event definition is to detect finger liftoff so the tap event recognizer transitions to the event recognized state .

Double tap recognizer remains in state event possible however since a delay has begun regardless of what the user may ultimately do. The complete event recognition definition for a double tap requires another delay followed by a complete tap sub event sequence though. This creates an ambiguous situation as between the tap event recognizer which is already in state event recognized and the double tap recognizer which is still in state event possible .

Accordingly in some embodiments event recognizers may implement exclusivity flags and exclusivity exception lists as discussed above with respect to . Here the exclusivity flag for tap event recognizer would be set and additionally exclusivity exception list for tap event recognizer would be configured to continue permitting delivery of sub events to some event recognizers such as double tap event recognizer after tap event recognizer enters the state event recognized .

While tap event recognizer remains in state event recognized sub event sequence continues to be delivered to double tap event recognizer where sub events measure delay detect finger down and measure delay keep the double tap event recognizer in the state event possible delivery of the final sub event of sequence detect finger liftoff transitions double tap event recognizer to state event recognized .

At this point the map view takes the event double tap as recognized by event recognizer rather than the single tap event recognized by tap event recognizer . The decision to take the double tap event is made in light of the combination of the tap event recognizer s exclusivity flag being set the tap event recognizer s exclusivity exception list including a double tap event and the fact that both the tap event recognizer and the double tap event recognizer both successfully recognized their respective event types.

The following table presents in summarized tabular format the delivery of sub event sequence as related to event recognizers and and sub event handling process 

In another embodiment in the event scenario of the single tap gesture is not recognized because the single tap event recognizer has a wait for list that identifies the double tap event recognizer. As a result a single tap gesture is not recognized until if ever the double tap event recognizer enters the event impossible state. In this example in which a double tap gesture is recognized the single tap event recognizer would remain in the event possible state until the double tap gesture is recognized at which point the single tap event recognizer would transition to the event impossible state.

Attention is now directed to which are flow diagrams illustrating an event recognition method in accordance with some embodiments. The method is performed at an electronic device which in some embodiments may be an electronic device as discussed above. In some embodiments the electronic device may include a touch sensitive surface configured to detect multi touch gestures. Alternatively the electronic device may include a touch screen configured to detect multi touch gestures.

The method is configured to execute software that includes a view hierarchy with a plurality of views. The method displays one or more views of the view hierarchy and executes one or more software elements. Each software element is associated with a particular view and each particular view includes one or more event recognizers such as those described in as event recognizer structures and respectively.

Each event recognizer generally includes an event definition based on one or more sub events where the event definition may be implemented as a state machine see e.g. state machine . Event recognizers also generally include an event handler which specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to the event definition.

In some embodiments at least one of the plurality of event recognizers is a gesture recognizer having a gesture definition and a gesture handler as noted in step of .

Alternatively event recognizers have a set of event recognition states . These event recognition states may include at least an event possible state an event impossible state and an event recognized state.

In some embodiments the event handler initiates preparation of its corresponding action for delivery to the target if the event recognizer enters the event possible state. As discussed above with respect to and the examples in the state machines implemented for each event recognizer generally include an initial state e.g. state event recognition begins . Receiving a sub event that forms the initial part of an event definition triggers a state change to the event possible state . Accordingly in some embodiments as an event recognizer transitions from the state event recognition begins to the state event possible the event recognizer s event handler may begin preparing its particular action to deliver to the event recognizer s target after an event is successfully recognized.

On the other hand in some embodiments the event handler may terminate preparation of its corresponding action if the event recognizer enters the state event impossible . In some embodiments terminating the corresponding action includes canceling any preparation of the event handler s corresponding action.

The example of is informative for this embodiment since tap event recognizer may have initiated preparation of its action but then once the sub event detect finger movement is delivered to the tap event recognizer the recognizer will transition to the event impossible state . At that point tap event recognizer may terminate preparation of the action for which it had initiated preparation .

In some embodiments the event handler completes preparation of its corresponding action for delivery to the target if the event recognizer enters the event recognized state. The example of illustrates this embodiment since a double tap is recognized by actively involved event recognizers for the map view which in some implementations would be the event bound to selecting and or executing the search result depicted by map view . Here after the double tap event recognizer successfully recognizes the double tap event comprised of the sub event sequence map view s event handler completes preparation of its action namely indicating that it has received an activation command.

In some embodiments the event handler delivers its corresponding action to the target associated with the event recognizer. Continuing with the example of the action prepared i.e. the activation command of the map view would be delivered to the specific target associated with the map view which may be any suitable programmatic method or object.

Alternatively the plurality of event recognizers may independently process the sequence of one or more sub events in parallel.

In some embodiments one or more event recognizers may be configured as exclusive event recognizers as discussed above with respect to s exclusivity flags and respectively. When an event recognizer is configured as an exclusive event recognizer the event delivery system prevents any other event recognizers for actively involved views except those listed in the exception list of the event recognizer that recognizes the event in the view hierarchy from receiving subsequent sub events of the same sequence of sub events after the exclusive event recognizer recognizes an event. Furthermore when a non exclusive event recognizer recognizes an event the event delivery system prevents any exclusive event recognizers for actively involved views in the view hierarchy from receiving subsequent sub events except for those if any listed in the exception list of the event recognizer that recognizes the event.

In some embodiments exclusive event recognizers may include an event exception list as discussed above with respect to s exclusivity exception lists and respectively. As noted in the discussion of above an event recognizer s exclusivity exception list can be used to permit event recognizers to continue with event recognition even when the sequence of sub events making up their respective event definitions overlap. Accordingly in some embodiments the event exception list includes events whose corresponding event definitions have repetitive sub events such as the single tap double tap event example of .

In some embodiments one or more event recognizers may be adapted to delay delivering every sub event of the sequence of sub events until after the event is recognized.

The method detects a sequence of one or more sub events and in some embodiments the sequence of one or more sub events may include primitive touch events . Primitive touch events may include without limitation basic components of a touch based gesture on a touch sensitive surface such as data related to an initial finger or stylus touch down data related to initiation of multi finger or stylus movement across a touch sensitive surface dual finger movements in opposing directions stylus lift off from a touch sensitive surface etc.

Sub events in the sequence of one or more sub events can include many forms including without limitation key presses key press holds key press releases button presses button press holds button press releases joystick movements mouse movements mouse button presses mouse button releases pen stylus touches pen stylus movements pen stylus releases oral instructions detected eye movements biometric inputs and detected physiological changes in a user among others.

The method identifies one of the views of the view hierarchy as a hit view. The hit view establishes which views in the view hierarchy are actively involved views. An example is depicted in where the actively involved views include search results panel and maps view because touch sub event contacted the area associated with the maps view .

In some embodiments a first actively involved view within the view hierarchy may be configured to prevent delivery of the respective sub event to event recognizers associated with that first actively involved view. This behavior can implement the skip property discussed above with respect to and respectively . When the skip property is set for an event recognizer delivery of the respective sub event is still performed for event recognizers associated with other actively involved views in the view hierarchy.

Alternately a first actively involved view within the view hierarchy may be configured to prevent delivery of the respective sub event to event recognizers associated with that first actively involved view unless the first actively involved view is the hit view. This behavior can implement the conditional skip property discussed above with respect to and respectively .

In some embodiments a second actively involved view within the view hierarchy is configured to prevent delivery of the respective sub event to event recognizers associated with the second actively involved view and to event recognizers associated with ancestors of the second actively involved view. This behavior can implement the stop property discussed above with respect to and respectively .

The method delivers a respective sub event to event recognizers for each actively involved view within the view hierarchy. In some embodiments event recognizers for actively involved views in the view hierarchy process the respective sub event prior to processing a next sub event in the sequence of sub events. Alternately event recognizers for the actively involved views in the view hierarchy make their sub event recognition decisions while processing the respective sub event.

In some embodiments event recognizers for actively involved views in the view hierarchy may process the sequence of one or more sub events concurrently alternatively event recognizers for actively involved views in the view hierarchy may process the sequence of one or more sub events in parallel.

In some embodiments one or more event recognizers may be adapted to delay delivering one or more sub events of the sequence of sub events until after the event recognizer recognizes the event. This behavior reflects a delayed event. For example consider a single tap gesture in a view for which multiple tap gestures are possible. In that case a tap event becomes a tap delay recognizer. In essence when an event recognizer implements this behavior the event recognizer will delay event recognition until it is certain that the sequence of sub events does in fact correspond to its event definition. This behavior may be appropriate when a recipient view is incapable of appropriately responding to cancelled events. In some embodiments an event recognizer will delay updating its event recognition status to its respective actively involved view until the event recognizer is certain that the sequence of sub events does not correspond to its event definition. As discussed above with respect to delay touch began flag delay touch end flag and touch cancellation flag are provided to tailor sub event delivery techniques as well as event recognizer and view status information updates to specific needs.

Although many of the examples which follow will be given with reference to inputs on touch screen display where the touch sensitive surface and the display are combined in some embodiments the device detects inputs on a touch sensitive surface that is separate from the display e.g. a touchpad or trackpad . In some embodiments the touch sensitive surface has a primary axis that corresponds to a primary axis on the display. In accordance with these embodiments the device detects contacts with the touch sensitive surface at locations that correspond to respective locations on the display. In this way user inputs detected by the device on the touch sensitive surface are used by the device to manipulate the user interface on the display of the electronic device when the touch sensitive surface is separate from the display. It should be understood that similar methods may be used for other user interfaces described herein.

The exemplary user interface includes a plurality of application icons e.g. through . From the home screen a finger gesture can be used to launch an application. For example tap finger gesture at a location that corresponds to application icon initiates launching an email application.

In in response to detecting the finger gesture on application icon the email application is launched and email application view is displayed on touch screen . A user may launch other applications in a similar manner. For example a user may press home button from any application view to return to home screen and launch other applications with finger gestures on respective application icons on home screen .

In a first predefined input e.g. a double click on home button is detected. Alternatively a multi finger swipe gesture e.g. a three finger swipe up gesture as illustrated with movements of finger contacts and is detected on touch screen .

In a gesture of a first type e.g. a multi finger left swipe gesture including movements of finger contacts and is detected on web browser application view . illustrates that in response to detecting the gesture of the first type weather application view is displayed on touch screen . It should be noted that the weather application is next to the web browser application in the sequence of open applications.

Referring to a multi finger gesture e.g. a five finger pinch gesture including movements of finger contacts and is detected on web browser application view . illustrates that while detecting the multi finger gesture on touch screen web browser application view and at least a portion of home screen are concurrently displayed. As illustrated web browser application view is displayed at a reduced scale. The reduced scale is adjusted in accordance with the multi finger gesture while the multi finger gesture is detected on the touch screen . For example the reduced scale decreases with further pinching of finger contacts and i.e. web browser application view is displayed at a smaller scale . Alternatively the reduced scale increases with depinching of finger contacts and i.e. web browser application view is displayed at a larger scale than before .

In some embodiments when the multi finger gesture ceases to be detected web browser application view ceases to be displayed and the entire home screen is displayed. Alternatively when the multi finger gesture ceases to be detected it is determined whether the entire home screen is to be displayed or web browser application view is to be displayed at a full screen scale. In some embodiments the determination is made based on the reduced scale when the multi finger gesture ceases to be displayed e.g. if the application view is displayed at a scale smaller than a predefined threshold when the multi finger gesture ceases to be detected the entire home screen is displayed if the application view is displayed at a scale larger than the predefined threshold when the multi finger gesture ceases to be detected the application view is displayed at a full screen scale without a display of home screen . In some embodiments the determination is made also based on the speed of the multi finger gesture.

Method allows a user to control with a gesture a hidden open application that is not currently displayed on a display of the electronic device e.g. the first software application such as a background application a suspended application or a hibernated application. Thus the user can perform operations that are not provided by the application currently displayed on the display of the electronic device e.g. the second software application but are provided by one of the currently open applications e.g. displaying a home screen or switching to a next software application using gestures for a hidden application launcher software application .

In some embodiments the first software application is an application launcher e.g. a springboard . For example as shown in the application launcher displays a plurality of application icons that correspond to a plurality of applications. The application launcher receives a user selection of an application icon e.g. based on a finger gesture on touch screen and in response to receiving the user selection launches an application corresponding to the selected application icon .

The second software application is typically a software application launched by the application launcher. As illustrated in the application launcher receives information about tap gesture on email application icon and launches an email application. In response the email application displays email application view on touch screen . The second application may be any application that corresponds to application icons or any other application that can be launched by the application launcher e.g. media store application notes application map application weather application F web browser application etc. . In the following description of method an application launcher is used as an exemplary first software application and a web browser application is used as an exemplary second software application.

In some embodiments the electronic device has only two software applications in the programmatic hierarchy an application launcher and one other software application typically a software application corresponding to one or more views displayed on touch screen of electronic device .

In some embodiments the first software application is an operating system application. As used herein an operating system application refers to an application that is integrated with an operating system . An operating system application typically resides in core OS level or operating system API software in . An operating system application is typically not removable by a user whereas other applications typically may be installed or removed by the user. In some embodiments the operating system application includes the application launcher. In some embodiments the operating system application includes a settings application e.g. an application for displaying modifying system settings or one or more values in device global internal state . In some embodiments the operating system application includes accessibility module . In some embodiments the electronic device has only three software applications in the programmatic hierarchy an application launcher a settings application and one other application typically a software application corresponding to one or more views displayed on touch screen of electronic device .

The electronic device displays at least a subset of the one or more views of the second software application e.g. web browser application view .

In some embodiments the displaying includes displaying at least a subset of the one or more views of the second software application without displaying any view of the first software application. For example in no view of the application launcher e.g. home screen is displayed.

In some embodiments the displaying includes displaying at least a subset of the one or more views of the second software application without displaying a view of any other application. For example in only one or more views of the web browser application are displayed.

While displaying at least the subset of the one or more views of the second software application the electronic device detects a sequence of touch inputs on the touch sensitive display e.g. gesture which includes a touch down event and a touch up event or another gesture which includes touch down of finger contacts and movements of finger contacts and across touch screen and lift off of finger contacts and . The sequence of touch inputs includes a first portion of one or more touch inputs and a second portion of one or more touch inputs subsequent to the first portion. As used herein the term sequence refers to the order in which one or more touch events happens. For example in the sequence of touch inputs including finger contacts and the first portion may include the touch down of finger contacts and and the second portion may include the movements of finger contacts and and lift off of finger contacts and .

In some embodiments the detecting occurs while touch inputs in the first portion of one or more touch inputs at least partially overlap at least one of the displayed views of the second software application. In some embodiments even though the touch inputs at least partially overlap at least one of the displayed views of the second software application the first software application receives the first portion of one or more touch inputs. For example the application launcher receives the first portion of touch inputs on the displayed views of the web browser even though the application launcher is not displayed.

During a first phase of detecting the sequence of touch inputs the electronic device delivers the first portion of one or more touch inputs to the first software application and the second software application e.g. using event dispatcher module identifies from gesture recognizers in the first set one or more matching gesture recognizers that recognize the first portion of one or more touch inputs e.g. using event comparator in each gesture recognizer typically each receiving gesture recognizer in the first set and processes the first portion of one or more touch inputs with one or more gesture handlers corresponding to the one or more matching gesture recognizers e.g. activating corresponding event handler s .

In some embodiments the first phase of detecting the sequence of touch inputs is a phase of detecting the first portion of one or more touch inputs.

Regarding the delivering operation in some embodiments the first software application after receiving the first portion of one or more inputs delivers the first portion of one or more touch inputs to at least a subset of gesture recognizers in the first set and the second software application after receiving the first portion of one or more inputs delivers the first portion of one or more touch inputs to at least a subset of gesture recognizers in the second set. In some embodiments the electronic device or an event dispatcher module e.g. in the electronic device delivers the first portion of one or more touch inputs to at least a subset of gesture recognizers in the first set and the second set e.g. event dispatcher module delivers the first portion of one or more touch inputs to gesture recognizers and .

For example when the finger gesture including finger contacts and is detected on touch screen the touch down event is delivered to one or more gesture recognizers of the application launcher and one or more gesture recognizers of the web browser application. In another example a touch down event of tap gesture is delivered to one or more gesture recognizers of the application launcher and one or more gesture recognizers of the web browser application.

In some embodiments when no gesture recognizer in the first set recognizes the first portion of one or more touch inputs e.g. a mismatch between detected events and the gesture definition or the gesture is not completed processing the first portion of one or more touch inputs includes performing a null operation e.g. the device does not update the displayed user interface .

In some embodiments the electronic device identifies from gesture recognizers in the second set one or more matching gesture recognizers that recognizer the first portion of one or more touch inputs. The electronic device processes the first portion of one or more touch inputs with one or more gesture handlers corresponding to the one or more matching gesture recognizers. For example in response to tap gesture delivered to one or more gesture recognizers of the web browser application a matching gesture recognizer in the web browser application e.g. a gesture recognizer that recognizes a tap gesture on the bookmark icon processes tap gesture by displaying a list of bookmarks on touch screen .

In some embodiments during a second phase of detecting the sequence of touch inputs subsequent to the first phase the electronic device delivers the second portion of one or more touch inputs to the first software application without delivering the second portion of one or more touch inputs to the second software application e.g. using event dispatcher module identifies from the one or more matching gesture recognizers a second matching gesture recognizer that recognizes the sequence of touch inputs e.g. using event comparator in each matching gesture recognizer and processes the sequence of touch inputs with a gesture handler corresponding to the respective matching gesture recognizer. In some embodiments the second phase of detecting the sequence of touch inputs is a phase of detecting the second portion of one or more touch inputs.

For example when the finger gesture including finger contacts and is detected on touch screen the touch movement and lift off events are delivered to one or more gesture recognizers of the application launcher without delivering the touch events to the web browser application. The electronic device identifies a matching gesture recognizer e.g. a three finger swipe up gesture recognizer of the application launcher and processes the sequence of touch inputs with a gesture handler corresponding to the three finger swipe up gesture recognizer.

The second software application does not receive the second portion of one or more touch inputs during the second phase typically because the first software application has a priority over the second software application e.g. in the programmatic hierarchy . Thus in some embodiments when a gesture recognizer in the first software application recognizes the first portion of one or more touch inputs the one or more gesture recognizers in the first software application exclusively receive the second subsequent portion of one or more touch inputs. In addition the second software application may not receive the second portion of one or more touch inputs during the second phase because no gesture recognizer in the second software application matches the first portion of one or more touch inputs.

In some embodiments processing the sequence of touch inputs with the gesture handler corresponding to the respective matching gesture recognizer includes displaying in a first predefined area of the touch sensitive display a group of open application icons that correspond to at least some of a plurality of concurrently open applications and concurrently displaying at least a subset of the one or more views of the second software application. For example in application icons in predefined area corresponds to concurrently open applications of the electronic device. In some embodiments application icons in predefined area are displayed in accordance with a sequence of open applications. In the electronic device concurrently displays predefined area and a subset of web browser application view .

In some embodiments processing the sequence of touch inputs with the gesture handler corresponding to the respective matching gesture recognizer includes displaying one or more views of the first software application. For example in response to a multi finger pinch gesture the electronic device displays home screen . In some embodiments displaying the one or more views of the first software application includes displaying the one or more views of the first software application without concurrently displaying a view corresponding to any other software application e.g. .

In some embodiments processing the sequence of touch inputs with the gesture handler corresponding to the respective matching gesture recognizer includes replacing the display of the one or more views of the second software application with display of one or more views of the first software application e.g. displaying home screen . Thus the one or more views of the second software application ceases to be displayed after the one or more views of the first software application are displayed. In some embodiments replacing the display of the one or more views of the second software application with display of one or more views of the first software application includes displaying the one or more views of the first software application without concurrently displaying a view corresponding to any other software application .

In some embodiments the electronic device concurrently executes the first software application the second software application and a third software application. In some embodiments processing the sequence of touch inputs with the gesture handler corresponding to the respective matching gesture recognizer includes replacing the one or more displayed views of the second software application with one or more views of the third software application. For example in response to a multi finger swipe gesture the electronic device replaces the display of web browser application view with a display of weather application view . In some embodiments replacing the one or more displayed views of the second software application with one or more views of the third software application includes displaying the one or more views of the third software application without concurrently displaying a view corresponding to any other software application. In some embodiments the third software application is next to the second software application in the sequence of open applications.

In some embodiments processing the sequence of touch inputs with the gesture handler corresponding to the respective matching gesture recognizer includes launching a settings application. For example in response to a ten finger tap gesture the electronic device launches the settings application.

Note that details of the processes described above with respect to method are also applicable in an analogous manner to method described below. For brevity these details are not repeated below.

Method allows a user to control with a gesture a hidden open application that is not currently displayed on a display of the electronic device e.g. the first software application such as a background application a suspended application or a hibernated application Thus the user can perform operations that are not provided by the application currently displayed on the display of the electronic device e.g. the second software application but are provided by one of the currently open applications e.g. displaying a home screen or switching to a next software application using gestures for a hidden application launcher software application .

In some embodiments the first software application is an application launcher e.g. a springboard . In some embodiments the first software application is an operating system application. In the following description of method an application launcher is used as an exemplary first software application and a web browser application is used as an exemplary second software application.

The electronic device displays a first set of one or more views e.g. web browser application view . The first set of one or more views includes at least a subset of the one or more views of the second software application. For example the second software application may have a plurality of application views e.g. application views of application and the electronic device displays at least one view of the plurality of application views. In some embodiments the subset includes the entire one or more views of the second software application.

In some embodiments displaying the first set of one or more views includes displaying the first set of one or more views without displaying any view of the first software application e.g. web browser application view .

In some embodiments displaying the first set of one or more views includes displaying the first set of one or more views without displaying a view of any other software application. For example in only one or more views of the web browser application are displayed.

While displaying the first set of the one or more views the electronic device detects a sequence of touch inputs on the touch sensitive display and determines whether at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs. For example while displaying web browser application view the device determines whether gesture recognizers for the application launcher recognizes the first portion of the touch inputs. The sequence of touch inputs includes a first portion of one or more touch inputs and a second portion of one or more touch inputs subsequent to the first portion i.e. the second portion is after the first portion .

In some embodiments the sequence of touch inputs at least partially overlaps at least one of the one or more displayed views of the second software application. For example the application launcher receives the first portion of touch inputs on web browser application view even though the application launcher is not displayed.

In some embodiments prior to a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs the electronic device concurrently delivers the first portion of one or more touch inputs to the first software application and the second software application. For example both the application launcher and the web browser application receive the touch down event of finger contacts and prior to a determination that at least one gesture recognizer in the application launcher recognizes the touch down event.

In accordance with a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs the electronic device delivers the sequence of touch inputs to the first software application without delivering the sequence of touch inputs to the second software application determines whether at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the sequence of touch inputs and in accordance with a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the sequence of touch inputs processes the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers that recognizes the sequence of touch inputs.

For example when the touch down and touch movement of three finger contacts and are detected on touch screen the electronic device identifies that at least a three finger swipe up gesture recognizer of the application launcher recognizes the touch inputs. Thereafter the electronic device delivers subsequent touch events e.g. lift off of finger contact and to the application launcher without delivering the subsequent touch events to the web browser application. The electronic device further identifies that the three finger swipe up gesture recognizer recognizes the sequence of touch inputs and processes the sequence of touch inputs with a gesture handler corresponding to the three finger swipe up gesture recognizer.

In some embodiments processing the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers includes displaying one or more views of the first software application. For example in response to detecting a multi finger pinch gesture the electronic device displays home screen .

In some embodiments processing the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers includes replacing the display of the first set of one or more views with display of one or more views of the first software application e.g. displaying home screen which is part of the application launcher software application .

In some embodiments the electronic device concurrently executes the first software application the second software application and a third software application and processing the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers includes replacing the first set of one or more views with one or more views of the third software application. In some embodiments replacing the first set of one or more views with one or more views of the third software application includes displaying the one or more views of the third software application without concurrently displaying a view corresponding to any other software application. For example in response to a multi finger swipe gesture the electronic device replaces the display of web browser application view with a display of weather application view .

In some embodiments processing the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers includes displaying in a first predefined area of the touch sensitive display a group of open application icons that correspond to at least some of a plurality of concurrently open applications and concurrently displaying at least a subset of the first set of one or more views. For example in application icons in predefined area corresponds to concurrently open applications of the electronic device. In some embodiments application icons in predefined area are displayed in accordance with a sequence of open applications. In the electronic device concurrently displays predefined area and a subset of web browser application view .

In accordance with a determination that no gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs the electronic device delivers the sequence of touch inputs to the second software application determines whether at least one gesture recognizer in the second set of one or more gesture recognizers recognizes the sequence of touch inputs and in accordance with a determination that at least one gesture recognizer in the second set of one or more gesture recognizers recognizes the sequence of touch inputs processes the sequence of touch inputs with the at least one gesture recognizer in the second set of one or more gesture recognizers that recognizes the sequence of touch inputs.

For example when the first portion of one or more touch inputs is tap gesture e.g. and no gesture recognizer in the application launcher recognizes the tap gesture the electronic device delivers the tap gesture to the web browser application and determines whether at least one gesture recognizer of the web browser application recognizes the tap gesture. When the web browser application or a gesture recognizer of the web browser application recognizes tap gesture on the bookmark icon the electronic device processes tap gesture with a corresponding gesture handler.

Method is performed at an electronic device with an internal state e.g. device global internal state . The electronic device is configured to execute software that includes a view hierarchy with a plurality of views.

In method at least one gesture recognizer has a plurality of gesture definitions. This helps the gesture recognizer work in different distinct operating modes. For example a device may have a normal operating mode and an accessibility operating mode. In the normal operating mode a next application gesture is used to move between applications and the next application gesture is defined as a three finger left swipe gesture. In the accessibility operating mode the three finger left swipe gesture is used to perform a different function. Thus a gesture different from the three finger left swipe is needed in the accessibility operating mode to correspond to the next application gesture e.g. a four finger left swipe gesture in the accessibility operating mode . By having multiple gesture definitions associated with the next application gesture the device can select one of the gesture definitions for the next application gesture depending on the current operating mode. This provides flexibility in using the gesture recognizer in different operating modes. In some embodiments a plurality of gesture recognizers with multiple gesture definitions is adjusted depending on the operating mode e.g. gestures performed with three fingers in the normal operating mode are performed with four fingers in the accessibility operating mode .

In some embodiments the internal state includes one or more settings for an accessibility operating mode e.g. the internal state indicates whether the device is operating in the accessibility operating mode .

In some embodiments the software is or includes an operating system application e.g. an application integrated with an operating system of the device .

The electronic device executes one or more software elements. Each software element is associated with a particular view e.g. application has one or more application views and each particular view includes one or more event recognizers e.g. event recognizers . Each event recognizer has one or more event definitions based on one or more sub events and an event handler e.g. gesture definitions and a reference to a corresponding event handler in event delivery information . The event handler specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to a particular event definition of the one or more event definitions e.g. an event definition selected from the one or more event definitions when the event recognizer has multiple event definitions or a sole event definition when the event recognizer has only one event definition .

The electronic device identifies one of the views of the view hierarchy as a hit view. The hit view establishes which views in the view hierarchy are actively involved views.

The electronic device delivers a respective sub event to event recognizers for each actively involved view within the view hierarchy. In some embodiments the one or more actively involved views in the view hierarchy include the hit view. In some embodiments the one or more actively involved views in the view hierarchy include a default view e.g. home screen of the application launcher .

At least one event recognizer for actively involved views in the view hierarchy has a plurality of event definitions one of which is selected in accordance with the internal state of the electronic device. For example event recognizer has a plurality of gesture definitions e.g. and . In some embodiments event recognizer selects one of the plurality of gesture definitions in event recognizer based on one or more values in device global internal state . The at least one event recognizer then processes the respective sub event prior to processing a next sub event in the sequence of sub events in accordance with the selected event definition. In some embodiments each of two or more event recognizers for actively involved views in the view hierarchy has a plurality of event definitions one of which is selected in accordance with the internal state of the electronic device. In such embodiments at least one of the two or more event recognizers processes the respective sub event prior to processing the next sub event in the sequence of sub events in accordance with the selected event definition.

For example illustrate a next application gesture that initiates displaying an application view of a next application. In some embodiments the application launcher includes a next application gesture recognizer which includes a gesture definition that matches a three finger left swipe gesture. For purposes of this example assume that the next application gesture recognizer also includes a gesture definition that corresponds to a four finger left swipe gesture. When one or more values in device global internal state are set to default value s the next application gesture recognizer uses the three finger left swipe gesture definition and does not use the four finger left swipe gesture definition. When the one or more values in device global internal state are modified e.g. by using accessibility module the next application gesture recognizer uses the four finger left swipe gesture definition and does not use the three finger left swipe gesture definition. Thus in this example when the one or more values in device global internal state are modified a four finger left swipe gesture initiates displaying an application view of a next application.

Similarly illustrate that a home screen gesture initiates displaying web browser application view at a reduced scale and displaying at least a portion of home screen in response to detecting a five finger pinch gesture. Based on device global internal state and gesture definitions in a home screen gesture recognizer a four finger pinch gesture a three finger pinch gesture or any other suitable gesture may be used to initiate displaying web browser application view at a reduced scale and displaying at least a portion of home screen .

In some embodiments the plurality of event definitions includes a first event definition corresponding to a first swipe gesture with a first number of fingers and a second event definition corresponding to a second swipe gesture with a second number of fingers distinct from the first number of fingers. For example the plurality of event definitions for a respective gesture recognizer may include a three finger swipe gesture and a four finger swipe gesture.

In some embodiments the plurality of event definitions includes a first event definition corresponding a first gesture of a first kind with a first number of fingers and a second event definition corresponding to a second gesture of the first kind with a second number of fingers distinct from the first number of fingers e.g. a one finger tap gesture and a two finger tap gesture a two finger pinch gesture and a three finger pinch gesture etc. .

In some embodiments the plurality of event definitions includes a first event definition corresponding to a first gesture and a second event definition corresponding to a second gesture distinct from the first gesture e.g. a swipe gesture and a pinch gesture a swipe gesture and a tap gesture etc. .

In some embodiments a respective definition of the plurality of event definitions is selected for a respective event recognizer in accordance with the internal state of the electronic device and a determination by the electronic device that the respective event definition does not correspond to an event definition of any event recognizer for the actively involved views other than the respective event recognizer.

For example a respective gesture recognizer may have two event definitions a first event definition corresponding to a three finger left swipe gesture that is typically used for a normal operating mode and a second event definition corresponding to a four finger left swipe gesture that is typically used for an accessibility operating mode. When the internal state of the electronic device is set in a way such that the electronic device operates in the accessibility mode the electronic device determines whether the four finger left swipe gesture for the second event definition is used by any other event recognizer for the actively involved views. If the four finger left swipe gesture is not used by any other event recognizer for the actively involved views the four finger left swipe gesture is selected for the respective gesture recognizer in the accessibility operating mode. On the other hand if the four finger left swipe gesture is used by any other event recognizer for the actively involved views the three finger left swipe gesture is used for the respective gesture recognizer even in the accessibility operating mode. This prevents two or more gesture recognizers from undesirably responding to a same gesture.

In some embodiments a respective definition of the plurality of event definitions is selected for a respective event recognizer in accordance with the internal state of the electronic device and a determination by the electronic device that the respective event definition does not correspond to an event definition of any event recognizer including event recognizers for the actively involved views and any other views other than the respective event recognizer.

In some embodiments two or more event recognizers for actively involved views in the view hierarchy each have a respective plurality of event definitions and a respective event definition of the respective plurality of event definitions is selected for a respective event recognizer in accordance with the internal state of the electronic device and a determination by the electronic device that the respective event definition does not correspond to any event definition selected for any event recognizer with two or more event definitions other than the respective event recognizer.

For example actively involved views may have a first gesture recognizer and a second gesture recognizer. In this example the first gesture recognizer has a first event definition corresponding to a three finger left swipe gesture that is typically used for a normal operating mode and a second event definition corresponding to a four finger left swipe gesture that is typically used for an accessibility operating mode. The second gesture recognizer has a third event definition corresponding to a two finger left swipe gesture that is typically used for the normal operating mode and a fourth event definition corresponding to the four finger left swipe gesture that is typically used for the accessibility operating mode. When the internal state of the electronic device is set in a way such that the electronic device operates in the accessibility mode the electronic device determines whether a four finger left swipe gesture that satisfies the second event definition is selected for any other event recognizer with two or more event definitions e.g. the second event gesture recognizer . If the four finger left swipe gesture is not selected for any other event recognizer with two or more event definitions the four finger left swipe gesture is selected for the first gesture recognizer in the accessibility operating mode. As a result the four finger left swipe gesture is not selected for the second gesture recognizer because the four finger left swipe gesture is already selected for the first gesture recognizer. Instead the two finger left swipe gesture is selected for the second gesture recognizer because the two finger left swipe gesture is not selected for any other gesture recognizer with two or more event definitions including the first gesture recognizer. In another example the actively involved views have the first gesture recognizer and a third gesture recognizer without the second gesture recognizer. The third gesture recognizer has the third event definition corresponding to the two finger left swipe gesture that is typically used for the normal operating mode and a fifth event definition corresponding to a three finger left swipe gesture that is typically used for the accessibility operating mode. In the accessibility operating mode the three finger left swipe gesture can be selected for the third gesture recognizer because the three finger left swipe gesture is not selected for any other gesture recognizer with two or more event definitions.

Although the examples above have been described with respect to multi finger left swipe gestures the methods described above apply to swipe gestures in any direction e.g. a swipe right gesture swipe up gesture swipe down gesture and or any diagonal swipe gesture or gestures of any other kinds e.g. tap gestures pinch gestures depinch gestures etc. .

In some embodiments processing the respective sub event in accordance with the selected event definition includes displaying one or more views of a first software application distinct from the software that includes the view hierarchy e.g. concurrently displaying at least a portion of user interface including one or more views of the software and a portion of home screen .

In some embodiments the at least one event recognizer processes the respective sub event by replacing the display of the one or more views of the view hierarchy with display of one or more views of a first software application e.g. home screen distinct from the software that includes the view hierarchy.

In some embodiments the at least one event recognizer processes the respective sub event by displaying in a first predefined area of a display in the electronic device a group of open application icons that correspond to at least some of a plurality of concurrently open applications and concurrently displaying at least a subset of the one or more views of the view hierarchy e.g. open application icons and at least a portion of user interface . For example the electronic device concurrently displays the group of open application icons and at least a subset of the one or more views of the view hierarchy in response to a three finger swipe up gesture in the normal operating mode and a four finger swipe up gesture in the accessibility operating mode.

In accordance with some embodiments shows a functional block diagram of an electronic device configured in accordance with the principles of the invention as described above. The functional blocks of the device may be implemented by hardware software or a combination of hardware and software to carry out the principles of the invention. It is understood by persons of skill in the art that the functional blocks described in may be combined or separated into sub blocks to implement the principles of the invention as described above. Therefore the description herein may support any possible combination or separation or further definition of the functional blocks described herein.

As shown in an electronic device includes a touch sensitive display unit configured to receive touch inputs and a processing unit coupled to the touch sensitive display unit . In some embodiments the processing unit includes an executing unit a display enabling unit a detecting unit a delivering unit an identifying unit and a touch input processing unit .

The processing unit is configured to execute at least a first software application and a second software application e.g. with the executing unit . The first software application includes a first set of one or more gesture recognizers and the second software application includes one or more views and a second set of one or more gesture recognizers. Respective gesture recognizers have corresponding gesture handlers. The processing unit is configured to enable display of at least a subset of the one or more views of the second software application e.g. with the display enabling unit on the touch sensitive display unit . The processing unit is configured to while displaying at least the subset of the one or more views of the second software application detect a sequence of touch inputs on the touch sensitive display unit e.g. with the detecting unit . The sequence of touch inputs includes a first portion of one or more touch inputs and a second portion of one or more touch inputs subsequent to the first portion. The processing unit is configured to during a first phase of detecting the sequence of touch inputs deliver the first portion of one or more touch inputs to the first software application and the second software application e.g. with the delivering unit identify from gesture recognizers in the first set one or more matching gesture recognizers that recognize the first portion of one or more touch inputs e.g. with the identifying unit and process the first portion of one or more touch inputs with one or more gesture handlers corresponding to the one or more matching gesture recognizers e.g. with the touch input processing unit .

In some embodiments the processing unit is configured to detect the sequence of touch inputs e.g. with the detecting unit while touch inputs in the first portion of one or more touch inputs at least partially overlap at least one of the displayed views of the second software application.

In some embodiments the processing unit is configured to enable display of at least a subset of the one or more views of the second software application without displaying any view of the first software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to enable display of at least a subset of the one or more views of the second software application without displaying a view of any other application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to during a second phase of detecting the sequence of touch inputs subsequent to the first phase deliver the second portion of one or more touch inputs to the first software application without delivering the second portion of one or more touch inputs to the second software application e.g. with the delivering unit identify from the one or more matching gesture recognizers a second matching gesture recognizer that recognizes the sequence of touch inputs e.g. with the identifying unit and process the sequence of touch inputs with a gesture handler corresponding to the respective matching gesture recognizer e.g. with the touch input processing unit .

In some embodiments the processing unit is configured to process the sequence of touch inputs with the gesture handler corresponding to the respective matching gesture recognizer by enabling display of one or more views of the first software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to process the sequence of touch inputs with the gesture handler corresponding to the respective matching gesture recognizer by replacing the display of the one or more views of the second software application with display of one or more views of the first software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to concurrently execute the first software application the second software application and a third software application e.g. with the executing unit and process the sequence of touch inputs with the gesture handler corresponding to the respective matching gesture recognizer by replacing the one or more displayed views of the second software application with one or more views of the third software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to enable display of in a first predefined area of the touch sensitive display unit a group of open application icons that correspond to at least some of a plurality of concurrently open applications e.g. with the display enabling unit and enable concurrent display of at least a subset of the one or more views of the second software application e.g. with the display enabling unit .

In accordance with some embodiments shows a functional block diagram of an electronic device configured in accordance with the principles of the invention as described above. The functional blocks of the device may be implemented by hardware software or a combination of hardware and software to carry out the principles of the invention. It is understood by persons of skill in the art that the functional blocks described in may be combined or separated into sub blocks to implement the principles of the invention as described above. Therefore the description herein may support any possible combination or separation or further definition of the functional blocks described herein.

As shown in an electronic device includes a touch sensitive display unit configured to receive touch inputs and a processing unit coupled to the touch sensitive display unit . In some embodiments the processing unit includes an executing unit a display enabling unit a detecting unit a determining unit a delivering unit and a touch input processing unit .

The processing unit is configured to execute at least a first software application and a second software application e.g. with the executing unit . The first software application includes a first set of one or more gesture recognizers and the second software application includes one or more views and a second set of one or more gesture recognizers. Respective gesture recognizers have corresponding gesture handlers. The processing unit is configured to enable display of a first set of one or more views e.g. with the display enabling unit . The first set of one or more views include at least a subset of the one or more views of the second software application. The processing unit is configured to while displaying the first set of the one or more views detect a sequence of touch inputs on the touch sensitive display unit e.g. with the detecting unit . The sequence of touch inputs includes a first portion of one or more touch inputs and a second portion of one or more touch inputs subsequent to the first portion. The processing unit is configured to determine whether at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs e.g. with the determining unit . The processing unit is configured to in accordance with a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs deliver the sequence of touch inputs to the first software application without delivering the sequence of touch inputs to the second software application e.g. with the delivering unit determine whether at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the sequence of touch inputs e.g. with the determining unit . The processing unit is configured to in accordance with a determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the sequence of touch inputs process the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers that recognizes the sequence of touch inputs e.g. with the touch input processing unit . The processing unit is configured to in accordance with a determination that no gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs deliver the sequence of touch inputs to the second software application e.g. with the delivering unit and determine whether at least one gesture recognizer in the second set of one or more gesture recognizers recognizes the sequence of touch inputs e.g. with the determining unit . The processing unit is configured to in accordance with a determination that at least one gesture recognizer in the second set of one or more gesture recognizers recognizes the sequence of touch inputs process the sequence of touch inputs with the at least one gesture recognizer in the second set of one or more gesture recognizers that recognizes the sequence of touch inputs e.g. with the touch input processing unit .

In some embodiments the sequence of touch inputs at least partially overlaps at least one of the one or more displayed views of the second software application.

In some embodiments the processing unit is configured to enable display of the first set of one or more views without displaying any view of the first software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to enable display of the first set of one or more views without displaying a view of any other software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments prior to the determination that at least one gesture recognizer in the first set of one or more gesture recognizers recognizes the first portion of one or more touch inputs the processing unit is configured to concurrently deliver the first portion of one or more touch inputs to the first software application and the second software application e.g. with the delivering unit .

In some embodiments the processing unit is configured to process the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers by enabling displaying one or more views of the first software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to process the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers by replacing the display of the first set of one or more views with display of one or more views of the first software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to concurrently execute the first software application the second software application and a third software application e.g. with the executing unit . The processing unit is configured to process the sequence of touch inputs with the at least one gesture recognizer in the first set of one or more gesture recognizers by replacing the first set of one or more views with one or more views of the third software application e.g. with the display enabling unit on the touch sensitive display unit .

In some embodiments the processing unit is configured to enable display of in a first predefined area of the touch sensitive display unit a group of open application icons that correspond to at least some of a plurality of concurrently open applications e.g. with the display enabling unit and concurrently display at least a subset of the first set of one or more views e.g. with the display enabling unit .

In accordance with some embodiments shows a functional block diagram of an electronic device configured in accordance with the principles of the invention as described above. The functional blocks of the device may be implemented by hardware software or a combination of hardware and software to carry out the principles of the invention. It is understood by persons of skill in the art that the functional blocks described in may be combined or separated into sub blocks to implement the principles of the invention as described above. Therefore the description herein may support any possible combination or separation or further definition of the functional blocks described herein.

As shown in an electronic device includes a display unit configured to display one or more views a memory unit configured to store an internal state and a processing unit coupled to the display unit and the memory unit . In some embodiments the processing unit includes an executing unit a display enabling unit a detecting unit an identifying unit a delivering unit and an event sub event processing unit . In some embodiments the processing unit includes the memory unit .

The processing unit is configured to execute software that includes a view hierarchy with a plurality of views e.g. with the executing unit enable display of one or more views of the view hierarchy e.g. with the display enabling unit on the display unit and execute one or more software elements e.g. with the executing unit . Each software element is associated with a particular view and each particular view includes one or more event recognizers. Each event recognizer has one or more event definitions based on one or more sub events and an event handler. The event handler specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to a particular event definition of the one or more event definitions. The processing unit is configured to detect a sequence of one or more sub events e.g. with the detecting unit and identify one of the views of the view hierarchy as a hit view e.g. with the identifying unit . The hit view establishes which views in the view hierarchy are actively involved views. The processing unit is configured to deliver a respective sub event to event recognizers for each actively involved view within the view hierarchy e.g. with the delivering unit . At least one event recognizer for actively involved views in the view hierarchy has a plurality of event definitions one of which is selected in accordance with the internal state of the electronic device and the at least one event recognizer processes the respective sub event e.g. with the event sub event processing unit prior to processing a next sub event in the sequence of sub events in accordance with the selected event definition.

In some embodiments the plurality of event definitions includes a first event definition corresponding to a first swipe gesture with a first number of fingers and a second event definition corresponding to a second swipe gesture with a second number of fingers distinct from the first number of fingers.

In some embodiments the internal state includes one or more settings for an accessibility operating mode.

In some embodiments a respective definition of the plurality of event definitions is selected for a respective event recognizer in accordance with the internal state of the electronic device and a determination that the respective event definition does not correspond to an event definition of any event recognizer for the actively involved views other than the respective event recognizer.

In some embodiments two or more event recognizers for actively involved views in the view hierarchy each have a respective plurality of event definitions and a respective event definition of the respective plurality of event definitions is selected for a respective event recognizer in accordance with the internal state of the electronic device and a determination that the respective event definition does not correspond to any event definition selected for any event recognizer with two or more event definitions other than the respective event recognizer.

In some embodiments the processing unit is configured to process the respective sub event in accordance with the selected event definition by enabling display of one or more views of a first software application distinct from the software that includes the view hierarchy e.g. with the display enabling unit on the display unit .

In some embodiments the processing unit is configured to process the respective sub event by replacing the display of the one or more views of the view hierarchy with display of one or more views of a first software application distinct from the software that includes the view hierarchy e.g. with the display enabling unit on the display unit .

In some embodiments the processing unit is configured to process the respective sub event by enabling display of in a first predefined area of the display unit a group of open application icons that correspond to at least some of a plurality of concurrently open applications e.g. with the display enabling unit and enabling concurrently display of at least a subset of the one or more views of the view hierarchy e.g. with the display enabling unit .

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.

