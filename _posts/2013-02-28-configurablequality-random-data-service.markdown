---

title: Configurable-quality random data service
abstract: Methods and apparatus for a configurable-quality random data service are disclosed. A method includes implementing programmatic interfaces enabling a determination of respective characteristics of random data to be delivered to one or more clients of a random data service of a provider network. The method includes implementing security protocols for transmission of random data to the clients, including a protocol for transmission of random data to trusted clients at devices within the provider network. The method further includes obtaining, on behalf of a particular client and in accordance with the determined characteristics, random data from one or more servers of the provider network, and initiating a transmission of the random data directed to a destination associated with the particular client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09049232&OS=09049232&RS=09049232
owner: Amazon Technologies, Inc.
number: 09049232
owner_city: Reno
owner_country: US
publication_date: 20130228
---
Numerous types of computing applications and protocols rely on the use of random data. For example random numbers may be used for generating cryptographic keys or certificates that used in large numbers of transactions carried out over public and or private networks. Such cryptographic keys and certificates are the basis of the trust placed in security algorithms by millions of end users and service providers and are fundamental for providing data confidentiality authentication and integrity. The vast majority of Internet based services which may cumulatively result in billions of dollars of business revenue annually rely on the use of random data to implement some of the core infrastructure technologies used for those services. Government agencies such as revenue collection services and or research establishments also utilize security algorithms dependent upon random data for critical operations.

The extent to which the applications and systems using the random data are truly secure may depend upon the quality of the random data. For example malicious attackers may be able to penetrate the security more easily if the quality of the random numbers being used is poor e.g. if there is a predictable correlation between different random numbers being used in a given security algorithm . The problem of poor random number quality may be exacerbated in certain types of environments in which for example a small number of sources of physical phenomena assumed to be random are used to generate random data for use by multiple applications. At the same time not all applications that use random data may require the data to have the same statistical qualities and in such mixed application scenarios the costs of generating large amounts of high quality random data may have to be weighed against the benefits.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of methods and apparatus for implementing a network accessible service designed to provide selectable quality random data to a plurality of random data consumers or clients are described. Networks set up by an entity such as a company or a public sector organization to provide one or more services such as various types of cloud based computing or storage services accessible via the Internet and or other networks to a distributed set of clients may be termed provider networks in this document. A given provider network may include numerous data centers which may be distributed across different geographical regions hosting various resource pools such as collections of physical and or virtualized computer servers storage devices networking equipment and the like needed to implement configure and distribute the infrastructure and services offered by the provider. A number of different hardware and or software components some of which may be instantiated or executed at different data centers or in different geographical regions may collectively be used to implement the underlying infrastructure supporting the random data service in various embodiments. Several different types of random data consumers such as components of virtualization software operating system software user level applications and or software implementing other services of the provider network may be able to obtain random data of desired quality from the service in different environments using secure communication protocols whose properties may also be selectable or customizable. In some embodiments the random data produced by the service may be fed into or combined with a pool or buffer of random data which may be referred to as the primary entropy pool that is typically set up at hosts of the provider network. The primary entropy pool at a given host which may also include random data generated locally at the host as described below may be used by pre existing entropy extraction software e.g. in a hypervisor layer at the host to support various programming interfaces e.g. operating system or library application programming interfaces APIs used by various end user applications requiring random numbers. In at least some embodiments the service provided random data may be employed in such a way e.g. by using the service provided random data to schedule a sequence of signals emulating keyboard or other hardware interrupts that are typical local sources of random phenomena used for the primary entropy pool that without requiring any software changes in the application layer or in the operating system layer the built in mechanisms present in various layers of the software stack for random number support may automatically generate random data of a higher quality than could have been obtained in the absence of the service. Further details regarding the manner in which service provided random data may be distributed combined and used and the types of interfaces that may be used for various aspects of the service in different embodiments are provided below.

According to one embodiment a system for implementing the service may comprise one or more computing devices configured to designate one or more servers of the provider network as members of a pool of producers of random data such as random bit sequences that may in turn be used as seeds for random number generation . The computing devices may determine for various servers of the pool a respective set of candidate sources of random phenomena such as thermal noise or radioactive decay .

The servers of the pool may be configurable to generate random data based at least in part on a digitized representation of random phenomena from the candidate sources. The sources of random phenomena may also be referred to herein as entropy sources . Any combination of a number of different types of entropy sources may be used in different embodiments including for example in addition to the sources of thermal noise or radioactive decay mentioned above sources of electronic noise or shot noise electromagnetic radiation sources entities undergoing detectable quantum mechanical changes clock drifts movements of disk read write heads sources of radio noise weather changes atmospheric phenomena such as cosmic rays the timing of sequences of interrupts such as keyboard entry interrupts or mouse interrupts changing visual data collected through a video camera lens over time and the like. In some implementations the manufacturers of one or more chipsets used in the provider network e.g. as central processing units or as peripherals on various hosts may expose APIs allowing the extraction of random data based on electronic noise or other signals. In one implementation an entropy source may be incorporated into a small peripheral device e.g. a dongle attachable to a producer server via a universal serial bus USB connection or some other standard or custom connectivity mechanism. In some embodiments some of the entropy sources may natively produce digital output while others may natively produce analog output which may have to be converted to digital form. Different members of the producer pool may be configured with different entropy sources in some embodiments while in other embodiments each of the pool members may be configured with the same entropy sources. In addition different sets of entropy sources may be used by the same random data producer to provide random data for respective consumer interactions in at least some embodiments. The quality of the random data generated e.g. how random the data produced actually is which may be measurable using statistical tests may at least in some cases depend on the number and nature of entropy sources used.

In at least some embodiments the computing devices implementing the service may be configured to determine on behalf of a particular random data consumer a a subset of the pool of producers to be used to supply a collection of random data such as a bit sequence of a specified length b one or more entropy sources from among the available candidates to be used to generate the collection of random data at the selected producers and or c one or more delivery or service parameters to be used to transmit the collection of random data to the random data consumer. A number of different approaches or algorithms may be used to select the producers and the entropy sources in different embodiments as described below in further detail such as selection based on source preferences or quality requirements explicitly specified on behalf of the consumer selection based on inferred characteristics or needs of the consumer s applications and so on. The parameters determined may include for example the size or amount of the random data to be transmitted at one time on behalf of the consumer the rate or frequency at which random data is to be transmitted in scenarios when the random data is to be provided multiple times or streamed to a given consumer whether the data is to be transmitted only in response to specific requests e.g. in a pull model of random data acquisition or whether the data is to be transmitted independently of specific requests e.g. using a push model and or the security protocols to be used for the transmission. In at least one embodiment the parameters may also include an indication such as a network address of a destination to which the random data is to be sent by the service on behalf of the consumer.

In at least some embodiments a given business entity or user with a client account or billing account established with the provider network may have several different types of random data consuming applications. Decisions regarding which specific entropy sources and or which specific producers of the pool are to be used for a given consumer or client may be made at several different granularities in different embodiments. For example in scenarios in which a pull model is being used so that sets of random data are supplied in response to respective distinct requests some of the choices regarding producers and or sources may be made at the request level e.g. if a consumer submits two requests R1 and R2 for random data a different set of entropy sources and or producers may be used at least in principle for R1 than is used for R2 in one embodiment. Source choices may also be applied at the granularity of multiple requests responses for all requests over certain time periods for all requests associated with a particular consumer process or for all requests associated with a particular billing account or client account in some embodiments. Similarly in scenarios in which a push model is used choices regarding sources may also be made either per transmission or for multiple transmissions based on time periods or based on accounts in various embodiments. The set of communications between the service and a consumer associated with a single transmission of random data from the service may collectively be referred to herein as a random data interaction or simply as an interaction. In the case of a pull model an interaction may include a request for random data and a response to the request for example while in the case of a push model an interaction may comprise a transmission of random data but may not include a request.

Having determined the specific set of producers the specific types of sources of random phenomena to be employed at or by the selected producers and the parameters the computing devices may initiate a transmission of the collection of random data directed to the destination associated with the random data consumer in accordance with the parameters. In some implementations as described below the destination may comprise an intermediary that may be configured to combine random data from additional sources while in other implementations the destination may be the consumer itself.

In some embodiments an indication of desired statistical qualities of the random data needed or requested by a particular consumer may be available to the service and such indications may be used to select the producers and or the specific entropy sources to use. The indications may be expressed subjectively by clients of the service in some embodiments e.g. a client may choose among random numbers of high medium or low quality in some implementations while in other implementations more precise and or objective metrics may be provided by the clients such as a requirement to meet a particular published standard of random data quality or a desired mathematical property that the data should possess. In some embodiments the quality of random data may be indicated either by clients or by the service itself by referring to academic or government issued publications that provide analyses rankings or metrics of the randomness of data acquired from various types of entropy sources. For example if a respected academic publishes a study that reports that entropy sources using cosmic ray phenomena provide random data with high quality while entropy sources using hard drive read write head movements provide random data with lower quality this may help clients of the random data service decide which types of entropy sources they may wish to use and may also help the service to characterize its entropy sources appropriately. In at least one embodiment the service may be able to infer the requirements of random data quality and the appropriate types of entropy sources to be used based on identifying or deducing the kind of applications for which the random data is going to be employed for example cryptographic applications may be deemed to need higher quality random numbers than a low end video game application. Inferences about the characteristics of random data to be provided may also be made based on other attributes of the consumers or the requests from the consumers in some embodiments such as the network addresses to which the data is to be delivered which may indicate whether they are internal or external to the provider network or the quantities or rates at which the data is requested or consumed.

In one embodiment the random number service may be designed to comply with one or more uniqueness policies. For example the provider network may implement a virtualized compute service such that multiple virtual machines which may be termed guest virtual machines or guest VMs may be implemented at the same physical host on behalf of clients. In some cases different VMs on the same host may use the same machine image for startup. Applications running on different guest VMs at the same host may require respective statistically distinct random data sets. The service may be configured in some embodiments to ensure that the random data provided to a random data consumer at any one guest VM is statistically independent or unique with respect to the random data provided to a different consumer at any other guest VM. Uniqueness requirements may apply to sets of random data provided to the same consumer at different times across different consumers at the same guest VM and or across different virtual machines in various embodiments. Approaches to implementing desired levels of uniqueness are described below in further detail e.g. in conjunction with the description of . Clients of the service may be enabled to customize or select among different uniqueness policies for their random data in some embodiments and the service may be responsible for coordinating the generation and transmission of respective collections of random data to a plurality of consumer applications in accordance with the selected or customized uniqueness policies.

As mentioned earlier the destination to which the collection of random data is provided by the service may comprise an intermediary such as a local random data aggregator running on the same host as the random data consumer in some embodiments. Such an intermediary may be configured to combine the random data being provided by the service with locally generated random data before providing a result of the combination to the consumer in such embodiments. Thus the intermediary may server as a logical abstraction layer between a plurality of entropy sources and the software components that need the random data on the host. Such intermediaries may be termed entropy extractors or entropy smoothers in some implementations. The locally generated random data may be produced at the host using one or more local entropy sources such as local keyboard interrupt streams or local sources of thermal noise in some embodiments. Various aggregation policies may be used to combine the service provided random data with the locally generated random data in different embodiments e.g. a service provided random bit sequence may simply be appended to prepended to or inserted into a locally generated random bit sequence in some implementations while in another implementation more complex mathematical functions may be used to combine the two sets of random data. In one simple implementation a buffer of random data may be maintained and new random data received from a given source such as the service or a local random data generator may simply be added to the buffer in the order received with the buffer being reused by overwriting the old random data with new random data when it gets full. In the cases where the service provided data is included in a sequence of locally generated random values e.g. by appending prepending or inserting portions or all of the service generated random data the result of the combination may simply be considered a larger set of locally generated random data thus minimizing or eliminating the need for changes in the software that consumes the random data combined by the intermediary. In some implementations the locally generated random data may be of poorer quality than the service generated random data such that combining the two sets of random data would have the effect of enhancing the quality of the random data that the consumer ultimately receives compared to a scenario in which only the locally generated random data were available. The combination of locally generated data and service provided data may also have the beneficial side effect that the data actually received by the consumer would differ from the data generated by the service such that even if the service was successfully attacked or temporarily controlled by a malicious entity the malicious entity would not be able to determine exactly what random data is delivered to the consumer and thus the probability of breaching the consumer application s security would be lessened.

In some embodiments the intermediary or local random data aggregator may be incorporated within virtualization software such as a hypervisor running on the host and or within operating system software running on the host. In one embodiment a daemon or system process at the virtualization software layer or the operating system layer may act as the intermediary or aggregator e.g. by intercepting requests such as API calls for random data from higher level software components or applications and providing the results of the combination of service generated and locally generated random data. In at least one embodiment the intermediary may be configured to determine whether a particular random data consumer or a particular random data consumer interaction should be fulfilled using service provided random data or whether locally generated random data would suffice. In such an embodiment the combination of the service provided data with the locally generated data would be performed only for those consumers or interactions that require the higher quality service provided random data while lower quality random data needs may be fulfilled without utilizing the service provided data. Depending on the pricing policies in use for the random data service such a flexible approach may reduce client billing costs for random data in some embodiments. In at least one embodiment the intermediary may determine to use only the service provided random data instead of combining it with locally generated random data for at least some consumer interactions. In one embodiment the random data generated by the service may be provided to the consumer without the use of an intermediary or local aggregator.

According to one embodiment the size of the pool of random number producers and or the distribution of the producers among different locations of the provider network may be determined based on estimates of expected random data usage and or based on availability redundancy or resiliency requirements for the service. For example the physical resources such as various types of servers storage and networking equipment of the provider network may be distributed across numerous data centers spanning multiple cities geographical regions or countries. The provider network may also be organized into availability containers engineered in such a way that failures such as power outages or network outages are not expected to be correlated across multiple availability containers in some embodiments so that the resources within a given availability container are expected with a very high probability to be unaffected by failures in other availability containers. A given availability container may comprise portions or all of one or more data center in some embodiments.

To help determine the appropriate size of the producer pool a number of metrics and or estimates may be obtained. The rate at which random data is consumed by a plurality of consumers may be determined e.g. over some selected period of time such as a month. The random data generating capacity of a given type of server to be included in the pool of random data producers may be determined or measured e.g. in units such as random bits produced per second for a given CPU utilization level at the server. The anticipated or expected number of consumers of random data e.g. for some future period such as the next six months to be handled by the service may also be determined. A baseline number of producer pool servers may be estimated e.g. using the rate of consumption the capacity of a given server and the predicted number of consumers in one embodiment. The redundancy and or availability needs of the random number service may be taken into account to adjust the baseline value to determine the number of servers to be designated as members of the pool and the specific data centers and or availability containers into which the servers should be distributed in some embodiments. A placement plan mapping the servers to availability containers or data centers may be generated in some embodiments for example taking into account networking latencies for data transmission between the availability containers or data centers. Surplus producer servers beyond the numbers determined based on expected rates of random data consumption and availability redundancy needs may also be deployed to handle bursts of random data requests in some implementations. A fleet of random data producers may be deployed based on some combination of the above approaches and the utilization levels of the producers as well as other performance characteristics may be tracked over time adjusting the fleet size and or the locations of the producers as needed.

In some embodiments the service may select the subset of the producer pool or pools to be used for a given consumer using a random selection policy. As a result different sets of producer servers may be utilized for different collections of random data provided to a given consumer or to different consumers in such embodiments thus potentially further enhancing the statistical independence between the collections. In other embodiments the same set of producer servers may be used repeatedly for a given random data consumer. In some embodiments a failover relationship may be established between producer servers such that if a particular producer P1 becomes temporarily or permanently unavailable a different producer P2 that has been designated as a standby or backup producer for P1 may be used.

In one embodiment where a plurality of producer servers is to be used for the random data to be supplied to a given consumer the service may include an aggregating server configured to combine the respective random data sets from each of the producers before transmitting a result of the combination to the destination associated with the consumer. The aggregating server which may be one of the producer servers involved in generating the random data or may be a separate server designated primarily for aggregating the data from producers may use a number of techniques to combine the data from the multiple producers in different embodiments for example using straightforward appending prepending insertion or other mathematical approaches. In other embodiments such a service data aggregator may not be used so that even in scenarios in which multiple producers random data is to be provided to a single consumer the sets of random data may be transmitted independently without service side aggregation to the consumer.

Numerous types of random data consumers may be able to utilize the service in various embodiments. Example consumers may include cryptography applications security certificate generators gambling applications video game applications authorization applications configured to generate tokens based at least in part on random data applications configured to use sequence numbers e.g. for network packets other service providers within the provider network e.g. components of the provider network that implement virtualized storage or database services entropy extracting software components or entropy smoothing components configured to obtain random numbers from a primary entropy pool at a host operating system components or daemons configured to support a library comprising one or more random number routines or virtualization software components configured to provide random data to one or more guest virtual machines. In at least one embodiment random data provided by the service may be used as seeds for random number generation routines.

In at least some embodiments random number consumer applications may run either within the provider network in which the service is implemented or outside the provider network. In one such embodiment several different security protocols may be implemented by or at the service providing respective levels of confidentiality data integrity authenticity and or replay protection the prevention of replay attacks in which valid data transmissions may be maliciously or fraudulently repeated or delayed . Industry standard security mechanisms such as secure sockets layer SSL protocol may be used in at least some of the protocols and such mechanisms may inherently provide desired levels of the various security attributes listed above. Some consumers executing on hosts within the provider network may be deemed trusted consumers and or the hosts on which these consumers run may be deemed trusted hosts. A security protocol appropriate for trusted hosts or trusted consumers may be used at least by default for such consumers. A different security protocol e.g. one involving a higher level of encryption digital signatures or the like may be used at least by default for untrusted consumers or untrusted hosts. In some embodiments the security protocol to be used may be configurable or selectable by the clients of the service. In one embodiment the service may infer the type of security protocol to be used for a given client or consumer e.g. based on the type of application that is to consume the random data and or based on the network address of the consumer.

In some embodiments one or more programmatic interfaces such as APIs web pages other graphical user interfaces or command line tools may be implemented to support various aspects of the service. Some such programmatic interfaces may be for configuration or control e.g. interfaces enabling clients to specify desired characteristics of random data to be provided to select security protocols pricing policies and the like. Other programmatic interfaces may be implemented for the transmission of the random data itself e.g. to receive requests for random data and to respond to the requests or to provide the data in the absence of explicit requests if a push mode of delivery is being used.

The coordinator may be responsible for managing producer pool membership in some embodiments e.g. by determining how many and which servers of the provider network are to designated as producers deploying the servers as random data producers adding and removing pool members as needed based on the expected and or measured random data consumption rates. In some such embodiments the coordinator may determine candidate entropy sources that may be used by one or more of the producers for random data generation e.g. the coordinator may direct a producer to start or stop using one or more devices as entropy sources. The coordinator may also control various aspects of the generation collection and distribution of random data for a given consumer in the depicted embodiment. For example the coordinator may be configured to determine on behalf of a particular consumer the specific set of producers that are to generate random data and or the specific entropy sources to be used. Such decisions about sources may be made at different granularities in different embodiments for example different producers and or entropy sources may be selected for a given consumer on a per transfer basis or for all random data to be provided during a selected time interval or for all random data to be provided indefinitely or until a source configuration change request on behalf of the consumer is received . The choice of sources of random data for a consumer at the producer level as well as the entropy source level may be based on various factors for example based on a determination or inference of the quality or statistical properties of the random data to be provided on the pricing policy in use for the consumer on the current state of the workload at or connectivity to various producers or on measurements of the statistical properties of the random data previously produced by a given entropy source or by a given producer in some embodiments. For example in one implementation a particular entropy source or a particular producer may be dropped from the set of resources used for one or more consumers if some desired statistical property is no longer being met.

The coordinator may also be responsible for determining several types of service delivery parameters for random data collections to be provided to a consumer in the depicted embodiment. Delivery parameters may include for example whether a push policy is to be implemented in which delivery of random data is initiated by the service according to some delivery schedule or policy and the service does not have to receive an explicit request to deliver some agreed upon quantum of random data whether a pull policy is to be implemented in which the service provided random data in response to explicit requests for random data or whether a combined push and pull policy is to be used. Other example delivery parameters may govern how much random data is to be provided in one transfer e.g. the length of a bit string to be provided how frequently and at what rate random data is to be provided if a push model is used exactly which network destination queue or process is to receive the data the security protocol to be used and so forth. Delivery parameters may be explicitly indicated by the consumer or the provider network client on whose behalf the random data consuming application is run in some embodiments or may be inferred by the coordinator based on the particular programmatic interface being used by the consumer or some other identification of the type of application that is to consume the random data such as a network address . Having determined the sources and the delivery parameters the coordinator may initiate transmission of a collection of random data e.g. as a string or sequence of random binary digits to a destination associated with the consumer in accordance with the delivery parameters. In at least some embodiments the coordinator may implement various programmatic interfaces e.g. for control and configuration interactions with the users of the service and or for the distribution or delivery of the random data.

As shown in various types of consumers of random data may utilize the random data provided by the service in the depicted embodiment. Internal consumers may include for example applications running on virtual machines as in the case of consumers A B and C instantiated at a virtualization host that may be implemented as part of a multi tenant virtual compute service supported by the provider network . Some internal consumers such as E may represent control or management software running at virtualization hosts such as hypervisor components and or operating system components as opposed to applications running on the virtual machines . In addition the provider network may implement a number of other services such as storage services database services load balancing services networking services identity management services and the like and another internal consumer e.g. D of random data may reside on a host implementing a component of one these other services.

Delivery of random data to such internal consumers may be accomplished using an internal network in the depicted embodiment. Delivery of random data to external consumers may involve the use of external network s such as portions of the public Internet. Since the provider network may not in general have as much administrative and configuration control over external networks and or devices as it does over internal network and internal hosts or different security protocols may be implemented for transfer of random data to internal versus external consumers in some embodiments. In some implementations consumers internal to the provider network may be considered trusted consumers while external consumers may by default be considered untrusted. A security protocol designed for trusted consumers or trusted internal hosts may be used for internal transmissions of random data while a different security protocol designed for untrusted consumers and untrusted hosts may be used for external transmissions in some embodiments. As described below in further detail security protocols may be configurable or customized in at least some embodiments.

A number of different types of phenomena may be used to generate random data in various implementations. Some entropy sources A may represent naturally occurring largely unpredictable events or phenomena such as changes in weather or atmospheric conditions such as wind speeds radioactive decay radio noise or various types of quantum mechanical effects. Other entropy sources may represent phenomena that occur within engineered articles or devices but are not easy to predict or control such as shot noise electrical noise or thermal noise within various electronic devices clock drift movements of disk drive read write heads patterns of keyboard entries and the like. At least in some cases the phenomena or events at an entropy source may need to be transformed from the analog domain to a digital domain to obtain the bit sequences . A digitizer used for this type of transformation may include several subcomponents as shown in the case of digitizer D in . In the depicted embodiment a digitizer may include a transducer that is capable of detecting the analog phenomena or events an amplifier to enhance the detected signals an analog to digital converter and or a sampler configured to extract samples of the output of the analog to digital converter. Although digitizers are shown as entities separate from the entropy sources and the producer in in at least some embodiments the digitizers may be subcomponents of the producers and or may be incorporated within or attached to the entropy sources . In some embodiments some devices usable as entropy sources may produce bit sequences without the help of an intermediary such as a digitizer e.g. some entropy sources may produce digital rather than analog output. In one embodiment the provider network may include a set of hardware security devices dedicated for generating high quality random numbers for security related functions and output produced by such hardware security devices may be used by at least some of the producers of the service e.g. in combination with the output of other entropy sources accessible by the producers . For example if during some time interval one or more of the hardware security devices are idle or not being used heavily for their primary purpose their output may be added to the mix of sources used by one or more producers. In some implementations one or more such hardware security devices may be designated as full fledged members of the producer pool.

In the embodiment depicted in different sets of entropy sources may be used to produce random data for different consumers. As shown source set A comprising entropy sources A and B may be used for consumer A s random data set A while source set B comprising entropy sources B C and D may be used for consumer B s random data set B. The determination as to which entropy sources are to be used for a given consumer may be made by or at the coordinator in some embodiments or by the producer in other embodiments. The manner in which the bit sequences from the various entropy sources are to be combined by the producer may be governed by various combination algorithms in different embodiments. In some embodiments the producer may be responsible for generating a pool of random bits for use by various consumers and the bit sequences received may simply be added to the pool e.g. by appending prepending or inserting portions of the bit sequences to the pool without modifying the bit sequences in accordance with the combination algorithm in use. Other mathematical functions or transforms may be used for the combination in other implementations.

The local aggregators shown in may be configured to combine locally generated random data e.g. data derived from local entropy sources A N on host A and data derived from local entropy sources P T on host B with the service provided random data to arrive at the final random data that is received by the consumer . Thus for example final random data A in may potentially be derived from three levels of data combination first a combination of output from various entropy sources at each of respective producers A and B then a combination of output from data producers A and B and finally a combination of the service provided data A with locally generated random data e.g. in a primary entropy pool at the host where the consumer A runs. Similarly final random data B provided to consumer B may be the result of combining data from producers B and C to arrive at service provided data B followed by combining data B with locally generated data at host B. As a result of these combinations the final random data may differ from the service provided data on which it is based so that it is not possible for a service component such as a service data aggregator or a producer to determine the final random data.

In at least some embodiments as mentioned above the provider network may be organized into a plurality of availability containers such that the availability profile of each container is independent of the profile of other containers. Availability containers may be established to allow services of the provider network and consumers of such services to decrease the likelihood of severe disruptions that might occur if failures were correlated across all the resources of the provider network. Failures in one availability container may typically not be correlated with failures in other availability containers. In some implementations the term availability zone may be used instead of availability container . illustrates an example of a distribution of random data producers across multiple availability containers of a provider network according to at least some embodiments. Two availability containers A and B are shown in the provider network . In the depicted embodiment each availability container has a respective producer pool e.g. producer pool A with producers A C in availability container A and producer pool B with producers D F in availability container B. A failover relationship has been established between the two producer pools indicating that if failure such as power outage or network disconnection prevents the production or delivery of random data at the desired rate at either pool the other pool may be used instead or in addition.

In the embodiment depicted in consumers and are organized into consumer sets such as consumer set A and B with respective preferred producer pools. Thus for example consumers A D and A K have producer pool A designated as their preferred pool while consumers Q T have producer pool B designated as their preferred pool. Preferred pools may be designated based on various factors in different embodiments such as geographical proximity to the consumers pricing policies in use for the consumers which may help determine the producers from which random data can be obtained most cost effectively for a given consumer and the like. Under normal operating conditions when the service is to provide random data to any given consumer one or more producers from the preferred pool for that consumer may be used. However if failure or overloading at the preferred pool prevents the delivery of random data at the desired rate or in the desired quantities the backup pool e.g. pool B for consumers of set A that has a failover relationship with the preferred pool may be used instead. Metadata regarding the membership of consumer sets the mapping between consumer sets and preferred pools and failover relationships may be maintained by the coordinator in at least some embodiments. As shown in some of the consumers of random data generated by a given pool in a given availability container may be executing within the same availability container e.g. the hosts at which consumers Q T run are resident in availability container B in while in other cases such as consumers A D the consumers may be outside the availability container in which the random data producers of their preferred pool are instantiated. Although the failover relationship is shown between pools of producers in in some implementations failover relationships may be established between individual producers instead of or in addition to between producer pools. In some embodiments a given producer pool may comprise servers of multiple availability containers and or multiple data centers. In some embodiments the technique of establishing or maintaining preferred pools and or consumer sets may not be implemented. Failover relationships between producers or pools may not be established in some embodiments.

Transfer unit size parameters may indicate the quantity of random data e.g. the length of a random bit sequence to be provided in one transfer or over some time period while parameters may indicate the transfer rate at which data is to be pushed to the consumer if a push policy is to be implemented for the transfers . Indications of the security policies governing for example the type of encryption algorithm to be used for transmitting the random data to the consumer or the certificate or signing mechanisms to be used may be saved as parameters in some embodiments. Security policy parameters may include specifications or requirements for various security related features such as confidentiality authenticity data integrity and or replay protection in at least some implementations. The pricing policies may be recorded as well in some embodiments indicating how the billing charges for providing the random data are to be computed. For example a client may be billed based on a flat cost per random data bit based on the rate at which random bits are provided or using a dynamic pricing system such as spot pricing in which clients pay a variable price based on supply and demand for random data. Indications of the uniqueness policies to be applied to the random data may also be stored in the form of parameters in some embodiments. In at least some embodiments a set of default values for some of the parameters may be used for all the random data consumer applications of a given client or user of the provider network with customization possible for the parameters of individual consumer applications as desired by the client or user. In some embodiments some or all of the example parameters shown in may be specified explicitly for each request or each transfer while in other embodiments the parameters may be specified for all the transfers of random data to be implemented for a given consumer or client over some specified time interval.

In at least some embodiments in addition to or instead of ensuring that a given set of producer generated random data is used just once an interaction specific bit sequence may be generated for each customer interaction. For example in one embodiment if random data set A is selected at a given service aggregator S with IP address S addr at time T for consumer A with a consumer identifier CID A where the consumer destination IP address is C Addr an interaction specific bit sequence A which may also be considered a global sequence number or nonce may be generated as a function of any combination of S addr T CID A C addr . Similarly a different interaction specific bit sequence B may be generated for consumer B s random data set A based on any combination of the service aggregator s IP address the consumer B s destination IP address the time at which the random data is selected for B and B s consumer identifier CID B. The algorithm used and the parameters on which the bit sequences are based may ensure that the chances that the same bit sequence is generated for two different clients may in general be vanishingly low. The interaction specific sequence number may be provided to the consumer in some embodiments e.g. as metadata associated with the actual random data provided. In some embodiments the interaction specific bit sequence may be used to log the delivery of random data e.g. the consumer may save the bit sequences associated with various deliveries of random data from the service and may be able to share the bit sequences for auditing or tracking purposes e.g. if the source or time of delivery needed to be discovered or investigated later . In some implementations a consumer may be able to decode portions of the bit sequence to verify that the associated data was provided by a trusted source i.e. by the service instead of by a malicious entity and or that the time at which the data was provided as indicated in the interaction specific bit sequence was in a reasonable expected time range. In some embodiments the unique interaction specific bit sequence may be merged or combined with the producer generated random data to determine the delivered random data.

Other approaches to uniqueness may be taken in some embodiments. For example in one embodiment for a consumer that has indicated a preference for a stringent uniqueness policy the service may maintain a database of random data sets that have previously been supplied to the consumer and check a newly generated set of random data against that database to ensure uniqueness. In various embodiments the clients on whose behalf the consumers are executed may specify various details of the uniqueness policies to be implemented e.g. by selecting from among a set of uniqueness policy options or specifying a custom uniqueness policy. In some embodiments the pricing policy to be applied for a given consumer or client may depend at least in part on the uniqueness policy in use.

Depending on the kinds of applications for which the random data provided by the service is to be used different consumers or clients of the service may have different security needs in various embodiments. illustrates examples of the use of several different security protocols for transmitting random data by a service according to at least some embodiments. In the depicted embodiment service coordinator may be configured to distribute random data generated at producer pool to consumers both inside and outside the provider network. Hosts within the provider network such as hosts A and B may be regarded as trusted hosts by the random data service while hosts outside the provider network such as host may be considered untrusted hosts. The operator of the provider network may typically control the physical and logical security of its internal resources such as hosts A and B and network traffic between the random data service and hosts A and B may be transmitted over internal well secured networks thus leading to the designation of internal hosts and consumers running on the internal hosts as trusted hosts and consumers. As a result for at least some trusted consumers the service may be configured to use minimal or no additional security beyond what is already typically used for intra provider network communications such as the use of a secure shell SSH mechanism . Thus in the depicted embodiment security protocol A used when providing random data from the service to a trusted virtualization host A e.g. either to a consumer P within hypervisor or directly to an application consumer A running on a guest virtual machine A may be relatively lightweight.

Some of the consumers of random data may include other services e.g. services not directly responsible for providing guest virtual machines implemented within the provider network. Depending on the nature of the consumer service for example if the service is itself a provider of high quality cryptographic functionality or provides high performance computing capabilities for research efforts with national security implications additional levels of security may be desirable for random data transmissions even though the service runs on trusted hosts and the random data may be transmitted entirely on network paths internal to the provider network . In consumer L represents such a service for which a more sophisticated security protocol C may be employed when transmitting random data. In some embodiments security protocols such as protocol D shown in may also or instead be implemented between the random data producers of pool s and the service coordinator . The nature of the security protocol employed between a given producer and the coordinator may vary in different implementations depending for example on factors such as the number of links or hops included in the network path between the producer and the coordinator and or on the security preferences of the clients to which the coordinator supplies random data generated by the producer.

Transmissions of random data to untrusted consumers such as external consumer running on untrusted host may pass through network links and devices over which the provider network has no physical or logical control. Accordingly the random data service may implement additional security protocols e.g. protocol B for such external consumers in some embodiments in which for example in addition to transmitting a set of random data a digest or digital signature of the data may be provided or a key based encryption mechanism using client provided keys may be used. In at least some embodiments the random data service may implement lightweight security protocols by default for internal consumers running on trusted hosts and a more heavyweight security protocol by default for external consumers. Clients may be able to specify the level of security they wish to employ for their random data in some embodiments e.g. by selecting from among a plurality of supported security policies using a programmatic interface or by providing details of a desired custom security policy. In some embodiments the service may be configured to infer the security protocol or policy to be used e.g. based on the network address to which the data is to be provided using higher security levels for addresses outside the provider network than for addresses inside the provider network for example or based on the type of application consuming the random data if the type is known or can be deduced e.g. from the API calls used for the random data . The security protocols employed in a given embodiment may be selected based on service requirements or service specifications for confidentiality authenticity data integrity and or replay protection the prevention of replay attacks in which valid data transmissions may be maliciously or fraudulently repeated or delayed . In at least some embodiments some or all of the security protocols may rely at least in part on trusted industry standard techniques such as the use of secure sockets layer SSL and the like which may inherently provide some of the required confidentiality authenticity data integrity and or replay protection support without requiring additional programming effort. Security protocol selection and or implementation may also be determined in some embodiments based at least in part on anticipated or measured vulnerability levels of the producer or the various network paths involved to malicious attacks or on the number and nature of detected attempts to breach security of the random data service.

In contrast to the configuration control programmatic interfaces which may be used to specify various desired properties of the random data data request delivery interfaces may be used for requesting e.g. in pull models and or transmitting the random data itself e.g. in either pull or push models . In at least some embodiments preferences or requirements for some of the random data characteristics e.g. entropy sources or data quality may be specified in the form of parameters passed along with requests for random data using interfaces that is different aspects of the same interface may be used for configuration and for data transfer. It is noted that in at least one embodiment the fact that a particular programmatic interface is being used for providing or receiving random data may not be apparent to the applications or even the operating system components that ultimately consume the random data. For example as noted earlier in some embodiments random data provided by the service may be merged into a primary entropy pool e.g. by a hypervisor component on a host at which multiple guest virtual machines are to be run where the primary entropy pool may comprise random data collected from local entropy sources and from the service. In some such embodiments the use of the service may be transparent to the applications and operating system in that for example the same set of method or function calls may be made for random data that would have been made even if the random data service were not implemented. Underneath the covers the quality of the random data in the primary entropy pool may be enhanced without requiring any programmatic changes to the applications or to the operating system in such scenarios. One set of programmatic interfaces may be used to obtain the random data from the service by an intermediary component such as a local aggregator in such an implementation while a different set of interfaces may be used for providing the random data to client applications from the intermediary and no modifications may be needed to the client applications in such implementations. In other implementations application level code or operating system code such as kernel components or drivers may be modified to use the service provided data or the client applications may themselves be modified to directly use a programmatic interface to obtain random data from the service without going through an intermediary component. In at least some implementations as described below in further detail a component of the random data service may be configured to make decisions regarding whether service provided random data is to be used or not for a given random data interaction e.g. by intercepting or trapping a function call or method invocation made from higher layers of the software stack using one of the programmatic interfaces . In some embodiments various default settings may be used to govern configuration of the random data for a given consumer such that even though a number of programmatic interfaces may be available for customizing the service the consumer may not be required to use those interfaces if the default settings suffice.

As noted earlier a number of different types of programmatic interfaces may be used for configuring and using the random data service in various embodiments. illustrates an example web based interface enabling a client of a random data service to specify some of the properties of random data to be provided according to at least some embodiments. As shown the interface may include a web page comprising a message area and a set of form fields for specifying various characteristics of the random data. In several cases default values for the form fields may be provided by the service allowing the client to make modifications only as necessary or to accept the defaults. Field may identify the client account that is to be billed for the random data. The client may specify the destinations to which the service is to supply random data and the delivery mode using field in the depicted embodiment. For example as shown by default all the virtual compute instances e.g. the guest virtual machines shown in associated with or billed to the client may be allowed to use the service and a pull mode of delivery may be employed where random data is supplied in response to explicit requests instead of being supplied even in the absence of requests. As in several of the form fields shown the client may modify the default setting for field by clicking on a provided link.

The specific applications to which the service provided random data is to be supplied may be indicated using field in the depicted embodiment. By default all applications on the destination hosts may be allowed to use the service as shown. An indication of the quality of random data to be provided which may be used by the service to determine the number of producers to use and or the specific types of entropy sources to use for example may be provided using field . The default setting indicates that the service is to be allowed to choose the quality of random data based on the application requesting the data e.g. the service may decide to provide a higher quality of data to a cryptographic application than to a sequence number application . Clients may specify a desired security protocol using field by default as shown the service may use a protocol used for trusted hosts of the provider network. If a client has a special uniqueness requirement for its random data such a requirement may be indicated using form field in the depicted embodiment.

Field may be used by a client to select a pricing policy for random data from among several supported pricing policies in the depicted embodiment. For example by default the client may be billed US 0.10 for up to a million bits of random data per day as shown. The client may also use the web page to indicate a notification policy e.g. so that the client is informed if the total amount of random data consumed at its destination host and applications exceeds a threshold value. One or more notification mechanisms such as e mail text messages or a notification service destination address may be specified as well as the criteria to be used to determine if a notification is required in some embodiments. In addition to using the depicted from fields clients may specify further customization e.g. to specify random data quality specifically for one application that differs from the quality to be used for other applications using the provided link in the depicted embodiment. The requested settings may be submitted using the apply button . It is noted that similar preferences may be indicated using other types of interfaces such as APIs command line tools and the like instead of or in addition to using web pages of the kind depicted in in various embodiments.

For each of the producers one or more candidate entropy sources e.g. sources of random phenomena or events that are either already available in digital form or can be converted to random digital sequences may be identified in the depicted embodiment as shown in element . Any of a variety of entropy sources may be selected as candidates for a given producer including for example various sources of noise electrical or thermal noise sources of electromagnetic or radioactive events interrupt sequences from keyboards or disk drives and so on. In some implementations special purpose devices specifically configured to generate random signals or random data of high statistical quality may be used as entropy sources.

On behalf of a given consumer of random data a subset or all of the producers to be used may be determined as well as the specific entropy sources to be employed element . Various delivery parameters may also be determined such as whether a pull model or a push model is to be used when providing the data to the consumer the units or size in which random data is to be provided the format of the data the rate at which the data is to be provided the security protocol to be used and so on. Some or all of the sources e.g. the producers and or entropy sources and delivery characteristics may be determined based on preferences or settings indicated on behalf of the consumer e.g. using programmatic interfaces such as various APIs or the type of web page shown in in one embodiment. The sources and or delivery characteristics may be inferred for certain kinds of consumers or may be inferred based on the type of application that is to use the random data in some embodiments. In at least some embodiments some of the characteristics may be specified as parameters of API calls made for the random data.

The generation and or collection of random data at the various producers and entropy sources involved in a given delivery interaction may be initiated as needed element . In some embodiments after a set of entropy sources and or producers is initially configured to start producing random data a stream of random data may be produced without requiring further explicit commands or requests and portions of the stream may be used as needed for various consumers. Based on the applicable delivery parameters applicable transmission of the random data for a given interaction may be initiated to the destination configured to receive the data on behalf of the consumer in the depicted embodiment element . In some implementations a destination may comprise an intermediary such as an entropy extraction module executing on the host at which the consuming application or operating system runs or some other local aggregator of random data while in other implementations the raw random data may be provided directly to the consumer. Collection or combination of random data e.g. as shown in and using any of a variety of combination techniques may be performed at a component of the random data service in some embodiments. In at least some embodiments minimal or no changes may be required at either the end user application level or the operating system level to take advantage of the random data service for example lower level software such as a hypervisor component may simply use the service provided data to enhance the quality and or size of a local entropy pool on a host where the consumer runs without changing the way in which the random data is provided to the higher levels of the software stack. Furthermore in at least one embodiment the final random data actually received by a consumer at a given host may be different from that provided by the service e.g. as a result of the combination of random data from various sources including local entropy sources at the host to decrease the probability that an attacker that breaches the service is able to determine the final random data consumed.

In some embodiments as noted above the random data service may be configurable to ensure with some high probability that the random data provided in one consumer interaction differs from that provided in other interactions in some statistically significant way and the service may support various data uniqueness policies. a flow diagram illustrating aspects of operations that may be performed to provide random data with a desired level of uniqueness according to at least some embodiments. The uniqueness settings for a given consumer may be determined element e.g. based on requirements or preferences supplied by or on behalf of the consumer using a programmatic interface such as an API or a web page. Based on the uniqueness settings as well as on other relevant delivery parameters random data may be obtained from one or more selected entropy sources at one or more producers and may be combined at various levels element e.g. random data may be combined from several entropy sources at a given producer and or random data from several producers may be combined at a service data aggregator.

As a result of the combination a pool of random data may become available at the service from which distinct subsets or portions may be selected for delivery to respective consumers element . The combination of the data at any of the levels may involve simple operations such as adding newly received data into a buffer as it arrives in some implementations and more complex processing or combination functions on other implementations. In at least one embodiment once a given portion of random data is selected for providing to a given consumer that portion of random data may be discarded or marked so that it is never used again thus supporting at least one level of data uniqueness.

In at least some embodiments e.g. in order to provide enhanced support for uniqueness an interaction specific bit sequence intended to be unique for that interaction may also be generated element . Depending on the implementation such a unique bit sequence may be derived from one or more of a client identifier or consumer identifier associated with the delivery of the random data a timestamp indicative when the data is generated requested or transmitted an IP address or MAC address of the consumer and or the producer identifications of the entropy sources used or other characteristics of the interaction. In one embodiment a history of the random data previously supplied to a given consumer or to all consumers may optionally be maintained and the service may check or verify whether the specific set of data it has selected for a consumer is unique using the history. The number of history records maintained and or checked may be limited in some such embodiments e.g. only records for the last hour or last day may be retained at any given time to reduce the storage cost of maintaining the history and or the computation cost of verifying uniqueness. The extent to which verification against history records is to be implemented may be configurable on behalf of a given consumer or a given set of consumers in some embodiments.

The selected portion of random data may be provided to the consumer optionally together with the interaction specific bit sequence element in the depicted embodiment. The portion of the random data used for the interaction may be discarded as mentioned above element so that it is never re used. In some implementations the interaction specific bit sequence may be considered a globally unique sequence number or a nonce. The interaction specific bit sequence may be logged in some implementations e.g. together with the provided random data either at a component of the service or by the consumer or at both the service and the consumer so that auditing or analysis of the random data service may be performed if needed.

At the intermediary the service provided data may be combined with locally generated random data e.g. from one or more local entropy sources at the host element . In some implementations the service provided data may be added to a primary entropy pool e.g. a buffer or pool of random bits to be used by local entropy extraction components for random number related operations . Depending on the nature of the local sources of entropy available the combination of the server provided random data with the locally generated random data may enhance the quality of the primary entropy pol substantially. For example some hosts may typically rely on hardware interrupt sequences such a keyboard entry sequences or mouse click sequences to populate their local primary entropy pools. However in several scenarios such as in virtualized compute environments the hardware interrupt sequences that are natively or locally available at a given host may suffer from several quality problems including for example the following a the host hardware may be shared by multiple virtual machines and as a result different virtual machines may have to rely on the same interrupt sequences which may reduce the statistical independence of the random data that can be provided to consumers at different virtual machines b in at least some scenarios there may not be very many hardware interrupts of the types most often used for random data generation further reducing the quality of random data that can be generated c the quality of the locally generate random data may vary over time e.g. based on time since host boot or virtual machine startup. The combination of random data from even one high quality entropy source of the service with the pool of locally generated random data even if several different local entropy hosts are used may thus result in substantially improving the statistical quality of the random data for the consumer in such environments. The result of the combination may be provided to the consumer element . The combination with locally generated random data may also have the security benefit that the final data received by the consumer is different from that provided by the service and it may be impossible to deduce the final random data at the service in at least some implementations. Thus in the unlikely event that a malicious attacker successfully penetrates the random data service the attacker would still not be able to determine the random data used by the consumer even though the data would have been generated based at least partly on the service s output.

In some embodiments in which locally generated random data is available at the host at which a consumer runs it may be the case that certain consumer requirements can be met using the locally generated data alone while other needs for random data may require the use of potentially higher quality service provided data. is a flow diagram illustrating aspects of the operation of a random data service component deployed locally to determine whether service generated data is to be used at the host at which a random data consumer executes according to at least some embodiments. The local component e.g. a local aggregator of random data or a local entropy extractor may determine for the consumer whether a collection of random data to be provided should be based at least in part on high quality random data obtained from a producer pool of the random data service element . The decision as to whether to use service provided data may be made at a per interaction granularity e.g. for a given set of random data to be obtained as a unit or at the granularity of a plurality of interactions such as all requests for random data for a given end user consumer application process . If high quality service generated data is to be used as determined in element the service generated data may be collected directly or indirectly e.g. from the producers of the pool directly or through service data aggregators element .

The contents of the final set of random data to be provided to the consumer may then be determined element . In at least some implementations the producer pool s data may be combined with locally generated data e.g. by adding the producer pool s data to a local entropy pool or buffer. In one implementation the producer pool s data may be provided to the consumer without any mingling or combination with locally generated data even if local sources of random data are available. The contents may then be provided to the consumer element . If a decision is made that locally generated data is sufficient as also determined in element a portion of locally generated random data may be provided to the consumer as shown in element . The decision as to whether a combination of producer pool data and local data is required or whether local data is adequate may be made based on various parameters or settings in different implementations for example based on specified requirements of the consumer on inferred random data quality needs of the consumer or on pricing billing considerations e.g. if the customer on whose behalf the consumer application is run has allocated a limited budget for service generated random data and the budget is exhausted locally generated data may be used .

As mentioned above the size of a producer pool to be employed for the random data service and the placement of the producers may be determined based on a variety of factors in different embodiments. is a flow diagram illustrating aspects of operations that may be performed to determine the number of servers to be included in a pool of random data producers according to at least some embodiments. As shown in element a rate of consumption of random data by a selected set of consumers may be determined. The set of consumers may represent a random sample of typical consumers that are supported by the service for example or may represent a sample of a specific subset of consumers e.g. applications of customers who are known to run high end cryptographic programs . Measurements of random data usage may be conducted e.g. either in an environment where the random data service is not yet available or in an environment where the random data service with some set of producers already set up as a temporary pool is available . In addition the availability and redundancy requirements for the random data service may be determined for example in accordance with other availability redundancy requirements supported in the provider network such as compute server availability requirements .

As shown in element an expected number of random data consumers and their average rates of consumption may be computed. The rate at which an average server of the type to be deployed as a producer is able to generate and transmit random data using a selected set of entropy sources may be measured e.g. using a standard suite of random data generation tests element . The total number of servers to be included in the pool may then be computed element and mapped to a selected set of data centers and or availability containers based on the redundancy or availability requirements. For example if each producer can generate and transmit N1 bits of random data per second the total estimated rate of consumption is C1 bits per second and triple redundancy is required i.e. three producers are to be configured for availability purposes for every one producer needed purely for performance then the total number of producers may be estimated as C1 3 N1 in one simple implementation and the servers may be equally distributed among three availability containers. Having determined the number and geographical placement of the producer pool the servers of the pool may be deployed element . The utilization levels of the pool members and associated network links used for transmitting the random data may be monitored and the deployment e.g. the total number and or placement of the producers may be adjusted as needed based on changing workloads. The bottleneck resources that govern the maximum rate at which random data can be generated may differ from one implementation to another e.g. the entropy sources may be the bottleneck the processing or memory resources at the servers may be the bottleneck or network links or devices may be the bottleneck. Monitoring of the service may help identify which set of resources need to be adjusted e.g. it may be possible to add entropy sources to speed up the rate at which a given producer transmits random data without changing other software or hardware characteristics of the server being used as the producer. In at least some embodiments statistical tests may be run to obtain measures of the quality of random data being produced and adjustments to the entropy sources and or combination techniques may be made as needed to meet desired levels of quality.

In at least some embodiments a plurality of security protocols may be supported for delivery of the random data to clients or consumers including for example at least one security protocol for use with trusted clients or trusted hosts within the provider network in which the random data service is implemented element . A different security protocol may be used with untrusted clients or untrusted hosts that may be located outside the provider network such that neither the untrusted host nor the network path to the untrusted host are under the supervision or control of the operator of the provider network. The protocol used internally within the provider network may be relatively lightweight in some embodiments with little or no additional security related processing relative to other internal data transfers. The protocol used with untrusted hosts or consumers may involve additional processing and or network transfers such as encryption using client specified keys generation of a digest of the random data that is sent to the consumer to allow verification that the random data has not been corrupted or tampered with in transit and so on. In some embodiments various aspects of the security policy may be specified by or on behalf of the clients e.g. using one or more of the programmatic interfaces for control or configuration so that for example appropriate tradeoffs may be made between the level of security or data integrity achieved and the overhead of providing that level of security or integrity.

The specific set of characteristics of a particular random dataset to be provided to a given client may be determined element e.g. based on input received via one of the programmatic interfaces. Random data may be obtained from one or more selected producers of a pool of random data producers of the service in accordance with the determined characteristics and a transmission of the data to a destination associated with the client may be initiated element . A security protocol appropriate for the delivery may be used for the transmission.

Programmatic interfaces associated with pricing and billing for random data may be implemented in the depicted embodiment element e.g. to allow users or clients to select desired pricing policies view billing and or usage history for their random data and or set pricing related notification preferences e.g. clients may wish to be notified using some preferred mechanism such as an email message if and when their random data related costs reach a threshold or their consumption of random data exceeds some specified level . The service may obtain and track metrics of random data usage by various clients element . Billing amounts based on random data usage and the selected pricing policies may be determined and communicated to the clients element . In addition notifications in accordance with the preferences of the clients may be provided in the depicted embodiment. In some embodiments the random data service may also be configurable to provide recommendations or suggestions to clients based on client goals such as preferred budget limits for example the service may recommend the use of lower cost lower quality random data if it appears that providing random data of higher quality is likely to result in budget overruns.

It is noted that in various embodiments some of the operations shown in the flow diagrams of or may be omitted or performed in a different order than that shown or may be performed in parallel rather than serially. It is also noted that the term application as used herein may refer to software at any level of a software stack on a computing device including but not limited to components of hypervisors operating systems drivers libraries user applications and the like.

The techniques described above of providing random data sets of configurable quality from a service within a provider network may be useful in a variety of different scenarios. For example in environments where virtualized compute services are implemented in the provider network the random data that can be generated natively i.e. on the virtualization hosts at which the virtual machines are run may at least in some cases be of poor quality or may vary in quality over time e.g. based on time since virtual machine boot and or based on time since host boot . Different virtual machines on a given virtualization host may have to share entropy sources in some cases reducing the statistical independence of the random data provided to each virtual machine. Using a separate pool of servers as random data producers with high quality entropy sources accessible from the servers may be very helpful in enhancing the quality of the random data that is made available on the virtual machines in such environments. In addition the ability to specify or exclude certain types of entropy sources may be beneficial to clients both inside and outside the provider network that wish to have fine grained control on their random data quality without having to incur the expense of obtaining and maintaining their own high quality entropy sources.

By setting up producer pools of the appropriate size to handle system wide demand and locating the producers in different availability containers or different data centers a highly available mechanism for delivering random data may be established. Consumers both within and outside the provider network may be able to rely on the service to support various types of applications that are dependent on random data such as cryptographic applications game applications and the like with an assurance that delivery of high quality random data is unlikely to be interrupted even in the event of failures at one or more data centers. The support for multiple selectable pricing policies may grant users the flexibility they need to meet their random data needs without exceeding their computing budgets. Flexible options for security protocols may help clients balance their needs for data integrity and confidentiality with the overheads associated with higher levels of data security.

In at least some embodiments a server that implements a portion or all of one or more of the technologies described herein including the techniques to implement the various components of a random data service may include a general purpose computer system that includes or is configured to access one or more computer accessible media. illustrates such a general purpose computing device . In the illustrated embodiment computing device includes one or more processors coupled to a system memory via an input output I O interface . Computing device further includes a network interface coupled to I O interface .

In various embodiments computing device may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computing device and other devices attached to a network or networks such as other computer systems or devices as illustrated in through including various devices serving as entropy sources for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for through for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computing device via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computing device as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface . Portions or all of multiple computing devices such as that illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality. In some embodiments portions of the described functionality may be implemented using storage devices network devices or special purpose computer systems in addition to or instead of being implemented using general purpose computer systems. The term computing device as used herein refers to at least all these types of devices and is not limited to these types of devices.

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software hardware or a combination thereof. The order of method may be changed and various elements may be added reordered combined omitted modified etc.

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

