---

title: Facilitating dynamically controlled fetching of data at client computing devices in an on-demand services environment
abstract: In accordance with embodiments, there are provided mechanisms and methods for facilitating dynamically controlled fetching of data at client computing devices in an on-demand services environment in a multi-tenant environment according to one embodiment. In one embodiment and by way of example, a method includes receiving, at a server computing device, a request from a client computing device. The request includes a query for receiving data from a database coupled to the server computing device in an on-demand database system. The method may further include matching the request against a predetermine threshold value, and where the threshold value includes a first predetermined threshold range based on a first column range or a first row range and a second predetermined threshold range based on a second column range or a second row range. The method may further include generating multiple responses to the request based on one or more formulae and the predetermined threshold value if the request fails to satisfy the predetermined threshold value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396231&OS=09396231&RS=09396231
owner: salesforce.com, inc.
number: 09396231
owner_city: San Francisco
owner_country: US
publication_date: 20130620
---
This application claims priority to and the benefit of U.S. Provisional Patent Application No. 61 696 579 entitled Method for Fetching Data to an Application Programming Interface From an On Demand Database System by Seth White filed Sep. 4 2012 and the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

One or more implementations relate generally to data management and more specifically to a mechanism for facilitating dynamically controlled fetching of data at client computing devices in an on demand services environment.

Increasing number of organizations e.g. companies business entities government agencies educational institutions etc. are developing application programming interfaces APIs to allow for various user based applications to communicate with the organization s backend system. However with ever growing user interaction organizations are unable to accommodate the increasing amounts of complex data from the organizations backend systems without clogging the system or interrupting execution of other queries.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request. The secure and efficient retrieval of accurate information and subsequent delivery of this information to the user system has been and continues to be a goal of administrators of database systems. Unfortunately conventional database approaches are associated with various limitations.

In accordance with embodiments there are provided mechanisms and methods for facilitating dynamically controlled fetching of data at client computing devices in an on demand services environment in a multi tenant environment according to one embodiment. In one embodiment and by way of example a method includes receiving at a server computing device a request from a client computing device. The request includes a query for receiving data from a database coupled to the server computing device in an on demand database system. The method may further include matching the request against a predetermine threshold value and where the threshold value includes a first predetermined threshold range based on a first column range or a first row range and a second predetermined threshold range based on a second column range or a second row range. The method may further include generating multiple responses to the request based on one or more formulae and the predetermined threshold value if the request fails to satisfy the predetermined threshold value.

While the present invention is described with reference to an embodiment in which techniques for facilitating management of data in an on demand services environment are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present invention is not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Methods and systems are provided for facilitating dynamically controlled fetching of data at client computing devices in an on demand services environment in a multi tenant environment according to one embodiment. In one embodiment and by way of example a method includes receiving at a server computing device a request from a client computing device. The request includes a query for receiving data from a database coupled to the server computing device in an on demand database system. The method may further include matching the request against a predetermine threshold value and where the threshold value includes a first predetermined threshold range based on a first column range or a first row range and a second predetermined threshold range based on a second column range or a second row range. The method may further include generating multiple responses to the request based on one or more formulae and the predetermined threshold value if the request fails to satisfy the predetermined threshold value.

Embodiments provide for dynamically controlling the amount of data that is fetched to client computing devices via client based APIs from a server computing device in an on demand database system. Stated differently in response to a query placed by a user at a client computing device a large amount of data being returned back to the client computing device may be optimized such that not only the request is met as largely expected by the user but that it is done without causing any clogging in the system or interrupting smooth execution of other relatively smaller queries being received from the same or other client computing devices.

This and other similar examples may be referenced throughout the document for brevity clarify and ease of understanding but it is contemplated that embodiments are not merely limited to metadata or simply generating mobile applications on mobile devices and that that other forms of data at servers in a multi tenant database system may also be accessed or leveraged to be used for other purposes such as generating default client views client validation rules client application logic etc.

As used herein a term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the term query plan refers to a set of steps used to access information in a database system.

Embodiments are described with reference to an embodiment in which techniques for facilitating management of data in an on demand services environment are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants embodiments are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

It is to be noted that any references to data metadata computing devices mobile computing devices such as smartphones etc. software development applications and tools e.g. Sprint Planner MS Project Chatter Groups etc. etc. discussed in this document are merely used as examples for brevity clarity ease of understanding and not to obscure data fetching mechanism however it is contemplated that embodiments are not limited to any particular data metadata computing devices software development applications and tools etc. For example embodiments are applicable to any number and type of data applications and processes such as customer relationship management CRM based data applications and processes and applications e.g. sales accounting customer support marketing technical support etc. etc.

Computing device may include server computers e.g. cloud server computers etc. desktop computers cluster based computers set top boxes e.g. Internet based cable television set top boxes etc. and the like. Computing device may also include smaller computers such as mobile computing devices such as cellular phones including smartphones e.g. iPhone by Apple BlackBerry by Research in Motion Limited now serving and trading as BlackBerry etc. handheld computing devices personal digital assistants PDAs etc. tablet computers e.g. iPad by Apple Galaxy by Samsung etc. laptop computers e.g. notebooks netbooks Ultrabook etc. e readers e.g. Kindle by Amazon.com Nook by Barnes and Nobles etc. Global Positioning System GPS based navigation systems cable setup boxes etc.

Computing device includes an operating system OS serving as an interface between any hardware or physical resources of the computing device and a user. Computing device further includes one or more processors memory devices network devices drivers or the like as well as input output I O sources such as touchscreens touch panels touch pads virtual or regular keyboards virtual or regular mice etc. It is to be noted that terms like node computing node server server device cloud computer cloud server cloud server computer machine host machine device computing device computer computing system multi tenant on demand data system and the like may be used interchangeably throughout this document. It is to be further noted that terms like application software application program software program package and software package may be used interchangeably throughout this document. Moreover terms like job input request and message may be used interchangeably throughout this document.

In one embodiment reception authentication logic may receive a request query for data from a user via client computing device . In addition to receiving the request reception authentication logic may also perform various authentication tasks such as authenticating the user using various user credentials e.g. user identification userID password name authentication number company name etc. computing device e.g. public key private key device registration profile etc. the request e.g. verifying the nature and content of the request etc. etc.

Upon receiving the request and performing the authentication processes reception authentication logic may forward the request to evaluation logic for evaluation of the request. In one embodiment evaluation logic may review contents of the request to determine whether the request can be satisfied in its current form. For example the request may include a query demanding a relatively large amount of data e.g. thousands of data sets as opposed to hundreds of data sets having a large number of columns and rows to be fetched in response or return. The terms return and response may be used interchangeably throughout this document. In one embodiment evaluation logic may evaluate the request by matching the number of rows and or columns anticipated in the response against a predetermined threshold number of rows and or columns allowed by for example a system administrator a software programmer etc. For example a system administrator may consider the bandwidth or heap limit of an on demand database system along with other factors such as performance factors practical limitations etc. such as determining a point up to which the database system can perform superior level of data management maintain the highest level of data processing speed and provide a seamless data query return experience for its users etc.

For example large queries e.g. Salesforce Object Query Language SOQL based queries where SOQL refers to an object query language that is used for querying data using the Force.com platform etc. that require very large results having a high number of objects can often reach the heap limit of the database system which can result in an error. To avoid such situations in one embodiment data fetching mechanism provides for adjusting the size of large query results e.g. by limiting a number of columns and or rows etc. so that the heap limit and any potential errors can be avoided and a seamless processing of queries can be continued. However on the other hand it is contemplated that an end user of an organization may have certain expectations associated with each query e.g. expecting a minimum amount of information to be returned in a response expecting all columns to be returned but not all rows etc. and it may be important for a system administrator of the database provider system to fulfill such expectations in order to continue to maintain good relations with the organization. It is therefore contemplated that the system administrator may take into consideration any number and type of factors such as technological limitations e.g. heap limit etc. performance factors e.g. system performance limitations business services expectations e.g. end user organization expectations etc.

As aforementioned a system administrator at an on demand database system of a provider may take into consideration various technological factors as well as business service factors e.g. an end user typically expects to receive all or most columns but not necessarily all rows the organization s standing with the provider sensitivity or urgency of the data being queried bandwidth heap limit other pending queries by the same and or other organizations etc. to set a threshold value indicating a maximum and or minimum number of rows and or columns to be returned so that in response to each query a controlled amount of data may be fetched to better accommodate any number and type of queries that are expected to return a large number or sections of rows and columns of data. In one embodiment a formula may be formed and applied to dynamically calculate the threshold value as will be further referenced with respect to so that each query may be individually evaluated and adjusted for achieving customized dynamic and intelligent results as opposed to simply applying a dummy threshold number to each query. However in one embodiment and for achieving maximum efficiency a predetermined minimum and or maximum integer threshold range or value e.g. an integer number such as 1000 rows and 2000 columns etc. may be set to determine whether a query qualifies to be returned as requested or needs to go through a set of calculations.

Evaluation logic may match the anticipated results against the predetermined integer threshold range or value to determine whether the query qualifies to be returned as requested. If the query satisfies the threshold value the query is processed and the results including any number of rows and columns of data are returned to the user at client computing device via user interface . If however the threshold value is not satisfied such as the return is expected to include a greater number of rows and columns than the threshold number of rows and columns respectively then evaluation logic may forward the query to calculation logic .

In one embodiment calculation logic applies a predetermined formula to the query to calculate any adjustments that can be applied to optimize the results. For simplicity for example the threshold value allows for a maximum of 100 rows and 200 columns or in other words 20 000 sets of rows columns 100 rows 200 columns per response but the query placed by the user demands a return of 120 rows and 160 columns or 19 200 sets . In this case the query may be considered valid by evaluation logic and satisfied because the total number of rows columns sets 19 200 sets is less than the number of sets 20 000 sets allowed by the threshold value even though the number of rows 120 rows demanded by the query is more than the number of rows 100 rows allowed by the threshold values. It is contemplated that any order or level of flexibility may be built into the threshold value or formula as necessitated or desired by the system administrator and or the limitations of the database system.

Continuing with the example if for example the return to the query demands 150 rows and 200 columns or 30 000 sets the query may be rejected by evaluation logic and passed on to calculation logic . In one embodiment at calculation logic a predetermined formula may be applied to the query to determine the best manner in which the results may be modified so as to fetch the maximum amount of data to the user at client computing device without having to interrupt query processes compromise system resources lower user expectations etc. For example since given the general nature of queries columns tend to be more important to the user than rows and accordingly upon calculation logic performing calculation return generation and adjustment logic may adjust or modify the returns so that all 200 columns and 100 rows are prepared as a first return while another set of 200 columns and the remaining 50 rows is prepared as a second return for achieving maximum optimization. Upon modification of the results by return generation and adjustment logic the adjusted first and second returns are forwarded on to transmission logic which fetches the two returns to client computing device to be viewed by the user via user interface .

In one embodiment calculation logic includes a calculation framework to employ any number and type of configurable parameters to dynamically and seamlessly facilitate various calculation sets using any number and type of formulae as provided or requested by the user. These formulae may be based on any number and type of techniques such as but not limited to hybrid multiple backoff algorithms binary exponential backoff schemes the Markov chain model etc. In one embodiment a hybrid of multiple back algorithms may be employed so that for example in case of multiple ranges or values one formula may be used for a first column range and or a row range whereas another formula may be used for a second column range and or row range etc. to achieve maximum flexibility and efficiency. Further these formulae and ranges and may be set as configurable parameters of the calculation framework of calculation logic for performing continuous as well as future calculations without having to recreate or reconfigure these parameters each time a request is placed by the user. It is contemplated however that the user may choose to alter or modify any number and type of configurable parameters based on any number and type of calculation techniques formulae and or as desired or necessitated by the user the system administrator at the organization and or system resources of the on demand database system etc.

Communication compatibility logic may facilitate the ability to dynamically communicate and stay configured with any number and type of software application developing tools models data processing servers database platforms and architectures programming languages and their corresponding platforms etc. Communication compatibility logic further facilitates the ability to dynamically communicate and stay configured with various computing devices e.g. mobile computing devices such as various types of smartphones tablet computers laptop etc. networks e.g. Internet intranet cloud computing network etc. websites e.g. social networking websites such as Facebook LinkedIn Google etc. and the like while ensuring compatibility with changing technologies parameters protocols standards etc.

It is contemplated that any number and type of components may be added to and or removed from data fetching mechanism to facilitate various embodiments including adding removing and or enhancing certain features. For brevity clarity ease of understanding and not to obscure data fetching mechanism many of the standard and or known components such as those of a computing device are not shown or discussed here. It is contemplated that embodiments are not limited to any particular technology topology system architecture and or standard and are dynamic enough to adopt and adapt to any future changes.

Method begins at with receiving a request query for data from a client computing device. The request is received at a server computing device hosting data fetching mechanism of . The request may be placed by an end user e.g. a representative of an organization such as a sales representative a human resource director a finance manager etc. using the client computing device e.g. mobile computing device that is in communication with the server computing device over a network e.g. cloud network . The request may include a query for certain amount and type of data such as human resources related data quarterly sales data product related data etc. At block the request is evaluated to determine whether it satisfies a predefined threshold criteria e.g. a threshold value a threshold range etc. as determined by a representative e.g. a system administrator a software developer etc. of the on demand database system. If the request satisfies the threshold criteria the request is processed by obtaining the necessary data and the results are transmitted to the client computing device at block .

If however the request does not satisfy the threshold criteria the potential results are calculated for adjustment according to one or more formulae as predetermined by the representative of the on demand database system at block . Once the adjustments have been calculated at block any necessary modifications are made in accordance with the predefined threshold criteria. As aforementioned with regard to the adjustment may include splitting the response into multiple returns so that the threshold criteria is satisfied while providing ample data to the end user and without causing any potential query bottlenecks or system clogs. At block the adjusted data returns are transmitted to the client computing device for the user to view via a user interface.

As aforementioned with respect to calculation logic may be used to apply a predefined formula to calculate the possibility of dividing a query response into multiple returns to then be fetched to the user while complying with the predefined threshold criteria. Method begins at block with a set number of maximum rows being a predefined number of rows such as 2000 according to the predetermined threshold criteria where maxRows refers to the maximum number of rows per query return. At block the maximum number of rows to return is set equal to and based on a maximum number of character large object clob columns where maxByClob refers to the maximum number of rows to return based on clob columns.

At block a determination is made as to whether the number of clob columns is greater than zero where numClobs refers to the number of clob columns in result. If not at block the maximum number of rows is set to a new maximum e.g. equaling min max 1 maxByClob max Rows . Here for example the inner term ensures that at least one row is returned while the outer term ensures that the backoff is reflected in the value outputted by the formula. If yes at block the maximum number of clob columns is set to equal for example 2000 2and continues on to block . In other words at block an exponential backoff is performed using the number of Clob columns as a parameter.

At block a determination is made as to whether the number of binary large object blob columns is greater than zero where numBlobs refers to the number of blob columns in results. If yes at block the maximum number of rows are set to a number e.g. min 1 maxRows . If not and after the maximum number of rows are set to a number at block the process continues with a determination as to whether any selected fields are greater than a predefined number of fields such as . If yes at block the maximum number of fields is calculated to a first number such as 2000 2. Stated differently an exponential back off is performed using the number of selected fields as the controlling parameter and that the innermost term controls the rate of the exponential backoff to a degree using a predefined and configurable parameter value which in this case is 100. If not at block the maximum number of fields is calculated to a second number such as 100 000 selected Fields where selected Fields refers to the number of selected fields and where maxByField refers to the number of rows to return based on the number of regular fields selected. In other words a linear backoff in the number of rows returned is performed using the number of selected fields as the controlling parameter when the number of selected fields exceeds a predefined and configurable threshold which in this case is 400 fields. Further the threshold for applying the linear backoff formula is chosen carefully so that a reasonable number of rows are returned for queries that select greater than 400 columns. At block the maximum number of rows to return is calculated such as to be min max 1 maxByField maxRows . Here the nested term ensures that at least one row is returned while the outer term ensures that the backoff whether exponential or linear is reflected in the result of the calculation.

It is contemplated that embodiments are not limited to any of the calculation sequences or formulae illustrated with reference to and the calculation may be set to be performed by calculation logic of in any number of ways as determined by the system administrator in consideration of any number and type of aforementioned factors such as heap limits overall system limitations query sizes and traffic end user organizational expectations and the like.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. static memory such as flash memory static random access memory SRAM volatile but high data rate RAM etc. and a secondary memory e.g. a persistent storage device including hard disk drives and persistent multi tenant data base implementations which communicate with each other via a bus . Main memory includes emitted execution data e.g. data emitted by a logging framework and one or more trace preferences which operate in conjunction with processing logic and processor to perform the methodologies discussed herein.

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and functionality of data fetching mechanism as described with reference to and other figures discussed herein.

The computer system may further include a network interface card . The computer system also may include a user interface such as a video display unit a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. an integrated speaker . The computer system may further include peripheral device e.g. wireless or wired communication devices memory devices storage devices audio processing devices video processing devices etc. The computer system may further include a Hardware based API logging framework capable of executing incoming requests for services and emitting execution data responsive to the fulfillment of such incoming requests.

The secondary memory may include a machine readable storage medium or more specifically a machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions of data fetching mechanism as described with reference to and other figures described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface card . The machine readable storage medium may include transitory or non transitory machine readable storage media.

Portions of various embodiments may be provided as a computer program product which may include a computer readable medium having stored thereon computer program instructions which may be used to program a computer or other electronic devices to perform a process according to the embodiments. The machine readable medium may include but is not limited to floppy diskettes optical disks compact disk read only memory CD ROM and magneto optical disks ROM RAM erasable programmable read only memory EPROM electrically EPROM EEPROM magnet or optical cards flash memory or other type of media machine readable medium suitable for storing electronic instructions.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices e.g. an end station a network element . Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals . In addition such electronic devices typically include a set of one or more processors coupled to one or more other components such as one or more storage devices non transitory machine readable storage media user input output devices e.g. a keyboard a touchscreen and or a display and network connections. The coupling of the set of processors and other components is typically through one or more busses and bridges also termed as bus controllers . Thus the storage device of a given electronic device typically stores code and or data for execution on the set of one or more processors of that electronic device. Of course one or more parts of an embodiment may be implemented using different combinations of software firmware and or hardware.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in herein and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . User system further includes Mobile OS e.g. iOS by Apple Android WebOS by Palm etc. . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Core processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Pat. No. 7 730 478 entitled Method and System for Allowing Access to Developed Applicants via a Multi Tenant Database On Demand Database Service issued Jun. 1 2010 to Craig Weissman which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

Any of the above embodiments may be used alone or together with one another in any combination. Embodiments encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements. It is to be understood that the above description is intended to be illustrative and not restrictive.

