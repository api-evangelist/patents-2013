---

title: Malicious content analysis using simulated user interaction without user involvement
abstract: Techniques for detecting malicious content using simulated user interactions are described herein. In one embodiment, a monitoring module monitors activities of a malicious content suspect executed within a sandboxed operating environment. In response to detection of a predetermined event triggered by the malicious content suspect requesting a user action on a graphical user interface (GUI) presented by the malicious content suspect, simulating, a user interaction module simulates a user interaction with the GUI without user intervention. An analysis module analyzes activities of the malicious content suspect in response to the simulated user interaction to determine whether the malicious content suspect should be declared as malicious.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104867&OS=09104867&RS=09104867
owner: FireEye, Inc.
number: 09104867
owner_city: Milpitas
owner_country: US
publication_date: 20130313
---
Embodiments of the present invention relate generally to malicious content detection. More particularly embodiments of the invention relate to performing a malicious content analysis using simulated user interaction on a malicious content suspect without user involvement.

Malicious software or malware for short may include any program or file that is harmful by design to a computer. Malware includes computer viruses worms Trojan horses adware spyware and any programming that gathers information about a computer or its user or otherwise operates without permission. The owners of the computers are often unaware that these programs have been added to their computers and are often similarly unaware of their function.

Malicious network content is a type of malware distributed over a network via websites e.g. servers operating on a network according to a hypertext transfer protocol HTTP standard or other well known standard. Malicious network content distributed in this manner may be actively downloaded and installed on a computer without the approval or knowledge of its user simply by the computer accessing the web site hosting the malicious network content the malicious web site . Malicious network content may be embedded within objects associated with web pages hosted by the malicious web site. Malicious network content may also enter a computer on receipt or opening of email. For example email may contain an attachment such as a PDF document with embedded malicious executable programs. Furthermore malicious content may exist in files contained in a computer memory or storage device having infected those files through any of a variety of attack vectors.

Various processes and devices have been employed to prevent the problems associated with malicious content. For example computers often run antivirus scanning software that scans a particular computer for viruses and other forms of malware. The scanning typically involves automatic detection of a match between content stored on the computer or attached media and a library or database of signatures of known malware. The scanning may be initiated manually or based on a schedule specified by a user or system administrator associated with the particular computer. Unfortunately by the time malware is detected by the scanning software some damage on the computer or loss of privacy may have already occurred and the malware may have propagated from the infected computer to other computers. Additionally it may take days or weeks for new signatures to be manually created the scanning signature library updated and received for use by the scanning software and the new signatures employed in new scans.

Moreover anti virus scanning utilities may have limited effectiveness to protect against all exploits by polymorphic malware. Polymorphic malware has the capability to mutate to defeat the signature match process while keeping its original malicious capabilities intact. Signatures generated to identify one form of a polymorphic virus may not match against a mutated form. Thus polymorphic malware is often referred to as a family of virus rather than a single virus and improved anti virus techniques to identify such malware families is desirable.

Another type of malware detection solution employs virtual environments to replay content within a sandbox established by virtual machines VMs . Such solutions monitor the behavior of content during execution to detect anomalies that may signal the presence of malware. One such system offered by FireEye Inc. the assignee of the present patent application employs a two phase malware detection approach to detect malware contained in network traffic monitored in real time. In a first or static phase a heuristic is applied to network traffic to identify and filter packets that appear suspicious in that they exhibit characteristics associated with malware. In a second or dynamic phase the suspicious packets and typically only the suspicious packets are replayed within one or more virtual machines. For example if a user is trying to download a file over a network the file is extracted from the network traffic and analyzed in the virtual machine. The results of the analysis aids in determining whether the file is malicious. The two phase malware detection solution may detect numerous types of malware and even malware missed by other commercially available approaches. Through verification the two phase malware detection solution may also achieve a significant reduction of false positives relative to such other commercially available approaches. Dealing with false positives in malware detection may needlessly slow or interfere with download of network content or receipt of email for example. This two phase approach has even proven successful against many types of polymorphic malware and other forms of advanced persistent threats.

Some malware may involve user interaction before performing an unauthorized action that may cause damages. For example malware may display a graphical user interface GUI such as a dialog box requesting a user to interact with the GUI. Once the user clicks on a button of the GUI the malware then performs an unauthorized action. In another example malware may display a dialog box and only performs the unauthorized action when a user closes or terminates the dialog box. Thus in order to perform a malware detection analysis a user or an administrator has to manually interact with the GUI presented by the malware during the execution of the malware. For a malware detection system that performs thousands of analysis such a requirement of user interactions is unacceptable and inefficient.

Various embodiments and aspects of the invention will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

Techniques for detecting malware using simulated user interactions are described herein. According to some embodiments a user interaction simulation mechanism is utilized by a malicious content detection system to simulate user interactions with a GUI presented by a malicious content suspect during a detection of malicious content without requiring an actual user be involved such that the detection process can be automated without interruption. According to one embodiment a malicious content suspect may be executed within an automated environment. When a GUI such as a dialog box is presented by the malicious content suspect the malicious content detection system invokes the automated environment to simulate a user action performed on the GUI such as an activation of an OK button or a CLOSE button such that the detection process can continue without user interaction. According to another embodiment the malicious content detection system hooks onto certain GUI application programming interfaces APIs of an operating system such that when the malicious content suspect presents a GUI page the malicious content detection system can receive a notification from the operating system and intercept the communication between the GUI and the operating system to manipulate a user interaction with the GUI such as an activation of an OK button or a CLOSE button without involving an actual user. As a result the malicious content detection process can be performed automatically without interruption.

Controller may be implemented as part of a VM monitor or manager VMM also referred to as a hypervisor for managing or monitoring VMs which may be hosted by a host operating system OS . VM may be hosted by a guest OS. The host OS and the guest OS may be the same type of operating systems or different types of operating systems e.g. Windows Linux Unix Mac OS iOS etc. or different versions thereof. A VM is a simulation of a machine abstract or real that is usually different from the target machine where it is being simulated on . Virtual machines may be based on the specifications of a hypothetical computer or emulate the computer architecture and functions of a real world computer. A virtual machine referred to herein can be any type of virtual machine such as for example hardware emulation full virtualization para virtualization and operating system level virtualization virtual machines.

According to one embodiment when malicious content suspect is received for dynamic analysis scheduler of controller is configured to identify and select a VM in this example VM from VM pool having various VMs that have been configured to closely simulate various target operating environments e.g. particular version of an OS with particular versions of certain software applications installed therein in which malicious content suspect is to be analyzed. VM pool may be configured in the corresponding VM profiles. Scheduler then launches VM in which monitoring module is running within the VM and configured to monitor activities and behavior of malicious content suspect .

In addition monitoring module maintains a persistent communication channel with analysis module of controller to communicate certain events or activities of malicious content suspect during the execution. In response to detecting certain predetermined events triggered by malicious content suspect monitoring module is configured to send a message via the communication channel to analysis module where the message may be recorded as part of event log . The message includes information identifying an event triggered by malicious content suspect . Event log records events that have been selectively monitored and detected by monitoring module such as for example GUI events that require a user intervention. Content of the event log may be stored in a persistent storage as part of event log file s of VM disk file associated with VM . The recorded events may be analyzed by analysis module based on a set of rules to determine whether malicious content suspect is indeed malicious or should be declared or considered with high probability of malicious.

In one embodiment in response to certain GUI events such as displaying a GUI dialog box monitoring module invokes user interface module to simulate a user interaction with the GUI events without requiring an actual user be involved. For example if a dialog box is displayed and prompts a user for a confirmation by clicking an OK button user interface module is configured to send a command simulating an activation of the OK button presented by the dialog box such that the execution of malicious content suspect can continue without having to wait for user interaction from a user. Thereafter monitoring module monitors the behavior of malicious content suspect after the simulated user interaction with the GUI and communicates any suspicious behavior to controller via the communication channel.

According to some embodiments the user interaction simulation can be implemented using an automated operating environment or automated software or tool such as for example a scripting automated environment or tool. is a block diagram illustrating a mechanism for simulating a user interaction according to one embodiment of the invention. System may be implemented as part of VM of system of . Referring to in this example malicious content suspect is executed within a shell of automated environment while the execution of the malicious content suspect is monitored by monitoring module via path to detect any GUI events triggered between malicious content suspect and operating system .

When monitoring module detects a GUI event that malicious content suspect presents GUI that requires a user interaction according to one embodiment monitoring module provides a user interaction script which may be dynamically created dependent upon the specific GUI event. User interaction module then executes script and sends a user interaction comment to automated environment to allow the automated environment to simulate a user interaction on GUI without having to involve an actual user s action.

In one embodiment automated environment may be implemented using a scripting programming language for automating Microsoft Windows GUI. It uses a combination of simulated keystrokes mouse movement and window control manipulation to automate tasks. Script may be dynamically created by monitoring module or alternatively by analysis module of controller of in response to a message received from monitoring module . Script may be created in a batch file having scripting statements that are compatible with the scripting programming language.

For example in the Windows operating environment if malicious content suspect is about to execute a file in this example FileX.exe the batch file may contain the following statements 

This batch will cause a file browser such as the Windows Explorer to open a new window with malware.exe selected. At that point the script will send a ENTER command to simulate that a user pushed the ENTER key. In another embodiment the script may wait for a predetermined period of time and try to find an active window for the malicious content. If it finds such a window it will send a CLOSE message to it simulating a user clicking the close button or menu in order to suppress the display of the dialog box.

If malicious content suspect is about to access a universal resource locator URL the batch file may contain the following statements 

With the file association the Windows shell will launch the automated scripting environment or tool with the batch file as script to execute. When the script runs it will check if the first parameter is URL or FILE in case of URL it will retrieve the second parameter and execute it e.g. Internet browsers such as Internet Explorer IE or Firefox with the third parameter as an argument. Since the script knows from the filename what browser is in use it will then wait for the proper dialog box to pop up.

According to another embodiment instead of using an automated scripting environment monitoring module may register a hook to certain GUI events with the operating system such that whenever malicious content suspect triggers a GUI event such as displaying a dialog box monitoring module will receive a notification such as a callback from the operating system. As a result monitoring module can intercept the communications between malicious content suspect and the operating system and user interaction module simulates the user interactions of the GUI without requiring an actual user. For example user interaction module may process the GUI calls from malicious content suspect populates a response e.g. a return data structure that the operating system would have returned and returns the response back to malicious content suspect . The malicious content suspect is unaware that it is communicating with user interaction module malicious content suspect would still consider communicating with operating system .

For example in the Windows operating environment user interaction module may register a hook by calling SetWindowsHookEx function with a callback function as a hook procedure via WH CALLWNDPROC. When the operating system calls back due to certain GUI activities the callback function can simulate the user interactions such as for example by sending a message such as SendMessage WM CLOSE to a parent window child control window or calling a window function directly. Similar operations can be performed to simulate an OK button or opening a file etc. The GUI APIs for hooking may include MessageBoxA MessageBoxExA MessageBoxIndirectA MessageBoxTimeoutA MessageBoxW MessageBoxExW MessageBoxIndirectW MessageBoxTimeoutW GetOpenFileNameA GetOpenFileNameW.

In one embodiment the user interaction module registers hooks to APIs such as CreateWindowExA and CreateWindowExW. When a new dialog box is about to be displayed the registered hooks are called and the user interaction module builds an internal data structure e.g. template that represents the contents and layout of the dialog box. After the dialog box has been created it is compared to a library of dialogs that the system is trained to dismiss. The library contents may be written in a script language. Every library dialog template has a custom function that is used to close the corresponding dialog. After a matched dialog template is found the dialog box is dismissed using associated library function. Note that other user interface buttons can also be applied herein. For example a button can be either a predefined button on a system dialog e.g. YES NO CANCEL IGNORE OK TRY RETRY HELP CONTINUE and or ABORT buttons or controls or any button on a third party developed dialog.

Note that throughout this application network content is utilized as an example of content for malicious content detection purposes however other types of content can also be applied. Network content may include any data transmitted over a network i.e. network data . Network data may include text software images audio or other digital data. An example of network content includes web content or any network data that may be transmitted using a Hypertext Transfer Protocol HTTP HyperText Markup Language HTML protocol or be transmitted in a manner suitable for display on a Web browser software application. Another example of network content includes email messages which may be transmitted using an email protocol such as Simple Mail Transfer Protocol SMTP Post Office Protocol version 3 POP3 or Internet Message Access Protocol IMAP4 . A further example of network content includes Instant Messages which may be transmitted using an Instant Messaging protocol such as Session Initiation Protocol SIP or Extensible Messaging and Presence Protocol XMPP . In addition network content may include any network data that is transferred using other data transfer protocols such as File Transfer Protocol FTP .

The malicious network content detection system may monitor exchanges of network content e.g. Web content in real time rather than intercepting and holding the network content until such time as it can determine whether the network content includes malicious network content. The malicious network content detection system may be configured to inspect exchanges of network content over the communication network identify suspicious network content and analyze the suspicious network content using a virtual machine to detect malicious network content. In this way the malicious network content detection system may be computationally efficient and scalable as data traffic volume and the number of computing devices communicating over the communication network increase. Therefore the malicious network content detection system may not become a bottleneck in the computer network system .

The communication network may include a public computer network such as the Internet in which case a firewall may be interposed between the communication network and the client device . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks. Though the communication network may include any type of network and be used to communicate different types of data communications of web data may be discussed below for purposes of example.

The malicious network content detection system is shown as coupled with the network by a network tap e.g. a data packet capturing device . The network tap may include a digital network tap configured to monitor network data and provide a copy of the network data to the malicious network content detection system . Network data may comprise signals and data that are transmitted over the communication network including data flows from the server device to the client device . In one example the network tap monitors and copies the network data without an appreciable decline in performance of the server device the client device or the communication network . The network tap may copy any portion of the network data for example any number of data packets from the network data. In embodiments where the malicious content detection system is implemented as an dedicated appliance or a dedicated computer system the network tap may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication network to non disruptively tap traffic thereon and provide a copy of the traffic to the heuristic module . In other embodiments the network tap can be integrated into a firewall router switch or other network device not shown or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to copy traffic from virtual networks.

The network tap may also capture metadata from the network data. The metadata may be associated with the server device and or the client device . For example the metadata may identify the server device and or the client device . In some embodiments the server device transmits metadata which is captured by the tap . In other embodiments a heuristic module described herein may determine the server device and the client device by analyzing data packets within the network data in order to generate the metadata. The term content as used herein may be construed to include the intercepted network data and or the metadata unless the context requires otherwise.

The malicious network content detection system may include a heuristic module a heuristics database a scheduler a virtual machine pool an analysis engine and a reporting module . In some embodiments the network tap may be contained within the malicious network content detection system .

The heuristic module receives the copy of the network data from the network tap and applies heuristics to the data to determine if the network data might contain suspicious network content. The heuristics applied by the heuristic module may be based on data and or rules stored in the heuristics database . The heuristic module may examine the image of the captured content without executing or opening the captured content. For example the heuristic module may examine the metadata or attributes of the captured content and or the code image e.g. a binary image of an executable to determine whether a certain portion of the captured content matches a predetermined pattern or signature that is associated with a particular type of malicious content. In one example the heuristic module flags network data as suspicious after applying a heuristic analysis. This detection process is also referred to as a static malicious content detection. The suspicious network data may then be provided to the scheduler . In some embodiments the suspicious network data is provided directly to the scheduler with or without buffering or organizing one or more data flows.

When a characteristic of the packet such as a sequence of characters or keyword is identified that meets the conditions of a heuristic a suspicious characteristic of the network content is identified. The identified characteristic may be stored for reference and analysis. In some embodiments the entire packet may be inspected e.g. using deep packet inspection techniques and multiple characteristics may be identified before proceeding to the next step. In some embodiments the characteristic may be determined as a result of an analysis across multiple packets comprising the network content. A score related to a probability that the suspicious characteristic identified indicates malicious network content is determined.

The heuristic module may also provide a priority level for the packet and or the features present in the packet. The scheduler may then load and configure a virtual machine from the virtual machine pool in an order related to the priority level and dispatch the virtual machine to the analysis engine to process the suspicious network content.

The heuristic module may provide the packet containing the suspicious network content to the scheduler along with a list of the features present in the packet and the malicious probability scores associated with each of those features. Alternatively the heuristic module may provide a pointer to the packet containing the suspicious network content to the scheduler such that the scheduler may access the packet via a memory shared with the heuristic module . In another embodiment the heuristic module may provide identification information regarding the packet to the scheduler such that the scheduler replayer or virtual machine may query the heuristic module for data regarding the packet as needed.

The scheduler may identify the client device and retrieve a virtual machine associated with the client device . A virtual machine may itself be executable software that is configured to mimic the performance of a device e.g. the client device . The virtual machine may be retrieved from the virtual machine pool . Furthermore the scheduler may identify for example a Web browser running on the client device and retrieve a virtual machine associated with the web browser.

In some embodiments the heuristic module transmits the metadata identifying the client device to the scheduler . In other embodiments the scheduler receives one or more data packets of the network data from the heuristic module and analyzes the one or more data packets to identify the client device . In yet other embodiments the metadata may be received from the network tap .

The scheduler may retrieve and configure the virtual machine to mimic the pertinent performance characteristics of the client device . In one example the scheduler configures the characteristics of the virtual machine to mimic only those features of the client device that are affected by the network data copied by the network tap . The scheduler may determine the features of the client device that are affected by the network data by receiving and analyzing the network data from the network tap . Such features of the client device may include ports that are to receive the network data select device drivers that are to respond to the network data and any other devices coupled to or contained within the client device that can respond to the network data. In other embodiments the heuristic module may determine the features of the client device that are affected by the network data by receiving and analyzing the network data from the network tap . The heuristic module may then transmit the features of the client device to the scheduler .

The virtual machine pool may be configured to store one or more virtual machines. The virtual machine pool may include software and or a storage medium capable of storing software. In one example the virtual machine pool stores a single virtual machine that can be configured by the scheduler to mimic the performance of any client device on the communication network . The virtual machine pool may store any number of distinct virtual machines that can be configured to simulate the performance of a wide variety of client devices .

The analysis engine simulates the receipt and or display of the network content from the server device after the network content is received by the client device to analyze the effects of the network content upon the client device . The analysis engine may identify the effects of malware or malicious network content by analyzing the simulation of the effects of the network content upon the client device that is carried out on the virtual machine. There may be multiple analysis engines to simulate multiple streams of network content. The analysis engine may be configured to monitor the virtual machine for indications that the suspicious network content is in fact malicious network content. Such indications may include unusual network transmissions unusual changes in performance and the like. This detection process is referred to as a dynamic malicious content detection.

The analysis engine may flag the suspicious network content as malicious network content according to the observed behavior of the virtual machine. The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information identify the packets of the network content containing the malware. Additionally the server device may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

The computer network system may also include a further communication network which couples the malicious content detection system MCDS with one or more other MCDS of which MCDS and MCDS are shown and a management system which may be implemented as a Web server having a Web interface. The communication network may in some embodiments be coupled for communication with or part of network . The management system is responsible for managing the MCDS and providing updates to their operation systems and software programs. Also the management system may cause malware signatures generated by any of the MCDS to be shared with one or more of the other MCDS for example on a subscription basis. Moreover the malicious content detection system as described in the foregoing embodiments may be incorporated into one or more of the MCDS or into all of them depending on the deployment. Also the management system itself or another dedicated computer station may incorporate the malicious content detection system in deployments where such detection is to be conducted at a centralized resource.

Further information regarding an embodiment of a malicious content detection system can be had with reference to U.S. Pat. No. 8 171 553 the disclosure of which being incorporated herein by reference in its entirety.

As described above the detection or analysis performed by the heuristic module may be referred to as static detection or static analysis which may generate a first score e.g. a static detection score according to a first scoring scheme or algorithm. The detection or analysis performed by the analysis engine is referred to as dynamic detection or dynamic analysis which may generate a second score e.g. a dynamic detection score according to a second scoring scheme or algorithm. The first and second scores may be combined according to a predetermined algorithm to derive a final score indicating the probability that a malicious content suspect is indeed malicious or should be declared or considered with high probability of malicious.

Furthermore detection systems and may deployed in a variety of distribution ways. For example detection system may be deployed as a detection appliance at a client site to detect any suspicious content for example at a local area network LAN of the client. In addition any of MCDS and MCDS may also be deployed as dedicated data analysis systems. Systems and may be configured and managed by a management system over network which may be a LAN a wide area network WAN such as the Internet or a combination of both. Management system may be implemented as a Web server having a Web interface to allow an administrator of a client e.g. corporation entity to log in to manage detection systems and . For example an administrator may able to activate or deactivate certain functionalities of malicious content detection systems and or alternatively to distribute software updates such as malicious content definition files e.g. malicious signatures or patterns or rules etc. Furthermore a user can submit via a Web interface suspicious content to be analyzed for example by dedicated data analysis systems . As described above malicious content detection includes static detection and dynamic detection. Such static and dynamic detections can be distributed amongst different systems over a network. For example static detection may be performed by detection system at a client site while dynamic detection of the same content can be offloaded to the cloud for example by any of detection systems . Other configurations may exist.

Referring to in one embodiment system includes processor and peripheral interface also referred to herein as a chipset to couple various components to processor including memory and devices via a bus or an interconnect. Processor may represent a single processor or multiple processors with a single processor core or multiple processor cores included therein. Processor may represent one or more general purpose processors such as a microprocessor a central processing unit CPU or the like. More particularly processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processors such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP a network processor a graphics processor a network processor a communications processor a cryptographic processor a co processor an embedded processor or any other type of logic capable of processing instructions. Processor is configured to execute instructions for performing the operations and steps discussed herein.

Peripheral interface may include memory control hub MCH and input output control hub ICH . Peripheral interface may include a memory controller not shown that communicates with a memory . Peripheral interface may also include a graphics interface that communicates with graphics subsystem which may include a display controller and or a display device. Peripheral interface may communicate with graphics device via an accelerated graphics port AGP a peripheral component interconnect PCI express bus or other types of interconnects.

An MCH is sometimes referred to as a Northbridge and an ICH is sometimes referred to as a Southbridge. As used herein the terms MCH ICH Northbridge and Southbridge are intended to be interpreted broadly to cover various chips who functions include passing interrupt signals toward a processor. In some embodiments the MCH may be integrated with processor . In such a configuration peripheral interface operates as an interface chip performing some functions of the MCH and ICH. Furthermore a graphics accelerator may be integrated within the MCH or processor .

Memory may include one or more volatile storage or memory devices such as random access memory RAM dynamic RAM DRAM synchronous DRAM SDRAM static RAM SRAM or other types of storage devices. Memory may store information including sequences of instructions that are executed by processor or any other device. For example executable code and or data of a variety of operating systems device drivers firmware e.g. input output basic system or BIOS and or applications can be loaded in memory and executed by processor . An operating system can be any kind of operating systems such as for example Windows operating system from Microsoft Mac OS iOS from Apple Android from Google Linux Unix or other real time or embedded operating systems such as VxWorks.

Peripheral interface may provide an interface to IO devices such as devices including wireless transceiver s input device s audio IO device s and other IO devices . Wireless transceiver may be a WiFi transceiver an infrared transceiver a Bluetooth transceiver a WiMax transceiver a wireless cellular telephony transceiver a satellite transceiver e.g. a global positioning system GPS transceiver or a combination thereof. Input device s may include a mouse a touch pad a touch sensitive screen which may be integrated with display device a pointer device such as a stylus and or a keyboard e.g. physical keyboard or a virtual keyboard displayed as part of a touch sensitive screen . For example input device may include a touch screen controller coupled to a touch screen. The touch screen and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch screen.

Audio IO may include a speaker and or a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and or telephony functions. Other optional devices may include a storage device e.g. a hard drive a flash memory device universal serial bus USB port s parallel port s serial port s a printer a network interface a bus bridge e.g. a PCI PCI bridge sensor s e.g. a motion sensor a light sensor a proximity sensor etc. or a combination thereof. Optional devices may further include an imaging processing subsystem e.g. a camera which may include an optical sensor such as a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor utilized to facilitate camera functions such as recording photographs and video clips.

Note that while illustrates various components of a data processing system it is not intended to represent any particular architecture or manner of interconnecting the components as such details are not germane to embodiments of the present invention. It will also be appreciated that network computers handheld computers mobile phones and other data processing systems which have fewer components or perhaps more components may also be used with embodiments of the invention.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices. Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. firmware software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

