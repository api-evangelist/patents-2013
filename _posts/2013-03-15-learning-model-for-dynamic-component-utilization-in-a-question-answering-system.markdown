---

title: Learning model for dynamic component utilization in a question answering system
abstract: Mechanisms are provided in a data processing system for utilizing algorithms based on categories in a question answering system. The mechanisms capture a history of performance and correctness metrics for identifying efficiency of respective algorithms for finding answers to questions in respective question categories in a question answering system. The mechanisms determine sets of algorithms to use for respective question categories according to efficiency and correctness analysis. The mechanisms determine a question category of a given input question and execute a set of algorithms corresponding to the question category of the given input question that meet an efficiency threshold to contribute to finding a correct answer for the given input question.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171478&OS=09171478&RS=09171478
owner: International Business Machines Corporation
number: 09171478
owner_city: Armonk
owner_country: US
publication_date: 20130315
---
The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms and a learning model for dynamic component utilization in a question answering system.

With the increased usage of computing networks such as the Internet humans are currently inundated and overwhelmed with the amount of information available to them from various structured and unstructured sources. However information gaps abound as users try to piece together what they can find that they believe to be relevant during searches for information on various subjects. To assist with such searches recent research has been directed to generating Question and Answer QA systems which may take an input question analyze it and return results indicative of the most probable answer to the input question. QA systems provide automated mechanisms for searching through large sets of sources of content e.g. electronic documents and analyze them with regard to an input question to determine an answer to the question and a confidence measure as to how accurate an answer is for answering the input question.

One such QA system is the Watson system available from International Business Machines IBM Corporation of Armonk N.Y. The Watson system is an application of advanced natural language processing information retrieval knowledge representation and reasoning and machine learning technologies to the field of open domain question answering. The Watson system is built on IBM s DeepQA technology used for hypothesis generation massive evidence gathering analysis and scoring. DeepQA takes an input question analyzes it decomposes the question into constituent parts generates one or more hypothesis based on the decomposed question and results of a primary search of answer sources performs hypothesis and evidence scoring based on a retrieval of evidence from evidence sources performs synthesis of the one or more hypothesis and based on trained models performs a final merging and ranking to output an answer to the input question along with a confidence measure.

Various United States patent application Publications describe various types of question and answer systems. U.S. Patent Application Publication No. 2011 0125734 discloses a mechanism for generating question and answer pairs based on a corpus of data. The system starts with a set of questions and then analyzes the set of content to extract answer to those questions. U.S. Patent Application Publication No. 2011 0066587 discloses a mechanism for converting a report of analyzed information into a collection of questions and determining whether answers for the collection of questions are answered or refuted from the information set. The results data are incorporated into an updated information model.

In any given deep question answering system there is no one golden algorithm that will provide the analysis necessary to understand and answer a question. As a result many systems utilize hundreds of algorithms to parse to decompose a question and to formulate answers. However all algorithms are not equal. Some algorithms are computationally difficult while some may rely on large quantities of pre computed data. Thus creating a system that is generalized enough to handle open domain questions while still achieving performance goals is an immense undertaking.

In one illustrative embodiment a method in a data processing system is provided for utilizing algorithm components based on categories in a question answering system. The method comprises capturing a history of performance and correctness metrics for identifying efficiency of respective algorithms for finding answers to questions in respective question categories in a question answering system. The method further comprises determining sets of algorithms to use for respective question categories according to efficiency and correctness analysis. The method further comprises for a given input question determining a question category of the given input question. The method further comprises executing a set of algorithms corresponding to the question category of the given input question that meet an efficiency threshold to contribute to finding a correct answer for the given input question.

In other illustrative embodiments a computer program product comprising a computer usable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

The illustrative embodiments provide a mechanism and a learning model for dynamic component utilization in a question answering system. The mechanism comprises a controller or broker that controls which components implementations of algorithms are run. The controller takes as input the question the question can be classified into logical groupings. An example of logical groups may include for example medical longform general medical symptom medical disease medical treatment etc. The controller also receives runtime information that can be used to train on. The training data may comprise the results for a particular logical grouping of what algorithms were run and the overall system performance. This creates a generalized performance profile for various logical groupings. A machine learning system is employed to take the performance profiles as training data and to maximize the ability of the system to produce high confidence question answering while minimizing the required resources. Once a machine learning model is produced the system uses that model to classify in real time input data from a client and dynamically control the components and resources.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium s having computer usable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The illustrative embodiments may be utilized in many different types of data processing environments. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the present invention and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash basic input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows 7 Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Oracle and or its affiliates .

As a server data processing system may be for example an IBM eServer System p computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system IBM eServer System p and AIX are trademarks of International Business Machines Corporation in the United States other countries or both and LINUX is a registered trademark of Linus Torvalds in the United States other countries or both . Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and for example.

A bus system such as bus or bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as modem or network adapter of may include one or more devices used to transmit and receive data. A memory may be for example main memory ROM or a cache such as found in NB MCH in .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

Moreover the data processing system may take the form of any of a number of different data processing systems including client computing devices server computing devices a tablet computer laptop computer telephone or other communication device a personal digital assistant PDA or the like. In some illustrative examples data processing system may be a portable computing device that is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data for example. Essentially data processing system may be any known or later developed data processing system without architectural limitation.

Returning to in accordance with an illustrative embodiment a question answering system is implemented in data processing system for example on one or both of servers . In one example embodiment the resources of servers are provided in a cloud computing or other hosted environment in which the customer incurs cost based on resource usage. One approach to implementing a question answering system that is general enough to handle open domain questions while still achieving performance goals is to require human intervention to select combinations of algorithms that are best suited for a particular class of questions.

Ablating any set of algorithms can often prove a fruitless endeavor many algorithms may overlap and only when they are used together do they provide an overall benefit to the system. Alternatively one can run all available algorithms for a given question and leave it to a machine learning algorithm to sort out which algorithms produced meaningful results but then one may end up running algorithms understanding complex medical diagnoses when trying to answer a financial question. This creates a balancing act of sorts which algorithms provide the most comprehensive coverage of a question and give the best possible probability the system can understand and or answer the question while at the same time minimizing resource usage and maximizing performance goals.

In one embodiment the QA system imports one or more electronic documents from a corpus of data. This may include retrieving the documents from an external source such as a storage device in a local or remote computing device. The documents may be processed so that the QA system is able to interpret the content of each document. This may include parsing the content of the documents to identify statements found in the documents and other elements of the content such as in the metadata associated with the documents informational statements listed in the content of the documents or the like. The system may parse documents using document markup. In such an embodiment an XML parser may be used to find appropriate document parts. In another embodiment the documents are parsed using native language processing NLP techniques. The QA system may use language processing techniques to parse the documents into sentences and phrases for example.

Within question answering system question answering engine includes logic for performing analysis to break down question and information in corpus to generate answer which is determined to have a high probability of being an accurate answer to question . Question answering engine uses algorithms to perform the analysis. Algorithms comprise specialized software components that perform portions of the analysis. For example algorithms may provide logic to separate or codify question and or information in corpus into semantic constructs or conceptual constructs and to perform pattern matching keyword matching image analysis or any known analysis techniques for extracting information from unstructured content.

For a specific domain of questions QA system may utilize a small subset of algorithms that are specialized for the domain. However for a generalized QA system capable of handling open domain questions QA system may utilize hundreds of algorithms in various combinations depending on the question posed. However all algorithms are not equal. Some algorithms are computationally difficult while some may rely on large quantities of pre computed data in corpus . Furthermore not all algorithms contribute equally to an accurate result. Moreover while individual algorithms may not contribute directly to the answer multiple algorithms may work in concert to perform significant analysis to understand the question or the corpus of data or to formulate the answer .

In accordance with an illustrative embodiment QA system comprises algorithm utilization controller which controls which algorithm components are run for a given question . Algorithm utilization controller takes as input the question which can be classified into logical groupings. Examples of logical groupings may include for example medical longform general medical symptom medical disease medical treatment etc. Algorithm utilization controller receives runtime information that can be used to train. This training data consists of the results of a particular grouping of what algorithm components were run and the overall system performance.

Algorithm utilization controller creates a generalized performance profile for various logical groupings. Algorithm utilization controller comprises a machine learning component that receives the performance profiles as training data and maximizes the ability of the system to produce high confidence question answering while minimizing the required resources. Once algorithm utilization controller produces a machine learning model the system can use that model to classify in real time input data from a client and dynamically control the algorithms and system resources.

In a training phase the QA system receives training data with associated context and predetermined logical groupings and uses algorithms to find answers based on the training data. In the training phase learning controller and analyzer receives the logical groupings the algorithms run as part of the pipeline and their output values and how much influence the outputs of the algorithms contributed to the final answers. Learning controller and analyzer keeps track of the system resource performance. For example learning controller and analyzer may record how long an algorithm runs and how much heap memory is used by each algorithm. Learning controller and analyzer receives the output information algorithm time taken system resources and number of input data items to the algorithm and creates a performance profile for that algorithm and logical grouping.

The performance characteristics used in metrics include heap sizes CPU utilization memory usage the execution time of an algorithm file input and output access and write speeds. Typical performance characteristics in a computing environment include the number of features produced by the algorithm and the number of data structures of a specific type that is currently loaded in memory. The correctness metrics include how many features for each algorithm were produced for that logical grouping and how those features for that logical grouping impact the overall result or the algorithm itself. Finally correctness metrics take into account when a final answer is given whether that answer is correct and how the features and algorithms affected the answer by weight.

In accordance with one example embodiment the algorithms may be modified or enhanced to output the data it operates on and what inputs contributed to its output. Some algorithms may use as input data that is provided as output by another algorithm. These algorithms may be used in various combinations and these combinations may contribute to the answer to varying degrees.

In the training phase logical grouping machine learning system receives the performance profiles as training data. Logical grouping machine learning system receives as input the logical groupings question make up and context and results of the answers. Logical grouping machine learning system makes correlations between algorithms and logical groupings to provide category specific data. The correlation and performance profiles represent a machine learning model that can be used to intelligently select algorithms to run for a given question.

The logical grouping uses intelligence techniques including machine learning models such as but not limited to Logistical Regression. The classifiers or input for the machine learning models can include in one embodiment the features and performance metrics produced by the algorithms for a logical grouping.

Algorithm execution broker uses the machine learning model and the classification of the question and context in a logical grouping to determine which algorithms to run in real time. Based on the logical grouping and performance requirement the algorithm execution broker dynamically controls which algorithms are run and the resources necessary using the machine learning model.

In accordance with one embodiment algorithm utilization controller receives a preferences profile which defines preferences of the customer. Preferences profile may define performance requirements system resource restrictions and desired accuracy of answers. Algorithm utilization controller more particularly algorithm execution broker selects algorithms to use for a given question based on preferences profile meeting the performance requirements and system resource utilization restrictions of the customer.

The components of algorithm utilization controller work in tandem to allow for a more efficient and performance generalized question answering system. As the machine learning model is built and updated the logical grouping of questions and context can be more defined and sub categorized which produces a better deep question and answering system.

Logical grouping component breaks the question down into key areas or groups based on the subject and the context domain. Logical grouping component uses any additional context information to conform and further group the question. For well known areas such as healthcare or medical information these can be matched against predefined broad groups with smaller groups.

Learning controller and analyzer performs algorithm data capture analyzes system performance and performs logical grouping association. The algorithms identify themselves as they run and provide as output the feature set they are interested in. Learning controller and analyzer assigns a weight to each algorithm based on how much each feature affected the results. Weights may be on any unified scale such as zero to one zero to ten or zero to one hundred. Each algorithm may have a unified application programming interface API to provide weight data. Algorithms provides as output how many features are added and which features are added or modified.

Learning controller and analyzer monitors heap size and memory pools. Learning controller and analyzer also captures start and end time for algorithm execution. Learning controller and analyzer also records the number of relevant features in the common analysis structure CAS and the number of CASes in the overall system. The common analysis structure in this embodiment can be generally substituted by a common data structure that is used within the overall system.

Logical grouping machine learning system captures the logical groupings that affect the analyzer and uses the captured groupings to make correlations between groupings and algorithms that contribute to accurate results. Based on these correlations logical grouping machine learning system decides among multiple candidate groupings and multiple candidate sets of algorithms.

Algorithm execution broker selects a set of algorithms for a given question based on the feature types and features in a CAS and based on the influence level with which these features impact the algorithm. Algorithm execution broker applies the learning model to the incoming data and if over a predetermined or dynamically determined threshold of influence sets a given algorithm to execute.

Then the algorithm utilization controller determines whether the question is the last question in the training data block . If the question is not the last question in the training data operation returns to block to break the next question down into key groups. Otherwise if the question is the last question in the training data in block operation ends block .

Thus the illustrative embodiments provide mechanisms for utilizing algorithms based on categories in a question answering system. The mechanisms capture a history of performance and correctness metrics for identifying efficiency of respective algorithms for finding answers to questions in respective question categories in a question answering system. The mechanisms determine sets of algorithms to use for respective question categories according to efficiency performance and correctness analysis. The mechanisms utilize a first set of algorithms to find a first answer to a first question in a first question category and utilizes a second set of algorithms to find a second answer to a second question in a second question category.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

