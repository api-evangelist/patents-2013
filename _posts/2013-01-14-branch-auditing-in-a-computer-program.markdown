---

title: Branch auditing in a computer program
abstract: A branch auditing system can be automatically injected into a computer program, in one embodiment, in response to a programming call provided in source code by a programmer who has selected a particular branch, in a set of possible branches, for auditing. The branch auditing system can record, in an obfuscated data structure, a path taken at the particular branch and the parameters associated with the branch and later an auditor can determine whether the path taken was valid, and if the path taken was invalid, operations can be performed to protect the program, system and/or user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047448&OS=09047448&RS=09047448
owner: Apple Inc.
number: 09047448
owner_city: Cupertino
owner_country: US
publication_date: 20130114
---
The present invention relates to techniques for protecting computer programs and particularly to techniques for protecting computer programs from reverse engineering.

A reverse engineer will typically attack a computer program from at least one of two ways. The reverse engineer can attempt to inspect and or modify the data used by the computer program in order to force the program to do or to achieve the result desired by the reverse engineer. Alternatively the reverse engineer can attempt to attack the program by attacking the control flow of the program. Computer programs use conventional control flow techniques such as IF statements conditional jumps etc. in order to cause the program to go or operate in a certain flow. The control flow of the computer program is typically specified by branches and at each branch the flow can go in at least one of two directions depending upon the instructions in the computer program at a particular branch. Reverse engineers will attempt to hijack a branching control flow instruction in order to cause the program to achieve a result desired by the reverse engineer. For example if the computer program is a program that provides digital rights management and is protecting a digital asset such as a movie a reverse engineer can attempt to hijack a branch control flow instruction to try to force the program to give access to the reverse engineer in order to allow the reverse engineer access to the digital asset or to allow the reverse engineer to take control of the program. For example the reverse engineer can attempt to hijack a conditional jump that determines whether or not a signature during a handshake is valid or not or a conditional jump that determines whether a digital certificate is valid or not. Traditional methods for protecting branching control flow instructions involve verifying the instructions themselves have not been tampered with or the data in the comparison used in the branch have not been tampered with. One problem with these approaches to protect branches is that once a jump has occurred a reverse engineer who has hijacked the program can undo the changes made such as replacing the reverse engineer s corrupted data with correct data and then the maliciously hijacked path will go undetected. U.S. Pat. No. 7 594 111 provides an example of techniques used in the past to protect computer programs from such reverse engineering attacks. Also see U.S. Pat. Nos. 8 056 138 7 823 135 7 620 987 and 7 841 009.

Methods and systems for detecting that a computer program has been attacked by a reverse engineer can use in one embodiment a compiler injected branch auditor which audits the path taken at a selected branch in the control flow of the computer program. In one embodiment a programmer can select one or more branches out of a set of branches for auditing by in one embodiment inserting a call through an API application programming interface to invoke branch auditing for the programmer s selected branches. Thus the programmer s source code specifies a request for branch auditing and also specifies the one or more selected branches which will be typically a subset of the branches in the computer program. These selected branches can be chosen by the programmer based upon their value or importance in maintaining security in the program. For example the programmer can select a branch involved in device or user authentication such as a branch that determines whether a signature or a handshake is valid or not or a branch which determines whether a user s inputted password is valid etc. In one embodiment a compiler when compiling the source code recognizes the branch auditing call inserted by the programmer and automatically injects branch auditing instructions into the final executable code of the computer program in order to audit the selected branch that had been specified directly or indirectly by the call. In one embodiment the compiler injected instructions will cause the computer program when it is executing to record the path taken for the selected branch and to record the parameters associated with the selected branch. The parameters associated with the branch can be in one embodiment those values or variables used in determining the path to take at the branch and the operations to use on those values and or variables to select the path. The operations can be characterized as comparison operations such as equal to or not equal to or greater than or lesser than or greater than or equal to or lesser than or equal to etc. which use the values and or variables to select the path. In one embodiment the operations can be defined by a comparison type.

In one embodiment the compiler injected instructions can store the path taken at the branch and the parameters associated with the branch in an obfuscated audit data structure. The obfuscated audit data structure can use some form of encryption to hide the stored values and the comparison type that represent the path taken and the parameters used in the comparison. The compiler injected instructions can also include executable code that implements a branch auditor that has access to the obfuscated audit data structure and is capable of decrypting the obfuscated and or encrypted values that represent the path taken and the parameters associated with the branch. The branch auditor can determine whether the path taken was valid given the stored path taken and the parameters by performing the comparison specified in the parameters using the saved values specified in the parameters. This comparison can be performed asynchronously relative to the branch being audited in one embodiment in order to decouple the auditing with the particular branch this asynchronous behavior can make it very difficult for a reverse engineer to associate the branch auditor s detection of the hijacking with the particular branch being audited since the two events are separated by both time and space in the sense of computer instructions separating the branch from the auditing instructions . If this comparison performed by the branch auditor shows that the path taken was valid then no action is needed but if this comparison by the branch auditor indicates that the path taken was not valid then the compiler injected code can perform one or more operations to secure the program or the data processing system that is executing the program.

In one embodiment the operations performed to secure the system can include causing the computer program to stop executing thereby terminating or killing the program causing the computer program to report an error to the developer of the program and or to the user of the program causing the computer program to corrupt or erase data such as encryption keys or decryption keys causing the computer program to operate in a safe manner such as refusing to allow the user to engage in financial transactions or otherwise restricting operation of the computer program to a predefined safe mode or causing the computer program to take other actions deemed by the developer to make the system secure relative to the hijacked computer program etc.

The operations of the branch auditor can be performed in ways which appear disconnected from the event of the path being taken this disconnect can make it difficult for a reverse engineer to discover the auditing of particular branches. For example the branch auditor can be invoked randomly in time rather than being invoked immediately after a path is taken from a branch that has been selected for auditing. In another embodiment the branch auditor can be invoked after a predetermined period of time after the path was taken. In other embodiments the branch auditor can be invoked after a selected number of audited branches have been traversed.

The present invention includes systems which can perform one or more methods described herein and also includes machine readable non transitory storage media which contain computer program instructions which when executed cause a data processing system to perform one or more of the methods described herein.

The above summary does not include an exhaustive list of all aspects of the present invention. It is contemplated that the invention includes all systems and methods that can be practiced from all suitable combinations of the various aspects summarized above and also those disclosed in the Detailed Description below.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment. The processes depicted in the figures that follow are performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software or a combination of both. Although the processes are described below in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

In one embodiment a compiler injected branch auditor audits the path taken at a selected branch in the control flow of the computer program. In one embodiment a programmer can select one or more branches out of a larger set of branches for auditing by in one embodiment inserting a call to an application programming interface API to invoke branch auditing for the programmer s selected branch. Thus the programmer s source code can specify a request for branch auditing and also specify the one or more selected branches through the API. Typically the source code can have a large number of branches and the programmer select only a few of those for auditing. In one embodiment the branches can be selected based upon their value or importance in maintaining the security of the computer program.

In another embodiment the branch auditor routine can be invoked asynchronously relative to branch . For example if the branch auditor routine is invoked randomly relative to operation in either time or in a number of instructions after branch then it can become difficult for a reverse engineer to correlate the auditing operation with a particular branch that was selected for auditing. The randomness can be based upon either time or a number of instructions since the selected branch was traversed. In another embodiment the branch auditing instruction can be invoked based upon a predefined number of audited branches having been traversed in conjunction with other parameters such as a random time or random number of instructions after the last audited branch was traversed. In one embodiment the invoking of the branch auditor can be random in time but with a cap or limit in the amount of time which can lapse before the branch auditor is invoked. Similarly if the number of instructions are used to determine when to invoke a branch auditor then the number of instructions can be random but limited by a maximum value to ensure that the branch auditor is invoked at some point.

If the branch auditor routine in operation concludes that the branch taken was invalid based upon the stored comparison type and the stored values used for that comparison type then the system concludes that the program appears to be hijacked and would perform one or more operations in operation which are designed to protect the user or the computer program of the data processing system from the hijacked computer program. The protective operation in operation can include any one or more of a plurality of options including causing the computer program to stop executing as in quitting or terminating the computer program causing the computer program to report an error to the developer of the computer program such as for example establishing a connection over the Internet with the developer to communicate the error and or to the user of the computer program causing the computer program to corrupt or erase data such as encryption keys or decryption keys used in a digital rights management computer program causing the computer program to operate in a safe manner such as refusing to allow the user to engage in financial transactions or causing the computer program to take other actions deemed by the developer or creator of the program to make the system secure relative to the hijacked computer program. The method shown in can be performed for one branch at a time or for a plurality of branches at a time depending on how the branch auditor routine is invoked. In one embodiment the obfuscated audit data structure can include stored data for a plurality of branches which have been accumulated as the computer program executes over time and at some point the branch auditor routine is invoked and can process all of the audit data in the obfuscated audit data structure or a selected portion of that audit data.

As shown in the computer system which is a form of a data processing system includes a bus which is coupled to one or more microprocessor s and a ROM Read Only Memory and volatile RAM and a non volatile memory . The microprocessor is coupled to optional cache . The microprocessor may retrieve the stored instructions from one or more of the memories and and execute the instructions to perform operations described above. These memories represent examples of machine readable non transitory storage media that can store or contain computer program instructions which when executed cause a data processing system to perform the one or more methods described herein. The bus interconnects these various components together and also interconnects these components and to a display controller and display device and to peripheral devices such as input output I O devices which may be one or more of mice touch screens touch pads touch sensitive input devices keyboards modems network interfaces printers and other devices which are well known in the art. Typically the input output devices are coupled to the system through input output controllers . The volatile RAM Random Access Memory is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory. The system can be a system that executes the software which includes the compiler injected instructions that provide branch auditing or system can be a system that runs a compiler that injects the branch auditing software.

The mass storage is typically a magnetic hard drive or a magnetic optical derive or an optical drive or a DVD RAM or a flash memory or other types of memory system which maintain data e.g. large amounts of data even after power is removed from the system. Typically the mass storage will also be a random access memory although this is not required. While shows that the mass storage is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem an Ethernet interface or a wireless network. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

