---

title: Interface for displaying content supporting hardware acceleration
abstract: One or more application programming interfaces (APIs) are exposed by a host program running on a device to facilitate a control program displaying content in a window in which the host program displays content. As part of an API, a method is exposed that the control program can invoke to pass to the host program a definition of a surface presenter to be created by the host program. Additionally, the control program can store content that the control program desires to have presented in a buffer of the surface presenter, and invoke another method exposed as part of an API to pass to the host program an indication of the content that the control program desires to have displayed in the window in which the host program displays content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152476&OS=09152476&RS=09152476
owner: Microsoft Technology Licensing, LLC
number: 09152476
owner_city: Redmond
owner_country: US
publication_date: 20130315
---
This application is a continuation of U.S. patent application Ser. No. 13 031 954 filed Feb. 22 2011 entitled Interface for Displaying Content Supporting Hardware Acceleration now U.S. Pat. No. 8 424 025 the entire disclosure of which is hereby incorporated by reference herein in its entirety.

Extensions such as ActiveX controls can display content in their own window that is displayed over a window displayed by the host program or in a windowless mode in which the content displayed by the extension is composited with content displayed by the host program. However when displaying content in a windowless mode the host program typically begins displaying content on a surface and then provides that surface to the extension. The extension displays its content on that surface and then returns that surface to the host program. This technique involves significant resource usage and can be time consuming reducing the performance of the displaying by the extension and the host program.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one or more aspects an application programming interface API is exposed by a host program running on a device. The API facilitates a control program displaying content in a window in which the host program displays content. As part of the API a method is exposed that the control program can invoke to pass to the host program a definition of a surface presenter to be created by the host program. The surface presenter includes one or more buffers in which the control program can store content to be displayed.

In accordance with one or more aspects an application programming interface API is exposed by a host program running on a computing device. The API facilitates a control program displaying content in a window in which the host program displays content. As part of the API a method is exposed that the control program can invoke to pass to the host program an indication of content that the control program desires to have displayed in the window in which the host program displays content. This content that the control program desires to have displayed is stored in a buffer of a surface presenter created prior to the control program invoking the method of the API.

An interface for displaying content supporting hardware acceleration is discussed herein. A host program e.g. a Web browser exposes an application programming interface API that can be invoked by a control program e.g. an ActiveX control to display surfaces. The control program invokes a method of the API to create a surface and then displays content by invoking a method of the API to present the content to that surface. Passing of the surface back and forth between the host program and the control program need not be performed.

Computing device includes a host program a control program and an operating system . Although illustrated as separate programs it should be noted that host program and control program are typically executed or run as part of a single process. Alternatively host program and control program can be executed or run as separate processes.

Operating system manages execution of programs on computing device including host program and control program . Programs and are also referred to as application level programs or modules rather than operating system level programs or modules. In one or more embodiments host program is a Web browser program that allows users of computing device to access Web sites via a network such as the Internet a local area network a wireless network e.g. cellular or Wi Fi and so forth . However host program can alternatively be any of a variety of other types of programs such as an entertainment program e.g. a game or audio video playback program a productivity program e.g. a word processing or spreadsheet program a reference program e.g. a dictionary program a utility program and so forth.

Control program is a program that works in conjunction with host program . Control program can provide a variety of different functionality or operations to supplement those provided by host program . Control program can also generate its own content that is to be displayed in a window in which host program is also displaying content. Host program exposes a presentation API to facilitate control program displaying content in the same window as host program .

Although a single host program and a single control program are illustrated in it should be noted that multiple host programs and or multiple control programs can be included in computing device . For example multiple control programs can each communicate with one or more host programs .

In one or more embodiments host program is a Web browser program in which content from one or more ActiveX sites are displayed. Additional information regarding ActiveX sites as well as ActiveX controls is available from Microsoft Corporation of Redmond Wash. Each of these ActiveX sites supports control programs that are ActiveX controls. These ActiveX sites display content in one or more windows and allow the ActiveX controls to display content within those same windows by invoking methods of presentation API .

In other embodiments rather than being ActiveX controls control programs are other types of programs that supplement the functionality or operation of host program . Control programs can be a variety of different types of add ons plug ins extensions and so forth.

Display system operates to render or otherwise display content obtained from control site . Display system can expose various APIs in addition to the APIs discussed herein that can be invoked by control site or other modules or components of host program to display content. Display system uses hardware accelerated rendering leveraging one or more graphics processing units GPUs or GPU cores available in the device implementing system to display content. The APIs discussed herein allow control program to provide various data or information including content to be displayed to control site and display system in a manner that allows display system to use hardware accelerated rendering. In one or more embodiments display system is implemented using one or more versions of the DirectX technology or Direct3D technology. Additional information regarding the DirectX technology and the Direct3D technology is available from Microsoft Corporation of Redmond Wash.

Control site and display system present one or more APIs allowing control program to display content in the same window in which control site is displaying content. Control program typically displays content in a portion of the window in which control site is displaying content but can alternatively display content in the entire window in which control site is displaying content. Control program displaying content in the same window in which control site is displaying content is also referred to as control program displaying content in a windowless mode. These APIs presented by control site and display system can be part of presentation API of . To display content in a window of control site control program defines a surface e.g. one or more rectangles or other two dimensional geometric shapes that is created by control site or display system and control program then presents to that surface the content to be displayed. Control program can change the content to be displayed by changing the content presented to that surface.

In one or more embodiments display system displays content based on D3D devices. A D3D device refers to an object that is an abstraction of the video hardware e.g. graphics card or device that display system uses for displaying content. Control program generates its own D3D device for the video hardware and defines a surface presenter associated with that D3D device. The surface presenter also referred to as a surface is a collection of one or more buffers each buffer being a two dimensional buffer a rectangle or other two dimensional shape for graphics displaying. Control program passes an indication of the D3D device and the definition of the surface presenter to control site . Control site or alternatively display system in turn creates one or more buffers as defined by control program in a memory of the device implementing system e.g. in system memory or video memory . Creation of a buffer refers to establishing a buffer having a particular dimension e.g. width and height in which content to be displayed can be stored. These one or more buffers created by control site are accessible to control program allowing control program to store content to be displayed in the buffers as well as control site and or display system allowing display system to display the content in the buffers . Control site exposes a view object interface referred to as View Object Present Site API that control program invokes to pass the indication of the D3D device that control program created and the definition of the surface presenter to control site .

Control site passes or otherwise communicates an indication of the D3D device that control program created as well as the buffers that control site created to display system . Alternatively control site can pass or otherwise communicate the definition of the surface presenter to display system and display system can create the buffers. Display system exposes a surface presentation interface referred to as Surface Presenter API that control program invokes to pass content to be displayed by display system . Control program stores the content to be displayed in a buffer of the surface presenter and provides an indication of that buffer and optionally an indication of a particular portion of that buffer that includes the content to be displayed to display system . Display system draws a frame for display by compositing or otherwise combining the content received from control site and the content received from control program and providing the combined content to the video hardware for display or rendering. Display system can composite or otherwise combine the content received from control site and the content received from control program in any of a variety of conventional manners. Host program e.g. control site and or display system creates its own D3D device for displaying content generated by control site which is separate from the D3D device created by control program .

It should be noted that as control program generates its own D3D device the D3D device used by control site need not be and typically is not communicated to control program . Thus content being displayed by control site need not be revealed to and thus would not be changeable by control program .

It should also be noted that although specific techniques and APIs for control program to display content in a same window as control site is displaying content are discussed herein other techniques for displaying content can be supported by host program . Thus control program need not implement the techniques discussed herein to display content but rather employ other well known and or proprietary techniques for displaying content.

In one or more embodiments control program also exposes one or more APIs to host program . These APIs include a displaying notification interface referred to as View Object Present Notify API and or a print notification interface referred to as View Object Print API . The View Object Present Notify API notifies control program that control site is about to start displaying content. Control program can use this notification to display its own content and thus have changes to content being displayed by control program synchronized with content being displayed by control site . The View Object Print API notifies control program that control site is about to be printed e.g. a hard copy generated or the content being displayed otherwise printed to a printing device or component . Control program can use this notification to provide control site with a higher resolution version of the content being presented by control program so that the higher resolution version of the content is used for printing.

Specific examples of APIs exposed by host program and control program are included in the following. It should be noted that these APIs are examples and that other nomenclature parameters and so forth can alternatively be used.

The View Object Present Site API is exposed by control site of host program and includes three methods a CreateSurfacePresenter method an IsHardwareComposition method and a SetCompositionMode method. An example implementation of the View Object Present Site API is included in Table I.

The CreateSurfacePresenter method at lines allows control program to pass to control site a definition of a surface presenter. The CreateSurfacePresenter method includes multiple parameters provided by control program for passing this definition to control site . These parameters include a device parameter pDevice identifying the D3D device associated with the surface presenter and created by control program . These parameters also include a width parameter width and a height parameter height indicating a width and height for each of the buffers that are part of the surface presenter. These parameters also include a buffer count parameter backBufferCount identifying a number of buffers that are included in the surface presenter.

The parameters of the CreateSurfacePresenter method also include a format parameter format identifying the format for the buffers that are included in the surface presenter. Different buffer formats are supported by display system and the format parameter identifies a specific one of those buffer formats. The parameters of the CreateSurfacePresenter method also include a mode parameter mode identifying to control site how to interpret the alpha channel of the buffers that are included in the surface presenter. The alpha channel mode is used by display system in determining how to display the content being displayed by control program and control site .

The CreateSurfacePresenter method returns a value ppQueue that identifies a surface presenter API e.g. Surface Presenter API that control program can invoke. The surface presenter API includes various methods as discussed in more detail below.

The IsHardwareComposition method at lines allows the control to query control site as to whether host program and thus also control site is using hardware acceleration to do displaying and or compositing for display. The IsHardwareComposition method returns a Boolean value indicating whether host program is using hardware acceleration. Control program can use this indication to determine whether control program is to use or create a surface presenter and also use the surface presenter API and whether control program is to create a D3D device or whether control program is to use other techniques in communicating content for display by display system .

The SetCompositionMode method at lines allows control program to indicate to host program whether control program desires to provide content to display system using the created surface presenter technique and the surface presenter API or using another technique. Thus even if host program is using hardware acceleration control program can choose to use a different technique for communicating content for display by display system . The SetCompositionMode method includes a mode parameter mode that is provided by control program identifying whether control program desires to provide content to display system using the created surface presenter technique or using another technique.

The View Object Present Site API can also optionally include an additional request frame method. Alternatively an additional API can be exposed by control site that includes the methods of the View Object Present Site API as well as the request frame method. An example of the request frame method is HRESULT RequestFrame . The request frame method includes no parameters and is invoked by control program to request that host program draw another frame. It should be noted that the request frame method does not mark any region of a frame or window as being invalid or as needing re drawing updated for displaying rather the request frame method simply requests that the window or frame be drawn displayed again. Control program can invoke the request frame method in different situations such as when control program is displaying changes very quickly and desires host program to display new frames quickly and essentially keep up with or be synchronized with control program . Control program can invoke the request frame method prior to presenting new content for display or after presenting new content for display.

The Surface Presenter API is exposed by display system of host program and includes three methods a Present method a GetBuffer method and an IsCurrent method. An example implementation of the Surface Presenter API is included in Table II.

The Present method at line allows control program to pass to display system an indication of content that control program desires to have displayed by display system . The Present method includes multiple parameters provided by control program for providing this indication to display system . These parameters include a buffer parameter uBuffer identifying one of the buffers included in the surface presenter to which control program has saved the content that control program desires to have displayed. In one or more embodiments the buffers included in the surface presenter are maintained as an array and the buffer parameter is an index into that array of buffers. These parameters also include an area parameter pDirty identifying an area of the buffer from which display system is to obtain the content to be displayed. The area of the buffer is typically a rectangle although other geometric shapes can alternatively be used.

In response to the Present method being invoked display system copies the content from the identified area of the identified buffer to a buffer of the D3D device created by display system and composites or otherwise combines that content with the content from control site for display. The surface presenter can and typically does include multiple buffers. Control program can store content to be displayed in multiple ones of these buffers but display system does not display the content in a particular buffer until control program invokes the Present method identifying that particular buffer. One of the buffers referred to as a front buffer is the buffer from which display system obtains the content to be displayed in response to the Present method being invoked and the other buffers are referred to as back buffers. Display system can maintain these buffers in different manners such as making the buffer identified in the Present method the front buffer and copying the data from the front buffer to a buffer of the D3D device created by display system copying the content from the buffer identified in the Present method to a different buffer that is the front buffer and then copying the data from the front buffer to a buffer of the D3D device created by display system and so forth.

Display system continues to display the content that was last presented by control program by invoking the Present method each time the window or a frame is re drawn. E.g. each time display system composites or otherwise combines the content presented by control program with the content from control site for display display system uses the content that was last provided by the control program by invoking the Present method. Display system need not request content or input from control program each time the window or frame is re drawn rather display system simply uses the content that was last provided by control program .

The GetBuffer method at lines allows control program to obtain a pointer to a particular buffer in the surface presenter. Control program defines the number of buffers to be created but the buffers are created by control site or display system . The GetBuffer method is invoked by control program to obtain a pointer or other identifier of a particular one of the buffers that were created allowing control program to store content to be displayed in that buffer. The GetBuffer method includes a buffer parameter buffer provided by control program identifying one of the buffers e.g. by index value included in the surface presenter to which control program desires a pointer. The GetBuffer method also includes an id parameter riid provided by control program identifying a type of interface e.g. a type of component object model COM interface that is to be returned by the GetBuffer method. The GetBuffer method returns a value ppBuffer that is the pointer to the buffer requested by control program .

In one or more embodiments the locations of the buffers created by control site or display system can change over time. Accordingly in such embodiments control program typically invokes the GetBuffer method prior to storing content to be displayed in a buffer to ensure that control program is storing the content in the correct location.

The IsCurrent method at line allows control program to query host program as to whether the D3D device used to create the surface presenter the one or more buffers previously defined by control program is still the current D3D device that host program is using for display e.g. whether the surface presenter is still usable to display content . The IsCurrent method returns a Boolean value indicating whether the D3D device used to create the surface presenter is still the current device that host program is using for display. Control program can use this indication to determine whether control program is to create a new surface presenter. For example control program can create a new surface presenter if the D3D device previously used to create the surface presenter is not still the current device that host program is using for display and can use the previously created surface presenter if the D3D device is still the current device that host program is using for display.

The View Object Print API is exposed by control program and includes a GetPrintBitmap method. An example implementation of the View Object Print API is included in Table III.

The GetPrintBitmap method at line allows control site to notify control program that the content being displayed is about to be printed e.g. that the printing process has been initiated or that the content will be printed within a certain amount of time . The GetPrintBitmap method returns a bitmap or alternatively another data structure that is a version of the content being displayed by control program that is to be printed. Control program can provide control site with a different version of the content being displayed by control program e.g. a higher resolution version of the content being displayed . Control program can provide for return to control site a version of the content of any size and or resolution desired by control program .

If no such bitmap is returned by control program or control program does not expose View Object Print API then the content last presented by control program using the Present method of the Surface Presenter API discussed above is the content that is printed. Additionally in one or more embodiments control program can return in response to the GetPrintBitmap method being invoked an indication that the content last presented by control program is the content to be printed.

The View Object Present Notify API is exposed by control program and includes an OnPreRender method. An example implementation of the View Object Present Notify API is included in Table IV.

The OnPreRender method at line allows control site to notify control program that control site is about to start displaying content e.g. that the displaying process has been initiated or that the content will be displayed within a certain amount of time . Control program can use this notification to display its own content using the Present method of the Surface Presenter API discussed above and thus have content displayed by control program be synchronized with content displayed by control site . Similarly an OnPostRender method can be exposed by control program that is analogous to the OnPreRender method except that the OnPostRender allows control site to notify control program that control site has just displayed new content using the Present method of the Surface Presenter API discussed above .

In process the host program exposes a view object interface act . The view object interface can be for example View Object Present Site API of .

Additionally the control program defines one or more buffers for graphics displaying act and provides an indication of the buffers defined in act to the host program by invoking the view object interface act . These one or more buffers are included as part of a surface presenter as discussed above and the indication can be passed by invoking for example a CreateSurfacePresenter method exposed by the view object interface as discussed above.

The host program creates the buffers for graphics displaying act . The buffers are created as defined by the control program.

The host program also exposes a surface presentation interface act allowing the control program to present content to be displayed to the host program. The surface presentation interface can be for example the Surface Presenter API of .

The control program stores in one of the buffers created in act content to be displayed in a portion of a window in which the host program also displays content act . The control program indicates to the host program to display the content in the buffer by invoking the surface presentation interface act . The indication of the content can be passed to the host program by invoking for example a Present method exposed by the surface presentation interface as discussed above.

The host program combines the content in the buffer from the control program with other content from the host program act and displays the combined content on the display act . The content can be composited or otherwise combined as discussed above.

In process a view object application programming interface is exposed act . The view object application programming interface can be for example a View Object Present Site API of as discussed above.

As part of the view object application programming interface a method that can be invoked by a control program to pass a definition of a surface presenter to the host program is exposed act . The surface presenter includes one or more buffers for graphics displaying as discussed above. The method exposed in act can be for example a CreateSurfacePresenter method as discussed above.

Also as part of the view object application programming interface a method that can be invoked by a control program to query the host program as to whether the host program is using hardware acceleration for displaying content is exposed act . The method exposed in act can be for example an IsHardwareComposition method as discussed above.

Also as part of the view object application programming interface a method that can be invoked by a control program to indicate a technique being used by the control program to provide content to the host program for display is exposed act . This indication can be an indication of whether the control program desires to provide content to the host program using the created surface presenter technique or using another technique. The method exposed in act can be for example a SetCompositionMode method as discussed above.

In process a surface presentation application programming interface is exposed act . The surface presentation application programming interface can be for example a Surface Presenter API of as discussed above.

As part of the surface presentation application programming interface a method that can be invoked by a control program to pass to the host program an indication of content that the control program desires to have displayed is exposed act . The method exposed in act can be for example a Present method as discussed above.

Also as part of the surface presentation application programming interface a method that can be invoked by a control program to obtain a pointer to a buffer in which the control program can store content that the control program desires to have displayed is exposed act . The method exposed in act can be for example a GetBuffer method as discussed above.

Also as part of the surface presentation application programming interface a method that can be invoked by a control program to determine whether a device used to create the buffers is still the current device that the host program is using for display is exposed act . These buffers are the buffers via which the control program passes to the host program content that the control program desires to have displayed. The method exposed in act can be for example an IsCurrent method as discussed above.

Computing device includes one or more processors or processing units one or more computer readable media which can include one or more memory and or storage components one or more input output I O devices and a bus that allows the various components and devices to communicate with one another. Computer readable media and or one or more I O devices can be included as part of or alternatively may be coupled to computing device . Bus represents one or more of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port a processor or local bus and so forth using a variety of different bus architectures. Bus can include wired and or wireless buses.

Memory storage component represents one or more computer storage media. Component can include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . Component can include fixed media e.g. RAM ROM a fixed hard drive etc. as well as removable media e.g. a Flash memory drive a removable hard drive an optical disk and so forth .

The techniques discussed herein can be implemented in software with instructions being executed by one or more processing units . It is to be appreciated that different instructions can be stored in different components of computing device such as in a processing unit in various cache memories of a processing unit in other cache memories of device not shown on other computer readable media and so forth. Additionally it is to be appreciated that the location where instructions are stored in computing device can change over time.

One or more input output devices allow a user to enter commands and information to computing device and also allows information to be presented to the user and or other components or devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card and so forth.

Various techniques may be described herein in the general context of software or program modules. Generally software includes routines programs applications objects components data structures and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

 Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

 Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.

Generally any of the functions or techniques described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module and component as used herein generally represent software firmware hardware or combinations thereof. In the case of a software implementation the module or component represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices further description of which may be found with reference to . The features of the interface for displaying content supporting hardware acceleration techniques described herein are platform independent meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

