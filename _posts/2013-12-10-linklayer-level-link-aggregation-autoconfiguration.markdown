---

title: Link-layer level link aggregation autoconfiguration
abstract: A computing device identifies a plurality of network interface controllers (NICs) that are available for link aggregation. The computing device probes a network using a plurality of protocols to detect a topology of at least one network to which the plurality of NICs are connected. The computing device automatically establishes a link aggregation configuration including one or more of the plurality of NICs based on the determined network topology.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09369375&OS=09369375&RS=09369375
owner: Red Hat, Inc.
number: 09369375
owner_city: Raleigh
owner_country: US
publication_date: 20131210
---
Embodiments of the present invention relate to link aggregation and more specifically to automatically discovering network topology and performing link aggregation based on the network topology.

The bandwidth used by a compute node in a data center typically exceeds the capabilities of a single network interface controller NIC . Accordingly link aggregation technologies are used to bundle network bandwidth and provide redundancy. In conventional systems when a system administrator wants to set up link layer level link aggregation the system administrator uses his knowledge of the network topology to manually configure the link aggregation. This is often problematic because the administrator may lack knowledge as to the network topology and or may not know how to set up the link aggregation.

Described herein is a method and system for automatically determining a network topology and configuring a link layer link aggregation based on the determined network topology. Link aggregation is the generation of a single logical channel from the bundling of multiple physical ports. Link aggregation is performed to provide redundancy for network interface controllers NICs to provide bandwidth that is greater than a single NIC can provide to perform load balancing and for other reasons. However link aggregation typically will not be performed successfully without first knowing which NICs to aggregate and the network topology of the network to which the NICs are connected. Accordingly the configuration of link layer level link aggregation is typically manually performed by a network administrator with knowledge about the network topology and the computing device for which link aggregation is to be set up.

Embodiments simplify the process of setting up link layer level link aggregation configurations and in some instances completely eliminate manual input by an administrator. Moreover embodiments enable link layer level link aggregation to be set up even in instances in which an administrator is not familiar with the network topology or the computing device to be connected to the network. Embodiments also provide an application programming interface API that other applications such as orchestration systems e.g. Openstack may use to automatically establish link layer level link aggregation configurations.

In one embodiment processing logic identifies multiple network interface controllers NICs of a computing device that are available for link aggregation. The processing logic then probes a network using multiple different protocols to detect a topology of a network to which the NICs are connected. The processing logic then automatically establishes a link aggregation configuration including one or more of the NICs based on the determined network topology.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some embodiments are described herein with reference to physical switches. However it should be appreciated that the principles introduced and described with reference to physical switches also apply to virtual network switches. Accordingly embodiments of the present invention are not limited to physical switches and those embodiments describing physical switches may be modified for use with virtual network switches.

Each of the devices may be a physical device that is internal or external to the computing device . Examples of internal devices include a graphics card hardware RAID controller secondary storage e.g. hard disk drive magnetic or optical storage based disks tapes or hard drives universal serial bus USB devices internal input output I O devices etc. Examples of external devices include a keyboard mouse speaker external hard drive external I O devices etc.

NICs provide a hardware interface between the computing device and a network. NICs may support wired standards wireless standards or both. The NICs may be Ethernet controllers Wi Fi controllers Token Rings Infiniband controllers and so forth. The NICs provide functionality to communicate over a network using specific physical layer OSI layer 1 and data link layer OSI layer 2 standards e.g. Ethernet Wi Fi Token Ring etc. . Each NIC includes a unique media access control MAC address which may be stored in a read only memory of the NIC .

The computing device includes an operating system OS . The computing device may additionally include a server e.g. a web server a database and or database management system DBMS a hypervisor and or virtual machines or other functionality. The computing device may be configured to manage many connections to other devices over a network. Accordingly the computing device may consume large amounts of bandwidth and may accordingly have multiple NICs to handle the large bandwidth usage.

In order to optimally use the multiple NICs the computing device may configure one or more link layer level link aggregations from some or all of these NICs . In one embodiment computing device includes a link aggregator that automatically sets up link layer level link aggregation configurations.

Link aggregator probes the NICs and the remote endpoints to which the NICs are attached to detect a network topology of one or more networks to which the NICs are connected. Link aggregator uses multiple different protocols to probe the NICs and the networks. For example link aggregator may use at least two of link aggregation control protocol LACP address resolution protocol ARP link line discovery protocol LLDP internet protocol version six neighbor discovery protocol IPv6 NDP or dynamic host configuration protocol DHCP to send out probes. Other types of probes may also be used.

In the illustrated example link aggregator probes the NICs to determine speeds or bandwidth capabilities of each of the NICs. Ethernet NICs typically support speeds of 10 Megabits per second Mbits s 100 Mbits s or 1000 Mbits s. Wi Fi NICs typically support speeds of between 54 Mbits s and 866 Mbits s.

Link aggregator may also probe the NICs and the endpoints e.g. switches to which the NICs are connected to determine which NICs are on the same network. In one embodiment Link aggregator broadcasts or multicasts a message out from one or more of the NICs and then listens for that broadcast message from the other NICs. Such a broadcast message will be sent to each endpoint on a network that receives the broadcast. Accordingly if a broadcast is sent out on a NIC it can be determined that each other NIC at which that broadcast message is received is connected to the same network segment. For example if link aggregator broadcasts a message from NIC that message would be received at NIC and NIC but would not be received at NIC and NIC . Accordingly link aggregator could determine that NICs are connected to first network . Similarly link aggregator could determine that NICs are connected to second network .

Link aggregator may additionally probe the switches to which the NICs are connected to determine which NICs are connected to the same switches. For example link aggregator may determine that NIC and are connected to the same switch and that NIC and NIC are connected to the same switch . Link aggregator may additionally probe the switches to determine capabilities of the switches such as to determine whether the switches support LACP. Link aggregator may also probe the switches to determine additional information such as whether there are any virtual local area networks VLANs that are used by any of the switches.

Once link aggregator has obtained enough information to determine the network topologies for the first network and the second network link aggregator may apply one or more link aggregation rules to aggregate the NICs . For example link aggregator might generate a first link layer level link aggregation using NICs and may generate a second link layer level link aggregation using NICs in one embodiment. Alternatively link aggregator may generate the first link layer level link aggregation using just NIC and NIC . NIC may be omitted from the first link aggregation for example if NIC is a 100 Mbit s NIC and NICS are 1000 Mbit s NICS and or if switch supports LACP. The link aggregator is described in greater detail below with reference to .

In one embodiment the link aggregator includes a network prober a topology determiner and an aggregation determiner . The link aggregator may also include one or more aggregation rules that may be used to set up link aggregation configurations.

Network prober sends out multiple different types of probes to endpoints that NICs of a computing device are connected to and or to the NICs themselves. Multiple different protocols may be used to send out multiple different types of probes . Each of the different types of probes may be used to gather a different type of information. Ultimately the network prober should send out enough different probes to gather information about the network that can be used to determine a topology of the network. Such information may include information about nodes e.g. switches servers computer systems etc. on the network properties of those nodes and so on. Some information is received in the form of probe responses which may be forwards of the original probes responses generated by nodes based on the probes and so on. Network prober may also receive some messages from other nodes without first sending out probes. For example for some protocols such as LLDP nodes send out periodic messages. A non exhaustive list of protocols that may be used to send out probes includes link aggregation control protocol LACP address resolution protocol ARP link line discovery protocol LLDP internet protocol version six neighbor discovery protocol IPv6 NDP or dynamic host configuration protocol DHCP .

ARP probe messages DHCP probe messages IPv6 NDP probe messages or other types of probe messages may be used to determine which NICs are on the same network segment. Any of these protocols may be used to broadcast a probe message from a NIC. Network prober may then listen in on the other NICs to determine if they have received the broadcast probe message. If a NIC receives the broadcast probe then that NIC is on a network segment that is connected to a network segment of the NIC from which the probe was broadcast. If a NIC fails to receive the broadcast probe then that NIC is on a network segment that is not connected with the network segment of the NIC from which the probe was broadcast. No link aggregation can be performed for NICs that are on unconnected network segments.

ARP probe messages DHCP probe messages and or IPv6 NDP probe messages may additionally be used to determine resident links between the NICs and switches or other nodes. The resident links may indicate how to reach a specific node on the network. If there are multiple resident links connected to a node then there may be multiple different ways to connect to that node.

ARP is a telecommunications request and reply protocol for resolution of network layer addresses into link layer addresses. ARP probes are packets encapsulated by the line protocol and are communicated within the boundaries of a single network. The types of information that can be determined from ARP nodes is limited but all switches should be able to forward ARP probes. Additionally switches that have IP addresses may respond to ARP probes.

In some network environments a switch may be prepopulated with all possible flows and or a network may be configured such that all switches are prepopulated with all possible flows. In such instances some protocols used for network discovery may be deactivated on the switches for security purposes. For example firewalls and switches may be configured so as to no longer pass through ARP packets. In such an environment protocols other than ARP would be used to determine which NICs are on the same network and or the resident links for those NICs.

DHCP is a standardized networking protocol used on internet protocol IP networks that dynamically configures IP address and other information. DHCP allows devices on a network to receive IP addresses from a DHCP server eliminating or reducing a need for a network administrator to configure these settings manually. The DHCP protocol includes a DHCP discovery mechanism in which a DHCP probe is broadcast on a physical subnet to discover available DHCP servers. Such DHCP probes may be used to discover similar information that the ARP protocol discovers. However DHCP probes will typically be permitted to pass through switches even when ARP probes are blocked.

IPv6 NDP is a protocol that includes a set of messages or probes that may be used to determine relationships between neighboring nodes. IPv6 NDP may be used to obtain the same type of information as ARP but for nodes that use IPv6. Some example IPv6 NDP probes include a neighbor solicitation NS probe a neighbor advertisement NA probe a router solicitation RS probe and a router advertisement RA probe.

LLDP is a standard link layer protocol used by networking devices to advertise their identity capabilities and neighbors on a local area network LAN . LLDP messages or probes may be sent at a fixed interval in the form of an Ethernet frame. Each frame may include one or more destination media access control MAC address a source MAC address a port identifier ID a time to live value and or other information. LLDP probes or messages may be used to gather information such as a system name and description a port name and description a virtual local area network VLAN name an IP management address system capabilities e.g. switching routing etc. MAC address link aggregation capabilities and so forth. LLDP MED media endpoint discovery is an extension to LLDP that may also be used. LLDP MED may be used for auto discovery of LAN policies e.g. VLANs layer 2 priority differentiated services etc. device location discovery and other information.

LLDP may be used to discover VLANs configured on a port or node. If a node uses a VLAN then that node may insert information about the VLAN into an LLDP message which will be received by the NIC. If a link layer level link aggregation is to be set up for a NIC that is connected to a node that uses a VLAN then a VLAN tag may be inserted into messages for link validation. In addition to VLAN configurations LLDP may be used to determine for example link speeds of network cards data center bridging capabilities and so forth.

LACP is a link aggregation protocol that can be used to aggregate links that share the same switch. That is two NICs that are both connected to the same switch that supports LACP may be configured into a link layer level link aggregation that uses the LACP protocol. LACP aggregated links have several advantages over traditional non LACP aggregated links. In particular LACP aggregated links may utilize all aggregated NICs for both uplinks and downlinks. However non LACP aggregated links typically use all NICs for uplinks but only a single NIC for the downlink.

Topology determiner determines a topology of the network based on the probe responses and or other messages that are received from nodes on the network. In the case that the computing device on which link aggregator runs is connected to multiple networks topology determiner will determine the topology of each of the networks. For example if the computing device is connected to a data network and a management network then topology determiner may discover the network topology of both the data network and the management network. Examples of information that may be determined about the network topology include identification of switches that each of the NICs of the computing device are connected to a determination of which NICs are connected to the same switches a determination of link speed for the switches and or NICs capabilities of the switches e.g. whether they support LACP whether switches use VLANs and so forth.

Aggregation determiner establishes one or more link layer level link aggregation configurations based on the determined network topology. A separate link aggregation may be set up for each separate network that the computing device is connected to. For example a first link aggregation may be set up for a data network and a second link aggregation may be set up for a management network.

In one embodiment aggregation determiner applies one or more aggregation rules to set up the link aggregation configurations. Aggregation rules may be used to assign weights or preferences to specific individual NICs or combinations of NICs. For example a first link aggregation rule may assign weights to NICs based on their link speeds where higher speed NICs are assigned a higher weighting than lower speed NICs. A second aggregation rule may assign a higher weighting to NICs that are connected to the same switch than to NICs that are connected to different switches. This is because typically higher performance gains can be realized for aggregations of links that are to the same switch. A third aggregation rule may assign a higher weighting to NICs that are connected to switches that support LACP than to NICs that are connected to switches that do not support LACP. Other aggregation rules may also be used. The aggregation rules may be used in combination to determine an optimal link aggregation configuration for a given network topology.

Multiple different types of link aggregation configurations are possible. For example a first type of link aggregation configuration may combine multiple links in parallel to increase throughput above what a single NIC can sustain. A second type of link aggregation configuration may combine links in such a way that one or more secondary links provide redundancy in case a primary link fails. A third type of link aggregation performs load balancing between NICs. Other types of link configurations are also possible. An aggregated link may have a single logical address that is shared by multiple NICs or a single physical address that is shared by the multiple NICs.

For simplicity of explanation the methods are depicted and described as a series of acts. However acts in accordance with this disclosure can occur in various orders and or concurrently and with other acts not presented and described herein. Furthermore not all illustrated acts may be required to implement the methods in accordance with the disclosed subject matter. In addition those skilled in the art will understand and appreciate that the methods could alternatively be represented as a series of interrelated states via a state diagram or events. Additionally it should be appreciated that the methods disclosed in this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methods to computing devices. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or storage media.

At block processing logic probes a network to which the determined NICs are connected to detect a topology of the network. Multiple different types of probes using multiple different protocols are used to determine the network topology. At block processing logic then automatically establishes a link layer level link aggregation configuration based on the detected network topology. In one embodiment processing logic applies one or more link aggregation rules to set up the link aggregation.

The network topology may not be static and may thus change over time. For example nodes may change IP addresses or MAC addresses nodes may be turned on or turned off nodes may be relocated on the network network partitions may occur and so forth. Processing logic may automatically adapt to such changes in the network topology which may include changes in the hardware level and or changes in the software level.

At block processing logic receives updated information on the network topology. Such updated information may be received responsive to sending out new probes. Additionally or alternatively updated network topology information may be received periodically without sending out probes. For example LLDP messages may periodically be sent by nodes in a network. Some network topology information may additionally be attached to data that is received through the course of standard operations e.g. while downloading or uploading data .

At block processing logic determines whether a change in the network topology has occurred. If such a change is detected the method continues to block . At block processing logic updates the link layer level link aggregation based on the changed network topology. For example four NICs may have originally been available for link aggregation and a first and second NIC may have been aggregated. However if the first and second NIC fail then processing logic may set up a new link aggregation configuration using the third and fourth NICs. In some instances the link aggregation configuration will not change even though the network topology has changed. If no change in the network topology is detected the method returns to block . This process may continue indefinitely.

Responsive to such a request processing logic may determine whether or not link aggregation is appropriate for a computing device and may automatically set up a link layer level link aggregation if appropriate. Processing logic may also receive a request to set up a link aggregation configuration from an administrator who may or may not identify NICs to consider for the link aggregation.

At block processing logic determines whether a list of available NICs has been provided. If no such list is provided the method continues to block and processing logic probes the NICs of the computing device to determine which are available. Otherwise the method continues to block .

At block processing logic determines a protocol to use for probing the network. The protocol may be determined based on the type of information that is yet to be obtained about the network and or based on information currently known about the network e.g. knowledge that ARP probes will not be forwarded by switches . At block processing logic probes the network using the determined protocol.

At block processing logic determines whether the network topology is fully characterized. If the network topology is not fully characterized the method returns to block and another type of probe to send out is identified. If the network topology is fully characterized the method continues to block . At block processing logic automatically establishes a link layer level link aggregation configuration based on the determined network topology. The established link aggregation configuration may be an optimal configuration for the determined network topology. Processing logic may then report for example to an orchestration system or administrator that a network connection has been established.

At block processing logic probes the computing device to identify available NICs. At block processing logic probes the computing device to determine networks to which the NICs are connected. For example processing logic may determine that a first set of NICs are connected to a first network e.g. a data network and that a second set of NICs are connected to a second network e.g. a management network .

At block processing logic probes the first network and the second network and determines both a topology of the first network and a topology of the second network. At block processing logic sets up a first link aggregation configuration for one or more of the NICs connected to the first network. At block processing logic sets up a second link aggregation configuration for one or more NICs connected to the second network. The method then ends.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

The processing device represents one or more general purpose processors such as a microprocessor central processing unit or the like. The term processing device is used herein to refer to any combination of one or more integrated circuits and or packages that include one or more processors e.g. one or more processor cores . Therefore the term processing device encompasses a single core CPU a multi core CPU and a massively multi core system that includes many interconnected integrated circuits each of which may include multiple processor cores. The processing device may therefore include multiple processors. The processing device may include a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like.

The computer system may further include one or more network interface devices e.g. NICs . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions embodying any one or more of the methodologies or functions described herein e.g. link aggregator . The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media.

While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium other than a carrier wave that is capable of storing or encoding a set of instructions for execution by the machine that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to non transitory media such as solid state memories and optical and magnetic media.

The modules components and other features described herein for example in relation to can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. In addition the modules can be implemented as firmware or functional circuitry within hardware devices. Further the modules can be implemented in any combination of hardware devices and software components or only in software.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as identifying probing establishing detecting modifying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer system selectively programmed by a computer program stored in the computer system. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic disk storage media optical storage media flash memory devices other type of machine accessible storage media or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description above. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

