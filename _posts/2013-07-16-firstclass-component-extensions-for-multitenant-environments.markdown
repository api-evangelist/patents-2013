---

title: First-class component extensions for multi-tenant environments
abstract: A system, apparatuses, and methods for enabling management of customizations/extensions to the functionality of a multi-tenant computing platform. In some embodiments, an extended or customized entity, such as a function, operation, process, module, sub-routine, data item, etc. is represented as a record. That record is then associated with an underlying record by means of a tenant specific mapping or equivalent structure. This enables the tenant to utilize the extended or customized entity in place of the underlying record in situations in which the underlying record would typically be used. This also provides a way of isolating the extensions or customizations on the multi-tenant platform so that they are associated with specific tenants and not with other tenants who may still access the underlying or un-extended versions of the entity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509571&OS=09509571&RS=09509571
owner: NetSuite Inc.
number: 09509571
owner_city: San Mateo
owner_country: US
publication_date: 20130716
---
This application claims the benefit of U.S. Provisional Application No. 61 675 723 entitled First Class Component Extensions For Multi Tenant Environments filed Jul. 25 2012 which is incorporated by reference in its entirety herein for all purposes.

In addition to the advantages related to customer access that are provided by the Internet the ability of business users to access crucial business information has been greatly enhanced by the use of IP based networking together with advances in object oriented Web based programming and browser technology. Using these advances systems have been developed that permit web based access to business information systems thereby allowing a user with a browser and an Internet or intranet connection to view enter or modify business information. For example substantial efforts have been directed to Enterprise Resource Planning ERP systems that integrate the capabilities of several historically separate business computing systems into a common system with a goal of streamlining business processes and increasing efficiencies on a business wide level. By way of example the capabilities or modules of an ERP system may include one or more of accounting order processing time and billing inventory management employee management payroll and employee calendaring and collaboration as well as reporting and analysis capabilities relating to these functions.

Substantial efforts have also been directed to integrated Customer Relationship Management CRM systems with a goal of obtaining a better understanding of customers enhancing service to existing customers and acquiring new profitable customers. By way of example the capabilities or modules of a CRM system may include one or more of sales force automation SFA marketing automation contact list management call center support and web based customer support as well as reporting and analysis capabilities relating to these functions. With differing levels of overlap with ERP CRM initiatives and with each other efforts have also been directed toward development of increasingly integrated partner and vendor management systems eCommerce platforms product lifecycle management PLM systems and supply chain management SCM systems.

One computing and or data processing architecture that may be used to enable user access to ERP CRM and other business information systems is a cloud based platform or network. Such a platform or network is typically comprised of multiple servers that are capable of running one or more business related applications. Some cloud based service platforms are multi tenant meaning that they are capable of providing access to one or more business related applications and the associated data by more than one business entity or sets of users. The service platform may thus provide a system or suite of functionality that is used by the tenants to provide benefits to their respective users which may be employees of a tenant customers of a tenant etc. . For example the tenants may include business enterprises that use the service platform to provide various business functions to their employees and or customers.

In an effort to permit tenants to access the services and functionality that they desire which may include providing certain services to their end customers such as an eCommerce platform a multi tenant service platform may permit a tenant to configure certain aspects of the available service s to better suit their business needs. In this way the service platform may be customizable and thereby enable a tenant to configure the platform to provide distinctive services to their respective users or to groups of those users. For example a business enterprise that uses the service platform may want to provide specific functions or capabilities to their employees and or customers.

Tenant customization may include custom functionality such as the capability to perform tenant or user specific functions data processing or operations built on top of lower level operating system functions. Some multi tenant service platforms may offer the ability to customize functions or operations at a number of different levels of the service platform from aesthetic modifications to a graphical user interface to providing integration of components and or entire applications developed by independent third party vendors. This can be very beneficial since by permitting use of components and or applications developed by third party vendors a multi tenant service can significantly enhance the functionality available to tenants.

However customizations introduced into the platform architecture by different tenants may be incompatible with each other in one or more ways and this can cause a disruption in the services provided to those or other tenants. For example such incompatibilities can cause undesirable and or unintended behavior in the service configurations of multiple tenants including tenants not associated with a particular customization. Certain types of customizations may also impact the operation of the platform in general such as by altering the manner in which data is accessed or processed. This could have a negative impact on tenants beyond just those who had introduced or accessed a particular customization or extension.

Conventional approaches to managing potential problems arising from customizations and or extensions to multi tenant platform functionality are inefficient ineffective and or have undesirable side effects or other drawbacks with respect to at least one significant use case. Generally such approaches may be categorized as either based on manual testing procedures or automated testing procedures. Unfortunately both of these general approaches may suffer from significant disadvantages. For example manual system testing procedures are impractical for anything but the most trivial number or type of extensions. This is because for enterprise scale systems testing of multiple extensions quickly encounters a problem due to the combinatorial explosion. For instance with extensions there would be 90 extension pairs to be tested possible sets of three extensions and so on. As is evident as the number of extensions increases manual testing quickly becomes too costly in terms of time and labor. The impracticality of implementing manual testing serves as an incentive for utilizing some form of automated testing. However current systems do not support automatic verification of correctness making automated testing of limited value.

As another example an un extended service platform may operate in a manner that acts to preserve a set of platform invariants and or to respect a set of platform constraints e.g. attribute value constraints . However once certain types of extended functionality are introduced the result may be that such invariants and or constraints can no longer be relied upon. This can result in inefficiencies and create administrative problems for platform maintainers and developers including 3party developers of platform extensions. It can also be the source of service malfunctions that can impact one or more tenants of the platform.

Embodiments of the invention are directed toward solving these and other problems individually and collectively.

This summary is a high level overview of various aspects of the present methods and systems for providing a solution to some of the problems posed by current approaches to the management of extendible components within a cloud based platform and introduces some of the concepts that are further described in the Detailed Description section below. This summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to determine the scope of the claimed subject matter.

Embodiments of the invention are directed to a system apparatuses and methods for enabling management of customizations extensions to the functionality of a multi tenant computing platform. In some embodiments an extended or customized entity such as a function operation process module sub routine data item etc. is represented as a record. That record is then associated with an underlying record by means of a tenant specific mapping or equivalent structure. The result is for the tenant to be able to utilize the extended or customized entity in place of the underlying record in situations in which the underlying record would typically be used. This provides a way of isolating the extensions or customizations on the multi tenant platform so that they are associated with specific tenants and not with other tenants who may still access the underlying or un extended versions of the entity. This inventive way of implementing extensions or customizations prevents unwanted interactions between different extensions while permitting each tenant to implement modifications to components which may include data and or logical elements via a mapping mechanism e.g. the component map or component registry .

Embodiments of the invention may be used as part of implementing one or more functions during the installation registration use or management of extensions to the functionality of a multi tenant computing platform. For example an embodiment of the invention may be used for one or more of the following purposes or functions 

In implementing an extension and in accordance with embodiments of the invention a tenant of a multi tenant platform may perform one or more of the following 

In one embodiment the invention is directed to a method of extending the functionality of a multi tenant computing platform where the method includes 

In another embodiment the invention is directed to a system for extending the functionality of a multi tenant computing platform where the system includes 

In yet another embodiment the invention is directed to an apparatus for extending the functionality of a multi tenant computing platform where the apparatus includes 

Note that the same numbers are used throughout the disclosure and figures to reference like components and features.

Embodiments of the invention will be described more fully hereinafter with reference to the accompanying drawings which form a part hereof and which show by way of illustration exemplary embodiments by which the invention may be practiced. This invention may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the invention to those skilled in the art. Among other things the present invention may be embodied in whole or in part as a system as one or more methods or as one or more devices. Embodiments of the invention may take the form of an entirely hardware implemented embodiment an entirely software implemented embodiment or an embodiment combining software and hardware aspects. For example in some embodiments one or more of the operations functions processes or methods described herein may be implemented by a suitable processing element such as a processor microprocessor CPU controller etc. that is programmed with a set of executable instructions e.g. software instructions where the instructions may be stored in a suitable data storage element. The following detailed description is therefore not to be taken in a limiting sense.

The subject matter of embodiments of the present invention is described here with specificity to meet statutory requirements but this description is not necessarily intended to limit the scope of the claims. The claimed subject matter may be embodied in other ways may include different elements or steps and may be used in conjunction with other existing or future technologies. This description should not be interpreted as implying any particular order or arrangement among or between various steps or elements except when the order of individual steps or arrangement of elements is explicitly described.

In accordance with at least one embodiment of the invention a computing system such as a multi tenant distributed computing platform may manage independent customizations and or extensions collectively extensions of components of the platform by multiple tenants in a manner that avoids undesirable behavior caused by incompatible component extensions. For example a platform component may correspond to and or provide functionality related to one or more data objects such as data records. The platform may require that an extended component for example one provided by a tenant or 3party vendor be implemented in accordance with an extensibility interface. One or more such extended components may be registered with a component registry and a tenant may select certain extended components to provide platform services to the tenant s users instead of using the corresponding un extended or base components. Different tenants may select or configure different sets of extended components to provide extended platform services to their respective users without modifying the base platform components. The extended components may be considered first class in that they can take on the role or functionality of base components.

In some embodiments an extended or customized entity such as a function operation process module sub routine component data item etc. is represented as a record. That record is then associated with an underlying record by means of a tenant specific mapping or equivalent structure. The result is for the tenant to be able to utilize the extended or customized entity in place of the underlying record which as noted may be a process component function module etc. in situations in which the underlying record would typically be used. This provides a way of isolating the extensions or customizations on the multi tenant platform so that they are associated with specific tenants and not with other tenants who may still access the underlying or un extended versions of the entity. This inventive way of implementing extensions or customizations prevents unwanted interactions between different extensions while permitting each tenant to implement modifications to components which may include data and or logical elements via a mapping mechanism e.g. the component map or component registry .

Embodiments of the invention may be used as part of implementing one or more functions during the installation registration use or management of extensions to the functionality of a multi tenant computing platform. For example an embodiment of the invention may be used for one or more of the following purposes or functions 

In one embodiment extended components may be evaluated for compatibility and or proper implementation at the time of installation and or registration. When extended components are implemented at least in part with a compiled programming language the components may also be evaluated at the time of compilation. For example such a check may ensure that the extended component incorporates the extensibility interface and suitably implements the elements of the extensibility interface where required. In accordance with at least one embodiment of the invention the extensibility interface may require that the extended component implement one or more runtime validation elements. For example the platform may require that the extended component pass validation with respect to its validation elements and or with respect to one or more validation elements of the corresponding base component in order to remain registered and or active in tenant service configurations.

Note that although reference is made to use of a compiled programming language for implementation of an extension or element of an extension embodiments of the invention are not limited to this implementation. For example an extension or element of an extension may be implemented in an interpreted language e.g. JAVASCRIPT and evaluation of the extension performed through a form of static analysis instead of during compilation . In such a case the evaluation may be with regards to one or more of installation registration or validation of the extension or a component of the extension.

Further note that an extension in accordance with embodiments of the invention may involve a tenant of a multi tenant platform performing one or more of the following operations processes tasks etc. 

In one embodiment when an extended component creates a data object the platform may prevent access to the data object by component instances that are not of a same type as the object creator. Alternatively or in addition the platform may limit data object access to a level or form sufficient to enable migration of the data object from management by a base component to management by the extended component. For example the platform may provide read only access to non creator instances when the extended component includes and or registers migration functionality. Note that migration of a data object need not be associated with a change to the object structure such as a change to the number and or type of data object attributes. For example an extended data object may be associated with a different set of invariants and or constraints collectively constraints than the corresponding un extended or base data object. Further the extended component may include functionality directed to maintaining or implementing a new constraint. Examples of such constraints include the NOT NULL constraint of SQL and attribute value constraints.

The multi tenant distributed computing platform system may include multiple processing tiers or layers including a user interface layer an application layer and a data storage layer . The user interface layer may maintain multiple user interfaces including graphical user interfaces and or web based interfaces. The user interfaces may include a default user interface for the platform e.g. an administrative UI as well as one or more user interfaces extended by one or more tenants of the system e.g. via access to one or more APIs . The default user interface may include components enabling tenants to provide extensions or additional functionality to system and otherwise administer their participation in the functions and capabilities provided by the system. Tenants may be distinguished from other users in this way and or tenants may be responsible for costs incurred due to utilization of the distributed computing system by tenant customers e.g. users of the system as it has been extended by a tenant . Each tier or layer may be implemented with a set of computers and or computer components including computer servers and processors and may perform various functions methods processes or operations as determined by the execution of a software application or set of instructions. The data storage layer may include one or more production data stores and one or more testing validation and or backup data stores . Data stores may be implemented with any suitable data storage technology including structured query language SQL based relational database management systems RDBMS .

In accordance with at least one embodiment of the invention the distributed computing system may be multi tenant and may include an ability for a tenant to extend the functionality and or operation of one or more components of a common service platform. As noted this capability may result in inter tenant extension incompatibilities if not effectively managed. To provide a suitable management function distributed computing system may include an extensible component manager configured at least to manage and or administer extensible platform components. For example tenants may interact with the extensible component manager through one or more of the user interfaces . An example extensible component manager in accordance with at least one embodiment of the invention is described in more detail below with reference to . However before providing these details further information is provided with respect to distributed computing systems or platforms and extensibility interfaces in accordance with at least one embodiment of the invention.

Note that it need not be the case that each component of the system platform is extensible. As an example in extensible components are indicated with an icon e.g. extendible interfaces elements . For example extensible components may implement an extensibility interface in accordance with at least one embodiment of the invention e.g. as described below in greater detail with reference to and or incorporate a corresponding extensibility data structure. As shown in a user interface may be extensible as suggested by element without each of its elements being extensible and vice versa.

The application layer may include one or more application modules each having one or more sub modules . The application modules and or sub modules may include any suitable computer executable code or set of instructions e.g. as would be executed by a suitably programmed processor or CPU such as computer executable code corresponding to a programming language. For example programming language source code may be compiled into computer executable code. Alternatively or in addition the programming language may be an interpreted programming language such as a scripting language. Each application server e.g. element of may include each application module . Alternatively different application servers may include different sets or groups of application modules. Such sets may be disjoint or overlapping. In one embodiment proposed system platform extensions may extend the application layer by adding new application modules removing or replacing existing application modules and or extending or altering the functionality of existing application modules. An existing application module may be extended or altered by adding new sub modules removing or replacing existing sub modules and or altering extending the functionality of existing sub modules. Extensible components of the service platform may include suitable application modules and or sub modules. As shown in an application module may be extensible without each of its sub modules being extensible and vice versa.

The data storage layer may include one or more data objects each having one or more data object components e.g. attributes characteristics and or behaviors . For example the data objects may correspond to tables of a relational database and the data object components may correspond to columns or fields of such tables. Alternatively or in addition the data objects may correspond to data records having fields and associated services. Alternatively or in addition the data objects may correspond to persistent instances of programmatic data objects such as structures and classes. Each data store in the data storage layer e.g. element or of may include each data object. Alternatively different data stores may include different sets or groups of data objects. Such sets may be disjoint or overlapping. In one embodiment proposed system platform extensions may extend the data storage layer by adding new data objects removing or replacing existing data objects and or extending or altering existing data objects. Existing data objects may be extended or altered by adding new data object components removing or replacing existing data object components and or altering extending existing data object components. Extensible components of the service platform may include suitable data objects and or data object components. As shown in a data object may be extensible without each of its components being extensible and vice versa.

Note that the computing environment depicted in is not intended to be a limiting example. Alternatively or in addition computing environments in which an embodiment of the invention may be implemented include any suitable system that permits installation of a module that modifies a default behavior e.g. an extension . Examples of suitable systems include modifiable hardware systems computing systems incorporating firmware or re configurable processors and stand alone or local only software systems or applications. Although further examples may reference the computing environment s depicted in or it will be apparent to one of skill in the art that the examples may be adapted for alternate computing devices systems architectures and environments.

In at least one embodiment when a tenant activates an extended component service requests from the tenant s users may be routed to the extended component for fulfillment of the request rather than to the base un extended component. However the base component remains available unchanged as part of the system platform and its functionality is available including to the extended component. For example the extended component may provide functionality and or attributes that are an addition to or that build upon the functionality and or attributes of the base component e.g. the extensions in some way depend upon or reference aspects of the base component . In accordance with at least one embodiment of the invention the system platform may require that an extended component implement an extensibility interface such as that which will be described with reference to .

The extensibility interface may further include a validate instance element . The extended component may implement the validate instance element to validate or otherwise evaluate a state of the extended component and or one or more data objects maintained and or updated by the extended component. For example the extensible component manager may activate the validate instance element after a particular instance of an extended component indicates that it has finished processing a request that the extensible component manager provided to the instance.

Note that as is conventional in the art the term instance is used here in the programmatic sense of object instance. Active or runtime components in accordance with at least one embodiment of the invention may have a single instance a fixed number of instances or a variable number of instances with each associated with a distinct state and or set of computation resources such as data storage and or a thread of execution. The extensible component manager may relay requests to particular instances and activate the validate instance element of the extensibility interface with respect to the particular instances.

In accordance with at least one embodiment of the invention access to component instances including data object instances such as records is restricted to the component type that created the component instance. For example a base component a first extension of the base component and a second extension of the base component may each be considered separate component types for this purpose. The extensibility interface may require that each component instance reference the component type that created the instance e.g. a copy of the registered name or identifier of the component type . To enable new extended components to access old instance data the extensibility interface may include one or more migration elements depicted as Migrate Unextended Instance Type A . . . Migrate Unextended Instance Type Z in the figure . For example the migration elements may have access to old instance data that enables the new extended component to take ownership of move and or copy the old instance data to create new instances associated with the new extended component. As shown in the extensibility interface may include multiple such migration elements corresponding to different component types i.e. elements through in the figure . The dashed line surrounding elements through in is intended to suggest that the migration elements may be optional and or dynamically added e.g. via re registration . In accordance with at least one embodiment of the invention extended components in accordance with the extensibility interface may be stored in rows of a table of an RDBMS having a schema that includes fields such as component name component id and a mapping to component attributes and or fields e.g. via a mapping table .

In general the inventive extensible component manager and its associated elements and methods treat entities e.g. pieces of information in the system as records. These entities include both built in records and records defined by extensions. In some cases an extension may define a new type of record. In others the extension may define an extension and declare that it should represent or take the place of a built in or standard record type. To implement this capability the invention defines both a record type and a record type implementation. Initially these may be related by a one to one correspondence. For example a record type Customer may be represented by the built in Customer Implementation Type . Now an extension implements its own modified version of the customer type and it may be referred to as Extension 1 Customer Implementation Type . In this situation there now needs to be a mapping or association between record types and the implementation s selected by a user. In accordance with embodiments of the invention this mapping is itself a record with its own implementation. Hence depicts both a map and a per tenant map which can contain information associating a tenant s desired implementation of a function or record with a default or baseline implementation. Note that the default component map is understood to be the built in implementation of the component map before extension by a tenant.

Use of the inventive record based approach to extended platform functionality in a multi tenant system enables a partitioning of the behavior of different extensions. In order to isolate possibly unwanted interactions between different extensions execution separation can be enforced using the inventive mapping mechanism e.g. a component map or component registry .

The extensible component manager may include a component registration module configured at least to register extended components and make them available for tenant selection and activation. Note that base components may also be registered with the component registration module. Component registrations may be stored in the registered component database . The extensible component manager may further include a component map administration module configured at least to enable a tenant to modify a default component map of platform functionality to base component s so that the tenant specific map instead references one or more extended components. Each extensible base component may be associated with a named or otherwise identified request that may be mapped to an extended component. A component request handler may intercept each such request associate the request with a particular tenant and route the request in accordance with the tenant s component map . The component request handler may also handle runtime validation for example by invoking the validate instance element of the extensibility interface of the component instance that processed the request. In accordance with at least one embodiment of the invention the extensible component manager is itself an extensible component of the service. Accordingly requests for functionality not fully supported by any base component may be routed to an added component.

As shown in the figure a new extended component may be implemented in accordance with the extension interface an example of which is described with reference to . For example a tenant and or 3party vendor may extend a base component to modify the behavior of the base component and as part of implementing the new extended component may implement the elements of the extensibility interface of . In accordance with at least one embodiment of the invention one or more of the elements of the extensibility interface may have a default implementation that may be utilized by an extended component developer.

A request to register the new extended component may be received as indicated at step . For example the component registration module of may receive the registration request in response to activation of the register component element of the extensibility interface element of . Authorized tenants and or 3party vendors may install extended components for example by interacting with a service UI explicitly for that purpose. In one embodiment it may be the case that the request to register the new extended component cannot be generated unless the component is implemented in accordance with the extensibility interface. Alternatively the component registration module may explicitly check that the new extended component is in compliance with the extensibility interface and refuse to register the component if it is not. As part of the registration installation or at a later time a request may be received to update a tenant component configuration map such as the component maps described with reference to i.e. element of followed by performing an update to that map . The service may include an explicit UI for administering a tenant s component map.

Referring to the receiving component may service the request . In accordance with at least one embodiment of the invention access to non created component instances including non created data objects may be inhibited by the service . This inhibition may enhance reliability of the extensible service. In one embodiment it may cause request servicing to terminate and generation of a notification of the inhibited access to be sent to the request originator . Once the request has been serviced one or more validators may be activated . For example the component request handler may activate the validate instance element element of of the extensibility interface of the component that serviced the request. When that component is an extended component the extended component may activate the validate instance interface element of its base component and so on if the base component is also an extended component . If the validation is successful as indicated by the Yes branch of step then any instance updates may be committed to the data store and the request response routed to the request originator . Otherwise as indicated by the No branch of step the updates are not committed and the request originator is notified of the validation issue . Alternatively or in addition the component request handler may remove the extended component from consideration as being active . For example this may be accomplished by updating tenant maps that reference the extended component.

In accordance with at least one embodiment of the invention multiple component extensions may be registered by multiple tenants of a distributed computing system. Interactions with interfaces of the registered components may be intercepted. One of the registered extensions may be identified for handling a particular request based at least in part on a tenant associated with the request. The request may be routed to the identified component. Should it be detected that the handling of the request by the extended component is invalid then the extended component may be disabled or otherwise rendered inactive. In accordance with at least one embodiment of the invention the handling of the request is valid when the handling result is validated by the extended component and by its base component recursively . In accordance with at least one embodiment of the invention extended components may enforce additional constraints but may not relax constraints enforced by a base component.

In accordance with at least one embodiment of the invention one or more aspects elements or components of inventive the system apparatus methods functions processes and or operations for extensible component registration and management may be wholly or partially implemented in the form of a set of instructions executed by one or more programmed computer processors such as a central processing unit CPU controller server or microprocessor. Such a processor may be incorporated in an apparatus server client or other computing device operated by or in communication with other components of the system. As an example is a diagram illustrating elements that may be present in a computer device and or system configured to implement a method operation function and or process in accordance with some embodiments of the present invention. The subsystems shown in are interconnected via a system bus . Additional subsystems include a printer a keyboard a fixed disk and a monitor which is coupled to a display adapter . Peripherals and input output I O devices which couple to an I O controller can be connected to the computer system by any number of means known in the art such as a serial port . For example the serial port or an external interface can be utilized to connect the computer device to further devices and or systems not shown in including a wide area network such as the Internet a mouse input device and or a scanner. The interconnection via the system bus allows one or more processors to communicate with each subsystem and to control the execution of instructions that may be stored in a system memory and or the fixed disk as well as the exchange of information between subsystems. The system memory and or the fixed disk may embody a tangible computer readable medium.

It should be understood that the present invention as described above can be implemented in the form of control logic using computer software in a modular or integrated manner. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will know and appreciate other ways and or methods to implement the present invention using hardware and a combination of hardware and software.

Any of the software components processes data processing operations methods or functions described in this application may be implemented as software code to be executed by a suitably programmed processor using any suitable computer language such as for example JAVA C or PERL using for example conventional or object oriented techniques. The software code may be stored as a series of instructions or commands on a computer readable medium such as a random access memory RAM a read only memory ROM a magnetic medium such as a hard drive or a floppy disk or an optical medium such as a CD ROM. Any such computer readable medium may reside on or within a single computational apparatus and may be present on or within different computational apparatuses within a system or network.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and or were set forth in its entirety herein.

The use of the terms a and an and the and similar referents in the specification and in the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms having including containing and similar referents in the specification and in the following claims are to be construed as open ended terms e.g. meaning including but not limited to unless otherwise noted. Recitation of ranges of values herein are merely indented to serve as a shorthand method of referring individually to each separate value inclusively falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation to the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to each embodiment of the present invention.

Different arrangements of the components depicted in the drawings or described above as well as components and steps not shown or described are possible. Similarly some features and sub combinations are useful and may be employed without reference to other features and sub combinations. Embodiments of the invention have been described for illustrative and not restrictive purposes and alternative embodiments will become apparent to readers of this patent. Accordingly the present invention is not limited to the embodiments described above or depicted in the drawings and various embodiments and modifications can be made without departing from the scope of the claims below.

