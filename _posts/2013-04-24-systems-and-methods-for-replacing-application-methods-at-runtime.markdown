---

title: Systems and methods for replacing application methods at runtime
abstract: A computer-implemented method for replacing application methods at runtime may include identifying an application at runtime that includes a target method to replace at runtime with a source method, locating a target address of a target method data structure (that includes a target code pointer to method code of the target method) within memory at runtime that is referenced by a target class, determining a source address of a source method data structure (that includes a source code pointer to method code of the source method) within memory at runtime that describes the source method, and modifying the application at runtime to have the target class reference the source method instead of the target method by copying the source method data structure from the source address to the target address and, thereby, replacing the target code pointer with the source code pointer. Various other methods and systems are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336384&OS=09336384&RS=09336384
owner: Symantec Corporation
number: 09336384
owner_city: Mountain View
owner_country: US
publication_date: 20130424
---
In the information age a large number of software applications are available to businesses and consumers to assist them in performing a wide variety of tasks. Unfortunately not all applications may be trustworthy or invulnerable to exploits or security leaks. For example an attacker may leverage an applications to install malware or gain root access to a device.

Some application security risks may be addressed on the method level. For example a security vendor may add a wrapper to a method within an application so the wrapper can intercept calls to the method and examine the context in which the method was called and or sanitize parameters passed to the method. Some platforms may provide application programming interfaces for provisioning wrapper methods in applications however other platforms for which a security vendor may wish to provide protection may not provide such application programming interfaces. Some traditional techniques for modifying applications may involve decompiling and recompiling portions of executable files and or byte code. Unfortunately these techniques may involve an undesirable consumption of computing resources and or may provide insufficient flexibility in modifying applications while in execution.

Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for replacing application methods at runtime.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for replacing application methods at runtime by replacing in memory a target method data structure referenced by a target class that includes a code pointer to the executable code of a target method with a source method data structure e.g. referenced by a source class that includes a code pointer to the executable code of a source method. In some examples these systems and methods may also first copy the target method data structure to a dummy method data structure e.g. also referenced by the source class to enable the source method to act as a wrapper method and call the target method as appropriate. In some examples these systems and methods may replace methods of applications that run inside a virtual machine used to execute applications written in a particular programming language. For example these systems and methods may replace methods of an application that runs inside a DALVIK virtual machine that executes applications written in the JAVA language.

In one example a computer implemented method for replacing application methods at runtime may include 1 identifying a class based object oriented application at runtime that may include a target method to replace at runtime with a source method 2 locating a target address of a target method data structure within memory at runtime that describes the target method and may be referenced by a target class within the application the target method data structure including a target code pointer to method code of the target method 3 determining a source address of a source method data structure within memory at runtime that describes the source method the source method data structure including a source code pointer to method code of the source method and 4 modifying the application at runtime to have the target class reference the source method in place of the target method by copying at least a portion of the source method data structure from the source address of the source method data structure to the target address of the target method data structure and thereby replacing the target code pointer with the source code pointer.

In one embodiment the computer implemented method may further include 1 identifying a source class that references the source method data structure that describes the source method 2 determining that the source class references a placeholder method data structure that describes a private non native placeholder method and 3 copying before copying the portion of the source method data structure to the target address at least a portion of the target method data structure from the target address of the target method data structure to a placeholder address of the placeholder method data structure and thereby saving the target code pointer for use in the source method.

In one embodiment the source method may include at least one instruction to execute the target method by calling the placeholder method.

In one embodiment the target method may be untrusted and the source method may include a wrapper method with at least one instruction to prevent an insecure use of the target method.

In one embodiment the computer implemented method may further include 1 determining that the target class may be not initialized and 2 initializing the target class before copying the portion of the source method data structure.

In some examples the computer implemented method may further include resolving the target method in the target class before copying the source method data structure.

In some examples resolving the target method in the target class may include 1 identifying an index of the target method for a reference table of the target class and 2 storing the target address of the target method data structure to a resolved method table at the index.

In one embodiment 1 a name of the source method may match a name of the target method and 2 a parameter set of the source method may match a parameter set of the target method.

In one embodiment modifying the application at runtime to have the target class reference the source method in place of the target method may include modifying the application at runtime without recompiling the source class and without recompiling the target class.

In one embodiment a system for implementing the above described method may include 1 an identification module that identifies a class based object oriented application at runtime that may include a target method to replace at runtime with a source method 2 a location module that locates a target address of a target method data structure within memory at runtime that describes the target method and may be referenced by a target class within the application the target method data structure including a target code pointer to method code of the target method 3 a determination module that may determine a source address of a source method data structure within memory at runtime that describes the source method the source method data structure including a source code pointer to method code of the source method 4 a modifying module that modifies the application at runtime to have the target class reference the source method in place of the target method by copying at least a portion of the source method data structure from the source address of the source method data structure to the target address of the target method data structure and thereby replacing the target code pointer with the source code pointer and 5 at least one processor configured to execute the identification module the location module the determination module and the modifying module.

In some examples the above described method may be encoded as computer readable instructions on a computer readable storage medium. For example a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify a class based object oriented application at runtime that may include a target method to replace at runtime with a source method 2 locate a target address of a target method data structure within memory at runtime that describes the target method and may be referenced by a target class within the application the target method data structure including a target code pointer to method code of the target method 3 determine a source address of a source method data structure within memory at runtime that describes the source method the source method data structure including a source code pointer to method code of the source method and 4 modify the application at runtime to have the target class reference the source method in place of the target method by copying at least a portion of the source method data structure from the source address of the source method data structure to the target address of the target method data structure and thereby replacing the target code pointer with the source code pointer.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for replacing application methods at runtime. As will be explained in greater detail below by replacing in memory a target method data structure referenced by a target class that includes a code pointer to the executable code of a target method with a source method data structure e.g. referenced by a source class that includes a code pointer to the executable code of a source method the systems and methods described herein may facilitate replacing one method of an application with another while the application is loaded in memory. In some examples this may allow replacing a method with a wrapper method for the method that implements security measures to ensure a safe execution of the method. In some examples this approach may achieve the replacement of an application method without requiring the decompilation and or recompilation of any portion of the application. In some examples this approach may achieve the replacement of an application method on platforms that do not natively support the replacement of an application method such as a process virtual machine on a mobile computing device. In some examples these systems and methods may replace an application that runs within a virtual machine without making changes to the virtual machine but by using data structures and methods provided by the virtual machine .

The following will provide with reference to detailed descriptions of exemplary systems for replacing application methods at runtime. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . Detailed descriptions of exemplary application states will be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as computing device illustrated in computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device executing an application . Computing device may be programmed with one or more of modules .

In one embodiment one or more of modules from may when executed by at least one processor of computing device facilitate computing device in replacing application methods at runtime. For example and as will be described in greater detail below one or more of modules may cause computing device to replace a target method of a target class with a source method e.g. of a source class . For example and as will be described in greater detail below identification module may be programmed to identify a class based object oriented application at runtime that may include target method to replace at runtime with source method . Location module may be programmed to locate a target address of a target method data structure within memory at runtime that describes target method and may be referenced by target class within application target method data structure including a target code pointer to target method code of target method . Determination module may be programmed to determine a source address of a source method data structure within memory at runtime that describes source method source method data structure comprising a source code pointer to source method code of source method . Modifying module may be programmed to modify application at runtime to have target class reference source method in place of target method by copying at least a portion of source method data structure from the source address of source method data structure to the target address of target method data structure and thereby replacing target code pointer with source code pointer .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

As illustrated in at step one or more of the systems described herein may identify a class based object oriented application at runtime that may include a target method to replace at runtime with a source method. For example at step identification module may as part of computing device in identify class based object oriented application at runtime that may include target method to replace at runtime with source method .

As used herein the term application may refer to any process and or program. In some examples the application may execute in a process virtual machine. For example the application may run on DALVIK which may execute on a GOOGLE ANDROID platform e.g. a mobile computing device .

As used herein the term method may refer to any method subroutine and or procedure associated with a class defined in a class based object oriented application.

Identification module may identify the application at runtime in any suitable manner. For example identification module may identify the application by executing as a part of and or in communication with the application. In some examples identification module may identify the application by referencing one or more constructs defined in the application.

In some examples identification module may identify a source class that includes the source method. In some examples as will be explained in greater detail below the source class may also include a placeholder method that one or more of the systems described herein may use for saving the target method before replacing the target method with the source method. In some examples identification module may identify an instance of the source class e.g. an object in a format that is not consumable by the framework used to execute the application. For example identification module may identify a jobject for the JAVA NATIVE INTERFACE framework. In these examples identification module may decode the object for use in the framework in which the application executes. For example identification module may decode the jobject into an Object structure consumable by DALVIK. For example identification module may execute the following exemplary code 

In the above example TM may refer to the target method WM may refer to the wrapper method i.e. the source method and FM may refer to a placeholder method. In some examples dvmDecodeIndirectRef may refer to a function of the DALVIK application programming interface API .

In some examples identification module also obtain a pointer for one or more API functions. For example the internal names of one or more API methods may change across development kit versions e.g. the ANDROID NATIVE DEVELOPMENT KIT . Accordingly identification module may identify a list of known names for a function and find a function whose name matches a name on the list. As will be explained in greater detail below in some examples identification module may identify pointers for additional API functions that the systems and methods described herein may use in the course of replacing the target method with the source method.

In some examples the name of the source method may match the name of the target method and the parameter set of the source method e.g. the parameter types number of parameters and or parameter names may match the parameter set of the target method. In some examples the exception handling of the source method may also match the exception handling of the target method.

Returning to at step one or more of the systems described herein may locate a target address of a target method data structure within memory at runtime that describes the target method and is referenced by a target class within the application the target method data structure including a target code pointer to method code of the target method. For example at step location module may as part of computing device in locate a target address of a target method data structure within memory at runtime that describes target method and may be referenced by target class within application target method data structure including a target code pointer to target method code of target method .

As used herein the phrase method data structure may refer to any data structure that may include metadata describing a method. For example a method data structure may include one or more fields including a method code pointer to executable code e.g. byte code for a method. In some examples a method within a class may point to a corresponding method data structure such that the code referenced by the method code pointer of the method data structure is executed when the method of the class is called.

Location module may identify the location of the target address in any suitable manner. For example location module may identify the location of the target address by calling an API function. For example location module may execute the following exemplary code 

As mentioned earlier one or more of the systems described herein may locate dvmGetMethodFromReflectObj by identifying a list of known names for the undocumented function and finding a function whose name matches a name on the list.

Using as an example at step location module may identify an address of a method structure in memory. Method structure may include fields describing method and a method code pointer that points to method code of method .

Returning to at step one or more of the systems described herein may determine a source address of a source method data structure within memory at runtime that describes the source method the source method data structure including a source code pointer to method code of the source method. For example at step determination module may as part of computing device in determine a source address of source method data structure within memory at runtime that describes source method source method data structure comprising source code pointer to source method code of source method .

Determination module may identify the location of the source address in any suitable manner. For example determination module may identify the location of the source address by calling an undocumented API function. For example determination module may execute the following exemplary code 

Likewise in some examples determination module may identify the location of a placeholder address of a placeholder method data structure. For example determination module may execute the following exemplary code 

Using as an example at step determination module may identify an address of a method structure in memory. Method structure may include fields describing method and a method code pointer that points to method code of method .

Returning to at step one or more of the systems described herein may modify the application at runtime to have the target class reference the source method in place of the target method by copying at least a portion of the source method data structure from the source address of the source method data structure to the target address of the target method data structure and thereby replacing the target code pointer with the source code pointer. For example at step modifying module may as part of computing device in modify application at runtime to have target class reference source method in place of target method by copying at least a portion of source method data structure from the source address of source method data structure to the target address of target method data structure and thereby replacing target code pointer with source code pointer .

Modifying module may modify the application to have the target class reference the source method in place of the target method in any suitable manner. In some examples modifying module may perform one or more steps to prepare the classes and or methods before copying the source method data structure to the target address.

In some examples modifying module may determine that the target class is not initialized. In these examples modifying module may initialize the target class before copying the portion of the source method data structure. Likewise modifying module may initialize the source class before copying the portion of the source method data structure to the target address. For example modifying module may execute the following exemplary code 

In the above example as mentioned earlier one or more of the systems described herein may locate dvmInitClass by identifying a list of known names for the undocumented function and finding a function whose name matches a name on the list.

In some examples modifying module may also resolve the target method source method and or placeholder method within their respective classes. For example on some platforms methods may typically only be resolved on their first use. However modifying module may resolve the target method in the target class before copying the source method data structure to the target address by identifying an index of the target method for a reference table of the target class and storing the target address of the target method data structure to a resolved method table at the index. For example modifying module may execute the following exemplary code 

In the above example fakMethod may refer to the placeholder method trgMethod may refer to the target method and wrpMethod may refer to the source method. The method method2ref may include a portion of modifying module that finds a method index in this example saved to ref of the provided method s reference table e.g. for a DALVIK DEX file .

In some examples modifying module may first save the target method data structure before overwriting the target method data structure with the source method data structure. For example modifying module may identify the source class that references the source method data structure that describes the source method. Modifying module may then determine that the source class references a placeholder method data structure that describes a private non native placeholder method. Modifying module may then before copying the portion of the source method data structure to the target address copy at least a portion of the target method data structure from the target address of the target method data structure to a placeholder address of the placeholder method data structure and thereby save the target code pointer for use in the source method. By using a private non native placeholder method the systems described herein may ensure that the runtime environment does not check the class name of the placeholder method to make sure that it matches the class of the target method.

For example the source method may include a call to the placeholder method of the source class. Accordingly the source method may include at least one instruction to execute the target method by calling the placeholder method. In some examples the target method may be untrusted. For example one or more of the systems described herein e.g. identification module may have identified the application as an untrusted application. Additionally or alternatively one or more of the systems described herein may identify the target method as an untrusted method e.g. created by a third party . Accordingly the source method may operate as a wrapper method for the target method with at least one instruction to prevent an insecure use of the target method. For example the source method may sanitize data from arguments it received when called before passing the sanitized data as arguments to the target method. As another example the source method may analyze the context in which it was called and or one or more of the arguments with which it was called to determine whether it is safe to call the target method. For example the source method may prevent a possible exploit of the target method e.g. a buffer overflow an unauthorized use of the target method e.g. in violation of an access policy a data loss prevention policy etc. and or any other use of the target method that may pose a security concern.

Modifying module may save the target method data structure to the location of the placeholder method data structure in any suitable manner. For example modifying module may execute the following exemplary code 

Likewise modifying module may save the source method data structure to the location of the target method data structure in any suitable manner. For example modifying module may execute the following exemplary code 

In some examples modifying module may only copy one or more portions of the source method data structure to the location of the target method data structure. For example modifying module may copy only those fields of the source method data structure necessary to ensure the correct operation of the source method at the location of the target method data structure e.g. only fields that differed between the source method data structure and target method data structure .

In some examples modifying module may modify the application at runtime without recompiling the source class and without recompiling the target class.

Using as an example method may represent a placeholder method in class . Method within class may be described by a method structure that includes fields and a method code pointer that points to dummy code e.g. no content and or no significant content . Modifying module may copy method structure to the location of method structure causing a future invocation of method of class e.g. by method acting as a wrapper method to method to execute method code . Modifying module may then copy method structure to the location of method structure causing a future invocation of method of class to execute method code e.g. so that a wrapper method for method is called instead of method being called directly .

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs or Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for replacing application methods at runtime.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the phrase information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the phrase information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the phrase endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive an application to be transformed transform the application by replacing an original method with a wrapper method use the result of the transformation to securely execute the original method output a further result of securely executing the original method to a display device and store an additional result of securely executing the original method to a storage device. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

