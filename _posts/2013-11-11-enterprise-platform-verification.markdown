---

title: Enterprise platform verification
abstract: Systems and methods for enterprise platform verification are provided. In some aspects, a computing device includes a trusted platform module (TPM). The TPM includes an endorsement key (EK) physically embedded in the TPM. The TPM includes an attestation identity key (AIK), the AIK being used to verify that at least one TPM-protected key different from the EK and different from the AIK is generated at the TPM and is non-migratable. The TPM includes an enterprise machine key (EMK), the EMK being certified by the AIK, the EMK being uniquely associated with the client computing device, and the EMK being generated during enrollment of the client computing device with an enterprise and remaining active until a factory reset of the client computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09391980&OS=09391980&RS=09391980
owner: Google Inc.
number: 09391980
owner_city: Mountain View
owner_country: US
publication_date: 20131111
---
The subject technology is generally directed to platform verification or remote attestation of a client computing device.

Enterprises and other organizations may wish to verify the integrity of client computing devices used for example by employees to access resources of the enterprises or other organizations. Known integrity verification techniques which include for example having an administrator physically access and verify the integrity of the client computing device are cumbersome and may be intrusive of the user s privacy. As the foregoing illustrates a new approach for platform verification or remote attestation of the computing device may be desirable.

In some aspects the disclosed subject matter relates to a client computing device. The client computing device includes one or more processors and a memory. The client computing device includes a trusted platform module TPM residing on a separate application specific integrated circuit ASIC from the one or more processors and from the memory. The TPM stores an endorsement key EK physically embedded in the TPM. The TPM stores an attestation identity key AIK the AIK being used to verify that at least one TPM protected key different from the EK and different from the AIK is generated at the TPM and is non migratable. The TPM stores an enterprise machine key EMK the EMK being certified by the AIK the EMK being uniquely associated with the client computing device and the EMK being generated during enrollment of the client computing device with an enterprise and remaining active until a factory reset of the client computing device. The TPM stores one or more enterprise user keys EUKs each EUK being certified by the AIK each EUK being associated with the client computing device and each EUK being associated with a user account of the client computing device and remaining active until the associated user account is removed from the client computing device. The memory includes a platform verification or module. The platform verification or module stores instructions for receiving via an application server a request for platform verification of the client computing device and processing the request. The platform verification module stores instructions for providing in response to the request for platform verification identifying information of the EMK to a platform verification server while foregoing providing the identifying information of the EMK to the application server.

In some aspects the disclosed subject matter relates to a method implemented at a platform verification server. The method includes receiving at the platform verification server and from an application server a request for platform verification of a client computing device. The method includes transmitting from the platform verification server to the client computing device in response to the request for platform verification a request that the client computing device provide identifying information of an enterprise machine key EMK of the client computing device to the platform verification server. The method includes receiving at the platform verification server and from the client computing device the identifying information of the EMK. The method includes verifying using a certificate associated with the client computing device and stored at the platform verification server whether the EMK of the client computing device is valid. The method includes providing from the platform verification server to the application server an indication that the platform verification of the client computing device is successful in a case where the EMK of the client computing device is valid. The method includes providing from the platform verification server to the application server an indication that the platform verification of the client computing device is unsuccessful in a case where the EMK of the client computing device is invalid.

In some aspects the disclosed subject matter relates to a non transitory computer readable medium encoded with executable instructions. The instructions include code for receiving at a platform verification server and from an application server a request for platform verification of a client computing device. The instructions include code for receiving at the platform verification server and from the client computing device identifying information of an enterprise machine key EMK of the client computing device. The instructions include code for verifying using a certificate associated with the client computing device and stored at the platform verification server whether the EMK of the client computing device is valid. The instructions include code for providing from the platform verification server to the application server an indication that the platform verification of the client computing device is successful in a case where the EMK of the client computing device is valid while foregoing providing the identifying information of the EMK to the application server. The instructions include code for providing from the platform verification server to the application server an indication that the platform verification of the client computing device is unsuccessful in a case where the EMK of the client computing device is invalid while foregoing providing the identifying information of the EMK to the application server.

It is understood that other configurations of the subject technology will become readily apparent from the following detailed description where various configurations of the subject technology are shown and described by way of illustration. As will be realized the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects all without departing from the scope of the subject technology. Accordingly the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.

The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However it will be clear and apparent that the subject technology is not limited to the specific details set forth herein and may be practiced without these specific details. In some instances certain structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology.

The subject technology provides approaches for platform verification or remote attestation of a client computing device. For example an enterprise or any other organization may use the techniques described herein to verify that a user e.g. an employee who is trying to use a client computing device to access an enterprise resource is using a legitimate client computing device which has valid hardware and or a valid operating system e.g. an operating system acknowledged by a specified operating system developer as being valid on the client computing device and that the user is accessing the client computing device using a valid enterprise user account.

Enterprises or other organization may wish to verify the integrity of computing devices used by users to access enterprise resources. Thus a platform verification or remote attestation solution that allows a remote computing device to prove information about itself e.g. that the remote computing device has a valid version of its operating system that is approved by a developer of the operating system may be desirable.

As described herein computing devices are capable of platform verification or remote attestation. The computing devices may prove that they are legitimate computing devices running legitimate operating system s approved by developer s . In some examples this proof may be completed in the context of an asymmetric key pair a remote server is assured that a private key in the asymmetric key pair is held by a computing device with a legitimate operating system. Two different keys may be used a machine key or a user key for example an enterprise machine key or an enterprise user key as described below.

A machine key may be associated with the computing device and may live as long as the trusted platform module TPM owner. A certificate of the machine key includes a unique device identifier. The machine key may be generated automatically and the certificate is automatically uploaded to a device management server. An enterprise application may challenge the machine key to establish that the device is running a valid version of its operating system and it is enrolled with the enterprise.

A user key may be associated with a user of the computing device and may live as long as the user account is on the computing device. The certificate of the user key includes no identifying information. The user key is generated on demand as explained below and the certificate of the user key is provided on request. An enterprise application may challenge the user key to establish that the user is signed in to a device running a valid version of its operating system and operating in an allowed mode. In some examples the user key can be used in a bring your own device scenario since the device does not need to be enrolled with or owned by the enterprise. The user key is available for repurposing to the degree that the user key may be decoupled from its role or assigned a new role. For example if a user switches jobs he she may keep the same user key and the same user key may be associated with different enterprises at different times. An enterprise application may also consume and assign any number of keys to a user.

An enterprise administrator may control the following policies enable disable feature s for device s owned by and enrolled to the enterprise enable disable feature s for user account s owned by the enterprise across all devices having the user account s control which application s can access the feature s through extension application programming interfaces APIs of the operating system the policies for access off feature s may be associated with user account s or device s and control which user s may operate in verified mode and which user s may operate in developer mode.

According to some examples the unique device identifier in the machine key is never available to enterprise application s and is only available to the device management server. An enterprise may deploy third party application s that leverage this feature without sharing device identifying information.

As shown the client computing device includes a processing unit a network interface a trusted platform module TPM and a memory . The processing unit includes one or more processors. The processing unit may include a central processing unit CPU a graphics processing unit GPU or any other processing unit. The processing unit executes computer instructions that are stored in a computer readable medium for example the memory . The network interface allows the client computing device to transmit and receive data in the one or more networks to communicate with the privacy certificate authority the platform verification module and the application server among other machines. The memory stores data and or instructions. The memory may be one or more of a cache unit a storage unit an internal memory unit or an external memory unit. As illustrated the memory includes a platform verification module and a user initialization module .

The TPM may be a separate application specific integrated circuit ASIC from the processing unit and the memory . A communication interface may provide for communication between the TPM and the processing unit . The communication interface may be for example low pin count LPC inter integrated circuit I2C or serial peripheral interface SPI . Alternatively a soft TPM implemented in operating system software of the memory may be used or the TPM may be integrated with the processing unit and may reside on the same ASIC as the processing unit . The TPM includes an endorsement key EK an attestation identity key AIK an enterprise machine key EMK and an enterprise user key EUK .

The EK is physically and permanently embedded in the TPM . The EK is generated in the factory of the manufacturer of the client computing device and certified by the manufacturer. The EK resides in the TPM of the client computing device for the lifetime of the TPM .

The AIK is a TPM protected key that is activated by the EK and is used to certify other TPM generated non migratable keys. The AIK is certified by the privacy certificate authority which may be associated with a manufacturer of the client computing device . The AIK is generated when TPM ownership is taken in other words when the client computing device is placed in service by a user. The AIK is activated when platform verification is first enabled and used. In some cases not every TPM protected key is certifiable by the AIK . However for a key e.g. a key different from the EK that is generated by the TPM and non migratable the AIK may be used to verify that the key is generated by the TPM and non migratable. The AIK remains active until the TPM owner is cleared. In some examples the AIK is generated during initial setup of the client computing device by the user for example when the user take the client computing device out of the box and begins using the client computing device . The AIK may be generated using a TPM owner privilege of the TPM which is accessible via a TPM owner password. The TPM owner password may be deleted after the initial setup of the client computing device . In some cases the AIK is used to verify that each and every TPM protected key different from the EK and different from the AIK is generated at the TPM and is non migratable.

The EMK is certified by the AIK and is uniquely associated with the client computing device . The EMK is generated in the TPM during enterprise enrollment for example when the client computing device is registered with an enterprise or granted permission to access enterprise resources e.g. enterprise data stored on a network or an enterprise network . The EMK is certified by the AIK and the privacy certificate authority . The EMK remains active as long as the client computing device is enrolled with the enterprise in other words until a factory reset of the client computing device .

While a single EUK is illustrated in the subject technology may be implemented with one or multiple EUKs . Each EUK is generated on demand in the TPM in other words each EUK may be generated when a user of the client computing device attempts to register with the enterprise or access enterprise data information or service s . Each EUK may be generated in response to an attempt by a user of the client computing device to access an enterprise resource via the client computing device . Similarly to the EMK each EUK is certified by the AIK and the privacy certificate authority . Each EUK is associated with a single device the client computing device and a single user account of the device. However a user account on a device such as the client computing device may have multiple EUKs . For example the same user account on a non enterprise computer belonging to a user may have an EUK for accessing enterprise data of a business where the user is employed and an EUK for accessing data of a volunteer organization where the user volunteers. EUK s associated with a user account at the client computing device may be destroyed when the user account is removed from the client computing device and remain active until the associated user account is removed from the client computing device .

The platform verification module stores instructions for receiving via the application server e.g. a corporate virtual private network VPN server a request for platform verification of the client computing device and processing the request. The platform verification module stores instructions for providing in response to the request for platform verification identifying information of the EMK and or identifying information of the EUK to the platform verification server while foregoing providing the identifying information of the EMK and or the identifying information of the EUK to the application server . The identifying information may include information from the EMK and or the EUK a certificate or a proof of possession of the EMK and or the EUK . The proof of possession may be a digital signature of a challenge string. As a result secure private and identifying information of the client computing device which is associated with the EMK or the EUK is not shared with the application server and is only shared with the platform verification server which may be associated with the enterprise. As a result of the platform verification server being associated with the enterprise private information of the client computing device may stay within the enterprise and not be shared outside the enterprise. The platform verification server notifies the application server regarding whether the platform verification of the client computing device was successful for example via a Boolean message where TRUE means successful and FALSE means unsuccessful or vice versa. The operation of the client computing device when executing the platform verification module is described in greater detail in conjunction with .

The user initialization module stores instructions for receiving an indication of a user initialization of the client computing device . For example a user who recently purchased the client computing device may turn on the client computing device and attempt to initialize the computing device for his her personal use. The user initialization module stores instructions for reading the EK upon receiving the indication of the user initialization. The user initialization module stores instructions for generating the AIK using a fake privacy certificate authority public key and the EK as the client computing device may not be connected to a network for accessing the privacy certificate authority . The user initialization module stores instructions for generating data regarding a platform state of the client computing device using the AIK . The user initialization module stores instructions for connecting to a network for accessing the privacy certificate authority . The user initialization module stores instructions for after connecting to the network certifying the AIK to acquire an encrypted AIK certificate from the privacy certificate authority over the network. The user initialization module stores instructions for decrypting the encrypted AIK certificate. The operation of the client computing device when executing when executing the user initialization module is described in greater detail in conjunction with .

The platform verification server includes instructions for receiving from the application server a request for platform verification of the client computing device . The platform verification server includes instructions for transmitting to the client computing device in response to the request for platform verification a request that the client computing device provide identifying information of the EMK and or the EUK of the client computing device . The platform verification server includes instructions for receiving from the client computing device the identifying information of the EMK and or the EUK . The platform verification server includes instructions for verifying using a certificate associated with the client computing device and stored at the platform verification server whether the EMK and or the EUK of the client computing device is valid. The platform verification server includes instructions for providing to the application server an indication e.g. a Boolean indication that the platform verification of the client computing device is successful if the EMK and or the EUK is valid. The platform verification server includes instructions for providing to the application server an indication e.g. a Boolean indication that the platform verification of the client computing device is unsuccessful if the EMK and or the EUK is invalid. The operation of the platform verification server is described in more detail in conjunctions with and .

The privacy certificate authority may be associated with a manufacturer of the client computing device . The privacy certificate authority stores instructions for certifying the AIK the EMK and the EUK of the client computing device . The privacy certificate authority may store instructions for verifying that the client computing device has a valid operating system associated with the manufacturer and for providing a certificate to this effect.

The application server may host any application s that require verification of platform verification of the client computing device for accessing the application s . However the client computing device may not trust the application server to provide information about TPM keys of the client computing device to the application server . Thus the client computing device may rely on the platform verification server to implement platform verification of the client computing device and to provide the result of the platform verification e.g. as a Boolean value to the application server .

The process begins at step where a client computing device e.g. client computing device executing platform verification module receives via an application server e.g. application server and processes a request for platform verification of the client computing device.

In step the client computing device provides in response to the request for platform verification identifying information of an EMK e.g. EMK of the client computing device to a platform verification server e.g. platform verification server . The client computing device foregoes providing the identifying information of the EMK to the application server. As a result the privacy of the client computing device is ensured and the user of the client computing device is not required to trust the application server with the identifying information of the EMK. The identifying information of the EMK may include a certificate or a proof of possession of the EMK.

In step the client computing device provides in response to the request for platform verification identifying information of a specified EUK e.g. EUK or a specified one of multiple EUKs stored at the client computing device from among one or more EUKs of the client computing device to the remote attestion server. The client computing device foregoes providing the identifying information of the specified EUK to the application server. As a result the privacy of the client computing device is ensured and the user of the client computing device is not required to trust the application server with the identifying information of the specified EUK. The identifying information of the specified EUK may include a certificate or a proof of possession of the specified EUK.

As illustrated in both steps and are executed in the process . However in some examples the process may skip either step or step and platform verification may be completed by providing the EMK and not the specified EUK or by providing the specified EUK and not the EMK.

In step the client computing device signals for the platform verification server to notify the application server that the platform verification is successful in response to the platform verification server receiving and verifying the identifying information of the EMK or the specified EUK. The identifying information of the EMK or the specified EUK may not be provided to the application server so as to protect the privacy of the client computing device and not to require the user of the client computing device to trust the application server with this identifying information. After step the process ends.

As illustrated in the steps of the process are carried out in series and according to a specified order. However the steps of the process may be carried out in any order and or one or more of the steps of the process may be skipped. In some implementations two or more of the steps of the process may be carried out in parallel.

The Trusted Computing Group TCG standard specifies an attestation identity certification process for TPMs which requires both an active connection in some cases over a network with a privacy certificate authority e.g. privacy certificate authority and TPM owner privilege. In some operating systems TPM owner privilege may only be available during initialization of the first user account and the TPM owner password may be permanently destroyed after the initialization of the first user account. However attestation identity certification may be a privacy sensitive operation requiring user and administrator consent. As the foregoing illustrates a new approach for initializing a client computing device that does not require a network connection during initialization but allows the client computing device to communicate with the privacy certificate authority may be desirable.

The process begins at step where a client computing device e.g. client computing device executing user initialization module receives an indication of a user initialization of the client computing device. For example a user of the client computing device who recently purchased the client computing device may turn on the client computing device and begin initializing the client computing device for his her personal or business use. When the client computing device receives the indication of the user initialization of the client computing device the client computing device may not be connected to a network as the user may not yet have selected a network to access or provided credentials e.g. a password for accessing the network.

In step the client computing device reads an EK e.g. EK of the client computing device upon receiving the indication of the user initialization in step . The client computing device may not yet be connected to the network.

In step the client computing device generates an AIK e.g. AIK of the client computing device using a fake privacy certificate authority public key and the EK. The client computing device may use the fake privacy certificate authority public key as the client computing device may not yet be able to access the real public key of the privacy certificate authority e.g. privacy certificate authority due to the lack of the network connection at the client computing device.

In step the client computing device generates data regarding a platform state of the client computing device using the AIK. For example the client computing device may generate an EMK e.g. EMK or an EUK e.g. EUK . The generated data may be stored at the client computing device. The client computing device may not yet be connected to the network.

After steps are completed the data stored at the client computing device may include the EK public key and certificate encrypted with the real privacy certificate authority public key at the time of manufacture of the client computing device AIK public key AIK private key as a TPM wrapped blob fake privacy certificate authority public key used to generate the AIK.

In step the client computing device connects to the network. For example the user of the client computing device may select a WiFi network and enter credentials e.g. a password for accessing the WiFi network or insert and activate a subscriber identity module SIM card for accessing a cellular network.

In step after connecting to the network the client computing device certifies the AIK to acquire an encrypted AIK certificate from the privacy certificate authority e.g. privacy certificate authority over the network. As a result the AIK may be based on the real privacy certificate authority public key rather than the fake privacy certificate authority public key as in step .

In step the client computing device decrypts the encrypted AIK certificate. Any data regarding the platform state of the client computing device for example the EMK or the EUK may be modified responsive to the certification of the AIK by the privacy certificate authority. After step the process ends.

As set forth above steps may require TPM owner privilege and may be completed without a network connection for accessing the privacy certificate authority. However steps may in some cases be completed without TPM owner privilege. Steps may be completed when privacy policies and configuration have full control. The approach described in provides a clean separation of tasks independent of the privacy certificate authority steps and tasks dependent on access to the privacy certificate authority steps .

As illustrated in the steps of the process are carried out in series and according to a specified order. However the steps of the process may be carried out in any order and or one or more of the steps of the process may be skipped. In some implementations two or more of the steps of the process may be carried out in parallel. Using the techniques described herein privacy issues may be controlled at the same time as TPM owner security may be enforced.

The process begins at step where a platform verification server e.g. platform verification server receives from an application server e.g. application server a request for platform verification of a client computing device e.g. client computing device . The platform verification server may be associated with an enterprise with which the client computing device is registered for example an employer of the user of the client computing device. The user may register the client computing device with the platform verification server for example to access resources e.g. files network connections etc. of the employer at the application server.

In step the platform verification server transmits to the client computing device in response to the request for platform verification a request that the client computing device provide identifying information of an EMK e.g. EMK or an EUK e.g. EUK of the client computing device to the platform verification server.

In step the platform verification server receives from the client computing device the identifying information of the EMK or the EUK. The identifying information of the EMK or the EUK may include a certificate or a proof of possession of the EMK or the EUK.

In step the platform verification server verifies using a certificate uniquely associated with the client computing device and stored at the platform verification server whether the EMK or the EUK of the client computing device is valid.

In step if the EMK or the EUK is valid the process continues to step . If the EMK or the EUK is invalid the process continues to step .

In step if the EMK or the EUK is valid the platform verification server provides to the application server an indication that the platform verification of the client computing device is successful. The platform verification server may forego providing the identifying information of the EMK or the EUK to the application server as the application server may not be trusted to receive the identifying information. After step the process ends.

In step if the EMK or the EUK is invalid the platform verification server provides to the application server an indication that the platform verification of the client computing device is unsuccessful. The platform verification server may forego providing the identifying information of the EMK or the EUK to the application server as the application server may not be trusted to receive the identifying information. After step the process ends.

According to some implementations the indication that the platform verification of the client computing device is successful includes a first Boolean value and the indication that the platform verification of the client computing device is unsuccessful includes a second Boolean value. For example the first Boolean value may be TRUE and the second Boolean value may be FALSE or vice versa.

As illustrated in the steps of the process are carried out in series and according to a specified order. However the steps of the process may be carried out in any order and or one or more of the steps of the process may be skipped. In some implementations two or more of the steps of the process may be carried out in parallel.

Platform verification is used by a client computing device to prove claims about itself to a remote party. Services or components that are able to make use of keys e.g. EK AIK EMK or EUK which belong to or are protected by a platform verification platform may be desirable.

A platform verification solution may include one or more asymmetric key pairs for which proofs exist which indicate that attested claims apply to the client computing device that owns the private keys. In a TPM such a key is called a certified key as the key is provably generated by the TPM and is non migratable. Part of the platform verification solution may be to send the proofs related to such a key along with a proof of possession e.g. a digital signature to a remote party in order to prove claims about the platform of the client computing device. A proof of possession artifact may be included as a payload of the attestation stage. The proof of possession artifact may be consumed by most certificate authority CA implementations as a certificate signing request for example using a signed public key and challenge SPKAC . Once platform attestation has been verified this artifact may be used to re purpose the private key for another use. The new key usage may be completely unrelated to platform verification but may support cryptographic mechanisms for which the key was generated. For example in some cases if the key is a signing key the key may not become an encryption key.

The repurposing includes the steps 1 5 summarized below and described in greater detail in . 1 Extract the SPKAC or similar artifact from the attestation payload data. 2 Present the artifact to a CA and receive a certificate for the new purpose. 3 Discard any existing certificate s and or other metadata for the key that are no longer relevant. 4 Signal for the client computing device to discard any existing certificate s and or other metadata for the key that are no longer relevant. 5 Optionally send the new certificate to the client computing device for installation at the client computing device. Importantly using the solution described herein a service may leverage attested platform keys without being involved in the details of the platform verification. Furthermore the proofs of the platform claims remain strong because the same key is used.

The process begins at step where a platform verification server e.g. platform verification server receives from a client computing device e.g. client computing device identifying information of an EMK e.g. EMK or an EUK e.g. EUK of the client computing device. The step may correspond to the step of the process of .

In step the platform verification server extracts from the identifying information of the EMK or the EUK a signed public key and challenge SPKAC of the client computing device.

In step the platform verification server provides to an application server e.g. application server the SPKAC of the client computing device for creating at the application server a certificate for the client computing device. The SPKAC may be provided to the application server together with an indication that the platform verification of the client computing device processed at the platform verification server and based on the EMK or the EUK of the client computing device is successful. The application server creates the certificate for the client computing device.

In step the platform verification server signals for providing from the application server to the client computing device for installation at the client computing device the certificate associated with the client computing device. Alternatively the certificate may be provided directly to the client computing device from the platform verification server.

In step the platform verification server discards from a memory of the platform verification server metadata in the identifying information of the EMK or the EUK that is not relevant to the SPKAC.

In step the platform verification server signals for the client computing device to discard the metadata in the identifying information of the EMK or the EUK that is not relevant to the SPKAC. In response the client computing device may discard from the memory of the client computing device the metadata in the identifying information of the EMK or the EUK that is not relevant to the SPKAC. After step the process ends.

As illustrated in the steps of the process are carried out in series and according to a specified order. However the steps of the process may be carried out in any order and or one or more of the steps of the process may be skipped. In some implementations two or more of the steps of the process may be carried out in parallel.

The bus collectively represents all system peripheral and chipset buses that communicatively connect the numerous internal devices of the electronic system . For instance the bus communicatively connects the processing unit s with the read only memory the system memory and the permanent storage device .

From these various memory units the processing unit s retrieves instructions to execute and data to process in order to execute the processes of the subject technology. The processing unit s can be a single processor or a multi core processor in different implementations.

The read only memory ROM stores static data and instructions that are needed by the processing unit s and other modules of the electronic system. The permanent storage device on the other hand is a read and write memory device. This device is a non volatile memory unit that stores instructions and data even when the electronic system is off. Some implementations of the subject technology use a mass storage device for example a magnetic or optical disk and its corresponding disk drive as the permanent storage device .

Other implementations use a removable storage device for example a floppy disk flash drive and its corresponding disk drive as the permanent storage device . Like the permanent storage device the system memory is a read and write memory device. However unlike storage device the system memory is a volatile read and write memory such a random access memory. The system memory stores some of the instructions and data that the processor needs at runtime. In some implementations the processes of the subject technology are stored in the system memory the permanent storage device or the read only memory . For example the various memory units include instructions for enterprise platform verification in accordance with some implementations. From these various memory units the processing unit s retrieves instructions to execute and data to process in order to execute the processes of some implementations.

The bus also connects to the input and output device interfaces and . The input device interface enables the user to communicate information and select commands to the electronic system. Input devices used with input device interface include for example alphanumeric keyboards and pointing devices also called cursor control devices . Output device interfaces enables for example the display of images generated by the electronic system . Output devices used with output device interface include for example printers and display devices for example cathode ray tubes CRT or liquid crystal displays LCD . Some implementations include devices for example a touch screen that functions as both input and output devices.

Finally as shown in bus also couples electronic system to a network not shown through a network interface . In this manner the electronic system can be a part of a network of computers for example a local area network LAN a wide area network WAN or an Intranet or a network of networks for example the Internet. Any or all components of electronic system can be used in conjunction with the subject technology.

The above described features and applications can be implemented as software processes that are specified as a set of instructions recorded on a computer readable storage medium also referred to as computer readable medium . When these instructions are executed by one or more processing unit s e.g. one or more processors cores of processors or other processing units they cause the processing unit s to perform the actions indicated in the instructions. Examples of computer readable media include but are not limited to CD ROMs flash drives RAM chips hard drives EPROMs etc. The computer readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.

In this specification the term software is meant to include firmware residing in read only memory or applications stored in magnetic storage or flash storage for example a solid state drive which can be read into memory for processing by a processor. Also in some implementations multiple software technologies can be implemented as sub parts of a larger program while remaining distinct software technologies. In some implementations multiple software technologies can also be implemented as separate programs. Finally any combination of separate programs that together implement a software technology described here is within the scope of the subject technology. In some implementations the software programs when installed to operate on one or more electronic systems define one or more specific machine implementations that execute and perform the operations of the software programs.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

These functions described above can be implemented in digital electronic circuitry in computer software firmware or hardware. The techniques can be implemented using one or more computer program products. Programmable processors and computers can be included in or packaged as mobile devices. The processes and logic flows can be performed by one or more programmable processors and by one or more programmable logic circuitry. General and special purpose computing devices and storage devices can be interconnected through communication networks.

Some implementations include electronic components for example microprocessors storage and memory that store computer program instructions in a machine readable or computer readable medium alternatively referred to as computer readable storage media machine readable media or machine readable storage media . Some examples of such computer readable media include RAM ROM read only compact discs CD ROM recordable compact discs CD R rewritable compact discs CD RW read only digital versatile discs e.g. DVD ROM dual layer DVD ROM a variety of recordable rewritable DVDs e.g. DVD RAM DVD RW DVD RW etc. flash memory e.g. SD cards mini SD cards micro SD cards etc. magnetic or solid state hard drives read only and recordable Blu Ray discs ultra density optical discs any other optical or magnetic media and floppy disks. The computer readable media can store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code for example is produced by a compiler and files including higher level code that are executed by a computer an electronic component or a microprocessor using an interpreter.

While the above discussion primarily refers to microprocessor or multi core processors that execute software some implementations are performed by one or more integrated circuits for example application specific integrated circuits ASICs or field programmable gate arrays FPGAs . In some implementations such integrated circuits execute instructions that are stored on the circuit itself.

As used in this specification and any claims of this application the terms computer server processor and memory all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification the terms display or displaying means displaying on an electronic device. As used in this specification and any claims of this application the terms computer readable medium and computer readable media are entirely restricted to tangible physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals wired download signals and any other ephemeral signals.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some aspects of the disclosed subject matter a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

It is understood that any specific order or hierarchy of steps in the processes disclosed is an illustration of example approaches. Based upon design preferences it is understood that the specific order or hierarchy of steps in the processes may be rearranged or that all illustrated steps be performed. Some of the steps may be performed simultaneously. For example in certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components illustrated above should not be understood as requiring such separation and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Various modifications to these aspects will be readily apparent and the generic principles defined herein may be applied to other aspects. Thus the claims are not intended to be limited to the aspects shown herein but is to be accorded the full scope consistent with the language claims where reference to an element in the singular is not intended to mean one and only one unless specifically so stated but rather one or more. Unless specifically stated otherwise the term some refers to one or more. Pronouns in the masculine e.g. his include the feminine and neuter gender e.g. her and its and vice versa. Headings and subheadings if any are used for convenience only and do not limit the subject technology.

A phrase for example an aspect does not imply that the aspect is essential to the subject technology or that the aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations or one or more configurations. A phrase for example an aspect may refer to one or more aspects and vice versa. A phrase for example a configuration does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations or one or more configurations. A phrase for example a configuration may refer to one or more configurations and vice versa.

