---

title: Pre-authorizing a client application to access a user account on a content management system
abstract: A content management system can tag a client installer with an information tag linking the client installer to a user account. The client installer can be configured to install the client-side application on the client device and pass the identification tag to the installed client-side application. The client-side application can transmit the identification tag to the content management system, which can use the identification tag to identify the linked user account and log the client-side application into the user account. The content management system can implement several verification measures such as limiting the number of times and when an identification tag can be used, as well as IP addresses that can use the identification tag. The content management system can also use data cached by the web-browser application to determine if the web-browser application was used to access the user account in the past.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09258291&OS=09258291&RS=09258291
owner: DROPBOX, INC.
number: 09258291
owner_city: San Francisco
owner_country: US
publication_date: 20131219
---
The present technology pertains to installing a client side application on a client device and more specifically pertains to pre authorizing the client side application to access a specified user account upon installation.

Cloud storage accounts allow users to store their content items in an online user account that can be accessed from any computing device with a network connection. Users can upload content items such as pictures songs documents etc. from a computing device to their online user account and later access the content items from different computing devices.

To access their user account a user can use a web browser application installed on their client device. For example the user can use the web browser to access the content management system and provide login credentials to access their user account. Alternatively a user can use a client side application to access their user account on the content management system. For example a user can use the web browser application to download a client installer from the content management system which can then be used to install the client application.

Current systems require a user to re enter their login credentials to log in to their user account on the client side application even if the user is currently logged in using the web browser application or was logged in when requesting to install the client side application. Providing a client installer configured to automatically log the user in to their user account eliminates the need for a user to re enter their login credentials but poses a security risk if the client installer is used by a different user. Accordingly an improvement is needed.

Additional features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for pre authorizing a client side application to access a user account on a content management system. A user can access their user account on a content management system using a web browser application and while logged into their user account request to install a client side application that can also be used to access their user account.

The content management system can pre authorize the client side application to automatically log in to the requesting user s user account upon installation without requiring the user to provide their login credentials a second time. To accomplish this the content management system can tag a client installer with an information tag linking the client installer to the user account. The client installer can be configured to install the client side application on the client device and pass the identification tag to the installed client side application. The client side application can transmit the identification tag to the content management system which can use the identification tag to identify the linked user account and log the client side application into the user account.

The content management system can implement several verification measures to ensure that the client side application is only pre authorized when installed by the appropriate user. Verification measures can include limiting the number of times that an identification tag can be used to pre authorize a client side application restricting the amount of time that the identification tag is valid and or limiting the IP addresses that can use the identification tag.

The content management system can further restrict use of the identification tag to a client device associated with the user account. The content management system can use data cached by the web browser application to determine if the web browser application was used to access the user account in the past. To gather the cached data the content management system can tag the client installer with a web browser identifier that identifies the web browser application used to request installation of the client side application. The installed client side application can use the web browser identifier to identify the web browser application and transmit the cached data to the content management system.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the disclosure.

The disclosed technology addresses the need in the art for pre authorizing a client side application to access a user account on a content management system. A user can access their user account on a content management system using a web browser application and while logged into their user account request to install a client side application that can also be used to access their user account.

The content management system can pre authorize the client side application to automatically log in to the requesting user s user account upon installation without requiring the user to provide their login credentials a second time. To accomplish this the content management system can tag a client installer with an information tag linking the client installer to the user account. The client installer can be configured to install the client side application on the client device and pass the identification tag to the installed client side application. The client side application can transmit the identification tag to the content management system which can use the identification tag to identify the linked user account and log the client side application into the user account.

The content management system can implement several verification measures to ensure that the client side application is only pre authorized when installed by the appropriate user. Verification measures can include limiting the number of times that an identification tag can be used to pre authorize a client side application restricting the amount of time that the identification tag is valid and or limiting the IP addresses that can use the identification tag.

The content management system can further restrict use of the identification tag to a client device associated with the user account. The content management system can use data cached by the web browser application to determine if the web browser application was used to access the user account in the past. To gather the cached data the content management system can tag the client installer with a web browser identifier that identifies the web browser application used to request installation of the client side application. The installed client side application can use the web browser identifier to launch the identified web browser application and transmit the cached data to the content management system.

An exemplary system configuration is illustrated in wherein electronic devices communicate via a network for purposes of exchanging content and other data. The system can be configured for use on a wide area network such as that illustrated in . However the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices. For example each of the components of system in can be implemented in a localized or distributed fashion in a network.

In system a user can interact with content management system through client devices . . . collectively connected to network by direct and or indirect communication. Content management system can support connections from a variety of different client devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Client devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple client devices .

A user can interact with content management system via a client side application installed on client device . A client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system via a third party application such as a web browser application that resides on client device and is configured to communicate with content management system . In either case the client side application or the third party application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system via a client side application integrated with the file system or via a webpage displayed using a web browser application.

Content management system can make it possible for a user to store content as well as perform a variety of content management tasks such as retrieve modify browse and or share the content. Furthermore content management system can make it possible for a user to access the content from multiple client devices . For example client device can upload content to content management system via network . The content can later be retrieved from content management system using the same client device or some other client device .

To facilitate the various content management services a user can create an account with content management system . The account information can be maintained in user account database . User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However content management system can also be configured to accept additional user information.

User account database can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . The account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as digital data documents text files audio files video files etc. from one or more client devices authorized on the account. The content can also include folders of various types with different behaviors or other mechanisms of grouping content items together. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system can hide the complexity and details from client devices so that client devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on client device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of inexpensive disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT32 NTFS EXT2 EXT3 EXT4 ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more client devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example client device can include client software which synchronizes via a synchronization module at content management system content in client device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes client device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content via a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other client devices associated with the user s account. For example multiple client devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple client devices .

Content management system can include a communications interface for interfacing with various client devices and can interact with other content and or service providers . . . collectively via an Application Programming Interface API . Certain software applications can access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific client devices and so forth to ensure only authorized clients and users can access files. Further content management system can include analytics module module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple client devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

In some embodiments content management system can be configured to maintain a content directory identifying the location of each content item in content storage . The content directory can include a unique content entry for each content item stored in the content storage.

A content entry can include a content path that can be used to identify the location of the content item in a content management system. For example the content path can include the name of the content item and a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. Content management system can use the content path to present the content items in the appropriate folder hierarchy.

A content entry can also include a content pointer that identifies the location of the content item in content storage . For example the content pointer can include the exact storage address of the content item in memory. In some embodiments the content pointer can point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry can also include a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module can be configured to add a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module can be configured to generate a custom network address such as a uniform resource locator URL which allows any web browser to access the content in content management system without any authentication. To accomplish this sharing module can be configured to include content identification data in the generated URL which can later be used to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL the content identification data included in the URL can be transmitted to content management system which can use the received content identification data to identify the appropriate content entry and return the content item associated with the content entry.

In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. For example the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the content item has not been created. Sharing module can be configured to change the value of the flag to 1 or true after generating a URL to the content item.

In some embodiments sharing module can also be configured to deactivate a generated URL. For example each content entry can also include a URL active flag indicating whether the content should be returned in response to a request from the generated URL. For example sharing module can be configured to only return a content item requested by a generated link if the URL active flag is set to 1 or true. Thus access to a content item for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a user to restrict access to the shared content item without having to move the content item or delete the generated URL. Likewise sharing module can reactivate the URL by again changing the value of the URL active flag to 1 or true. A user can thus easily restore access to the content item without the need to generate a new URL.

While content management system is presented with specific components it should be understood by one skilled in the art that the shown architectural configuration is simply one possible configuration and that other configurations with more or less components are also possible. For example content management system can include pre authorization module configured to tag a client installer to facilitate pre authorization of a client side application. That is upon successful installation the pre authorized client side application is automatically logged into a specified user account allowing a user to access their user account without having to re enter their login credentials.

The data tagged to the client installer can link the client installer to the specified user account. For example pre authorization module can tag the client installer with an identification tag linking the client installer to the user account used to request installation of the client side application. Upon execution the tagged client installer can install the client side application and pass the identification tag to the installed client side application. The client side application can then transmit the identification tag to content management system to log the client side application into the user account identified by the identification tag.

To accomplish this pre authorization module can be configured to identify whether an installation request to install the client side application is associated with an actively authorized user account. For example a user can be logged into their user account using a web browser application and while logged in request to install the client side application. Pre authorization module can determine if the installation request was received while the user was logged into a user account. For example pre authorization module can receive an installation request from client device to install the client side application on client device and then determine if client device is currently logged in and authorized to access a specified user account.

If installation request is associated with an actively authorized user account pre authorization module can generate an identification tag and associate the identification tag with the user account. For example pre authorization module can create an entry in a pre authorization index that lists identification tags and their associated user account. Alternatively the identification tag can include sufficient data to directly identify the user account. For example the identification tag can include an account identifier identifying the specified user account. Pre authorization module can then provide the tagged client installer to the requesting client device where it can be used to install the pre authorized client side application.

At block the content management system determines if the installation request is associated with an active user account. For example the content management system can determine if the client device is currently was logged into a user account at the time the installation request was received.

If at block the content management system determines that the installation request is not associated with a user account i.e. the client device was not logged into a user account when the installation request was received the method continues to block where the content management system transmits an untagged client installer to the client device. The untagged client installer can be used by the client device to install the client side application however the client side application will not be pre authorized to access a user account. A user will therefore be required to enter their login credentials to login to their user account.

Alternatively if at block the content management system determines that the installation request is associated with a user account the method continues to block where the content management system generates an identification tag. At block the content management system creates an entry in the pre authorization index that includes the identification tag and an account identifier identifying the associated user account.

At block the content management system tags the client installer with the generated identification tag and at block transmits the tagged client installer to the requesting client device. The client device can use the tagged client installer to install the client side application. The tagged identification tag can also be passed to the client side application.

At block the content management system receives a pre authorization request from the client device that includes an identification tag. The pre authorization request can be transmitted as a result of the client side application being successfully installed on the client device. For example the client side application can be configured to automatically transmit the pre authorization request to the content management system upon the client side application being successfully installed on the client device.

At block the content management system can identify the user account associated with the received identification tag. For example the content management system can search the pre authorization index to locate the identification tag and then identify the associated user account.

At block the content management system can log the client side application into the identified user account thereby authorizing the client side application to access content items assigned to the user account assign new content items to the user account etc. The method then ends.

While pre authorizing a client side application provides a simple user experience it can also lead to potential security vulnerability if proper verification measures are not implemented. For example a user can pass the tagged client installer to a friend that should not be pre authorized to access the user account. Content management system can be configured to implement one or more verification measures to ensure that the client side application is only pre authorized when installed by the appropriate user.

One such verification measure can be limiting the number of times the identification tag can be used to pre authorize a client side application. For example the identification tag can be limited to enabling only one pre authorization of a client side application. Thus if a user were to share their tagged client installer with a friend the friend would not be logged into the user account assuming that the intended user had already used the client installer to install the client side application.

To accomplish this pre authorization module can be configured to mark an identification tag as used after the identification tag has been used to authorize a client side application. For example pre authorization module can be configured to flag the pre authorization index entry associated with the identification tag after the identification tag has been used to authorize a client side application. Pre authorization module can be configured to deny pre authorization requests including an identification tag marked as used.

As an alternative to marking the identification tag as used pre authorization module can remove the pre authorization index entry associated with the identification tag after it has been used to authorize a client side application. Pre authorization module can be configured to deny pre authorization requests when the included identification tag is not found in the pre authorization index.

A second verification measure can be based on time. For example each identification tag can be restricted to valid use within a predetermined amount of time after the identification tag was created after which the identification tag is deemed expired. Pre authorization module can deny pre authorization requests that include an expired identification tag.

To accomplish this pre authorization module can record the creation time of the identification tag in the pre authorization index. Upon receiving a pre authorization request pre authorization module can compare the time the pre authorization request was received to the recorded creation time of the received identification tag to determine whether the identification tag has expired. Alternatively pre authorization module can record an expiration time for the identification tag in the pre authorization index and the time the pre authorization request was received can be compared to the expiration time to determine if the identification tag has expired. Pre authorization module can deny a pre authorization request including an expired identification tag.

A third verification measure can be based on IP address. Pre authorization module can associate an identification tag with one or more IP addresses that restrict valid use of the identification tag to pre authorization requests received from one of the associated IP addresses. For example the identification tag can be associated with the IP address from which the installation request was received and or IP addresses known to access the user account. Pre authorization module can deny pre authorization requests received from an invalid IP address i.e. an IP address that is not associated with the included identification signal.

To accomplish this pre authorization module can list valid IP addresses in the pre authorization index entry of the identification tag. For example pre authorization module can gather the IP address from which the installation request was received and list the IP address in the pre authorization index entry of the identification tag. Alternatively or additionally pre authorization module can gather IP addresses from profile information associated with the user account and list them in the pre authorization index entry of the identification tag.

Upon receiving a pre authorization request pre authorization module can gather the IP address from which the pre authorization request was received and compare it to the IP addresses listed in the pre authorization index entry of the included identification tag to determine if the pre authorization request was received from a valid IP address. Pre authorization module can deny pre authorization requests received from invalid IP addresses i.e. IP addresses not listed in the pre authorization index entry of the included identification tag.

At block the content management system determines if the installation request is associated with a user account. If the installation request is not associated with a user account at block the content management system transmits an untagged client installer to the client device. Alternatively if the installation request is associated with a user account the method continues to block where the content management system generates an identification tag.

At block the content management system creates an entry in the pre authorization index. The entry can include the identification tag and an account identifier identifying the user account associated with the installation request. The entry can further include the creation time of the identification tag and valid IP addresses.

At block the content management system tags a client installer with the identification tag and at block transmits the tagged client installer to the requesting client device.

At block the content management system receives a pre authorization request from a client device. At block the content management system determines if the implemented verification measures are satisfied. This step is described in further detail in the discussion of below. If the verification measures are not satisfied the method continues to block where the content management system denies the pre authorization request. As a result a user of the client device will be required to enter their login credentials to login the client side application to their user account.

If at block the content management system determines that the verification measures are satisfied the method continues to block where the content management system identifies the user account associated with the received identification tag. The content management system then at block approves the pre authorization request by logging the client side application in to the identified user account.

At block the content management system updates the pre authorization index entry to indicate that identification tag has been used to pre authorize the client side application. For example the content management system can mark the pre authorization index entry to indicate that the identification tag has been used. Alternatively the content management system can delete the pre authorization index entry. The method then ends.

If at block it is determined that the identification index has been used the method continues to block where the content management system determines that the verification measures are not satisfied and the method then ends.

Alternatively if at block it is determined that the identification tag has not yet been used the method continues to block where the content management system determines whether the identification tag has expired. For example the content management system can retrieve a creation time or expiration time for the identification tag from the pre authorization index entry of the identification tag. The content management system can then compare the retrieved creation or expiration time to the time the pre authorization request was received to determine if the identification tag has expired.

If the identification tag has expired the method continues to block where the content management system determines that the verification measures are not satisfied. Alternatively if the identification tag has not expired the method continues to block where the content management system determines whether the pre authorization request was received from a valid IP address.

The content management system can identify valid IP addresses by accessing the pre authorization index for the identification tag. For example the pre authorization index entry can list all valid IP addresses for the identification tag. The content management system can then compare the IP address from which the pre authorization request was received to the valid IP addresses listed in the pre authorization index entry to determine whether the pre authorization request was received from a valid IP address.

If the IP address is not valid the method continues to block where the content management system determines that the verification measures are not satisfied. Alternatively if the IP address is valid the method continues to block where the content management system determines that the verification measures are met. The method then ends.

While the above listed verification measures minimize the possibility that the client side application will be pre authorized on an unintended user s client device a potential for security vulnerability still remains. For example a user may pass their client installer to a co worker that installs the client side application prior to the intended user installing the client side application and prior to the identification tag expiring. If the user and co worker are on the same IP address at work all three verification measures 1use time IP address can be met and the co worker can be granted access to the user account.

To avoid this type of situation the content management system can verify that the client device requesting pre authorization is sufficiently associated with the intended user account prior to authorizing the client side application to access the intended user account. A client device can be sufficiently associated with a user account if the client device was used to access the user account and or create the user account.

The content management system can verify that a client device is sufficiently associated with a user account based on data cached on the client device. For example a content management system can cause a web browser application used to create or access a user account on the content management system to cache data such as a cookie identifying the user account that was created or accessed. The content management system can cross reference this cached data to verify whether the client device is sufficiently associated with the user account and if so authorize the client side application.

To accomplish this pre authorization module can tag the client installer with a web browser identifier that identifies the web browser application used to transmit the installation request to content management system . An installation request received from client device can include data identifying the web browser application used to transmit the installation request to content management system . Pre authorization module can identify the web browser application used to transmit the installation request record the identified web browser application in the pre authorization index record and then tag the client installer with a web browser identifier that identifies the web browser application.

The client installer can pass the web browser identifier to the client side application. The client side application can use the web browser identifier to cause client device to execute the identified web browser application and transmit a verification message including any data cached by the web browser application and the identification tag to content management system . Pre authorization module can verify that the cached data received along with a verification message identifies the user account identified by the corresponding identification tag.

Content management system can receive installation request and then determine whether installation request is associated with a currently authorized user account. That is content management system can determined if client device is logged into a user account when installation request was transmitted. For example a user of client device may have used web browser application to login into their user account and then request to install the client side application on client device .

Assuming that content management system determines that installation request is associated with user account 123 content management system can generate an identification tag and create an entry in a pre authorization index that identifies user account 123 the generated identification tag the date and time the identification tag was created valid IP addresses and a web browser identifier identifying the web browser application used to generate installation request .

Content management system can tag a client installer with the identification tag and the web browser identifier. Content management system can then transmit message including the tagged client installer to client device .

Client device can then use the tagged client installer to install the client side application on client device . This can include passing the identification tag and web browser identifier to the installed client side application.

Upon receiving verification message content management system can perform various verification measures such as determining whether the identification tag has been used or has expired and whether the IP address is valid. Assuming that the verification measures are satisfied content management system can transmit message to client device indicating that the verification measures have been satisfied.

Upon receiving confirmation that the verification measures have been satisfied client side application can generate an authentication key unique to client device . For example the authentication key can be xyz . Client side application can then use the web browser identifier to identify web browser application and cause client device to execute web browser application . Client side application can cause web browser application to transmit authentication message including the identification tag authentication key and data cached by web browser application to content management system .

Content management system can use the identification tag to locate the corresponding entry in the pre authorization index and cross reference the cached data to determine if web browser application has been used to access the user account. For example the cached data can include an account identifier that was cached when web browser application was used to create or access the user account.

Assuming that content management system determines that web browser application was used to access the user account content management system can record the authentication key in the entry in the pre authorization index.

Client side application can then transmit pre authorization request to content management system including the identification tag and authentication key. Content management system can perform verification measures including determining whether the identification tag has been used or is expired and whether the IP address is valid. Assuming that content management system determines that the verification measures are satisfied content management system can compare the authentication key received in pre authorization request to the authentication key in the entry associated with the identification tag. If the authentication keys match content management system can authorize client side application to access the user account identified in the entry in the pre authorization index.

Returning to the discussion of pre authorization module can also be configured to pre authorize a client side application to access multiple user accounts. For example a user may have a personal account and a work account. If the user is logged into both the work account and the personal account when requesting to install the client side application pre authorization module can pre authorize the client side application to access both the work account and the personal account.

To accomplish this pre authorization module can tag the client installer to link the client installer to multiple user accounts. For example pre authorization module can tag the client installer to link the client installer to a personal account and a work account. Pre authorization module can accomplish this by listing multiple account identifiers in the pre authorization index associated with the generated identification tag. For example pre authorization module can list a first account identifier identifying the personal account and a second account identifier identifying the work account. Alternatively pre authorization module can list a shared identifier that identifies both the personal account and user account.

Pre authorization module can access the listed account identifiers in response to receiving a pre authorization request including the corresponding identification tag and authorize the client side application to access the identified user accounts if all verification measures are satisfied. The verification measures can include pre authorization module determining whether the identified user accounts are approved to be accessed by a client side application while the client side application is also accessing another user account. For example a work account can be restricted by a work policy dictating that the work account cannot be accessed by a client side application while the client side application is accessing a second user account. Pre authorization module can determine whether the identified user accounts are restricted by such a policy.

If the identified user accounts are restricted pre authorization module can be configured to authorize the client side application to access only one of the user accounts. Alternatively pre authorization module can prompt the user to select which user account the user wishes to authorize the client side application to access. Alternatively pre authorization module can deny the pre authorization request thus requiring the user to enter proper login credentials to authorize the client side application to access a user account.

Pre authorization module can be configured to always prompt the user to select which of the multiple user accounts the user wishes to authorize on the client side application. For example the user can be prompted when the user requests to install the client side application. This can include pre authorization module prompting the user to select either one or more of the user accounts or alternatively to select only one of the user accounts. Pre authorization module can tag the client installer to link the client installer to the selected user account s .

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

