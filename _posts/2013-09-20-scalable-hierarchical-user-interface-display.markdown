---

title: Scalable hierarchical user interface display
abstract: Described are techniques for displaying data. A first set of data is received that includes a first plurality of objects at a first level in a hierarchy. At least some of the first plurality of objects are displayed on a user interface display. A first object is selected from the at least some of the first plurality of objects displayed on the user interface display. Responsive to selecting the first object, a second set of data is received that includes a second plurality of objects at a second level in the hierarchy. At least some of the second plurality of objects are displayed on the user interface display. The user interface display provides infinite scrolling of the first plurality of objects in a first portion of the user interface display and infinite scrolling of the second plurality of objects in a second portion of the user interface display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09417757&OS=09417757&RS=09417757
owner: EMC Corporation
number: 09417757
owner_city: Hopkinton
owner_country: US
publication_date: 20130920
---
This application relates generally to techniques for user interfaces and more particularly techniques used in connection with displaying hierarchical information in a user interface.

Computer systems may include different resources used by one or more host processors. Resources and host processors in a computer system may be interconnected by one or more communication connections. These resources may include for example data storage devices such as those included in the data storage systems manufactured by EMC Corporation. These data storage systems may be coupled to one or more host processors and provide storage services to each host processor. Multiple data storage systems from one or more different vendors may be connected and may provide common data storage for one or more host processors in a computer system.

A host processor may perform a variety of data processing tasks and operations using the data storage system. For example a host processor may perform basic system I O operations in connection with data requests such as data read and write operations.

Host processor systems may store and retrieve data using a storage system containing a plurality of host interface units disk drives and disk interface units. The host systems access the storage system through a plurality of channels provided therewith. Host systems provide data and access control information through the channels to the storage system and the storage system provides data to the host systems also through the channels. The host systems do not address the disk drives of the storage system directly but rather access what appears to the host systems as a plurality of logical disk units logical devices or logical volumes LVs . The logical disk units may or may not correspond to the actual disk drives. Allowing multiple host systems to access the single storage system allows the host systems to share data stored therein.

In connection with a data storage system computer system or more generally any system software may be utilized which includes a user interface UI such as for example software used in connection with performing system management. It may be desirable to provide a UI for the management application or other software which displays information to the user in a useful efficient and scalable manner.

In accordance with one aspect of the invention is a method of displaying data comprising receiving a first set of data including a first plurality of objects at a first level in a hierarchy displaying at least some of the first plurality of objects on a user interface display selecting from the user interface display a first object from the at least some of the first plurality of objects displayed on the user interface display responsive to selecting the first object receiving a second set of data including a second plurality of objects at a second level in the hierarchy and displaying at least some of the second plurality of objects on the user interface display wherein said user interface display provides for infinite scrolling of the first plurality of objects in a first portion of the user interface display and for infinite scrolling of the second plurality of objects in a second portion of the user interface display. The hierarchy may include a plurality of levels of objects each object in the hierarchy corresponding to any of a physical or logical entity in a system represented using the hierarchy. Each object in the second plurality of objects may be a child object of the first object selected. The second plurality of objects may include a parent object of the first object selected. The hierarchy may be a hierarchy of relationships among entities in a virtual infrastructure. The hierarchy may include one or more objects at a first level each representing a hypervisor manager one or more objects at a second level each representing a hypervisor managed by a hypervisor manager represented by an object at said first level one or more objects at a third level each representing a virtual machine managed by a hypervisor represented by an object at said second level and one or more objects at a fourth level each representing a logical device having storage provisioned for use by a virtual machine. Each of the virtual machines may be represented by an object at the third level where the virtual machine stores data on provisioned storage of a logical device representing by an object at the fourth level. Responsive to scrolling through the first plurality of objects additional data objects may be received and displayed in the first portion of the user interface display using infinite scrolling. As the additional data objects are displayed at least some of the first plurality of objects may no longer displayed. A first memory that stores the at least some of the first plurality of objects no longer displayed may be reused for storing the additional data objects. The first memory may include a plurality of memory portions for storing a plurality of undisplayed objects of the first plurality of objects. The method may also include determining any of an age and a distance from a current cursor location in the first portion of the user interface display for each of the plurality of undisplayed objects stored in a corresponding one of the plurality of memory portions ranking said plurality of memory portions in accordance with criteria including any of the age and the distance of each of the plurality of undisplayed objects stored in a corresponding one of the plurality of memory portions and reusing said plurality of memory portions in an order based on said ranking. The first plurality of objects may be a first type and said second plurality of objects may be a second type different from the first type wherein each of said first type and said second type represent a different type of physical or logical entity represented using the hierarchy. The infinite scrolling in the first portion of the user interface display may result in displaying additional objects of the first type in the first portion when scrolling downward in the first portion and wherein said infinite scrolling in the second portion of the user interface display may result in displaying additional objects of the second type in the second portion when scrolling downward in the second portion and wherein scrolling in the first portion may be performed independently of scrolling in the second portion. The second portion of the user interface display may be included within the first portion of the user interface display. The first plurality of objects may be determined in accordance with criteria used to initially sort and display information presented in the user interface display wherein said criteria identifies a level in the hierarchy at which objects are sorted in connection with rendering information in the user interface display in said displaying at least some of the first plurality of objects.

In accordance with another aspect of the invention is a system comprising a plurality of virtual machines a plurality of hypervisors each executing on a host wherein each of the plurality of hypervisors manages a portion of the plurality of virtual machines a plurality of hypervisor managers each executing on a host and each managing a portion of the plurality of hypervisors in connection with data storage management a data storage system including a plurality of storage devices wherein each of the plurality of virtual machines stores data on storage provisioned on at least one of the plurality of storage devices a memory including code stored therein which when executed by a processor performs processing comprising receiving a first set of data including a first plurality of objects of a hierarchy representing the plurality of hypervisor managers displaying at least some of the first plurality of objects on a user interface display selecting from the user interface display a first object from the at least some of the first plurality of objects displayed on the user interface display said first object representing a first of the plurality of hypervisor managers responsive to selecting the first object receiving a second set of data including a second plurality of objects of the hierarchy representing a portion of the plurality of hypervisors managed by the first hypervisor manager and displaying at least some of the second plurality of objects on the user interface display wherein said user interface display provides for infinite scrolling of the first set plurality of objects representing the plurality of hypervisor managers in a first portion of the user interface display and for infinite scrolling of the second plurality of objects representing the portion of the plurality of hypervisors managed by the first hypervisor manager in a second portion of the user interface display. The hierarchy may include a plurality of levels and wherein a first of the plurality of levels may include one or more objects each representing a hypervisor manager a second of the plurality of levels may include one or more objects whereby each object of the second level represents a hypervisor managed by a hypervisor manager represented by an object at said first level a third of the plurality of levels may include one or more objects whereby each objects of the third level represents a virtual machine managed by a hypervisor represented by an object at said second level and a fourth of the plurality of levels may include one or more objects whereby each object of the fourth level represents a logical device having storage provisioned for use by a virtual machine represented by an object of the third level.

In accordance with another aspect of the invention is a computer readable medium comprising code stored thereon for displaying data the computer readable medium comprising code stored thereon for receiving a first set of data including a first plurality of objects at a first level in a hierarchy displaying at least some of the first plurality of objects on a user interface display selecting from the user interface display a first object from the at least some of the first plurality of objects displayed on the user interface display responsive to selecting the first object receiving a second set of data including a second plurality of objects at a second level in the hierarchy and displaying at least some of the second plurality of objects on the user interface display wherein said user interface display provides for infinite scrolling of the first plurality of objects in a first portion of the user interface display and for infinite scrolling of the second plurality of objects in a second portion of the user interface display. The hierarchy may include a plurality of levels of objects each object in the hierarchy corresponding to any of a physical or logical entity in a system represented using the hierarchy. Each object in the second plurality of objects may be a child object of the first object selected.

Referring to shown is an example of an embodiment of a system that may be used in connection with performing the techniques described herein. The system includes one or more data storage systems connected to server or host systems through communication medium . The system also includes a management system connected to one or more data storage systems through communication medium . In this embodiment of the system the management system and the N servers or hosts may access the data storage systems for example in performing input output I O operations data requests and other operations. The communication medium may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. Each of the communication mediums and may be a network connection bus and or other type of data link such as a hardwire or other connections known in the art. For example the communication medium may be the Internet an intranet network or other wireless or other hardwired connection s by which the host systems may access and communicate with the data storage systems and may also communicate with other components not shown that may be included in the computer system . In one embodiment the communication medium may be a LAN connection and the communication medium may be an iSCSI or fibre channel connection.

Each of the host systems and the data storage systems included in the system may be connected to the communication medium by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium . Similarly the management system may be connected to the communication medium by any one of variety of connections in accordance with the type of communication medium . The processors included in the host computer systems and management system may be any one of a variety of proprietary or commercially available single or multi processor system such as an Intel based processor or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.

It should be noted that the particular examples of the hardware and software that may be included in the data storage systems are described herein in more detail and may vary with each particular embodiment. Each of the host computers the management system and data storage systems may all be located at the same physical site or alternatively may also be located in different physical locations. In connection with communication mediums and a variety of different communication protocols may be used such as SCSI Fibre Channel iSCSI and the like. Some or all of the connections by which the hosts management system and data storage system may be connected to their respective communication medium may pass through other communication devices or switching equipment that may exist such as a phone line a repeater a multiplexer or even a satellite. In one embodiment the hosts may communicate with the data storage systems over an iSCSI or a Fibre Channel connection and the management system may communicate with the data storage systems over a separate network connection using TCP IP. It should be noted that although illustrates communications between the hosts and data storage systems being over a first connection and communications between the management system and the data storage systems being over a second different connection an embodiment may also use the same connection. The particular type and number of connections may vary in accordance with particulars of each embodiment.

Each of the host computer systems may perform different types of data operations in accordance with different types of tasks. In the embodiment of any one of the host computers may issue a data request to the data storage systems to perform a data operation. For example an application executing on one of the host computers may perform a read or write operation resulting in one or more data requests to the data storage systems .

The management system may be used in connection with management of the data storage systems . The management system may include hardware and or software components. The management system may include one or more computer processors connected to one or more I O devices such as for example a display or other output device and an input device such as for example a keyboard mouse and the like. A data storage system manager may for example view information about a current storage volume configuration on a display device of the management system provision data storage system resources and the like.

In one embodiment the data storage systems may include one or more data storage systems such as data storage arrays offered by EMC Corporation of Hopkinton Mass. For example an embodiment in accordance with techniques herein may include the VNXe data storage system by EMC Corporation. Each of the data storage systems may include one or more data storage devices such as disks. One or more data storage systems may be manufactured by one or more different vendors. Each of the data storage systems included in may be inter connected not shown . As mentioned above the data storage systems may also be connected to the host systems through any one or more communication connections that may vary with each particular embodiment and device in accordance with the different protocols used in a particular embodiment. The type of communication connection used may vary with certain system parameters and requirements such as those related to bandwidth and throughput required in accordance with a rate of I O requests as may be issued by the host computer systems for example to the data storage systems . It should be noted that each of the data storage systems may operate stand alone or may also be included as part of a storage area network SAN that includes for example other components such as other data storage systems. Each of the data storage systems may include a plurality of disk devices or volumes . The particular data storage systems and examples as described herein for purposes of illustration should not be construed as a limitation. Other types of commercially available data storage systems as well as processors and hardware controlling access to these particular devices may also be included in an embodiment.

In such an embodiment in which element of is implemented using one or more data storage systems each of the data storage systems may include code thereon for performing the techniques as described herein.

Servers or host systems such as provide data and access control information through channels to the storage systems and the storage systems may also provide data to the host systems also through the channels. The host systems may not address the disk drives of the storage systems directly but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of logical devices or logical volumes LVs . The LVs may or may not correspond to the actual disk drives. For example one or more LVs may reside on a single physical disk drive. Data in a single storage system may be accessed by multiple hosts allowing the hosts to share the data residing therein. An LV or LUN logical unit number may be used to refer to the foregoing logically defined devices or volumes.

Referring to shown is an example of an embodiment of the data storage system that may be included in the system of . Included in the data storage system of are one or more data storage systems as may be manufactured by one or more different vendors. Each of the data storage systems may be a data storage array inter connected not shown to other data storage array s . Additionally as noted above the data storage systems may also be connected to the host systems through any one or more communication connections . In this example as described in more detail in following paragraphs reference is made to the more detailed view of element . It should be noted that a similar more detailed description may also apply to any one or more of the other elements such as but have been omitted for simplicity of explanation.

Each of the data storage systems such as may include a plurality of storage devices such as disk devices or volumes included in an arrangement consisting of n rows of disks drives or more generally data storage devices . It should be noted that elements generally represent one or more different data storage devices analogous to elements of . In this arrangement each row of disks may be connected to a disk adapter DA or director responsible for the backend management of operations to and from a portion of the disks . In the system a single DA such as may be responsible for the management of a row of disks such as row . In a data storage system such as by EMC Corporation a backend DA may also be referred to as a disk controller. The DA may performed operations such as reading data from and writing data to the physical devices which are serviced by the DA.

Also shown in the storage system is an RA or remote adapter . The RA may be hardware including a processor used to facilitate communication between data storage systems such as between two of the same or different types of data storage systems.

The system may also include one or more storage processors . Each of the storage processors may be CPU and an embodiment may include any number of such processors. For example the VNXe data storage system by EMC Corporation includes two storage processors. The system may also include one or more host adapters HAs or directors . Each of the HAs may be used to manage communications and data operations between one or more host systems and the memory . In an embodiment the HA may be a Fibre Channel Adapter FA or other adapter which facilitates host communication. The HA communicates with a component of the host such as a host bus adapter HBA . Generally directors may also be characterized as the different adapters such as HAs including FAs DAs RAs remote adapters and the like as described herein. Components of the data storage system such as an HA which may communicate with a host may also be referred to as front end components. Within the data storage system components which may be characterized as backend components communicate with a front end component. An example of a backend component is a DA. In connection with data storage systems such as by EMC Corporation various types of directors or adapters may be implemented as a processor or more generally a component that includes the processor. Examples of directors are disk adapters DAs host adapters HAs and the like.

One or more internal logical communication paths may exist between the DAs the RAs the HAs and the memory . An embodiment for example may use one or more internal busses and or communication modules. In some embodiments of a data storage system the memory may be partitioned into two or more portions such as a global memory portion and one or more other portions . For example in some embodiments of a data storage system including a single storage processor the global memory portion may be used to facilitate data transfers and other communications between the DAs HAs and RAs in a data storage system. The DAs may perform data operations using a cache that may be included in the global memory for example in communications with other disk adapters or directors and other components of the system . The other portion is that portion of memory that may be used in connection with other designations that may vary in accordance with each embodiment.

It should be noted that an embodiment of a data storage system may include components having different names from that described herein but which perform functions similar to components as described herein. Additionally components within a single data storage system and also between data storage systems may communicate using any suitable technique that may differ from that as described herein for exemplary purposes. For example an embodiment of a data storage system such as the VNXe data storage system by EMC Corporation may include multiple storage processors each with their own memory used for communication between the different front end and back end components rather than utilize a global memory accessible to all storage processors. In such embodiments memory may represent memory of each such storage processor.

The particular data storage system as described in this embodiment or a particular device thereof such as a disk or other storage device should not be construed as a limitation. Other types of commercially available data storage systems as well as processors and hardware controlling access to these particular devices may also be included in an embodiment.

With reference back to client software on the management system may be used in connection with performing data storage system management by issuing commands to the data storage system and or receiving responses from the data storage system over connection . In one embodiment the management system may be a lap top or desk top computer system.

Described in following paragraphs are techniques that may be performed by executing code of management software for example of the management system . Such code may be used in connection with performing data storage system management and administration. Although following paragraphs describe such techniques with reference to embodiments with data storage systems it will be appreciated by those of ordinary skill in the art that techniques herein have broader applicability for use in connection with any suitable system and components. In following examples the client management software for performing data storage system management may also be located on other systems in connection with performing techniques herein.

In connection with description set forth herein the host may be characterized in one aspect as a client of the data storage system having storage provisioned on the data storage system. The provisioned storage may include one or more LUNs that are accessible or visible to a host or more generally any client of the data storage system over one or more paths between the client and data storage system. Each path may be defined as including two endpoints a first on the client and a second on the data storage system. The first endpoint on the client may be an initiator port of a component such as an HBA of the host used in connection with communicating with the data storage system such as to send I O requests to store and or retrieve data on provisioned devices of the data storage system. The second endpoint of the data storage system may be a target port of the data storage system such as a port of an FA of the data storage system used in connection with communicating with the client. A client may have access to one or more LUNs included in a defined storage group SG . In the example described below each initiator port may be configured to have access to LUNs of only a single SG. Each initiator port may be configured to have access to a set of one or more target ports of the data storage system through which all LUNs of the single SG are accessible or visible. The foregoing information regarding defined paths SG definitions what LUNs and SGs are accessible over what paths and the like may be included in a data storage system configuration or topology. Such topology may change over time as changes are made to an existing data storage system configuration for example by adding removing hosts thereby adding removing paths adding removing LUNs from existing SGs adding removing HBAs to existing hosts thereby adding removing paths and the like. Other embodiments utilizing techniques herein may have different restrictions and variations than that as provided herein in an exemplary embodiment for purposes of illustration.

In connection with a data storage system system management may be performed using a server such as a data storage system management service of the data storage system and a client such as using client management software executing on a host. Generally the client may issue requests to the server for information used in connection with data storage system management. Such information may relate to for example existing data storage configuration or topology health and status information of data storage system components and the like. Information regarding the data storage system configuration or topology may include for example identifying all paths between a host and the data storage system over which provisioned storage is accessible or visible identifying a particular host initiator port e.g. of an HBA and data storage system target port e.g. of an FA of the data storage system included in a path identifying what one or more LUNs are accessible over one or more paths identifying what one or more LUNs are accessible from a particular host initiator port identifying what data storage system target ports are accessible to a host having one or more host initiator ports identifying what host initiator ports may be used to access storage through a particular data storage system target port identifying what target initiator ports may be used to access storage through a particular host initiator port identifying paths that may be used to access a particular LUN and the like. The particular information requested and utilized by the client may vary with the particular tasks the client performs at any point in time. The client may request an initial set of information from the server and then perform subsequent requests at later points in time for example to obtain information regarding any updates to the existing topology or configuration. Some examples of updates or changes are described above. Such updates may also include for example changes in connection with health or status of an existing component of the data storage system such as an indicator about whether a data storage system port is operable can be used access LUNs.

In some embodiments information regarding the topology or data storage configuration may be stored in a database of the data storage system. The database may be queried as needed in response to receiving a request from a client such as the client management software for information. Once the requested information is obtained from the database the data storage system may return the requested data to the client management software.

With reference now to shown is an example of an embodiment which may utilize techniques described herein. In the example included are hosts M hosts Y client management aggregators and data storage systems N. Initiator ports of the hosts are denoted as . Target ports of the data storage systems are denoted as P P. Solid lines denote data paths used for transmitting I O operations or data requests and requested data between connected components e.g. between a host and a data storage system . Dashed lines and denote management or control paths between aggregator and hosts M between aggregator and data storage system between aggregator and hosts Y between aggregator and data storage system and between aggregator and data storage system N.

Each of the hosts and data storage systems may be as described elsewhere herein with the difference that the hosts M and the hosts Y may each not include client management software and each such host may also provide a virtualized environment including one or more virtual machines VMs for executing applications on each such host. Each VM may have an application executing in the context of the VM where the application s data is stored on provisioned storage devices not illustrated of one or more of data storage systems N. Each of the hosts M and the hosts Y may include a hypervisor that performs VM management in connection with multiple VMs such as VMware ESX Server by VMware Inc. Such a hypervisor or more generally VM manager of each host having VMs executing therein may be installed and run directly on host hardware without requiring an underlying operating system. Each of the VM managers may perform management of the underlying host s physical resources for use among the multiple VMs that can run simultaneously.

Each of the client management aggregators may function as host management aggregators or centers providing data storage management for a plurality of hosts or more generally clients of the data storage system. For example aggregator may be used to perform data storage management and configuration for hosts M connected to over various management or control paths . In a similar manner aggregator may be used to perform data storage management and configuration for hosts Y connected to over various management or control paths . Each of may include software thereon for performing such management for multiple hosts running virtualized environments as illustrated. For example each of may include VMware vCenter Server software that provides for a central scalable and extensible platform for virtual nation management of multiple virtualized hosts. In connection with techniques herein each of the aggregators may include respectively client management software . Thus the aggregators may function as an intermediate component between the virtualized hosts and the data storage systems. In this manner aggregator may communicate with data storage system and hosts M where system has storage provisioned thereon for use by the hosts M. Similarly aggregator may communicate with data storage systems N and hosts Y where systems N have storage provisioned thereon for use by the hosts Y.

Generally each aggregator may perform management for one or more hosts where each such host may have one or more initiator ports included in data paths to one or more data storage systems N. In a manner similar to that as described elsewhere herein for a. single host an aggregator may perform management for one or more hosts and may therefore include client management software to perform processing as described herein with a usage context representing a collective or aggregate usage context for the one or more hosts being managed by the aggregator. Aggregator may define its usage context as all objects related to a set of host initiators where the set is the collective or aggregate of all initiator ports for hosts managed by aggregator . Aggregator may define its usage context as all objects related to a set of host initiators where the set is the collective or aggregate of all initiator ports for hosts managed by aggregator . To further illustrate aggregator is performing data storage configuration management for hosts M and may have a usage context identifying initiator ports . Aggregator is performing data storage configuration management for hosts Y and may have a usage context identifying initiator ports . In this example data storage system has a single client aggregator and data storage system N has two client aggregators . Each aggregator may report data storage configuration information on the topology and health from the context or viewpoint of the hosts said aggregator is managing Each of may be a separate server system having a management console connected thereto upon which information may be displayed based on each aggregator s usage context Each aggregator may use such a view or context for reporting storage provisioned for use by any of its managed hosts reporting on a status or health of components in paths used to access provisioned storage and the like. The number of hosts of each aggregator . may generally be any number of hosts where each such aggregator may perform management for a different number of such hosts. In connection with and more generally any of the examples and figures described herein the particular number of components e.g. number of hosts number of aggregators number of data storage systems etc. is for purposes of illustration and should not be construed as applying a limit to an embodiment in accordance with techniques herein.

It should be noted that the health and or status information and data storage configuration information may be used by the aggregators of in performing different tasks. For example one such task may be in connection with displaying requested information of a UI of client management software 

In connection with the data management or control paths e.g. such as denoted by the dashed lines may be used in connection with management requests. For example a user utilizing the UI of client management software may issue a management request over for different configuration information to be displayed on the UI in connection with the storage used by the hosts M and VMs executing thereon. The data storage system s serve management software may receive the management request and return requested information to the client management software

It should be noted that the various control paths and data paths may represent different logical paths between the illustrated components which may or may not be implemented using different physical connections and components.

The client management software may use a defined API application programming interface when communicating with the server management software N. The server management software N may include one or more service providers which may perform processing to retrieve and return requested management information. The server management software N may include code that when executed queries the data storage configuration database to retrieve the requested information which is then processed by the server management software N and returned to the requesting management software 

What will be described in following paragraphs are techniques that may be used in connection with a user interface UI such as a graphical user interface GUI of the client management software to display information in a scalable useable and efficient manner. Techniques herein may be used with hierarchical sets of data to provide users with the ability to view such hierarchical sets of data in a scalable manner. The UI display may further reflect or model the hierarchical relationships existing between multiple sets of data different types of objects and the like. Additionally to provide for scalability in viewing information techniques may provide for custom control to expand and collapse each element at each level of viewed information in the hierarchy and also provide infinite scrolling on each element type in the hierarchy. Such techniques may be described herein with respect to a particular exemplary hierarchy for illustration. However as will be appreciated by those skilled in the art techniques herein have much broader applicability and are not limited by the particular hierarchy and examples provided herein.

The example of illustrates a relationship between different entities in connection with management of the data storage system. In particular described in following paragraphs is use of techniques herein with a management GUI to model the relationship between the client management aggregators also referred to herein as the hypervisor managers the hypervisors such as executing on hosts M Y providing the virtualized environment for the various VMs executing thereon the VMs and the logical devices having storage provisioned thereon for storing data of the VMs. Techniques in following paragraphs and figures may provide users performing data storage system management such as with a GUI the ability to hierarchically view relationships between the different entities for the current data storage system configuration and topology in a scalable and efficient manner.

In order to visually display and model the relationships between the various entities noted above data regarding the relationships therebetween for the current data storage system configuration and topology may be requested by software as needed respectively from the data storage systems N. Generally as described above in connection with a hypervisor manager e.g. manages one or more hypervisors executing on one or more hosts e.g. M Y whereby each such hypervisor may manage one or more VMs having data stored on logical devices of a data storage system e.g. N .

Referring to shown is an example of an object hierarchy that may be used to represent or model the various hierarchical relationships in an embodiment in accordance with techniques herein. Information representing the objects and the hierarchy may be stored for example in the databases or data stores of the data storage systems whereby portions of the information may be requested as needed by the client management software . The example may include an object for each element of the different types of entities represented. The lines between a pair of objects may represent the relationship between two such entities at different levels in the hierarchy. The example is a hierarchy including a plurality of levels resembling a tree structure with a root node at level 0 hypervisor manager mgr nodes at level 1 hypervisor nodes at level 2 VM nodes at level 3 and logical storage device nodes at level 4. Generally there may be any number of suitable levels in the hierarchy nodes at each level and the like depending on the particular entities and relationships being represented. It should also be noted that in the hierarchy of the example each level of the hierarchy includes nodes representing a different type of data or entity in the represented system. Each node at level N is a parent of any child nodes which appear at level N 1 and are connected to the parent. For example hypervisor mgr is a parent node of child nodes . A path may be defined between the root node and any other node in the hierarchy whereby the path includes all nodes which are connected and traversed in the path. For example a path to VM may be represented as and . As generally known in the art descendants of a first node at level N are any nodes which are at levels higher than N and are directly or indirectly connected to the first node e.g. the first node is included in a path from the root node to each of its descendant nodes . For example nodes and are descendant nodes of . Ancestors of a first node at level N are any nodes which are at a level in the hierarchy less than N whereby an ancestor of the first node is included in a path from the root node to the first node at level N.

A user may view the information for the particular data storage system configuration represented as in the example whereby the GUI provides the user with ability to search for requested information and relationships such as for example which VMs are managed by a particular hypervisor manager which logical devices are used by a particular hypervisor or host and the like.

Referring to shown are various examples of information that may be displayed on a GUI in an embodiment in accordance with techniques herein based on the hierarchy of . Element is a first display at a first point in time whereby the information includes a list of hypervisor managers such as represented by objects at the first level in the hierarchy of . The user may be provided with infinite scrolling through the list of hypervisor mgrs. As known in the art infinite scrolling may be characterized as a GUI design technique that provides displaying additional content in the display area when scrolling through the list of hypervisor mgrs. e.g. as such scrolling is performed to scroll up and or down the list . For example presuming that 3 hypervisor mgrs. may be displayed at a time in the area there may be for example 100 hypervisor mgrs. or more generally any suitable number. As the user scrolls down the list the view including the particular 3 hypervisor mgrs. displayed also scrolls down the list so as to always display 3 hypervisor mgrs. However the particular 3 hypervisor mgrs. included in the displayed view vary depending on where the user is in connection with scrolling up and or down in the entire list of hypervisor mgrs. for the particular configuration. In this manner the display area or portion may be characterized as providing a view to a portion of the list of hypervisor mgrs. as the user scrolls through the list. Such scrolling may be performed in any suitable manner e.g. mouse or tracking pad with finger . This is further illustrated in more detail with other figures and described in more detail below.

Element may represent the information initially displayed on the GUI at a first point in time such as when the client management software is first launched. A user may scroll through the list and select a particular hypervisor mgr about which additional details are displayed. In this example the user may select hypervisor mgr as denoted by

Responsive to selecting the GUI display may be updated to include information as represented in . In particular selection of results in the additional information provided in display portion . In this example GUI display portion includes a list of hypervisors managed by the selected hypervisor mgr. Additionally in the display portion the GUI provides for infinite scrolling through the list of hypervisors managed by hypervisor mgr while also providing the user with the ability to independently and infinitely scroll through list of hypervisor managers of .

At a second point in time the user may select hypervisor as denoted by from the hypervisor list of . Responsive to selecting the GUI display may be updated to include information as represented in . In particular selection of results in the additional information provided in display portion . In this example GUI display portion includes a list of VMs managed by the selected hypervisor . Additionally in the display portion the GUI provides for infinite scrolling through the list of VMs managed by hypervisor while also providing the user with the ability to independently and infinitely scroll through list of hypervisor managers of 144 and while also providing the user with the ability to independently and infinitely scroll through the list of hypervisors managed by the selected hypervisor mgr. Thus the GUI provides the user with the independent infinite scrolling at three different levels as denoted by and for the particular elements selected at different levels in the hierarchy of displayed information.

At a third point in time the user may select VM as denoted by from the VM list of . Responsive to selecting the GUI display may be updated to include information as represented in the example of . In particular selection of results in the additional information provided in display portion . In this example GUI display portion includes a list of VM details for the selected VM . Additionally in the display portion the GUI provides for infinite scrolling through the list of VM detail while also providing the user with the ability to independently and infinitely scroll through a list of VMs of managed by the selected hypervisor while also providing the user with the ability to independently and infinitely scroll through the list of hypervisors of managed by the selected hypervisor mgr and while also providing the user with the ability to independently and infinitely scroll through list of hypervisor managers of . Thus the GUI provides the user with the independent infinite scrolling at now four different levels for the particular elements selected at different levels in the hierarchy of displayed information.

What will now be provided is further detail regarding how the infinite scrolling at the different levels for the selected elements may be implemented in one embodiment in accordance with techniques herein.

Referring to shown are examples illustrating the information that may be displayed at various points in time when infinitely scrolling through the list of VM details such as provided in display area or portion of . At a first point in time element may represent a portion of the VM detail information that may be presented in the display area with respect to a current scrolling position and associated view port . In other words element may represent the entire list of 100 elements of VM detail information where the user may scroll up and down to different positions in the list. Element represents a current window corresponding to the current scrolling position within the list of VM details where the size of indicates the information that may be displayed within the display area at a first point in time. At the first point in time the user may then scroll up the list to view detailed items prior to detail as displayed in .

Responsive to scrolling up as illustrated in the display area may be updated to include the information as represented by view port of . In this case the user scrolled upwards in the list so that the 4 VM detailed items displayed changes from to . At the second point in time the user may then scroll down the list to view detailed items following detail as displayed in .

Responsive to scrolling down as illustrated in the display area may be updated to include the information as represented by view port of . In this case the user scrolled downward in the list so that the 4 VM detailed items displayed changes from to . At the third point in time the user may then choose to further scroll down the list to view detailed items following detail as displayed in .

Responsive to continuing to scroll further down in the list of VM detail as illustrated in the display area may be updated to include the information as represented by view port of . In this case the user scrolled further downward in the list so that the 4 VM detailed items displayed changes from to .

Referring to shown are examples illustrating the information that may be displayed at various points in time when infinitely scrolling through the VM list such as provided in display area or portion of . At a first point in time element may represent that portion of the VM list presented in the display area with respect to a current scrolling position and associated view port . In other words element may represent the entire list of 100 VMs for the selected hypervisor where the user may scroll up and down to different positions in the VM list. Element represents a current window corresponding to the current scrolling position within the list of VM list where the size of indicates the information that may be displayed within the display area at a first point in time. At the first point in time the user may then scroll down the VM list to view VMs in the following VM as displayed in .

Responsive to scrolling down the VM list as illustrated in the display area may be updated to include the information as represented by view port of . In this case the user scrolled downwards in the list so that the VM list displayed changes from to . At a second point in time the user may then scroll yet further down the VM list to view VMs following VM as displayed in .

Responsive to scrolling further down the VM list as illustrated in the display area may be updated to include the information as represented by view port of . In this case the user scrolled downward in the list so that the display area is updated from to . At a third point in time the user may then choose to expand VM thereby requesting for display further VM details for the selected VM as denoted by .

Responsive to selecting VM as illustrated by the display area may be updated from to to include the additional VM detail for the selected VM . In this manner the user may be further provided with infinite scrolling within the VM detailed information in a manner similar to that as provided with the VM detail as described elsewhere herein. Thus a user may select an element for expansion and further detail where infinite scrolling may be provided when viewing the displayed further detailed information.

Referring to shown are examples illustrating the information that may be displayed at various points in time when infinitely scrolling through the hypervisor list for hypervisor mgr such as provided in display area or portion of . At a first point in time the example may represent that portion of the hypervisor list presented in the display area with respect to a current scrolling position and associated view port . In other words may represent the portion of the entire list of hypervisors for the selected hypervisor mgr where the user may scroll up and down to different positions in the hypervisor list. Element represents a current window corresponding to the current scrolling position within the list of hypervisors where the size of indicates the information that may be displayed within the display area at a first point in time. At the first point in time the user may then scroll down the hypervisor list to view hypervisors in the list following hypervisor as displayed in .

Responsive to scrolling down the hypervisor list as illustrated in the display area may be updated to include the information as represented by view port of the example in . In this case the user scrolled downwards in the hypervisor list so that the information displayed in area changes from to . At a second point in time with reference to the user may then select hypervisor from the list thereby requesting for display further hypervisor details information for the selected hypervisor as denoted by .

Responsive to selecting hypervisor as illustrated by the display area may be updated from of of thereby including a list of VMs as the additional information for the selected hypervisor . In this manner the user may be further provided with infinite scrolling within the VM list for selected hypervisor in a manner similar to that as provided with other selected and expanded items as described herein. Thus a user may select an element for expansion and further detail where infinite scrolling may be provided when viewing the displayed further detailed information.

At a third point in time with reference to the user may then select a VM from the VM list of thereby requesting for display further VM details information for the selected VM of hypervisor as denoted by .

Responsive to selecting VM of hypervisor as illustrated by the display area may be updated from of of thereby including a VM details as the additional information for the selected VM of hypervisor . In this manner the user may be further provided with infinite scrolling within the VM detail information in for selected VM of hypervisor in a manner similar to that as provided with other selected and expanded items as described herein. Thus a user may select an element for expansion and further detail where infinite scrolling may be provided when viewing the displayed further detailed information.

As with other figures described above provides an indication with viewport with respect to a current scrolling position in the list of hypervisors for hypervisor mgr. shown the resulting UI display in accordance with the viewport of but without the additional detail of where the user is in connection with relative scrolling within the entire list of hypervisors for hypervisor mgr.

Referring to shown is example providing further information that may be displayed in connection with hypervisor mgrs. hypervisors and VMs in an embodiment in accordance with techniques herein. The example illustrates further detail regarding information that may be included in the VM details what information may be displayed regarding hypervisor mgrs. and the like. In this example the user has selected hypervisor mgr from the hypervisor mgr list selected hypervisor of hypervisor mgr and select VM . Consistent with discussion elsewhere herein such selections may be made in sequential order as just described to further drill down and display more detailed information at various levels for different selected entities in the hierarchy. As also described herein to facilitate viewing information at each of the levels infinite scrolling may be provided for the list of hypervisor mgrs. for the list of hypervisors of the selected hypervisor mgr for the list of VMs of the selected hypervisor and for the list of VM details for the selected VM. In this example the VM details may include a list of VM logical devices of storage provisioned for use by the selected VM. As described elsewhere herein infinite scrolling may be provided in the display area for the VM details infinite scrolling may be provided in display area for the VM list of selected hypervisor infinite scrolling may be provided in display area for the hypervisor list for selected hypervisor mgr and infinite scrolling may be provided in display area for the list of hypervisor mgrs.

The particular sequence of nodes selected corresponds to objects at different levels of the hierarchy representing a path in the hierarchy such as of . Referring to shown is an example of the hierarchy corresponding to information as displayed in connection with . As described above the user may select hypervisor mgr corresponding to node at level 1 may select hypervisor corresponding to a node at level 2 and may select VM corresponding to a node at level 3. Displayed in area may be various logical devices represented respectively by nodes . For simplicity VM is shown as having only 4 logical devices. However if there are more than 4 logical devices of provisioned storage for use by VM node would include more than 4 child nodes whereby information for various ones of the logical devices may be displayed in area of depending on the user s currently selected scrolling position in the VM detailed list of logical devices.

Additionally the example of also includes criteria specifying how to sort or ranking the displayed information. The criteria may indicate a level within the hierarchy such as hypervisor mgr and sorting criteria such as IP address used to sort and display information in the GUI. With reference to the criteria indicates to sort and display the information at the hypervisor mgr level in increasing order of IP address associated with each hypervisor mgr.

An embodiment may also provide functionality which allows a user to change the foregoing criteria thereby altering the way in which data storage management information is sorted and presented in the GUI. For example a user may want to sort and present information for display beginning at a different level in the hierarchy than at level 1 for the hypervisor mgrs. Thus a user may specify the primary sorting criteria at a level in the hierarchy other than the hypervisor manager. For example a user may select to sort the information based on an alphabetic listing of VM names. The sorting of VMs may be with respect to one or more hypervisor managers. In this manner all the VMs across all hypervisors and all hypervisor managers may be displayed and the user may further select a particular VM.

To further illustrate the foregoing reference is made to . In at a first point in time a user may specify sorting criteria to sort or rank all VMs across all hypervisors and all hypervisor mgrs. Thus as a starting point for the information displayed the user has specified criteria which indicates to list all VMs corresponding to level 3 in the hierarchy with reference to . In response the GUI display may be populated with data as represented in where infinite scrolling may be provided for scrolling through the aggregated and sorted VM list of . Each VM included in the displayed information of may also identify the hypervisor that manages the VM. Thus an embodiment may allow a user to sort and display information at a particular level in the hierarchy. Additionally the displayed information may also include other information from other nodes objects associated with or related to the displayed nodes objects. For example element provides for infinite scrolling through a sorted VM list e.g. sorted list of VM objects of level 3 in the hierarchy . The VM list may be sorted based on ascending alphabetic order for the VM name. Additionally for each displayed VM the hypervisor that manages the VM is displayed whereby the hypervisor has a corresponding object in the hierarchy at level 2. This relationship regarding a particular hypervisor managing a VM may be denoted by the VM object node at level 3 having a parent hypervisor object node representing the managing hypervisor at level 2 in the hierarchy. The particular information displayed regarding details of nodes objects related to the displayed VM objects may vary with embodiment.

Consistent with description and other examples herein at a second point in time a user may now may a selection from the displayed VM list of to further expand and provide additional detail regarding the selected VM. For example assume a user selects VM of hypervisor in . Responsive to selecting VM the display area may be updated from to whereby now includes VM detail area . Infinite scrolling may be provided within area of the VM detail. Thus responsive to selecting VM detail information at level 4 in the hierarchy such as the list of logical devices used by VM may be displayed for infinite scrolling in area .

At a third point in time the user may select the hypervisor which is the listed hypervisor managing the selected VM. Responsive to selecting hypervisor the display area may be updated from to as in . In particular selection of results in displaying additional information indicating that hypervisor mgr manages the selected hypervisor . Thus user selections may result in displaying additional information regarding related or associated nodes at level 4 e.g. VM detail information regarding logical devices provisioned for used by selected VM and also level 2 e.g. hypervisor mgr which manages the selected hypervisor whereby hypervisor manages selected VM .

As another example of other criteria that a user may enter by which to initially sort and display information reference is now made to . At a first point in time a user may specify to sort and display a list of hypervisors across all hypervisor mgrs. in the system resulting in the display area having content as represented by of . Element denotes an infinite scrolling area for scrolling through the sorted list of hypervisors. At a second point in time a user may select hypervisor from the display area . In response to selecting hypervisor the display area may be updated from to . The updated display area now includes information denoting the hypervisor mgr of the selected hypervisor and also display area providing an infinite scrolling area for scrolling through the list of VMs managed by selected hypervisor . Thus criteria may be used to specify a starting point for displaying information at level 2 in the hierarchy. Subsequent user selections of particular displayed items corresponding to objects at level 2 in the hierarchy may result in further information of related objects at level 1 in the hierarchy e.g. hypervisor mgr as denoted by representing the hypervisor mgr that manages the selected hypervisor and related objects at level 3 in the hierarchy e.g. VMs in managed by selected hypervisor .

At a third point in time a user may select yet another hypervisor from the display area resulting in display area being updated to that as represented by of . In particular area is updated to now include hypervisor mgr and display area as an infinite scrolling area for scrolling through the list of VMs managed by selected hypervisor . Thus display may be updated to include additional details regarding objects related to selected hypervisor in a manner similar to that as described above responsive to selecting hypervisor

As mentioned elsewhere techniques described herein are not limited to the particular hierarchy such as illustrated in . Rather any suitable objects of different types may be represented in a hierarchy for use with techniques herein

For example reference is made to which illustrates another hierarchy of information that may be represented for use with techniques herein. The hierarchy may include one or more file servers represented by nodes at level 1 file systems represented by nodes at level 2 and file shares as represented by nodes at level 3. As known in the art a file share such as represented by each of nodes may include one or more folders or more generally portions of a file system that can be accessed by specified user systems and the like if appropriate permission is granted. The techniques herein may be used in connection with displaying and sorting information having the hierarchical representation as in in a manner similar to that as described herein with respect to the hierarchy of .

As described herein criteria may be specified which indicates a level in the hierarchy at which objects are initially filtered or sorted for display. If such criteria specifies a level in the hierarchy other than at level 1 for example the particular information displayed may vary. For example if criteria indicates to initially sort and display objects at level 2 in the hierarchy e.g. of the particular information displayed may vary and may include information about related nodes at other levels in the hierarchy e.g. such as described in connection with .

In connection with techniques herein multiple infinite scrolling areas may be provided in a GUI display where a user may interact independently with each such area. Each infinite scrolling area may provide for infinite scrolling of objects of a particular type represented at a particular level in the hierarchy.

When data which has been retrieved from the data storage system is no longer displayed due to user s current scrolling position such data may be discarded. In one embodiment data which is not currently displayed but has already been retrieved may be maintained as long as sufficient buffer space e.g. memory is available and as long as such data does not exceed a particular age. As the user continuously scrolls through the different levels of the information it may be necessary to reclaim buffer space used to store undisplayed data in order to use such buffer space for new data to be displayed. In this manner an embodiment may use different techniques to decide what buffer space to reclaim as such buffer space is needed to store data for the display. For example an embodiment may reclaim buffer space first containing data which has an age that exceeds a maximum age. The maximum age may denote a maximum amount of time after which data is considered stale and no longer current or accurate for display. Data which is retrieved may be associated with a timestamp denoting time of retrieval. An age for data stored in the buffer may be calculated for example based on a difference between a current timestamp denoting a current time and the timestamp associated with the data e.g. denoting when the data was first stored in the buffer space . An embodiment may also use a buffer space reclamation technique which reclaims buffer space first from undisplayed data that is farthest away from the current scrolling or cursor position. For example buffered undisplayed data may be ranked or sorted based on distance from the current scrolling or cursor position whereby the data farthest away from the current cursor position is ranked highest. In this manner buffer space may be reclaimed based on the foregoing ranked or sorted order with the highest ranked buffered undisplayed data e.g. farthest from the current scrolling or cursor position having its buffer space reclaimed prior to any lower ranked buffered undisplayed data e.g. closer to the current scrolling or cursor position .

An embodiment may request and retrieve additional data for display in response to a UI event such as for example in response to the user scrolling up or down at a level in the displayed information in response to the user selecting a displayed item for expansion e.g. thereby requesting further detail or information regarding the selected item in response to the user collapsing or retracting the detail of a displayed item and the like.

An embodiment may use any suitable heuristic to decide an amount of data to request in response to a UI event. For example one embodiment may request an amount of data depending on the amount of data that can be displayed on the screen at a particular level the amount of buffer space and the like. In one embodiment when a new set of criteria is specified for sorting and displaying such as described in connection with of any buffered data may be discarded and all buffer space reclaimed for storing new data retrieved in connection with the new set of criteria.

Referring to shown is a flowchart of processing steps that may be performed in an embodiment in accordance with techniques herein. The flowchart generally summarized processing described above in connection with an overall processing flow for a GUI display of the client management software for a particular hierarchy. At step criteria is specified denoting how the sort and display the information. As described herein such criteria may indicate a level of the hierarchy and sorting or filtering criteria denoting how to sort the objects at the indicated level of the hierarchy. An embodiment may specify a set of default criteria such as when initially rendering a UI display or may otherwise allow a user to specify such criteria as described herein. At step the client management software may then request and retrieve information to be displayed such as regarding objects of the hierarchy. At step the display may be initially populated. At step processing waits until the occurrence of a UI event. For example as described herein the UI event may be a selection of an item from a UI display scrolling up or down in particular display areas and the like. Upon the occurrence of a UI event control proceeds to step to retrieve from the data storage system any additional data needed responsive to the UI event. Additionally in step the UI display may then be accordingly updated as needed. From step control proceeds to step .

It should be noted that additional processing other than as illustrated in may be performed in an embodiment such as in connection with buffer space or memory reclamation and the like.

The techniques herein may be performed by executing code which is stored on any one or more different forms of computer readable media. Computer readable media may include different forms of volatile e.g. RAM and non volatile e.g. ROM flash memory magnetic or optical disks or tape storage which may be removable or non removable.

While the invention has been disclosed in connection with preferred embodiments shown and described in detail their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly the spirit and scope of the present invention should be limited only by the following claims.

