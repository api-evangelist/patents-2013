---

title: Techniques for detecting malicious code
abstract: Techniques for detecting malicious code are disclosed. In one particular embodiment, the techniques may be realized as a method for detecting malicious code comprising the steps of identifying a query to a domain name service that resolves to a local address; identifying the process that originated the identified query; and designating the identified process as infected based on identifying the process as having originated the query that resolved to a local address.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189626&OS=09189626&RS=09189626
owner: Symantec Corporation
number: 09189626
owner_city: Mountain View
owner_country: US
publication_date: 20130924
---
The present disclosure relates generally to computer security and more particularly to techniques for detecting malicious code.

Malware authors have devised many ingenious methods of protecting the identity of their Command and Control C2 servers. One common method is to use DNS as a layer of indirection that protects the IP address of C2 servers. A recent malware trend has emerged in which a botnet or Advanced Persistent Threat APT uses a fully qualified domain name FQDN and registers it with DNS public resolvers but with a short time to live TTL so that its bots must continually poll a public DNS resolver to obtain the identity of the C2 server. Since the C2 server rarely needs to send any commands this technique sets the FQDN to resolve to localhost which causes all bots to send their C2 traffic back to themselves suppressing traffic that would otherwise be susceptible to analysis by security devices attached to the network. When the C2 server awakes the domain name entry is changed to the C2 server s IP address and once C2 commands have been successfully communicated the C2 server goes back to sleep and the DNS entry is set to localhost once more.

In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with current data security technologies.

Techniques for detecting malicious code are disclosed. In one particular embodiment the techniques may be realized as a method for detecting malicious code comprising the steps of identifying a query to a domain name service that resolves to a local address identifying the process that originated the identified query and designating the identified process as infected based on identifying the process as having originated the query that resolved to a local address.

In accordance with other aspects of this particular embodiment the method may further comprise the steps of identifying a domain name used in the identified query and blocking a subsequent query based on a relationship between the subsequent query and the identified fully qualified domain name.

In accordance with further aspects of this particular embodiment the identified domain name may be a fully qualified domain name.

In accordance with further aspects of this particular embodiment the subsequent query may be blocked based on comparing a domain name used in the subsequent query to the identified domain name.

In accordance with further aspects of this particular embodiment the method may further comprise identifying an IP address associated with the identified fully qualified domain name wherein the subsequent query uses the identified IP address.

In accordance with other aspects of this particular embodiment designating the identified process as infected may further be based one or more additional queries prior to the identified query that each resolved to a local address.

In accordance with other aspects of this particular embodiment the techniques may be realized as at least one non transitory processor readable storage medium storing a computer program of instructions configured to be readable by at least one processor for instructing the at least one processor to execute a computer process for performing a method of one of the embodiments.

In another particular embodiment the techniques may be realized as an article of manufacture for detecting malicious code comprising at least one processor readable storage medium and instructions stored on the at least one medium. The instructions are configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to identify a query to a domain name service that resolves to a local address identify the process that originated the identified query and designate the identified process as infected based on identifying the process as having originated the query that resolved to a local address.

In accordance with other aspects of this particular embodiment the instructions may further be configured to cause the at least one processor to operate so as to identify a domain name used in the identified query and block a subsequent query based on a relationship between the subsequent query and the identified fully qualified domain name.

In accordance with further aspects of this particular embodiment the identified domain name may be a fully qualified domain name.

In accordance with further aspects of this particular embodiment the subsequent query may be blocked based on comparing a domain name used in the subsequent query to the identified domain name.

In accordance with further aspects of this particular embodiment the instructions may be further configured to cause the at least one processor to operate so as to identify an IP address associated with the identified fully qualified domain name. The subsequent query may use the identified IP address.

In accordance with other aspects of this particular embodiment designating the identified process as infected may further be based one or more additional queries prior to the identified query that each resolved to a local address.

In another particular embodiment the techniques may be realized as a system for detecting malicious code comprising one or more processors communicatively coupled to a network. The one or more processors are configured to identify a query to a domain name service that resolves to a local address identify the process that originated the identified query and designate the identified process as infected based on identifying the process as having originated the query that resolved to a local address.

In accordance with other aspects of this particular embodiment the one or more processors may further be configured to identify a domain name used in the identified query and block a subsequent query based on a relationship between the subsequent query and the identified fully qualified domain name.

In accordance with further aspects of this particular embodiment the identified domain name may be a fully qualified domain name.

In accordance with further aspects of this particular embodiment the subsequent query may be blocked based on comparing a domain name used in the subsequent query to the identified domain name.

In accordance with further aspects of this particular embodiment the one or more processors may be further configured to operate so as to identify an IP address associated with the identified fully qualified domain name. The subsequent query may use the identified IP address.

In accordance with other aspects of this particular embodiment designating the identified process as infected may further be based one or more additional queries prior to the identified query that each resolved to a local address.

The present disclosure will now be described in more detail with reference to particular embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to particular embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client systems and to network . Client systems and may access information on server A or B using for example a web browser or other client software not shown . Such a client may allow client systems and to access data hosted by server A or B or one of storage devices A N B N and or N .

Networks and may be local area networks LANs wide area networks WANs the Internet cellular networks satellite networks or other networks that permit communication between clients servers and other devices communicatively coupled to networks and . Networks and may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and may utilize one or more protocols of one or more clients or servers to which they are communicatively coupled. Networks and may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as one network it should be appreciated that according to one or more embodiments networks and may each comprise a plurality of interconnected networks.

Storage devices A N B N and or N may be network accessible storage and may be local remote or a combination thereof to server A or B. Storage devices A N B N and or N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices A N B N and or N may be used for backup or archival purposes. Further storage devices A N B N and or N may be implemented as part of a multi tier storage environment.

According to some embodiments clients and may be smartphones PDAs desktop computers a laptop computers servers other computers or other devices coupled via a wireless or wired connection to network . Clients and may receive data from user input a database a file a web service and or an application programming interface.

Servers A and B may be application servers archival platforms backup servers network storage devices media servers email servers document management platforms enterprise search servers or other devices communicatively coupled to network . Servers A and B may utilize one of storage devices A N B N and or N for the storage of application data backup data or other data. Servers A and B may be hosts such as an application server which may process data traveling between clients and and a backup platform a backup process and or storage. According to some embodiments servers A and B may be platforms used for backing up and or archiving data. One or more portions of data may be backed up or archived based on a backup policy and or an archive applied attributes associated with the data source space available for backup space available at the data source or other factors.

According to some embodiments servers A and B may contain one or more portions of software for implementation of security management processes such as for example security management module . Further one or more portions of the security management module may reside at a network centric location. For example server A may be a server a firewall a gateway or other network element that may perform one or more actions to support management of system and network security elements. According to some embodiments network may be an external network e.g. the Internet and server A may be a gateway or firewall between one or more internal components and clients and the external network. According to some embodiments detection of infected processes including security management module may be implemented as part of a cloud computing environment.

Security management module may monitor the use of network traffic by a variety of system processes. Security management module may be implemented for example as a standalone utility or as part of a security application and may monitor any network traffic originating with particular processes. The security management module may be activated automatically as part of the initiation of particular applications or utilities. On some systems the security management module may represent a background process that monitors programs continually as part of required security protocols on the system. The security management module may also be included as a browser plug in or other component integrated with network related software.

According to some embodiments the security management module may monitor all network traffic originating at a client system in order to identify any traffic that comes from a particular list of processes for which the security management module is responsible for monitoring. The security management module may compare any identified traffic from the listed processes against approved network traffic types in order to detect anomalous traffic. In some implementations the security management module may direct the system to block the anomalous traffic and may report the process that originated the traffic as an infected or potentially infected process.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit a removable disk unit e.g. Universal Serial Bus drive or other storage medium. According to some embodiments security management module may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

Referring to there is shown a security management module in accordance with an embodiment of the present disclosure. As illustrated the security management module may contain one or more components including an address block list a network traffic detection module network traffic analysis module response action module and error logging and reporting module .

The description below describes network elements computers and or components of a system and method for improving security information that may include one or more modules. As used herein the term module may be understood to refer to computing software firmware hardware and or various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . Any of the modules described herein may be associated with a network driver gateway proxy server or other network element computer or resource.

It is noted that the modules are exemplary. The modules may be combined integrated separated and or duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and or by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and or other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and or may be included in both devices.

An address block list may be a record representing a particular list of addresses associated with malicious communications. The list may include domain names and or IP addresses. In some implementations one or more of the addresses on the address block list may be generated using aspects of a method for identifying malicious code as described further herein. In some implementations the address block list may be periodically updated through communication with an appropriate resource such as a proprietary server.

A network traffic detection module may monitor network traffic associated with the system for which the security management module provides security services. In some implementations the network traffic detection module may be part of an intrusion detection and prevention system that monitors system network traffic in order to identify and respond to threats.

Each time that the network traffic detection module identifies network traffic the network traffic analysis module may determine whether the traffic is addressed to a domain name or IP address and whether the location is on the address block list .

Should the network traffic analysis module identify the network traffic as being sent to a location on the list the response action module may respond to the traffic. In some implementations the process from which the network traffic originated may be identified as infected and further action may be taken to eliminate or contain the infection. In some implementations the unauthorized network traffic may be blocked from transmission and further traffic from the process may be similarly blocked or at least screened.

Where the detected network traffic includes a request for an IP address associated with a domain name the network traffic analysis module may determine whether the request resolves to a valid external IP address or not. If the request returns no IP address or resolves to a home or localhost address such as 127.0.0.1 under IPv4 then the response action module may respond to the request. In some implementations the process originating the request and the details of the request may be logged for further scrutiny. Further requests using the same domain name or other names within the same second level domain may be blocked or may be monitored. The domain name may be added to the address block list.

Error logging and reporting module may produce logs reports or other information associated with network traffic detection and system security. In some implementations these logs may be used as input to a correlation system or security detection system for identifying new malware.

The DNS server refers the client to the IP address 4.3.2.1. The client communicates with the C2 server sending data and requests as necessary and any updates or instructions. The C2 server may be able to manage hundreds or even thousands of infected systems and coordinate targeted attacks or other malicious activity.

At block network traffic is monitored. In some implementations the network traffic may be monitored by an intrusion prevention and detection system.

At block a DNS query that resolves to a local address is identified. In some implementations not all such requests may be identified for example a white list of known DNS queries are benign and known to resolve to a local address may be exempt from this method or treated differently than other DNS queries.

At block the identified query is associated with the process that originated it. This may be determined directly from whatever component of the system is monitoring the traffic.

At block the identified process is designated as infected. In some implementations this identification may be acted upon in a variety of ways including quarantining the infected file remediating or replacing the infected file and blocking network traffic from the infected file until the file can be cleaned. Various security procedures and methods may be initiated to respond to an infected file and detected anomalous network traffic including heightened monitoring alerting a system user and increased filtering of network traffic. Other reactions to identifying an infected file from anomalous network traffic are known in the art and may be carried out as appropriate.

In some implementations in response to detecting a DNS request that returns local host further requests may be monitored and further action taken if the same or a related domain name is the subject of any additional DNS requests. This may occur even if a subsequent DNS request returns a valid external address and any such returned addresses may also be recorded and subject to scrutiny as a possible C2 server.

In some implementations the system may monitor for a pattern of behavior rather than responding the first time a process makes an anomalous DNS request. For instance the system may record each time such a request is detected and designate a process to be infected after a certain number of such requests are made within a certain period of time. In some implementations an anomalous DNS request may be one of several suspicious behaviors that may be detected and used to determine if a process is infected or if other security related actions should be taken by the system.

At this point it should be noted that techniques for detecting malicious code in accordance with the present disclosure as described above may involve the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in a security management module or similar or related circuitry for implementing the functions associated with detecting malicious code in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with detecting malicious code in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more non transitory processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of at least one particular implementation in at least one particular environment for at least one particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

