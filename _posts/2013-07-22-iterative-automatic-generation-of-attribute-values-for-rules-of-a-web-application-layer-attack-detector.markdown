---

title: Iterative automatic generation of attribute values for rules of a web application layer attack detector
abstract: According to one embodiment, a computing device is coupled to a set of web application layer attack detectors (AD), which are coupled between HTTP clients and web application servers. The computing device learns a new set of attribute values for a set of attribute identifiers for each of a sequence of rules through an iterative process having a plurality of iterations. The iterative process begins with an attack specific rule, and the sequence of rules includes an attacker specific rule and another attack specific rule. Each iteration includes receiving a current alert package from one of the ADs sent responsive to a set of packets carrying a web application layer request meeting a condition of a current rule used by the AD, automatically generating a new set of attribute values based upon the current alert package, and transmitting the new set of attribute values to the set of ADs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997232&OS=08997232&RS=08997232
owner: Imperva, Inc.
number: 08997232
owner_city: Redwood Shores
owner_country: US
publication_date: 20130722
---
This application claims the benefit of U.S. Provisional Application No. 61 814 739 filed Apr. 22 2013 which is hereby incorporated by reference.

Embodiments of the invention relate to the field of networks and more specifically to network security and the iterative automatic generation of attribute values for rules of a web application layer attack detector.

The content of Hypertext Transfer Protocol HTTP messages is transmitted within the application layer Layer 7 of the Open Systems Interconnection OSI model ISO IEC 7498 1 and may also be referred to as web application layer data. The OSI model was developed to establish standardization for linking heterogeneous communication systems and describes the flow of information from a software application of a first computer system to a software application of a second computer system through a communications network. The OSI model has seven functional layers including a physical link layer a data link layer a network layer a transport layer a session layer a presentation layer and an application layer. A few examples of application layer protocols include but are not limited to HTTP for web application communication File Transfer Protocol FTP for file transmission Internet Message Access Protocol IMAP and Post Office Protocol POP for email Simple Mail Transfer Protocol SMTP for transmitting email Internet Relay Chat IRC for real time Internet text messaging Session Initiation Protocol SIP for voice and video calling and Network File System NFS for the remote access of files.

Another model detailing communications on the Internet is known as the Internet Protocol IP suite and is sometimes referred to as TCP IP . In contrast to the OSI model the Internet protocol suite is a set of communications protocols including four layers a link layer an internet layer a transport layer and an application layer. The link layer of the Internet protocol suite which provides communication technologies for use in a local network is often described as roughly analogous to a combination of the data link layer layer 2 and physical layer layer 1 of the OSI model. The internet layer e.g. IP version 4 IPv4 IP version 6 IPv6 of the Internet protocol suite which provides for inter networking and thus connects various local networks is often described as roughly analogous to the network layer layer 3 of the OSI model. The transport layer e.g. Transmission Control Protocol TCP User Datagram Protocol UDP of the Internet protocol suite which allows for host to host communications is often described as roughly analogous to the transport layer layer 4 of the OSI model. Finally the application layer of the Internet protocol suite includes the various protocols e.g. HTTP IMAP FTP SIP for data communications on a process to process level and is often described as analogous to a combination of the session presentation and application layers layers 5 7 respectively of the OSI model.

Regardless of the model considered many common attacks are targeted at aspects of the network layer the transport layer and the application layer. The network layer which is under the transport layer and routes data supplied by the transport layer manages delivery of packets between computing devices that may be connected to different networks and separated by one or more other networks. The network layer is responsible for logical addressing which includes managing mappings between IP addresses and computing devices on a worldwide basis. The network layer is also responsible for ensuring that packets sent to computing devices on different networks are able to successfully navigate through the various networks successfully and arrive at the proper intended destinations. Network devices such as routers and gateways predominantly operate at the network layer. The transport layer which is under the application layer provides end to end communication services by providing reliable delivery of an entire message from a source to a destination sometimes using multiple packets. While the network layer typically handles each packet independently the transport layer manages the relationships between the packets to ensure that the entire message arrives at the destination and can be reassembled in the correct order to recreate the original message. The application layer typically operates as the top layer in networking models and carries application specific data such as HTTP request and response messages.

Application layer attacks typically target web applications executed by web application servers in which case they are referred to as web application layer attacks . A web application server is system software running on top of an operating system executed by server hardware upon which web applications run. Web application servers may include a web server e.g. Apache Microsoft Internet Information Server IIS nginx lighttpd which delivers web pages on the request of HTTP clients using HTTP and may also include an application server that executes procedures i.e. programs routines scripts of a web application. Web application servers typically include web server connectors computer programming language libraries runtime libraries database connectors and or the administration code needed to deploy configure manage and connect these components. Web applications are computer software applications made up of one or more files including computer code that run on top of web application servers and are written in a language the web application server supports. Web applications are typically designed to interact with HTTP clients by dynamically generating HTML responsive to HTTP request messages sent by those HTTP clients. Many web applications utilize databases e.g. relational databases such as PostgreSQL MySQL and Oracle and non relational databases also known as NoSQL databases such as MongoDB Riak CouchDB Apache Cassandra and HBase to store information received from HTTP clients and or information to be displayed to HTTP clients.

HTTP clients interact with web applications by transmitting HTTP request messages to web application servers which execute portions of web applications and return web application data in the form of HTTP response messages back to the HTTP clients where the web application data may be rendered using a web browser. Thus HTTP functions as a request response protocol in a client server computing model where the web application servers typically act as the server and the HTTP clients typically act as the client. 

HTTP Resources are identified and located on a network by Uniform Resource Identifiers URIs or more specifically Uniform Resource Locators URLs using the HTTP or HTTP Secure HTTPS URI schemes. URLs are specific strings of characters that identify a particular reference available using the Internet. URLs typically contain a protocol identifier or scheme name e.g. http https ftp a colon two slashes and one or more of user credentials server name domain name IP address port resource path query string and fragment identifier which may be separated by periods and or slashes. The original versions of HTTP HTTP 0.9 and HTTP 1.0 were revised in Internet Engineering Task Force IETF Request For Comments RFC 2616 as HTTP 1.1 which is in common use today. A new version of the HTTP protocol HTTP 2.0 is currently being developed by the Hypertext Transfer Protocol Bis httpbis working group of the IETF and is based upon the SPDY protocol. As HTTP 2.0 is expected to similarly utilize HTTP clients and HTTP request messages the ideas discussed herein should largely if not entirely remain applicable to HTTP 2.0.

By way of an operational example an HTTP client requests a web page from a web application server by sending it an HTTP request message. For example to access the web page with a URL of http www.example.org index.html web browsers connect to the web application server at www.example.org by sending it an HTTP request message using a GET method which looks like the following 

The web application server replies by sending a set of HTTP headers along with the requested web page which collectively is called an HTTP response message.

A HTTP message may include request lines status lines HTTP headers a message body and or a trailer. Request lines which are used in HTTP 1.1 request messages include a method token field that identifies a method to be performed e.g. GET POST a Request URI field that identifies a URI of a resource upon which to apply the method i.e. a requested URL and a protocol version field e.g. HTTP 1.1 . Status lines which are used in HTTP . response messages include a protocol version field a numeric status code field e.g. and an associated textual explanatory phrase field e.g. Forbidden Not Found . HTTP headers define the operating parameters of an HTTP transaction and each HTTP header typically comprises a colon separated name value pair.

One type of HTTP header is a Referer header that allows a web browser to specify for a web application server s benefit an address e.g. URI of a resource e.g. web page from which the requested URI was obtained. For example if a user clicks on a link from within a web page having a URI of http www.example.com index.html the resulting HTTP request message sent by the web browser may include a Referer header of Referer http www.example.com index.html indicating that the HTTP request message was originated from that web page. Another type of HTTP header is a User Agent header that indicates for the web application server s benefit what software and or modules are utilized by the HTTP client making the request. For example a User Agent header may include one or more of a web browser product name and version number a layout engine name and version number used by the web browser an identifier of the type of machine and or operating system of the user and or names of any extensions utilized by the web browser. For example a User Agent header transmitted from the Mozilla Firefox web browser executing on a computer utilizing the Microsoft Windows 7 operating system may be Mozilla 5.0 Windows U Windows NT 6.1 ru rv 1.9.2 Gecko 20100115 Firefox 3.6 . A core set of HTTP fields for HTTP 1.1 is standardized by the IETF in RFC 2616 and other updates and extension documents e.g. RFC 4229 . Additional field names and permissible values may be defined by each application.

HTTP parameters are typically short pieces of data i.e. attribute name and attribute value pairs that are sent from the HTTP client to the web application server. HTTP parameters may be sent a variety of ways such as including them in the Request URI of the request line of an HTTP request message utilizing the HTTP GET method i.e. by tacking them on the end of the Request URI as a query string or by including them in the message body of the HTTP request message when using the HTTP POST method. In principle the HTTP GET method requests the contents of a particular URL while the HTTP POST method sends data to a particular URL. By way of example assume the below HTML form is provided to the HTTP client as part of a web page 

Responsive to this HTML form being displayed a user may enter the username mcjones and submit this form which causes the HTTP request parameter username mcjones to be tacked on the end of the URL to form http www.examplesite.com login username mcjones. In this example username is deemed a field name or attribute name or attribute identifier and mcjones can be deemed a user entered value of the field attribute or an attribute value.

In addition to sending user submitted form data HTTP request messages may also be used for other purposes including 1 to send data via some Application Programming Interface API to call a web application server and 2 to send data to AJAX Asynchronous JavaScript and XML web applications. While formerly any user action required a web page to be reloaded from the web application server AJAX allows an HTTP client to retrieve data from the web application server asynchronously in the background without interfering with the display and behavior of the existing page. For example an AJAX call may load new content into a web page after the initial rendering of the page without having to reload or refresh the page i.e. transmit another HTTP request for the web page and or render the entire page once again .

Structured Query Language SQL is a special purpose programming language allowing for declarative querying of data typically contained in a relational database. Relational databases model data storage using one or more tables having columns and rows storing values associated with the columns. Most SQL implementations include data insert commands e.g. INSERT query commands e.g. SELECT update commands e.g. UPDATE and delete e.g. DELETE commands as well as schema creation schema modification and data access control commands. While relational databases are often referred to as SQL databases other types of non relational databases exist that are often referred to as NoSQL databases.

Many web applications utilize databases both relational and non relational to store and provide data used by the web application including but not limited to user data passwords user names contact information credit card information web application history etc. and other site specific data including but not limited to stories comments pictures product information sales information financial records and any other type of information utilized by or displayed by a web application. Because these databases often store confidential or private information the databases are often configured to only provide access to the data stored therein to a limited number of users geographic locations and or computing devices. For example many databases are configured to only allow access to a particular web application server.

However due to the sensitive and important data in these databases they are often targeted by third parties seeking unauthorized and possibly malicious access. For example attackers may attempt to perform SQL Injection SQLi attacks a form of web application layer attack which is a form of application layer attack by sending carefully crafted HTTP request messages to a web application server that may cause the web application to interact with its database under the direction of the attacker. While SQL injection attacks can be prevented through careful construction of web applications for example by validating and or sanitizing e.g. escaping input provided to the web application by its users such careful construction is not always used during the construction of all web applications.

In addition to SQLi attacks many other types of attacks target web applications and web application users. For example Cross Site Request Forgery CSRF attacks work by abusing the trust between a web application and a particular client to perform an application level transaction on behalf of the attacker using the identity of the client. Further attackers may use Remote File Inclusion RFI attacks that target web application servers Cross Site Scripting attacks Clickjacking attacks i.e. User Interface Redress Attacks and many other web application layer attacks. Web application layer attacks typically come from outside a network e.g. a Local Area Network LAN and are directed at one or more computing devices within that network. For example SQL injection attacks are typically directed at web applications and databases executing on computing devices located within a LAN and come from computing devices located outside the LAN.

Given this reality security devices sometimes called web application firewalls are commonly utilized to look for and prevent such attacks within HTTP traffic i.e. web application layer traffic .

The set of rules also includes a set of one or more conditions that define what to look for in traffic and a set of one or more actions to be performed when a condition is met. The condition includes for each rule one or more attributes . An attribute is a combination of an attribute identifier and a set of one or more attribute values . An attribute identifier serves to identify how to determine a particular attribute value to be examined. Attribute identifiers can identify particular protocol headers e.g. a TCP header an HTTP header and or header fields e.g. a source or destination port of a TCP header a Referer HTTP header field used within a packet. Attribute identifiers can also identify metrics or characteristics of traffic that an attribute value represents. For example an attribute identifier may be a number of packets or HTTP messages received over a defined period of time and the corresponding attribute value may be that particular number of packets or HTTP messages. Of course the use of metrics or characteristics as attribute identifiers requires that the system have some way of determining the attribute values perhaps by maintaining a separate table or database not pictured with relevant data necessary to perform the computation. Attribute identifiers may also identify portions of application layer data carried by packets such as an HTTP request message an HTTP response message a SQL query etc. Each of the rules may include one or more attribute IDs and for each of the attribute IDs a set of one or more attribute values . In some systems each rule may also include detection logic describing how the attribute identifiers and attribute values are to be used. For example in some systems the detection logic defines logic statements to define the relations within a pair of attribute IDs and associated sets of attribute values e.g. only one of the values must be found all of the values must be found or none of the values must be found and or to define the relations between different pairs of attribute IDs and associated attribute values e.g. a first ID value pair must be true AND a second ID value pair must be true a first ID value pair must be true OR a second ID value pair must be true . In some systems the detection logic instead defines how to find the portions of the traffic identified by the attribute identifiers . However in some systems the detection logic and attributes including attribute identifiers and associated attribute values are combined into fewer fields.

Each of the rules is also depicted as including one or more actions to be performed when the condition of the rule is satisfied. Actions can indicate one or more forwarding actions e.g. drop the packet or message temporarily hold the packet or message for further analysis transmit the packet or message to a particular module or IP address forward the packet or message to the intended destination or modification actions e.g. insert a value into the packet or message at a particular location strip out a value from the packet or message replace a value in the packet or message etc. . The actions can also include instructions describing what information is to be placed into each alert package for example an action may direct that an attack type indication of RFI attack is to be included therein. Additionally many other types of actions are well known to those of ordinary skill in the art and thus these examples are not exhaustive.

In some systems the rules utilized by computing devices for security purposes may be described as detecting a particular type of attack and thus have an attack type . For example a first rule may detect SQLi attacks and be of a SQLi attack type a second rule may detect RFI attacks and be of an RFI attack type a third rule may detect denial of service DoS attacks and be of a DoS attack type and a fourth rule may detect CSRF attacks and thus be of a CSRF attack type.

According to an embodiment of the invention a method in a computing device communicatively coupled to a set of web application layer attack detectors ADs is described. The set of ADs are communicatively coupled between a set of one or more Hypertext Transfer Protocol HTTP clients and a set of one or more web application servers to protect the set of web application servers against web application layer attacks. Each AD applies rules that each comprise a condition including a set of one or more attributes. Each of the set of attributes includes an attribute identifier and a set of one or more attribute values. The method includes learning a new set of one or more attribute values for a set of one or more attribute identifiers for each of a sequence of rules through an iterative process having a plurality of iterations. The iterative process begins with a current rule that is an attack specific rule that relies upon its set of attribute values of its set of attribute identifiers that are indicative of a first type of web application layer attack. The sequence of rules also includes an attacker specific rule that relies upon its set of attribute values of its set of attribute identifiers that identify an HTTP client of the set of HTTP clients. A last of the sequence of rules is another attack specific rule that relies upon its set of attribute values for its set of attribute identifiers that are indicative of a second type of web application layer attack. Each iteration of the iterative process includes receiving from one of the set of ADs a current alert package. Each current alert package includes a current web application layer request message sent by one of the set of HTTP clients to one of the set of web application servers and each current alert package was sent responsive to a current set of one or more packets that collectively carried the current web application layer request message and that resulted in the condition of the current rule being met. Each iteration of the iterative process also includes automatically generating using the current alert package a current new set of one or more attribute values for each of a current set of one or more attribute identifiers. Each iteration of the iterative process also includes transmitting for delivery to the set of ADs the current new set of attribute values for each of the current set of attribute identifiers for a different rule than the current rule. The different rule becomes the current rule in a subsequent iteration of the iterative process.

In another embodiment of the invention a computing device is described that is to be communicatively coupled to a set of web application layer attack detectors ADs . The set of ADs are to be communicatively coupled between a set of one or more Hypertext Transfer Protocol HTTP clients and a set of one or more web application servers to protect the set of web application servers against web application layer attacks. Each AD applies rules that each comprise a condition including a set of one or more attributes. Each of the set of attributes includes an attribute identifier and a set of one or more attribute values. The computing device includes a set of one or more network interfaces and an automatic attribute value generation and rule feedback module AVGRFRM coupled to the set of network interfaces. The AVGRFRM is configured to learn new sets of one or more attribute values for sets of one or more attribute identifiers for sequences of rules through an iterative process having a plurality of iterations. Each iterative process is to begin with a current rule that is an attack specific rule that relies upon its set of attribute values of its set of attribute identifiers that are indicative of a first type of web application layer attack. Each of the sequences of rules is to include an attacker specific rule that relies upon its set of attribute values of its set of attribute identifiers that identify an HTTP client of the set of HTTP clients. The last rule of each of the sequences of rules is to be another attack specific rule that relies upon its set of attribute values for its set of attribute identifiers that are indicative of a second type of web application layer attack. Each iteration of the iterative process is to utilize an alert package reception module an attribute value generation module and a transmission module which are all part of the AVGRFM. The alert package reception module is configured to receive from the set of ADs current alert packages that each comprise a current web application layer request message sent by one of the set of HTTP clients to one of the set of web application servers. The current alert packages are to be sent responsive to current sets of one or more packets that collectively carry the current web application layer request messages and that result in the conditions of the current rules being met. The attribute value generation module is configured to automatically generate using the current alert packages current new sets of one or more attribute values for current sets of one or more attribute identifiers. The transmission module is configured to transmit for delivery to the set of ADs the current new sets of attribute values for the current sets of attribute identifiers for different rules than the current rules of that iteration. The different rules are to become the current rules in subsequent iterations of the iterative process.

Embodiments of the invention allow for continued automatic detection of continuously changing attack variants and other zero day attacks and the automatic creation of new security rules to prevent their continued use and nearly eliminate the existence of vulnerability windows wherein applications and networks are vulnerable to new attacks during the portion of time between the first use of the new attack and the ultimate implementation of protections against the attack. In an embodiment of the invention an iterative evolutionary path allows for learning a new attack based upon a triggering of an attacker specific rule to generate a new attack specific rule and learning a new attacker based upon a triggering of the new attack specific rule to generate a new attacker specific rule and so on.

In the following description numerous specific details such as logic implementations resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the present invention. It will be appreciated however by one skilled in the art that the invention may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

Bracketed text and blocks with dashed borders e.g. large dashes small dashes dot dash and dots are used herein to illustrate optional operations that add additional features to embodiments of the invention. However such notation should not be taken to mean that these are the only options or optional operations and or that blocks with solid borders are not optional in certain embodiments of the invention.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to affect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

In the following description and claims the terms coupled and connected along with their derivatives may be used. It should be understood that these terms are not intended as synonyms for each other. Coupled is used to indicate that two or more elements which may or may not be in direct physical or electrical contact with each other co operate or interact with each other. Connected is used to indicate the establishment of communication between two or more elements that are coupled with each other. Further although a Uniform Resource Locator URL is one type of Uniform Resource Identifier URI these terms are used interchangeably herein to refer to a URI which is a string of characters used to identify a name or a web resource.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices e.g. an end station a network device . Such electronic devices which are also referred to as computing devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory RAM read only memory ROM flash memory devices phase change memory and transitory computer readable communication media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals . In addition such electronic devices include hardware such as a set of one or more processors coupled to one or more other components e.g. one or more non transitory machine readable storage media to store code and or data and a set of one or more wired or wireless network interfaces allowing the electronic device to transmit data to and receive data from other computing devices typically across one or more networks e.g. Local Area Networks LANs the Internet . The coupling of the set of processors and other components is typically through one or more interconnects within the electronic device e.g. busses and possibly bridges . Thus the non transitory machine readable storage media of a given electronic device typically stores code i.e. instructions for execution on the set of one or more processors of that electronic device. Of course one or more parts of an embodiment of the invention may be implemented using different combinations of software firmware and or hardware.

As used herein a network device e.g. a router switch bridge is an electronic device that is a piece of networking equipment including hardware and software which communicatively interconnects other equipment on the network e.g. other network devices end stations . Some network devices are multiple services network devices that provide support for multiple networking functions e.g. routing bridging and or switching and or provide support for multiple application services e.g. data voice and video . Client end stations e.g. server hardware workstations laptops netbooks palm tops mobile phones smartphones multimedia phones Voice Over Internet Protocol VOIP phones user equipment UE terminals portable media players GPS units gaming systems set top boxes may execute an HTTP client e.g. a web browser to access content and or services provided over a LAN over the Internet and or over virtual private networks VPNs overlaid on e.g. tunneled through the Internet. The content and or services are typically provided by one or more end stations e.g. server end stations comprising server hardware running a web application server and belonging to a service or content provider or end stations participating in a peer to peer service and may include for example public web pages e.g. free content store fronts search services private web pages e.g. username password accessed web pages providing email services and or corporate networks over VPNs.

By way of example and not by limitation a few types of web application layer attacks and ways of preventing or mitigating those web attacks are described.

A first type of web application layer attack is commonly referred to as a Remote File Inclusion RFI attack. An RFI attack is an attack in which an attacker is able to make a web application server include the contents of one or more remote files within a particular resource which may then be executed compiled interpreted or sent to another computer device. For example an attacker may cause the web application server to retrieve and execute code from within a remote file e.g. PHP Hypertext Preprocessor PHP code Active Server Pages ASP code ASP.NET code Perl code etc. . Further RFI attacks lead to the unauthorized access and or manipulation of data from the web application server and or database. RFI attacks are typically enabled through a failure of the web application to validate input variables e.g. in PHP  GET  POST  COOKIE  REQUEST . Thus by transmitting unanticipated input to the web application server through these input variables i.e. in HTTP request messages an attacker may cause a vulnerable web application to execute this unanticipated non validated user input. For example if a PHP application includes an include  GET template id statement or a require  GET template id statement an attacker may pass a URL of a malicious file as part of an HTTP request message parameter. For example an HTTP request message including a GET request for page.php template id http www.example.com attack.txt will cause the web application to include the contents of the file located at http www.example.com attack.txt which may include malicious script e.g. PHP code for example when interpreting the page.php file to construct a web page for the user. Thus the contents of the remote file will be executed by the web application server when creating a web page . One method to prevent RFI attacks is for a web application to validate all inputs before using those inputs or not allow user input to be directly used with include or require type commands. Additionally a web application can prevent RFI attacks by determining if the parameters of an HTTP request message match a regular expression pattern e.g. ht f tps that looks for the existence of http https ftp or ftps which indicates that the parameters are including a URI of a remote resource.

A second type of web application layer attack is a Cross Site Request Forgery CSRF attack. A CSRF attack is an attack in which an attacker gets another user to unknowingly access a web application to which the user is authenticated. Typically the attacker is able to cause the victim s web browser to transmit unauthorized commands to the site which are executed if the site trusts the victim s web browser. For example an attacker may craft a malicious link script e.g. JavaScript or HTTP element e.g. an image that is loaded by a victim s web browser. This malicious entity causes the victim s web browser to transmit an HTTP request message to a website that the victim has previously established a current session with. For example if the victim s web browser has an unexpired cookie storing authentication information for the website i.e. is still logged on this malicious HTTP request message may be executed by the website because it believes that the user is purposefully making the request. Thus any web application that performs actions based upon input from trusted and authenticated users without requiring that the user authorizes the specific action is at risk. One method to prevent CSRF attacks is for the web application to check the Referer Header transmitted by the user s browser to ensure that the referrer page i.e. the page on which the request was caused to be transmitted is a known page of the web application and not an unknown page such as one created or modified by an attacker.

A third type of web application layer attack is the above discussed SQL injection SQLi attack. A SQL injection attack is an attack where an attacker includes portions of SQL statements in a web form input element or directly within a GET or POST HTTP request message to a web application in an attempt to get the web application to transmit these portions of SQL statements to a database to be executed. Thus the attacker may be granted unauthorized access or power to modify data within the database and may display database schema information e.g. a list of tables and settings display data stored in those tables e.g. contact information credit card information and any other type of information and or update or delete database data and related data structures or metadata. Further in some scenarios an attacker may even execute operating system commands through SQLi. One form of SQL injection occurs when user input is directly used by a web application to craft a SQL statement query but is not validated or escaped e.g. inserting escape characters into a value to prevent it from being executed by a database . For example a web application may contain the following PHP code creating a SQL command 

Assuming the web application does not validate user input data if an attacker passes the web application a value for user id that is not a user ID but instead includes carefully crafted SQL code the SQL code may be executed. For example an attacker may send a user id value of 

This will cause the above PHP code to create the following SQL command that selects some arbitrary data from a users table the record having a user id value equal to 1 but also deletes i.e. drops the users table 

Web applications may prevent SQL injection attacks by detecting SQL signatures within user inputs that may be used to generate SQL commands validating user input i.e. assuring that a user supplied input value to be used in a SQL command is of a proper size and or type and or escaping user input e.g. quotation marks i.e. apostrophes single quotes double quotes etc. and other meta characters used in generated SQL commands to prevent any SQL code that might be supplied in the user input from being executed.

Attackers continually create attack variants by modifying the carefully crafted malicious HTTP request messages to avoid detection. Thus attack variants and other zero day attacks are continually crafted and deployed such that current security devices are unable to detect their use until a point when the attacks are ultimately detected and security professionals can manually analyze these attacks to determine their methods and vectors and then design new security rules to prevent their continued use. However this attack detection analysis protection cycle leaves a vulnerability window wherein applications and networks are vulnerable to the new attacks during the portion of time between the first use of the new attack and the ultimate implementation of protection against the attack.

When the AD receives packets carrying web application layer messages A B the AD applies the rules by determining whether any of the conditions are satisfied for the packets. When a condition of a rule that analyzes web application layer request messages for potential and or actual web application layer attacks is met the AD reports an alert package to the AVGRFM . The alert packages depending upon the embodiment of the invention can include a variety of types of information related to the packets or web application layer messages including but not limited to part or all the web application layer messages themselves packet parts that include information from packet headers of the packet s carrying the web application layer messages that meet the rule condition e.g. source or destination IP addresses from an IP header source or destination ports from a TCP header or UDP header a Media Access Control MAC address or Virtual LAN VLAN identifier value from an Ethernet header etc. an identifier of the matched rule having the condition met part or all of the condition of the matched rule an attack type of the matched rule a category of the matched rule a set of violation indicators describing other flaws or departures from proper protocol found in the packets and or a timestamp generated by the AD indicating when the AD received or processed the packet s .

The AVGRFM in embodiments of the invention receives the alert package s from the AD and perhaps other alert packages from the same AD or other ADs over a wired or wireless network interface. In alternate embodiments though the AVGRFM may be a module executing on a same computing device as part of the AD itself e.g. the management server and thus the alert packages may be transferred between the AVGRFM and the AD using a bus shared memory space etc.

In the depicted embodiment of the AVGRFM operates on a batch of alert packages that includes one or more alert packages to attempt to automatically generate a new set of one or more attribute values for each of a set of one or more attribute identifiers . To accomplish this task the AVGRFM in the depicted embodiment analyzes the web application layer content and or the source IP addresses of the batch of web application layer messages as well as possibly other alert packages such as those including a same source IP address and or other alert packages reported due to a triggering of a same rule for example. If the new set of attribute values is not empty that is the AVGRFM was able to successfully automatically generate a new set of attribute values for each of a set of attribute identifiers the AVGRFM will feed back the new set of attribute values to the AD and possibly other ADs for a different rule than the initially triggered rule having the condition that was met that caused the reporting of the alert package. The different rule may differ from the initially triggered rule in a variety of ways including pertaining to a different attack type utilizing different actions utilizing different attribute identifiers and or utilizing different attribute values than the initially triggered rule and in some embodiments described later herein the different rule may be of a different category than the initially triggered rule. Accordingly this automatic generation by the AVGRFM of the new set of attribute values can enable the AD to use a different rule to specifically defend against unknown web application layer attacks without any human intervention and without a large vulnerability window that would allow the attack to continue to affect the set of web application servers . Similarly in certain embodiments described later herein this automatic generation can enable the AD to use a different rule that is attacker specific to further analyze web application layer request messages of an attacker to ultimately learn new sets of attribute values that identify additional unknown web application layer attacks for other attack specific rules.

Thus the attribute values are automatically extracted from monitored web application layer request messages destined to one or more web applications by one or more web application layer attack detectors ADs . These automatically generated attribute values may be fed back to some or all of the set of ADs protecting the one or more web applications and further may be automatically provided to other non related ADs to protect other web applications from web application level attacks. Additionally the automatically generated new set of attribute values may be transmitted to other computing devices of other organizations for further use outside of the immediate community of ADs. For example when the attribute values identify a source of web attacks i.e. are attacker specific attribute values this source information can be transmitted to computing devices of search engines and or security services that rank or identify the potential threat posed by specific hosts. Further the attribute values may be used to notify Internet Service Providers ISPs that provide network services to the attackers about the malicious activity or used to notify the owners or operators of individual end stations that their devices may be compromised and are being used to perform web application attacks.

In some embodiments the AVGRFM analyzes web application layer request messages reported by one or more ADs as alert packages determines new attribute values of one or more attribute identifiers for rules that detect suspicious web application layer request messages and feeds those attribute values for rules back to the ADs to enable those ADs to detect new variants of web application layer attacks. Thus the one or more ADs detect web attacks against web applications by continuously monitoring web application layer request messages directed at those web applications identifying web application layer request messages that are suspected as malicious and outputting the HTTP request messages that are potentially part of an attack as alert packages.

Accordingly embodiments of the invention are particularly effective due to the nature of the ADs as protecting real web applications and not simulated servers such as honey pots which often are not the target of sophisticated attacks. Accordingly the attack information observed by the ADs is particularly legitimate and useful as it represents actual attacks occurring against actual web application servers from real HTTP clients.

As an example in an embodiment the AVGRFM determines the set of attribute values by categorizing the processed HTTP request messages according to the type of attack they are part of which may be indicated within the alert package by an identifier of the particular rule or rules that were triggered by the HTTP request messages. Then the AVGRFM may extract attribute values of one or more attribute identifiers from the malicious web application layer request messages that serve as unique identifiers of the messages.

In some embodiments of the invention the automatic generation of a new set of attribute values occurs a plurality of times in the AVGRFM for a particular alert package either serially or in parallel by a plurality of modules configured to determine different sets of attribute values for sets of attribute identifiers . In these embodiments the sets of attribute values from the plurality of modules may be used separately to generate new sets of attribute values for different rules. In some embodiments the sets of attribute values from the plurality of modules are used in combination to generate multiple attribute identifier attribute value pairings for one particular different rule.

After determining a set of attribute values for each of a set of attribute identifiers the automatic generation enters a second phase of filtering from the determined set of attribute values any values that cannot be considered indicative of an attack to create the new set of attribute values for each of the set of attribute identifiers. The filtering phase can be based upon a variety of different factors including filtering based upon characteristics of the current alert package e.g. a length of a SQL query portion attribute value from an HTML request message parameter performing a test e.g. checking if a resource identified by a URL attribute value from an HTML request message parameter includes a malicious script pattern performing one or more comparisons e.g. determining if an IP address attribute value from an IP header included in the alert package exists within a whitelist of known benign IP addresses or IP address ranges or performing an analysis based upon properties of other alert packages e.g. determining if any other alert packages perhaps from other ADs include the same attribute values .

After the attempt to automatically generate the new set of attribute values for each of the set of attribute identifiers if the new set of attribute values is not empty the new set of attribute values for each of the set of attribute identifiers is fed back for a different rule than the one that caused the reporting of the alert package i.e. the triggering rule . In the depicted embodiment of this may include determining the rule into which the new set of attribute values is to be fed back to. This different rule may already exist at the time the triggering rule had its condition met or the different rule may be created on the fly when the new set of attribute values for each of the set of attribute identifiers are fed back. In the case when the different rule already exists the rule may be determined based upon the particular attribute identifiers of the new set of attribute values. For example if one of the attribute identifiers is a source IP address a particular attacker specific rule may be determined to be the different rule that the set of attribute values is to be included in. In some embodiments the rule is determined based upon characteristics of the set of attribute values and different characteristics of the attribute values may for example determine whether the new set of attribute values is to be fed back to a more or less restrictive rule. By way of example if each of a set of attribute values is a SQL query portion a characteristic may be a length of the query portion. In an embodiment a SQL query portion that is shorter than a particular threshold value will be fed back for a less restrictive rule i.e. more permissive and or a SQL query portion that is longer than a particular threshold value may be fed back for a more restrictive rule. Upon determining the rule the new set of attribute values may be transmitted to one or more ADs along with an indicator of which rule those attribute values are for. Alternatively the new set of attribute values may be transmitted along with commands and or data indicating an instruction to construct a new rule.

The AVGRFM in certain embodiments utilizes multiple alert packages when attempting to automatically generate the new sets of attribute values for each of a set of attribute identifiers . Accordingly during the analysis of web application layer message content and possibly the lower level i.e. non web application layer packet information included within an alert package the AVGRFM may further utilize information from other alert packages or information describing other alert packages. For example the analysis may also include examining other alert packages from a same AD or different ADs sharing a particular set of attribute values e.g. sharing a common source IP address sharing common HTML request parameters or being reported due to a triggering of the same rule.

In performing the analysis the AVGRFM may perform the determining and filtering phases depicted in . As an example in an embodiment the determining of the new set of attribute values phase may include only those values that appear in multiple alert packages either from one AD from multiple ADs or either. As another example the filtering phase may utilize information to remove determined values from the new set of attribute values if those values have not appeared in multiple alert packages i.e. a possible attack has not been attempted repeatedly or if those values have not appeared in web application layer messages from a threshold number of different IP addresses i.e. a possible attack has not been used by multiple attackers which often occurs when an attack is included in an automated attack tool . Further detail illustrating several different ways of using community information to perform the determining and filtering phases of are now provided with regard to .

In each of the ADs A N are communicatively coupled to the AVGRFM and thus are able to both report alert packages to the AVGRFM as well as receive automatically generated new sets of attribute values for use in rules different than those leading to the alert packages being generated and sent. In an embodiment of the invention the AVGRFM will send the automatically generated new sets of attribute values for each of a set of attribute identifiers to an optional distribution module which then transmits the new sets of attribute values to the ADs A N. In some embodiments the distribution module is part of or executing on a separate computing device than the AVGRFM . However in some embodiments a distribution module does not exist and instead all distribution is performed by the AVGRFM .

In embodiments of the invention utilizing multiple ADs a security intelligence sharing community may be formed from participants utilizing aspects of the invention. According to an embodiment of the invention malicious HTTP request messages identified by multiple ADs are collected from all or some of the community s members correlated and analyzed together to identify attribute values describing a new attack attacker and or suspicious behavior which may then be reported back to the ADs of the community members. In this manner activity that is merely suspicious from the standpoint of an individual AD or community member can be positively identified as an attack when this same suspicious activity is identified as being detected by multiple ADs in the community. Moreover attribute values of a new attack initially observed at one AD may be identified and shared with other ADs within a short period of time to prevent the attack from being further utilized. In this manner the generated attribute values are automatically acquired from real world attacks and may quickly be determined and disseminated to the community of ADs such that a new unpublished and or modified attack can be identified and the community can be rapidly immunized against the attack thereby reducing the vulnerability window of all in the community.

In the embodiment of the determination phase includes determining the User Agent string from each of a set of web application layer messages to generate a set of attribute values. The depicted filtering phase includes three sub blocks. The first block includes updating a table maintained to include 1 the different User Agent strings in recently reported alert packages 2 a report count indicating how many times each User Agent string was reported in the recently reported alert packages and 3 a source count indicating how many different source IP addresses were included in the sets of packets carrying web application layer messages using each User Agent string. Similar to the determination of what is recently reported is left to configuration. Using this table the filtering phase includes keeping in the set of attribute values those User Agent strings having a report count that meets or exceeds a first threshold and a source count that meets or exceeds a second threshold wherein the first and second thresholds may be the same or different depending upon configuration. also includes an additional filtering block where those User Agent strings existing in a list of commonly used or known legitimate User Agent strings are removed. This list of commonly used or known legitimate User Agent strings may be populated by the AVGRFM based upon experience and observation statically configured by an administrator or periodically updated by requesting an updated list from a computing device with access to such a list e.g. such as a maintained list of common User Agent strings that can be found on the Internet . Thus the attribute values will only include those User Agent strings recently used a number of times by different source IP addresses and that are not known to be legitimate.

In the determining phase includes determining the SQL queries that exist in the web application layer messages of the alert packages in HTML request message parameters e.g. query string values to generate the set of attribute values. In an embodiment each SQL query is normalized by enforcing a common spacing scheme e.g. space between SQL query elements and a common encoding though this is not strictly necessary for the operation of the system.

The filtering phase of includes a block where a set of patterns are determined from the SQL queries. In various embodiments the patterns are determined using a set of regular expressions that generically detect certain elements and or combinations of elements used in SQL injection attacks including but not limited to reserved SQL keywords SQL meta characters and other commonly used characters in SQL queries. For example the set of regular expressions might flexibly look for the existence of an equals sign or its hex equivalent encoding 3D in a SQL query. Another of the set of regular expressions might look for the existence of a single quote or its hex equivalent encoding 27 a repeated dash mark also referred to as a double dash or a semi colon or its hex equivalent encoding 3B . Another of the set of regular expressions might look for the existence of one or more reserved SQL keywords such as SELECT UNION DELETE FROM or UPDATE though this list is not exhaustive and many other additional SQL keywords are well known to those of skill in the art. Others of the set of regular expressions might look for the existence of the letters sp or xp in a SQL query which are often used when executing stored procedures using some databases and may also look for one or more alphanumeric and or underscore characters following the sp or xp that define the name of a particular stored procedure.

With the set of determined SQL patterns the filtering phase of also includes a block where those SQL patterns having a length less than a threshold are removed as it is difficult to determine unique attack patterns from shorter SQL queries. In an embodiment the threshold is 10 characters although many other thresholds are possible and useful.

With the length filtered set of SQL patterns the filtering phase of also includes block in which the new set of attribute values are made to include only those of the SQL patterns that exist in at least a threshold number of web application layer messages from recently reported alert packages describing packets that are from at least another threshold number of different source IP addresses. Depending upon configuration both of these thresholds may be the same or different. In an embodiment this block may be performed in part by maintaining and relying upon a table including 1 the determined SQL patterns 2 a report count indicating how many times each SQL pattern has appeared in recently reported web application layer messages and 3 a source count indicating how many different source IP addresses were included in the recently reported sets of packets carrying web application layer messages including each SQL pattern. Similar to the embodiments of and the determination of what is recently reported is left to configuration. Thus the new set of attribute values will include those SQL patterns recently used a number of times by different source IP addresses.

Next in block if the new set of attribute values is non empty the new set of attribute values for each of a set of attribute identifiers is fed back to one or more ADs for a different rule than the rule or any of the rules that caused the reporting of the respective alert package s . In an embodiment this block includes determining a rule into which the new set of attribute values is to be fed back to. As illustrated in the determining may include an analysis of the length of the SQL query patterns serving as the new set of attribute values. In an embodiment if the length of a particular SQL query pattern is within a first range of lengths then that SQL query pattern is fed back for a less restrictive rule having a set of actions that causes the set of ADs to report but not block web application layer request messages including that SQL query pattern. Similarly in block if the length of a particular SQL query pattern is greater than the largest length of the first range of lengths then the SQL query pattern is fed back as an attribute value for a more restrictive rule including an action that both reports alert packages and blocks the web application layer request messages under the premise that longer SQL patterns are more likely to be attacks than shorter SQL patterns. Thus in various embodiments the characteristics of the data within the web application layer messages and or other information from the packets carrying the web application layer messages are analyzed to determine the rule that the automatically generated set of attribute values are fed back for. Alternative embodiments may instead use different analysis modules that filter on length of the SQL patterns and respectively provide attribute values to the more and less restrictive rules.

In this depicted embodiment the AVGRFM upon receiving a set of one or more alert packages from one or more ADs selects a set of alert packages to be analyzed using each analysis module based upon rule information present in the alert packages. For example in an embodiment each alert package includes a rule identifier indicating which of the rules had its condition met by the packet s carrying the web application layer message included in the alert package. In one embodiment the AVGRFM is configured to determine for each of the one or more rule identifiers in an alert package which of the analysis modules A Q should analyze that alert package. For example the AVGRFM may maintain a data structure designating that a rule identifier e.g. 10 from an alert package indicates that the alert package should be analyzed by certain analysis modules e.g. a first analysis module A and a third analysis module C . In other embodiments other information from each alert package is used for the purpose of selecting which analysis should be performed. For purposes of illustration and not limitation this other information may include a rule category indicator an action e.g. describing that any packets meeting the condition of that rule are to be processed using a particular set of analysis modules A Q any of the set of one or more attribute identifiers an IP address or port identified in the set of packets carrying the web application layer message a timestamp included in the alert package identifying a time the respective packets arrived or when the alert package was generated or transmitted. Alternatively each analysis module A Q may be configured to process alert packages that triggered particular rules e.g. a first analysis module A may be configured to process those alert packages that triggered rules and for example.

As illustrated in an alert package is reported A. responsive to the triggering of a rule that is in the attack specific category and that is for detecting RFI attacks. As an example assume an attacker s HTTP client transmits one or more HTTP request messages including a remote resource location i.e. URL identifying a resource containing malicious code that the HTTP client attempts to get a web application server to include and execute. An AD which is coupled between the attacker s HTTP client and the destination web application server receives the set of packets carrying the HTTP request message that includes the remote resource location. Upon analyzing the HTTP request message by applying a set of security rules the AD determines that the HTTP request message might constitute an RFI attack and might block the HTTP request messages. This determination may occur for example by a first rule that matches a regular expression pattern e.g. ht f tps against known specific parameters of those HTTP request messages for known vulnerable URLs such as looking for the existence of http https ftp or ftps which indicates a remote file location in one of the specific parameters for those HTTP request messages performing a GET or POST for a URL known to be vulnerable. Of course many other patterns and or regular expressions to detect RFI attacks are known to those of skill in the art. After making the determination that the HTTP request message might constitute an RFI attack based upon the existence of the pattern within the known specific parameters the AD transmits the HTTP request message as part of an alert package A. to the AVGRFM for further analysis. In some embodiments the alert package will include a rule identifier to identify the triggered rule s here an identifier of the first rule values used in the first rule and or an indicator of a potential attack type e.g. RFI of the HTTP request message based upon what type of attack the first rule is designed to detect.

The flow then includes determining a set of one or more attribute values for each of a set of one or more attribute identifiers . In the depicted embodiment this includes creating an initial list of URLs embedded in the parameters of the received HTTP request messages. For example the AVGRFM may be configured to parse the alert package to determine one or more URLs embedded within the parameters of the HTTP request messages perhaps using another regular expression. In an embodiment the AVGRFM looks for the URIs based upon the rule identifier of the triggered rule sent in the alert package. Additionally in some embodiments the AVGRFM parses multiple alert packages related to possible RFI attacks in a batch manner to identify many URLs embedded within HTTP request messages.

The flow also includes filtering from the set of attribute values any values that cannot be considered indicative of an attack to create a new set of attribute values for each of the set of attribute identifiers which includes block where a resource identified by each of the initial list of URLs is downloaded. At each downloaded resource is matched against a set of one or more known malicious script patterns. The set of known malicious script patterns can be very simple e.g. looking for the mere existence of any PHP Perl ASP code within the resource looking for the mere existence of any JavaScript code within the resource or quite complex e.g. analyzing the resource to determine if particular potentially dangerous commands exist within the resource . At the URL for any resource that matches or satisfies any of the set of malicious script patterns is inserted into a list of malicious RFI URLs.

If there are URLs in the list of malicious RFI URLs i.e. the set of attribute values the set is fed back for a different rule than the triggering rule that caused the reporting of the alert package. In this example as described at block the different rule has the same category and attack type i.e. RFI but different attribute values and possibly different attribute identifiers and or actions as the triggering rule that caused the reporting of the alert package. For example the triggering rule may search for an attribute value of include or both of which are commonly used in RFI attacks or a specific path within a URL e.g. example.com for the attribute identifier of an HTTP request message parameter while the different rule may search for a particular URL attribute value of http www.example.com examplefile.txt .

By automatically learning the URLs used in RFI attacks the system is set to detect new attribute values for new attacks in the future as it is known that URLs used in RFI attacks will often be used again for different RFI or other attacks.

As illustrated in the flow of the alert packages A. are received responsive to a triggering of a rule that is in the attack specific category and that is for detecting CSRF type attacks. For example assume a victim opens or views a web page that tricks the victim s HTTP client into sending HTTP request messages to a target web application server which would cause the web application to perform an action dictated by the attacker. When the victim s HTTP client transmits a set of one or more packets carrying an HTTP request message to a web application server protected by an AD the AD will analyze the set of packets carrying the HTTP request message by applying a set of security rules and determine that the HTTP request message is suspicious when the message meets a condition of a security rule designed to find indications of CSRF attacks i.e. the rule is triggered . For example one such security rule may trigger when a HTTP Referer header in the HTTP request message identifying the site that caused the request to be issued does not match the address of the destination web application server identified by the destination IP address of the packets carrying that message. When the condition of the security rule is met the AD will transmit the alert package including the HTTP request message to the AVGRFM for further analysis. In some embodiments the alert package will include a rule identifier to identify the triggered rule s or may include an indicator of a potential attack type e.g. CSRF of the HTTP request message.

Then in block the set of attribute values for each of a set of attribute identifiers is determined by creating an initial list of HTTP Referer header values in the HTTP request messages i.e. web application layer messages of the alert package s . In some embodiments the AVGRFM parses multiple alert packages identified as possible CSRF attacks in a batch manner to identify multiple Referer headers and place those in a list of identified Referer headers. When the set of attribute values is filtered at block all HTTP Referer header values that appear in a list of one or more known benign Referer HTTP header values are removed from the initial list of HTTP Referer header values which forms the new set of attribute values. The list of known benign Referer HTTP headers may be configured by an administrator learned over time based upon HTTP request messages sent between HTTP clients and web application servers or acquired downloaded from a different computing device that maintains such a list.

Then the new set of attribute values is fed back when the set is non empty for a different rule than the one that caused the reporting of the alert package. In the depicted embodiment as described at block the different rule has the same category i.e. attack specific and same attack type e.g. CSRF but different attribute values and possibly different attribute identifiers and actions as the triggering rule that caused the reporting of the alert package. For example the triggering rule may detect the existence or non existence of a particular unique token i.e. attribute value in an HTTP request message parameter i.e. attribute identifier while the different rule may search for a particular Referer header value different attribute value in the Referer header of the HTTP request message different attribute identifier . As another example the triggering rule may detect that a Referer header value in the Referer header of an HTTP request message is not associated with the target web site while the different rule may search for the actual detected Referer header value of an HTTP request message.

The flow includes at block determining a set of one or more attribute values for each of a set of one or more attribute identifiers which in the specific example includes creating an initial list of URLs i.e. attribute values embedded in the parameters i.e. attribute identifier of the received HTTP request messages of the alert packages. The initial list is then filtered at block to remove any values that cannot be considered indicative of an attack to create a new set of attribute values for each of the set of attribute IDs. In this specific example the filtering of URLs for an RFI attack specific rule occurs similar to the analysis presented earlier in boxes and in . When a new set of attribute values is created by the filtering the flow continues with block where the new set of attribute values for each of the set of attribute IDs is fed back for a different rule than the attacker specific triggering rule that caused the reporting of the alert package. In this specific example as described in block the different rule is of a different category than the triggering rule i.e. attack specific vs. attacker specific and thus is of a different attack type i.e. RFI vs. none and uses different attribute values i.e. URLs vs. IP addresses and possibly different attribute IDs i.e. HTTP request message parameters vs. source IP addresses of IP headers and actions than those of the triggering rule that caused the reporting of the alert package.

This iterative process begins at circle 1 wherein a set of attribute values of one or more attribute identifiers that serve to identify an attacker s HTTP client is generated or received by the AVGRFM . In an embodiment the set of attribute values is a set of IP addresses for an attribute identifier of a source IP address field of an IP header. The set of attribute values may be received from a computing device that maintains a list of malicious IP addresses or generated identified based upon a previous set of non attackers specific rules being triggered. This set of attribute values is provided by AVGRFM to ADs at circle A for an attacker specific rule which thereby enables a set of ADs to detect inbound HTTP request messages sent by any of those IP addresses.

At circle B.1 a first set of one or more attackers A N having IP addresses that exist within the set of attribute values used by the attacker specific rule sends web application layer request messages toward one or more web application servers not pictured . These web application layer request messages are received and analyzed by at least one AD e.g. A but may optionally be received and analyzed at a plurality of the set of ADs e.g. A N . Thus attackers A N may include just one attacker A that sends web application layer request messages to one or multiple of the ADs or the attackers A N may include multiple attackers A N that send web application layer request messages to one or a multiple of the ADs . Regardless at each AD receiving these web application layer request messages the attacker specific rule is triggered and each such AD will report one or more alert packages to the AVGRFM at circle B.2 .

In the HTTP request messages sent by the attacker s A N for which the alert packages were generated because of the source IP address es of the attacker s A N are attribute values of rule includes a new unknown attack for which a new unknown attack pattern can be automatically learned in the form of a new set of attribute values. Using the received alert package s the AVGRFM utilizes one or more of the processes described herein for automatically generating a new set of one or more attribute values for each of a set of one or more attribute identifiers and feeding back the new set for a different rule. As part of this automatic generation in some embodiments the AVGRFM utilizes community information to generate the set of attribute values as described with reference to . At this point the AVGRFM has learned the attribute values of one or more attribute identifiers of the new attack and thus transmits these attribute values for a new attack specific rule at circle C either directly or indirectly i.e. using one or more intermediate network devices to the set of ADs .

After being configured to utilize the new set of attribute values for the new attack specific rule a different attacker X e.g. not using an IP address within any set of IP addresses used as attribute values in any attacker specific rule attempts to perform the new attack by transmitting at circle D.1 web application layer messages to one or more web application servers which are received and analyzed by a set of one or more ADs that protect those one or more web application servers. These web application layer request messages will trigger the new attack specific rule because they use attribute values of one or more attribute identifiers that match the condition of the new attack specific rule . Each of the one or more ADs receiving these web application layer request messages will upon determining that a web application layer request message triggers the new attack specific rule create and transmit an alert package to the AVGRFM at circle D.2 . Upon receipt of the one or more alert packages the AVGRFM will again automatically generate a new set of one or more attribute values for each of a set of one or more attribute identifiers and feedback the new set of attribute values for a different rule . However in this instance the AVGRFM will use the alert packages to automatically generate attribute values i.e. the source IP address of the attacker X and thus learn at circle E a new attacker for an attacker specific rule. In an embodiment the attacker specific rule is the same attacker specific rule used earlier in the process and the additional attribute value of the new attacker s X IP address will be added to the set of attribute values of that rule but in other embodiments a different new or existing rule will utilize the additional attribute value of the new attacker s X IP address. At this point the process can continue iterating where a violation of an attacker specific rule leads to the automatic generation of new attribute values for a new attack specific rule which leads to the automatic generation of new attribute values for an attacker specific rule which leads to the automatic generation of new attribute values for another new attack specific rule and so on.

However moving from an attacker specific rule to an attack specific rule is not the only possible evolution enabled by the system described herein. is a state diagram illustrating many possible evolutionary paths for learning different types of security rules according to certain embodiments of the invention. In this diagram each solid arrow illustrates a transition for which a specific example is provided in another figure and each dashed line illustrates a transition that is enabled by the system and for which no specific example was considered necessary for one of ordinary skill in the art to comprehend the invention.

For example attribute values for a different rule in a same category can be learned for and based on attack specific category rules in arrow which is further illustrated in and learned for and based on hybrid category rules in arrow which is further illustrated in and learned for and based on attacker specific category rules in arrow .

Similarly from a triggering of an attack specific rule the system can learn attribute values for a hybrid rule arrow and or for an attacker specific rule arrow and depicted in a community configuration in . Also from a triggering of a hybrid rule the system can learn attribute values for an attack specific rule arrow and or for an attacker specific rule arrow and . Likewise from a triggering of an attacker specific rule the system can learn attribute values for a hybrid rule arrow or for an attack specific rule arrow and . Several examples of these transitions are now described in further detail.

Next when the hybrid rule is triggered at the AD by web application layer request messages and an alert package is sent the AVGRFM is able to automatically generate several different sets of attribute values for sets of attribute identifiers see and supporting text for additional detail regarding performing multiple analysis upon one alert package . In this example the AVGRFM generates and sends for delivery to the AD a set of attribute values for an attacker specific rule e.g. an IP address a set of attribute values for an attack specific rule e.g. a particular automatically generated SQL query pattern and or a set of attributes for a hybrid rule e.g. a User Agent string . In the depicted example all three sets of automatically generated attribute values may be used by three different rules at the AD thereby enabling the AD to detect several different types of suspicious web application layer request messages based upon a triggering of just one hybrid rule . The feedback of attribute values for each of these types of rules based upon a triggering of a hybrid rule is further detailed in and .

After step a new set of packets carrying a web application layer message triggers the attacker specific rule utilizing the new attribute values as the packets included a source IP address value matching one of the IP addresses in that attacker specific rule. As a result an alert package is generated and transmitted from the AD to the AVGRFM which automatically generates and feeds back a set of attribute values for another attack specific rule e.g. a particular URL to be used to detect an RFI attack and is further detailed in .

The flow begins with alert packages B. including web application layer messages and optionally information from the packet s carrying the web application layer messages such as the packet parts triggered rule information and or identifiers other information from or describing other packets triggering rules etc. being reported responsive to a triggering i.e. a condition being met of a rule that is of the attack specific category and in the specific example that is for detecting SQL injection attacks based upon pattern matching .

In the specific SQLi example the alert packages B. may be received responsive to an attacker s HTTP client transmitting one or more packets carrying an HTTP request message including malicious SQL syntax that the attacker s HTTP client attempts to get the web application server to execute using its backend database. Upon receipt of the packets carrying the HTTP request message the AD analyzes the set of packets by applying a set of security rules and determines that the HTTP request message is suspicious when it meets the condition of a security rule designed to find indications of SQLi attacks. For example one such security rule may look for the existence of a quotation mark i.e. a single quotation mark an apostrophe a double quotation mark etc. within a HTTP request parameter as quotation marks can be used to modify SQL queries for SQLi attacks. Of course many other attribute identifier and attribute value combinations are known to those of skill in the art to detect possible SQL injection attacks including but not limited to looking for reserved SQL command names e.g. SELECT UPDATE DROP etc. or other characters e.g. semicolons in HTTP request parameters. When the condition of the security rule for detecting possible SQLi attacks is met by the HTTP request message the AD will transmit the HTTP request message as part of an alert package to the AVGRFM for further analysis. In some embodiments the alert package will include a rule identifier to identify the triggered rule s or may include an indicator of a potential attack type e.g. SQL injection of the HTTP request messages.

The flow includes the same general steps as other figures determining filtering and feeding back however the specific details of each differ. For example in the determining of the set of attribute values includes identifying a source IP address from the current alert package. Next during the filtering stage the flow includes filtering the identified source IP address using a list of one or more known benign IP addresses such that if the identified source IP address does not exist in the list it remains eligible to be included in a new set of attribute values. In an embodiment one or more of the IP addresses of the list of known benign IP addresses are known to be IP addresses of legitimate penetration testing services. The flow also includes analyzing the source IP address as previously described in blocks and of .

In the specific SQLi example the AVGRFM determines the set of attribute values by parsing alert package s B. and optionally other alert packages identified as being transmitted due to the violation of a SQL injection detection rule to identify the source IP address or addresses from the packets carrying the HTTP request messages to create an initial list of source IP addresses. In some embodiments the alert packages include source and or destination IP addresses from the packets which commonly are carried in network internet layer OSI layer 4 TCP IP internet layer headers e.g. IPv4 headers IPv6 headers of the packets. According to an embodiment of the invention the AVGRFM uses a list of benign IP addresses e.g. those of known legitimate penetration testing services those configured and or trusted by the AVGRFM etc. to filter the identified initial list of source IP addresses by removing any source IP address that appears in the benign list. Then the remaining source IP addresses in the initial list of source IP addresses are deemed to be malicious source IP addresses.

When the new set of attribute values is not empty e.g. source IP address es exist that have not been filtered out during the steps of block the new attribute values are fed back for delivery to one or more ADs for a different rule that has a different category than the triggered rule hybrid vs. attack specific different attribute identifiers than the triggered rule in the specific example both source IP address from an IP header and the HTTP request message parameters vs. only the HTTP request message parameters and thus different values than the triggered rule in the specific example an IP address and a single quote mark vs. a SQL pattern and possibly different actions e.g. report all web application layer request messages vs. block and report web application layer request messages than the triggered rule.

Thus generally illustrate learning from attack specific to hybrid hybrid to attacker specific hybrid to attack specific and hybrid to hybrid respectively. While these general flows are further illustrated through a specific example related to SQL injection it is to be understood that these general flows are not so limited.

In the depicted embodiment of the AVGRFM utilizes a set of one or more network interfaces of a set of one or more computing devices and includes an alert package reception module to receive from one or more ADs alert packages comprising web application layer request messages sent by HTTP clients to web application servers. These web application layer request messages are to be sent by the one or more ADs responsive to sets of one or more packets that collectively carry the web application layer request messages that result in the conditions of a set of rules being met. In an embodiment these sets of packets are sent using a protocol stack including an application layer that carries web application layer request messages a transport layer under the application layer to provide end to end communication services and a network layer under the transport layer to route data supplied by the transport layer.

The AVGRFM in an embodiment depicted by also includes an attribute value generation module comprising a plurality of analysis modules which each may correspond to one or more of the analysis modules A Q of . The attribute value generation module in an embodiment is configured to automatically generate using the alert packages received by the alert package generation module using the set of network interfaces and without relying on a web application layer response messages that may be sent by the web application servers to the HTTP clients new sets of one or more attribute values for sets of one or more attribute identifiers.

In the depicted embodiment of the attribute value generation module includes a set of one or more attack specific analysis modules a set of one or more attacker specific analysis modules and a set of one or more hybrid analysis modules each of the sets being configured to automatically generate sets of attribute values for respective rule categories i.e. attack specific attacker specific and hybrid . Each of the plurality of analysis modules may be configured to perform tasks in one or more stages. First some or all of the plurality of analysis modules may perform an attribute extraction stage which in some embodiments includes analyzing information from the alert packages to identify possible attribute values that could be used in the new set of attribute values. The attribute extraction stage may in an embodiment correspond to the determining of the set of one or more attribute values for each of a set of one or more attribute identifiers as described in block in and .

Additionally some or all of the plurality of analysis modules may perform a filtering stage which in some embodiments includes removing from the identified possible attribute values those values that cannot be indicative of an attack or suspicious behavior. This filtering can be based upon a variety of different factors including but not limited to characteristics of the current alert package e.g. a length of a SQL query portion attribute value from an HTML request message parameter performing a test e.g. checking if a resource identified by a URL attribute value from an HTML request message parameter includes a malicious script pattern performing one or more comparisons e.g. determining if an IP address attribute value from an IP header included in the alert package exists within a whitelist of known benign IP addresses or IP address ranges and or performing an analysis based upon properties of other alert packages e.g. determining if any other alert packages perhaps from other ADs include the same attribute values determining if certain attribute values have appeared in a particular number of recently reported alert packages and are thus persistent determining if certain attribute values exist in other alert packages from packets sent by multiple HTTP clients as identified by differing source IP addresses . The filtering stage may in an embodiment correspond to the filtering from the set of attribute values of any values that cannot be considered indicative of an attack to create a new set of attribute values for each of a set of attribute identifiers as described in block in and .

Some or all of the plurality of analysis modules may perform a feedback stage which in some embodiments includes determining whether attribute values should be fed back to one or more ADs. The feedback stage may also include determining if the attribute values should be used with an existing rule or for a new rule although in an embodiment one or more of the analysis modules are configured to feedback attributes to certain existing rules. Further the feedback stage may also include determining from multiple possible rules that could be selected one of the possible rules depending upon characteristics of the alert package. For example the feedback stage may include determining to feedback the new set of attribute values for a less restrictive rule when the new set of attribute values meets a criteria and determining to feedback the new set of attribute values for a more restrictive rule when the new set of attributes does not meet the criteria or meets a different criteria.

The AVGRFM also includes a transmission module which is coupled to the attribute value generation module to receive the new sets of attribute values to be fed back and is further coupled to the set of network interfaces to transmit the new sets of attribute values for delivery to one or more of the ADs. In an embodiment the transmission module transmits the new sets of attribute values to a distribution module which may be part of the same set of computing devices or a different set of one or more computing devices at a same or different geographic location and owned by a same or different business enterprise. In various embodiments the transmission module and or the feedback stage may perform actions corresponding to some or all of feeding back when the new set of attribute values of the set of attribute identifiers is not empty the new set of attribute values for the set of attribute identifiers for a different rule than the one that caused the reporting of the alert package as described in block in and .

When the management server receives a security gateway package from a security gateway A it will generate and transmit alert packages to the AVGRFM for automatic attribute value generation. In an embodiment of the invention the management server will generate and transmit several alert packages at one time in a batch mode of operation. The management server in some embodiments during the generation of alert packages will modify the contents of the web application layer message and or other packet portions that triggered the rule and are to be included in the alert packages. In some embodiments this modification removes sensitive data from those packets such as but not limited to usernames passwords credit card information unique and or identifying session information etc. which prevents certain sensitive information from being sent to the AVGRFM which may be owned by a different business entity than the AD A.

When the AVGRFM has received the alert packages and automatically generates a new set of attribute values for each of a set of attribute identifiers it transmits the new set of attribute values back to one or more of the ADs A N for a different rule than the triggering rule that cause the reporting of the alert package. In an embodiment that is not illustrated the new set of attribute values is directly transmitted back to one or more security gateways e.g. A . In the illustrated embodiment the new set of attributes is transmitted to the management server which optionally tracks and updates a copy of the rules and then sends rule updates to one or more of the security gateways A N causing the one or more security gateways to utilize the new set of attribute values while protecting the web application servers.

The rules are shown to be hosted in a management server that is coupled to the security gateway . The rules and updates to the rules may be transmitted by the management server to the security gateway or the security gateway may have a type of read access to the management server enabling it to fetch pull the rules and or updates to the rules . The security gateway is illustrated as being communicatively coupled between the client end stations A N and a data center . The data center includes server hardware i.e. a computing device on which is executing multiple web application servers the first of which is labeled A . The client end stations A N represent client end stations that are accessing one of the web application servers A and thus are accessing through a web interface. Such client end stations A N are typically outside of a private network of which the security gateway and data center are a part. In other embodiments the security gateway is implemented on the server hardware separately or as part of the web application server A.

As previously described the security gateway may be deployed in a variety of ways. illustrates three different deployments in which the security gateway is implemented as a separate network device from the server hardware . The three different deployments are as follows 1 an inline transparent layer 2 bridge or layer 3 router A in front of a switch 2 a non inline sniffer B which is connected to a switch that sits between the client end stations A N and the data center and 3 a reverse proxy or transparent proxy C which is connected to a switch that sits between the client end stations A N and the data center .

The operations in the flow diagrams have been described with reference to the exemplary embodiments of the other diagrams. However it should be understood that the operations of the flow diagrams can be performed by embodiments of the invention other than those discussed with reference to these other diagrams and the embodiments of the invention discussed with reference these other diagrams can perform operations different than those discussed with reference to the flow diagrams.

Similarly while the flow diagrams in the figures show a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary e.g. alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations etc. .

While the invention has been described in terms of several embodiments those skilled in the art will recognize that the invention is not limited to the embodiments described can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting.

