---

title: Device monitoring using multiple servers optimized for different types of communications
abstract: An electronic device monitoring system uses two different types of servers to communicate with electronic devices of users. One type of server, which may be a rapid contact server, is optimized or configured for relatively short and frequent communications with the electronic devices. The other type of server is optimized or configured for less frequent but (typically) longer communications with the electronic devices. In some embodiments, the electronic devices are configured to communicate relatively frequently (e.g., every few minutes) with the rapid contact server. When an electronic device is reported as lost or stolen, the rapid contact server may instruct the electronic device to contact the other type of server to obtain security-related instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09646180&OS=09646180&RS=09646180
owner: Absolute Software Corporation
number: 09646180
owner_city: Vancouver, BC
owner_country: CA
publication_date: 20131028
---
This U.S. National Stage Patent Application under 35 U.S.C. 371 claims the benefit of International Patent Application No. PCT CA2013 000923 filed Oct. 28 2013 which claims priority to U.S. Provisional Patent Application No. 61 719 259 filed on Oct. 26 2012 the entire contents all of which are hereby incorporated by reference as if fully set forth herein.

The present disclosure relates to the protection of electronic devices from loss or theft and in particular to systems and methods for monitoring such devices and being able to contact them frequently and on short notice.

Personal electronic computing or communications devices are often lost or stolen. Since proprietary information is routinely stored on such devices the need to protect such proprietary or sensitive data and to recover such devices is self evident.

Laptops and increasingly other electronic devices such as cell phones PDAs smart phones e.g. Blackberry iPhone memory sticks personal media devices e.g. iPod gaming devices tablet computers electronic books and personal computers are often remotely tracked so that they can be recovered in the event of theft. Such tracking may be effected by sending location information to a remote storage site an email server or a personal mobile electronic device.

During communications with a tracked device commands may be sent for data deletion encryption encryption key deletion updating software retrieving data retrieving screen shots retrieving camera shots etc.

Tracking traditionally occurs intermittently to avoid excessive bandwidth usage and to minimize the risk of being noticed by a thief. When a device is stolen between two such tracking communications the owner or user of the device has to wait until the following tracking communication in order to trigger a security action such as data delete on the device.

An electronic device monitoring system uses two different types of servers to communicate with electronic devices of users. One type of server which may be a rapid contact server is optimized or configured for relatively short and frequent communications with the electronic devices. The other type of server is optimized or configured for less frequent but typically longer communications with the electronic devices. In some embodiments the electronic devices are configured to communicate relatively frequently e.g. every few minutes with the rapid contact server. When an electronic device is reported as lost or stolen the rapid contact server may instruct the electronic device to contact the other type of server to obtain security related instructions. By optimizing the two servers differently an electronic device may be said to be configured to communicate with each according to different protocols where each protocol is optimized to the specific server.

This summary is not an extensive overview intended to delineate the scope of the subject matter that is described and claimed herein. The summary presents aspects of the subject matter in a simplified form to provide a basic understanding thereof as a prelude to the detailed description that is presented below. Neither this summary the drawings nor the following detailed description purport to define or limit the invention the invention is defined only by the claims.

Agent. As used herein an agent is a software hardware or firmware agent that is ideally persistent and stealthy. Typically the agent includes or consists of executable instructions that reside in processor readable memory in a computer or other electronic device. The agent typically provides servicing functions which require communication with a remote server. Preferably the agent is tamper resistant and can be enabled for supporting and or providing various services such as data delete firewall protection data encryption location tracking message notification software deployment and updates.

An illustrative embodiment of an agent is found in the commercially available product Computrace Agent . The technology underlying the Computrace Agent has been disclosed and patented in the U.S. and other countries which patents have been commonly assigned to Absolute Software Corporation. See for example U.S. Pat. Nos. 5 715 174 5 764 892 5 802 280 6 244 758 6 269 392 6 300 863 6 507 914 7 818 803 7 945 709 and related foreign patents. Details of the persistent function of an agent are disclosed in U.S. Patent Application Publications Nos. US2005 0216757 and US2006 0272020. The technical disclosures of these documents are fully incorporated by reference as if fully set forth herein. It is feasible to use an equivalent agent to the Computrace Agent or less preferably an alternative agent with less functionality could be used. For the purposes of the present disclosure the minimum functional attribute of the agent is to facilitate communications between the electronic device and a monitoring center or other remote computer or server. Communications are generally initiated by the agent.

Device. This is an electronic device to be protected. Examples of a device include a laptop cell phone personal digital assistant smart phone memory stick personal media device gaming device personal computer tablet computer electronic book and netbook. The agent resides in the device which may also be referred to as a host for the agent. A device may also be referred to as a client.

Electronic Serial Number ESN . A unique number that identifies a device or an agent within the device. An ESN may be stored in memory and or in a register in the device.

Token Public Token or Authentication Token. This is an encrypted ESN and it may be protected by a hash.

Rapid Contact Server RCS . A computer or computer system that a large number of remote devices contact frequently and briefly to receive awaiting commands if any without significant delay. An RCS may be part of a monitoring center and may be known as a Fast Contact server or FC server. Typically the RCS has a small pool of processing threads none of which are dedicated to a communication session.

Main Server. A guardian server or other computer or computer system that remote devices communicate less frequently and longer with compared to an RCS in order to receive awaiting commands if any. For example provided an internet connection is available to the device an agent may call the main server once a day or at some other selected suitable interval to report the location of the device download software upgrades if there are any and repair any security modules that are or should be installed on the device. The interval between calls may be modified e.g. reduced if a device moves into a high risk area from a low risk area or if the device is lost or stolen. Communication to the main server may be for example via the internet wired or wireless via a wired or wireless telephone network via cable or via satellite. The main server may receive notifications from owners of electronic devices that they have been lost or stolen and as a result the main server may transmit a message to the lost or stolen electronic device that initiates some kind of security action. The action may be to lock the device to sound an alarm to delete data and or to provide location information for example. The action may be to provide a list of files on the device retrieve files from the device invoke processor based anti theft features encrypt data on the device or delete an encryption key etc. In general the protected devices initiate calls to the main server.

Monitoring Center. This is a system which in a preferred embodiment includes an RCS and a main server. It may include an email server or it may be a group or distribution of servers or other computers. In the embodiments disclosed herein the agent sends device identification and location information to remote electronic storage located in or accessible by the monitoring center and or any other data desired to be transferred. The functions of a monitoring center may be incorporated into or associated with an electronic social network server. The monitoring center may receive notifications from owners of electronic devices that they have been lost or stolen. In general the protected devices initiate calls to the monitoring center but the monitoring center may also be configured to initiate calls to the protected devices for example via SMS if the devices are so equipped.

Rapid Call. A communication between a device and the RCS which may be a one way communication from the device to the RCS. A rapid call may or may not result in a response from the RCS. It may result in a rapid contact session which is a short session between the device and the RCS. A rapid call may also be referred to as a Fast Call or FC.

Rapid Contact Session or Short Session. This is a short communication session that is established between a device and a rapid contact server and is typically only a few packets long such as up to or having a maximum of four or five packets.

Regular Call. A communication between a device and the main server during which generally larger amounts of information are exchanged.

Immediate Regular Call or Forced Call. A regular call that is requested during a communication with the RCS and occurs at a time other than the time for a scheduled regular call.

The following detailed descriptions are presented largely in terms of methods or processes symbolic representations of operations functionalities and features of the invention. These method descriptions and representations are the means used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art. A software implemented method or process is here and generally conceived to be a self consistent sequence of steps leading to a desired result. These steps involve physical manipulations of physical quantities. Often but not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It will be further appreciated that the line between hardware software and firmware is not always sharp it being understood by those skilled in the art that software implemented processes may be embodied in hardware firmware or software in the form of coded instructions such as in microcode and or in stored programming instructions. In general unless otherwise indicated singular elements may be in the plural and vice versa with no loss of generality. The use of the masculine can refer to masculine feminine or both. Drawings are not to scale.

In many parts of the detailed description the subject matter has been explained in relation to stolen devices but it would of course be evident to those of skill in the art that it applies equally as well to devices that are lost.

A symbolic block diagram of a preferred embodiment of the rapid contact system is shown in . The system is intended to protect electronic devices such as devices by providing an efficient means for promptly contacting them and controlling them remotely. In practice there may be up to several million or more such devices in the system. The devices are connected by a network to an RCS and a main server . The network may be the Internet or include the Internet or it may be or include a telecommunications network. Connections between the devices and the network may be wired or wireless and the devices may be connected continually or intermittently to the network.

An agent in each electronic device causes the devices to call in regularly or approximately so to the RCS . The RCS comprises a processor which may contain one or more processing cores connected to a database and memory and configured to process computer readable instructions in a fixed relatively small pool of threads . In this example there are twice the number of threads as there are processor cores. In a system with a 24 core processor for example there may be 48 threads in the thread pool . In other embodiments other ratios are possible. Calls may be made about every 30 minutes for example or on any other appropriate time cycle. A call in some embodiments consists of the sending of a single small packet containing the device s electronic serial number ESN to input output completion port of the RCS . The ESN may be included in the small packet in an encrypted form such as in token . The single packets of data sent to the RCS each contain typically a total of 10 100 bytes. The small packet becomes a task that is to be processed by each thread .

When a task is processed by the RCS in a thread any remaining headers and checksums etc. are stripped from the small packet and the HTTP command is interpreted by the processor to reveal the ESN of the device that sent the packet which may involve decrypting the token if the ESN was sent encrypted in it. The processor then takes an action or not depending on the ESN that has been revealed. The ESNs and corresponding awaiting actions may be stored in the database . Such an action for example may be to request the setting up of a session in which case it will be a short session. In such a rapid contact session in which about 700 bytes or less of data may be exchanged the RCS may send an instruction to the device to call the main server which is set up for relatively lengthy communications with the devices. The agent may use different respective communication protocols to communicate with the RCS versus the main server . For example the protocol used for RCS communications may be optimized e.g. through reduced handshaking and smaller message sizes for relatively short frequent communications relative to the protocol used for communication with the main server.

For example a device may be flagged in the system as being stolen. The owner of the device may do this using computer or another electronic device to access the main server to input the status of the device as stolen. Such a device status is stored in a database in or accessible by the main server and in the database accessible by the RCS . In this case the device when calling the RCS will be instructed to call the main server which will then instruct the device to provide its location to the main server to call the main server more frequently or to enter a frozen state. As another example a rapid contact session may be used to send updated parameters from the RCS to the device such as an updated rapid call interval. Alternately the device may be flagged in the system to be sent a message which may be sent during a call with the main server . If the device has not been flagged as stolen and not flagged for anything else that would require a regular call the RCS may not send any response to the device as it would be unnecessary and would waste network bandwidth. However the system may alternately be configured for the RCS to send an HTTP Status i.e. message received OK response to the device or other suitable acknowledgment. Still alternately if there is no action awaiting for the device the RCS may send a disconnect message back to the device or simply disconnect.

Rapid contact sessions between the device and the RCS may also be used for setting a new authorization token where the device or agent in the device does not already have one has an invalid one or should have one replaced due to the contents of a security policy. The rapid contact session may also be used for setting the time for the next scheduled regular call to the main server . The rapid contact session may be used for redirecting regular agent calls to a different main server such as a main server for specifically managing data delete operations or a main server for managing encryption. If the device has been stolen the rapid contact session may redirect the agent to call a different main server that deals specifically with stolen devices. The rapid contact sessions may also be used for changing the time interval between rapid calls or for redirecting the rapid calls to another RCS. The rapid contact sessions may also be used for reporting the contents of fields in the agent or the device . In some cases up to about 4 KB of data may be transferred. Other processes may also be implemented during a rapid contact session the main requirement being that the session is short enough not to require dedicated processing threads and short enough not to significantly disturb the efficient functioning of the RCS in relation to the other devices that make rapid calls to it. Most of the time the devices make calls to the RCS that are not answered or for which no action is required.

The electronic devices may call the main server upon being commanded to do so by the RCS . The devices may also call the main server regularly approximately regularly semi periodically semi randomly or as a result of detecting a trigger or according to any programmable scheme desired. The main server comprises a processor connected to the database and memory and may be configured to process computer readable instructions in a relatively large number of threads . The threads preferably do not form part of a pool. In contrast to the RCS there is preferably at least one thread dedicated to each session . Calls may be made about every 24.5 hours for example or on any other appropriate time cycle. Communications from the devices to the main server are typically at least 10 10 000 times i.e. 1 4 orders of magnitude longer than communications to the RCS . Such a communication session contains typically between 10 500 packets each up to 1500 bytes long. The tasks in each session processed by corresponding thread are typically large in comparison to the tasks processed in the RCS . In a typical system as many as 8000 or more sessions may be maintained concurrently in the main server each with at least one dedicated thread. The number of sessions is limited by the amount of RAM or memory .

The database stores tasks updates and commands etc. to be communicated to each device . Whenever an owner or administrator of a device needs to change the record of the device s status force an immediate regular call or obtain current parameters of the device etc. these can all be done using computer or other appropriate device connected to the network . If data should be deleted from a device or the device should be frozen these commands too can be communicated to the main server via computer . Devices may be grouped and rapid calling may collectively be requested to be enabled or disabled by an administrator of such a group of devices via computer for example. The main server can transmit information about the rapid calling status of the device in question to computer . Such information may be whether the device is currently enabled for rapid calling whether the device is currently calling or is offline and the time of the last rapid call. The main server communicates with the RCS from time to time so that the database in the RCS can be updated with actions for the device during its subsequent rapid call. For example the RCS s database can be updated to cause the RCS to instruct the device to call the main server the device may respond to such an instruction by calling the main server immediately or at some other point prior to its next regularly scheduled call to the main server.

A single communication between a device and the main server may result in multiple tasks being created that can be run in parallel running threads. For example two three or more dedicated threads may be used as a result of a single communication with the main server .

The main server is responsible for the main communications with the devices which may include messages from the server to command the device to provide its location to the server to delete data to send identification of some or all of its components or to take any kind of security action. The main server may also transmit upgrades to the devices . Since the main server accepts relatively long communications and performs relatively lengthy tasks in which the session is kept alive and its context or state maintained one or more dedicated threads are used for each communication session. In contrast to this the RCS keeps no or very minimal track of state and so non dedicated threads can be used in the RCS. This is also the case both for the rapid calls and for the rapid contact sessions which may be requested by the RCS and subsequent packets sent by the devices to the RCS in such a rapid contact session may be processed by any of the threads .

In order for the rapid contact session to have predetermined states reading and writing a whole array of 516 bytes for example should be supported with all the necessary modifications carried out within the RCS . The agent may allow such changing of settings during secured rapid contact sessions or the RtlCopyMemory Windows API application programming interface can be used in order to write settings into memory and then copy them to the settings address. The former approach is faster as it requires just one transaction. In the latter approach the agent should detect the address of the RtlCopyMemory routine before the rapid contact session starts.

The rapid calls from the devices to the RCS and rapid contact sessions between the two are much briefer than regular calls to the main server and may be several orders of magnitude shorter. The purpose of these rapid calls is to let the RCS know of the online availability of the devices and provide the rapid contact system with a means to promptly establish a regular call between the devices and the main server if needed. For example a stolen electronic device may be flagged as such in the rapid contact system and more specifically in the RCS and main server . When a device that is stolen calls in to the RCS it will be instructed by the RCS to immediately call the main server for more extensive instructions which may include a data deletion command a lock command etc. This avoids clogging up the RCS with lengthy tasks while eliminating the waiting period the device would normally be subjected to if it were to wait until its next scheduled time to call the main server . The relatively low number of threads in thread pool is appropriate for dealing with a relatively large number of small tasks from a large number of devices for communications for which state does not need to be maintained or for which there are so few predictable values of state that it can be tracked without needing threads that are dedicated to a session.

A thread pool is used in the RCS because thread creation is not particularly cheap in terms of processor usage and having a pool of ready waiting threads makes the allocation and processing of incoming tasks more efficient especially if the number of threads is optimized. In order to maximize the efficiency of the processor in the RCS the code for processing the small packets should ideally be kept to a minimum and should be separate from the code in the main server that is used for processing the regular communications. This allows the RCS to process as many simultaneous calls as possible depending on operating system resources and network throughput.

The communications between the devices and the RCS utilize a completion port which allows threads to wake up for processing of any I O operation. Every session context is kept in a thread safe dictionary and becomes active as soon as the corresponding I O operation completes. The session context maintains the current session state which allows the RCS to continue with a current session. During the processing of a current session all blocking operations including communications to the database should be avoided or offloaded to other specific threads or thread pools in the RCS in order to ensure that thread used for the rapid contact session becomes available for another completed I O operation as soon as possible.

The RCS may support both keep alive and non keep alive sessions and use session IDs to identify sessions. To control the current session list a special watchdog thread should perform checks for expired non keep alive sessions once in a while.

Besides the I O and rapid contact session processing threads the RCS should have a callback interface available to be called from an external database e.g. database if it is embodied in a separate server from the RCS on a special thread using TCP communications on a specific port. The RCS may also have support for performance counters reporting querying an external database during start up logging etc.

Referring to an example of a small packet sent from a device to the RCS is shown. The small packet has a header portion which may for example include an Internet Protocol header a TCP header and various checksums. Depending on the protocols used for the transmission the header portion may be 20 bytes long. Following the header portion there is a data portion that is formed of an HTTP request such as a POST request and an identification portion which may contain the ESN of a device . Depending on the specific case the HTTP request may be 156 bytes long for example and the identification portion may be 24 bytes long. Overall the packet may therefore be 200 bytes long. Depending on the configuration selected the small packet in other embodiments may have different portion lengths and a different overall length. The main requirement is that the packet is a small packet particularly when compared to communication packets with the main server and contains minimal information typically just enough to identify the device that is calling.

The identification portion may be a public token that is generated based on an ESN for the device and stored at the RCS . The RCS stores the key to validate the token and translate it into an ESN.

For example the data portion i.e. HTTP request and identification portion in small packet may be as follows 

Referring to an example of a regular packet sent from a device to the main server or vice versa is shown. The regular packet has a header portion which may for example include an Internet Protocol header a TCP header and various checksums. Depending on the protocols used for the transmission the header portion may be 20 bytes long. Following the header portion there is a data portion that may contain detailed identification of components in the device location of the device files stored on the device statuses of the device details of software installed on the device etc. as well as the ESN of the device. Depending on the specific case the data portion of the packet may be up to about 1500 bytes long for example. The main point is that the packets may be and generally are large particularly when compared to communication packets to the RCS and may contain extensive information and commands.

Referring to a functional flow diagram is shown schematically representing the process that may be undertaken by the system to set up the rapid calling facility for a device for cases where the device is not already set up for making the rapid calls to the RCS but is set up for making calls to the main server . The action item of setting up the device for rapid contact is flagged beforehand in database in the main server . In step a regular call to the main server is made by the device . In step the device receives a command from the main server to start calling the RCS whose URL is also provided to the device as well as any necessary upgrade code for the agent . The rapid calling rate may also be provided to the device in the form of a time interval that should elapse between consecutive rapid calls. The agent in the device then in step enables the device to make rapid calls to the RCS . For example this may be implemented by setting a bit flag in the agent to indicate that it should make the rapid calls. In step the device makes a rapid call to the RCS . In step the RCS determines whether a rapid contact session should be opened with the device . If a rapid contact session should not be opened for example if there is no immediate need for a regular call to be made then in step the agent in the device determines whether it is time for a scheduled regular call to the main server . If it is not time for such a scheduled regular call then the process reverts to step in which a subsequent rapid call is made to the RCS after the set time interval for rapid calling has passed. If it is time for a scheduled regular call then a regular call is made in step to the main server. Returning to step if a rapid contact session is to be opened with the RCS then in step the RCS requests that the device open a session. If during the rapid contact session in step an immediate regular call is not to be made then the process reverts to step in which the agent determines whether a scheduled regular call is to be made anyway. However if in step during the rapid contact session the device is to call the main server then the process moves to step in which the device makes an immediate call to the main server.

Conversely an owner or administrator of the device may inform the main server that the rapid contact feature is to be disabled. This information would then be transferred from the main server to the RCS which during the following rapid call from the device would then request the setting up of a rapid contact session in which a command would be sent to the device to stop calling the RCS.

When a device is reported stolen upon its calling the main server it is commanded to call into the main server more frequently perhaps every 15 minutes or at some other suitable interval. Since the device will be calling into the main server more often it will not need to call the RCS and so the agent may be instructed to stop calling the RCS.

Referring to a flowchart is shown of a process that occurs at the RCS on receiving a rapid call. In step the RCS receives a rapid call and then in step determines based upon the ESN received in the rapid call whether there are any updates for the device with the corresponding ESN. An update may be a new RCS to call a new main server to call a new call time or interval etc. If there be no update required then in step the RCS ignores the rapid call and does not respond and the process ends at step . If however there is an update for the device then in step the RCS requests that the device open a session during which in step the RCS sends the update s to the device. After the update has been sent the process ends at step . This whole process is repeated with each subsequent rapid call.

The agent may communicate with the RCS in two modes the first is an authenticated mode when the agent has or has access to a public RCS authentication token which has been created by the RCS and sent back to device and the second is a unauthenticated mode either for when the agent does not have such a token or for when changes are being made. If the agent has or has access to a token it can be stored in a registry to be persistently restored during reboots. In the authenticated mode data may be sent unencrypted since the token will already be an encrypted representation of the agent s identity and hence device identity which will be known only to the RCS .

If the agent does not have nor has access to a token then the agent sends a packet that has no data and receives in response from the RCS an open session command. The same response will be given if the RCS cannot authenticate the token or the token has been authenticated but there are some changes required and the agent s behavior and or policy should be updated by changing data in the agent s settings. After receiving the open session command the agent and the RCS establish an encryption key and initialization vector and use them to secure the communication. During the encrypted session the device s ESN can be retrieved from the database by the RCS and checked for pending actions and if there are any then the necessary changes can be made as required e.g. to the URL of the main server to call the next regular call time the URL of the RCS to call the default callback time to the RCS etc. A secure token can also be issued. These changes may be changes from null or default values if this encrypted session is for the initial setting up of the agent to call the RCS . When a new token has been issued the agent stores it in registry to use in subsequent rapid calls.

To generate the token the RCS obtains the device s ESN as a message and an RCS specific authentication tag e.g. computer name data from the registry a working folder name etc. and encrypts the ESN using an RCS encryption key generated by the RCS based on a specific schedule such as once per month and stored in the RCS registry. The token i.e. encrypted ESN is then sent to the device as data to be sent back to the RCS in subsequent rapid calls. When the RCS receives the data in a subsequent rapid call it decrypts it using the authentication tag to reveal the ESN of the device . Whenever the authentication tag of the RCS is changed it will be expected that rapid calls from all devices will result in the establishment of rapid contact sessions until all the tokens have been renewed.

Referring to a flowchart of the rapid contact system is shown for the process of setting up a token for the first time or for changing an existing token. In step the agent checks whether it is time to make a call to either the RCS or the main server . If it not be time to make a call as determined in step the process reverts to step to check at a later time whether it is time to make a call to either of the servers.

If in step it is time to make a call the agent determines in step whether it be a rapid call that should be made. If it not be a rapid call then a regular call is made to the main server in step . If in step a rapid call should be made then the agent determines in step whether it has access to a token . If the agent does not have access to a token it sends an empty packet i.e. with no data no ESN or a null ESN to the RCS in step . If however the agent has access to a token then it sends a packet containing the token to the RCS in step . After the token has been sent the agent determines whether the communication is ended in step . The end of the communication may be signified by the RCS to the agent by sending it an acknowledgment response a disconnect command or no response. If in step it not be the end of the communication then the agent determines in step whether it has received an open session command from the RCS . If it has not received an open session command the agent disconnects from the RCS in step . If in step the agent receives an open session command from the RCS it opens a session in step . The agent may also arrive at step after step in which it sends an empty packet to the RCS. In step the agent determines whether a valid encryption DLL is present in the device and if so keys are exchanged between the agent and the RCS in step . If the key exchange is not successful as determined in step the agent disconnects from the RCS in step . If the key exchange be successful as determined in step then the agent sends a packet to the RCS in step . The packet sent includes if available the device s ESN the URL of the main server it calls the next call time to the main server the URL of the RCS and the interval to call the RCS. In response the RCS sends updated data optional and a new token to the device . If in step the agent has received new data it updates the device settings in step . After this or if there was no new data received by the agent in step the agent stores the new authentication token in the device in step . Following this the agent disconnects in step .

Note that normally the encryption DLL and public RSA keys will be present in the device during a rapid contact session with the RCS . If either of these is not present or the encryption DLL cannot be loaded then the agent may be configured to automatically call the main server immediately. Alternately it may act as usual and call the main server as scheduled.

Referring to a sequence diagram is shown for enabling rapid calling on a device that is already enabled for regular calling to the main server e.g. guardian server . As a result of a regular agent call from the agent to the main server the rapid calling FC or fast calling feature is set up during a communication session that is established between the device and the main server. Following the set up of the rapid calling feature the agent then makes a rapid call to the RCS . The RCS responds with an acknowledgment as there is nothing to do. A short while later the agent makes a further rapid call and again receives an acknowledgment as there is still nothing to be done.

Referring to a sequence diagram is shown for system operations when there are no pending actions for the device. The agent POSTs an HTTP request to the RCS. The RCS responds with an acknowledgment as there is nothing to do. A short while later the agent makes a further rapid call and again receives an acknowledgment as there is still nothing to be done.

Referring to a sequence diagram is shown showing the events that occur when a regular call is made by an agent that is also configured for rapid calling. The agent POSTs an HTTP request to the RCS. The RCS responds with an acknowledgment as there is nothing to do. A short while later the agent makes a further rapid call and again receives an acknowledgment as there is still nothing to be done. Next at the scheduled regular call time it becomes time for a regular call to the main server involving the setting up of a session and exchange of data associated with the regular call. After the regular call the agent reverts to making rapid calls to the RCS.

Referring to a sequence diagram is shown showing how the rapid calling setting may be updated during a call to the RCS. First the agent sends an HTTP packet to the RCS. The RCS responds with a request to open a session. The agent then sends its current settings to the RCS following which the RCS sends updated settings back to the agent. The session then terminates. Assuming that the RCS did not send a setting to switch off the rapid calling the agent calls the RCS again after the usual timeout interval has passed.

Referring to a sequence diagram is shown showing how an agent call to the main server can be forced. This is achieved using only five packets for example. First the agent sends an HTTP packet to the RCS then the RCS sends a request to the agent to open a session. The agent then sends its settings to the RCS which then sends back updated settings if any and then sends back a command for the agent to call the main server immediately. After the rapid contact session with the RCS is disconnected the agent immediately calls the main server out of its normal schedule and establishes a session with it. When the session with the main server has terminated the agent after the rapid call interval has lapsed then calls the RCS as usual.

Referring to a sequence diagram is shown showing the performance of security actions. As described above a rapid call is made to the RCS during which a command is sent to the agent to initiate an immediate call to the main server. This is because a flag has been set at the RCS for the particular agent to force a call to the main server. During the session with the main server the agent receives an instruction to start deleting data from the device. The session with the main server ends and the device continues with the data delete operation. The time interval between rapid calls elapses after the data delete operation has finished. Since there is another high priority action to be taken by the agent then during the subsequent rapid call to the RCS a command to call the main server is once again transmitted from the RCS to the agent. In this example a command to freeze the device is sent during the call to the main server. Even though the device is frozen it still retains the capability of calling the RCS which it does so after the inter call interval has elapsed. This time as there are no outstanding actions for the agent and the flag at the RCS has been reset then a session with the main server is not requested.

Referring to a further embodiment of the rapid contact system is shown. It shows multiple devices connected via a router to multiple RCSs FC servers . The main server is shown as CTSrv. A customer center server CC is shown which implements a web application that allows customers to view rapid contact related information and to enable and disable the rapid calling feature. It may show which devices have rapid contact enabled and which do not. It can show the time of the last rapid call from each device and can highlight the ones that have called in recently as these are more likely to be online. The CC may be used to force a regular call to the main server. The CC may show which devices have outstanding parameter update or force agent call actions against them and a history of the actions that have already been completed. If the user requests an End User Message Device Freeze or Data Delete on a device with rapid contact enabled then the CC will notify the consolidation service see below that the device should make a regular agent call the next time it calls in.

The EMS is an ESN Management Server which is also implemented as a web service with some functions similar to those of the CC . This will allow users to set rapid contact related parameters on one or a group of computers at the same time. The computers may be on a common order or in a common account. It may be used to request a forced call to the main server. The EMS may show which devices have rapid contact enabled and which do not. It can show the time of the last rapid call from each device and can highlight the ones that have called in recently which are more likely to be online. The EMS may show which devices have outstanding parameter update or force agent call actions against them and a history of any actions that have already been performed on them.

The RCS obtains information from the consolidation service about whether a particular agent needs to make a regular call to the main server. When a device calls in the RCS sends the device this information and then notifies the consolidation service about the call and any changes that were made.

The consolidation service notifies the RCS about any new requests to update an agent s parameters. When an RCS notifies the consolidation service about a completed agent parameter change the consolidation service writes information about the change to the external database . The consolidation service also provides information to both CC and EMS such as status information about the RCSs that are connected to it and the last time a particular device called in to an RCS. For small rapid contact systems the consolidation service may be implemented merely as an interface and or API but for larger systems it is better implemented as a standalone server.

The rapid contact database stores a list of parameter updates for the devices that need to be updated on their next call. When the RCSs start up they query the rapid contact database directly to seed their local cache . The CC and EMS query the database directly to get information about which actions have been completed. The database also maintains a volatile history of when each device last called in to it so that the EMS and CC can show which devices are likely to be currently on line.

Referring to a sequence diagram is shown for device configuration. The EMS is used to set the rapid contact parameters for the device and sends the required parameters to the CTData database . It also sends the parameters to the consolidation service .

In a sequence diagram is shown for device parameter update. The agent makes a regular call to the main server during which the usual messages are exchanged. Also during the call the main server retrieves the rapid contact parameters for the device from the CTData database. The rapid contact parameters are set on the device and after these are set notification of the completed action is sent by the main server to the consolidation service via the EMS . Following this there may be more standard messages exchanged between the device and the main server.

In a sequence diagram is shown for start up of the RCS. To start with the RCS gets any pending actions from the rapid contact database . It then writes any pending actions to the local action table cache and registers with the consolidation service .

In a sequence diagram is shown for the polling for new parameter updates or for forced calls. After expiry of a timer the consolidation service gets new actions from the action table in the database after which it notifies the RCS of new actions.

In a sequence diagram is shown for a rapid agent call to the RCS in the absence of pending parameter updates or forced call instructions. First the agent makes a rapid call to the RCS. The RCS sends the last call time for the device to the consolidation service which then sends the last call time to the last call table in the in memory database . The RCS then looks in the local database cache for any actions that may be pending for the device . As there are none the RCS simply sends an acknowledgement back to the device.

In a sequence diagram is shown for a rapid call to the RCS when there is a pending parameter update or forced call. First the agent calls the RCS which sends the last call time to the consolidation server which in turn sends the last call time to the last call table in the database. The RCS gets any pending actions for the device which in this case are new parameters to be set. The new parameters are sent to the agent and then the action having been completed is deleted from the list of actions awaiting the device. The action having been completed is then set as completed at the consolidation server which then sets the action as completed in the action table and makes an entry in the action table history.

The rapid contact system may include multiple RCSs connected to the network via a load balancer as shown in . If the maximum capacity of the consolidation server is reached then one or more further consolidation servers can be added each being responsible for a given set of RCSs and each having a corresponding database configured to store data and actions for the devices that are configured to call them. For each additional consolidation server or group of consolidation servers there may be another load balancer added with its own public IP address for the corresponding devices to call. A high performance distributed data store such as Apache Cassandra Microsoft Velocity or Microsoft Server AppFabric may be used so that all consolidation servers can work against essentially the same data.

The rapid contact system can reduce the time taken for an administrator or owner of a device to invoke a security measure on a remote device such as data delete device freeze etc. Furthermore the availability of a communication channel between a protected device and a monitoring server is intermittently but frequently maintained without incurring the costs and using the resources and bandwidth that would be required to maintain a continuous connection.

Different call intervals to the RCS may be used. For example if an RCS can handle 100 000 calls per minute then a system wide call interval of 30 minutes will allow 3 million devices to be managed. Alternately if the call interval is set to 5 minutes then 500 000 devices can be managed.

When requested to read fields or flags the agent may be configured to just read the relevant ones rather than a set of fields or flags some of which may not be required.

Devices may be configured to make rapid calls at different time intervals depending on whether they are connected to their home network or not. As devices are generally considered to be safer on their home network then a longer rapid calling interval such as one hour may be acceptable. When the device leaves the office or the home then it is considered to be less safe and the rapid calling interval may be reduced to 5 minutes for example. This feature may be implemented either within the agent or within the RCS.

In some embodiments the basic principles behind the disclosed architecture can be practiced without the use of a Rapid Contact Server in a technical sense. Thus for example in some embodiments the monitoring center may include a first server and a second server that each communicate with the electronic devices using different respective protocols such that the second server which may but need not be a Rapid Contact Server is better suited for handing relatively short frequent communications with the electronic devices. The second server may instruct an electronic device using the second protocol to contact the first server when for example the electronic device is reported as stolen the electronic device may then contact the first server using the first protocol and retrieve one or more security instructions as described above.

Where feasible functions of the rapid contact system described as being performed by one server may be divided between separate servers and functions described as being performed on multiple servers may be combined on the same server. Intermediate servers may also be employed in the system. Databases may also be arranged in a different architecture to that shown herein.

The device may call in to one or both of the servers on a random or semi random basis or on a gradually varying time period.

If the rapid contact system is configured for sending acknowledgments to devices when a rapid call is received when no action is to be taken then the agent may be configured to call the main server immediately after making a predetermined number of consecutive rapid calls that are not acknowledged.

The rapid contact system may be configured such that the agent only makes the calls to the main server if commanded to do so by the RCS. If there are no outstanding actions for the device then it will not need to call the main server.

Rapid calls to the RCS are different to heartbeats because the absence of a rapid call does not necessarily signify a problem in the same way that absence of a heartbeat would and no information as to the status of the device is conveyed in the rapid call as is often done with a heartbeat. The rapid calls are also different to pings because a response from the RCS is not necessary whereas a ping requires a response. A rapid call is more of a poke which signifies making contact at a distance without necessarily requiring a response.

The agent may be configured to contact the RCS at different rates depending on whether the connection is likely to be metered or not. For example if it is made over mobile broadband or not.

Steps in the flowcharts may be performed in a different order to that illustrated or they may be combined where shown separately. Steps may be omitted and others added and steps from different flowcharts may be interchanged all without departing from the scope of the invention. Tasks described herein as being performed by the agent may be performed by the associated device under the control of the agent such as through execution of program code of the agent.

Different quantities relative quantities sizes time intervals packet lengths numbers of packets serial number formats and other straightforward changes are also contemplated.

The present description is of the best presently contemplated mode of carrying out the subject matter disclosed and claimed herein. The description is made for the purpose of illustrating the general principles of the subject matter and not be taken in a limiting sense the subject matter can find utility in a variety of implementations without departing from the scope of the disclosure made as will be apparent to those of skill in the art from an understanding of the principles that underlie the subject matter.

