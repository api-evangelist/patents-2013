---

title: Creating global aggregated namespaces for storage management
abstract: Embodiments are directed to creating global, aggregated namespaces for storage management and to providing consistent namespaces in a distributed storage system. In one scenario, a computer system defines data storage objects for each data storage node. The data storage objects uniquely identify storage elements of the data storage nodes, where each data storage object includes various associated attributes. The computer system replicates the defined data storage objects and any associated attributes from a first data storage node to a second, different data storage node among the data storage nodes. As such, the defined data storage objects are visible from any node in the data storage nodes. The computer system also aggregates the defined data storage objects for each of the data storage nodes and creates a global, aggregated namespace that includes the aggregated data storage objects for each of the data storage nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330161&OS=09330161&RS=09330161
owner: Microsoft Technology Licensing, LLC
number: 09330161
owner_city: Redmond
owner_country: US
publication_date: 20130412
---
Computers have become highly integrated in the workforce in the home in mobile devices and many other places. Computers can process massive amounts of information quickly and efficiently. Software applications designed to run on computer systems allow users to perform a wide variety of functions including business applications schoolwork entertainment and more. Software applications are often designed to perform specific tasks such as word processor applications for drafting documents or email programs for sending receiving and organizing email.

Software applications may also be designed to monitor and manage data storage systems. For example applications may be designed to query nodes in a computer cluster to determine how much and what kind of data storage is currently available in the cluster. These determinations however may be complicated by different entities owning different parts of the cluster or may show different results depending on where the query is initiated.

Embodiments described herein are directed to creating global aggregated namespaces for storage management and to providing consistent namespaces in a distributed storage system. In one embodiment a computer system defines data storage objects for each data storage node. The data storage objects uniquely identify storage elements of the data storage nodes where each data storage object includes various associated attributes. The computer system replicates the defined data storage objects and any associated attributes from a first data storage node to a second different data storage node among the data storage nodes. As such the defined data storage objects are visible from any node in the data storage nodes. The computer system also aggregates the defined data storage objects for each of the data storage nodes and creates a global aggregated namespace that includes the aggregated data storage objects for each of the data storage nodes.

In another embodiment a computer system receives an input from a user requesting information regarding data storage objects in a distributed data storage system. The computer system then determines that the user input was received from a computing node that is internal to the data storage system and aggregates node specific data storage objects of the computing node. The computer system further aggregates global data storage objects of the distributed data storage system and creates a global unified namespace for the distributed data storage system. The global unified namespace includes the aggregated node specific data storage objects and the aggregated global data storage objects.

In yet another embodiment a computer system receives an input from a user requesting information regarding data storage objects in a distributed data storage system. The computer system determines that the user input was received from a computing node that is external to the data storage system aggregates global objects of the distributed data storage system and creates a global unified namespace for the distributed data storage system which includes the aggregated global objects.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Additional features and advantages will be set forth in the description which follows and in part will be apparent to one of ordinary skill in the art from the description or may be learned by the practice of the teachings herein. Features and advantages of embodiments described herein may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. Features of the embodiments described herein will become more fully apparent from the following description and appended claims.

Embodiments described herein are directed to creating global aggregated namespaces for storage management and to providing consistent namespaces in a distributed storage system. In one embodiment a computer system defines data storage objects for each data storage node. The data storage objects uniquely identify storage elements of the data storage nodes where each data storage object includes various associated attributes. The computer system replicates the defined data storage objects and any associated attributes from a first data storage node to a second different data storage node among the data storage nodes. As such the defined data storage objects are visible from any node in the data storage nodes. The computer system also aggregates the defined data storage objects for each of the data storage nodes and creates a global aggregated namespace that includes the aggregated data storage objects for each of the data storage nodes.

In another embodiment a computer system receives an input from a user requesting information regarding data storage objects in a distributed data storage system. The computer system then determines that the user input was received from a computing node that is internal to the data storage system and aggregates node specific data storage objects of the computing node. The computer system further aggregates global data storage objects of the distributed data storage system and creates a global unified namespace for the distributed data storage system. The global unified namespace includes the aggregated node specific data storage objects and the aggregated global data storage objects. In some cases it should be noted the computer system may receive an input that is internal to the distributed data storage system where the global unified namespace includes the aggregated global data storage objects as well as node specific data storage objects that are specific to the node at which the input is received. As such this node specific view is not aggregated across all the nodes but is scoped only to the node specific objects made available on that node.

In yet another embodiment a computer system receives an input from a user requesting information regarding data storage objects in a distributed data storage system. The computer system determines that the user input was received from a computing node that is external to the data storage system aggregates global objects of the distributed data storage system and creates a global unified namespace for the distributed data storage system which includes the aggregated global objects.

The following discussion now refers to a number of methods and method acts that may be performed. It should be noted that although the method acts may be discussed in a certain order or illustrated in a flow chart as occurring in a particular order no particular ordering is necessarily required unless specifically stated or required because an act is dependent on another act being completed prior to the act being performed.

Embodiments described herein may comprise or utilize a special purpose or general purpose computer including computer hardware such as for example one or more processors and system memory as discussed in greater detail below. Embodiments described herein also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions in the form of data are computer storage media. Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments described herein can comprise at least two distinctly different kinds of computer readable media computer storage media and transmission media.

Computer storage media includes RAM ROM EEPROM CD ROM solid state drives SSDs that are based on RAM Flash memory phase change memory PCM or other types of memory or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions data or data structures and which can be accessed by a general purpose or special purpose computer.

A network is defined as one or more data links and or data switches that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmission media can include a network which can be used to carry data or desired program code means in the form of computer executable instructions or in the form of data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to computer storage media or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a network interface card or NIC and then eventually transferred to computer system RAM and or to less volatile computer storage media at a computer system. Thus it should be understood that computer storage media can be included in computer system components that also or even primarily utilize transmission media.

Computer executable or computer interpretable instructions comprise for example instructions which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that various embodiments may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs tablets pagers routers switches and the like. Embodiments described herein may also be practiced in distributed system environments where local and remote computer systems that are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network each perform tasks e.g. cloud computing cloud services and the like . In a distributed system environment program modules may be located in both local and remote memory storage devices.

In this description and the following claims cloud computing is defined as a model for enabling on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services . The definition of cloud computing is not limited to any of the other numerous advantages that can be obtained from such a model when properly deployed.

For instance cloud computing is currently employed in the marketplace so as to offer ubiquitous and convenient on demand access to the shared pool of configurable computing resources. Furthermore the shared pool of configurable computing resources can be rapidly provisioned via virtualization and released with low management effort or service provider interaction and then scaled accordingly.

A cloud computing model can be composed of various characteristics such as on demand self service broad network access resource pooling rapid elasticity measured service and so forth. A cloud computing model may also come in the form of various service models such as for example Software as a Service SaaS Platform as a Service PaaS and Infrastructure as a Service IaaS . The cloud computing model may also be deployed using different deployment models such as private cloud community cloud public cloud hybrid cloud and so forth. In this description and in the claims a cloud computing environment is an environment in which cloud computing is employed.

Additionally or alternatively the functionally described herein can be performed at least in part by one or more hardware logic components. For example and without limitation illustrative types of hardware logic components that can be used include Field programmable Gate Arrays FPGAs Program specific Integrated Circuits ASICs Program specific Standard Products ASSPs System on a chip systems SOCs Complex Programmable Logic Devices CPLDs and other types of programmable hardware.

Still further system architectures described herein can include a plurality of independent components that each contribute to the functionality of the system as a whole. This modularity allows for increased flexibility when approaching issues of platform scalability and to this end provides a variety of advantages. System complexity and growth can be managed more easily through the use of smaller scale parts with limited functional scope. Platform fault tolerance is enhanced through the use of these loosely coupled modules. Individual components can be grown incrementally as business needs dictate. Modular development also translates to decreased time to market for new functionality. New functionality can be added or subtracted without impacting the core system.

The data storage objects defined by module may be replicated by replicating module . These replicated data storage objects may be sent to other data storage nodes within the distributed data storage system . As such at least in some embodiments each data storage node e.g. A B etc. will have an indication of the defined data storage objects e.g. A B along with corresponding attributes A B respectively that are in the distributed data storage system . Thus each data storage node has an accurate view of the other data storage nodes and data storage objects within the distributed data storage system . Moreover any queries received from user or from another user will be answered with a consistent reply regardless of whether the query is received at a node within the data storage nodes i.e. within a cluster of nodes as shown in or at a node that is external to the cluster of data storage nodes as shown in .

The accurate and consistent view of data storage nodes across the cluster is provided at least in part by the global aggregated namespace . The storage object aggregating module may aggregate the storage objects of each of the data storage nodes and the global namespace generating module may generate a global aggregated namespace that includes each of the aggregated data storage objects. Because the global aggregated namespace includes and or is aware of each of the aggregated data storage objects in each of the data storage nodes in the distributed data storage system the global aggregated namespace can provide a consistent view of the data storage objects across the system regardless of whether queries are received from within the system or external to the system. These concepts will be explained further below with regard to methods and of respectively.

In view of the systems and architectures described above methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . For purposes of simplicity of explanation the methodologies are shown and described as a series of blocks. However it should be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Method includes an act of defining one or more data storage objects for each of a plurality of data storage nodes the objects uniquely identifying one or more storage elements of the data storage nodes each data storage object including one or more associated attributes act . For example data object defining module may defines data storage objects for each of data storage nodes . The data storage objects uniquely identify storage elements of the data storage nodes such as hardware elements including hard drives. The data storage objects also include attributes . These attributes may indicate for example whether the data storage is local or distributed. For instance the storage objects may include hard disks and the hard disks may be part of a data storage array. Such a data storage array may comprise or be part of the distributed data storage system .

Method further includes an act of replicating the defined data storage objects and any associated attributes from a first data storage node to a second different data storage node among the plurality of data storage nodes such that the defined data storage objects are visible from any node in the plurality of data storage nodes act . The replicating module of computer system may replicate the data storage objects defined by module . The replicating module will replicate any corresponding storage elements and or attributes along with the data storage objects. In one example the data storage objects are replicated from computer system which at least in some embodiments is part of the data storage nodes of distributed data storage system to nodes A and B. These replicated data objects include information about the data storage objects and nodes that are within the distributed data storage system and as such can ensure that each data storage object is visible from each data storage node in the system.

The storage object aggregating module of computer system then aggregates the defined data storage objects for each of the plurality of data storage nodes act . The aggregation combines the data storage objects of the distributed data storage system and as such is aware of each data storage object in the system. The global namespace generating module can then create a global aggregated namespace that includes the aggregated data storage objects for each of the plurality of data storage nodes act .

The global aggregated namespace allows operations to be performed vis a vie the data storage objects. For example management actions such as status queries or requests to enumerate clustered or clusterable storage may be performed using the global aggregated namespace. The global aggregated namespace can provide a consistent and aggregated view of the clustered clusterable storage elements in a clustered storage environment. This consistent view will be shown whether viewed from a node in the cluster or from a node not part of the cluster. The global aggregated namespace further provides for a local view that details node specific storage resources.

In some embodiments two general types of subsystems may be provided clustered subsystems and standalone subsystems. In a clustered environment a provider may create a cluster wide subsystem. This subsystem would enable any operation to be executed on any cluster node and produce a consistent aggregated view of the clustered and or clusterable storage elements in the cluster subsystem. A standalone subsystem would expose the local non clusterable and non shared storage resources of each specific node. If the user is connected to the clustered subsystem the aggregated view of the storage elements will be presented. This will be consistent from any node in the cluster or from a management node outside of the cluster. To see local storage elements the user may connect to the local subsystem.

The global aggregated namespace allows management actions to be performed on the data storage objects and or data storage nodes of the distributed data storage system . The management actions may include determining on which data storage nodes the management action is to be performed. Any function calls that correspond to the management actions are routed to the determined data storage node using the global aggregated namespace . Thus for example if user were to perform a management action the global namespace would be used to determine ownership of the appropriate data storage object and the function call would be routed to the owner of that object. As mentioned above the management actions may include data queries enumeration queries storage device operations such as partitioning or other actions.

In cases where function calls are to be sent to a specified data storage node e.g. node A the computer system may determine that delivery for at least one of the function calls has failed for whatever reason . The computer system may then reroute the failed function call to at least one other data storage node or data storage object among the nodes and objects of the distributed data storage system .

In yet another embodiment performing a management action may include monitoring the aggregated data storage objects using the global aggregated namespace . The aggregated data storage objects may be monitored from any data storage node or from a remote computer system that is external to the data storage nodes e.g. as shown in . In one example a data storage object e.g. a hard disk mounted on node A may fire an event when it reaches a threshold of used space. This event may be routed to node B or computer system into which a management tool is remotely connected. The management tool may thus provide the ability to monitor the data storage object i.e. the disk from any node in the distributed data storage system . This management tool may also be used to diagnose any problems detected during the monitoring.

It should also be noted that the global aggregated namespace maintains the aggregated data storage objects despite physical data storage device failures. While physical machines in the distributed data storage system may fail and or change the global data storage objects stay alive in the global aggregated namespace. The global namespace is thus resilient and robust against failures such that users see a coherent global namespace for the aggregated data storage objects .

In order to facilitate management actions using the global namespace a user interface UI may be provided that allows users to enter intent based commands. The intent based commands may be entered using the UI and may be carried out using the global aggregated namespace. The user can thus describe their intent i.e. what they want to happen e.g. I need 50 TB of space in 3 fault domains and the management tool will determine which data storage nodes should be used to provide the 50 TB of space. Many other intent based commands can be used and the above example is merely one instance of the potential intent based commands.

Method includes an act of receiving an input from a user requesting one or more portions of information regarding data storage objects in a distributed data storage system act . For example as shown in user may send input requesting information regarding data storage objects e.g. hard drives in distributed data storage system . The computer system determines that the user input was received from a computing node that is internal to the data storage system act . Thus as shown in a user using one of the data storage nodes enters the data request at that node. The storage object aggregating module aggregates node specific data storage objects of the computing node act . These node specific data storage objects are local to the data storage node and in some cases may be known only to that node. The storage object aggregating module may further aggregate global data storage objects of the distributed data storage system act . Then using both the node specific and the global data storage objects the global namespace generating module may generate a global unified namespace for the distributed data storage system . The global unified namespace includes both the aggregated node specific data storage objects and the aggregated global data storage objects act .

In some cases as mentioned above the computer system may receive an input that is internal to the distributed data storage system e.g. received at one of nodes of . In such cases the global unified namespace includes the aggregated global data storage objects e.g. A C as well as node specific data storage objects that are specific to the node at which the input is received. As such this node specific view is not aggregated across all the nodes but is scoped only to the node specific objects made available on that node i.e. the node at which the internal input was received .

The global unified namespace for the distributed data storage system is thus consistent for each node of the distributed data storage system regardless of which internal computing node the user input was received from. In some cases a single application programming interface API may be used to manage local resources on the internal computing node as well as global resources on the distributed data storage system. The data storage objects may be automatically generated and aggregated into the global unified namespace for data storage devices that are later added to the distributed data storage system.

Method includes an act of receiving an input from a user requesting one or more portions of information regarding data storage objects in a distributed data storage system act . For example as shown in user may provide input at computer system . The computer system is not a part of data storage nodes . As such the computer system communicates with the data storage nodes using communications link . The request received from the user may thus be forwarded to one or more of the data storage nodes in the distributed data storage system . The receiving node s may determine that the user input was received from a computing node that is external to the data storage system act e.g. computing node . The receiving node s may then aggregate one or more global objects of the distributed data storage system act and create a global unified namespace for the distributed data storage system where the unified namespace includes the aggregated global objects act . For example

As with the example shown in in the user is presented with a globally consistent view regardless of where the request was received from. Still further the global unified namespace for the distributed data storage system is consistent for each node of the distributed data storage system regardless of which external computing node the user input was received from. The user may be presented with both a node specific view for the computing node from which the user input was received and an aggregated global view of the data storage objects in the distributed data storage system . In this manner a user may be able to perform queries within or outside of the data storage cluster and may receive consistent views of data storage objects stored on those nodes.

Accordingly methods systems and computer program products are provided which create global aggregated namespaces for storage management. Moreover methods systems and computer program products are provided which provide consistent namespaces in a distributed storage system both from inside and outside the cluster of data storage nodes.

The concepts and features described herein may be embodied in other specific forms without departing from their spirit or descriptive characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the disclosure is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

