---

title: Single sign-on for remote desktops
abstract: A mechanism is provided for automatically logging into a cloud based system that does not accept token log-on credentials generated by a single sign-on service. In an embodiment, a one-time password is automatically generated and persisted. The generated password is used to log in automatically to a cloud based system that does not accept tokens generated by the web-ID providers and for connecting to other services. Examples of such systems may include Windows, Linux, and iOS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856917&OS=08856917&RS=08856917
owner: Microsoft Corporation
number: 08856917
owner_city: Redmond
owner_country: US
publication_date: 20130430
---
This application is a continuation of U.S. patent application Ser. No. 13 233 871 filed Sep. 15 2011 now U.S. Pat. No. 8 438 635 the entire contents of which are incorporated herein by reference.

Remote access systems enable users to remotely access resources hosted on remote systems. Servers on the remote computing systems can execute programs and transmit signals indicative of a user interface to clients that can connect by sending signals over a network conforming to a communication protocol such as the TCP IP protocol. Each connecting client may be provided a session i.e. an execution environment that includes a set of resources. Each client can transmit signals indicative of user input to the server and the server can apply the user input to the appropriate session.

When a client makes a remote access connection to a server the authentication credentials used to authenticate the user may not be shared between subsequent processes. Thus a user may need to repeatedly enter authorization information in order to access additional resources.

Disclosed are methods and systems for automatically logging into a cloud based system that does not accept token log on credentials generated by a single sign on service. In an embodiment a one time password is automatically generated and persisted. The generated password may be used to log in automatically to a cloud based system that does not accept tokens generated by the web ID providers and for connecting to other services. Examples of such systems may include Windows Linux and iOS.

Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the disclosure. Certain well known details often associated with computing and software technology are not set forth in the following disclosure to avoid unnecessarily obscuring the various embodiments of the disclosure. Further those of ordinary skill in the relevant art will understand that they can practice other embodiments of the disclosure without one or more of the details described below. Finally while various methods are described with reference to steps and sequences in the following disclosure the description as such is for providing a clear implementation of embodiments of the disclosure and the steps and sequences of steps should not be taken as required to practice this disclosure.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the disclosure or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the disclosure. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the disclosure e.g. through the use of an application programming interface API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

A remote desktop system is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network e.g. using protocols based on the International Telecommunications Union ITU T.120 family of protocols such as Remote Desktop Protocol RDP to an application on a terminal server. The application processes the input as if the input were entered at the terminal server. The application generates output in response to the received input and the output is transferred over the network to the client

Embodiments may execute on one or more computers. and the following discussion are intended to provide a brief general description of a suitable computing environment in which the disclosure may be implemented. One skilled in the art can appreciate that computer systems can have some or all of the components described with respect to computer of .

The term circuitry used throughout the disclosure can include hardware components such as hardware interrupt controllers hard drives network adaptors graphics processors hardware based video audio codecs and the firmware software used to operate such hardware. The term circuitry can also include microprocessors configured to perform function s by firmware or by switches set in a certain way or one or more logical processors e.g. one or more cores of a multi core general processing unit. The logical processor s in this example can be configured by software instructions embodying logic operable to perform function s that are loaded from memory e.g. RAM ROM firmware and or virtual memory. In example embodiments where circuitry includes a combination of hardware and software an implementer may write source code embodying logic that is subsequently compiled into machine readable code that can be executed by a logical processor. Since one skilled in the art can appreciate that the state of the art has evolved to a point where there is little difference between hardware software or a combination of hardware software the selection of hardware versus software to effectuate functions is merely a design choice. Thus since one of skill in the art can appreciate that a software process can be transformed into an equivalent hardware structure and a hardware structure can itself be transformed into an equivalent software process the selection of a hardware implementation versus a software implementation is trivial and left to an implementer.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The system of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another computer a server a router a network PC a peer device or other common network node a virtual machine and typically can include many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in can include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer can be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer can typically include a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external can be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are examples and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the disclosure are particularly well suited for computer systems nothing in this document is intended to limit the disclosure to such embodiments.

Referring now to depicted is a high level block diagram of a computer system configured to effectuate virtual machines. As shown in the figures computer system can include elements described in and components operable to effectuate virtual machines. One such component is a hypervisor that may also be referred to in the art as a virtual machine monitor. The hypervisor in the depicted embodiment can be configured to control and arbitrate access to the hardware of computer system . Broadly stated the hypervisor can generate execution environments called partitions such as child partition through child partition N where N is an integer greater than or equal to 1 . In embodiments a child partition can be considered the basic unit of isolation supported by the hypervisor that is each child partition can be mapped to a set of hardware resources e.g. memory devices logical processor cycles etc. that is under control of the hypervisor and or the parent partition and hypervisor can isolate one partition from accessing another partition s resources. In embodiments the hypervisor can be a stand alone software product a part of an operating system embedded within firmware of the motherboard specialized integrated circuits or a combination thereof.

In the above example computer system includes a parent partition that can also be thought of as domain 0 in the open source community. Parent partition can be configured to provide resources to guest operating systems executing in child partitions N by using virtualization service. Each child partition can include one or more virtual processors such as virtual processors through that guest operating systems through can manage and schedule threads to execute thereon. Generally the virtual processors through are executable instructions and associated state information that provide a representation of a physical processor with a specific architecture. For example one virtual machine may have a virtual processor having characteristics of an Intel x86 processor whereas another virtual processor may have the characteristics of a PowerPC processor. The virtual processors in this example can be mapped to logical processors of the computer system such that the instructions that effectuate the virtual processors will be backed by logical processors. Thus in these example embodiments multiple virtual processors can be simultaneously executing while for example another logical processor is executing hypervisor instructions. Generally speaking and as illustrated by the figures the combination of virtual processors and memory in a partition can be considered a virtual machine such as virtual machine or .

Generally guest operating systems through can include any operating system such as for example operating systems from Microsoft Apple the open source community etc. The guest operating systems can include user kernel modes of operation and can have kernels that can include schedulers memory managers etc. A kernel mode can include an execution mode in a logical processor that grants access to at least privileged processor instructions. Each guest operating system through can have associated file systems that can have applications stored thereon such as terminal servers e commerce servers email servers etc. and the guest operating systems themselves. The guest operating systems can schedule threads to execute on the virtual processors and instances of such applications can be effectuated.

The computing resources provided by the data centers may be enabled by one or more individual data centers. The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that implements the concepts and technologies disclosed herein for scalably deploying a virtualized computing infrastructure will be described below with regard to .

The customers and other consumers of the data centers may access the computing resources provided by the data centers over a network . It should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to remote consumers may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

The user computer may be a computer utilized by a customer or other consumer of the data centers . For instance the user computer may be a server computer a desktop or laptop personal computer a thin client a tablet computer a wireless telephone a personal digital assistant PDA an e reader a game console a set top box or any other computing device capable of accessing the data centers .

The user computer may be utilized to configure aspects of the computing resources provided by the data centers . In this regard the data centers may provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on the customer computing system . Alternatively a stand alone application program executing on the customer computing system might access an application programming interface API exposed by the data centers for performing the configuration operations. Other mechanisms for configuring the operation of the data centers including deploying updates to an application might also be utilized.

In one embodiment the processes may be virtual machine instances. A virtual machine instance may be an instance of a software implementation of a machine i.e. a computer that executes programs much like a physical machine executes programs. In the example of virtual machine instances each of the servers may be configured to execute an instance manager capable of executing the instances. The instance manager might be a hypervisor or another type of program configured to enable the execution of multiple processes on a single server for example.

It should be appreciated that although some of the embodiments disclosed herein are discussed in the context of virtual machine instances other types of instances can be utilized with the concepts and technologies disclosed herein. For example the technologies disclosed herein might be utilized with instances of storage resources processing resources data communications resources and with other types of resources. The embodiments disclosed herein might also be utilized with computing systems that do not utilize virtual machine instances i.e. that use a combination of physical machines and virtual machines.

In the example data center shown in a LAN is utilized to interconnect the server computers . The LAN may also connected to the WAN illustrated in . It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between data centers between each of the server computers in each data center and between instances purchased by each customer of the data centers. These network topologies and devices should be apparent to those skilled in the art.

Cloud computing generally refers to a computing environment for enabling on demand network access to a shared pool of computing resources e.g. applications servers and storage such as those described above. Such a computing environment may be rapidly provisioned and released with minimal management effort or service provider interaction. Cloud computing services typically do not require end user knowledge of the physical location and configuration of the system that delivers the services. The services may be consumption based and delivered via the Internet. Many cloud computing services involve virtualized resources such as those described above and may take the form of web based tools or applications that users can access and use through a web browser as if they were programs installed locally on their own computers.

Cloud computing services are typically built on some type of platform. For some applications such as those running inside an organization s data center this platform may include an operating system and a data storage service configured to store data. Applications running in the cloud may utilize a similar foundation.

In one embodiment and as further described in a cloud service can implement an architecture comprising a stack of four layers as follows 

In one embodiment of a cloud computing platform a stamp may be implemented and used to define a unit of isolation and may be configured to define a traditional remote desktop deployment. A remote desktop controller component can be provided that maintains customer artifacts and credentials manages loads across stamps and provisions and resizes stamps. A remote desktop controller can also create and manage applications and desktops. Whereas a particular end point provides the virtual equivalent of a user s desktop the stamp or multiple stamps provides the virtual equivalent of an companies computing infrastructure.

The layers described above may involve a number of components. Such components may include the following which are further described below.

Referring to depicting a compute component an application may be implemented as one or more roles as described above. The cloud service may run multiple instances of each role using load balancing to spread requests across the roles.

A portal may be provided to allow a developer to submit an application to the cloud service. The portal may be configured to receive configuration information that informs the cloud platform of how many instances of each role to run. The fabric controller component may create a virtual machine VM for each instance and run the code for the appropriate role in that VM. Requests from the application s users can be made using protocols such as HTTP HTTPS and TCP. The requests can be load balanced across all instances of a role.

Referring to depicting a storage component the cloud platform may provide data storage using a number of data structures and formats. For example data storage can be provided as an unstructured blob of binary data . Metadata can be used to provide information as to content. In order to allow applications to work with data in a more structured fashion cloud storage services may provide storage as groups of entities that are associated with properties. Applications may also be provided a means to query data such as for example an API that includes search parameters. Additionally cloud storage can provide a way for web role instances to communicate asynchronously with worker role instances. For example a user might submit a request to perform some compute intensive task via a web interface implemented by a web role. The web role instance that receives this request can write a message into a queue describing the work to be done. A worker role instance that is waiting on this queue can then read the message and carry out the specified task. Results can be returned via another queue.

The cloud storage service may replicate data in order to provide fault tolerance. Furthermore data can be backed up copy in another data center in a different physical location for redundancy and enhanced availability.

Referring to a fabric controller component may be a distributed application replicated across a group of machines. The fabric controller component can be configured to own all of the resources in its environment such as computers switches and load balancers. The fabric controller component can also monitor running applications determine where new applications should run and select physical servers to optimize hardware utilization. The fabric controller component can also be configured to start monitor and terminate virtual machines.

In an embodiment and referring to the cloud service can store copies of data at sites closer to the clients that use the data. For example the first time a particular piece of data is accessed by a user the content delivery network component can store a copy of that data i.e. cache at a location that is geographically close to that user. The next time the data is accessed the contents can be delivered from the cache rather than from the more remote original.

In an embodiment and referring to in order to support the applications and data used within an organization on premises environments may be connected with the cloud service. In an embodiment this type of combination can be effectuated by providing IP level connectivity between a cloud application and machines running outside of the cloud. An endpoint agent can be installed on each on premises computer that connects to a cloud application. The cloud application may also be configured to work with the cloud connect component . The agent can use protocols such as IPsec to interact with a particular role in that application. By using such an agent the potential complexity of configuring protocols such as IPsec can be transparent to the user while providing a much simpler connection than methods such as virtual private networks VPNs . Once the connection is established roles in a cloud application can appear to be on the same IP network as the on premises machine.

By establishing such connections a cloud application can access an on premises database directly. A cloud application can also be domain joined to the on premises environment allowing a single sign on to the cloud application by on premises users and the use of existing active directory accounts and groups for access control.

In various embodiments a remote desktop computing experience can be provided in which a desktop provider can provide an elastic pool of desktops from which an administrator can easily provision and manage numerous user desktops much in the same manner as provisioning and managing a single user desktop. The remote desktop user can thus be provided with a desktop experience that is always available free of administrative procedures and billed based on consumption. For application providers such a service can enable the application providers with minimal effort to provide traditional desktop applications to users in the form of web applications.

As businesses move to adopt remote or virtual desktops as a means to centralize the administration of secure and compliant employee desktops it would be advantageous for IT administrators to be able to provide a homogenous desktop environment in order to control and minimize costs. Thus a platform that can provide a plurality of remote or virtual desktops can provide scalable and homogenous computing environments at low cost. By architecting a hosted desktop solution on a cloud platform in a manner similar to that of a homogenous computing model IT administrators can be provided an environment that can significantly lower cost as compared to traditional Desktop as a Service alternatives.

A cloud computing platform can be configured to operate with and provide benefits to multiple users and providers. For example for an application provider that provides applications to an enterprise desktop provider or a desktop reseller a cloud computing platform may be configured to provision and sell traditional desktop applications in a scalable cloud model. The application provider may be enabled to create an application provider account with payout account information upload application packages test uploaded applications on a selected operation system publish the application on an application marketplace on the cloud monitor application usage and set user charges per user.

For an enterprise desktop provider who creates and or manages desktops a cloud platform may be configured to provision desktops which may include bundles of applications to groups of users with similar requirements. For example a group of users may all be employees of the same enterprise customer. The desktop provider may be enabled to be able to create an enterprise desktop provider account and provide credit information e.g. by way of a credit card or other credit facility. The desktop provider may further be enabled to a create desktops by selecting for example an OS version and compatible applications from the cloud marketplace upload additional applications as needed and choose a delivery mode i.e. a full desktop experience or remote application delivery. The desktop provider may also be enabled to provide credentials to enable access from desktops to the customers on premise active directory add users to enable access to desktops set policies to control user access to applications on the desktop set up a URL for a web page for desktop users and access connection activity and disable enable access for users.

A desktop reseller may be an entity who creates and or manages desktops for sale as a service to users. A desktop reseller may be enabled to perform capabilities similar to an enterprise desktop provider such as creating a desktop reseller account creating signup and connection scenarios for remote users creating one or more desktops by selecting an OS version and compatible applications from the cloud marketplace and uploading additional applications and choosing a delivery mode. A desktop reseller may also be enabled to set policies to manage user access to applications on the desktop and provide OS and application updates either automatically or manually. A desktop reseller may also be enabled to view connection activity and disable enable access monitor desktop usage and receive payments from users.

A user may be an identifiable entity who accesses a desktop provisioned by an enterprise desktop provider or a desktop reseller. The user may via the cloud platform access desktops from any location browse to a URL for desktop service and sign in and access the provisioned services. In some embodiments the user may be provided a list of desktop environments that the user can log into.

Referring to illustrated is an example block diagram depicting a process for providing remote desktop services in a cloud computing framework. A user may access via a browser a web page that provides an entry point to the remote desktop services accessible to the user and configured in accordance with the user s IT departments requirements. The user may log onto the system using credentials provided to the user. The credentials may be a persistent ID such as a Windows Live ID or OpenID. A user will then be redirected to an authentication server which may require entry of a username and password over a secured connection. Once authenticated the user may be issued a password that is persisted for that user the password being provided to other services so that additional authorization is not required. In an embodiment the password may be persisted for that user even if the desktop session ends unless the user explicitly logs off from the session.

A mechanism may be provided for automatically logging into a cloud based system in which a single user authentication and authorization process permits a user to access the resources in the cloud based system where the user has access permission without the need to enter multiple passwords. Providing single sign on allows users to log in once and access multiple applications without the need to enter more passwords. Single sign on is desirable for enterprises by increasing security and efficiency by reducing the number of passwords that must be maintained. For cloud service providers single sign on provide a better user experience by allowing users greater access without additional authentication effort.

A cloud based service may not accept token log on credentials generated by a single sign on service. For example a web ID provider or single sign on service may prompt a user for sign on credentials and the service may generate a ticket or tokens that can be used for connecting to other services. Examples of such systems may include Windows Linux and iOS. It is desirable to give users in an on premises enterprise domain for example single sign on access to applications running in the cloud service.

In an embodiment when a user logs into a cloud based desktop and provides authentication credentials a one time password may be automatically generated and persisted. The generated one time password may be used to log in automatically to additional processes in the cloud based system. In one embodiment the generated one time password can be persisted until the user explicitly logs off Thus even when the desktop session is unexpectedly terminated the password can be persisted.

In another embodiment a user may have an account with a service that provides integrated on line services such as Windows Live or Yahoo. Such a service may provide a set of services and software products such as email and multimedia services that are accessible using a single user ID and password. In an embodiment a user of such an integrated service may also be provided an option to access cloud based computing services as described above. Thus when a user has opted for cloud based computing services as part of such an integrated service once the user has logged on to the service the user may be presented an option to accessed the cloud based computing service and request a remote desktop session. Because the cloud based service e.g. the remote desktop may not accept the credentials from the integrated service the cloud based service may generate an account with a one time password that allows the user to access the desktop session. The details of the one time password need not be provided to the user since the password only exists for the duration of the session or until the user logs off. In an embodiment the one time password may be persisted so that the user may return to the desktop if the desktop is inadvertently disconnected without having to restart the logon process.

In an embodiment illustrated in client may enter a URL for his company s cloud based service home page . Alternatively the user may enter a URL for an integrated online service. The user may be directed to an online authentication service which prompts the user for authentication credentials. The online authentication service may be a service used by the administrator for the user and the user s credential information may be provided by the administrator to the cloud service authorizing the service to create a user profile and allowing the user to launch and access desktops. Alternatively the online authentication service may be provided by the integrated online service. Once the user is authenticated the user is directed to a homepage the user can access the cloud service with the credentials provided by the online authentication service. The cloud service generates a one time password and or a temporary user account and the user s one time password is sent to an endpoint . As described above the endpoint can be a user desktop session.

The one time password may be generated based on the credentials received by the online authentication service. In an embodiment the password can be stored in a local credentials store in the virtual machine hosting the user session. Thus the password is not persisted with the user in the user s profile thus allowing for enhanced security and avoiding the need for the cloud service to maintain permanent passwords for each user.

The user can be presented with a number of desktops e.g. an engineering desktop a finance desktop etc. that can be selected and logged into. For example each desktop can be tailored to a specific functionality. The user may be presented with the specific desktops based on predefined authorization. Once the users selects a desktop a new desktop instance may be instantiated for that user. If a previous desktop instance is selected the session associated with the previous desktop instance may be resumed. The session for this user and session for other users can be launched as endpoints within a virtual machine that hosts a number of such sessions. A saved profile may be associated with each endpoint that is created or resumed that includes the user s preference and state information from a previous session and other information needed to maintain the user s state so the user s session can be persisted paused and resumed. Generally a desktop may consist of an operating system applications and settings. A desktop instance generally refers to a desktop plus a specific user profile. In some cases a desktop instance and a desktop session may be used interchangeably.

In an embodiment multiple sessions can be launched for additional users. Referring to the example embodiment illustrated in multiple sessions corresponding to multiple endpoints may be instantiated as additional users log into the system. Furthermore the users may comprise multiple user types as defined by the administrator for the group of users. For example as shown in the figure multiples users of both Type and Type may log into the system and begin sessions. For example Type may be a finance type desktop and Type may be an engineering type desktop. Of course other examples are also possible. A virtual machine may be configured to host a number of sessions of one or more types. In one embodiment the numbers of sessions may be independent of the underlying virtual machine configuration that is hosting the various user sessions. As additional user sessions are instantiated on the virtual machine additional virtual machines may be launched. In one embodiment a set number of remote desktop sessions can be configured to execute on a virtual machine. As more remote desktop sessions are needed another virtual machine can be launched. An elastic pool of virtual machines may be provided so that sessions can be dynamically added at any time without the need for an end user or administrator to understand the underlying details for the structures providing the services.

Since the user may be assigned a virtual machine VM endpoint from a pool of available VM endpoints the next time that a user logs in the user may be connected to any one of the VM endpoints in the pool. In order to create a custom desktop experience for the user the user s preferences and state data may be saved. In one embodiment the user s preference and state data may be saved to a set of data that may be associated with the user so that any time that the user logs on and is assigned a desktop the user preference and state data may be obtained so that the user s previous desktop state can be resumed. So for example if the users is associated with a session i.e. end point on a first virtual machine and later is assigned to a different session on a different virtual machine the user s desktop state from the first virtual machine would generally not be available to the session on the second virtual machine. However according to an aspect of the disclosure the user s state is saved independently of the session and the particular VM endpoint. As described in the present disclosure such a set of user data may be referred to as a virtual profile. In various embodiments the virtual profile may be implemented and referred to as a virtual hard drive or virtual hard disk VHD . As such when the user is connected with a session on a different virtual machine the previous user s state can be migrated to the new session. This feature allows a single master desktop that is designed to serve a particular Type to have a custom feel for each particular user. The result is that a user of an otherwise generic session environment is perceived by the user as having a personal desktop look and feel.

As discussed above during the course of a user session a client may open and close remote access connections to the cloud service and during any given connection the client may change settings and preferences in the session. A mechanism is described herein for provisioning remote desktops in a cloud based infrastructure while maintaining user personalization. In cloud based systems a user may not always reconnect to the same virtual desktop. In one embodiment the virtual profile assigned to a user may be mounted to the endpoint assigned to the user. The virtual profile may include information such as the user s personal data and personalization information e.g. settings profiles files application data etc. .

When the user disconnects or logs off from the remote desktop the virtual profile is demounted from the endpoint and saved for subsequent user sessions. The virtual profile thus saves information regarding the user s state when the user is disconnected and provides the information as needed for launching the next user session.

Since a user may be assigned a VM endpoint from a pool of available VM endpoints the next time that a user logs in the user may be connected to any one of the VM endpoints in the pool. In order to create a custom desktop experience for the user the user s saved preference and state data may be used to provide the customized desktop experience regardless of the particular VM endpoint to which the user is connected.

While the terms virtual profile and VHD are used to describe a data structure for saving a user s preference and state information it should be understood that the present disclosure is not intended to be limited to any particular file or data format. In one embodiment a virtual profile or a VHD may be a virtual hard disk file format that is configured as data that is typically found on a physical data disk drive.

Initially a virtual profile or a VHD may be populated with data operable to configure a user s desktop in accordance with the standard desktop configuration as defined by for example a company IT administrator. Thus a virtual profile or a VHD may include data defining the gold image of the desktop i.e. the standard desktop configuration for a user role . Nevertheless as a user uses a particular remote desktop and begins to customize the desktop by for example changing the wallpaper adding music saving local documents etc. that information is stored to the virtual profile or a VHD and an each time thereafter that a user is connected to a standard remote desktop it is populated with the data from the virtual profile or a VHD to provide the look and feel of a custom user experience.

Any combination of user types i.e. desktop types may be defined within the boundaries of a single cloud service boundary. For example cloud service boundary may define a single service boundary as defined and configured for a set of services provided to a particular company and accessible using a predetermined URL which when entered via a browser may provide a web interface for logging on to the service and accessing the desktops configured for service.

In an embodiment when a user session is requested a connection to a connection broker may initially be requested. The connection broker may determine the stamp associated with the requested user session and select a virtual machine that is hosting user sessions within the identified stamp. For example if the request indicates that a user session is desired the connection broker may search a database that includes IP address port number combinations or network identifiers to find a suitable virtual machine being hosted on a cloud server. The connection broker can generate a redirection request that causes the user session to be associated with the identified virtual machine.

Referring to the embodiment described in an endpoint may be notified that a user has logged into the system. The system searches for a virtual profile and determines whether a virtual profile already exists for the user . If there is no virtual profile for the user then a virtual profile is created . If a virtual profile already exists for the user or if a virtual profile was created then the user virtual profile is moved to the endpoint . The user desktop session may be launched . When it is determined that the user has logged out then the virtual profile is dismounted from the endpoint and saved for subsequent use.

A mechanism is disclosed herein for automatically logging into a cloud based system in which a single user authentication and authorization process permits a user to access the resources in the cloud based system where the user has access permission without the need to enter multiple passwords. Providing single sign on allows users to log in once and access multiple applications without the need to enter more passwords. Single sign on is desirable for enterprises by increasing security and efficiency by reducing the number of passwords that must be maintained. For cloud service providers single sign on provide a better user experience by allowing users greater access without additional authentication effort.

A cloud based service may not accept token log on credentials generated by a single sign on service. For example a web ID provider or single sign on service may prompt a user for sign on credentials and the service may generate a ticket or tokens that can be used for connecting to other services. Examples of such systems may include Windows Linux and iOS. It is desirable to give users in an on premises enterprise domain for example single sign on access to applications running in the cloud service.

In an embodiment when a user logs into a cloud based desktop and provides authentication credentials a one time password may be automatically generated and persisted. The generated one time password may be used to log in automatically to additional processes in the cloud based system. In one embodiment the generated one time password can be persisted until the user explicitly logs off Thus even when the desktop session is unexpectedly terminated the password can be persisted.

In another embodiment a user may have an account with a service that provides integrated on line services such as Windows Live. Such a service may provide a set of services and software products such as email and multimedia services that are accessible using a single user ID and password. In an embodiment a user of such an integrated service may also be provided an option to access cloud based computing services as described above. Thus when a user has opted for cloud based computing services as part of such an integrated service once the user has logged on to the service the user may be presented an option to accessed the cloud based computing service and request a remote desktop session. Because the cloud based service may not accept the credentials from the integrated service the cloud based service may generate an account with a one time password that allows the user to access the desktop session. The details of the one time password need not be provided to the user since the password only exists for the duration of the session or until the user logs off. In an embodiment identities may be mapped based on the particular OS and applications associated with the user s desktop configuration. The one time password is a credential for accessing the OS and applications associated with the user.

In an embodiment the one time password may be persisted so that the user may return to the desktop if the desktop is inadvertently disconnected without having to restart the logon process. The one time password is a web based and temporary credential that allows the user to access the services and applications in the user s desktop configuration for the duration of the user s session e.g. until the user logs off . In an embodiment the one time password may be generated based in part of the user s information based on the integrated online services e.g. Windows Live password and associated information for the user.

In an embodiment illustrated in client may enter a URL for his company s cloud based service home page . Alternatively the user may enter a URL for an integrated online service. The user may be directed to an online authentication service which prompts the user for authentication credentials. The online authentication service may be a service used by the administrator for the user and the user s credential information may be provided by the administrator to the cloud service authorizing the service to create a user profile and allowing the user to launch and access desktops. Alternatively the online authentication service may be provided by the integrated online service. Once the user is authenticated the user is directed to a homepage the user can access the cloud service with the credentials provided by the online authentication service. The cloud service generates a one time password and or a temporary user account and the user s one time password is sent to an endpoint . As described above the endpoint can be a user desktop session.

The one time password may be generated based on the credentials received by the online authentication service. In an embodiment the password can be stored in a local credentials store in the virtual machine hosting the user session. Thus the password is not persisted with the user in the user s profile thus allowing for enhanced security and avoiding the need for the cloud service to maintain permanent passwords for each user.

Operation illustrates receiving a request for a remote desktop session from one of the plurality of users the remote desktop session conforming to one of the one or more remote desktop configurations. The user remote desktop configuration may include saved state information for an operating environment and software applications executing in the operating environment. The remote desktop configurations can each correspond to a user role. For example an administrator can use a user interface to define two desktop environments for a medium sized company. The administrator may define a first desktop environment for engineering staff and may select an operating system and version an email and calendar application a browser application office applications and a drawing application. The administrator may further specify that up to fifty such desktops may be used at one time. The administrator may also define a second desktop environment for finance staff and may select an operating system and version an email and calendar application a browser application office applications and a database application. The administrator may further specify that up to twenty five such desktops may be used at one time. The remote desktop configurations can be accessible via the Internet using a URL. For example after configuring the desktop environments the desktop environments may be accessible by the individual users by entering for example www.company.com tech and www.company.com finance.

Operation illustrates instantiating the requested remote desktop session and loading data and applications associated with the remote desktop session.

Operation illustrates persisting the one time password for the duration of the remote desktop session and allowing access to said applications until the one of the plurality of users indicates that the remote desktop session is to be terminated.

Any of the above mentioned aspects can be implemented in methods systems computer readable media or any type of manufacture. For example a computer readable medium can store thereon computer executable instructions for managing a virtualized computing infrastructure. Such media can comprise a first subset of instructions for instantiating one or more remote desktop configurations that makes available to a plurality of users via a remote network connection remote desktop configurations each comprising an operating environment and software applications to be included in the operating environment a second subset of instructions for receiving a request for a remote desktop session from one of the plurality of users the remote desktop session conforming to one of the one or more remote desktop configurations a third set of instructions for generating a one time password for the one of the plurality of users a fourth set of instructions for instantiating the requested remote desktop session and loading data and applications associated with the remote desktop session and a fifth set of instructions for persisting the one time password for the duration of the remote desktop session and allowing access to said applications until the one of the plurality of users indicates that the remote desktop session is to be terminated. It will be appreciated by those skilled in the art that additional sets of instructions can be used to capture the various other aspects disclosed herein and that the five presently disclosed subsets of instructions can vary in detail per the present disclosure.

