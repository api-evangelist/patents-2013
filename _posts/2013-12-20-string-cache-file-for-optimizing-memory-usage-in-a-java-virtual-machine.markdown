---

title: String cache file for optimizing memory usage in a Java virtual machine
abstract: A method, system and computer program product for optimizing memory usage associated with duplicate string objects in a Java virtual machine. The method comprises scanning a heap of the Java virtual machine at the end of the start-up process of the virtual machine to identify duplicate strings associated with the virtual machine, storing the identified strings in a string cache file, and determining whether a new string that needs to be created during start-up already exists in the string cache file. The duplicate strings are added to an interned strings table. A reference to a duplicate string is returned if a string to be created is already in the string cache file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09400667&OS=09400667&RS=09400667
owner: International Business Machines Corporation
number: 09400667
owner_city: Armonk
owner_country: US
publication_date: 20131220
---
The present application is a continuation of application Ser. No. 12 839 330 filed Jul. 19 2010 the disclosure of which is hereby incorporated by reference in its entirety.

The invention relates generally to computer software and more particularly to a string cache file for optimizing memory usage associated with duplicate strings in a Java virtual machine JVM .

A virtual machine is a set of computer programs and data structures that use a specified model for the execution of other computer programs and scripts. According to one such model a virtual machine accepts a form of computer intermediate language commonly referred to as bytecode. This language conceptually represents the instruction set of a stack oriented computer system.

A Java virtual machine JVM is a key component of a Java system and is available for many computer hardware and software platforms. The use of the same bytecode for all platforms allows a Java program to be compiled once and run in different computer environments. The Java virtual machine also enables features such as automated exception handling for providing debug information on software errors independent of the source code. A Java virtual machine implementation is often distributed along with a set of standard class libraries that implement a Java API Application Programming Interface . An Application Programming Interface is a component through which a computer system library or application use to exchange control information and data among them.

Programs intended to run on a Java virtual machine must be compiled into a standardized portable binary format which typically comes in the form of bytecode executable files. A program may consist of many classes in different files. For easier distribution of large programs multiple class files may be packaged together in a Java archive file called a jar file. At run time the Java virtual machine executes the bytecode executable files and jar files.

There exists a need for an efficient way of reducing the amount of memory used for duplicate strings in virtual machines at run time.

The invention relates to a string cache file in a virtual machine for reducing memory usage associated with duplicated strings. More particularly the invention provides an efficient method and system for optimizing memory usage in a virtual machine comprising scanning a memory heap of the virtual machine at the end of the start up mode to identify duplicate strings storing the identified strings in a string cache file and checking the string cache file when a new string is created to determine if the new string is already in the string cache file. The string cache file is a memory mapped file and persistently exists on disk storage. It is memory mapped into a virtual machine process and exists in system memory.

The details of the preferred embodiments of the invention both as to its structure and operation are described below in the Detailed Description section in reference to the accompanying drawings in which like reference numerals refer to like parts. The Summary is intended to identify key features of the claimed subject matter but it is not intended to be used to limit the scope of the claimed subject matter.

The invention relates generally to computer virtual machines. More particularly the invention concerns a method system and computer program product for reducing system memory used to accommodate duplicate string objects in a Java virtual machine during run time using a string cache file.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a method system or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a micro processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the micro processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures described below illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Referring now to a block diagram of a data processing system is illustrated in accordance with an exemplary embodiment of the present invention. Data processing system includes a processor unit a memory unit a persistent storage a communications unit an input output unit a display and system bus . Computer programs are typically stored in persistent storage until they are needed for execution at which time the programs are brought into memory unit so that they can be directly accessed by processor unit . Processor selects a part of memory to read and or write by using an address processor gives to memory along with a request to read and or write. Usually the reading and interpretation of an encoded instruction at an address causes processor to fetch a subsequent instruction either at a subsequent address or some other address.

The Java virtual machine supports a Java run time environment including architecture security features mobility across networks and platform independence. Java virtual machine is a virtual computer i.e. a computer that is abstractly defined and implemented. This flexibility allows different Java virtual machines to be designed for mainframe computers and PDAs. Java virtual machine allows a program to be executed on different platforms as opposed to only the one platform for which the code was compiled. Programs are compiled for the Java virtual machine before execution. In this manner applications for many types of data processing systems may be supported which may contain a variety of central processing units and operating system architectures.

To enable an application to execute on different types of data processing systems a compiler typically generates an architecture neutral file format that is executable on many processors with the presence of a run time system. The compiler generates bytecode instructions that are nonspecific to a particular computer architecture. Bytecode is machine independent code generated by the compiler and executed by a interpreter. An interpreter is part of the Java virtual machine that alternately decodes and interprets bytecode. Bytecode instructions are designed to be easy to interpret on any computer and easily translated on the fly into native machine code. Bytecode is translated into native code by a just in time JIT compiler.

For improved performance there have been attempts to reduce memory usage associated with string objects in recent Java virtual machine implementations. One approach is to store Java class files in a class cache file so that on start up the class cache is memory mapped into a process address space which can also be shared across multiple Java virtual machines. However the class cache stores the compiled bytecode classes and does not differentiate the strings from the classes. As a result this approach does not efficiently reduce the amount of memory space occupied by the duplicate strings as disclosed by the present invention.

Another method for minimizing system memory used for duplicate strings involves merging the individual character arrays that the strings point to for some sub set of the existing string objects and then providing a start index and length for the merged character array. Although this approach partially reduces the memory usage by the string objects the memory in the class files is still needed to hold the original character array.

Java implementations also provide a string method called Intern that searches an internal data structure to determine whether a string with a particular character array might already have been created. If such a string exists and is currently stored in the internal structure then the Java virtual machine simply returns a reference to that string object rather than creating another string object. The reuse of many such strings stored in the data structure could result in a significant memory saving. If a string with the same character array does not exist then the Java virtual machine creates a new string object and saves the string object in the internal data structure so the next search will look it up in the data structure.

The Intern method however does not provide an automatic process for determining which strings should be interned. In addition the string data structure is not portable across all Java virtual machine instances running in the same system to allow the Java virtual machine instances to reuse an existing string. The present provides these benefits in the described exemplary embodiments.

Java virtual machine further contains run time data areas execution engine and native method interface . Execution engine is a mechanism for executing instructions contained in the methods of classes loaded by class loader subsystem . Interpreter interprets the Java bytecodes at run time. Native method interface allows access to resources in the underlying operating system such as native method libraries. Run time data areas contain native method stack Java stack PC registers method area and Java heap . These different data areas represent the organization of memory needed by Java virtual machine to execute a program.

Java stack may or may not reside within Java heap depending on the implementation of the Java virtual machine at run time. If the Java stack is in the Java heap then it is represented as a single object for heap management purposes. Whether the Java stack is in the Java heap or not the Java stack contains meta information indicating frame boundaries for the call stack method function parameters and also serves as a location for temporary local variable and storage for intermediate results. Program counter PC registers indicate the next instruction to be executed. Native method stack stores the state of invocations of native methods. Method area contains class data while Java heap contains all instantiated objects. Each time a class instance or array is created the memory for the new object is allocated from Java heap . Java virtual machine includes an instruction that allocates memory space within the memory for Java heap but includes no instruction for freeing that space within the memory. Data areas further includes a string cache file as described in the exemplary embodiments of the invention and in particularly with reference to . The string cache file can be in system memory and shared across several instances of the Java virtual machine . In addition the string cache file may be shared across virtualized guest operating systems. Such a cache sharing is especially useful in virtualization technology.

In the Java programming language a string object includes more than one sub object. There is the string object itself which is fixed in size and the data portion of the string which is an array of characters of variable size. Although there are two objects associated with a string it is often referred to as a single string object for simplicity.

At block the Java virtual machine instance begins its start up process during which the Java virtual machine initializes parameters specific to the Java application. If a string cache file currently exists in the system the Java virtual machine adds string objects in the string cache file to an interned strings table at block . Another Java virtual machine instance running in the system might have previously created the string cache file. In that case other Java virtual machine instances do not need to create the string cache file again but use the existing string cache file to populate the interned strings table. The Java virtual machine further loads relevant Java class files into the Java virtual machine s memory at block . For each class file the Java virtual machine processes strings that need to be created during start up using the string cache file per block . Further details on the process for creating strings during start up are described below with reference to . At block the Java virtual machine continues with its normal start up process. Once the normal start up is completed the Java virtual machine creates a string cache file for duplicate strings if a string cache file did not exist at the beginning of start up at block . The first Java virtual machine instance running in the system typically creates the string cache file. Duplicate strings are the string objects that include a particular character array. They may be created by the current Java virtual machine instance or other virtual machine instances. The Java virtual machine next enters run time mode at block .

At block the Java virtual machine loads a relevant Java class file into the virtual machine s memory. During this stage of the start up process if the Java virtual machine needs to create a new string per block then the Java virtual machine determines whether a string cache file currently exists in the system at block . If a string cache file is available then the Java virtual machine determines at block whether the required string is already in the interned strings table. The current Java virtual machine or another Java instance might have interned the required string in the table. If the required string is in the interned strings table then a reference to the string in the interned strings table is returned at block . Otherwise the Java virtual machine creates a new string object per block . The Java virtual machine repeats this process for each class file loaded into memory as shown by block and the loop back to block . Once Java virtual machine completes the loading of the class files it continues on to finish the normal start up process at block . If Java virtual machine determines at block that there is currently no string cache file in the system then it creates a new string at block and adds the new string to the interned string table at block . The Java virtual machine determines whether all class files have been loaded into system memory at block and finishes the normal start up process at block if all relevant class files have been loaded. The exemplary process for reducing system memory associated with duplicate strings in a Java virtual machine continues in .

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and substitutions of the described components and operations can be made by those skilled in the art without departing from the spirit and scope of the present invention defined in the following claims the scope of which is to be accorded the broadest interpretation so as to encompass such modifications and equivalent structures. As will be appreciated by those skilled in the art the systems methods and procedures described herein can be embodied in a programmable computer computer executable software or digital circuitry. The software can be stored on computer readable media. For example computer readable media can include a floppy disk RAM ROM hard disk removable media flash memory a memory stick optical media magneto optical media CD ROM etc.

