---

title: Automated cloud IT services delivery solution model
abstract: A system, apparatus, method, and computer program product that provide a flexible and modular cloud IT service delivery solution model. The apparatus comprises a processor and computer-readable program code that defines a plurality of common capabilities that comprise operations. Those operations are configured to be invoked by a plurality of different processes on a plurality of different containers, and the plurality of common capabilities comprise a service delivery solution when invoked by a process from among the plurality of different processes. Further, the is processor configured to execute the computer-readable program code and to invoke the plurality of common capabilities with each of the plurality of different processes on the plurality of different containers. Accordingly, the apparatus may utilize different containers interchangeably in a plurality of different service delivery solutions and may expand and contract each of the plurality of different service delivery solutions by invoking greater or fewer processes on greater or fewer containers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09590872&OS=09590872&RS=09590872
owner: CA, Inc.
number: 09590872
owner_city: New York
owner_country: US
publication_date: 20130314
---
The present disclosure generally relates to automating cloud IT services delivery. The disclosed embodiments relate more specifically to a system apparatus method and computer program product that provide flexible and modular cloud IT service delivery solution model.

The information technology IT industry is migrating toward automated solutions that are fairly complex and that frequently utilize the point to point integration of multiple products and services e.g. provisioning engines functional products such as security external cloud services etc. to deliver a complete solution e.g. a private hybrid or public cloud that addresses a particular market or business need such as self service delivery of automated cloud IT services. Frequently and as a general practice in the industry such point to point integrations are accomplished with light weight run book automation RBA processes and connectors. Such point to point integrations are rapidly gaining acceptance in the industry as a whole. The integration of IT services via RBA type orchestration technologies however presents several challenges.

In purpose built multi product solutions for orchestrating and automating cloud IT services across a breadth of capabilities the integrity of the products and or services being delivered is dependent on the integrity of the underlying sets of processes content and integrations. Many of those services typically are mission critical and or chargeable services. And the integrity and supportability of the corresponding processes or process sets must be maintained managed and preserved in a production environment without compromising the flexibility of process based light weight integrations and automation so that those processes or process sets can be used in multiple environments.

Each customer environment is unique and may require different variations of processes to match a particular customer s business needs. For example the process or number of approvals required for the fulfillment of a service request for a first service provider may be different from that of a second service provider which may be different than the number of approvals required for an enterprise even though the basic cloud IT service offered by all three generally is the same. That challenge typically is solved by modifying the corresponding process from the process or process set that is delivering the cloud IT service or the multi product solution as required to suit a particular customer environment or need. That approach however is tedious involves manual intervention and is prone to errors.

Such errors may break the integrity of the process or process set which may require potential downtime and or a thorough re testing of all other processes in the process or process set to ensure the integrity of the cloud IT service or the multi product solution being delivered. Moreover the result of modifying the process or process set is to create one off implementations which are difficult to keep track of manage and sustain e.g. fault isolation updates diagnosis etc. . And in an industry that has proliferated a large number of cloud IT services and multi product solutions that each have a large number of different variations of process driven integrations that make those services and solutions possible keeping track of managing and sustaining those processes or process sets on an ongoing basis is even more challenging.

Among the specific challenges associated RBA type orchestration technologies is organizing content related to a cloud IT service into a distributable package. In the context of a cloud IT service delivery solution the content processes connectors etc. distributed in a particular package are essentially related to and representative of a service. Packaged content while relatively easy to distribute and configure loses its context once un packaged. Accordingly after content is installed it is indistinguishable from other processes or content that exists in the environment. In other words the distributed package is assimilated when it is installed and therefore is difficult to manage after that.

Another challenge associated with RBA type orchestration technologies is that packaged content is easily and necessarily modifiable in the field. Because changes to the content represent changes to the service managing such changes becomes a crucial and challenging requirement for maintaining the context of the cloud IT service. But even when packaged content correctly represents a cloud IT service it provides no context for the operations management or lifecycle of the cloud IT service it represents e.g. activation deactivation entitlements metering changes content updates etc. . And without the proper context the integrity of the cloud IT service being delivered and even the integrity of the entire solution will depend on the integrity and manageability of the underlying sets of processes and integrations that are packaged for distribution.

In addition the entitlement context of a cloud IT service must be maintained. Although packaged content may be access controlled it has no service context of entitlements. Moreover packaged content cannot address dependencies field updateability or changes related to the support of content packages. And a packaged content set does not maintain state while a cloud IT service must maintain state in the context of a particular solution e.g. is this service active in active . It is those features among others that make keeping track of managing and sustaining processes and process sets so challenging.

As a result of the foregoing adding new services or functionality to an existing cloud implementation often involves going back to the drawing board and creating new deployments new migration exercises and or new product customizations which may take months of planning and may add to build support and maintenance costs and concerns. Accordingly IT administrators may be required to re deploy existing cloud implementations or to use multiple cloud portals to handle their cloud service management needs. Such requirements compound the challenges associated with managing maintaining and updating cloud IT services.

The present disclosure is directed to system apparatus method and computer program product that provide a flexible and modular cloud IT service delivery solution model. The apparatus comprises a processor and computer readable program code that defines a plurality of common capabilities that comprise operations. Those operations are configured to be invoked by a plurality of different processes on a plurality of different containers and the plurality of common capabilities comprise a service delivery solution when invoked by a process from among the plurality of different processes. Further the processor is configured to execute the computer readable program code and to invoke the plurality of common capabilities with each of the plurality of different processes on the plurality of different containers. Accordingly the apparatus may utilize different containers interchangeably in a plurality of different service delivery solutions and may expand and contract each of the plurality of different service delivery solutions by invoking greater or fewer processes on greater or fewer containers.

Each of the plurality of different containers may comprise a container specification that specifies each resource upon which the process of that container depends to provide a service. And each container specification may comprise first operations configured to automatically deploy the container by invoking first workflows that install that container in the context of the service delivery solution second operations configured to provide the service of the container by invoking second workflows that operate on each resource upon which that container depends to provide that service and third operations configured to be invoked on resource connectors by the second workflows so that the second workflows may operate on each resource upon which the container depends to provide a service. Those resource connectors may be configured to translate a logical implementation of each resource to its corresponding physical implementation.

As will be appreciated by those of ordinary skill in the art aspects of the present disclosure may be illustrated and described herein in any of a number of patentable classes or context including any new and useful process machine manufacture or composition of matter or any new and useful improvement thereof. Accordingly aspects of the present disclosure may be implemented entirely as hardware entirely as software including firmware resident software micro code etc. or by combining software and hardware implementations that may all generally be referred to herein as a circuit module component or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable media having computer readable program code embodied thereon.

Any combination of one or more computer readable media may be utilized. The computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an appropriate optical fiber with a repeater a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Scala Smalltalk Eiffel JADE Emerald C C VB.NET Python or the like conventional procedural programming languages such as the C programming language Visual Basic Fortran 2003 Perl COBOL 2002 PHP ABAP dynamic programming languages such as Python Ruby and Groovy or other programming languages. The program code may be executed entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. The remote computer or server may be connected to the user s computer through any type of network including a local area network LAN a wide area network WAN or a cellular network. The connection also may be made to an external computer or server e.g. through the Internet using an Internet Service Provider in a cloud computing environment or offered as a service such as a Software as a Service SaaS .

Aspects of the present disclosure are described herein with reference to flowchart illustrations and or block diagrams of methods apparatuses systems and computer program products according to embodiments of the present disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. Those computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which are executed via the processor of the computer or other programmable instruction execution apparatus create a mechanism for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Those computer program instructions may also be stored in a computer readable medium that when executed can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions when stored in the computer readable medium produce an article of manufacture that includes instructions which when executed cause a computer to implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions also may be loaded onto a computer other programmable instruction execution apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatuses or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The system apparatus method and computer program product of the present disclosure provide an exponentially scalable solution model or framework that allows for the flexible combination of product capabilities to enable delivery of self service automated cloud IT services or service offerings as part of a cloud IT service CITS delivery solution implementation. A hybrid CITS delivery solution is a solution that enables the definition and metered consumption of cloud IT services or service offerings in a self service or user driven manner. The solution model provides a reference architecture for solution administrators and service providers to implement a flexible and modularly expandable and repeatable CITS delivery solution in a single pre integrated solution based on the aggregation and integration of a subset of necessary capabilities provided from multiple underlying products. Via such a pre integrated solution solution administrators and service providers may offer a variety of self service cloud IT services or service offerings to customers without the need to re deploy that solution to update modify or expand those services or service offerings.

Turning to the drawings illustrates a communications network according to a non limiting embodiment of the present disclosure. The communications network comprises a solution provider system that is in electronic data communication with two 2 service provider systems A and B via a network connection . It should be understood however that the communications network depicted in is illustrative only and may include any number of solution provider systems any number of service provider systems A and B and any number of other systems e.g. service consumer systems external resource provider systems etc. .

The solution provider system is maintained by a solution administrator that offers cloud IT management software and solutions to support different cloud IT service providers needs. The solution provider system comprises a plurality of solution servers a central container database a central payload database a central registry database and a solution administrator graphical user interface GUI . And each of the service provider systems A and B is maintained by a different cloud IT service provider and comprises a plurality of service servers a local container database a local payload database a local registry database and a service provider GUI . It should be understood however that the solution provider system and the service provider systems A and B depicted in are illustrative only and could include any number of each of those network devices as well as any number of other network devices e.g. routers load balancers etc. . Because the first service provider system A and the second service provider system B comprise the same types of network devices and operate in a similar manner any one of those systems A or B may be referred to generally herein as a service provider system the service provider system or some variation thereof e.g. that service provider system .

Each of the systems A and B within the communications network is configured to communicate with each other system via any suitable network connection that supports such communications such as a WAN connection. Further the network devices in the solution provider system and the network devices in each of the service provider systems A and B are configured to communicate with each other via any suitable wired or wireless connection that supports such communications such as a LAN connection a wireless LAN WLAN connection a WAN connection a cellular network connection e.g. a Global System for Mobile Communications GSM connection a Code Division Multiple Access CDMA connection a Long Term Evolution LTE connection etc. or a combination of two or more of those network connections. And any of the network devices in any one of those systems A or B may communicate with any of the other network devices in any of those systems A and B via any combination of those network connections.

The solution servers and the service servers each comprise a processor a memory and a network interface. The processor may include any number of suitable CPUs that are configured to execute computer program code embodied on the memory and to perform the various functions of those servers and described below. The memory may include one or more types of memory e.g. ROM RAM EEPROM etc. as required to store the computer program code executed by the processor and to support the execution of that code. And the network interface may include any number of suitable interfaces e.g. modems mobile browsers wireless Internet browsers etc. that are configured to support communications with and between the various network devices in the solution provider system and the service provider systems A and B as well as with and between the various systems in the communications network .

The solution servers also are configured to provide a central service that may be connected to instances of CITS delivery solutions such as multi product or sub product capability CITS delivery solutions implemented at the service provider systems A and B. That central network accessible service maintains a library of available CITS Containers that may be downloaded via the network connection to the local container database within a service provider system for instantiation and implementation in a hybrid cloud solution after the foundation for that solution has been deployed at that service provider system . The central service also maintains a library of payloads that may be required to support the services or service offerings of a particular CITS Container . Those payloads may be downloaded to the local payload database within a service provider system via the network connection and they may be utilized to automatically provision configure and deploy resources within the context of a particular multi product or sub product capability CITS delivery solution.

The service servers are configured to provide multi product or sub product capability CITS delivery solutions at the service provider systems A and B. The service servers also are configured to provide a base foundation or CITS Console that forms the basis of a cloud IT service delivery platform. As depicted in one or more CITS Containers may be plugged into the CITS Console like a cartridge to define the cloud IT service s or service offering s provided by the service servers . Similarly each CITS Container may be removed from the CITS Console and replaced with one or more other CITS Containers in a modular manner as required to expand contract or otherwise modify the cloud IT services and service offerings provided by a service provider system .

Each of the databases and within the communications network comprises memory that is configured to store data records files and other objects for access by a database management system DBMS . The central container database is configured to store the library of CITS Containers maintained by the solution servers the central payload database is configured to store the library of payloads maintained by the solution servers the central registry database is configured to store a global registry of supported CITS Containers identified by globally unique identifiers GUIDs processes or process sets identified by GUIDs and container affiliations that are maintained by the solution servers the local container database is configured to store a local library of the CITS Containers downloaded by the service servers the local payload database is configured to store a local library of the payloads downloaded by the service servers and the local registry database is configured to store a local registry of CITS Containers downloaded by the services servers identified by GUIDs processes or process sets for those downloaded CITS Containers identified by GUIDs and container affiliations for those downloaded CITS Containers . Accordingly the solution servers and service servers each may comprise a DBMS to manage those libraries and registries.

Each of the GUIs and within the communications network comprises a processor a memory an input device an output device and a network interface. The processor memory and network interface may be similar to those described above with respect to the solution servers and the service servers . And the input device may include any number of suitable devices that are configured to receive input from a user e.g. a keypad a microphone a camera a retinal scanner a print pad an electronic receiver a touch screen etc. while the output device may include any number of suitable devices that are configured to output data to a user in a meaningful manner e.g. a display a printer a speaker etc. . Accordingly each of the GUIs and may be any suitable network device with each of those components e.g. a personal computer a tablet computer a personal digital assistant PDA a smartphone etc. .

Turning to the service servers comprise a CITS Console one or more CITS Containers and a payload pool grid deployment to support the CITS delivery solution provided by a service provider system . The CITS Console is configured to provide all of the management and service delivery functions required to implement and operate the CITS Containers such that the common capabilities required to deliver cloud IT services or service offerings via CITS Containers are logically separated from the CITS Containers thereby allowing different CITS Containers to be added to removed from and managed with the CITS Console via a common framework. The CITS Containers are configured to define the actual cloud IT services or service offerings provided by the service provider system based on the different artifacts of implementation and contents of each CITS Container plugged into the CITS Console . And the payload pool grid deployment is configured to provide a dedicated and secure pool or grid of open slots in which each of the payloads that has been downloaded to the local payload database may be instantiated and invoked by one or more of the CITS Containers plugged into the CITS Console .

A single instance of a CITS Container may support a the same type service via a plurality of different selectable service offerings. Accordingly the CITS Container is configured to support each of those service offerings. For example a CITS Container may support a monitoring service. Accordingly that CITS Container may be configured to support a service offering that performs monitoring of a virtual infrastructure a service offering that performs monitoring of physical infrastructure and a service offering that performs monitoring of virtual and physical infrastructure. Each of those service offerings may be offered at different price points. Thus in a single CITS Container a service consumer may be provided with the option to select from three different service offerings with three different price points which that service consumer may do via a service request catalog provided by the CITS Console .

The CITS Console comprises an access portal a Container Management and Configuration CMC service an orchestration engine the service request catalog one or more console resource connectors an intermediary interconnect or service bus and an aggregated set of common capabilities . The access portal is configured to provide a self service user interface via which an authorized user e.g. the solution administrator or a service administrator at the cloud IT service provider may access request and or invoke the functionality of the console including the functionality of the CMC service . The CMC service is configured to provide the functionality via which such authorized users may set the entitlements accesses and other privileges of the access portal and may implement manage and or modify the CITS Containers that are plugged into the CITS Console .

The orchestration engine is configured to execute automation scripts configuration scripts and or orchestration workflows provided within CITS specifications of the one or more CITS Containers that are plugged into the CITS Console as required to access request and or invoke the cloud IT services or service offerings of those CITS Containers via the service request catalog . The service request catalog is configured to provide a set of user facing interfaces via which different cloud service consumers or tenants may access request and or invoke the cloud IT services or service offerings of the one or more CITS Containers that are plugged into the CITS Console in a self service manner. And the service bus is configured to provide a common integration point or bus via which the CITS Console may connect to the aggregated set of common capabilities and via which the CITS Containers may connect to instantiated payloads and or external resources .

Each of the console resource connectors comprises a logical or abstracted resource definition that provides logical operations for connecting to a common capability from among the aggregated set of common capabilities . And the aggregated set of common capabilities comprise those capabilities that are required to enable the functional execution of a cloud IT service or service offering supported by one or more CITS Containers . Those capabilities may be provided by one or more IT management products or applications that expose those capabilities via virtualized or neutral operations so that they may be utilized intelligently orchestrated or consumed by one or more CITS Containers . Those capabilities may be exposed by the service bus and access to those capabilities may be provided by the console resource connectors of the CITS Console as a corresponding logical operations abstraction for each of those capabilities . Thus each of those capabilities may be provided by integrating the corresponding product or application with or within the CITS Console via the service bus .

As illustrated in for example the aggregated set of common capabilities comprises user authentication capability single sign on SSO capability log management capability reporting database capability resource reservation capability and accounting capability. The user authentication capability is configured to provide identity management and authentication functionality e.g. creating users adding users deleting users authenticating users etc. via which all the user identities and authentication may be uniformly managed. The SSO capability is configured to allow a user to sign onto the CITS Console and access all of the various cloud IT services or service offerings of the CITS Containers plugged into that CITS Console including any payloads and or external resources required to support those services or service offerings via a single user ID password combination. The log management capability is configured to log information regarding the CITS Containers that are downloaded to the service provider system not just plugged into the CITS Console in the local registry database . The reporting database capability is configured to compile the data used by the CITS Containers that are plugged into the console for data analysis report generation and or other data services. The resource reservations capability is configured to create reservations for the resources utilized by the CITS Containers that are plugged into the console to deliver cloud IT services or service offerings. And the accounting capability is configured to provide cost modeling and accounting for the services and resources that are consumed by service consumers.

The foregoing examples of common capabilities generally may be utilized across all of the CITS Containers that are plugged into the Console because they may be utilized to support any type of cloud IT service or service offering. Nevertheless the aggregated set of common capabilities also may comprise additional capabilities that may be utilized to support only certain types of cloud IT services and service offerings. For example the aggregated set of common capabilities also may comprise a Service Level Agreement SLA management capability that is configured to monitor the performance of certain applications against defined sets of service level objectives that have been agreed to by the cloud service provider and the cloud service consumer.

Each of the one or more CITS Containers comprises a CITS specification one or more container resource connectors one or more processes or process sets and one or more user facing interfaces . The CITS specification comprises a declarative model or schema that is configured to provide all of the information required to identify and automatically implement a particular CITS Container including the various operations and or interfaces required to manage that particular CITS Container and the information required to download and instantiate any payload s and or external resources required to provide the services that are supported by that particular CITS Container . Each of the one or more container resource connectors comprises a logical or abstracted resource definition that provides logical operations for connecting a particular CITS Container to the physical implementations of the payloads and or external resources upon which the service of that particular CITS Container may depend such as a resource management capability or an external product or service. Each of the one or more process sets is configured to define one or more operation that may be invoked to provide the actual service s or service offering s that are supported by a particular CITS Container as well as any operations and or interfaces that may be invoked by the CMC Service to manage that particular CITS Container . And each of the one or more user facing interfaces is configured to provide an operation and or interface with functionality for service consumers to access request and or invoke the cloud IT services or service offerings supported by a particular CITS Container via the service request catalog .

The console resource connectors of the CITS Console and the container resource connectors of the CITS Container may provide similar functionality for connecting to resources except that the container resource connectors are configured to connect a particular CITS Container to resources that may vary between different CITS Containers e.g. payloads and or external resources while the console resource connectors are configured to connect the CITS Console to resources that may be common to all CITS Containers e.g. the aggregated set of common capabilities and or external resources . Further the access portal and the service request catalog of the CITS Console may provide similar functionality for users to access request and or invoke the functionality of the CITS Console and CITS Containers respectively except that the service request catalog provides interfaces for service consumers that may vary between different CITS Containers based on the different user facing interfaces provided in those CITS Containers while the access portal provides interfaces for service providers that may be common to all CITS Containers based on the common functionality of the CITS Containers and the aggregated set of common capabilities of the CITS Console . Providing such common functionality in the CITS Console allows certain functionality to be removed from otherwise different CITS Containers and allows unique functionality to be modularly added to and or removed from the CITS Console by adding CITS Containers to and or removing CITS Containers from the CITS Console .

A CITS Container is not functional until it is plugged into the CITS Console where it may utilize intelligently orchestrate or consume the aggregated set of common capabilities of the CITS Console . Flexibility and modularity is provided in the disclosed cloud IT service delivery solution model at least in part by aggregating such common capabilities in the CITS Console and logically separating them from the intelligence resources and discreet capabilities of the cloud IT services or service offerings supported by the CITS Containers . As a result CITS Containers and their respective cloud IT services and service offerings may be modularly added to and or removed from a service provider systems by adding them to and or removing them from its CITS Console . And as those CITS Containers are added to and or removed from the CITS Console they flexibly expand shrink consume and or operate the aggregated set of common capabilities provided in the CITS Console . As such the components of the CITS Console operate together to form the basis of a cloud IT service delivery platform while the CITS Containers flexibly and modularly plug into the CITS Console to define the actual cloud IT services and service offerings provided by that cloud IT service delivery platform based on the artifacts of implementation and contents of the CITS Container .

When plugged into the CITS Console a CITS Container may connect to certain products applications appliances or external services to support a particular cloud IT service service offering or other CITS Container . Such products applications appliances external services and other CITS Containers may reside or depend upon certain physical resources. For example a management or business application may reside on a physical or virtual infrastructure or it may exist as a virtual appliance of any type e.g. a hypervisor . The artifacts of implementation of each CITS Container are provided within each CITS Container and may comprise service interface templates service definition models or schema container operations and management interfaces automation scripts configuration scripts files orchestration workflows that implement such interfaces scripts and files console connectors logical resources represented by logical resource connectors and logical resource connectors for connecting logical resources to physical resources or underlying capabilities supporting operations for the logical resource connectors. A CITS Container also may comprise manifest descriptors that enable the corresponding CITS Container to deliver or extend its capabilities or services to include those provided by dependent management or business applications or virtual appliance instances that contain such management or business application as a self service cloud IT service or service offering.

Utilizing a service provider GUI a cloud IT service provider may access the CMC service via the access portal to implement manage and or modify the CITS Containers that are plugged into the CITS Console and to set the entitlements accesses and other privileges for each of the services supported by each of those CITS Containers . The services supported by each of those CITS Containers represent a cloud IT service instance and the CMC service is configured to operate in that cloud IT service instance in the context of a particular hybrid cloud IT service delivery solution instance deployed by a particular service provider. Accordingly each of the service provider systems A and B in the communications network may have its own CMC service for implementing managing and or modifying the CITS Containers in that service provider system A and B.

A cloud IT service provider may implement or plug in a CITS Container at the CITS Console of a service provider system via the CMC service by downloading the CITS Container from the solution provider system . That download initiates an autonomic process in which the CMC service automatically implements a CITS Container in a hybrid cloud IT service solution by downloading the CITS Container to the local container database from the central container database instantiating the CITS Container in the context of the solution reading and decomposing the CITS specification executing container automation scripts that automatically invoke a download from the central payload database to the local payload database of any payload s that may be required to implement that CITS Container and establishing a connection with the downloaded payload s by invoking payload configuration scripts in the CITS specification to automatically configure or pair each CITS Container with its corresponding payload s . In a similar manner the CMC service also may implement a CITS Container that already has been downloaded to the local container database utilizing payloads that already have been downloaded to the local payload database . In the absence of the CMC service such implementation may be performed manually.

Upon implementation in a CITS Console a CITS Container utilizes a declarative model to define the cloud IT services and or service offerings that it supports. That model also defines the user facing interfaces required to invoke and operate the cloud IT services and or service offerings of the CITS Container via the service request catalog and the user facing interfaces required to manage the CITS Container via the CMC service . Those user facing interfaces are implemented with automation such as orchestration workflows which provides flexibility for the implementation of those interfaces. Further those user facing interfaces are standardized for certain types of cloud IT services or service offerings so that when they are published to the service request catalog of the CITS Console they will appear the same to service consumers thereby supporting a common set of user or management interactions that provide uniformity within the CITS Console even when different CITS Containers are implemented. Nevertheless an extended set of custom interfaces also may be defined for a particular CITS Container by the creator or administrator of that particular CITS Container .

A CITS Container automatically publishes its set of user facing interfaces to the service request catalog of the CITS Console when it is implemented in the CITS Console such that the user facing interfaces are made available to service consumers through the service request catalog upon implementation of the CITS Container . Such user facing interfaces may be presented to service consumers for example as selectable options on a display at a service provider GUI and they may graphically represent the cloud IT services and or service offerings that are available for consumption via a particular CITS Container . When such user facing interfaces are selected invoked by a service consumer a set of orchestration workflows contained within the CITS specification of the CITS Container associated with that interface are invoked to enable that CITS Container for run time execution. Those workflows are consumed or executed within the orchestration engine of the CITS Console to initiate the cloud IT service or service offering that corresponds to the one selected invoked user facing interface .

The aggregated set of common capabilities provided at the CITS Console may be consumed by the orchestration workflows contained within the CITS specification of any CITS Container as part of the implementation of the cloud IT service or service offering that it supports. In addition a CITS Container also may depend upon and or perform operations defined for logical resources as part of the implementation of a cloud IT service or service offering. Accordingly a CITS Container may or may not comprise logical resources that are accessible via container resource connectors depending on the type of cloud IT service or service offering that it supports and whether that cloud IT service or service offering depends upon any type of resource or resources.

Logical resources represent physical resources e.g. products appliances physical machines etc. and or or functional capabilities e.g. services managed objects datacenter elements such as backup monitoring etc. and define the operations that may be performed on the physical resources and or functional capabilities that they represent. In the CITS Console logical resources are represented by console resource connectors . And in a CITS Container logical resources are represented by container resource connectors .

An example of a logical resource that may be represented by a console resource connector or a container resource connector is a virtual machine. The physical implementation of a virtual machine may be a virtual machine for vmware hypervisor a physical virtual machine for hyper v hypervisor or a physical virtual machine for elastic computing cloud EC services. A disk is also an example of a logical resource that may be represented by a console resource connector or a container resource connector and its physical implementation is a disk manager appliance.

Although the logical implementations of such resources generally are the same from one system to another the physical implementations of those resources may vary. As a result the same resource may require different translations from its logical implementation to its physical implementation depending on the system in which that resource resides. Accordingly a single CITS Container may comprise different container resource connectors that represent the same logical resource but that provide different translations so that the subject CITS Container may be utilized with a plurality of different systems resources and or CITS Consoles . By contrast the CITS Console may have a single console resource connector for each resource upon which it depends because unlike a CITS Container it does not need to be configured to be utilized with a plurality of different systems. Instead a CITS Console may be provided as a customized CITS delivery solution by sizing and configuring that CITS delivery solution to operate on a particular service provider system while CITS Containers may be utilized interchangeably between different CITS Consoles regardless of the service provider system on which they have been deployed.

The logical resources and functional capabilities represented by container resource connectors may be provided as payloads and or external resources . They also may be provided by the CITS Console . For example a container resource connector may represent the user authentication capability of the CITS Console wherein the container resource connector for that capability enables the orchestration workflows within CITS Container to authenticate users by performing the operations defined by that container resource connector .

For each resource that is represented by a container resource connector in a CITS Container and that is required to support a particular service or service offering the orchestration engine of the CITS Console may consume or execute the orchestration workflows within the CITS specification of that CITS Container to invoke the resource reservation capability of the CITS Console . That resource reservation capability which is part of the aggregated set of common capabilities of the CITS Console initiates a request for the resources that are represented by the subject container resource connectors .

The orchestration engine of the CITS Console also may consume or execute the orchestration workflows within the CITS specification of a particular CITS Container to perform operations on the container resource connectors provided within that CITS Container so that the container resource connectors may be implemented for specific resource providers via the service bus of the CITS Console . Thus the orchestration engine of the CITS Console not only may consume the aggregated set of common capabilities of the CITS Console utilizing the orchestrated workflows in the CITS specification of a CITS Container it also may connect the CITS Container to payloads and or external resources utilizing those orchestrated workflows to perform operations on the container resource connectors contained within that CITS Container .

Although a particular container resource connector within a CITS Container may utilize different translations or implementations for different resource providers based on the different resource provider systems in which the corresponding physical resource resides utilizing container resource connectors at the corresponding CITS Container and performing the operations of the subject resources at the logic layer enables the orchestrated implementations of those logical resources to independently of who the resource provider is or where the resource is located. And rather than being provided in the console resource connectors of the CITS Console the logical translation abstractions required by a particular CITS Container also may be provided in that CITS Container . In either instance as long as the translation abstraction is available the orchestrations of the CITS Container may operate at the logic layer independently of who the resource provider is or where the resource is located. Accordingly the implementation of cloud IT services and or service offerings via the disclosed embodiments not only is modular it also is portable and repeatable.

When the resources upon which a CITS Container depends may be implemented utilizing the components of the service provider system those resources may be downloaded and instantiated as payloads in the payload pool grid deployment . The payload pool grid deployment comprises a plurality of open slots where a payload may be configured for utilization by one or more CITS Containers . In for example three 3 payloads have been deployed for the CITS Container . And in for example five 5 payloads have been deployed for the CITS Container .

Although only one CITS Container is depicted in any number of additional CITS Containers also may be plugged into a CITS Console . And by virtue of pooling payloads in the payload pool grid deployment a single instance of any one 1 of those payloads may be utilized by a plurality of CITS Containers . Nevertheless separate instances of a payload also may be provisioned for utilization by separate CITS Containers if required.

To deploy and configure a payload the orchestration engine of the CITS Console utilizes the orchestration workflows of that CITS Container to perform operations that initiate the download instantiation and configuration of those payloads . For example automation scripts may be invoked that automatically download any payload s that may be required to implement that CITS Container from the central payload database to the local payload database and to instantiate those payload s in the payload pool grid deployment . Payload configuration scripts also may be invoked to automatically configure or pair each CITS Container with its corresponding payload s and or external resources . Such a connection is established autonomically by the CITS Console utilizing the container resource connectors of the corresponding CITS Container together with the automation scripts configuration scripts orchestration workflows and other information in the CITS specification of that CITS Container .

The CITS Console and or its associated payload s may depend on resources that are provided by a third party resource provider as external resources such as when sufficient resources are not available at the service provider system . Those resources may be physical resources or logical resources. For example a CITS Container may depend upon a physical resource provided by a third party resource provider to host a logical resource and a CITS Container may depend upon a logical resource provided by a third party resource provider. In the former instance the logical resource may be deployed and configured as software bundles in a similar manner as described above with respect to payloads . And in the latter instance container resource connector may be utilized to connect the CITS Console to the target resources without the need to invoke automation and configuration scripts to install that logical resource on that physical resource. In either instance the resource reservation capability of the CITS Console may be utilized to reserve the target resources and orchestration workflows may be invoked to issue physical commands to the corresponding third party resource providers that may be carried out to deploy and configure the target resources. In response to those commands the third party resource provider may return a completed or failed status based on whether those command results in the successful deployment and configuration of the target resources.

Regardless of whether a resource is provided as or implemented on the components of the service provider system or provided as or implemented on an external resource provided by a third party resource provider that resource may be connected to a CITS Container via the service bus utilizing a container resource connector . As an alternative to connecting a CITS Container to a resource indirectly via the service bus resources also may connect a CITS Container to those resources. And as yet another alternative a CITS Containers may connect to such resources via standard internet protocols. Accordingly the container resource connectors in each CITS Container may be configured to provide one or more of those types of connections for any payload and or external resource upon which that CITS Container and or its associated payload s may depend. It also is possible that a CITS Container and or its associated payload s may not depend upon any resources other than those of the CITS Console in which case no connections are required to any resources such that the CITS Container is self sustaining and fully operational other than its reliance on certain operations of the CITS Console when downloaded from the solution provider system .

A cloud IT service provider may manage the CITS Containers downloaded to a service provider system not just those plugged into the CITS Console via the CMC service by invoking various Standard Operations that are supported by the CITS Containers e.g. Tables 2 4 by collecting tracking and recording usage metrics and events associated with the CITS Containers and the services supported by those CITS Containers and by generating a journaled log of changes to and the current state of the CITS Containers . Further a cloud IT service provider may modify one or more of the downloaded CITS Containers by updating one or more of the downloaded CITS Containers when changes to one or more corresponding CITS Containers are made by the solution administrator that maintains the solution provider system so that the CITS Containers in the local container database remain synchronized and up to date with the corresponding CITS Containers . A cloud IT service provider also may modify one or more of the CITS Containers that is plugged into the CITS Console by creating one or more custom operations that may be invoked by one or more of the CITS Containers by modifying one or more existing processes or process sets in one or more of the CITS Containers by creating one or more new processes or process sets in one or more of the CITS Containers by adding one or more processes or process sets to one or more of the CITS Containers and or by removing one or more processes or process sets from one or more of the CITS Containers .

When a cloud IT service provider synchronizes CITS Containers in the local container database of the service provider system with CITS Containers in the central container database of the solution provider system the CITS Containers in the local container database may be updated to reflect changes in a newer version of the same CITS Container in the central container database or to reflect changes in a different CITS Container in the central container database that has similar payload dependencies. Similarly the CITS Containers in the central container database may be updated to reflect changes to corresponding containers in the local container database of one of the service provider systems A or B. Changes to CITS Containers in the central container database may for example correspond to updates generated by the solution administrator that offers IT management software via the solutions provider system and that are intended for proliferation to all of the service provider systems A and B in the communications network while changes to CITS Containers in the local container database may for example correspond to custom operations or a new processes or process sets generated by the cloud IT service provider that maintains the service provider system and that are intended for use within that service provider system . In the latter example the custom operations and or new processes or process sets may subsequently be proliferated to all of the service provider systems A and B in the communications network if their corresponding CITS Container is registered with the solutions provider system via the CMC service .

When a cloud IT service provider creates a custom operation or a new process or process set that cloud IT service provider may utilize the CMC service to upload that operation or process or process set to the solution provider system for testing certification and support approval. After the custom operation or new process or process set is tested for potential problems certified for use with a particular CITS Container and approved for operation with the CITS Console it is added to the global registry together with its container affiliation. Such certified and approved processes or process sets are identified in the global registry with unique process GUIDs which then are provided in the CITS specification of any CITS Container that comprises those processes or process sets . Similarly CITS Containers may be identified in the global registry with unique container GUIDs.

If a container GUID is stored in the global registry then the processes or process sets within the corresponding CITS Container are considered to be supported valid processes or process sets. And if the container GUID is not registered in the global registry then the processes or process sets within the corresponding CITS Container are considered to be unsupported processes or processes sets. Nevertheless unsupported processes or process sets still may be invoked by a CITS Container . The same is true for the CITS Container itself. But maintaining such a registry in the central registry database helps ensure that the functional management applications on which a container instance depends are available and correctly configured which helps ensure the integrity of the corresponding CITS Container and the services supported by that CITS Container .

Further a cloud IT service provider may set the entitlements accesses and other privileges for each of the services that are supported by each of the CITS Containers in the service provider system via the CMC service by writing them to the CITS specification for the each of the CITS Containers . Accordingly the access portal may be configured to provide consumers or tenants of the cloud IT service provider s services with access to those services based on the settings in the CITS specification . And those entitlements accesses and other privileges may be set in the context of the particular services that are supported by each of the CITS Containers in the service provider system which provides the system by system service context for the content of those CITS Containers . Moreover any content added to those CITS Containers e.g. new processes or process sets will automatically inherit those entitlements accesses and other privileges by virtue of their being written in the CITS specifications of those CITS Containers A C.

The CITS specification comprises a representation of the object schema definition for the corresponding CITS Container . That representation may for example be based on a specified standard such as the Extensible Markup Language XML standard while the object schema definition may be defined in a schema definition file such as an XML schema definition file .xsd file . The CITS specification comprises references to and descriptions of the specified operations automation scripts configuration scripts and or orchestration workflows that are utilized by the CMC service to perform Management Operations e.g. Table 2 and Service Operations e.g. Table 3 such as downloading instantiating and configuring the payloads and or external resources that are required to support the services or service offerings of the CITS Container . And the object schema definition comprises the general specification of the CITS Container .

In addition to the CITS specification each CITS Container comprises an active pool of processes or process sets A and a passive pool of processes or process sets as illustrated in . Accordingly the CITS specification also includes the GUIDs that are utilized by the CMC service to map CITS Container operations to processes or process sets and to track the processes or process sets that are in the active pool and passive pool . And because each instance of a CITS Container in a solution context has a unique CITS specification each instance of a CITS Container in a solution context is based on a correspondingly unique object schema definition.

A solution administrator and or container developer may utilize a Container Editor Tool that operates with the CMC service to modify a CITS specification as well as the descriptors within that CITS specification . Examples of the notations tags and attributes that may be provided in the CITS specification and edited with the Container Editor Tool are listed below in Table 1.

The Dirty Bit Support Bit referenced in Table 1 is a resettable support bit or dirty bit that is utilized to maintain the integrity of the CITS Container . Modifications made according to rules or allowed policies do not effect the Dirty Bit Support Bit while modifications that may compromise the supportability of the container contents may trigger the Dirty Bit Support Bit. Thus the Dirty Bit Support Bit may be reset to a default value on new installation and any subsequent modifications to the CITS Container may trigger the dirty bit to a non default value that denotes the type of integrity breech that the CITS Container has sustained.

The Service Type Template referenced in Table 1 defines the declarative model format and operations of the user facing interfaces that are published to the service request catalog for a particular type or category of cloud IT service or service offering supported by the subject CITS Container . The model format and operations defined by each Service Type Template are standardized for each type or category of cloud IT service or service offering so that the user interactions conducted with the CMC service appear the same to a user regardless of the payloads or the other products workflows services appliances applications and or devices upon which a CITS Container may depend to provide that type of cloud IT service. For example a CITS Container may be configured to provide a security service but different implementations or instances of that CITS Container may implement the service template model with different processes or process sets that depend on different target resources based on the same declarative model and template for the security service. Despite those different instances of the CITS Container utilizing different target resources or workflows to provide that security service the interfaces and operations provided by the user facing interfaces of the CITS Container will remain the same so as to maintain the consistency of user interactions at the CMC service .

The Service Type Template model may be captured as an XML file within the user facing interfaces of the subject CITS Container . In the alternative the Service Type Template may be implemented as a link to an external XML template file that is managed by the CMC service . In the latter configuration the CMC service operates as an interface between the standard Service Type Template and one or more cloud IT services or service offerings that implement that standard Service Type Template so that the user interactions at the CMC service remain consistent. Moreover different CITS Containers that support different services or service offerings also may specify the same standard Service Type Template to further maintain the consistency of user interactions at the CMC service .

Also in Table 1 the Standard Operations and Custom Operations are captured as automation processes provided within the subject CITS Container . All CITS Containers support a set of Standard Operations that are required for compliance with a container standard that is maintained and owned by the solution administrator that maintains the solution provider system . That container standard defines the rules and allowed policies that determine the state of the Dirty Bit Support Bit e.g. ON supported and OFF unsupported based on whether a modification effects the integrity of the CITS Container . Such Standard Operations may be sub divided into Management Operations Service Operations and Resource Operations which also are referenced in Table 1. Examples of such Management Operations Service Operations and Resource Operations are listed below in Tables 2 3 and 4 respectively.

The Management Operations listed in Table 2 may be utilized by the CMC service to manage a CITS Container such as by installing registering configuring activating and deactivating a CITS Container . The Service Operations may be utilized by the CMC service to manage or by service consumers to consume the services or service offerings that are supported by such a CITS Container such as by initiating configuring testing and activating those services or service offerings. And the Resource Operations may be utilized by the CMC service to manage the resources that are required to support those services or service offerings such as by reserving provisioning and monitoring those resources.

In Table 2 the Install Uninstall operations invoke workflows in a CITS Container that automatically install and configuration that CITS Container in a CITS Console or that remove or uninstall that CITS Container from a CITS Console . The implementation of those workflows may be specific to each instance of a CITS Container . And after a particular CITS Container is instantiated in a CITS Console it is registered in the local registry of a service provider system before the CMC service of that service provider system may be utilized to perform other Management Operations on that particular CITS Container .

The Register Unregister operations referenced in Table 2 invoke workflows in an installed CITS Container that register that CITS Container in the local registry of a service provider system and notify the CMC service or that unregister that CITS Container . The Register operation may be called as a part of the workflows of the Install operation or as a standalone operation. And after a particular CITS Container is registered in the local registry the CMC service may invoke other Management Operations provided within that CITS Container .

The Activate Deactivate operations referenced in Table 2 invoke management workflows in a CITS Container that mark that CITS Container as active i.e. ready for use in the local registry of a service provider system or that mark an active CITS Container as inactive. The Activate operation also may call the Service operation to activate the services or service offerings of that CITS Container . Although the Deactivate operation may invoke workflows to mark an activated CITS Container as inactive that CITS Container may remain registered in the local registry so that it may be re activated by calling the Activate operation again at a later point in time.

The Patch operation referenced in Table 2 invokes workflows in a CITS Container that add content to that CITS Container . The Upgrade operation referenced in Table 2 invokes workflows in a CITS Container that upgrade the lifecycle of that CITS Container . Accordingly both the Patch and Upgrade operations may be utilized to perform routine maintenance on a CITS Container . And the Rollback operation referenced in Table 2 invokes workflows in a CITS Container that roll that CITS Container back to a previous version which may be either a version immediately preceding the version that is being rolled back or a previous version that has been specifically identified. Accordingly the Rollback operation may be utilized to undo an changes performed by the Patch and or Upgrade operations as well as any changes that a container developer may make.

The Sync operation referenced in Table 2 invokes workflows in a CITS Container that cause the contents of a first instance of that CITS Container to be updated and or synchronized with that of a second instance of that CITS Container such that the same content may be maintained in different instances of the same CITS Container or in different CITS Containers with similar dependencies. Rather than requiring content to be downloaded from the first instance of the CITS Container moved and or modified and then uploaded into the second instance of the CITS Container the Sync operation combines those discreet operations into a single autonomic operation. The Sync operation also facilitates the supportability of the content because it allows a cloud IT service provider to move and or modify the state of content from a local instance of a CITS Container to a remote instance of the CITS Container for testing certification and approval. Moreover it allows a cloud IT service provider to upload registered content from a remote instance of a CITS Container to a local instance of the CITS Container for inspection and modification. The Sync operation also allows the contents of two local instances of CITS Containers to be synchronized. Any sync operation that may result in conflicts between the contents of different instances of a CITS Container may be referred to an administrator at the solution provider system for resolution.

In Table 3 the Instantiate operation invokes workflows in a CITS Container that create an instance of a service or service offering that is supported by that CITS Container and publish the instantiated service or service offering to the service request catalog . After an instance of the service or service offering has been created it must be activated by the Activate operation before service consumers may request and consume the subject service or service offering and before additional Service Operations may be performed on the service or service offering.

The Configure operation referenced in Table 3 invokes workflows in a CITS Container that configure or re configure a service or service offering that is supported by that CITS Container the resources upon which that service or service offering depends the container resource connectors for those resources and all associated configurations required to make that service or service offering operational. The Configure operation also may invoke certain post operational workflows such as workflows that configure a monitoring application to monitor the performance of that service or service offering after it is operational.

The Activate operation referenced in Table 3 invokes services workflows in a CITS Container that enable a service or service offering that is supported by that CITS Container to be published to the service request catalog for self service consumption via the Access Portal . The Activate operation also marks that service or service offering as active i.e. ready for use . The Deactivate operation referenced in Table 3 invokes workflows that disable or deactivate that service or service offering and remove it from the service request catalog so that it will not be available for self service consumption although it may remain on a CITS Container . And the Remove operation referenced in Table 3 invokes workflows that deactivates a service or service offering and deletes it from its CITS Container . Accordingly the workflows of the Deactivate operation may be part of the Remove operation.

The Test operation invokes workflows in a CITS Container that validate the integrity of a service or service offering that is supported by that CITS Container . For example a service or service offering may be placed in a test mode so that it is operational but is not published in the service request catalog and therefore cannot be consumed by service consumers. A successful result of such a test would ensure that the service or service offering is in ready working condition while any unsuccessful result would allow a solution administrator to take any corrective actions necessary to bring the service or service offering into a ready working condition.

The Set Overload Tenant operation referenced in Table 3 invokes workflows in a CITS Container that cause a process GUID in that CITS Container to overload another process GUID in the same CITS Container based on a tenant ID to which a particular user belongs. In other words the user entitlements for a first process or process set identified with a first process QUID will be set or overloaded by a second process or process set with a second process QUID to prevent users with a particular tenant ID from invoking the first process or process set while at the same time allowing the users with that tenant ID to invoke the second process or process set . Such processes or process sets may be mutually exclusive processes or process sets but they may be presented to the different users as the same process or process set via the user interface of the CMC service to maintain the consistency of user interactions at the CMC service such as when the CITS Container is deployed in a multi tenant cloud solution.

For example a first tenant in a multi tenant deployment may require a default process or process set A with one level of approval and a second tenant in that multi tenant deployment may require an alternative process or process set A with two levels of approval. But both of those processes or process sets A and A may be presented to those tenants users as the same approval process via the user interface of the CMC service e.g. an approval process . Thus the alternative process or process set A may overload the default process or process set with a Set Overload Tenant operation so that when a user with a tenant ID corresponding to the second tenant requests that approval process that user s request is directed from the default process or process set i.e. the overloaded process set A to the alternative process set A i.e. the overloading process set . The redirection of that request is performed in the background so that it is transparent to the user. By contrast when a user with a tenant ID corresponding to the first tenant requests that approval process that user s request goes directly to the default process or process set A.

Although the foregoing example includes a default process or process set A and an alternative process set A a Set Overload Tenant operation also may be performed between different instances of the same process set . Moreover a Set Overload Tenant operation may be performed on different instances of the same process set in both the active pool and the passive pool . For example one instance of a process set may be provided in the active pool and a redundant instance of that same process set may be provided in the passive pool . The instance of that process or process set in the passive pool may perform the Set Overload Tenant operation to overload the instance of that process or process set in the active pool such that when a user with a tenant ID that matches the tenant ID specified in the Set Overload Tenant operation requests the subject process or process set that user s request is directed to the instance of the process or process set in the passive pool which then is automatically moved to the active pool so that it may be invoked. A similar process may be performed when both instances of the same process or process set are provided in the active pool except that both the processes or process sets may be invoked without changing their statuses to active because both already are in the active pool .

The Set Get QoS operation referenced in Table 3 enables authorized users e.g. the solution administrator or a service administrator at the cloud IT service provider to specify one or more QoS levels or constraints for a particular CITS Container . A single QoS level may be specified for a particular CITS Container e.g. Priority 5 so that all of the users that access the services supported by that CITS Container are subject to the same performance constraints e.g. throughput packet loss latency jitter etc. . Or a plurality of QoS Levels e.g. bronze silver gold etc. may be specified for a particular CITS Container so that different users may be subject to different performance constraints based on different criteria such as user ID group ID tenant ID or the targeted resource e.g. a downloaded payload versus an external resource . In the former instance the CMC service determines if a QoS level constraint is satisfied for a user before a user is able to access the services supported by the CITS Container . And in the latter instance the CMC service allows the user to access the services supported by the CITS Container but then governs the user s session routing and resource requests based on one or more of the foregoing criteria. Those accesses may be controlled via access portal .

The Set QoS Route operation referenced in Table 3 enables authorized users to specify the route selected for each QoS level such that user requests are redirected at run time via that specified route. The Set QoS Route operation may be a separate process or process set from those for which it directs user requests. The Set QoS Route operation also may be an element of a process or process set for which it directs user requests. Accordingly via the Set Get QoS operation and the Set QoS Route operation the run time behavior of the services supported by a particular CITS Container may be shaped by run time data and the one or more QoS levels specified for that CITS Container .

The Get Set Transactional Cost operation referenced in Table 3 enables authorized users to assign a cost model to a particular CITS Container to each consumable process or process set within that CITS Container to each consumable element of those processes or process sets and or to each payload or other resource targeted by those processes or process sets . Those cost models are maintained by the accounting capability of the CITS Consile and may either be transactional based costing models e.g. charged per transaction subscription based costing models e.g. charged flat fee or a combination thereof e.g. some services charged per transaction and others covered under a flat fee . The assignment of cost models to CITS Containers and or the elements within a CITS Container enable transactional tracking and cost reporting calculations to be performed at run time in a utility model for each cloud IT service or service offering that is managed via the CMC service . And the resulting usage information may be logged in the a central registry database of the solution provider system utilizing the log management capability of the CITS Console .

Also in Table 3 the Get Set Completion Status operation enables the reporting database capability of the CITS Console or an external application to set or determine the state or completion status of a particular process or process set task or activity associated with or initiated by a user or by another process or process set within the context of a particular CITS Container . The status of completion may be maintained as a percent of task completion and may be set determined from outside the context of the CITS Container . The status of completion also may be set determined from within the CITS Container such as by an element of the process or process set that is being tracked or by another process or process set . Moreover each CITS Container may define any number of different states for each process or process set task or activity to facilitate different types of status tracking.

The Reserve operation referenced in Table 5 invokes workflows in a CITS Container to create a reservation for a resource or resources upon which a service or service offering of that CITS Container depends. That reservation may be made to reserve the resource or resources from a specified start date to a specified end date. There also may be no end date. Accordingly the End Reservation operation referenced in Table 5 may invoke workflows that end the reservation when the resources are no longer needed which may be before an end date if one has been specified. Similarly the Extend Reservation operation referenced in Table 4 may invoke workflows that specify an new end date that extends beyond a previously specified end date.

The Change Reservation operation referenced in Table 5 may comprise resource management operations that are configured change the reservation parameters for a resource or resources e.g. CPUs hard disk capacity etc. . And the Manage Reservation operation referenced in Table 5 may invoke workflows that manage the state of the reservation for a resource or resources e.g. stop start resume activate deactivate etc. as required to provide a service or service offering that is supported by a CITS Container .

Each of those Standard Operations also may be subdivided into mandatory and optional operations. Mandatory operations must be implemented for a CITS Container to comply with the container standard while optional operations may be optionally implemented or not implemented without preventing the CITS Container from complying with the container standard when they are not implemented. Nevertheless the presence of certain optional operations in a CITS Container still may be required to comply with the container standard.

By contrast to mandatory and optional Standard Operations Custom Operations are new operations that may be defined by an authorized user e.g. the solution administrator or a service administrator at the cloud IT service provider utilizing the Container Editor Tool. Such custom operations may be specific to a particular cloud IT service or service offering being provided with a CITS Container . For example a custom operation may be to fetch a report from an underlying product database associated with a cloud IT service and to email that report to the authorized user or some other user every time that operation is invoked. When such a custom operation is defined the Container Editor Tool adds an entry to the CITS specification e.g. Get Report that contains the information for invoking the orchestrated workflow associated with that custom operation. As a result the custom operation will appear among the operations supported by the CITS Container e.g. List Operations .

Each of the foregoing operations is maintained as part of the object schema definition in the CITS specification of a CITS Container . Those operations are separate from the processes or process sets that may be implemented in the CITS Container so that they are not directly inline with or tied to the cloud IT services or service offerings supported by that CITS Container . Because the cloud IT services delivered via the CITS Containers involve the automation of processes or process sets that typically depend on one or more external product service appliance application and or device for successful configuration and implementation payloads and or external resources are specified within the CITS specification to ensure that those dependencies are satisfied when a CITS Container is downloaded from the solution provider system .

The resources e.g. products services appliances applications devices etc. upon which a CITS Container may depend may reside in physical or virtual environments. Accordingly payloads may comprise virtual appliances A that represent a fully configured functional module or application e.g. an n tier application comprising multiple virtual appliances upon which a CITS Container depends to deliver its services. Such virtual appliances A may operate as management modules that provide value added services for the management applications business applications or services being delivered within the cloud IT service delivery solution. Further payloads also may comprise such management or business applications B virtual or physical appliances C hosting such applications and or automation scripts D that may be invoked to reconfigure content for use in the context of a particular CITS Container .

When the resource upon which a CITS Container may depend reside on external resources those external resources may be exposed as physical resources via the translation logic provided at the console resource connectors of the CITS Console in combination with the container resource connectors of the CITS Container as depicted by the solid lines between the container resource connectors and the external resources in . They also may be exposed via application program interfaces APIs E in the payload pool grid deployment as depicted by the dashed lines between the API E and the external resources in . Such external resources may comprise for example external cloud IT resources A e.g. IT management as cloud IT services that are delivered from IT management applications such as monitoring services security services data backup services ECservices simple storage services S etc. an external physical or virtual appliance B and or an external physical or virtual machine C.

A CITS Container also may depend on services exposed by another CITS Container . If not already plugged into the CITS Console that other CITS Container may need to be downloaded from the solution provider system and implemented. Or if that other CITS Container already has been downloaded to the local container database of a service provider system it may be implemented without being downloaded again. In either instance for each product service appliance application and or device upon which a CITS Container depends to support its cloud IT services or service offerings the CITS specification not only specifies which payloads external resources and or other CITS Containers are required to successfully configure and implement that CITS Container it also specifies the automation scripts configuration scripts and or orchestration workflows required to download configure and or connect or pair that CITS Container with any payloads external resources or other CITS Containers upon which that CITS Container may depend.

Returning to Table 1 the Active GUIDs identify all of the processes or process sets currently in the active pool of the CITS Container by their process GUIDs and the Passive GUIDs identify all of the processes or process sets currently in the passive pool of the CITS Container by their process GUIDs. If all of the processes or processes sets in a particular CITS Container have been approved for operation with the CITS Console the container GUID for that CITS Container will be registered. Accordingly one may determine whether all of the processes or process sets in the active pool or passive pool of a CITS Container have been approved for operation with the CITS Console based on whether or not the container GUID for the corresponding CITS Container has been registered. Nevertheless unapproved processes or process sets also may be present in the active pool or passive pool of a CITS Container .

The processes or process sets that are tracked with those process GUIDs are separated into an active pool and a passive pool so that new processes or process sets and or content may be uploaded to a CITS Container in a live environment without effecting the active processes or process sets and or content. The active pool comprises the processes or process sets that are in an active state such that they are available for external consumption by the consumers of the cloud IT service being delivered with that CITS Container . And the passive pool comprises the processes or process sets that are in an inactive state such that they are not available for consumption but are available to be added to the active pool or switched with processes or process sets in the active pool by changing their state from inactive to active. Because they are not in an active state the processes or process sets in the passive pool may be operated on outside the context of a live deployment while the CITS Container is in the live environment which allows for modifications testing expansion and updates to processes or process sets to be performed while maintaining the integrity of the CITS Container in the live environment.

Each process or process set in the active pool may have any number of corresponding redundant alternative or additional processes or process sets that may not be used in a particular deployment context. Those redundant alternative or additional processes or process sets are provided in the passive pool . As depicted in for example there are three 3 default processes or process sets A C in the active pool and one 1 alternative process or process set A and one 1 additional process or process set D in the passive pool . Although the three 3 default processes or process sets A C in the active pool represent the cloud IT service or service offering currently being supported by the CITS Container one or both of the processes or process sets A and D in the passive pool may be switched with one or more of the processes or process sets A C in the active pool . In the alternative one or both of the processes or process sets A and D in the passive pool may be added to the active pool without removing any of the default processes or process sets A C from the active pool .

By way of more specific example the default first process or process set A may support a service that requires one level of approval from a manager and the alternative first process or process set A may support the same service but require two levels of approval from a manager. And a first cloud IT service provider may need to provide its tenants with a service that requires one level of approval while a second cloud IT service provider may need to provide its tenants with a service that requires two levels of approval. Accordingly both the default first process or process set A and the alternative first process or process set A are packaged in the CITS Container so that different cloud IT service providers may implement different levels of service with the same CITS Container . Moreover the additional process or process set D is packaged in the CITS Container so that cloud IT service providers also may add to the existing services provided to their tenants rather than or in addition to providing an alternative form of an existing service.

During onsite deployment of the CITS Container the CITS Container is implemented with the default processes or process sets A C in the active pool . And if a cloud IT service provider s tenants require two levels of approval the default first process or process set A may be switched out for the alternative first process or process set A such that the default first process or process set A is moved to the passive pool i.e. the status of the default first process or process set A is changed to inactive and the alternative first process or process set A is moved to the active pool i.e. the status of the alternative first process or process set K is changed to active . Similarly the additional process or process set D may be switched or added to the active pool i.e. the status of the additional process or process set D may be changed to active to provide an additional different service to the cloud IT service provider s tenants. Such switching and or adding of processes or process sets may be accomplished in the field without modifying the content of the CITS Container .

Providing an active pool and a passive pool in each CITS Container not only allows flexibility in the onsite configuration of the CITS Container by enabling cloud IT service providers to switch or add processes or process sets as required to suit different tenants without modifying the content of the CITS Container it also allows new processes or process sets to be uploaded to the CITS Container to expand the services provided by the cloud IT service providers while the CITS Container is being utilized in a live environment. For example an authorized user e.g. the solution administrator or a service administrator at the cloud IT service provider may invoke the Add Remove Object command to load a new process or process set to the passive pool and then invoke the Activate Deactivate command to activate the process or process set by changing its state to active such that it is moved to the active pool . Such processes or process sets automatically inherit the entitlements of the CITS Container in which they are activated.

In addition to new and or alternative processes or process sets the passive pool also may comprise one or more redundant processes or process sets that provide substantially the same functionality as one or more corresponding processes or process sets in the active pool . Accordingly those redundant processes or process sets may be modified tested expanded and or updated in a live environment while their corresponding processes or process sets remain functioning in the active pool . Thus a redundant process or process set may be modified tested expanded and or updated as required in the passive pool and then switched with its corresponding process or process set in the active pool without requiring that the services supported by that process or process set be taken off line for any more time than is required to make that switch. Switching adding modifying testing expanding and updating processes or process sets in that manner may be performed with the Container Editor Tool of the CMC service .

The CMC service not only provides functionality for authorized users to switch add modify test expand and update the processes or process sets within a particular CITS Container it also provides functionality for authorized users and or service consumers to switch add modify test expand and update the CITS Containers that are downloaded to the local container database of a service provider system . Modifications to a CITS Container may be performed via the Container Editor Tool that is provided as part of the CMC service . And just as processes or process sets may be in an active or inactive state within a particular CITS Container i.e. in the active pool or the passive pool CITS Containers may be in an active or inactive state when plugged into the CITS Console . Although a CITS Cartridge that has been downloaded to the local container database of a service provider system also is in an inactive state it is not considered to be plugged in to the CITS Console unless it has at least been instantiated and registered in the CMC Service e.g. Step .

Updates to and synchronizations of a CITS Container may be performed by the CMC Service of the CITS Console regardless of whether that CITS Container is plugged into the CITS Console . Further changes to and the current state of a CITS Container may be logged by the log management capability of the CITS Console regardless of whether that CITS Container is plugged into the CITS Console . But by plugging a CITS Cartridge into the CITS Console authorized users may utilize the CMC Service to modify certain core functionality of a CITS Container when it is in an inactive state. Authorized users may test those modifications or make and test modifications to other functionality e.g. processes and process sets when the CITS Container is plugged in and in an active state. Also when the CITS Container is in an active state service consumers may select certain cloud IT services or service offerings from the service request catalog for run time execution.

An authorized user may modify the core functionality of a CITS Container in the passive state after it is instantiated or registered but before its corresponding cloud IT services or service offerings are published to the service request catalog . Such modifications might include for example adding or creating one or more Custom Operations in the CITS specification adding or creating one or more custom container resource connectors for a particular physical resource and or adding or creating a custom set of user facing interfaces for a particular service or service provider. After such modifications have been completed the corresponding CITS Container may be placed in the active state and tested in an isolated test environment. Such a test environment may comprise the actual payloads and or external resources upon which that particular CITS Container depends in which case those payloads and or external resources may need to be downloaded and or connected to it may comprise virtualizations of those payloads and or external resources or it may comprise some combination thereof. Accordingly an isolated test environment may be created as required to ensure that the subject CITS Container may be tested without interrupting or interfering with the operation of any of the other CITS Containers that also may be plugged into the CITS Console .

Upon the successful completion of such testing the corresponding cloud IT services or service offerings may published to the service request catalog for consumption by service consumers. In the alternative the modified CITS Container may be returned to the inactive state for further modification or unplugged from the CITS Console for subsequent retrieval from the local container database . Further the modified CITS Container may be uploaded to the solution provider system for testing and support approval. If certified for operation within the CITS Console the modified CITS Container is added to the central container database and identified in the global registry with a unique container GUID.

As discussed above authorized users may modify and test the processes or process sets within the CITS Container not only while the CITS Container is in an active state but also while it is in a live environment. That can be accomplished for example by providing duplicate instances of the same process or process set one instance in the active pool and one instance in the active pool . The first instance may be enabled for run time execution in the active pool while the other instance is being modified and tested in the passive pool . The two instances then may be switched with each other upon completion of the modifications and testing. A similar result may be achieved when modifying the core functionality of a CITS Container by downloading duplicate instances of the same CITS Container to a CITS Console and modifying one in the inactive state while the other is in the active state and being operated in a live environment.

Turning to an example of a container implementation and modification process is illustrated. At step the solution administrator that offers IT management software and solutions via the solution provider system provides a cloud IT service provider with a cloud IT service solution at the service provider system maintained by that cloud IT service provider. That cloud IT service solution comprises the CITS Console which comprises the access portal the CMC service the orchestration engine the service request catalog the console resource connectors the intermediary interconnect or service bus and the aggregated set of common capabilities . The CITS Console and its components may be provided locally on the services servers of the service provider system they may be provided remotely on the solution servers of the solution provider system or they may be divided across both systems and .

The CMC service comprises among other elements the Container Editor Tool and a pool grid controller that instantiates and configures the downloaded payloads in the payload pool grid deployment . The CMC service provides the cloud IT service provider with a catalog of the CITS Containers available for download from the solution provider system . And the orchestration engine supports the autonomic instantiation and implementation of downloaded CITS Containers as well as the download of the payloads upon which the downloaded CITS Containers depend.

The cloud IT service solution also comprises the aggregated set of common capabilities the payload pool grid deployment local container and payload libraries and a local registry of supported CITS Containers processes and process sets and container affiliations. The aggregated set of common capabilities and the payload pool grid deployment may be provided on the services servers of the service provider system the local container library may be provided on the local container database the local payload library may be provided on the local payload database and the local registry of supported CITS Containers processes and process sets and container affiliations may be provided on the local registry database . The payload pool grid deployment local container and payload libraries and a local registry of supported CITS Containers processes and process sets and container affiliations also may be provided remotely on the solution servers of the solution provider system or they may be divided across both systems and . Those elements of the cloud IT service solution together with the CITS Console provide the cloud IT service provider with tools to implement the cloud IT service solution at the service provider system .

At step either the solution administrator or the cloud IT service provider downloads the CITS Containers that support the services that the cloud IT service provider will provide its customers with the cloud IT service solution provided at step . Those CITS Containers may be selected from the catalog and are downloaded to the local container database of the service provider system from the central container database of the solution provider system . Generally the solution administrator will download those CITS Containers to the service provider system as part of the cloud IT service solution initially delivered to the cloud IT service provider and the cloud IT service provider will download any other CITS Containers that may subsequently be required to support any new or different services that the cloud IT service provider would like to provide its customers on an as needed basis. In other words after the solution administrator delivers the cloud IT service solution to the cloud IT service provider at steps and the cloud IT service provider may utilize the CMC service to repeat step in a self service manner as required to meet its own changing needs and or those of its customers.

When a CITS Container is downloaded it is added to the local container library on the local container database . Further if it is designated as a supported CITS Container it is registered in the local registry on the local registry database together with the process GUIDs for any processes or process sets provided in that CITS Container . Downloading a CITS Container at step initiates an autonomic process which is performed at steps .

At step the orchestration engine instantiates the downloaded CITS Container in the context of the particular cloud IT service solution by invoking operations provided in the CITS specification e.g. Instantiate Activate etc. . At step the orchestration engine reads and decomposes automation scripts from the CITS specification and invokes those scripts or workflows to automatically download any payload s that may be required to implement the services or service offerings that are supported by that CITS Container . As described above the CMC service may automatically connect to the solution provider system and download the payload s to the local payload database of the service provider system from the central payload database of the solution provider system . And at step the pool grid controller instantiates the downloaded payload s by deploying an instance of the payload s in the payload pool grid deployment .

When a payload is downloaded it is added to the local payload library on the local payload database . That payload then may be utilized to support any CITS Container that may subsequently downloaded and that also depends on that payload . Accordingly a payload may be deployed directly from the local payload database when it already has been downloaded rather than being downloaded from the central payload database before it is deployed for a particular CITS Container . Thus step may be skipped if all of the payloads required by a downloaded CITS Container already have been downloaded as depicted by the dashed line arrow extending from step to step in . Further a downloaded CITS Container may depend only upon external resources such that no payloads need to be downloaded at step or instantiated at step . Thus both step and step may be skipped if all of no payloads are required by a downloaded CITS Container as depicted by the dashed line arrow extending from step to step in .

At step the orchestration engine reads and decomposes configuration scripts from the CITS specification and invokes those scripts to automatically configure or pair the CITS Container with the instantiated payload s or with any external resource or other CITS Containers upon which that CITS Container may depend. The CITS Container is paired with those payloads and or external resources via its corresponding container resource connectors . And if that CITS Container depends upon one or more payloads or other logical resources the orchestration engine consumes or executes orchestration workflows to perform operations on the appropriate container resource connectors provided within the CITS Container so that those container resource connectors may be translated to their corresponding physical implementations at the service provider servers of the service provider system the console resource connectors of the CITS Console and or the external resources provided by a third party resource provider. Accordingly the CITS Container may be configured to connect to payloads and or external resources directly via its corresponding container resource connectors indirectly via its corresponding container resource connectors and the console resource connectors of the CITS Console or indirectly via its corresponding container resource connectors the console resource connectors of the CITS Console and the service bus . As yet another alternative the CITS Container also may be configured to connect to payloads and or external resources via standard internet protocols.

The object schema definition in the CITS specification contain the download instructions and the link information for any payload s and or external resources that may be required to implement a particular CITS Container as well as any information required to determine and apply the appropriate translation between any logical resource and its physical implementation at a payload or external resource . The specific resource abstractions required to perform such translations may be provided resource connectors such as the console resource connectors and the container resource connectors . The abstractions of the console resource connectors may be utilized to perform translations for more than one CITS Container while the abstractions of the container resource connectors may be specific to a particular CITS Container which is why the latter are provided in the CITS Container rather than in the CITS Console .

At step the orchestration engine runs a test to confirm that the connections between the CITS Containers and the payloads and or external resources configured at step are properly functioning. More specifically the orchestration engine runs a test to determine whether the processes or process sets in each CITS Container are configured to connect to the correct payloads and or external resources and that those connections are configured as required to provide the services that are supported by that CITS Container . Such a test may involve establishing temporary connections with and issuing test commands to the subject payloads and or external resources . The subject payloads and or external resources then will return a completed or failed status and the reporting database capability of the CITS Console will monitor the performance of the connections. If the returned status is completed and the connections perform as required the connections will pass the test performed at step and the container implementation process will proceed to step .

Depending on the cloud IT service or service offering and the contents of a particular CITS Container that CITS Container may not depend upon any payloads and or any external resources to support its cloud IT services or service offerings. In that instance the CITS Container may comprise all of the operations required to implement its cloud IT services or service offerings when combined with the aggregated set of common capabilities of the CITS Console . Thus steps may be skipped if the CITS Container does not depend upon any payloads or any external resources to support its cloud IT services or service offerings as depicted by the dashed line arrow extending from step to step in .

At step the orchestration engine automatically sets the entitlements for the CITS Container so as to allow the cloud IT service provider to fully configure the cloud IT services or service offerings that are supported by that CITS Container . And at step those cloud IT services or service offerings are published to the service request catalog where they can be consumed by service consumers in a self service manner. Step completes the autonomic process initiated by downloading a CITS Container at step which completes the implementation of a CITS Container in a cloud IT service solution. Accordingly steps may be repeated each time a CITS Container is downloaded until all of the CITS Containers required to support a particular cloud IT service solution have been downloaded as depicted by the dashed line box surrounding those steps in .

As also illustrates an authorized user e.g. the solution administrator or a service administrator at the cloud IT service provider may utilize the Container Editor Tool of the CMC service to modify a downloaded CITS Container in a live environment after it has been implemented. For example a downloaded CITS Container may initially comprise one or more processes or process sets in the active pool that define the complete capabilities of the cloud IT service or service offering supported by that CITS Container . And the CITS Container may comprise zero or more processes or process sets in the passive pool that define additional or redundant cloud IT services or service offering that may optionally be delivered by that CITS Container . Because that CITS Container was downloaded from the solution provider system at step that CITS Container and each of the processes or process sets in each of its pools and will be registered as being supported by the CMC service in the global container registry that is maintained in the central registry database . Accordingly the Dirty Bit Support Bit in the CITS specification is set to a default value of supported or on which represents the starting state of the CITS Container when it is downloaded.

At step an authorized user e.g. the solution administrator or a service administrator at the cloud IT service provider may modify the CITS Container by switching adding and or removing one or more processes or process sets between the active pool and the passive pool by changing the state of those processes or process sets thereby changing the capabilities of the cloud IT service or integration supported by the CITS Container . In for example the authorized user may switch out the default first process or process set A for the alternative first process or process set A such that the default first process or process set A is moved to the passive pool i.e. the state of the default first process or process set A is changed to inactive and the alternative first process or process set A is moved to the active pool i.e. the state of the alternate first process or process set A is changed to active . Or the authorized user may add the additional process or process set D into the active pool i.e. the state of the additional process or process set D is changed to active to provide an additional different service. Such modifications may be performed in a live environment without compromising the integrity of the CITS Container .

Also at step an authorized user may create and or modify one or more processes or process sets rather than switching processes or process sets between pools and and or adding processes or process sets from the passive pool to the active pool . To maintain the integrity of the CITS Container in the live environment however processes or process sets may not be modified in the active pool . Thus to modify a process or process set that currently is in the active pool the authorized user must first move that process or process set to the passive pool by changing the state of that process or process set to inactive. In the alternative the authorized user may upload or copy a redundant instance of the same process or process set to the passive pool so that the corresponding process or process set need not be removed from the active pool thereby preventing the disruption of the service supported by that process or process set . Accordingly such modifications also may be performed in a live environment without compromising the integrity of the CITS Container .

The authorized user may create and or modify one or more processes or process sets with the Container Editor Tool which supports operations for copying modifying or creating new processes or process sets in the passive pool . Accordingly the authorized user may modify an existing registered process or process set or create a new process or process set from scratch when a CITS Container that suits the cloud IT service provider s needs is not available for download from the solution provider system . In response to the creation and or modification of a process or process set the Container Editor Tool writes a new unregistered container GUID to the CITS specification because the subject CITS Container comprises a new and or modified process or process set that has not yet been determined to be supported.

In response to any type of modification e.g. switching adding removing modifying or creating processes or process sets the Container Editor Tool also generates a log of those modifications and writes it to the CITS specification together with the current state of the CITS Container . That modification log may be queried by the CMC service to identify specific modifications to a CITS Container and when they were made. Such a log may be utilized by the solution administrator when determining whether a modification is approved for operation in the CITS Console .

At step the CMC service determines if the modification performed at step is supported. If the processes or process sets already provided in a registered CITS Container were switched added and or removed to from to the active pool at step the modification is determined to be supported at step i.e. Step Yes . But if processes or process sets were created and or modified at step those new processes or process sets will be determined to be unsupported at step i.e. Step No . Thus the Container Editor Tool toggles the Dirty Bit Support Bit in the CITS specification to unsupported or off at step when a process or process set is modified and or created at step while switching adding and or removing processes or process sets already provided in a registered CITS Container to from the active pool at step does not effect the Dirty Bit Support Bit which remains set to the default value of supported or on at step after such a modification.

Toggling the Dirty Bit Support Bit to unsupported or off at step represents that the subject process or process set has not been approved for operation with the CITS Console . Nevertheless the authorized user may add that modified process or process set to the active pool at step . The addition of such an unsupported process or process set to the active pool however may compromise the integrity of the CITS Container . Accordingly the authorized user also may leave the modified process or process set in the passive pool and upload an instance of the modified CITS Container to the solution provider system at step for testing certification and support approval.

At step new or modified process or process set is moved to the active pool by changing its state to active in the uploaded instance of the CITS Container and it is tested for problems. After any problems are identified and resolved the new or modified process or process set may be certified for use with the CITS Container and approved for operation with the CITS Console . The corresponding CITS Container then is registered in the global registry at step to indicate that its processes or process sets have been certified and approved. Such registered CITS Containers are identified in the global registry with unique container GUIDs. Then after the CITS Containers with the modified process or process set is registered at step the authorized user may switch and or add that process or process set to the active pool of the live instance of the corresponding CITS Container without compromising the integrity of that CITS Container and without interrupting the services that are supported by the live instance of that CITS Container .

Even though switching and or adding processes or process sets to the active pool in registered CITS Containers does not effect the Dirty Bit Support Bit in the CITS specification such a modification changes the content of the CITS Container . Accordingly the modified CITS Container also may be registered with the solution provider system at step even when a modification is determined to be supported at step . Such modified CITS Containers may be registered both in the local registry maintained in the local registry database and the global registry maintained in the central registry database so that the solution provider system may track such modifications which allows the solution administrator to update their default processes or process sets in response to the modifications being made in the field. The registration of CITS Containers with new or modified processes or process sets at step supports similar tracking.

Being able to switch add remove modify and or create processes or process sets enables cloud IT service providers to flexibly change the capabilities of a CITS Container in a self service manner. And being able to perform such modifications on processes or process sets in a passive pool enables cloud IT perform those modifications in a live environment without compromising the integrity of the CITS Container or the service supported by that CITS Container . Moreover registering those modifications with the solution provider system supports the development and proliferation of enhancements of to cloud IT services provided by such CITS Containers . In addition by encompassing multiple switchable processes or process sets in a single CITS Container a cloud IT service provider may modify a cloud IT service being delivered by a CITS Container on the fly without having to re test all the services that may be effected by the change thus saving time avoiding costly delays costs and custom implementations.

To provide additional flexibility different container operations may be created and or modified for a particular CITS Container in a similar manner to that described above with respect to modifying and or creating processes or process sets e.g. Steps . Further those new and or modified operations may be uploaded tested and registered with the solution provider system in a similar to that describe above with respect to processes or process sets e.g. Steps . Registering new and or modified container operations in that manner further prevents compromising the integrity of a CITS Container while at the same time enabling flexibility of design. And although the modifications described above were performed with the CITS Container in an active state after the cloud IT services or service offerings of that CITS Container have been published to the service request log at step they also may be performed at with the CITS Container in an inactive state before the cloud IT services or service offerings of that CITS Container have been published to the service request catalog at step .

For example rather than modifying a CITS Container in a live environment after the supported cloud IT services or service offerings have been published to the service request catalog at step steps may be performed any time after the subject CITS Container has been instantiated at step as depicted by the arrow that generally connects step to the box around steps in . Performing such modifications before the supported cloud IT services or service offerings have been published to the service request catalog may be advantageous for example when the core functionality of the subject CITS Container is being modified. That way the services or service offerings that are effected by that core functionality will not be available for consumption by service consumers while those modifications are being performed. And to prevent service interruptions a duplicate instance of the subject CITS Container may be downloaded to the CITS Console so that the services or service offerings of that duplicate instance of the CITS Console may be published to the service request catalog and consumed by service consumers while the core functionality of the other instance of that CITS Container is being modified.

Regardless of whether a CITS Container is modified before or after its cloud IT services or service offerings have been published to the service request catalog at step that modified CITS Container must be re instantiated at step for the modification to be enabled for run time execution as depicted by the arrow extending from step to step and the arrow extending from step to in . As discussed above such modifications result in new container GUIDs being written to the CITS specification . For example modifying the core functionality of a CITS Container may result in a new container GUID being written to the CITS specification and modifying a process or process set may result in a new process GUID being written to the CITS specification . Accordingly a CITS Container must be re instantiated at step after being modified so that its CITS specification may be updated in the context of the CITS delivery solution in which it is being implemented.

A modified CITS Container may be re instantiated at step and enabled for run time execution regardless of whether the subject modifications are registered via steps . For example an authorized user may modify a CITS Container at step by adding a certified and approved process or process set to the active pool of that CITS Container . Because that process or process set already is certified and approved for use in the CITS Console and CITS Container the Dirty Bit Support Bit of that CITS Container remains set to the default value of supported or on at step . Thus that CITS Container also may be re instantiated at step and enabled for run time execution after step as depicted by the dashed line arrow extending from step to step in . Similarly a CITS Container that has its Dirty Bit Support Bit toggled to unsupported or off at step because it contains an unapproved modification also may be re instantiated at step and enabled for run time execution. As described above however implementing such unapproved modifications may compromise the integrity of that CITS Container or the CITS Console .

A CITS Container is enabled for run time execution by at least performing steps and after it is re instantiated at step . For example a CITS Container may have been modified at steps in a live environment such that all of the payloads required to support the cloud IT services or service offerings of that CITS Container already have been downloaded instantiated configured and tested at steps . Thus when that CITS Container is re instantiated at step it may be enable for run time execution by setting its entitlements at step and publishing its cloud IT services or service offerings to the service request catalog at step . Steps also may be performed for example if the modifications to the CITS Container require different payloads to be downloaded and or different connections to be made via those steps . And after the cloud IT services or service offerings of a CITS Container are published to the service request catalog at step the corresponding service or service offering may be invoked by a service consumer in a self service manner to obtain those cloud IT services or service offerings as depicted in by the arrow extending from step to .

Turning to an example of a container execution process is illustrated. At step a service consumer logs onto the service provider system and is authenticated via the user authentication capability of the CITS Console . After being authenticated the service consumer may view the available cloud IT services or service offerings that have been published to the service request catalog . And at step the service consumer selects the cloud IT service or service offering that it would like to consumer by invoke the corresponding user facing interface of the CITS Container that supports the selected cloud IT service or service offering. The service consumer may select from any cloud IT service or service offering published to the service request catalog at step of the container implementation process as depicted by the arrow in extending from to step .

At step the service consumer specifies the operating parameters required for the selected cloud IT service or service offering. For example the service consumer may specify predefined QoS levels or constraints e.g. Set Get QoS for the selected cloud IT service or service offering such as throughput packet loss latency jitter. Or a plurality of QoS levels e.g. bronze silver gold etc. may be specified for the selected cloud IT service or service offering so that different users may be subject to different performance constraints based on different criteria such as user ID group ID tenant ID or the targeted resource. Those QoS service and constraints also may be applied across all of the cloud IT services or service offerings of a particular CITS Container as well as across a plurality of CITS Containers . Also at step the service consumer may specify the run time routing for each selected QoS level e.g. Set QoS Route .

Steps and may be repeated as many times as required to select the cloud IT services or service offerings that the service consumer would like to consume and to set the QoS levels or constraints for those cloud IT services or service offerings as depicted by the arrow extending from step back to step in . The resulting accesses and routing may be controlled via the access portal . And at step SSO credentials may be assigned to different users at a service provider system based on the different accesses those users are to have to different cloud IT services or service offerings.

At step the resource reservation capability of the CITS Console is invoked to create reservations for the resources utilized by the cloud IT services and or service offerings selected at step . For example the orchestration engine may invoke an orchestration workflow to operate on the logical resources of the corresponding CITS Container such as logical virtual machine and logical disk to create the reservation for the physical implementations of those logical resources. The physical implementations of those logical resources may comprise for example a product e.g. a VM manager and an appliance e.g. a disk manager respectively.

At step the resources reserved at step are deployed for use by a CITS Container that supports the selected cloud IT service or service offering. The CITS Container is configured to communicate with each of those resources at step of the container implementation process . For example when the resources upon which a CITS Container depends are provided by a third party resource provider as external resources those resources may have been configured at step of the container implementation process by physical commands sent to the third party resource providers that maintain those external resources . Similar commands may be sent to resources at step to initiate them for run time execution.

At step the results of the commands sent at step e.g. completed or failed are logged by the log management capability of the CITS Console . Also logged by log management capability of the CITS Console are the specific resource allocations initiated at step . As discussed above however some CITS Containers may not depend on any external resources other than the aggregated set of capabilities of the CITS Console in which case steps may be skipped as depicted by the dashed line arrow extending from step to step in .

At step the accounting capability of the CITS Console begins tracking the cloud IT services and or service offerings being delivered to a particular service consumer and provides an accounting of those services. For example chargeback amounts are calculated by invoking logical resource costing operations to determine the amount of services a service consumer is consuming and the correspond costs associated with that consumption. Accordingly service consumers may only be charged for certain services as they are consumed in a self service manner.

At step the status of whether the preceding operations were successful or failed is reported back to the service consumer together with resource information for performing further operations. If each required resource was initiated at step and is being logged and tracked at steps the operations are determined to be successful and the container execution process is concluded.

As will be understood from the foregoing examples the disclosed CITS Console and CITS Containers are configured to operate together to provide a hybrid cloud solution with one or more cloud IT services or service offerings. The resulting hybrid cloud solution is flexible and modularly expandable by the addition or removal of different CITS Containers to the CITS Console and or by the addition or removal of different processes or process sets to one or more CITS Cartridges . The CITS Containers may connect to and or operate via the aggregated set of common capabilities of the CITS Consile as well as carry or refer to other resources such as payloads upon which the cloud IT services or service offerings of a CITS Container may depend.

The CITS Console provides the foundational framework for advanced granular management and control of the CITS Containers and their corresponding processes or process sets thereby enabling higher level operations to be performed on a container by container basis such as listing services setting entitlements tracking consumer activity across a service downloading uploading containers metering usage etc. Further the CITS Console provides both service providers and service consumers with access to a large number or types of cloud IT services or service offerings that may be delivered via a reference model based on automatically instantiated CITS Containers and payloads . Such CITS Containers and payloads may be developed for any type of cloud IT services and therefore the disclosed embodiments are not restricted to any particular service vendor or product.

Further the schematic and flow diagrams in illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various aspects of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular aspects only and is not intended to be limiting of the disclosure. As a general example the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of any means or step plus function elements in the claims below are intended to include any disclosed structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The aspects of the disclosure herein were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure with various modifications as are suited to the particular use contemplated.

