---

title: Memory management methods and systems
abstract: A method and an apparatus for determining a usage level of a memory device to notify a running application to perform memory reduction operations selected based on the memory usage level are described. An application calls APIs (Application Programming Interface) integrated with the application codes in the system to perform memory reduction operations. A memory usage level is determined according to a memory usage status received from the kernel of a system. A running application is associated with application priorities ranking multiple running applications statically or dynamically. Selecting memory reduction operations and notifying a running application are based on application priorities. Alternatively, a running application may determine a mode of operation to directly reduce memory usage in response to a notification for reducing memory usage without using API calls to other software.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535771&OS=09535771&RS=09535771
owner: Apple Inc.
number: 09535771
owner_city: Cupertino
owner_country: US
publication_date: 20130723
---
This application is a continuation of U.S. application Ser. No. 12 909 751 filed Oct. 21 2010 which is a divisional of U.S. patent application Ser. No. 11 620 688 filed on Jan. 7 2007 now issued as U.S. Pat. No. 7 827 358.

The present invention relates generally to memory management systems. More particularly this invention relates to reducing memory usage for multiple applications.

As more and more services are becoming available for small or mobile devices the number of applications running in a single device has increased significantly. Usually a small or mobile device is used mostly for certain specific applications while being equipped with general purpose computing capabilities. For example it is common to find a mobile phone device that also runs a browser application a gaming application and a music player application etc. On the other hand a mobile video player device may run a gaming application and or an email application in addition to a video application. Normally multiple running applications in the same device compete with each other by sharing the same memory space embedded inside the device.

Although the density of memory devices continues to increase memory capacities in small or mobile devices are still very limited as their physical sizes shrink at the same time. Traditionally virtual memory technologies are employed to allow multiple applications to share a limited RAM random access memory using a secondary memory with a much larger capacity. However the capacity in a secondary memory such as a flash memory for a small or mobile device may also be very limited.

Usually a system monitors memory usage by multiple running applications to ensure availability of a required capacity of free memory. In some systems when memory usage reaches a critical level the system takes memory management actions to increase the size of free memory such as activating a garbage collection procedure to obtain allocated memories from applications which are no longer running. The system may also target a selected application such as by simply killing the application. Selecting a target application is usually based on the size or age of an application. As a result the larger the size the more likely an application may be killed when memory usage is tight.

However the priority among running applications in a small mobile device may not correspond to the size or age of an application. In addition killing a running application may result in adverse user experiences on the device as a whole. Furthermore relying on memory reduction by a single running application to reduce overall memory usage may not be effective enough or may disrupt the running state of the application. Therefore existing memory management approaches fall short of addressing the challenges of serving multiple running applications in a small or mobile device with limited memory capacity.

An embodiment of the present invention includes a method and apparatus that determine a usage level of a memory device to notify a running application to perform memory reduction operations selected based on the memory usage level. An application calls APIs Application Programming Interface integrated in the system to perform memory reduction operations. A memory usage level is determined according to a memory usage status received from the kernel of a system. A running application is associated with application priorities ranking multiple running applications statically or dynamically. Selecting memory reduction operations and notifying a running application may be based on application priorities.

In an alternative embodiment an application may receive a notification about a memory usage level to reduce memory usage. The application may determine a mode of operation to directly reduce memory usage without using API calls to other software.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description that follows.

A method and an apparatus for memory management are described herein. In the following description numerous specific details are set forth to provide thorough explanation of embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known components structures and techniques have not been shown in detail in order not to obscure the understanding of this description.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

The processes depicted in the figures that follow are performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software such as is run on a general purpose computer system or a dedicated machine or a combination of both. Although the processes are described below in terms of some sequential operations it should be appreciated that some of the operations described may be performed in different order. Moreover some operations may be performed in parallel rather than sequentially.

In one embodiment a memory management may be designed to provide a memory management mechanism without virtual pages in an operating system for multiple applications to share a physical memory of limited capacity. When detecting a shortage of available physical memory resources a daemon or other software components may cause notifications to be sent to running applications for performing memory reduction operations. In response notified applications may perform corresponding memory reduction operations to increase the size of available physical memory. Collectively the change of available physical memory size may be significant to reduce or eliminate an immediate possibility of memory shortage. In the mean time most applications remain running with reduced memory usage without drastic impact on user experiences.

According to one embodiment different notifications may be sent to selected or all running applications based on application priorities and or a usage status of the memory. A usage status of the memory may be based on a set of usage watermarks. In one embodiment a running application may be associated with an application priority according to an application priority list ranking the application among multiple applications which may be running at the same time. For example running applications may be prioritized based on the most recent active files or pages associated the total physical memory occupied and or a predetermined application priority. A running application may be associated with more than one application priorities according to multiple application priority lists. In one embodiment applications with high priorities may receive a notification to perform memory reduction operations to yield partial cache memory occupied. While a low priority application may be asked to perform operations to yield all its occupied cache memory. Memory reduction operations may be performed through APIs Application Programming Interfaces integrated with an application.

In one embodiment the system may include an application framework for supporting multiple running applications such as application application and application n . A user interface module may be integrated with multiple running applications through the application framework for an application to interface with a user using the system . In one embodiment the application framework may include an application supervisor . The application supervisor may run as a background process in the system . In one embodiment a priority and operation list may be associated with the application supervisor as part of the application framework . The priority and operation list may be a database or a data structure storing information about application priorities. In one embodiment a running application may register with the priority and operation list when activated. In another embodiment the application framework may automatically monitor the set of running applications and updates the priority and operation list accordingly. A priority list ranking currently running applications may be dynamically updated by the application framework. In one embodiment the priority and operation list may include a predetermined static priority list for critical applications.

The application supervisor according to one embodiment may receive information about a usage level of the physical memory from a daemon process . The application supervisor may send notification messages to selected running applications according to the usage level received. In one embodiment the notification message from the application supervisor may be associated with one or more memory reduction operations based on the priority and operation list . The notification message may depend on the priority information associated with the target application based on the priority and operation list . In one embodiment the application supervisor may dynamically update a priority list in the priority and operation list . The application supervisor may update a priority list in response to receiving information about the memory usage level. In one embodiment a running application may perform memory reduction operations according to notification messages received from the application supervisor by calling one or more APIs provided by the application framework . A running application such as application may be integrated with an API library component of the application framework . In one embodiment the API library may include the APIs corresponding to memory reduction operations.

In one embodiment the daemon may run as a background process in the system . The daemon may periodically send a request to the kernel for a current usage status of the physical memory . In one embodiment the kernel may notify the daemon about the current usage status of the memory . The kernel may send the daemon a usage status whenever a change of the amount of available physical memory exceeds a predetermined threshold since sending the previous usage status notification. In one embodiment the kernel may notify the daemon with a current usage status of the physical memory in a periodical manner. The daemon may determine a usage level based on the received usage status for the physical memory . In one embodiment the daemon may send a message about the determined usage level to the application supervisor . In another embodiment the daemon may send a message including the usage status received from kernel to the application supervisor . The daemon may send message directly to a running application instead of the application supervisor based on the determined usage level.

At block according to one embodiment processing logic of the process may select memory reduction operations for a running application based on a usage level. Each memory reduction operation may be associated with one or more APIs from an API library integrated with the application. In one embodiment processing logic of the process may perform a memory reduction operation by an application calling the associated APIs. The required memory reduction operations may be selected according to a usage level of the memory device supporting the running application. In one embodiment a selected memory reduction operation may be optional or required for an application. The selected memory reduction operation may be required when the usage level is above a predetermined watermark of memory usage of the memory device. In one embodiment processing logic of the process may select a memory reduction operation via an application calling an API.

At block according to one embodiment processing logic of the process may instruct a running application to perform optionally selected memory reduction operations. Processing logic of the process may send a notification message to the running application to call the APIs associated with the memory reduction operations. In one embodiment the notification message may include a usage level of a memory. In another embodiment the notification message may include callbacks to the associated APIs. When the selected memory reduction operation is optional processing logic of the process considers other factors for an application to determine whether to perform a memory reduction operation. In one embodiment a background application may be required to perform a memory reduction operation. Processing logic of the process may perform memory reductions operations via an application calling APIs by executing callbacks received from a notification. In one embodiment processing logic of the process may identify whether a memory reduction operation is optional during when an application calling an API. Subsequent to instructing applications to reduce the usage level of a o y at block processing logic of the process may determine a new usage level of memory again at block .

In one embodiment an application priority list may be a dynamic list in a priority and operation list . Dynamic lists ay be updated through an application framework such as shown in . In one embodiment dynamic lists may be updated by the application supervisor of . Updates to dynamic lists may occur in response to activating an application and or receiving a usage level of a memory by an application framework such as shown in . In one embodiment periodic updates to dynamic lists may be scheduled according to a preset period. The application priority list may include a ranking among currently running applications according to whether a running application is a critical application a foreground application a specific type of application such as a personal communication application or a background application . A personal communication application may be for example an instant messaging or SMS Short Message Service application. In one embodiment special types of applications may be designated according to a predetermined static list in the priority and operation list . In one embodiment a dynamic priority list may be based on recent active page associated with a running application. The more recent the time stamp of an active page associated with a running application according to one embodiment the higher the corresponding priority may be in the priority list .

At block according to one embodiment processing logic for process notifies a running application to perform memory reduction operations associated with the usage level of memory. The notification from processing logic for process may include the usage level of memory. Processing logic for process may indirectly notify a running application by sending a message including the usage level of memory to an application framework associated with the running application such as shown in . In one embodiment the notification may be sent to all running applications. In another embodiment the notification may be sent to a selected set of running applications. The selection may be based on application priority list as shown in . At block according to one embodiment processing logic of process may receive a response from a running application notified to perform memory reduction operations. In another embodiment processing logic of process may receive a notification from a timer periodically at block . Processing logic of process may receive a notification directly from the system kernel. Subsequent to receiving a response or a notification at block processing logic of process may return back to block .

At block according to one embodiment processing logic of process determines a set of memory reduction operations for a selected running application according to the memory usage level. A memory reduction operation may be selected based on association with preset watermarks of memory usage levels as shown in . In one embodiment more than on memory reduction operations may be selected for a running application. In another embodiment one memory reduction operation may be selected for a running application. An application may be assigned a memory reduction operation randomly selected from a group of operations determined based on the memory usage level. In one embodiment processing logic of process may notify each selected application to perform assigned memory reduction operations by calling APIs at block . The notification received by a selected application may include callbacks to call APIs for performing memory reduction operations. In another embodiment the notification may include the memory usage level. Processing logic of process may notify a selected running application according to a messaging mechanism of an application framework associated with the selected running application. At block according to one embodiment processing logic of process may receive acknowledgement messages from notified applications. Processing logic of process may proceed at block after receiving all acknowledgement messages. In another embodiment processing logic of process may return to block after a preset period of time.

Alternatively in another embodiment processing logic of process may determine a mode of operation at block based on the notification received. A mode of operation may be to minimize memory usage. Processing logic of process may change the mode of operation at block accordingly. In one embodiment processing logic of process may deallocate a portion of memory storing a value at a memory location according to a mode of operation. The value may be a result of an earlier execution of a set of instructions by processing logic of the process . The value may be a computed value. Alternatively the value may be fetched remotely. In one embodiment processing logic of the process may repeat executing the same set of instructions to obtain the same value when referenced based on a mode of operation to minimize memory usage. Processing logic of the process may fetch from a memory location storing the value when referenced according to another mode of operation to maximize speed.

In one embodiment the daemon may be a process receiving memory usage status from the system kernel . The daemon may determine a memory usage level based on the memory usage status received. In one embodiment the daemon may send notifications including the determined memory usage level to all applications to perform memory reduction operations by calling the selection API of the API library . Each running application calling the selection API may determine to perform one or more memory reduction operations based on the memory usage level. A running application may perform memory reduction operations by calling APIs associated with the memory reduction operations. A running application may determine not to perform a memory reduction operation according to an associated application priority and the memory usage level. In another embodiment the daemon may select one or more running applications to perform memory reduction operations according to application priorities from the priority and operation list . The daemon may select one or more memory reduction operations for a selected application according to the list of memory reduction operations in the priority and operation list .

As shown in the computer system which is a form of a data processing system includes a bus which is coupled to a microprocessor s and a ROM Read Only Memory and volatile RAM and a non volatile memory . The microprocessor may retrieve the instructions from the memories and execute the instructions to perform operations described above. The bus interconnects these various components together and also interconnects these components and to a display controller and display device and to peripheral devices such as input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art. Typically the input output devices are coupled to the system through input output controllers . The volatile RAM Random Access Memory is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory.

The mass storage is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or a flash memory or other types of memory systems which maintain data e.g. large amounts of data even after power is removed from the system. Typically the mass storage will also be a random access memory although this is not required. While shows that the mass storage is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface or wireless networking interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art.

Portions of what was described above may be implemented with logic circuitry such as a dedicated logic circuit or with a microcontroller or other form of processing core that executes program code instructions. Thus processes taught by the discussion above may be performed with program code such as machine executable instructions that cause a machine that executes these instructions to perform certain functions. In this context a machine may be a machine that converts intermediate form or abstract instructions into processor specific instructions e.g. an abstract execution environment such as a virtual machine e.g. a Java Virtual Machine an interpreter a Common Language Runtime a high level language virtual machine etc. and or electronic circuitry disposed on a semiconductor chip e.g. logic circuitry implemented with transistors designed to execute instructions such as a general purpose processor and or a special purpose processor. Processes taught by the discussion above may also be performed by in the alternative to a machine or in combination with a machine electronic circuitry designed to perform the processes or a portion thereof without the execution of program code.

An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as but is not limited to one or more memories e.g. one or more flash memories random access memories static dynamic or other optical disks CD ROMs DVD ROMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a propagation medium e.g. via a communication link e.g. a network connection .

The preceding detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the tools used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be kept in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent fro the above discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations described herein. This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The processes and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the operations described. The required structure for a variety of these systems will be evident from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The foregoing discussion merely describes some exemplary embodiments of the present invention. One skilled in the art will readily recognize fro such discussion the accompanying drawings and the claims that various modifications can be made without departing from the spirit and scope of the invention.

