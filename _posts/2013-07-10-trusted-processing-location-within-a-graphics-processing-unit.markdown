---

title: Trusted processing location within a graphics processing unit
abstract: A method of extending trust from a trusted processor to a graphics processing unit to expand trusted processing in an electronic device comprises inserting a trusted kernel into the graphics processing unit, monitoring the activity level of the graphics processing unit, suspending graphics processing on at least a portion of the graphics processing unit, repurposing a portion of the graphics processing unit to perform trusted processing, and releasing the portion of the graphics processing unit from trusted processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183606&OS=09183606&RS=09183606
owner: Sprint Communications Company L.P.
number: 09183606
owner_city: Overland Park
owner_country: US
publication_date: 20130710
---
An electronic device that presents graphical images on a display may comprise a graphics processing unit GPU . A graphics processing unit is a specialized electronic circuit designed to rapidly manipulate and alter memory to accelerate building of images intended for output on a display. A graphics processing unit can complete graphics processing tasks more quickly and more efficiently than a central processing unit CPU can due to its possession of a highly parallel structure which allows large blocks of data to be processed in parallel. An electronic device comprising a graphics processing unit is likely to delegate graphics processing to the graphics processing unit rather than to a CPU in order to take advantage of the parallel processing advantage provided by the structure of the graphics processing unit.

In an embodiment a method of extending trust from a trusted processor to a graphics processing unit to expand trusted processing in an electronic device is disclosed. The method comprises inserting a trusted kernel into the graphics processing unit monitoring the activity level of the graphics processing unit suspending graphics processing on at least a portion of the graphics processing unit repurposing a portion of the graphics processing unit to perform trusted processing and releasing the portion of the graphics processing unit from trusted processing.

In an embodiment a method of increasing the processing capacity of an electronic device is disclosed. The method comprises providing in a trusted security zone of the electronic device a trusted kernel that when inserted into a graphics processing unit determines the activity level of the graphics processing unit repurposes a portion of the graphics processing unit from a graphics processing state to a non graphics processing state in response to determining that the graphics processing unit has processing resources available and returns the portion of the graphics processing unit to the graphics processing state in response to a trigger. The method further comprises inserting the trusted kernel into the graphics processing unit.

In an embodiment a method of evaluating a graphics processing unit in an electronic device is disclosed. The method comprises performing a confidence check on at least one kernel of the graphics processing unit comparing a current state of the graphics processing unit with an uncompromised state of the graphics processing unit stored in a trusted security zone of the electronic device evaluating the integrity of the graphics processing unit based on the comparing and performing an action in response to a result of the evaluating.

In an embodiment a method of increasing the trusted processing capacity of an electronic device is disclosed. The method comprises providing in a trusted security zone of the electronic device a trusted kernel inserting the trusted kernel into a graphics processing unit determining the activity level of the graphics processing unit repurposing a portion of the graphics processing unit from a graphics processing state to a trusted processing state in response to determining that the graphics processing unit has processing resources available and returning the portion of the graphics processing unit to the graphics processing state in response to a trigger

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although illustrative implementations of one or more embodiments are illustrated below the disclosed systems and methods may be implemented using any number of techniques whether currently known or not yet in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below but may be modified within the scope of the appended claims along with their full scope of equivalents.

An electronic device such as a mobile phone a personal digital assistant a media player another mobile device a desktop computer a laptop computer a notebook computer another computer a gaming system television set or another electronic device may present images on a display. The images may be static dynamic three dimensional 3 D or the images may be combinations thereof. For example the images may be dynamic and three dimensional as seen in some video games. Alternatively the images may be static and three dimensional as in some photographs. The electronic device may implement a graphics processing unit GPU in order to meet graphics processing demands associated with presenting images on the display. The highly parallel structure of the graphics processing unit allows for rapid manipulation and alteration of memory which accelerates the building of images. This structure may give the graphics processing unit the ability to meet the graphics processing demands of the electronic device.

The present disclosure teaches a method of increasing the trusted processing capacity of an electronic device. It may be that the graphics processing unit has available processing resources that are not in use in the absence of intense graphics processing. For example the graphics processing unit may have processing resources that are not in use when the display presents a static image. In an embodiment the electronic device may repurpose a portion of the graphics processing unit to perform trusted processing tasks tasks that do not involve graphics processing activities in the absence of intense graphics processing demands in order to make use of the processing resources that may be available on the graphics processing unit. Alternatively the electronic device may repurpose the portion of the graphics processing unit to perform non graphics processing tasks outside the realm of trust.

The electronic device comprises a trusted security zone. As described further below trusted security zones reduce the ability of nefarious applications and or programs that may have infiltrated the electronic device to read from or write to memory to read from or write to input output devices or to read from or write to communication ports while the subject processor and or electronic device is executing in the trusted security zone. An application executing in the trusted security zone can have a high level of confidence that an untrusted application is not executing on the electronic device at the same time and hence is prevented from interfering with or monitoring the activities of the application.

The method comprises providing in the trusted security zone of the electronic device a trusted kernel. After being inserted into the graphics processing unit the trusted kernel may determine the activity level of the graphics processing unit and repurpose a portion of the graphics processing unit from a graphics processing state to a trusted processing state in response to determining that the graphics processing unit has processing resources available. Converting the graphics processing unit from the graphics processing state to the trusted processing state may allow for delegation of selected trusted processing tasks between the graphics processing unit and the CPU.

Allocating some of the CPU s trusted processing tasks to the graphics processing unit when the graphics processing unit has processing resources available may free up CPU processing resources and may improve the speed and efficiency of the electronic device. Similarly the graphics processing unit may be used to execute a process and may delegate processing tasks to the CPU. Such a system may be used to take advantage of the greater processing speed of the graphics processing unit for certain tasks for example tasks that do not involve graphics processing activities. The graphics processing unit may be returned to the graphics processing state when a demand for graphics processing is received. In some cases the repurposed portion of the graphics processing unit may be repurposed for processing outside of the trusted security zone.

In an embodiment the trustworthiness of the graphics processing unit may be evaluated by performing a confidence check on at least one kernel of the graphics processing unit. The confidence check may comprise comparing a current state of the graphics processing unit with an uncompromised state of the graphics processing unit stored in a trusted security zone of the electronic device. The integrity of the graphics processing unit may be evaluated based on a result of the comparison. If the graphics processing unit is determined to be uncompromised and or trustworthy then the electronic device may allow the graphics processing unit to function normally however if the graphics processing unit is determined to be compromised and or untrustworthy the electronic device may take action to return the graphics processing unit to the uncompromised state and or prevent the compromised graphics processing unit from functioning.

In an embodiment a trusted CPU of the electronic device may extend trust to the graphics processing unit. A trusted kernel may be inserted into the graphics processing unit and the graphics processing unit may be prevented from running non trusted applications absent trusted instructions. The trusted kernel may direct the graphics processing unit to perform trusted processing tasks when it detects that the graphics processing unit has available processing resources.

A trusted security zone provides chipsets with a hardware root of trust a secure execution environment for applications and secure access to peripherals. A hardware root of trust means the chipset should only execute programs intended by the device manufacturer or vendor and resists software and physical attacks and therefore remains trusted to provide the intended level of security. The chipset architecture is designed to promote a programmable environment that allows the confidentiality and integrity of assets to be protected from specific attacks. Trusted security zone capabilities are becoming features in both wireless and fixed hardware architecture designs. Providing the trusted security zone in the main mobile device chipset and protecting the hardware root of trust removes the need for separate secure hardware to authenticate the device or user. To ensure the integrity of the applications requiring trusted data such as a mobile financial services application the trusted security zone also provides the secure execution environment where only trusted applications can operate safe from attacks. Security is further promoted by restricting access of non trusted applications to peripherals such as data inputs and data outputs while a trusted application is running in the secure execution environment. In an embodiment the trusted security zone may be conceptualized as hardware assisted security.

A complete trusted execution environment TEE may be implemented through the use of the trusted security zone hardware and software architecture. The trusted execution environment is an execution environment that is parallel to the execution environment of the main mobile device operating system. The trusted execution environment and or the trusted security zone may provide a base layer of functionality and or utilities for use of applications that may execute in the trusted security zone. For example in an embodiment trust tokens may be generated by the base layer of functionality and or utilities of the trusted execution environment and or trusted security zone for use in trusted end to end communication links to document a continuity of trust of the communications. For more details on establishing trusted end to end communication links relying on hardware assisted security see U.S. patent application Ser. No. 13 532 588 filed Jun. 25 2012 entitled End to end Trusted Communications Infrastructure by Leo Michael McRoberts et al. which is hereby incorporated by reference in its entirety. Through standardization of application programming interfaces APIs the trusted execution environment becomes a place to which scalable deployment of secure services can be targeted. A device which has a chipset that has a trusted execution environment on it may exist in a trusted services environment where devices in the trusted services environment are trusted and protected against attacks. The trusted execution environment can be implemented on mobile phones and tablets as well as extending to other trusted devices such as personal computers servers sensors medical devices point of sale terminals industrial automation handheld terminals automotive etc.

The trusted security zone is implemented by partitioning all of the hardware and software resources of the mobile device into two partitions a secure partition and a normal partition. Placing sensitive resources in the secure partition can protect against possible attacks on those resources. For example resources such as trusted software applications may run in the secure partition and have access to hardware peripherals such as a touchscreen or a secure location in memory. Less secure peripherals such as wireless radios may be disabled completely while the secure partition is being accessed while other peripherals may only be accessed from the secure partition. While the secure partition is being accessed through the trusted execution environment the main mobile operating system in the normal partition is suspended and applications in the normal partition are prevented from accessing the secure peripherals and data. This prevents corrupted applications or malware applications from breaking the trust of the device.

The trusted security zone is implemented by partitioning the hardware and software resources to exist in a secure subsystem which is not accessible to components outside the secure subsystem. The trusted security zone is built into the processor architecture at the time of manufacture through hardware logic present in the trusted security zone which enables a perimeter boundary between the secure partition and the normal partition. The trusted security zone may only be manipulated by those with the proper credential and in an embodiment may not be added to the chip after it is manufactured. Software architecture to support the secure partition may be provided through a dedicated secure kernel running trusted applications. Trusted applications are independent secure applications which can be accessed by normal applications through an application programming interface in the trusted execution environment on a chipset that utilizes the trusted security zone.

In an embodiment the normal partition applications run on a first virtual processor and the secure partition applications run on a second virtual processor. Both virtual processors may run on a single physical processor executing in a time sliced fashion removing the need for a dedicated physical security processor. Time sliced execution comprises switching contexts between the two virtual processors to share processor resources based on tightly controlled mechanisms such as secure software instructions or hardware exceptions. The context of the currently running virtual processor is saved the context of the virtual processor being switched to is restored and processing is restarted in the restored virtual processor. Time sliced execution protects the trusted security zone by stopping the execution of the normal partition while the secure partition is executing.

The two virtual processors context switch via a processor mode called monitor mode when changing the currently running virtual processor. The mechanisms by which the processor can enter monitor mode from the normal partition are tightly controlled. The entry to monitor mode can be triggered by software executing a dedicated instruction the Secure Monitor Call SMC instruction or by a subset of the hardware exception mechanisms such as hardware interrupts which can be configured to cause the processor to switch into monitor mode. The software that executes within monitor mode then saves the context of the running virtual processor and switches to the secure virtual processor.

The trusted security zone runs a separate operating system that is not accessible to the device users. For security purposes the trusted security zone is not open to users for installing applications which means users do not have access to install applications in the trusted security zone. This prevents corrupted applications or malware applications from executing powerful instructions reserved to the trusted security zone and thus preserves the trust of the device. The security of the system is achieved at least in part by partitioning the hardware and software resources of the mobile phone so they exist in one of two partitions the secure partition for the security subsystem and the normal partition for everything else. Placing the trusted security zone in the secure partition and restricting access from the normal partition protects against software and basic hardware attacks. Hardware logic ensures that no secure partition resources can be accessed by the normal partition components or applications. A dedicated secure partition operating system runs in a virtual processor separate from the normal partition operating system that likewise executes in its own virtual processor. Users may install applications on the mobile device which may execute in the normal partition operating system described above. The trusted security zone runs a separate operating system for the secure partition that is installed by the mobile device manufacturer or vendor and users are not able to install new applications in or alter the contents of the trusted security zone. It is anticipated that performing the confidence check on the graphics processing unit may allow the electronic device to detect nefarious programs that it may have been otherwise unable to detect which may provide greater security to the electronic device. Extending trust from the trusted CPU to the graphics processing unit is expected to further fortify the trusted security zone against nefarious programs and to increase the trusted processing resources of the electronic device.

Turning now to an electronic device is described. In an embodiment the electronic device comprises a central processing unit CPU a graphics processing unit GPU a memory a plurality of hardware devices a radio frequency transceiver RF XCVR a permissive sector and a trusted security zone . For clarity the permissive sector and the trusted security zone have been subdivided according to component in . It should be understood that each subdivision of the trusted security zone may be substantially similar to other subdivisions of the trusted security zone and or the trusted security zone as a whole. Alternatively each subdivision of the trusted security zone may be different from other subdivisions of the trusted security zone and properties of the trusted security zone as a whole may result from relationships between subdivisions. It is contemplated that in some cases each subdivision of the trusted security zone may function independently. It should likewise be understood that each subdivision of the permissive sector may be substantially similar to other subdivisions of the permissive sector and or the permissive sector as a whole. Alternatively each subdivision of the permissive sector may be different from other subdivisions of the permissive sector .

The memory may be partitioned into the permissive sector and the trusted security zone . The permissive sector may comprise a plurality of non trusted applications and or other non trusted information. In an embodiment the plurality of hardware devices may comprise a display a screen a graphical user interface a monitor and or other devices on which images built by the graphics processing unit may be presented. The trusted security zone may comprise a plurality of trusted applications trusted information INF and or other items stored in trust.

As discussed hereinabove with reference to trusted security zones the hardware and software components of the electronic device may be partitioned into permissive sectors and trusted security zones. For example the CPU may be divided into the permissive sector and the trusted security zone as shown in . Although shown in as comprising the permissive sector and a trusted kernel it is contemplated that the graphics processing unit may be divided into the permissive sector and a subdivision of the trusted security zone . When trusted processes are activated all activity in the permissive sector ceases until the trusted processes are terminated in order to limit nefarious programs from breaching the trusted security zone .

In an embodiment the CPU may comprise multiple cores. For example the CPU may comprise two cores four cores or some other number of cores wherein the permissive sector and the trusted security zone may reside in separate cores. shows a single CPU and a single graphics processing unit but it should be understood that the electronic device may comprise multiple CPU s and or multiple graphics processing units which may comprise a substantially similar separation of the permissive sector and the trusted security zone . Alternatively when the electronic device comprises multiple CPU s and or multiple graphics processing units each may be designated as being either wholly in the permissive sector or wholly in the trusted security zone . Similar to depiction of the permissive sector and the trusted security zone in the CPU the permissive sector and the trusted security zone are depicted as sharing the memory in . The permissive sector and the trusted security zone may occur as separate partitions of a single memory chip or they may occur in physically separate chips.

Graphics processing units such as the graphics processing unit are specialized electronic circuits designed to perform complex mathematical and geometrical calculations for graphics rendering. The parallel structure of graphics processing units resulting from a plurality of processing cores optimizes the graphics processing capability of graphics processing units. A graphics processing unit such as the graphics processing unit is able to transfer to and from memory much faster than a CPU such as the CPU which allows the graphics processing unit to produce a wash of images on a display that the CPU may be unable to produce. For example the graphics processing unit may be able to satisfy a demand for a rapid wash of images as a movie is played on the electronic device while the CPU may be unable to produce images quickly enough to meet the demand. Thus it is typical for graphics processing to be assigned to graphics processing units. Gaming consoles desktop computers laptop computers television sets cell phones smart phones mobile phones multimedia players graphics engines mobile devices and other electronic devices that may experience a demand for graphics processing may comprise a graphics processing unit such as the graphics processing unit to which graphics processing tasks are assigned.

In the absence of intense graphics processing the graphics processing unit may have processing resources that are not in use. Intense graphics processing may comprise producing images associated with video game play producing images associated with a movie or television program producing dynamic images producing three dimensional 3 D images producing a rapid wash of images to be displayed on a display or producing other images to be displayed on a display. Intense graphics processing may comprise a level of graphics processing in which about 10 about 20 about 30 about 40 about 50 about 60 about 70 about 80 about 90 or about 100 of the graphics processing unit is being used for processing graphics. It is contemplated that the graphics processing unit may have processing resources that are not in use even at times of intense graphics processing. It should be understood that approximate percentages discussed herein are intended to include the exact percentage used to describe the approximate value. For example about 50 is intended to include exactly 50 and about 100 is intended to include exactly 100 .

In an embodiment the percentage of the graphics processing unit used for graphics processing may be the percentage of the graphics processing unit s processing resources used for graphics processing. For example if 50 of the graphics processing unit s processing resources are being used for processing graphics then it may be said that 50 of the graphics processing unit is being used for processing graphics. Alternatively the percentage of the graphics processing unit used for processing graphics may be the percentage of the graphics processing unit as a whole that is used for processing graphics. One skilled in the art would appreciate that unlike a CPU such as the CPU a graphics processing unit such as the graphics processing unit may be unable to perform tasks other than graphics processing despite having unused processing resources available without first being repurposed for those tasks.

The graphics processing unit may be configured to execute only graphics processing programs and or instructions unless instructed otherwise by a trusted source. In an embodiment the graphics processing unit may be configured to perform graphics processing functions and to respond to instructions from trusted sources. Accordingly the graphics processing unit may be configured to resist executing non trusted items unrelated to graphics processing absent trusted instructions. For example the graphics processing unit may not execute an application from the permissive sector unless instructed to do so by the trusted security zone the trusted kernel or unless instructed to do so by another trusted source. Limiting the graphics processing unit to graphics processing unless instructed otherwise by a trusted source may make it more difficult for nefarious programs to gain access to the graphics processing unit .

In an embodiment the trusted kernel may be inserted into the graphics processing unit . The trusted kernel may be inserted at the time of manufacture or the trusted kernel may be inserted at some other time. Prior to insertion of the trusted kernel the electronic device may save its present state to the memory . In some cases the trusted kernel may take over as the base operating system for the graphics processing unit . The trusted kernel may be configured to repurpose a portion of the graphics processing unit such that the repurposed portion is able to perform non graphics related processing tasks general processing tasks trusted processing tasks or other processing tasks. Non graphics related processing tasks may comprise executing applications from the permissive sector executing applications from the trusted security zone general processing tasks trusted processing tasks and or performing other tasks. In some contexts general processing tasks may be substantially similar to non graphics related processing tasks. Trusted processing tasks may comprise performing graphics processing tasks general processing tasks and or non graphics related processing tasks in an environment of trust provided by the trusted security zone and or the trusted kernel .

The portion of the graphics processing unit that is repurposed may be about 10 about 20 about 30 about 40 about 50 about 60 about 70 about 80 about 90 or about 100 of the graphics processing unit . The percentage of the graphics processing unit that is repurposed may be a percentage of the graphics processing unit as a whole or a percentage of the processing resources of the graphics processing unit . Alternatively the portion of the graphics processing unit that is repurposed may be the portion of the graphics processing unit that is not processing graphics at the time of the repurposing. The trusted kernel may be configured to monitor the activity level of the graphics processing unit and determine when the graphics processing unit is performing a low level of graphics processing.

The portion of the graphics processing unit that is repurposed may be repurposed in response to low graphics processing levels. The graphics processing unit may have processing resources that are not in use during times of low processing activity. Low graphics processing levels may be graphics processing levels wherein about 10 about 20 about 30 about 40 about 50 about 60 about 70 about 80 about 90 or about 100 of the graphics processing unit is not processing graphics. In an embodiment the percentage of the graphics processing unit that is not processing graphics may be the percentage of the graphics processing unit s processing resources that are not processing graphics or the percentage of the graphics processing unit as a whole that is not processing graphics.

In an embodiment the trusted kernel may be configured to return the graphics processing unit to a graphics processing state from a state to which it had been repurposed. The graphics processing unit may be repurposed to the general processing state the trusted processing state or to some other processing state in order to take advantage of processing resources that are not in use as described hereinabove. The trusted kernel may return the graphics processing unit to the graphics processing state in response to a demand for a predetermined level of graphics processing.

The predetermined level of graphics processing at which the trusted kernel may return the graphics processing unit to the graphics processing state may be a level at which the graphics processing unit would use about 100 about 90 about 80 about 70 about 60 about 50 about 40 about 30 about 20 about 10 or about 1 of its processing resources. Alternatively the trusted kernel may return the graphics processing unit to the graphics processing state in response to any demand for graphics processing. Converting the graphics processing unit to the general processing state the trusted processing state or some other processing state in response to low graphics processing activity and returning the graphics processing unit to the graphics processing state in response to graphics processing demands may allow the electronic device to improve processing capacity while maintaining graphics processing capability.

In an embodiment the trusted kernel may be inserted into the graphics processing unit by and or from the trusted security zone . The CPU may direct the insertion of the trusted kernel into the graphics processing unit in response to detecting a low level of graphics processing activity in response to detecting processing resources that are not in use in response to insertion instructions in response to an elapsed period of time in response to a change in the graphics processing unit or in response to some other trigger. Once inserted into the graphics processing unit the trusted kernel may repurpose a portion of the graphics processing unit as described hereinabove. In some cases trust may be considered to have been established on the graphics processing unit after insertion of the trusted kernel into the graphics processing unit . The trusted kernel may execute trusted instructions and may prevent the graphics processing unit from executing applications from the permissive sector without first receiving trusted instructions to do so. The repurposed portion of the graphics processing unit may use processing resources that are not in use processing graphics to perform trusted processing tasks. In some cases the trusted kernel may prevent the graphics processing unit from performing any non trusted tasks. The trusted kernel may further direct a confidence check of the graphics processing unit as described in greater detail below.

The trusted kernel may remain in the graphics processing unit after insertion the trusted kernel may be removed after some period of time or the trusted kernel may be removed in response to stimuli. In some cases the graphics processing unit may comprise one or more separate kernels that are different from the trusted kernel . In an embodiment the one or more separate kernels may function as the base operating system for the graphics processing unit prior to the insertion of the trusted kernel . The trusted kernel may replace the separate kernels the trusted kernel may suspend processes on the separate kernels the trusted kernel may co exist with the separate kernels the trusted kernel may ignore the separate kernels or the trusted kernel may interact with the separate kernels in some other way while it remains in the graphics processing unit . During the time the trusted kernel remains in the graphics processing unit it may be in communication with the trusted security zone . The trusted kernel may relay information about the graphics processing unit to the trusted security zone . For example the trusted kernel may relay information about the activity level of the graphics processing unit and or information about graphics processing demands received by the graphics processing unit to the trusted security zone .

Alternatively instructions from the trusted security zone may be relayed to the trusted kernel . For example at times when the graphics processing unit has processing resources available instructions from the trusted security zone may call upon the trusted kernel to direct the graphics processing unit to perform non graphics related processing tasks such as executing applications from the trusted security zone and or executing applications from the permissive sector .

The trusted kernel may be removed from the graphics processing unit after one hour six hours one day two days one week one month one year three years after a predetermined number of changes have been made to the graphics processing unit or after some other period of time. Alternatively the trusted kernel may be removed in response to a demand for graphics processing. In an embodiment the trusted kernel may be inserted and removed in response to low graphics processing activity and demand for a predetermined level of graphics processing respectively. In an embodiment the trusted security zone may comprise a plurality of trusted kernels each comprising different operating systems. The trusted kernels may be selectively inserted into and removed from the graphics processing unit according to the non graphics related processing tasks the graphics processing unit is to be assigned.

In an embodiment the trusted security zone may invoke the graphics processing unit to perform trusted processing in parallel with the CPU . For example a user may make an automated teller machine ATM transaction. During this transaction it may be beneficial to the user to maintain an environment of trust in order to prevent nefarious programs from obtaining the user s personal information. The graphics processing unit may have processing resources available to be repurposed for trusted processing suitable for the processing demands of the trusted security zone . During the transaction the CPU may be placed in control of trusted processing associated with the user s personal identification number PIN while the repurposed portion of the graphics processing unit may be placed in control of trusted processing associated with a modem used in the transaction.

In an embodiment the graphics processing unit may comprise the trusted security zone and may insert the trusted kernel into the CPU . In this case the trusted security zone in the graphics processing unit may receive information from the trusted kernel and relay instructions to the trusted kernel as described hereinabove. While the graphics processing unit is highly optimized for processing graphics and may be repurposed for general processing trusted processing non graphics related processing and other processing the inherently different structure of the CPU may allow it to perform a wide range of processing tasks without being repurposed. In an embodiment the processing resources of the CPU may be used to execute instructions from the trusted security zone of the graphics processing unit .

In an embodiment the electronic device may perform a confidence check on the graphics processing unit . It should be understood that while performing the confidence check will be described with reference to the graphics processing unit the confidence check may be performed in a substantially similar manner to evaluate the integrity of other processors of the electronic device . The confidence check may be performed in response to powering on the electronic device inserting the trusted kernel executing by the graphics processing unit one of the plurality of non trusted applications detecting unused processing resources in the graphics processing unit or in response to something else. In an embodiment the confidence check may be performed prior to repurposing the portion of the graphics processing unit as described hereinabove. Performing the confidence check prior to repurposing the portion of the graphics processing unit may allow the portion of the graphics processing unit to be repurposed in a non trusted state with confidence that the graphics processing unit has not been compromised. The electronic device may be configured to perform the confidence check on one or more kernels of the graphics processing unit . For example the confidence check may be performed on the one or more separate kernels described hereinabove. The confidence check may be initiated by the CPU the trusted security zone the trusted kernel or by something else.

The confidence check may comprise performing an error detection action such as a checksum a bit count of the kernels a cyclic redundancy check a repetition code check a horizontal redundancy check a vertical redundancy check checking information about a parity bit checking a digital signature performing a cryptographic hash function or performing another type of check configured to evaluate the integrity of the kernels of the graphics processing unit . In an embodiment a trusted application of the trusted applications may be configured to amass information about an uncompromised state of kernels on the graphics processing unit and store the information as trusted information in the trusted security zone for use when the electronic device performs the confidence check.

The uncompromised state of the kernels may be a state that is free from sniffers malware trojans spyware viruses and other nefarious programs. The kernels may be provided in the uncompromised state at the time of manufacture and may have information about their uncompromised state stored as trusted information in the trusted security zone of the memory at that time. Information about the uncompromised state of the kernels may comprise information to be used in the confidence check. For example the information may be information about an error detection action such as a checksum a bit count of the kernels information about a cyclic redundancy check information about a repetition code information about a horizontal redundancy check information about a vertical redundancy check information about a parity bit a digital signature or information about a cryptographic hash function. In the case of a checksum the trusted application may obtain a checksum value for the uncompromised state of each of the kernels of the graphics processing unit and store the values in the trusted security zone

In an embodiment the electronic device may activate the trusted application to perform the confidence check in response to powering on the electronic device inserting the trusted kernel executing by the graphics processing unit one of the plurality of non trusted applications detecting unused processing resources in the graphics processing unit or in response to something else. The confidence check may comprise comparing the information about the uncompromised state kernels of the graphics processing unit with a current state of the kernels. The current state may be the state of the kernels at the time of the confidence check. The comparison may comprise comparing a checksum value obtained for the uncompromised state of the kernels with a checksum value obtained for the current state of the kernels. Alternatively the comparison may comprise comparing results of an error detection action performed on the uncompromised state and the current state of the kernels as described hereinabove with reference to the confidence check or it may comprise comparing results from another error detection action performed by the electronic device .

In an embodiment the electronic device may be configured to respond to a result of the comparison between the current state and the uncompromised state of the kernels of the graphics processing unit . The response may be to allow the graphics processing unit to function normally in response to the result when the result indicates that the current state of the kernels corresponds to the uncompromised state of the kernels. The uncompromised state and the current state of the kernels may be said to correspond if the comparison indicates that the current state of the kernels is unaltered from the uncompromised state of the kernels. In this case the electronic device may have confidence that the trusted security zone will not be compromised by allowing the graphics processing unit to function normally when the result indicates that the two states of the kernels correspond.

Alternatively the electronic device may respond by disallowing the graphics processing unit to function or by attempting to return the graphics processing unit to the uncompromised state in response to the result when the result indicates that the current state of the kernels does not correspond to the uncompromised state of the kernels. When the result indicated that the current state of the kernels does not correspond to the uncompromised state of the kernels the electronic device may prevent the graphics processing unit from functioning and may call on the CPU to perform simple graphics processing and or to run error screens indicating a loss of functionality. For example when the electronic device encounters graphics processing demands that are beyond the capabilities of the CPU the CPU may instruct a display of the electronic device to display an error screen indicating that the graphics processing demand cannot be met. The electronic device may enact this response in order to inhibit nefarious programs from operating on the electronic device and or corrupting the trusted security zone .

Turning now to a communication system is described. In an embodiment the communication system comprises the electronic device a base transceiver station BTS a wireless access point AP a network a trusted server SVR and a data store DB . The electronic device may access the network through wireless communication with the base transceiver station provided by the radio frequency transceiver and or through the wireless access point . Additionally it is contemplated that the electronic device may be hardwired to the network . The network may be connected to the trusted server which may be connected to the data store . The electronic device may access information on the network through end to end trusted communication infrastructure as described hereinabove.

Though the communication system is depicted as comprising singular components i.e. one base transceiver station and one network it should be understood that the communication system may comprise a plurality of each component. The communication system may comprise a plurality of base transceiver stations a plurality of networks a plurality of servers a plurality of data stores a plurality of wireless access points and or a plurality of electronic devices that may be connected to the network . For example the communication system may comprise a plurality of electronic devices that are hardwired to the network and that may access a plurality of servers . Alternatively the communication system may comprise a plurality of electronic devices wirelessly connected to the network through a plurality of base transceiver stations . As shown in there may be a plurality of electronic devices connected to the network each in a different way.

In an embodiment the electronic device may stream video from the server over the network for presentation on a display. While the streaming video is being played and presented on the display the graphics processing unit may be active compiling images and may not have unused processing resources. If the video is paused the graphics processing unit may use less processing resources to present a constant image associated with the paused video. Thus the graphics processing unit may have unused processing resources available while the video is paused. The electronic device may make use of the unused processing resources as described with reference to .

In an embodiment the electronic device may allow a user of the electronic device to participate in a video conference. The video conference may be established by connecting the electronic device with another electronic device potentially another electronic device over the network . During the video conference the graphics processing unit may receive demands for a rapid wash of images to be compiled for presentation on the display. As discussed the graphics processing unit may not have unused processing resources during times of intense graphics processing. Processing resources may become available if an onscreen participant of the video conference leaves the screen. The screen may display an unchanging image after the onscreen participant leaves the screen and may not display a dynamic image again until the onscreen participant returns to the screen. For example the video conference may be between two people each alone in a room with stationary surroundings. When a person steps off screen the image displayed on the screen will become stationary which may free up processing resources of the graphics processing unit . The electronic device may make use of the unused processing resources as described with reference to .

In an embodiment the electronic device may access webpages on the internet and display their contents to a user. The graphics processing unit may be actively processing graphics when the user is changing from webpage to webpage but may experience lower graphics processing levels when the user remains on the same webpage for an extended period of time. Low levels of graphics processing may be indicative of unused processing resources available on the graphics processing unit . The electronic device may make use of the unused processing resources as described with reference to . In an embodiment the electronic device may make use of the unused processing resources only after low graphics processing has continued for a predefined time period. The predefined time period may be immediately about one second about five seconds about ten seconds about thirty seconds about one minute about five minutes about ten minutes about thirty minutes about an hour or some other time period.

Turning now to a method is described. The method may be implemented in the electronic device described hereinabove with reference to and and may make use of the trusted kernel the graphics processing unit the trusted security zone the permissive sector the CPU the trusted information the plurality of trusted applications the memory and or other components of the electronic device . At block a trusted kernel may be inserted into a graphics processing unit. In an embodiment the graphics processing unit may be a non trusted graphics processing unit. The trusted kernel may be inserted at the time of manufacture or at some other time. For example the trusted kernel may be inserted by a trusted security zone as described hereinabove. The activity level of the graphics processing unit may be monitored at block . The activity level may be monitored by the trusted security zone the trusted kernel an application a CPU or by something else.

In an embodiment the graphics processing unit may be prevented from running non trusted applications absent trusted instructions. In an embodiment the graphics processing unit may be prevented from running non trusted applications by the trusted kernel. The graphics processing unit may be allowed to run non trusted application in response to trusted instructions from the trusted kernel from the trusted security zone or from another trusted source. The trusted security zone may be in communication with the trusted kernel and may provide instructions for the graphics processing unit through the trusted kernel. In some cases instructions from the trusted kernel may be considered trusted instructions and or instructions from the trusted security zone.

At block graphics processing may be suspended on a portion of the graphics processing unit. The portion of the graphics processing unit on which graphics processing has been suspended may be about 5 about 10 about 20 about 30 about 40 about 50 about 60 about 70 about 80 about 90 or about 100 of the graphics processing unit. A portion of the graphics processing unit may be repurposed at block . In an embodiment the portion of the graphics processing unit that is repurposed may be the portion of the graphics processing unit on which graphics processing has been suspended.

The portion of the graphics processing unit may be repurposed to perform non graphics related processing tasks in response to low graphics processing activity. In some cases the portion of the graphics processing unit may be repurposed to perform trusted processing tasks in response to low graphics processing activity. Trusted processing tasks may comprise non graphics related processing tasks and or general processing tasks as described hereinabove with reference to . The portion of the graphics processing unit that is repurposed may be about 10 about 20 about 30 about 40 about 50 about 60 about 70 about 80 about 90 or about 100 of the graphics processing unit. In an embodiment the percentage of the graphics processing unit that is repurposed may be a percentage of the processing resources of the graphics processing unit or a percentage of the graphics processing unit as a whole. Alternatively the portion of the graphics processing unit that is repurposed may be the portion of the graphics processing unit that is not processing graphics at the time of the repurposing.

The trusted kernel may be configured to monitor the activity level of the graphics processing unit and determine when the graphics processing unit is performing a low level of graphics processing. Low graphics processing levels may be graphics processing levels wherein about 10 about 20 about 30 about 40 about 50 about 60 about 70 about 80 about 90 or about 100 of the graphics processing unit is not processing graphics. The percentage of the graphics processing unit that is not processing graphics may be the percentage of the graphics processing unit s processing resources that are not processing graphics or the percentage of the graphics processing unit as whole that is not processing graphics.

The portion of the graphics processing unit may be released from trusted processing at block . In an embodiment the portion of the graphics processing unit may be released in response to receiving a demand for graphics processing. The graphics processing unit may resume processing graphics upon release. Releasing the portion of the graphics processing unit may allow the graphics processing unit to apply full processing resources to meet the graphics processing demand. In an embodiment the portion of the graphics processing unit repurposed for trusted processing may be released from trusted processing in response to a demand for graphics processing that calls for about 10 about 20 about 30 about 40 about 50 about 60 about 70 about 80 about 90 or about 100 of the graphics processing unit to process graphics in order to meet the demand. Alternatively the portion of the graphics processing unit repurposed for trusted processing may be released from trusted processing in response to any demand for graphics processing. As described hereinabove the percentages of the graphics processing unit called for graphics processing may refer to percentages of processing resources or percentages of the graphics processing unit as a whole.

Turning now to a method is described. The method may be implemented in the electronic device described hereinabove with reference to and and may make use of the trusted kernel the graphics processing unit the trusted security zone the permissive sector the CPU the trusted information the plurality of trusted applications the memory and or other components of the electronic device .

At block a trusted kernel may be provided in a trusted security zone of an electronic device. The trusted kernel may when inserted into a graphics processing unit determine the activity level of the graphics processing unit and repurpose a portion of the graphics processing unit from a graphics processing state to a non graphics related processing state. The portion of the graphics processing unit may be repurposed to the non graphics related processing state in response to determining that the graphics processing unit has processing resources available. The non graphics related processing state may be a trusted processing state and or a general processing state as described hereinabove. The trusted kernel may further return the portion of the graphics processing unit to the graphics processing state in response to a trigger. In an embodiment the trigger may be a demand for graphics processing as described above with reference to instructions from the trusted security zone an elapsed period of time a change in the graphics processing unit or instructions from another source.

The trusted kernel may be inserted into the graphics processing unit at block . In an embodiment the trusted kernel may be inserted into the graphics processing unit at the time of manufacture. Alternatively the trusted kernel may be inserted into the graphics processing unit at some time after manufacture. The trusted kernel may be inserted into the graphics processing unit by the trusted security zone and or from the trusted security zone as described hereinabove with reference to . Inserting the trusted kernel configured to repurpose the graphics processing unit for non graphics related processing may allow the electronic device to allocate some of a CPU s processing tasks to the graphics processing unit when the graphics processing unit has processing resources available which may free up CPU processing resources and may improve the speed and efficiency of the electronic device. Alternatively inserting the trusted kernel into the graphics processing unit may establish the trusted security zone on the graphics processing unit and the graphics processing unit may allocate processing tasks to the CPU. In an embodiment the CPU and the graphics processing unit may be configured to run in a time sliced fashion as discussed hereinabove with reference to virtual processors.

Turning now to a method is described. The method may be implemented in the electronic device described hereinabove with reference to and and may make use of the trusted kernel the graphics processing unit the trusted security zone the permissive sector the CPU the trusted information the plurality of trusted applications the memory and or other components of the electronic device . A confidence check may be performed on at least one kernel of a graphics processing unit in an electronic device at block . For example the confidence check may be performed on the one or more separate kernels described hereinabove with reference to . In an embodiment the confidence check may be performed as described hereinabove with reference to the graphics processing unit described in the discussion of . The confidence check may be performed on a graphics processing unit of the electronic device on a CPU of the electronic device or on some other processing component of the electronic device.

At block a current state of the graphics processing unit may be compared with an uncompromised state of the graphics processing unit stored in a trusted security zone of the electronic device. In an embodiment the current state and the uncompromised state of kernels of the graphics processing unit may be considered to be representative of the current state and the uncompromised state of the graphics processing unit as a whole. The current state of the graphics processing unit may be the state of the graphics processing unit at the time of the confidence check. The uncompromised state of the graphics processing unit may be a state free of sniffers malware trojans spyware viruses and other nefarious programs.

The integrity of the graphics processing unit and or one or more kernels operating on the graphics processing unit may be evaluated at block based on the comparing the current state of the graphics processing unit with the uncompromised state of the graphics processing unit. In some cases evaluating the integrity of the graphics processing unit may comprise evaluating the integrity of one or more kernels operating on the graphics processing unit. In an embodiment the integrity of the graphics processing unit may be evaluated based upon analyzing a result of the comparison. The result may be analyzed by a CPU of the electronic device a trusted application of the electronic device the trusted security zone of the electronic device or by something else. The integrity of the graphics processing unit may be confirmed if the analysis of the result indicates that the current state of the graphics processing unit corresponds with the uncompromised state of the graphics processing unit. The integrity of the graphics processing unit may fail to be confirmed if the analysis of the result indicates that the current state of the graphics processing unit does not correspond with the uncompromised state of the graphics processing unit.

At block an action may be performed in response to a result of the evaluating. In an embodiment the electronic device may be configured to allow the graphics processing unit to function normally in response to the result when the result indicates that the current state of the graphics processing unit corresponds to the uncompromised state of the graphics processing unit. The uncompromised state and the current state of the graphics processing unit may be said to correspond if the comparison indicates that the current state of the graphics processing unit is unaltered from the uncompromised state of the graphics processing unit. In this case the electronic device may have confidence that the trusted security zone will not be compromised by allowing the graphics processing unit to function normally when the result indicates that the two states of the graphics processing unit correspond. In some cases the action may comprise repurposing a portion of the graphics processing unit as described hereinabove with reference to the graphics processing unit .

Alternatively the electronic device may disallow the graphics processing unit to function or attempt to return the graphics processing unit to the uncompromised state in response to the result when the result indicates that the current state of the graphics processing unit does not correspond to the uncompromised state of the graphics processing unit. The electronic device may enact this response in order to inhibit nefarious programs from corrupting the trusted security zone.

Performing the confidence check on the graphics processing unit may allow the electronic device to detect nefarious programs that it may have been otherwise unable to detect which may provide greater security to the electronic device. Detecting nefarious programs that may have otherwise gone undetected may further fortify the trusted security zone.

Turning now to a method is described. The method may be implemented in the electronic device described hereinabove with reference to and . At block a trusted kernel may be provided in a trusted security zone of an electronic device. The trusted kernel may be inserted into a graphics processing unit at block . In an embodiment the trusted kernel may be inserted in response to instructions from the trusted security zone. The activity level of the graphics processing unit may be determined at block . At block a portion of the graphics processing unit may be repurposed from a graphics processing state to a trusted processing state in response to determining that the graphics processing unit has processing resources available. In some cases the graphics processing state may be a state in which the graphics processing unit is functioning in the permissive sector. In an embodiment the portion of the graphics processing unit that is repurposed may be about 5 about 10 about 20 about 30 about 40 about 50 about 60 about 70 about 80 about 90 or about 100 . The trusted processing state may be a non graphics processing state.

The non graphics related processing state may be a general processing state a type of trusted processing state or some other processing state. The portion of the graphics processing unit may be returned to the graphics processing state at block in response to a trigger. In an embodiment the trigger may be an indication of a demand for graphics processing. Alternatively the trigger may be the demand for graphics processing. In an embodiment the method may further comprise establishing communication between the trusted kernel and the trusted security zone of the electronic device. For example a communication link may be established between the trusted kernel and the trusted security zone partition on a CPU of the electronic device.

The DSP or some other form of controller or central processing unit operates to control the various components of the mobile device in accordance with embedded software or firmware stored in memory or stored in memory contained within the DSP itself. In addition to the embedded software or firmware the DSP may execute other applications stored in the memory or made available via information carrier media such as portable data storage media like the removable memory card or via wired or wireless network communications. The application software may comprise a compiled set of machine readable instructions that configure the DSP to provide the desired functionality or the application software may be high level software instructions to be processed by an interpreter or compiler to indirectly configure the DSP .

The DSP may communicate with a wireless network via the analog baseband processing unit . In some embodiments the communication may provide Internet connectivity enabling a user to gain access to content on the Internet and to send and receive e mail or text messages. The input output interface interconnects the DSP and various memories and interfaces. The memory and the removable memory card may provide software and data to configure the operation of the DSP . Among the interfaces may be the USB port and the infrared port . The USB port may enable the mobile device to function as a peripheral device to exchange information with a personal computer or other computer system. The infrared port and other optional ports such as a Bluetooth interface or an IEEE 802.11 compliant wireless interface may enable the mobile device to communicate wirelessly with other nearby handsets and or wireless base stations.

The keypad couples to the DSP via the interface to provide one mechanism for the user to make selections enter information and otherwise provide input to the mobile device . Another input mechanism may be the touch screen LCD which may also display text and or graphics to the user. The touch screen LCD controller couples the DSP to the touch screen LCD . The GPS receiver is coupled to the DSP to decode global positioning system signals thereby enabling the mobile device to determine its position.

It is understood that by programming and or loading executable instructions onto the computer system at least one of the CPU the RAM and the ROM are changed transforming the computer system in part into a particular machine or apparatus having the novel functionality taught by the present disclosure. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an application specific integrated circuit ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

The secondary storage is typically comprised of one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if RAM is not large enough to hold all working data. Secondary storage may be used to store programs which are loaded into RAM when such programs are selected for execution. The ROM is used to store instructions and perhaps data which are read during program execution. ROM is a non volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage . The RAM is used to store volatile data and perhaps to store instructions. Access to both ROM and RAM is typically faster than to secondary storage . The secondary storage the RAM and or the ROM may be referred to in some contexts as computer readable storage media and or non transitory computer readable media.

I O devices may include printers video monitors liquid crystal displays LCDs touch screen displays keyboards keypads switches dials mice track balls voice recognizers card readers paper tape readers or other well known input devices.

The network connectivity devices may take the form of modems modem banks Ethernet cards universal serial bus USB interface cards serial interfaces token ring cards fiber distributed data interface FDDI cards wireless local area network WLAN cards radio transceiver cards such as code division multiple access CDMA global system for mobile communications GSM long term evolution LTE worldwide interoperability for microwave access WiMAX and or other air interface protocol radio transceiver cards and other well known network devices. These network connectivity devices may enable the CPU to communicate with the Internet or one or more intranets. With such a network connection it is contemplated that the CPU might receive information from the network or might output information to the network in the course of performing the above described method steps. Such information which is often represented as a sequence of instructions to be executed using CPU may be received from and outputted to the network for example in the form of a computer data signal embodied in a carrier wave.

Such information which may include data or instructions to be executed using CPU for example may be received from and outputted to the network for example in the form of a computer data baseband signal or signal embodied in a carrier wave. The baseband signal or signal embedded in the carrier wave or other types of signals currently used or hereafter developed may be generated according to several methods well known to one skilled in the art. The baseband signal and or signal embedded in the carrier wave may be referred to in some contexts as a transitory signal.

The CPU executes instructions codes computer programs scripts which it accesses from hard disk floppy disk optical disk these various disk based systems may all be considered secondary storage ROM RAM or the network connectivity devices . While only one CPU is shown multiple processors may be present. Thus while instructions may be discussed as executed by a processor the instructions may be executed simultaneously serially or otherwise executed by one or multiple processors. Instructions codes computer programs scripts and or data that may be accessed from the secondary storage for example hard drives floppy disks optical disks and or other device the ROM and or the RAM may be referred to in some contexts as non transitory instructions and or non transitory information.

In an embodiment the computer system may comprise two or more computers in communication with each other that collaborate to perform a task. For example but not by way of limitation an application may be partitioned in such a way as to permit concurrent and or parallel processing of the instructions of the application. Alternatively the data processed by the application may be partitioned in such a way as to permit concurrent and or parallel processing of different portions of a data set by the two or more computers. In an embodiment virtualization software may be employed by the computer system to provide the functionality of a number of servers that is not directly bound to the number of computers in the computer system . For example virtualization software may provide twenty virtual servers on four physical computers. In an embodiment the functionality disclosed above may be provided by executing the application and or applications in a cloud computing environment. Cloud computing may comprise providing computing services via a network connection using dynamically scalable computing resources. Cloud computing may be supported at least in part by virtualization software. A cloud computing environment may be established by an enterprise and or may be hired on an as needed basis from a third party provider. Some cloud computing environments may comprise cloud computing resources owned and operated by the enterprise as well as cloud computing resources hired and or leased from a third party provider.

In an embodiment some or all of the functionality disclosed above may be provided as a computer program product. The computer program product may comprise one or more computer readable storage medium having computer usable program code embodied therein to implement the functionality disclosed above. The computer program product may comprise data structures executable instructions and other computer usable program code. The computer program product may be embodied in removable computer storage media and or non removable computer storage media. The removable computer readable storage medium may comprise without limitation a paper tape a magnetic tape magnetic disk an optical disk a solid state memory chip for example analog magnetic tape compact disk read only memory CD ROM disks floppy disks jump drives digital cards multimedia cards and others. The computer program product may be suitable for loading by the computer system at least portions of the contents of the computer program product to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system . The CPU may process the executable instructions and or data structures in part by directly accessing the computer program product for example by reading from a CD ROM disk inserted into a disk drive peripheral of the computer system . Alternatively the CPU may process the executable instructions and or data structures by remotely accessing the computer program product for example by downloading the executable instructions and or data structures from a remote server through the network connectivity devices . The computer program product may comprise instructions that promote the loading and or copying of data data structures files and or executable instructions to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system .

In some contexts the secondary storage the ROM and the RAM may be referred to as a non transitory computer readable medium or a computer readable storage media. A dynamic RAM embodiment of the RAM likewise may be referred to as a non transitory computer readable medium in that while the dynamic RAM receives electrical power and is operated in accordance with its design for example during a period of time during which the computer is turned on and operational the dynamic RAM stores information that is written to it. Similarly the CPU may comprise an internal RAM an internal ROM a cache memory and or other internal non transitory storage blocks sections or components that may be referred to in some contexts as non transitory computer readable media or computer readable storage media.

While several embodiments have been provided in the present disclosure it should be understood that the disclosed systems and methods may be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

Also techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein.

