---

title: Operational reporting in a computing environment
abstract: In a system that provides network-based computer infrastructure services, a monitoring agent is installed on a computer to gather and report operational metrics from various sources, which may include infrastructure support services as well as elements of the computer itself. Metrics to be gathered and reported by the monitoring agent, as well as the format in which metrics are to be reported, are specified declaratively so that they can be changed without altering the procedural aspects of the monitoring agent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09185008&OS=09185008&RS=09185008
owner: Amazon Technologies, Inc.
number: 09185008
owner_city: Reno
owner_country: US
publication_date: 20130314
---
Large scale network based computing represents a paradigm shift from traditional client server computing relationships. With large scale network based service platforms e.g. data centers customers are able to leverage shared resources on demand by renting resources that are owned by third parties and that reside in the cloud. With these resources users of the platform are able to launch and maintain large applications without actually owning or servicing the underlying infrastructure necessary for these applications. As a result network based service platforms have expanded the class of individuals and companies able to effectively compete in the realm of computing applications.

This disclosure describes systems components and techniques for monitoring and reporting with respect to resources that are implemented in online or network accessible computing infrastructures including virtual computing infrastructures. Such resources may include physical and or virtual computers and servers data storage processors functional units services etc.

When using an infrastructure provider a customer may utilize multiple virtual computers also referred to as virtual machines or machine instances. Each virtual machine may have its own operating system OS which is referred to in this environment as a guest OS. The virtual machine may operate within a virtual private network and may interact with other resources such as network components storage resources and so forth which may be provided by the infrastructure provider. One or more applications are typically installed by the customer on the virtual machine to provide the specific functionality desired by the customer.

In this environment operational metrics regarding a virtual machine are available to the customer from various sources. Certain metrics may be obtained from the guest OS of the virtual machine for example. In addition other metrics may be available from sources outside the virtual machine such as from supervisory or support services of the computing infrastructure. In many cases the infrastructure supervisory services do not however have access to information from the guest OS.

Customers may at times wish to install pre designed or off the shelf applications on virtual machines. In some cases applications such as this may be designed to receive operational information regarding the virtual computers upon which they are executing as well as information regarding other elements of the supporting infrastructure. Certain applications may expect specific metrics in specific formats. Different applications may expect different collections of metrics and may expect to receive such metrics in various different formats.

In order to provide operational information to a computer application and other clients a monitoring agent executes within the virtual computer upon which the computer application is installed. The monitoring agent is configured to interact with elements of the virtual computer such as the guest OS of the virtual computer to obtain operational information regarding the virtual computer. In addition the monitoring agent is configured to interact with elements of the virtual computing infrastructure in order to obtain additional operational information regarding the virtual computer as well as to obtain operational information regarding infrastructure components and services. Operational information may relate to performance utilization efficiency speed capacity status errors and other aspects relating to the operations of elements and components.

The monitoring agent is configurable by means of declarative specifications so that desired operational metrics and output formats may be defined and obtained without modifying or redesigning the procedural aspects of the monitoring agent. The declarative specifications include a source specification that specifies a plurality of operational metrics that are to be retrieved by the monitoring agent. The source specification specifies a declarative set of parameters corresponding to each operational metric. Each set of parameters specifies a source of the corresponding operational metric including information allowing the monitoring agent to query an appropriate information source to obtain the corresponding metric.

The declarative specifications may also include a format specification that lists a subset of the metrics specified by the source specification. The format specification may declaratively specify a format for a report that is to be prepared by the monitoring agent and provided to requesting clients in which each of the listed metrics is included.

The report prepared by the monitoring agent may be requested by and provided to various clients. For example an application executing on the virtual computer may request and utilize the operational information provided by the monitoring agent. As another example clients external to the virtual machine and or to the virtual computing infrastructure may request and receive operational information from the monitoring agent.

A computing infrastructure such as the computing infrastructure of typically provides various types of infrastructure administrative and support services . The support services allow creation modification and deletion of infrastructure resources such as virtual machines. The support services may also be queried to obtain operational status and metrics regarding resources provided to the customer of the computing infrastructure .

The support services may be accessible to customers or users through interactive interfaces. The support services may also or alternatively be accessible to applications and other logical elements through programmatic means. For example applications executing on virtual machines may use APIs application program interfaces exposed by the infrastructure support services to retrieve information regarding resources such as virtual machines and supporting infrastructure.

More specifically the support services may implement a plurality of management and or reporting components or web services to provide different types of metrics regarding virtual machine instances and other aspects of the customer s virtual computing environment.

For example a management reporting component may be available for providing metadata regarding individual virtual machine instances. Such metadata may include metrics such as instance IDs network addresses security information instance types and so forth.

As another example another management reporting component may be available for providing metrics relating to infrastructure resources including metrics relating to resource utilization application performance and operational health.

As yet another example the support services may include administrative services for creating and managing virtual machine instances.

The management reporting components of the support services may be accessible through various programmatic means including function calls APIs HTTP hypertext transfer protocol interfaces and so forth.

In some embodiments the support services may be configured to interact with users according to a web services model and the management reporting components may be implemented as web services. Generally speaking a web service may refer to any type of computing service that is made available to a requesting client via a request interface that includes one or more Internet based application layer data transport protocols such as a version of the Hypertext Transport Protocol HTTP or another suitable protocol. In this embodiment the management reporting components may expose web services endpoints having Uniform Resource Locators URLs e.g. http storageservice.domain.com. Clients may interact with the management reporting components through the corresponding web services endpoints .

Web services may be implemented in a variety of architectural styles using a variety of enabling service protocols. For example in a Representational State Transfer REST style web services architecture the parameters that are pertinent to a web services call e.g. specifying the type of service requested user credentials user data to be operated on etc. may be specified as parameters to the data transport command that invokes the web services call to the web services endpoint such as an HTTP GET or PUT command. In some implementations REST style web services architectures are stateless in that each web services call may contain all the information necessary to process that call without reference to external state information. In contrast to REST style web services architectures document based or message based web services architectures may encode the parameters and data pertinent to a web services call as a document that may be transmitted to a web services endpoint and then decoded and acted upon by the endpoint. For example a version of eXtensible Markup Language XML or another suitable markup language may be used to format the web services request document. In some embodiments the markup language used to format the request document may delimit parameters that control the processing of the request while in other embodiments certain features of the markup language itself e.g. certain tags may directly control aspects of request processing. Additionally in some embodiments the resulting document may be encapsulated within another protocol such as a version of the Simple Object Access Protocol SOAP for example in order to facilitate processing of the web services request by the endpoint.

Other protocols may also be employed within various embodiments of web services architectures. For example a version of Web Services Description Language WSDL may be employed by a web services endpoint to publish its interfacing requirements to potential clients. Web services endpoints may make themselves known to potential clients through a directory protocol such as a version of the Universal Description Discovery and Integration UDDI protocol. Numerous other types of protocols relating to the provision of computing services via web services interfaces may exist and any given web services implementation may use any suitable combination of such protocols.

It is contemplated that in some embodiments the management reporting components may support interfaces other than web services interfaces instead of or in addition to web services interfaces. For example an enterprise may implement a particular service for use by clients external to the enterprise who may access the service via web services protocols as well as users within the enterprise who may use a different type of interface e.g. a proprietary interface customized to the enterprise s intranet . In some embodiments management reporting components may support each of the various types of interfacing protocols through which any user of the storage service may access the service. In other embodiments different instances of the management reporting components may be provided for each distinct interface approach.

A customer of the computing infrastructure may create a virtual machine through appropriate interaction with the infrastructure support services . The virtual machine may be configured with a guest operating system OS and one or more applications . In addition the customer may install a monitoring agent on the virtual machine. The monitoring agent may be configured to obtain operational metrics regarding the virtual machine and the environment of the virtual machine and to report the metrics to a client . The client may be external to the virtual machine and computing infrastructure as illustrated or may be a programmatic component within the virtual machine . For example the client may in some situations comprise one of the applications . In other words an application may be configured to act as a client to the monitoring agent and to receive operational metrics from the monitoring agent .

The monitoring agent is configured to gather operational metrics from the various management reporting components of the infrastructure support services . In addition the monitoring agent is configured to gather operational metrics from the virtual machine itself such as from the operating system of the virtual machine . The monitoring agent is further configured to aggregate and format the gathered operational metrics and to report the metrics to the client . The specific metrics to be obtained and reported as well as the characteristics of the report provided to the client are defined declaratively by editable source and format specifications so that both the metrics and the reporting format may be changed without modifying the monitoring agent itself. More specifically different metrics may be selected for reporting and the format of the reporting may be changed without requiring changes to the procedural or programmatic aspects of the monitoring agent .

The source specification lists a plurality of metric definitions. Each metric definition indicates an individual operational metric to be gathered or retrieved by the monitoring agent as well as a set of parameters that indicates declaratively how to obtain the metric. The parameters for a particular metric may include a source name or identifier indicating a source of the metric. Possible sources may include any one of the management reporting components the guest operating system and other components or elements including one or more of the applications . The parameters corresponding to a particular metric may also include identifying information regarding the metric such as its name the function or API name that should be used to retrieve the metric and other information that may be needed to obtain the metric. As specific examples the metric parameters may include one or more of the following 

The source specification may be provided in an appropriate declarative language such as JSON JavaScript Object Notation or XML Extensible Markup Language . JSON and XML are examples of text based declarative formats in which parameters may be specified as hierarchical collections of name value pairs.

In some cases the source specification may include static metrics to be associated with metric definitions. In other words a metric definition may specify static data rather than a dynamic data source.

The format specification lists a set of metrics that are to be reported to the client as well as information regarding how the metrics should be formatted. Generally metrics are specified in the format specification by referencing metric names defined in the source specification . The format specification may provide names and other information regarding the metrics that are to be provided to the client . The format specification may be provided in a text based declarative language such as JSON or XML in which parameters and data are specified as hierarchical collections of name value pairs.

The monitoring agent may have a plurality of service interfaces corresponding respectively to different metrics providers such as the guest operating system of the virtual machine and the management reporting components of the infrastructure support services . The service interfaces provide the procedural functionality for interacting with the metrics providers. An individual service interface may be configured for interaction with a specific type of metrics provider such as by using appropriate function calls API calls and so forth. Procedural aspects of provider interaction are provided by the service interfaces while specific parameters regarding individual metrics are provided declaratively by the definitions of the source specification .

In operation the client may issue a request to obtain a formatted report . In some implementations the request may be submitted to an HTTP server which may be implemented by the monitoring agent or otherwise implemented in conjunction with the virtual machine . For example the HTTP server may be implemented as a background service on the virtual machine . Upon receiving a request the HTTP server interacts with the monitoring agent to obtain the formatted report and provides the formatted report to the requesting client . The formatted report contains all of the metrics specified by the format specification . Depending on the nature of the format specification the report may be formatted to comply with a hierarchical markup language such as XML.

The source and format specifications and may be selected or configured to provide a report that contains the data expected by any particular client and that is formatted as expected by the client . Different types of clients having different expectations for report data may be accommodated by providing different source and format specifications and .

An action comprises receiving and or accessing a source specification . The source specification comprises a plurality of metric definitions corresponding respectively to different metrics that are to be gathered from the environment of the virtual machine and its applications. Each metric definition specifies a metric that is available from the virtual machine or its supporting infrastructure. In addition each metric definition includes a set of parameters corresponding to the metric specified by the definition. Each set of parameters declaratively specifies a source of the corresponding operational metric as well as other parameters that may be expected by the source in order to identify a particular one of many available metrics.

An action comprises gathering or retrieving a plurality of operational metrics. This may comprise gathering from a virtual machine upon which the monitoring agent is installed and may further include gathering metrics from the virtual computing infrastructure upon which the virtual machine is implemented. The gathering is based at least in part on the declarative source specification. Specifically operational metrics to be gathered from the virtual machine and the supporting infrastructure are specified by the source specification as described above.

An action comprises aggregating the metrics that have been gathered from the virtual machine and supporting infrastructure.

An action comprises receiving and or accessing a declarative format specification also referred to herein as an output specification which specifies a set or subset of the operational metrics of the source specification .

An action comprises formatting the retrieved metrics based at least on part on the format specification to create a report that contains the set of operational metrics specified by the declarative output specification .

An action comprises providing the report to a requesting or consuming client. The client may comprise an application running on the same virtual machine as the monitoring service or may be external to the virtual machine and or virtual computing infrastructure.

In some embodiments reports may be created periodically and cached so that they can be provided immediately to requesting clients. For example a particular report may be created and cached every 60 seconds. When a client requests the report it is then provided from the cache. This avoids any delays that may be associated with querying the management reporting components .

The techniques described above provide a flexible way of providing reporting services to various types of applications that may be installed by customers in conjunction with a virtual computing infrastructure. The particular metrics to be gathered as well as the nature and format of reports provided to requesting clients may be easily varied by editing declarative files rather than by reprogramming data collection agents.

The example computer may comprise one or more processing units and one or more forms of computer readable memory . The memory may comprise volatile and nonvolatile memory. Thus the memory may include but is not limited to RAM ROM EEPROM flash memory or other memory technology or any other medium which can be used to store applications and data. The memory may also include removable media such as optical disks portable devices drives and so forth.

The memory may be used to store any number of functional components such as programs and program modules that are executable on the processing unit . For example the memory may store an operating system and various applications or user specified programs . The operating system and or the user specified programs may include components modules and or logic for performing the actions described herein. More specifically executable components stored in the memory may comprise computer executable instructions that when executed cause the one or more processing units to perform acts and to implement techniques described herein.

The computer may also have user input output components such as a display keyboard mouse etc. The computer may also comprise a communications interface such as a network interface.

Generally the functionality described herein may be implemented by one or more computers such as shown by or by similar devices with the various actions described above distributed in various ways across the different computers. Computers of the computing infrastructure may be located together or separately and organized as virtual servers server banks and or server farms. The described functionality may be provided by the computers of a single entity or enterprise or may utilize the computers and or services of multiple entities or enterprises.

The environment and individual elements described herein may of course include many other logical programmatic and physical components of which those shown in the accompanying figures are merely examples that are related to the discussion herein.

The various techniques described herein are assumed in the given examples to be implemented in the general context of computer executable instructions or software such as program modules that are stored in computer readable storage and executed by the processor s of one or more computers or other devices such as those illustrated in the figures. Generally program modules include routines programs objects components data structures etc. and define operating logic for performing particular tasks or implement particular abstract data types.

Other architectures may be used to implement the described functionality and are intended to be within the scope of this disclosure. Furthermore although specific distributions of responsibilities are defined above for purposes of discussion the various functions and responsibilities might be distributed and divided in different ways depending on circumstances.

Similarly software may be stored and distributed in various ways and using different means and the particular software storage and execution configurations described above may be varied in many different ways. Thus software implementing the techniques described above may be distributed on various types of computer readable media not limited to the forms of memory that are specifically described.

Furthermore although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claims.

