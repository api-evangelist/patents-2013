---

title: Stub domain for request servicing
abstract: Techniques for reclaiming resources from guest computing systems while those systems are waiting for responses to requests in virtualized and/or distributed computer systems are described herein. At a time after issuing a request and determining that the response will take longer than a threshold length of time, one or more computer system entities within a computer system invoke one or more computer system capabilities to at least instantiate a listener object, transfer the listener object to another system domain, suspend the guest computing system and reclaim resources from the suspended guest computing system. When the response is returned to the listener object, the guest computer system is restored and the response is forwarded to the restored guest. While the guest computing system is suspended, the reclaimed resources are made available to other computer system entities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448827&OS=09448827&RS=09448827
owner: Amazon Technologies, Inc.
number: 09448827
owner_city: Seattle
owner_country: US
publication_date: 20131213
---
Modern computer systems frequently interact with remote systems and applications sending requests to these remote systems and waiting for responses. During the time between when a request is made to a remote system and a response is received such systems may not be able to perform any other work and may remain idle while still consuming resources such as memory central processing unit and other such resources. In computer systems involving virtualized computing environments where a plurality of guest machines may share such computer resources expending resources on idle machines may potentially cause resource shortages as those resources may not be available to other guest virtual machines. Such resource shortages may lead to resource contention and may lead to system slowdowns system delays and or system outages which may in turn adversely affect overall system performance. In systems where a host system may support multiple guest virtual machines the ability of a system to reclaim resources from idle machines and redistribute those resources to active machines may become important to maintaining system performance.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include methods systems and processes for managing resources on computing systems and executable code operating thereon. In particular techniques are disclosed for utilizing processor capabilities to facilitate redistribution of system resources such as memory central processing units CPUs system storage other system hardware and the like by and for operational elements of computer systems including but not limited to hypervisors operating systems guest operating systems and guest applications while a plurality of these operational elements are operating on one or more computer systems. A distributed and or virtualized computer system may benefit from efficient management of computer system resources in order to facilitate better system performance. In computer systems where system resources may be oversubscribed effectively reclaiming unused or underutilized resources from guest virtual machines including resources such as CPU cycles memory and other such finite resources and redistributing those resources to other systems may serve to keep all such elements functioning efficiently. Without effective management of resources the resources may become scarce and or unavailable leading to system slowdowns reductions in performance failure of running applications and or failure of the operational elements. Ineffective management of system resources may also in some embodiments require a system to be configured with additional hardware resources in order to maintain high levels of performance.

In an illustrative example a computer system with a plurality of guest virtual machines may exhibit decreased system performance when certain resources become scarce. A system may exhibit decreased performance when shared system resources including but not limited to system memory system disk resources network resource disk input output bandwidth socket handles network handles file handles or other such operating system limited resources become scarce. In such shared and or virtual systems a tightly constrained finite resource such as system memory may become overcommitted in order to facilitate better overall system performance under the assumption that not all guest systems may need their full memory allocation at the same time. When resources become scarce the resources may be temporarily reallocated from one system to another in order to keep one operating at full efficiency. The deleterious effect that this reallocation may have on the system that gives up system resources such as memory and CPU cycles may be greatly reduced if that system is mostly idle and not using some or all of its resources for some period of time provided the resources may be returned before the donating system needs them.

Techniques disclosed herein include employing resource management techniques for managing computer system resources using a resource manager such as a hypervisor on a computer system implementing a system virtualization technique whereon a plurality of guest virtual machines running on one or more host computer systems have been implemented. In some embodiments a guest virtual machine also referred to as a virtual machine a VM a virtual machine instance a guest instance a guest machine a guest domain an application domain or other such terms or an application running thereon may issue a request to a second computer system service or resource. The request may be one of the many possible types of requests that may be made by one computer system to another computer system service or resource such as but not limited to a request for data a request to perform some calculation a request to update some data on the remote system a request to validate credentials a request for website display pages and or data a request to update a shared virtual space or a combination of these and or other types of requests. In some embodiments the second computer system service or resource may be running on the same computer system as the guest virtual machine or application or it may be running on a different computer system or it may be running on a combination of nodes operating on both locally and remotely. The guest virtual machine or application running on the guest virtual machine and the second computer system service or resource may be connected to each other via a number of mechanisms including but not limited to a network such as a local network an internal network a system backplane a public network such as the Internet a wide area network a wireless network a mobile network a distributed computing system with a plurality of network nodes and or a combination of these and or other network elements.

In some embodiments the request issued by a guest virtual machine to a second computer system service or resource may require a response. For example if a purchasing application on a guest virtual machine issues a request to a credit card processing service to validate a credit card transaction the guest virtual machine requires a response from the credit card processing service before the purchasing application can complete. The response to this request may be for example an acceptance of the purchase or a denial of the purchase or a notification that the request was received and will be processed later or a number of other such responses. As may be contemplated when a guest virtual machine sends a request to a second computer system service or resource that guest virtual machine may not be able to perform any other actions until a response is received. In such systems where a response is required before proceeding the guest machine may be in a spinning or busy wait state until the response returns and it may be consuming system resources such as memory CPU cycles or other such resources while it may not be actually accomplishing any useful work. In some embodiments where the system may be waiting for a relatively long time before the response returns the requesting guest virtual machine or application may be paused and or suspended during the request in order to free the underutilized resources provided that some mechanism may be provided to restore the guest virtual machine at least by the time that the response returns and or to receive the response when it arrives.

In some embodiments a guest virtual machine or an application running thereon may issue a request to a second computer system service or resource. The request may be issued using a standard request reply protocol such as hypertext transfer protocol HTTP secure shell SSH remote desktop protocol RDP remote procedure call RPC or may be issued using techniques from some higher level language such as Java JavaScript Ruby C and the like or may be issued with an informal custom ad hoc or other such mechanism for associating requests and replies. As may be contemplated the guest virtual machine or an application running thereon may determine that it has no useful work to perform until the response returns from the second computer system service or resource. The determination that there is no useful work to perform may be performed by the application itself or by a controller element on the virtual machine or by a process running on or under control of a controlling domain such as a hypervisor or a domain zero on the host computer system or by a combination of these and or other system elements.

The guest machine or an application running thereon may further determine that it is likely that the response may take a considerable length of time to complete and that the considerable length of time may be greater than a defined derived and or determined threshold length of time. For example in some embodiments the threshold length of time may be set by the host system as a static value and any response time that exceeds that threshold length of time may make the candidate guest machine a candidate for suspension. In some embodiments threshold length of time may be initially set by the host system but may also be adjusted by the host system as the demand for one or more system resources increases and or decreases. In some embodiments the threshold may be set by the guest machine based on such factors as past performance of similar response times and in such embodiments the guest machine may nominate itself for suspension by for example sending a message command API call or other such communication to a controlling domain or other such process on the host machine. As may be contemplated a computer system may use a combination of these and or other such mechanisms for setting and or adjusting the threshold. As also may be contemplated a computer system may also maintain a plurality of thresholds and may choose to apply different thresholds to different users machines or applications based on a variety of system factors including but not limited to the time of day system resource loading classification of guest machines classification of customers and or owners of guest machines or a combination of these and or other such system factors.

The determination that the response may take a considerable length of time to complete may be performed by the application itself or by a controller element on the virtual machine or by a process running on or under control of a controlling domain such as a hypervisor on the host computer system or by a combination of these and or other system elements. The determination that the response may take a considerable length of time to complete may be based on a number of factors including but not limited to the nature of the request the nature of the second computer system service or resource the distance latency bandwidth or other such factors of connectivity between the two systems whether the second computer system service or resource may forward the request to a third and or subsequent computer systems services or resources historical data about past similar requests performance heuristics an explicit configuration value entered by an application developer and or a combination of these and or other such factors. The determination of what may constitute a considerable length of time for the response and thus whether this guest virtual machine may be a good candidate for suspension and reclamation of resources may also depend on a number of factors including but not limited to the length of time it may take to suspend the guest virtual machine the length of the time it may take to reclaim the resources the length of time it may take to return the reclaimed resources the length of time it may take to restore the guest virtual machine configuration factors of the guest virtual machine including the type of machine the type of customer the business value of the machine and other such factors overall system policies and or a combination of these and or other such factors.

As may be contemplated the amount of memory associated with and the complexity of a guest virtual machine and of the application or applications running thereon may be a determining factor in deciding whether a guest virtual machine may be a good candidate for suspension and reclamation. For example a guest virtual machine with only a single application and a small amount of memory may be suspended and restored very quickly and thus it may be beneficial to suspend the machine even during a comparatively short wait for a response and even though suspending such a machine may only yield a small amount of reclaimed resources. By contrast a large and complex guest virtual machine may not be a good candidate for suspension for anything except very lengthy waits because the overhead associated with suspension and restoring such a machine may counter the benefits of reclaiming more resources.

In the event that it is determined that due to the nature of the request and or the nature of the guest virtual machine a particular guest virtual machine is a good candidate for suspension while waiting for a response the guest virtual machine or an application running thereon may create a listener stub that is at least configured to wait for and receive the response. In some embodiments the guest virtual machine on an application running thereon may create a listener stub by authoring a stub configuration and transferring that stub configuration to a stub domain. In some embodiments a stub domain may be a system process application or other such entity running on the host machine under the control of controlling domain such as a hypervisor. A stub domain may be configured to at least receive stub configurations and to receive and process responses according to directions contained in or associated with stub configurations. A stub configuration may contain a handling plan which may contain data information and or instructions describing a one or more conditional handlers for the response to the request. In some embodiments the handling plan and or the conditional handlers may include information including but not limited to one or more network interfaces of the requesting machine hostnames for the guest and or second systems port names and or ids for the guest and or second systems system addresses network and or other protocols interaction instructions such as application contracts message request and response correlation identifiers machine instance identifiers application identifiers and or a combination of these and or other such information that may be useful for associating responses to requests and or may be useful for processing responses.

In some embodiments a conditional handler may include logic that may specify at least how to react to a certain response. For example in an embodiment where a request is sent using a standard request reply protocol such as HTTP a set of one or more conditional handlers may include a first conditional handler to receive and discard an HTTP 100 Continue response may include a second conditional handler to receive and process an HTTP 200 OK response may include a third conditional handler to receive and buffer the results of an HTTP 206 Partial Content response and may include fourth and subsequent conditional handlers to receive and handle HTTP errors such as 400 Bad Request 403 Forbidden or 404 Not Found . In some embodiments conditional handlers for common responses such as for the OK and HTTP error codes may be incorporated into the stub domain itself and or they may be included as necessary in each conditional handler. In another example such as in the purchasing system described herein the conditional handlers may include conditional handlers for responses from the credit card system that indicate whether the transaction was approved denied or whether some error occurred and what are the appropriate responses. In some embodiments configuration options including but not limited to maximum wait times before a timeout maximum number of retries or other such options may be included in the stub configuration along with conditional handlers indicating what action or actions should be taken as a result of violations of such configuration options. As may be contemplated other types of conditional handlers may be considered as being within the scope of the present disclosure.

As may be contemplated when a guest virtual machine or an application running thereon sends a request to a second computer system service or resource the guest virtual machine may have created and or attached to a listener socket to receive the request as part of the process of making a request. The guest virtual machine may create a listener stub by combining the stub configuration with information about the listener socket such as a socket handle and providing the combined information to the stub domain. In some embodiments the guest virtual machine may duplicate the listener socket handle as part of the process for creating a listener stub thus creating two listener socket handles. The guest virtual machine may then transfer the duplicated listener socket handle together with the stub configuration to the stub domain. In some embodiments the guest virtual machine may retain the original listener socket handle or it may destroy the original listener socket handle. In some embodiments the listener socket handle may be included in the stub configuration or it may be separate from the stub configuration. The combined stub configuration and listener socket handle may be transferred to the stub domain by a variety of mechanisms including but not limited to by sending a serialized message containing the combined information or placing a message or some other such data structure in shared system memory and notifying the controlling domain or stub domain or by placing the message or some other such data structure in a system queue that the stub domain checks periodically or by other such methods and or mechanisms. In some embodiments the guest virtual machine may not duplicate and transfer the listener socket handle to the stub domain but may instead transfer the information necessary to allow the stub domain to duplicate the listener socket handle. The stub domain may then in turn create the duplicate listener socket handle itself. The guest virtual machine or an application running thereon may for example specify a port and a protocol for the stub domain to use to construct and or attach to a new socket in order to listen for a reply.

When the stub configuration and socket information have been transferred to the stub domain the guest virtual machine or an application running thereon may be ready for suspension. In some embodiments the guest virtual machine may communicate with the hypervisor or controlling domain that it is ready for suspension. The communication may be made via a hypervisor trigger event or an application programming interface API call to the hypervisor or by some other such mechanism. In some embodiments a process running on or under the control of the hypervisor may monitor transfers to the stub domain and may use the existence of such transfers at least as an indicator that a suspension may occur. In some embodiments a process running on or under the control of the stub domain may similarly monitor transfers to the stub domain and may use the existence of such transfers at least as an indicator that a suspension may occur. The hypervisor or controlling domain upon receiving an indicator that a guest virtual machine may be suspended may at least pause the guest virtual machine may additionally evict at least a portion of the guest virtual machine by copying memory pages and or other resource state to a suspend storage location and may additionally reclaim the corresponding physical memory pages from the paused guest virtual machine in order that they may be provided to one or more other guest virtual machines or applications running thereon.

After receiving the listener stub the stub domain may receive a response to the request. In some embodiments and depending at least partially on the nature of the request and or at least partially on the nature of the response the stub domain may receive the entirety of the response or a portion of the response. As described herein the response may be data that may be required by the requesting guest virtual machine or application or it may be a status or error response or it may be some other type of response. The stub domain may determine which of the one or more stub listeners that the response belongs to by for example comparing the response values to values stored in the one or more stub configurations. The stub domain may also determine how to process the response according to the conditional handlers of the appropriate stub configuration. In some embodiments when the stub domain is not able to determine which stub listener a response belongs to the stub domain may ignore the response or it may alert the hypervisor or it may alert a process running under the control of the hypervisor or it may alert a process running on the host machine or it may alert one or more of the other guest virtual machines or it may do a combination of these and or other actions in response to the response. Similarly if the stub domain is not able to locate an appropriate conditional handler for the response the stub domain may also ignore the response or it may alert the hypervisor or it may alert a process running under the control of the hypervisor or it may alert a process running on the host machine. In some embodiments the stub domain upon receiving an unrecognized or unknown response may have a default conditional handler that at least restores the suspended guest virtual machine and forwards the response to the restored guest virtual machine.

As part of processing the response the stub domain may determine that the suspended guest virtual machine may be restored so that the guest virtual machine may further process the response. In the event that a partial response is received by the stub domain the stub domain may determine that the suspended guest virtual machine may remain suspended until some or all of the remainder of the response may be received or it may determine that the guest virtual machine may be restored to deal with the partial response. As may be contemplated conditional handlers can be devised to evaluate the amount and or content of the response as well as the type or category of the response and to process the response accordingly. For example a conditional handler for a request that requires the delivery of a stream of video may instruct the stub domain to save and buffer a portion of the video stream at the stub handler before restoring the suspended guest virtual machine or it may instruct the stub domain to restore the guest virtual machine when the entire video stream has been delivered or it may restore the guest virtual machine at the first frame and rely on the buffering capabilities of the guest.

After the stub domain makes the determination that the suspended guest virtual machine may be restored the stub domain may communicate to the hypervisor to begin the restoration from the suspend storage. In some embodiments the stub domain may communicate the request by sending a message to the hypervisor indicating which machine may be restored. While the hypervisor is restoring the suspended guest machine the stub domain may continue receiving response data including but not limited to further data for the current response other responses and or response data for the same suspended virtual machine and or other responses and or response data for other suspended virtual machines and the stub domain may process these additional responses and response data by caching the data forwarding it generating additional requests to the hypervisor ignoring it or a combination of these and or other actions.

In some embodiments once the hypervisor completes restoration of the suspended guest virtual machine including but not limited to reclaiming resources such as memory and CPU cycles from other guest virtual machines restarting the guest virtual machine and or restoring at least a portion of the applications running on the guest virtual machine the hypervisor may signal the stub domain that the guest virtual machine is restored and ready to receive the response. As may be contemplated if the response returns exceptionally rapidly the guest virtual machine may not be fully suspended before it is time to restore it. For example a response might generally take tens of seconds under normal circumstances but an error response that comes in as a result of for example a badly formed request might return much more rapidly. In such systems the hypervisor may stop the suspension and return the guest virtual machine to an operational state without bothering to complete the suspension in order to avoid the possible overhead of restoration.

With the guest virtual machine restored and the response available the stub domain may complete the process by forwarding the response to the guest virtual machine or an application running thereon. As mentioned previously in some embodiments the guest virtual machine may have retained the original listener socket handle or it may have destroyed the original listener socket handle after transferring it to the stub listener or it may have never had a listener socket handle. In some embodiments where the socket was destroyed or where the socket never existed the stub domain may transfer the response by opening a new socket connection on the guest domain and forwarding bytes received on the socket on the stub domain to the socket on the guest virtual machine. In such embodiments the stub listener may remain in place on the stub domain until the response has been completely received in order to facilitate transferring the complete response. As may be contemplated embodiments that may transfer the response data from the stub domain to the guest virtual machine may be implemented using a buffer to transfer the response data or may be implemented by directly forwarding data from the receiving socket on the stub domain to the receiving socket on the guest virtual machine.

In some embodiments where the guest virtual machine may have retained the original listener socket handle the guest virtual machine may be restored in a state where it is ready to process the response without creation of a new socket listener handle. In such embodiments the guest virtual machine may have been ready to receive a response when it was suspended and thus may be ready to receive the response when it is restored. In these embodiments the stub listener may be removed from the stub domain at any point after the guest virtual machine begins receiving the response data. As may be contemplated in some embodiments the guest virtual machine may restored in a state that is not the same as the state that it was in when it was suspended. For example some of the resources such as system memory input output handles system sockets and or other such system resources that may have been reclaimed by the host system when the guest virtual machine was suspended may not be returned to the guest machine when it is restored or may be returned to the guest machine in an altered state. This change in state may occur at least in part due to a decision by the host system that for example the guest virtual machine may no longer have a requirement for those resources or that the resources may be returned in a more efficient manner or due to other such resource optimization determinations.

In some embodiments the stub domain may instead facilitate the transfer of the response by using a duplicate of the listener socket. In some embodiments where the guest virtual machine may not have retained the original listener socket handle the stub domain and or the hypervisor may transfer the reply by duplicating the listener socket handle on the guest virtual machine after it has been restored. The listener socket handle may be duplicated by sending a message back to a receiving process or application on the guest virtual machine instructing it to create and reattach the appropriate listener socket handle. In such embodiments the listener stub may be removed from the stub domain after the listener socket handler has been created and is receiving data. As may be contemplated in any of the embodiments mentioned herein where the stub domain begins by reading the response data the stub domain may need to rewind some portion of the received response to the socket stream before the suspended guest virtual machine begins processing the response so that the guest virtual machine may process the entirety of the response. In some embodiments this return may be accomplished by rewinding the stream by re queuing a portion of the received data by using look ahead methods or by a combination of these and or other methods. In some embodiments the transfer of data from the stub domain may be accomplished by a combination of the methods mentioned herein. For example a stub domain may receive a response create a duplicate socket handler on the restored guest virtual machine begin by transferring the already received response data to that socket handler and then once the guest virtual machine has caught up transfer control of the reception of the data to the duplicate socket handler on the restored guest. In some embodiments the response may be sent to the guest virtual machine by receiving the response at the stub domain processing it writing the response directly into the image of the suspended guest virtual machine and only then restoring the guest virtual machine. In such embodiments the guest virtual machine may be restored in a state such that it appears to the guest virtual machine that it has already received the response and processed it. As may be contemplated other types and combinations of methods for delivering the response to the restored guest virtual machine may be considered as being within the scope of the present disclosure.

There are many ways that the stub domain the hypervisor the guest virtual machine an application running on the guest virtual machine and or a combination of these and or other computer system entities may receive a response restore a suspended virtual machine and transmit the response to the restored virtual machine. For example as mentioned above a stub domain may institute a general conditional handler for a time limit or timeout on receiving a response. Such a timeout may be handled by having the stub domain initiate a restore on the guest virtual machine and then having the stub domain generate an artificial timeout response to be sent to the restored guest virtual machine. The receiving guest domain or application running thereon may process the artificial timeout response as if it were a real timeout response by for example converting the response to an exception and using that exception to initiate appropriate timeout behavior. Alternately and in some embodiments under user control the controlling domain may be configured to respond to a timeout by incrementing a counter and resending the request on behalf of the suspended guest virtual machine and only initiating a timeout event after a possibly configurable number of tries have been attempted. As may be contemplated other types of restorations responses configurations and such may be considered as being within the scope of the present disclosure.

If the guest virtual machine enters a wait for response state and becomes a waiting virtual machine it may be determined whether the guest virtual machine should be suspended and the resources reclaimed. In some embodiments whether the guest may be suspended and the resources reclaimed may be decided based on a variety of factors including but not limited to the amount of resources available for reclaiming from the guest virtual machine the current scarcity of the resources the amount of time it may take to suspend and restore the guest virtual machine the presence and or amount of any overhead associated with suspending and restoring the guest virtual machine the nature of the guest virtual machine the nature of the applications running on the guest virtual machine the business value of the guest virtual machine and or the applications running thereon or a combination of these and or other factors. Both the decision to place the guest virtual machine and the decision to suspend the waiting guest virtual machine may be made by processes running on the guest virtual machine or by processes running on a controlling domain such as a hypervisor or by processes running on the host system or by a process or processes running on another system resource or entity or by a combination of processes running on these and or other computer systems resources or entities.

In the event that it is determined that the waiting virtual machine should be suspended the waiting guest virtual machine may first create a response listener . In some embodiments the response listener may be created as a set of one or more resource objects which may describe and or implement actions and resources that may be used by the computer system to receive a response or reply to the previously sent request. The objects in the set of one or more resource objects may include but not be limited to such objects as network identifying information for the requesting guest virtual machine network identifying information for one or more receiving computer systems resources or services one or more conditional handlers which may describe one or more actions to take depending on the response received one or more timeout values one or more actions to take as a response to timeouts errors and or other such system events and or other such objects. In some embodiments the response listener may be created by the guest virtual machine as a listening stub. A stub is an implemented interface with a set of functionality and or actions and that is designed to wait for and respond to one or more external events such as one or more messages one or more conditions some data and or a combination of these and or other such events. As may be contemplated a listener stub is a stub that is designed to listen for or wait for a response. The listener stub may then be transferred to one or more other processes on the host system that are configured to at least receive and implement the operations associated with listener stub objects such as for example a stub domain running under the control of a controlling domain such as a hypervisor. In some embodiments the response listener may be created by the guest virtual machine as the description of a stub and the described stub may be instantiated by another process or processes running on the host system. For example the description of the listener stub may be instantiated by the stub domain where that stub domain is configured to at least receive stub descriptions instantiate the described stub and implement the operations associated with listener stub objects.

After the response listener has been created the response listener may begin waiting for a response while the waiting virtual machine may be suspended. The waiting virtual machine may be suspended by sending a message to a controlling domain such as a hypervisor that the waiting virtual machine is ready to be suspended. The hypervisor or a process or processes running under the control of the hypervisor may manage the suspension of the waiting guest virtual machine by at least pausing the waiting virtual machine and writing its memory and other such resources to a suspend storage location. At some point later the response listener may receive a response or reply from a remote computer system service or resource that may be connected to the guest virtual machine via a network . The response may be one of one or more acceptable responses such as data requested or the result of computation or the beginning of a stream of data or access to an external resource or any of a number of other responses. The response may also be a status message indicating that the response is still pending or one of a variety of errors and or failures indicating the request has failed or may fail. As part of the one or more actions that may be associated with the response the response listener may notify the suspended virtual machine that the response has been received which may restore the guest virtual machine.

If it is determined that the guest virtual machine may be suspended in some embodiments the guest virtual machine may create a listener stub and or cause a listener stub to be created as described herein and at least in connection with and in accordance with at least one embodiment. The created listener stub may be instantiated in a stub domain that is configured to at least allow listener stubs to receive responses to requests and to process those responses. In some domains a stub domain may be one or more processes operating on the host machine and as may be contemplated may be operating under the control of a controlling domain such as a hypervisor or may be operating under the control of the host machine operating system or may be operating under the control of a combination of these and or other such computer system entities.

Once the listening stub is available to process any responses that may come in the guest virtual machine may be suspended. In some embodiments the guest virtual machine may inform a controlling domain such as a hypervisor that the machine is ready for suspension and may have some or all of its resources reclaimed for a length of time. In some embodiments the hypervisor may write the memory and or other resource state of the guest virtual machine to a suspended virtual machine storage area located in a suspend storage under the control of a controlling domain such as a hypervisor as described herein and in accordance with at least one embodiment.

As mentioned previously at least in connection with a computer system may provide hosting and or resources for one or more virtual machines. illustrates a distributed and or virtual computing environment for suspending one or more of a plurality of guest virtual machines while waiting for a response and restoring those guest virtual machines after receiving a response as described at least in connection with and in accordance with at least one embodiment. One or more guest virtual machines may be operating on one or more controlling domains that may in turn be operating on one or more host computer systems . Each of the one or more host computer systems may in turn be operating within a distributed and or datacenter computing environment such as a local and or regional data center with a plurality of hosts and a plurality of guest computing systems. As may be contemplated each host computing system may have at any particular time one or more suspended virtual machines that may be waiting for responses to requests and that may in some embodiments have their pre suspension memory and or resource state stored in a suspend storage as described at least in connection with and in accordance with at least one embodiment. For each suspended virtual machine there may be one or more listening stubs instantiated within a stub domain that may be at least configured to instantiate listening stubs and provide functionality to receive and process replies or responses to requests sent out by the virtual machines as described at least in connection with and in accordance with at least one embodiment. As may be contemplated the host computer systems illustrated in environment may be running on a distributed and or virtual computer system such as may be found in a data center and these systems may be made available to customers and other types of users for various tasks. In such examples the computer system service or resource that receives the request and prepares the potentially delayed response may be located on another guest machine on the same host or on another guest machine on a different host in the same computing environment or on another machine in a different location such as a remote data center customer site server or other such locations.

When a guest computer system sends a request to a remote system that requires a response as described at least in connection with and in accordance with at least one embodiment the guest computer system may determine whether there is any other work that should be done. A guest computer system may determine whether there is any other work that should be done instead of and or prior to suspension based on a number of factors associated with the guest computer system and also with a number of factors associated with a host system or with other guest computer systems that may be running on that host system including but not limited to the nature and or criticality of the work remaining on the guest computer system the presence and degree of any resource shortages on the host machine the amount and or type of the resources associated with the guest computer system the nature of the guest computer system the owner and or customer of the guest computer system or a combination of these and or other such factors. For example a guest computer system may determine that while it has work that it could do it may be better to delay performance of that work both because that work is not very critical and because the host system has a high level of need for the resources associated with that guest computer system. In another example the host system that contains the guest computer system in question or another guest running on the host system may have a strong need for the resources but the work under consideration is critical for the guest computer system. As may be contemplated these examples are merely illustrative and other such methods and factors for determining whether to perform other work before suspension may be considered as within the scope of the present disclosure.

In the event that the guest computing system determines that there is other work that should be done then the guest computer system may perform that other work. After that other work is performed the guest computer system may once again determine whether any of the work in its list of items is more important than suspending the guest and releasing the resources. The guest computing system may make this determination based on the previous set of factors and or on a new set of factors. In the event that it is determined that there is no more work that should be done the guest computer system may next determine whether the response arrival time is far enough in the future to justify suspension of the guest machine. As mentioned previously at least in connection with and in accordance with at least one embodiment the determination of whether the response arrival time is far enough in the future to justify suspension of the guest machine may depend on a variety of measurements and factors including but not limited to a predicted estimated measured or known length of time for the response the amount of time that it may take to suspend and restore the guest virtual machine the degree of resource need on the host system the amount of resources associated with the guest virtual machine or a combination of these and or other such factors and measurements. As may be contemplated if in step the guest computer system spent at least a portion of the expected response time doing other work then the amount of time spent may also be a factor in determining whether or not to suspend the guest virtual machine.

If the guest computer system determines that the response arrival time is far enough in the future to justify suspension then the guest computer system may create a listener stub as described at least in connection with and in accordance with at least one embodiment. Once the listener stub is created the guest computer system may request suspension of itself by contacting a controlling domain on the host machine such as a hypervisor or domain zero and the controlling domain may then suspend the guest computer system as described at least in connection with and in accordance with at least one embodiment. At some point after suspending the guest computer system the listener stub may receive a response to the request and may in order to complete the process of receiving that request as described at least in connection with and in accordance with at least one embodiment restore the guest computer system so that it may process the response. At some point after suspending the guest computer system the listener stub may experience a response timeout if for example the response or reply does not arrive within a set time as determined by the guest computer system or by the host system or by the stub domain or by the controlling domain on the host system or by a combination of these and or other such computer system entities. In the event that there is a response timeout the stub domain may restore the guest computer system and may alert the restored guest virtual machine that no response was received before the response timeout. As may be contemplated the operations illustrated by steps and in process may be performed asynchronously and or simultaneously under the control of such systems as event handlers signal processors polling or other such systems and these and or other such methods of determining whether a response has been received whether a timeout has occurred or whether other such similar events or conditions have occurred may be considered as within the scope of the present disclosure.

In some embodiments if the guest computer system determines that the response arrival time is not far enough in the future to justify suspension then the guest machine may elect to avoid suspension and idle while waiting for the response to return. As illustrated herein a system that remains idle and that is not suspended while waiting for a response may in some embodiments experiencing a response timeout which may engender the guest computer system processing of the response timeout which may include such actions as issuing an error resending the request alerting a user logging the timeout in a system and or application log or a combination of these and or other such actions. At some point after beginning to idle while waiting for the response the guest computer system may receive a response and process the response. As may be contemplated the operations illustrated by steps and in process may be performed asynchronously and or simultaneously under the control of such systems as event handlers signal processors polling or other such systems and these and or other such methods of determining whether a response has been received whether a timeout has occurred or whether other such similar events or conditions have occurred may be considered as within the scope of the present disclosure.

A listener stub may in some embodiments contain information about the guest virtual machine including but not limited to identifiers of the machine its suspension state the controlling domain hypervisor or domain zero that supervises its operation and other such information. A listener stub may also contain one or more conditional handlers that describe how to process certain responses. For example a listener stub may contain a first conditional handler which may be executed by a process or processes and which may be at least configured to restore the suspended guest virtual machine before performing a series of one or more other actions. A listener stub may also contain for example a second conditional handler which may be executed by a process or processes and which may be at least configured to perform one or more actions before restoring the guest virtual machine and performing a series of one or more other actions. As may be contemplated the instructions in the conditional handlers may be scripted or may contain sections of executable code or modules or may include combinations of other such executable or interpretable processes or procedures and as also may be contemplated the instructions may be executed and or processed by a process or processes under the control of the listener stub or may be executed and or processed by a process or processes under the control of some other computer system entity.

As a result of sending out a request to a computer system resource or entity that may take a length of time a guest virtual machine may create a listener stub and transfer the listener stub to a stub domain as described at least in connection with and in accordance with at least one embodiment. The guest virtual machine may then notify the controlling domain that it may suspend the guest virtual machine. If the controlling domain determines that the guest virtual machine is a good candidate for suspension the controlling domain may suspend the operations of the guest virtual machine and may transfer the memory and or other such state information of the suspended guest virtual machine to suspend storage as described at least in connection with and in accordance with at least one embodiment. At some point in the future the stub domain may receive a response or reply to the request as described at least in connection with and may in some embodiments do some processing of the response before notifying the controlling domain that a response was received. The controlling domain may then request a restoration of the appropriate suspended guest virtual machine from the suspend store and the suspend storage and or the controlling domain may then begin restoring the suspended guest virtual machine. The restored guest virtual machine may then notify the controlling domain that the guest virtual machine has been restored and the controlling domain may then notify the stub domain to prepare the response. In some embodiments the restored guest virtual machine combine steps and and may notify the stub domain directly to prepare the response. The stub domain may then prepare the response and may transfer the prepared response to the restored guest virtual machine.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some even a majority of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed system.

The data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members used in the above conjunctive phrase at least one of A B and C and at least one of A B and C refers to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C to each be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

